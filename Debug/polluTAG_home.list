
polluTAG_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb40  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801ec78  0801ec78  0002ec78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fb28  0801fb28  0002fb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc00  0801fc00  00030164  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc00  0801fc00  0002fc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc08  0801fc08  00030164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc08  0801fc08  0002fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc10  0801fc10  0002fc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000164  20000000  0801fc14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001ebc  20000168  0801fd78  00030168  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002024  0801fd78  00032024  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030164  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018e  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004aef9  00000000  00000000  000301d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000baba  00000000  00000000  0007b0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003d00  00000000  00000000  00086b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002e3d  00000000  00000000  0008a888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b675  00000000  00000000  0008d6c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004b00f  00000000  00000000  000b8d3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3a89  00000000  00000000  00103d49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000fdb4  00000000  00000000  001d77d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  001e7588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000168 	.word	0x20000168
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ec60 	.word	0x0801ec60

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000016c 	.word	0x2000016c
 8000174:	0801ec60 	.word	0x0801ec60

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b44:	d2ed      	bcs.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fmul>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d06f      	beq.n	8000d98 <__aeabi_fmul+0xf8>
 8000cb8:	441a      	add	r2, r3
 8000cba:	ea80 0c01 	eor.w	ip, r0, r1
 8000cbe:	0240      	lsls	r0, r0, #9
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc6:	d01e      	beq.n	8000d06 <__aeabi_fmul+0x66>
 8000cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ccc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce0:	bf3e      	ittt	cc
 8000ce2:	0049      	lslcc	r1, r1, #1
 8000ce4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	ea40 0001 	orr.w	r0, r0, r1
 8000cee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf2:	2afd      	cmp	r2, #253	; 0xfd
 8000cf4:	d81d      	bhi.n	8000d32 <__aeabi_fmul+0x92>
 8000cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0e:	bf08      	it	eq
 8000d10:	0249      	lsleq	r1, r1, #9
 8000d12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1a:	3a7f      	subs	r2, #127	; 0x7f
 8000d1c:	bfc2      	ittt	gt
 8000d1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d26:	4770      	bxgt	lr
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	dc5d      	bgt.n	8000df0 <__aeabi_fmul+0x150>
 8000d34:	f112 0f19 	cmn.w	r2, #25
 8000d38:	bfdc      	itt	le
 8000d3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3e:	4770      	bxle	lr
 8000d40:	f1c2 0200 	rsb	r2, r2, #0
 8000d44:	0041      	lsls	r1, r0, #1
 8000d46:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4a:	f1c2 0220 	rsb	r2, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d56:	f140 0000 	adc.w	r0, r0, #0
 8000d5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5e:	bf08      	it	eq
 8000d60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d64:	4770      	bx	lr
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xce>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xe6>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e78f      	b.n	8000cb8 <__aeabi_fmul+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	bf18      	it	ne
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d00a      	beq.n	8000dbe <__aeabi_fmul+0x11e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1d8      	bne.n	8000d66 <__aeabi_fmul+0xc6>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	bf17      	itett	ne
 8000dc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc8:	4608      	moveq	r0, r1
 8000dca:	f091 0f00 	teqne	r1, #0
 8000dce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd2:	d014      	beq.n	8000dfe <__aeabi_fmul+0x15e>
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	d101      	bne.n	8000dde <__aeabi_fmul+0x13e>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	d10f      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dde:	ea93 0f0c 	teq	r3, ip
 8000de2:	d103      	bne.n	8000dec <__aeabi_fmul+0x14c>
 8000de4:	024b      	lsls	r3, r1, #9
 8000de6:	bf18      	it	ne
 8000de8:	4608      	movne	r0, r1
 8000dea:	d108      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_fdiv>:
 8000e08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e10:	bf1e      	ittt	ne
 8000e12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e16:	ea92 0f0c 	teqne	r2, ip
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d069      	beq.n	8000ef4 <__aeabi_fdiv+0xec>
 8000e20:	eba2 0203 	sub.w	r2, r2, r3
 8000e24:	ea80 0c01 	eor.w	ip, r0, r1
 8000e28:	0249      	lsls	r1, r1, #9
 8000e2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2e:	d037      	beq.n	8000ea0 <__aeabi_fdiv+0x98>
 8000e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf38      	it	cc
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	bf24      	itt	cs
 8000e52:	1a5b      	subcs	r3, r3, r1
 8000e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6a:	bf24      	itt	cs
 8000e6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e78:	bf24      	itt	cs
 8000e7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8a:	d1e0      	bne.n	8000e4e <__aeabi_fdiv+0x46>
 8000e8c:	2afd      	cmp	r2, #253	; 0xfd
 8000e8e:	f63f af50 	bhi.w	8000d32 <__aeabi_fmul+0x92>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea8:	327f      	adds	r2, #127	; 0x7f
 8000eaa:	bfc2      	ittt	gt
 8000eac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb4:	4770      	bxgt	lr
 8000eb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	e737      	b.n	8000d32 <__aeabi_fmul+0x92>
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xc2>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xda>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e795      	b.n	8000e20 <__aeabi_fdiv+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d108      	bne.n	8000f10 <__aeabi_fdiv+0x108>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	f47f af7d 	bne.w	8000dfe <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	f47f af70 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e776      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f10:	ea93 0f0c 	teq	r3, ip
 8000f14:	d104      	bne.n	8000f20 <__aeabi_fdiv+0x118>
 8000f16:	024b      	lsls	r3, r1, #9
 8000f18:	f43f af4c 	beq.w	8000db4 <__aeabi_fmul+0x114>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e76e      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1ca      	bne.n	8000ec2 <__aeabi_fdiv+0xba>
 8000f2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f30:	f47f af5c 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f38:	f47f af3c 	bne.w	8000db4 <__aeabi_fmul+0x114>
 8000f3c:	e75f      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_uldivmod>:
 8000f8c:	b953      	cbnz	r3, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f8e:	b94a      	cbnz	r2, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f90:	2900      	cmp	r1, #0
 8000f92:	bf08      	it	eq
 8000f94:	2800      	cmpeq	r0, #0
 8000f96:	bf1c      	itt	ne
 8000f98:	f04f 31ff 	movne.w	r1, #4294967295
 8000f9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000fa0:	f000 b970 	b.w	8001284 <__aeabi_idiv0>
 8000fa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fac:	f000 f806 	bl	8000fbc <__udivmoddi4>
 8000fb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb8:	b004      	add	sp, #16
 8000fba:	4770      	bx	lr

08000fbc <__udivmoddi4>:
 8000fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc0:	9e08      	ldr	r6, [sp, #32]
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460f      	mov	r7, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d14a      	bne.n	8001062 <__udivmoddi4+0xa6>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	4694      	mov	ip, r2
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0xe2>
 8000fd2:	fab2 f382 	clz	r3, r2
 8000fd6:	b143      	cbz	r3, 8000fea <__udivmoddi4+0x2e>
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	f1c3 0220 	rsb	r2, r3, #32
 8000fe0:	409f      	lsls	r7, r3
 8000fe2:	fa20 f202 	lsr.w	r2, r0, r2
 8000fe6:	4317      	orrs	r7, r2
 8000fe8:	409c      	lsls	r4, r3
 8000fea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fee:	fa1f f58c 	uxth.w	r5, ip
 8000ff2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ff6:	0c22      	lsrs	r2, r4, #16
 8000ff8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ffc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001000:	fb01 f005 	mul.w	r0, r1, r5
 8001004:	4290      	cmp	r0, r2
 8001006:	d90a      	bls.n	800101e <__udivmoddi4+0x62>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f101 37ff 	add.w	r7, r1, #4294967295
 8001010:	f080 811b 	bcs.w	800124a <__udivmoddi4+0x28e>
 8001014:	4290      	cmp	r0, r2
 8001016:	f240 8118 	bls.w	800124a <__udivmoddi4+0x28e>
 800101a:	3902      	subs	r1, #2
 800101c:	4462      	add	r2, ip
 800101e:	1a12      	subs	r2, r2, r0
 8001020:	b2a4      	uxth	r4, r4
 8001022:	fbb2 f0fe 	udiv	r0, r2, lr
 8001026:	fb0e 2210 	mls	r2, lr, r0, r2
 800102a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800102e:	fb00 f505 	mul.w	r5, r0, r5
 8001032:	42a5      	cmp	r5, r4
 8001034:	d90a      	bls.n	800104c <__udivmoddi4+0x90>
 8001036:	eb1c 0404 	adds.w	r4, ip, r4
 800103a:	f100 32ff 	add.w	r2, r0, #4294967295
 800103e:	f080 8106 	bcs.w	800124e <__udivmoddi4+0x292>
 8001042:	42a5      	cmp	r5, r4
 8001044:	f240 8103 	bls.w	800124e <__udivmoddi4+0x292>
 8001048:	4464      	add	r4, ip
 800104a:	3802      	subs	r0, #2
 800104c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001050:	1b64      	subs	r4, r4, r5
 8001052:	2100      	movs	r1, #0
 8001054:	b11e      	cbz	r6, 800105e <__udivmoddi4+0xa2>
 8001056:	40dc      	lsrs	r4, r3
 8001058:	2300      	movs	r3, #0
 800105a:	e9c6 4300 	strd	r4, r3, [r6]
 800105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001062:	428b      	cmp	r3, r1
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0xbc>
 8001066:	2e00      	cmp	r6, #0
 8001068:	f000 80ec 	beq.w	8001244 <__udivmoddi4+0x288>
 800106c:	2100      	movs	r1, #0
 800106e:	e9c6 0500 	strd	r0, r5, [r6]
 8001072:	4608      	mov	r0, r1
 8001074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001078:	fab3 f183 	clz	r1, r3
 800107c:	2900      	cmp	r1, #0
 800107e:	d149      	bne.n	8001114 <__udivmoddi4+0x158>
 8001080:	42ab      	cmp	r3, r5
 8001082:	d302      	bcc.n	800108a <__udivmoddi4+0xce>
 8001084:	4282      	cmp	r2, r0
 8001086:	f200 80f7 	bhi.w	8001278 <__udivmoddi4+0x2bc>
 800108a:	1a84      	subs	r4, r0, r2
 800108c:	eb65 0203 	sbc.w	r2, r5, r3
 8001090:	2001      	movs	r0, #1
 8001092:	4617      	mov	r7, r2
 8001094:	2e00      	cmp	r6, #0
 8001096:	d0e2      	beq.n	800105e <__udivmoddi4+0xa2>
 8001098:	e9c6 4700 	strd	r4, r7, [r6]
 800109c:	e7df      	b.n	800105e <__udivmoddi4+0xa2>
 800109e:	b902      	cbnz	r2, 80010a2 <__udivmoddi4+0xe6>
 80010a0:	deff      	udf	#255	; 0xff
 80010a2:	fab2 f382 	clz	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 808f 	bne.w	80011ca <__udivmoddi4+0x20e>
 80010ac:	1a8a      	subs	r2, r1, r2
 80010ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b2:	fa1f fe8c 	uxth.w	lr, ip
 80010b6:	2101      	movs	r1, #1
 80010b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80010bc:	fb07 2015 	mls	r0, r7, r5, r2
 80010c0:	0c22      	lsrs	r2, r4, #16
 80010c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80010c6:	fb0e f005 	mul.w	r0, lr, r5
 80010ca:	4290      	cmp	r0, r2
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x124>
 80010ce:	eb1c 0202 	adds.w	r2, ip, r2
 80010d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x122>
 80010d8:	4290      	cmp	r0, r2
 80010da:	f200 80ca 	bhi.w	8001272 <__udivmoddi4+0x2b6>
 80010de:	4645      	mov	r5, r8
 80010e0:	1a12      	subs	r2, r2, r0
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80010e8:	fb07 2210 	mls	r2, r7, r0, r2
 80010ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010f0:	fb0e fe00 	mul.w	lr, lr, r0
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x14e>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x14c>
 8001102:	45a6      	cmp	lr, r4
 8001104:	f200 80ba 	bhi.w	800127c <__udivmoddi4+0x2c0>
 8001108:	4610      	mov	r0, r2
 800110a:	eba4 040e 	sub.w	r4, r4, lr
 800110e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001112:	e79f      	b.n	8001054 <__udivmoddi4+0x98>
 8001114:	f1c1 0720 	rsb	r7, r1, #32
 8001118:	408b      	lsls	r3, r1
 800111a:	fa22 fc07 	lsr.w	ip, r2, r7
 800111e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001122:	fa05 f401 	lsl.w	r4, r5, r1
 8001126:	fa20 f307 	lsr.w	r3, r0, r7
 800112a:	40fd      	lsrs	r5, r7
 800112c:	4323      	orrs	r3, r4
 800112e:	fa00 f901 	lsl.w	r9, r0, r1
 8001132:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001136:	fa1f fe8c 	uxth.w	lr, ip
 800113a:	fbb5 f8f0 	udiv	r8, r5, r0
 800113e:	0c1c      	lsrs	r4, r3, #16
 8001140:	fb00 5518 	mls	r5, r0, r8, r5
 8001144:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001148:	fb08 f50e 	mul.w	r5, r8, lr
 800114c:	42a5      	cmp	r5, r4
 800114e:	fa02 f201 	lsl.w	r2, r2, r1
 8001152:	d90b      	bls.n	800116c <__udivmoddi4+0x1b0>
 8001154:	eb1c 0404 	adds.w	r4, ip, r4
 8001158:	f108 3aff 	add.w	sl, r8, #4294967295
 800115c:	f080 8087 	bcs.w	800126e <__udivmoddi4+0x2b2>
 8001160:	42a5      	cmp	r5, r4
 8001162:	f240 8084 	bls.w	800126e <__udivmoddi4+0x2b2>
 8001166:	f1a8 0802 	sub.w	r8, r8, #2
 800116a:	4464      	add	r4, ip
 800116c:	1b64      	subs	r4, r4, r5
 800116e:	b29d      	uxth	r5, r3
 8001170:	fbb4 f3f0 	udiv	r3, r4, r0
 8001174:	fb00 4413 	mls	r4, r0, r3, r4
 8001178:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800117c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x1da>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f103 30ff 	add.w	r0, r3, #4294967295
 800118c:	d26b      	bcs.n	8001266 <__udivmoddi4+0x2aa>
 800118e:	45a6      	cmp	lr, r4
 8001190:	d969      	bls.n	8001266 <__udivmoddi4+0x2aa>
 8001192:	3b02      	subs	r3, #2
 8001194:	4464      	add	r4, ip
 8001196:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800119a:	fba0 8302 	umull	r8, r3, r0, r2
 800119e:	eba4 040e 	sub.w	r4, r4, lr
 80011a2:	429c      	cmp	r4, r3
 80011a4:	46c6      	mov	lr, r8
 80011a6:	461d      	mov	r5, r3
 80011a8:	d355      	bcc.n	8001256 <__udivmoddi4+0x29a>
 80011aa:	d052      	beq.n	8001252 <__udivmoddi4+0x296>
 80011ac:	b156      	cbz	r6, 80011c4 <__udivmoddi4+0x208>
 80011ae:	ebb9 030e 	subs.w	r3, r9, lr
 80011b2:	eb64 0405 	sbc.w	r4, r4, r5
 80011b6:	fa04 f707 	lsl.w	r7, r4, r7
 80011ba:	40cb      	lsrs	r3, r1
 80011bc:	40cc      	lsrs	r4, r1
 80011be:	431f      	orrs	r7, r3
 80011c0:	e9c6 7400 	strd	r7, r4, [r6]
 80011c4:	2100      	movs	r1, #0
 80011c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ca:	f1c3 0120 	rsb	r1, r3, #32
 80011ce:	fa02 fc03 	lsl.w	ip, r2, r3
 80011d2:	fa20 f201 	lsr.w	r2, r0, r1
 80011d6:	fa25 f101 	lsr.w	r1, r5, r1
 80011da:	409d      	lsls	r5, r3
 80011dc:	432a      	orrs	r2, r5
 80011de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e2:	fa1f fe8c 	uxth.w	lr, ip
 80011e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80011ea:	fb07 1510 	mls	r5, r7, r0, r1
 80011ee:	0c11      	lsrs	r1, r2, #16
 80011f0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011f4:	fb00 f50e 	mul.w	r5, r0, lr
 80011f8:	428d      	cmp	r5, r1
 80011fa:	fa04 f403 	lsl.w	r4, r4, r3
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x256>
 8001200:	eb1c 0101 	adds.w	r1, ip, r1
 8001204:	f100 38ff 	add.w	r8, r0, #4294967295
 8001208:	d22f      	bcs.n	800126a <__udivmoddi4+0x2ae>
 800120a:	428d      	cmp	r5, r1
 800120c:	d92d      	bls.n	800126a <__udivmoddi4+0x2ae>
 800120e:	3802      	subs	r0, #2
 8001210:	4461      	add	r1, ip
 8001212:	1b49      	subs	r1, r1, r5
 8001214:	b292      	uxth	r2, r2
 8001216:	fbb1 f5f7 	udiv	r5, r1, r7
 800121a:	fb07 1115 	mls	r1, r7, r5, r1
 800121e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001222:	fb05 f10e 	mul.w	r1, r5, lr
 8001226:	4291      	cmp	r1, r2
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x280>
 800122a:	eb1c 0202 	adds.w	r2, ip, r2
 800122e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001232:	d216      	bcs.n	8001262 <__udivmoddi4+0x2a6>
 8001234:	4291      	cmp	r1, r2
 8001236:	d914      	bls.n	8001262 <__udivmoddi4+0x2a6>
 8001238:	3d02      	subs	r5, #2
 800123a:	4462      	add	r2, ip
 800123c:	1a52      	subs	r2, r2, r1
 800123e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001242:	e739      	b.n	80010b8 <__udivmoddi4+0xfc>
 8001244:	4631      	mov	r1, r6
 8001246:	4630      	mov	r0, r6
 8001248:	e709      	b.n	800105e <__udivmoddi4+0xa2>
 800124a:	4639      	mov	r1, r7
 800124c:	e6e7      	b.n	800101e <__udivmoddi4+0x62>
 800124e:	4610      	mov	r0, r2
 8001250:	e6fc      	b.n	800104c <__udivmoddi4+0x90>
 8001252:	45c1      	cmp	r9, r8
 8001254:	d2aa      	bcs.n	80011ac <__udivmoddi4+0x1f0>
 8001256:	ebb8 0e02 	subs.w	lr, r8, r2
 800125a:	eb63 050c 	sbc.w	r5, r3, ip
 800125e:	3801      	subs	r0, #1
 8001260:	e7a4      	b.n	80011ac <__udivmoddi4+0x1f0>
 8001262:	4645      	mov	r5, r8
 8001264:	e7ea      	b.n	800123c <__udivmoddi4+0x280>
 8001266:	4603      	mov	r3, r0
 8001268:	e795      	b.n	8001196 <__udivmoddi4+0x1da>
 800126a:	4640      	mov	r0, r8
 800126c:	e7d1      	b.n	8001212 <__udivmoddi4+0x256>
 800126e:	46d0      	mov	r8, sl
 8001270:	e77c      	b.n	800116c <__udivmoddi4+0x1b0>
 8001272:	3d02      	subs	r5, #2
 8001274:	4462      	add	r2, ip
 8001276:	e733      	b.n	80010e0 <__udivmoddi4+0x124>
 8001278:	4608      	mov	r0, r1
 800127a:	e70b      	b.n	8001094 <__udivmoddi4+0xd8>
 800127c:	4464      	add	r4, ip
 800127e:	3802      	subs	r0, #2
 8001280:	e743      	b.n	800110a <__udivmoddi4+0x14e>
 8001282:	bf00      	nop

08001284 <__aeabi_idiv0>:
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012fe:	4013      	ands	r3, r2
 8001300:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_ADC_Init+0xc4>)
 800131e:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <MX_ADC_Init+0xc8>)
 8001320:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_ADC_Init+0xc4>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_ADC_Init+0xc4>)
 800133e:	2204      	movs	r2, #4
 8001340:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001344:	2200      	movs	r2, #0
 8001346:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC_Init+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001350:	2201      	movs	r2, #1
 8001352:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001356:	2201      	movs	r2, #1
 8001358:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC_Init+0xc4>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_ADC_Init+0xc4>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001380:	2207      	movs	r2, #7
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001386:	2207      	movs	r2, #7
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_ADC_Init+0xc4>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001394:	2200      	movs	r2, #0
 8001396:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_ADC_Init+0xc4>)
 800139a:	f002 ffaf 	bl	80042fc <HAL_ADC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 80013a4:	f000 fe9a 	bl	80020dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_ADC_Init+0xcc>)
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_ADC_Init+0xc4>)
 80013ba:	f003 fadb 	bl	8004974 <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80013c4:	f000 fe8a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000184 	.word	0x20000184
 80013d4:	40012400 	.word	0x40012400
 80013d8:	0c000008 	.word	0x0c000008

080013dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x50>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d112      	bne.n	8001424 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001402:	f7ff ff59 	bl	80012b8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff ff3e 	bl	8001288 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140c:	2310      	movs	r3, #16
 800140e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001410:	2303      	movs	r3, #3
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <HAL_ADC_MspInit+0x54>)
 8001420:	f004 fe0a 	bl	8006038 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012400 	.word	0x40012400
 8001430:	48000400 	.word	0x48000400

08001434 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_ADC_MspDeInit+0x2c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d107      	bne.n	8001456 <HAL_ADC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001446:	f44f 7000 	mov.w	r0, #512	; 0x200
 800144a:	f7ff ff4d 	bl	80012e8 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 800144e:	2110      	movs	r1, #16
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <HAL_ADC_MspDeInit+0x30>)
 8001452:	f004 ff51 	bl	80062f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40012400 	.word	0x40012400
 8001464:	48000400 	.word	0x48000400

08001468 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <SYS_InitMeasurement+0x14>)
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <SYS_InitMeasurement+0x18>)
 8001470:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000184 	.word	0x20000184
 8001480:	40012400 	.word	0x40012400

08001484 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */
   return ADC_ReadChannels(ADC_CHANNEL_3);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <SYS_GetBatteryLevel+0x14>)
 800148a:	f000 f807 	bl	800149c <ADC_ReadChannels>
 800148e:	4603      	mov	r3, r0
 8001490:	b29b      	uxth	r3, r3

  return batteryLevelmV;
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0c000008 	.word	0x0c000008

0800149c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80014b4:	f7ff ff2a 	bl	800130c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80014b8:	481a      	ldr	r0, [pc, #104]	; (8001524 <ADC_ReadChannels+0x88>)
 80014ba:	f003 fd3e 	bl	8004f3a <HAL_ADCEx_Calibration_Start>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80014c4:	f000 fe0a 	bl	80020dc <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <ADC_ReadChannels+0x88>)
 80014dc:	f003 fa4a 	bl	8004974 <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80014e6:	f000 fdf9 	bl	80020dc <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <ADC_ReadChannels+0x88>)
 80014ec:	f003 f926 	bl	800473c <HAL_ADC_Start>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80014f6:	f000 fdf1 	bl	80020dc <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80014fa:	f04f 31ff 	mov.w	r1, #4294967295
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <ADC_ReadChannels+0x88>)
 8001500:	f003 f994 	bl	800482c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <ADC_ReadChannels+0x88>)
 8001506:	f003 f95f 	bl	80047c8 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <ADC_ReadChannels+0x88>)
 800150c:	f003 fa25 	bl	800495a <HAL_ADC_GetValue>
 8001510:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <ADC_ReadChannels+0x88>)
 8001514:	f003 f886 	bl	8004624 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001518:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000184 	.word	0x20000184

08001528 <LL_AHB1_GRP1_EnableClock>:
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800155c:	2004      	movs	r0, #4
 800155e:	f7ff ffe3 	bl	8001528 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ffe0 	bl	8001528 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	200b      	movs	r0, #11
 800156e:	f003 fe8a 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001572:	200b      	movs	r0, #11
 8001574:	f003 fea1 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	200c      	movs	r0, #12
 800157e:	f003 fe82 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001582:	200c      	movs	r0, #12
 8001584:	f003 fe99 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	203d      	movs	r0, #61	; 0x3d
 800158e:	f003 fe7a 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001592:	203d      	movs	r0, #61	; 0x3d
 8001594:	f003 fe91 	bl	80052ba <HAL_NVIC_EnableIRQ>

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015b2:	d311      	bcc.n	80015d8 <FLASH_IF_Write+0x3c>
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FLASH_IF_Write+0x48>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	029a      	lsls	r2, r3, #10
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <FLASH_IF_Write+0x4c>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015c2:	3b01      	subs	r3, #1
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d306      	bcc.n	80015d8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f85a 	bl	8001688 <FLASH_IF_INT_Write>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80015d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	1fff75e0 	.word	0x1fff75e0
 80015e8:	03fffc00 	.word	0x03fffc00

080015ec <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015f8:	23ff      	movs	r3, #255	; 0xff
 80015fa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001602:	d311      	bcc.n	8001628 <FLASH_IF_Read+0x3c>
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <FLASH_IF_Read+0x48>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	029a      	lsls	r2, r3, #10
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <FLASH_IF_Read+0x4c>)
 800160c:	4013      	ands	r3, r2
 800160e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001612:	3b01      	subs	r3, #1
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4293      	cmp	r3, r2
 8001618:	d306      	bcc.n	8001628 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f93a 	bl	8001898 <FLASH_IF_INT_Read>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	1fff75e0 	.word	0x1fff75e0
 8001638:	03fffc00 	.word	0x03fffc00

0800163c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001646:	23ff      	movs	r3, #255	; 0xff
 8001648:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001650:	d310      	bcc.n	8001674 <FLASH_IF_Erase+0x38>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <FLASH_IF_Erase+0x44>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	029a      	lsls	r2, r3, #10
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <FLASH_IF_Erase+0x48>)
 800165a:	4013      	ands	r3, r2
 800165c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001660:	3b01      	subs	r3, #1
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4293      	cmp	r3, r2
 8001666:	d305      	bcc.n	8001674 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f932 	bl	80018d4 <FLASH_IF_INT_Erase>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	1fff75e0 	.word	0x1fff75e0
 8001684:	03fffc00 	.word	0x03fffc00

08001688 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <FLASH_IF_INT_Write+0x3e>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <FLASH_IF_INT_Write+0x3e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80016c6:	f06f 0305 	mvn.w	r3, #5
 80016ca:	e0da      	b.n	8001882 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80016cc:	f000 f992 	bl	80019f4 <FLASH_IF_INT_Clear_Error>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80016d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80cf 	bne.w	800187e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016e0:	f004 fad4 	bl	8005c8c <HAL_FLASH_Unlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80c6 	bne.w	8001878 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <FLASH_IF_INT_Write+0x204>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0299      	lsls	r1, r3, #10
 80016f8:	4b65      	ldr	r3, [pc, #404]	; (8001890 <FLASH_IF_INT_Write+0x208>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800170a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001714:	3b01      	subs	r3, #1
 8001716:	4a5d      	ldr	r2, [pc, #372]	; (800188c <FLASH_IF_INT_Write+0x204>)
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	0291      	lsls	r1, r2, #10
 800171c:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <FLASH_IF_INT_Write+0x208>)
 800171e:	400a      	ands	r2, r1
 8001720:	fbb3 f1f2 	udiv	r1, r3, r2
 8001724:	fb01 f202 	mul.w	r2, r1, r2
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	0ada      	lsrs	r2, r3, #11
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d905      	bls.n	8001746 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001740:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174a:	e089      	b.n	8001860 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001752:	02db      	lsls	r3, r3, #11
 8001754:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f925 	bl	80019a8 <FLASH_IF_INT_IsEmpty>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d031      	beq.n	80017c8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800176c:	23fa      	movs	r3, #250	; 0xfa
 800176e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001772:	e07e      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f88a 	bl	8001898 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178e:	4413      	add	r3, r2
 8001790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001794:	b292      	uxth	r2, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f01b fe8a 	bl	801d4b0 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f896 	bl	80018d4 <FLASH_IF_INT_Erase>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80017ae:	23fe      	movs	r3, #254	; 0xfe
 80017b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80017b4:	e05d      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80017c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e005      	b.n	80017d4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	623b      	str	r3, [r7, #32]
          current_length = length;
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	e026      	b.n	8001828 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	2001      	movs	r0, #1
 80017e8:	f004 fa0c 	bl	8005c04 <HAL_FLASH_Program>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	4413      	add	r3, r2
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4299      	cmp	r1, r3
 8001804:	bf08      	it	eq
 8001806:	4290      	cmpeq	r0, r2
 8001808:	d003      	beq.n	8001812 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800180a:	23fc      	movs	r3, #252	; 0xfc
 800180c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001810:	e00e      	b.n	8001830 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3308      	adds	r3, #8
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e003      	b.n	8001822 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800181a:	23fc      	movs	r3, #252	; 0xfc
 800181c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001820:	e006      	b.n	8001830 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	3308      	adds	r3, #8
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3d4      	bcc.n	80017da <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001830:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183c:	4413      	add	r3, r2
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	4413      	add	r3, r2
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001852:	bf28      	it	cs
 8001854:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	3301      	adds	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	4413      	add	r3, r2
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	f4ff af6f 	bcc.w	800174c <FLASH_IF_INT_Write+0xc4>
 800186e:	e000      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001870:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001872:	f004 fa2d 	bl	8005cd0 <HAL_FLASH_Lock>
 8001876:	e002      	b.n	800187e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001878:	23fb      	movs	r3, #251	; 0xfb
 800187a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800187e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001882:	4618      	mov	r0, r3
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	1fff75e0 	.word	0x1fff75e0
 8001890:	03fffc00 	.word	0x03fffc00
 8001894:	200001e8 	.word	0x200001e8

08001898 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <FLASH_IF_INT_Read+0x1c>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80018b4:	f06f 0305 	mvn.w	r3, #5
 80018b8:	e008      	b.n	80018cc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f01b fdf4 	bl	801d4b0 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80018f4:	f06f 0305 	mvn.w	r3, #5
 80018f8:	e04e      	b.n	8001998 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018fa:	f000 f87b 	bl	80019f4 <FLASH_IF_INT_Clear_Error>
 80018fe:	4603      	mov	r3, r0
 8001900:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d144      	bne.n	8001994 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800190a:	f004 f9bf 	bl	8005c8c <HAL_FLASH_Unlock>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d13d      	bne.n	8001990 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001914:	2302      	movs	r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <FLASH_IF_INT_Erase+0xcc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0299      	lsls	r1, r3, #10
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <FLASH_IF_INT_Erase+0xd0>)
 8001926:	400b      	ands	r3, r1
 8001928:	fbb2 f1f3 	udiv	r1, r2, r3
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	0adb      	lsrs	r3, r3, #11
 8001934:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001940:	3b01      	subs	r3, #1
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <FLASH_IF_INT_Erase+0xcc>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0291      	lsls	r1, r2, #10
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <FLASH_IF_INT_Erase+0xd0>)
 800194a:	400a      	ands	r2, r1
 800194c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001950:	fb01 f202 	mul.w	r2, r1, r2
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	0ada      	lsrs	r2, r3, #11
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	3301      	adds	r3, #1
 800195e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001960:	f107 0214 	add.w	r2, r7, #20
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fa90 	bl	8005e90 <HAL_FLASHEx_Erase>
 8001970:	4603      	mov	r3, r0
 8001972:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001974:	7fbb      	ldrb	r3, [r7, #30]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800197a:	7fbb      	ldrb	r3, [r7, #30]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d101      	bne.n	8001984 <FLASH_IF_INT_Erase+0xb0>
 8001980:	2301      	movs	r3, #1
 8001982:	e001      	b.n	8001988 <FLASH_IF_INT_Erase+0xb4>
 8001984:	f06f 0301 	mvn.w	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800198a:	f004 f9a1 	bl	8005cd0 <HAL_FLASH_Lock>
 800198e:	e001      	b.n	8001994 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001990:	23fb      	movs	r3, #251	; 0xfb
 8001992:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001994:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	1fff75e0 	.word	0x1fff75e0
 80019a4:	03fffc00 	.word	0x03fffc00

080019a8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	e011      	b.n	80019e0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	bf08      	it	eq
 80019c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80019cc:	d002      	beq.n	80019d4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80019ce:	2301      	movs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
      break;
 80019d2:	e009      	b.n	80019e8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3308      	adds	r3, #8
 80019d8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3308      	adds	r3, #8
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3e9      	bcc.n	80019bc <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80019fa:	23fb      	movs	r3, #251	; 0xfb
 80019fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80019fe:	f004 f945 	bl	8005c8c <HAL_FLASH_Unlock>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d110      	bne.n	8001a2a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a16:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001a1a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001a1c:	f004 f958 	bl	8005cd0 <HAL_FLASH_Lock>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	58004000 	.word	0x58004000

08001a3c <LL_AHB2_GRP1_EnableClock>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff ffdb 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2002      	movs	r0, #2
 8001a88:	f7ff ffd8 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	f7ff ffd5 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001a98:	4825      	ldr	r0, [pc, #148]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001a9a:	f004 fcfb 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	4823      	ldr	r0, [pc, #140]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001aa4:	f004 fcf6 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f240 2131 	movw	r1, #561	; 0x231
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f004 fcef 	bl	8006494 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|LED2_Pin;
 8001ab6:	2328      	movs	r3, #40	; 0x28
 8001ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001acc:	f004 fab4 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001ad0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001ae8:	f004 faa6 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001aec:	2331      	movs	r3, #49	; 0x31
 8001aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f004 fa98 	bl	8006038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f004 fa89 	bl	8006038 <HAL_GPIO_Init>

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	48000400 	.word	0x48000400

08001b34 <LL_AHB2_GRP1_EnableClock>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <LL_APB1_GRP1_EnableClock>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_I2C2_Init+0x78>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x003037FF;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <MX_I2C2_Init+0x7c>)
 8001ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bd0:	f004 fc77 	bl	80064c2 <HAL_I2C_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bda:	f000 fa7f 	bl	80020dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001be2:	f005 fea4 	bl	800792e <HAL_I2CEx_ConfigAnalogFilter>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bec:	f000 fa76 	bl	80020dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bf4:	f005 fee5 	bl	80079c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bfe:	f000 fa6d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001ec 	.word	0x200001ec
 8001c0c:	40005800 	.word	0x40005800
 8001c10:	003037ff 	.word	0x003037ff

08001c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b096      	sub	sp, #88	; 0x58
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2238      	movs	r2, #56	; 0x38
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f01c feff 	bl	801ea38 <memset>
  if(i2cHandle->Instance==I2C2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_I2C_MspInit+0xd0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d14b      	bne.n	8001cdc <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c48:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 fdc2 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c5e:	f000 fa3d 	bl	80020dc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff66 	bl	8001b34 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7ff ff63 	bl	8001b34 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f004 f9d3 	bl	8006038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <HAL_I2C_MspInit+0xd4>)
 8001cb0:	f004 f9c2 	bl	8006038 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cb4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001cb8:	f7ff ff54 	bl	8001b64 <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2020      	movs	r0, #32
 8001cc2:	f003 fae0 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cc6:	2020      	movs	r0, #32
 8001cc8:	f003 faf7 	bl	80052ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2021      	movs	r0, #33	; 0x21
 8001cd2:	f003 fad8 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f003 faef 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3758      	adds	r7, #88	; 0x58
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	48000400 	.word	0x48000400

08001cec <LL_APB1_GRP1_EnableClock>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <MX_LPTIM1_Init+0x58>)
 8001d24:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d2e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001d32:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d5c:	f005 feee 	bl	8007b3c <HAL_LPTIM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001d66:	f000 f9b9 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000240 	.word	0x20000240
 8001d74:	40007c00 	.word	0x40007c00

08001d78 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	; 0x40
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	2238      	movs	r2, #56	; 0x38
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f01c fe55 	bl	801ea38 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_LPTIM_MspInit+0x60>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001d9e:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fd17 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001db4:	f000 f992 	bl	80020dc <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001db8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001dbc:	f7ff ff96 	bl	8001cec <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2027      	movs	r0, #39	; 0x27
 8001dc6:	f003 fa5e 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001dca:	2027      	movs	r0, #39	; 0x27
 8001dcc:	f003 fa75 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3740      	adds	r7, #64	; 0x40
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40007c00 	.word	0x40007c00

08001ddc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f023 0218 	bic.w	r2, r3, #24
 8001df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0c:	f002 f87e 	bl	8003f0c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e10:	f000 f826 	bl	8001e60 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e14:	f7ff fe2a 	bl	8001a6c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001e18:	f00b f984 	bl	800d124 <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001e1c:	f001 f9b8 	bl	8003190 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e20:	f7ff feb8 	bl	8001b94 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001e24:	f000 face 	bl	80023c4 <MX_SPI2_Init>
  MX_LPTIM1_Init();
 8001e28:	f7ff ff78 	bl	8001d1c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  F1_QueueIni(); // init Function queue
 8001e2c:	f000 f962 	bl	80020f4 <F1_QueueIni>
  F2_QueueIni();
 8001e30:	f000 f9d2 	bl	80021d8 <F2_QueueIni>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f004 fb29 	bl	8006494 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim16);
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1,  256, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e48:	4804      	ldr	r0, [pc, #16]	; (8001e5c <main+0x54>)
 8001e4a:	f005 ff3f 	bl	8007ccc <HAL_LPTIM_TimeOut_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e4e:	f00b f971 	bl	800d134 <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */

    F1_pull()();
 8001e52:	f000 f993 	bl	800217c <F1_pull>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4798      	blx	r3
    MX_LoRaWAN_Process();
 8001e5a:	e7f8      	b.n	8001e4e <main+0x46>
 8001e5c:	20000240 	.word	0x20000240

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b09a      	sub	sp, #104	; 0x68
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0320 	add.w	r3, r7, #32
 8001e6a:	2248      	movs	r2, #72	; 0x48
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f01c fde2 	bl	801ea38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e86:	f006 fa39 	bl	80082fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f7ff ffa6 	bl	8001ddc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e90:	4b1e      	ldr	r3, [pc, #120]	; (8001f0c <SystemClock_Config+0xac>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e98:	4a1c      	ldr	r2, [pc, #112]	; (8001f0c <SystemClock_Config+0xac>)
 8001e9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <SystemClock_Config+0xac>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea8:	607b      	str	r3, [r7, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001eac:	2305      	movs	r3, #5
 8001eae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001eb0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001eb6:	2381      	movs	r3, #129	; 0x81
 8001eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec2:	f107 0320 	add.w	r3, r7, #32
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f006 fd64 	bl	8008994 <HAL_RCC_OscConfig>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001ed2:	f000 f903 	bl	80020dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ed6:	234f      	movs	r3, #79	; 0x4f
 8001ed8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001eda:	2302      	movs	r3, #2
 8001edc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001eee:	f107 0308 	add.w	r3, r7, #8
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f007 f8cf 	bl	8009098 <HAL_RCC_ClockConfig>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f00:	f000 f8ec 	bl	80020dc <Error_Handler>
  }
}
 8001f04:	bf00      	nop
 8001f06:	3768      	adds	r7, #104	; 0x68
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	58000400 	.word	0x58000400

08001f10 <EnablePM_sens>:

/* USER CODE BEGIN 4 */

void EnablePM_sens(void){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b092      	sub	sp, #72	; 0x48
 8001f14:	af00      	add	r7, sp, #0
    unsigned char serial_number[32];
    uint8_t serial_number_size = 32;
 8001f16:	2320      	movs	r3, #32
 8001f18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


    sen5x_device_reset();
 8001f1c:	f001 fe14 	bl	8003b48 <sen5x_device_reset>
    sen5x_get_serial_number(serial_number, serial_number_size);
 8001f20:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f001 fdc8 	bl	8003ac0 <sen5x_get_serial_number>


    unsigned char product_name[32];
    uint8_t product_name_size = 32;
 8001f30:	2320      	movs	r3, #32
 8001f32:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    sen5x_get_product_name(product_name, product_name_size);
 8001f36:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001f3a:	1d3b      	adds	r3, r7, #4
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f001 fd7b 	bl	8003a3a <sen5x_get_product_name>
    sen5x_start_measurement();
 8001f44:	f001 fca0 	bl	8003888 <sen5x_start_measurement>

}
 8001f48:	bf00      	nop
 8001f4a:	3748      	adds	r7, #72	; 0x48
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <DisablePM_sens>:

void DisablePM_sens(void){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0

sen5x_stop_measurement();
 8001f54:	f001 fcbe 	bl	80038d4 <sen5x_stop_measurement>
}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af04      	add	r7, sp, #16
    int16_t a_humidity;
    int16_t a_temperature;
    uint16_t nox_index;

    sen5x_read_measured_values(
 8001f62:	1cbb      	adds	r3, r7, #2
 8001f64:	9303      	str	r3, [sp, #12]
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <MeasurePM_sens+0x70>)
 8001f68:	9302      	str	r3, [sp, #8]
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	1dbb      	adds	r3, r7, #6
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	4b17      	ldr	r3, [pc, #92]	; (8001fd0 <MeasurePM_sens+0x74>)
 8001f74:	4a17      	ldr	r2, [pc, #92]	; (8001fd4 <MeasurePM_sens+0x78>)
 8001f76:	4918      	ldr	r1, [pc, #96]	; (8001fd8 <MeasurePM_sens+0x7c>)
 8001f78:	4818      	ldr	r0, [pc, #96]	; (8001fdc <MeasurePM_sens+0x80>)
 8001f7a:	f001 fcd3 	bl	8003924 <sen5x_read_measured_values>
        &PM1, &PM2_5,
		&PM4, &PM10,
        &a_humidity, &a_temperature, &VOC, &nox_index);

    temperatureA = (double)a_temperature/200.0; //do not know why, but this variable will be affected
 8001f7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fa52 	bl	800042c <__aeabi_i2d>
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <MeasurePM_sens+0x84>)
 8001f8e:	f7fe fbe1 	bl	8000754 <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4913      	ldr	r1, [pc, #76]	; (8001fe4 <MeasurePM_sens+0x88>)
 8001f98:	e9c1 2300 	strd	r2, r3, [r1]
    temperatureTX = temperatureA;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <MeasurePM_sens+0x88>)
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	4911      	ldr	r1, [pc, #68]	; (8001fe8 <MeasurePM_sens+0x8c>)
 8001fa4:	e9c1 2300 	strd	r2, r3, [r1]
    humidity = a_humidity/100.0f;
 8001fa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fe23 	bl	8000bf8 <__aeabi_i2f>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	490d      	ldr	r1, [pc, #52]	; (8001fec <MeasurePM_sens+0x90>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe ff26 	bl	8000e08 <__aeabi_fdiv>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <MeasurePM_sens+0x94>)
 8001fc2:	601a      	str	r2, [r3, #0]
}
 8001fc4:	bf00      	nop
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20000284 	.word	0x20000284
 8001fd0:	20000282 	.word	0x20000282
 8001fd4:	20000280 	.word	0x20000280
 8001fd8:	2000027c 	.word	0x2000027c
 8001fdc:	2000027e 	.word	0x2000027e
 8001fe0:	40690000 	.word	0x40690000
 8001fe4:	20000288 	.word	0x20000288
 8001fe8:	20000290 	.word	0x20000290
 8001fec:	42c80000 	.word	0x42c80000
 8001ff0:	20000298 	.word	0x20000298

08001ff4 <HAL_LPTIM_CompareMatchCallback>:


#define V_TRESHOLD 91

 void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

	static char first_start = 1;


   if (hlptim == &hlptim1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a2f      	ldr	r2, [pc, #188]	; (80020bc <HAL_LPTIM_CompareMatchCallback+0xc8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d157      	bne.n	80020b4 <HAL_LPTIM_CompareMatchCallback+0xc0>
   {
      switch(counter){
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <HAL_LPTIM_CompareMatchCallback+0xcc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b4b      	cmp	r3, #75	; 0x4b
 800200a:	d035      	beq.n	8002078 <HAL_LPTIM_CompareMatchCallback+0x84>
 800200c:	2b4b      	cmp	r3, #75	; 0x4b
 800200e:	dc3c      	bgt.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
 8002010:	2b4a      	cmp	r3, #74	; 0x4a
 8002012:	d02d      	beq.n	8002070 <HAL_LPTIM_CompareMatchCallback+0x7c>
 8002014:	2b4a      	cmp	r3, #74	; 0x4a
 8002016:	dc38      	bgt.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
 8002018:	2b46      	cmp	r3, #70	; 0x46
 800201a:	d025      	beq.n	8002068 <HAL_LPTIM_CompareMatchCallback+0x74>
 800201c:	2b46      	cmp	r3, #70	; 0x46
 800201e:	dc34      	bgt.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
 8002020:	2b09      	cmp	r3, #9
 8002022:	d002      	beq.n	800202a <HAL_LPTIM_CompareMatchCallback+0x36>
 8002024:	2b0a      	cmp	r3, #10
 8002026:	d01b      	beq.n	8002060 <HAL_LPTIM_CompareMatchCallback+0x6c>
 8002028:	e02f      	b.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
      case 9:
    	  if(first_start){
 800202a:	4b26      	ldr	r3, [pc, #152]	; (80020c4 <HAL_LPTIM_CompareMatchCallback+0xd0>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_LPTIM_CompareMatchCallback+0x54>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002032:	2201      	movs	r2, #1
 8002034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203c:	f004 fa2a 	bl	8006494 <HAL_GPIO_WritePin>
    		  first_start = 0;
 8002040:	4b20      	ldr	r3, [pc, #128]	; (80020c4 <HAL_LPTIM_CompareMatchCallback+0xd0>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
    	  }
    	  else{
    		  if(extBattery > V_TRESHOLD)
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
    	  }
    	  break;
 8002046:	e01f      	b.n	8002088 <HAL_LPTIM_CompareMatchCallback+0x94>
    		  if(extBattery > V_TRESHOLD)
 8002048:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_LPTIM_CompareMatchCallback+0xd4>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b5b      	cmp	r3, #91	; 0x5b
 800204e:	d91b      	bls.n	8002088 <HAL_LPTIM_CompareMatchCallback+0x94>
    		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002056:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800205a:	f004 fa1b 	bl	8006494 <HAL_GPIO_WritePin>
    	  break;
 800205e:	e013      	b.n	8002088 <HAL_LPTIM_CompareMatchCallback+0x94>
      case 10:
    		  F1_push(EnablePM_sens);
 8002060:	481a      	ldr	r0, [pc, #104]	; (80020cc <HAL_LPTIM_CompareMatchCallback+0xd8>)
 8002062:	f000 f857 	bl	8002114 <F1_push>
    	  break;
 8002066:	e010      	b.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
      case 70:
    		  F1_push(MeasurePM_sens);
 8002068:	4819      	ldr	r0, [pc, #100]	; (80020d0 <HAL_LPTIM_CompareMatchCallback+0xdc>)
 800206a:	f000 f853 	bl	8002114 <F1_push>
    	  break;
 800206e:	e00c      	b.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
      case 74:
    		  F1_push(DisablePM_sens);
 8002070:	4818      	ldr	r0, [pc, #96]	; (80020d4 <HAL_LPTIM_CompareMatchCallback+0xe0>)
 8002072:	f000 f84f 	bl	8002114 <F1_push>
    	  break;
 8002076:	e008      	b.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
      case 75:
    	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800207e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002082:	f004 fa07 	bl	8006494 <HAL_GPIO_WritePin>
    	  break;
 8002086:	e000      	b.n	800208a <HAL_LPTIM_CompareMatchCallback+0x96>
    	  break;
 8002088:	bf00      	nop

      }
      counter++;
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <HAL_LPTIM_CompareMatchCallback+0xcc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <HAL_LPTIM_CompareMatchCallback+0xcc>)
 8002092:	6013      	str	r3, [r2, #0]
      counter %= 1800;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_LPTIM_CompareMatchCallback+0xcc>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a0f      	ldr	r2, [pc, #60]	; (80020d8 <HAL_LPTIM_CompareMatchCallback+0xe4>)
 800209a:	fb82 1203 	smull	r1, r2, r2, r3
 800209e:	441a      	add	r2, r3
 80020a0:	1291      	asrs	r1, r2, #10
 80020a2:	17da      	asrs	r2, r3, #31
 80020a4:	1a8a      	subs	r2, r1, r2
 80020a6:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80020aa:	fb01 f202 	mul.w	r2, r1, r2
 80020ae:	1a9a      	subs	r2, r3, r2
 80020b0:	4b03      	ldr	r3, [pc, #12]	; (80020c0 <HAL_LPTIM_CompareMatchCallback+0xcc>)
 80020b2:	601a      	str	r2, [r3, #0]
   }
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000240 	.word	0x20000240
 80020c0:	2000029c 	.word	0x2000029c
 80020c4:	20000000 	.word	0x20000000
 80020c8:	20000287 	.word	0x20000287
 80020cc:	08001f11 	.word	0x08001f11
 80020d0:	08001f5d 	.word	0x08001f5d
 80020d4:	08001f51 	.word	0x08001f51
 80020d8:	91a2b3c5 	.word	0x91a2b3c5

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>

080020e6 <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	bf00      	nop
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
	...

080020f4 <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  F1_last = 0;
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <F1_QueueIni+0x18>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <F1_QueueIni+0x1c>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	200002a0 	.word	0x200002a0
 8002110:	200002a4 	.word	0x200002a4

08002114 <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <F1_push+0x5c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	3301      	adds	r3, #1
 8002122:	425a      	negs	r2, r3
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	f002 020f 	and.w	r2, r2, #15
 800212c:	bf58      	it	pl
 800212e:	4253      	negpl	r3, r2
 8002130:	4a10      	ldr	r2, [pc, #64]	; (8002174 <F1_push+0x60>)
 8002132:	6812      	ldr	r2, [r2, #0]
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <F1_push+0x28>
 8002138:	2301      	movs	r3, #1
 800213a:	e014      	b.n	8002166 <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <F1_push+0x5c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	490b      	ldr	r1, [pc, #44]	; (8002170 <F1_push+0x5c>)
 8002144:	600a      	str	r2, [r1, #0]
 8002146:	490c      	ldr	r1, [pc, #48]	; (8002178 <F1_push+0x64>)
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <F1_push+0x5c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	425a      	negs	r2, r3
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	f002 020f 	and.w	r2, r2, #15
 800215c:	bf58      	it	pl
 800215e:	4253      	negpl	r3, r2
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <F1_push+0x5c>)
 8002162:	6013      	str	r3, [r2, #0]
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	200002a0 	.word	0x200002a0
 8002174:	200002a4 	.word	0x200002a4
 8002178:	200002a8 	.word	0x200002a8

0800217c <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 8002182:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <F1_pull+0x4c>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <F1_pull+0x50>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d101      	bne.n	8002192 <F1_pull+0x16>
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <F1_pull+0x54>)
 8002190:	e014      	b.n	80021bc <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <F1_pull+0x50>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	490c      	ldr	r1, [pc, #48]	; (80021cc <F1_pull+0x50>)
 800219a:	600a      	str	r2, [r1, #0]
 800219c:	4a0d      	ldr	r2, [pc, #52]	; (80021d4 <F1_pull+0x58>)
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 80021a4:	4b09      	ldr	r3, [pc, #36]	; (80021cc <F1_pull+0x50>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	425a      	negs	r2, r3
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	f002 020f 	and.w	r2, r2, #15
 80021b2:	bf58      	it	pl
 80021b4:	4253      	negpl	r3, r2
 80021b6:	4a05      	ldr	r2, [pc, #20]	; (80021cc <F1_pull+0x50>)
 80021b8:	6013      	str	r3, [r2, #0]
  return pullVar;
 80021ba:	687b      	ldr	r3, [r7, #4]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	200002a0 	.word	0x200002a0
 80021cc:	200002a4 	.word	0x200002a4
 80021d0:	080020e7 	.word	0x080020e7
 80021d4:	200002a8 	.word	0x200002a8

080021d8 <F2_QueueIni>:

 void SimpleF2(){;};

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
   F2_last = 0;
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <F2_QueueIni+0x18>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
   F2_first = 0;
 80021e2:	4b04      	ldr	r3, [pc, #16]	; (80021f4 <F2_QueueIni+0x1c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 }
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc80      	pop	{r7}
 80021ee:	4770      	bx	lr
 80021f0:	200002e8 	.word	0x200002e8
 80021f4:	200002ec 	.word	0x200002ec

080021f8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80021fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_APB1_GRP1_EnableClock>:
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002224:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002226:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4313      	orrs	r3, r2
 800222e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4013      	ands	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800223c:	68fb      	ldr	r3, [r7, #12]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08c      	sub	sp, #48	; 0x30
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	222c      	movs	r2, #44	; 0x2c
 8002252:	2100      	movs	r1, #0
 8002254:	4618      	mov	r0, r3
 8002256:	f01c fbef 	bl	801ea38 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800225a:	4b22      	ldr	r3, [pc, #136]	; (80022e4 <MX_RTC_Init+0x9c>)
 800225c:	4a22      	ldr	r2, [pc, #136]	; (80022e8 <MX_RTC_Init+0xa0>)
 800225e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002260:	4b20      	ldr	r3, [pc, #128]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002262:	221f      	movs	r2, #31
 8002264:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002266:	4b1f      	ldr	r3, [pc, #124]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800226c:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_RTC_Init+0x9c>)
 800226e:	2200      	movs	r2, #0
 8002270:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002272:	4b1c      	ldr	r3, [pc, #112]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002278:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_RTC_Init+0x9c>)
 800227a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800227e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002280:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002282:	2200      	movs	r2, #0
 8002284:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002286:	4b17      	ldr	r3, [pc, #92]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800228e:	4815      	ldr	r0, [pc, #84]	; (80022e4 <MX_RTC_Init+0x9c>)
 8002290:	f007 fbbe 	bl	8009a10 <HAL_RTC_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800229a:	f7ff ff1f 	bl	80020dc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800229e:	4811      	ldr	r0, [pc, #68]	; (80022e4 <MX_RTC_Init+0x9c>)
 80022a0:	f007 feb4 	bl	800a00c <HAL_RTCEx_SetSSRU_IT>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022aa:	f7ff ff17 	bl	80020dc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022ba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022be:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80022c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80022c6:	1d3b      	adds	r3, r7, #4
 80022c8:	2200      	movs	r2, #0
 80022ca:	4619      	mov	r1, r3
 80022cc:	4805      	ldr	r0, [pc, #20]	; (80022e4 <MX_RTC_Init+0x9c>)
 80022ce:	f007 fc21 	bl	8009b14 <HAL_RTC_SetAlarm_IT>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80022d8:	f7ff ff00 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022dc:	bf00      	nop
 80022de:	3730      	adds	r7, #48	; 0x30
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	200002f0 	.word	0x200002f0
 80022e8:	40002800 	.word	0x40002800

080022ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b090      	sub	sp, #64	; 0x40
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	2238      	movs	r2, #56	; 0x38
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f01c fb9b 	bl	801ea38 <memset>
  if(rtcHandle->Instance==RTC)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_RTC_MspInit+0x74>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d125      	bne.n	8002358 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800230c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002310:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002312:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002316:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002318:	f107 0308 	add.w	r3, r7, #8
 800231c:	4618      	mov	r0, r3
 800231e:	f007 fa5d 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002328:	f7ff fed8 	bl	80020dc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800232c:	f7ff ff64 	bl	80021f8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002330:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002334:	f7ff ff70 	bl	8002218 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2002      	movs	r0, #2
 800233e:	f002 ffa2 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002342:	2002      	movs	r0, #2
 8002344:	f002 ffb9 	bl	80052ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	202a      	movs	r0, #42	; 0x2a
 800234e:	f002 ff9a 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002352:	202a      	movs	r0, #42	; 0x2a
 8002354:	f002 ffb1 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002358:	bf00      	nop
 800235a:	3740      	adds	r7, #64	; 0x40
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40002800 	.word	0x40002800

08002364 <LL_AHB2_GRP1_EnableClock>:
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002370:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002372:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4313      	orrs	r3, r2
 800237a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4013      	ands	r3, r2
 8002386:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002388:	68fb      	ldr	r3, [r7, #12]
}
 800238a:	bf00      	nop
 800238c:	3714      	adds	r7, #20
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <LL_APB1_GRP1_EnableClock>:
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800239c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023b8:	68fb      	ldr	r3, [r7, #12]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr

080023c4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_SPI2_Init+0x74>)
 80023ca:	4a1c      	ldr	r2, [pc, #112]	; (800243c <MX_SPI2_Init+0x78>)
 80023cc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <MX_SPI2_Init+0x74>)
 80023d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023d4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_SPI2_Init+0x74>)
 80023d8:	2200      	movs	r2, #0
 80023da:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <MX_SPI2_Init+0x74>)
 80023de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023e2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e4:	4b14      	ldr	r3, [pc, #80]	; (8002438 <MX_SPI2_Init+0x74>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <MX_SPI2_Init+0x74>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <MX_SPI2_Init+0x74>)
 80023f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023f6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80023f8:	4b0f      	ldr	r3, [pc, #60]	; (8002438 <MX_SPI2_Init+0x74>)
 80023fa:	2218      	movs	r2, #24
 80023fc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <MX_SPI2_Init+0x74>)
 8002400:	2200      	movs	r2, #0
 8002402:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <MX_SPI2_Init+0x74>)
 8002406:	2200      	movs	r2, #0
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800240a:	4b0b      	ldr	r3, [pc, #44]	; (8002438 <MX_SPI2_Init+0x74>)
 800240c:	2200      	movs	r2, #0
 800240e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002410:	4b09      	ldr	r3, [pc, #36]	; (8002438 <MX_SPI2_Init+0x74>)
 8002412:	2207      	movs	r2, #7
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <MX_SPI2_Init+0x74>)
 8002418:	2200      	movs	r2, #0
 800241a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800241c:	4b06      	ldr	r3, [pc, #24]	; (8002438 <MX_SPI2_Init+0x74>)
 800241e:	2208      	movs	r2, #8
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002422:	4805      	ldr	r0, [pc, #20]	; (8002438 <MX_SPI2_Init+0x74>)
 8002424:	f007 fe80 	bl	800a128 <HAL_SPI_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800242e:	f7ff fe55 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000328 	.word	0x20000328
 800243c:	40003800 	.word	0x40003800

08002440 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	609a      	str	r2, [r3, #8]
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a19      	ldr	r2, [pc, #100]	; (80024c4 <HAL_SPI_MspInit+0x84>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12c      	bne.n	80024bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002462:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002466:	f7ff ff95 	bl	8002394 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff ff7a 	bl	8002364 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002470:	2001      	movs	r0, #1
 8002472:	f7ff ff77 	bl	8002364 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002476:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800247a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002488:	2305      	movs	r3, #5
 800248a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	4619      	mov	r1, r3
 8002492:	480d      	ldr	r0, [pc, #52]	; (80024c8 <HAL_SPI_MspInit+0x88>)
 8002494:	f003 fdd0 	bl	8006038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800249c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024aa:	2305      	movs	r3, #5
 80024ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	4619      	mov	r1, r3
 80024b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b8:	f003 fdbe 	bl	8006038 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024bc:	bf00      	nop
 80024be:	3720      	adds	r7, #32
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40003800 	.word	0x40003800
 80024c8:	48000400 	.word	0x48000400

080024cc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80024d8:	bf00      	nop
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	58000400 	.word	0x58000400

080024e4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bc80      	pop	{r7}
 80024fa:	4770      	bx	lr

080024fc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002500:	f001 fd24 	bl	8003f4c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002504:	f7ff ffe2 	bl	80024cc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002508:	2001      	movs	r0, #1
 800250a:	f005 ff89 	bl	8008420 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}

08002512 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002516:	f001 fd27 	bl	8003f68 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800251a:	f001 f883 	bl	8003624 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}

08002522 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002526:	f001 fd11 	bl	8003f4c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800252a:	2101      	movs	r1, #1
 800252c:	2000      	movs	r0, #0
 800252e:	f005 fef3 	bl	8008318 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}

08002536 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800253a:	f001 fd15 	bl	8003f68 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002546:	bf00      	nop
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <NMI_Handler+0x4>

08002554 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <HardFault_Handler+0x4>

0800255a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <MemManage_Handler+0x4>

08002560 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <BusFault_Handler+0x4>

08002566 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800256a:	e7fe      	b.n	800256a <UsageFault_Handler+0x4>

0800256c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr

08002584 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	46bd      	mov	sp, r7
 8002598:	bc80      	pop	{r7}
 800259a:	4770      	bx	lr

0800259c <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80025a2:	f007 fd6f 	bl	800a084 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200002f0 	.word	0x200002f0

080025b0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Channel1_IRQHandler+0x10>)
 80025b6:	f003 f917 	bl	80057e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	200004ec 	.word	0x200004ec

080025c4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Channel2_IRQHandler+0x10>)
 80025ca:	f003 f90d 	bl	80057e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000054c 	.word	0x2000054c

080025d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <I2C2_EV_IRQHandler+0x10>)
 80025de:	f004 f9e9 	bl	80069b4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200001ec 	.word	0x200001ec

080025ec <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <I2C2_ER_IRQHandler+0x10>)
 80025f2:	f004 f9f9 	bl	80069e8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001ec 	.word	0x200001ec

08002600 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <USART1_IRQHandler+0x10>)
 8002606:	f008 fc5b 	bl	800aec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200003c4 	.word	0x200003c4

08002614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART2_IRQHandler+0x10>)
 800261a:	f008 fc51 	bl	800aec0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000458 	.word	0x20000458

08002628 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <LPTIM1_IRQHandler+0x10>)
 800262e:	f005 fbdf 	bl	8007df0 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000240 	.word	0x20000240

0800263c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002640:	4802      	ldr	r0, [pc, #8]	; (800264c <RTC_Alarm_IRQHandler+0x10>)
 8002642:	f007 fbcf 	bl	8009de4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	200002f0 	.word	0x200002f0

08002650 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002654:	4802      	ldr	r0, [pc, #8]	; (8002660 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002656:	f008 f957 	bl	800a908 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	2000038c 	.word	0x2000038c

08002664 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002668:	4802      	ldr	r0, [pc, #8]	; (8002674 <DMAMUX1_OVR_IRQHandler+0x10>)
 800266a:	f003 fa79 	bl	8005b60 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000054c 	.word	0x2000054c

08002678 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4313      	orrs	r3, r2
 800268e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	bf00      	nop
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr

080026a8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_SUBGHZ_Init+0x20>)
 80026ae:	2208      	movs	r2, #8
 80026b0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_SUBGHZ_Init+0x20>)
 80026b4:	f007 fea6 	bl	800a404 <HAL_SUBGHZ_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80026be:	f7ff fd0d 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000038c 	.word	0x2000038c

080026cc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7ff ffcf 	bl	8002678 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80026da:	2200      	movs	r2, #0
 80026dc:	2100      	movs	r1, #0
 80026de:	2032      	movs	r0, #50	; 0x32
 80026e0:	f002 fdd1 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80026e4:	2032      	movs	r0, #50	; 0x32
 80026e6:	f002 fde8 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <LL_RCC_SetClkAfterWakeFromStop>:
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80026fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr

08002718 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800271c:	4b02      	ldr	r3, [pc, #8]	; (8002728 <LL_FLASH_GetUDN+0x10>)
 800271e:	681b      	ldr	r3, [r3, #0]
}
 8002720:	4618      	mov	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr
 8002728:	1fff7580 	.word	0x1fff7580

0800272c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002730:	4b03      	ldr	r3, [pc, #12]	; (8002740 <LL_FLASH_GetDeviceID+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	1fff7584 	.word	0x1fff7584

08002744 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <LL_FLASH_GetSTCompanyID+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0a1b      	lsrs	r3, r3, #8
}
 800274e:	4618      	mov	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	bc80      	pop	{r7}
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	1fff7584 	.word	0x1fff7584

0800275c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff ffc6 	bl	80026f2 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002766:	f01b fc31 	bl	801dfcc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <SystemApp_Init+0x48>)
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002770:	f000 f9b6 	bl	8002ae0 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002774:	f01b feba 	bl	801e4ec <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <SystemApp_Init+0x4c>)
 800277a:	f01b ff65 	bl	801e648 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <SystemApp_Init+0x50>)
 8002780:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002784:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002786:	2002      	movs	r0, #2
 8002788:	f01b ff6c 	bl	801e664 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800278c:	f7fe fe6c 	bl	8001468 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8002790:	f000 f9de 	bl	8002b50 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8002794:	f01a fde6 	bl	801d364 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002798:	2101      	movs	r1, #1
 800279a:	2001      	movs	r0, #1
 800279c:	f01a fe22 	bl	801d3e4 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}
 80027a4:	20000398 	.word	0x20000398
 80027a8:	080029d9 	.word	0x080029d9
 80027ac:	58004000 	.word	0x58004000

080027b0 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80027b4:	f01a fe46 	bl	801d444 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}

080027bc <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80027bc:	b590      	push	{r4, r7, lr}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80027c2:	2300      	movs	r3, #0
 80027c4:	71fb      	strb	r3, [r7, #7]
  static uint16_t batteryLevelmVA[AVERAGEL];
  static uint16_t count = 0;

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80027c6:	f7fe fe5d 	bl	8001484 <SYS_GetBatteryLevel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	81fb      	strh	r3, [r7, #14]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d902      	bls.n	80027de <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80027d8:	23fe      	movs	r3, #254	; 0xfe
 80027da:	71fb      	strb	r3, [r7, #7]
 80027dc:	e014      	b.n	8002808 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80027de:	89fb      	ldrh	r3, [r7, #14]
 80027e0:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80027e4:	d202      	bcs.n	80027ec <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	71fb      	strb	r3, [r7, #7]
 80027ea:	e00d      	b.n	8002808 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80027ec:	89fb      	ldrh	r3, [r7, #14]
 80027ee:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 80027f2:	461a      	mov	r2, r3
 80027f4:	4613      	mov	r3, r2
 80027f6:	01db      	lsls	r3, r3, #7
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	461a      	mov	r2, r3
 80027fe:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <GetBatteryLevel+0xac>)
 8002800:	fba3 2302 	umull	r2, r3, r3, r2
 8002804:	09db      	lsrs	r3, r3, #7
 8002806:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN GetBatteryLevel_2 */
  batteryLevelmVA[count++] = (uint16_t) SYS_GetBatteryLevel();
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <GetBatteryLevel+0xb0>)
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	1c5a      	adds	r2, r3, #1
 800280e:	b291      	uxth	r1, r2
 8002810:	4a16      	ldr	r2, [pc, #88]	; (800286c <GetBatteryLevel+0xb0>)
 8002812:	8011      	strh	r1, [r2, #0]
 8002814:	461c      	mov	r4, r3
 8002816:	f7fe fe35 	bl	8001484 <SYS_GetBatteryLevel>
 800281a:	4603      	mov	r3, r0
 800281c:	461a      	mov	r2, r3
 800281e:	4b14      	ldr	r3, [pc, #80]	; (8002870 <GetBatteryLevel+0xb4>)
 8002820:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  count %= AVERAGEL;
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <GetBatteryLevel+0xb0>)
 8002826:	881b      	ldrh	r3, [r3, #0]
 8002828:	f003 030f 	and.w	r3, r3, #15
 800282c:	b29a      	uxth	r2, r3
 800282e:	4b0f      	ldr	r3, [pc, #60]	; (800286c <GetBatteryLevel+0xb0>)
 8002830:	801a      	strh	r2, [r3, #0]

  batteryLevelmV = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	81fb      	strh	r3, [r7, #14]
  for(int i=0; i< AVERAGEL; i++)
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	e009      	b.n	8002850 <GetBatteryLevel+0x94>
  batteryLevelmV += batteryLevelmVA[i];
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <GetBatteryLevel+0xb4>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002844:	89fb      	ldrh	r3, [r7, #14]
 8002846:	4413      	add	r3, r2
 8002848:	81fb      	strh	r3, [r7, #14]
  for(int i=0; i< AVERAGEL; i++)
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b0f      	cmp	r3, #15
 8002854:	ddf2      	ble.n	800283c <GetBatteryLevel+0x80>

  //batteryLevelmV /= AVERAGEL;



  batteryLevel = batteryLevelmV >> 8; //(((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002856:	89fb      	ldrh	r3, [r7, #14]
 8002858:	0a1b      	lsrs	r3, r3, #8
 800285a:	b29b      	uxth	r3, r3
 800285c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 800285e:	79fb      	ldrb	r3, [r7, #7]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	1b4e81b5 	.word	0x1b4e81b5
 800286c:	2000039a 	.word	0x2000039a
 8002870:	2000039c 	.word	0x2000039c

08002874 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 800287e:	1d3b      	adds	r3, r7, #4
 8002880:	4618      	mov	r0, r3
 8002882:	f000 f93b 	bl	8002afc <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	4618      	mov	r0, r3
 800288a:	f7fe fb59 	bl	8000f40 <__aeabi_f2iz>
 800288e:	4603      	mov	r3, r0
 8002890:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8002892:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8002896:	4618      	mov	r0, r3
 8002898:	3720      	adds	r7, #32
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 800289e:	b590      	push	{r4, r7, lr}
 80028a0:	b087      	sub	sp, #28
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80028aa:	f7ff ff35 	bl	8002718 <LL_FLASH_GetUDN>
 80028ae:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d138      	bne.n	800292a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80028b8:	f001 fb6e 	bl	8003f98 <HAL_GetUIDw0>
 80028bc:	4604      	mov	r4, r0
 80028be:	f001 fb7f 	bl	8003fc0 <HAL_GetUIDw2>
 80028c2:	4603      	mov	r3, r0
 80028c4:	4423      	add	r3, r4
 80028c6:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80028c8:	f001 fb70 	bl	8003fac <HAL_GetUIDw1>
 80028cc:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	0e1a      	lsrs	r2, r3, #24
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3307      	adds	r3, #7
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	0c1a      	lsrs	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	3306      	adds	r3, #6
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	0a1a      	lsrs	r2, r3, #8
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3305      	adds	r3, #5
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	3304      	adds	r3, #4
 80028f6:	693a      	ldr	r2, [r7, #16]
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0e1a      	lsrs	r2, r3, #24
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	3303      	adds	r3, #3
 8002904:	b2d2      	uxtb	r2, r2
 8002906:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	0c1a      	lsrs	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	3302      	adds	r3, #2
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0a1a      	lsrs	r2, r3, #8
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3301      	adds	r3, #1
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002928:	e031      	b.n	800298e <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	3307      	adds	r3, #7
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	0a1a      	lsrs	r2, r3, #8
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3306      	adds	r3, #6
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	0c1a      	lsrs	r2, r3, #16
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	3305      	adds	r3, #5
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	0e1a      	lsrs	r2, r3, #24
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3304      	adds	r3, #4
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002958:	f7ff fee8 	bl	800272c <LL_FLASH_GetDeviceID>
 800295c:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	3303      	adds	r3, #3
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002968:	f7ff feec 	bl	8002744 <LL_FLASH_GetSTCompanyID>
 800296c:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3302      	adds	r3, #2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	0a1a      	lsrs	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	3301      	adds	r3, #1
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	b2da      	uxtb	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	701a      	strb	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	371c      	adds	r7, #28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd90      	pop	{r4, r7, pc}

08002996 <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 8002996:	b590      	push	{r4, r7, lr}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 800299e:	f7ff febb 	bl	8002718 <LL_FLASH_GetUDN>
 80029a2:	4602      	mov	r2, r0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b0:	d10d      	bne.n	80029ce <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80029b2:	f001 faf1 	bl	8003f98 <HAL_GetUIDw0>
 80029b6:	4604      	mov	r4, r0
 80029b8:	f001 faf8 	bl	8003fac <HAL_GetUIDw1>
 80029bc:	4603      	mov	r3, r0
 80029be:	405c      	eors	r4, r3
 80029c0:	f001 fafe 	bl	8003fc0 <HAL_GetUIDw2>
 80029c4:	4603      	mov	r3, r0
 80029c6:	ea84 0203 	eor.w	r2, r4, r3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd90      	pop	{r4, r7, pc}
	...

080029d8 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80029e2:	f107 0308 	add.w	r3, r7, #8
 80029e6:	4618      	mov	r0, r3
 80029e8:	f01a fe3c 	bl	801d664 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80029f2:	9200      	str	r2, [sp, #0]
 80029f4:	4a07      	ldr	r2, [pc, #28]	; (8002a14 <TimestampNow+0x3c>)
 80029f6:	2110      	movs	r1, #16
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f81d 	bl	8002a38 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f7fd fbba 	bl	8000178 <strlen>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	0801ec78 	.word	0x0801ec78

08002a18 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a1c:	2101      	movs	r1, #1
 8002a1e:	2002      	movs	r0, #2
 8002a20:	f01a fcb0 	bl	801d384 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2002      	movs	r0, #2
 8002a30:	f01a fca8 	bl	801d384 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002a38:	b40c      	push	{r2, r3}
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b084      	sub	sp, #16
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
 8002a42:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a4a:	6839      	ldr	r1, [r7, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f01a ffd9 	bl	801da08 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a60:	b002      	add	sp, #8
 8002a62:	4770      	bx	lr

08002a64 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_GetTick+0x24>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002a8a:	f000 f92d 	bl	8002ce8 <TIMER_IF_GetTimerValue>
 8002a8e:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002a90:	687b      	ldr	r3, [r7, #4]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000398 	.word	0x20000398

08002aa0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f9a3 	bl	8002df6 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <LL_EXTI_EnableIT_32_63+0x24>)
 8002ac2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ac6:	4905      	ldr	r1, [pc, #20]	; (8002adc <LL_EXTI_EnableIT_32_63+0x24>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	58000800 	.word	0x58000800

08002ae0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002ae4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002ae8:	f7ff ffe6 	bl	8002ab8 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002aec:	f001 fa72 	bl	8003fd4 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002af0:	f001 fa76 	bl	8003fe0 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002af4:	f001 fa7a 	bl	8003fec <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b087      	sub	sp, #28
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002b04:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <EnvSensors_Read+0x40>)
 8002b06:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <EnvSensors_Read+0x44>)
 8002b0a:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002b0c:	4b0d      	ldr	r3, [pc, #52]	; (8002b44 <EnvSensors_Read+0x48>)
 8002b0e:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a08      	ldr	r2, [pc, #32]	; (8002b48 <EnvSensors_Read+0x4c>)
 8002b26:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a08      	ldr	r2, [pc, #32]	; (8002b4c <EnvSensors_Read+0x50>)
 8002b2c:	611a      	str	r2, [r3, #16]

  return 0;
 8002b2e:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	42480000 	.word	0x42480000
 8002b40:	41900000 	.word	0x41900000
 8002b44:	447a0000 	.word	0x447a0000
 8002b48:	003e090d 	.word	0x003e090d
 8002b4c:	000503ab 	.word	0x000503ab

08002b50 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002b5a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr

08002b66 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b66:	b480      	push	{r7}
 8002b68:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b6a:	bf00      	nop
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	689b      	ldr	r3, [r3, #8]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <TIMER_IF_Init+0x5c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	f083 0301 	eor.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ba0:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <TIMER_IF_Init+0x60>)
 8002ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba6:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002ba8:	f7ff fb4e 	bl	8002248 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002bac:	f000 f856 	bl	8002c5c <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb4:	480c      	ldr	r0, [pc, #48]	; (8002be8 <TIMER_IF_Init+0x60>)
 8002bb6:	f007 f8b9 	bl	8009d2c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <TIMER_IF_Init+0x60>)
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002bc2:	4809      	ldr	r0, [pc, #36]	; (8002be8 <TIMER_IF_Init+0x60>)
 8002bc4:	f007 f9f0 	bl	8009fa8 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002bc8:	2000      	movs	r0, #0
 8002bca:	f000 f9d3 	bl	8002f74 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002bce:	f000 f85f 	bl	8002c90 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <TIMER_IF_Init+0x5c>)
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	200003bc 	.word	0x200003bc
 8002be8:	200002f0 	.word	0x200002f0

08002bec <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	; 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	222c      	movs	r2, #44	; 0x2c
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f01b ff18 	bl	801ea38 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002c08:	f000 f828 	bl	8002c5c <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002c0c:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <TIMER_IF_StartTimer+0x68>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	4413      	add	r3, r2
 8002c14:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c16:	2300      	movs	r3, #0
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c24:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c28:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	2201      	movs	r2, #1
 8002c36:	4619      	mov	r1, r3
 8002c38:	4807      	ldr	r0, [pc, #28]	; (8002c58 <TIMER_IF_StartTimer+0x6c>)
 8002c3a:	f006 ff6b 	bl	8009b14 <HAL_RTC_SetAlarm_IT>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002c44:	f7ff fa4a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002c48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3738      	adds	r7, #56	; 0x38
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	200003c0 	.word	0x200003c0
 8002c58:	200002f0 	.word	0x200002f0

08002c5c <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c62:	2300      	movs	r3, #0
 8002c64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <TIMER_IF_StopTimer+0x2c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c70:	4806      	ldr	r0, [pc, #24]	; (8002c8c <TIMER_IF_StopTimer+0x30>)
 8002c72:	f007 f85b 	bl	8009d2c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <TIMER_IF_StopTimer+0x30>)
 8002c78:	f04f 32ff 	mov.w	r2, #4294967295
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40002800 	.word	0x40002800
 8002c8c:	200002f0 	.word	0x200002f0

08002c90 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002c94:	f000 f98e 	bl	8002fb4 <GetTimerTicks>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a03      	ldr	r2, [pc, #12]	; (8002ca8 <TIMER_IF_SetTimerContext+0x18>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002c9e:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <TIMER_IF_SetTimerContext+0x18>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200003c0 	.word	0x200003c0

08002cac <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002cb0:	4b02      	ldr	r3, [pc, #8]	; (8002cbc <TIMER_IF_GetTimerContext+0x10>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	200003c0 	.word	0x200003c0

08002cc0 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002cca:	f000 f973 	bl	8002fb4 <GetTimerTicks>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002cd8:	687b      	ldr	r3, [r7, #4]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200003c0 	.word	0x200003c0

08002ce8 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002cf2:	4b06      	ldr	r3, [pc, #24]	; (8002d0c <TIMER_IF_GetTimerValue+0x24>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002cfa:	f000 f95b 	bl	8002fb4 <GetTimerTicks>
 8002cfe:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002d00:	687b      	ldr	r3, [r7, #4]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	200003bc 	.word	0x200003bc

08002d10 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002d1e:	687b      	ldr	r3, [r7, #4]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	370c      	adds	r7, #12
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d2a:	b5b0      	push	{r4, r5, r7, lr}
 8002d2c:	b084      	sub	sp, #16
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d32:	2100      	movs	r1, #0
 8002d34:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	2000      	movs	r0, #0
 8002d3a:	460a      	mov	r2, r1
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	0d95      	lsrs	r5, r2, #22
 8002d40:	0294      	lsls	r4, r2, #10
 8002d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	4629      	mov	r1, r5
 8002d4e:	f7fe f91d 	bl	8000f8c <__aeabi_uldivmod>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4613      	mov	r3, r2
 8002d58:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bdb0      	pop	{r4, r5, r7, pc}

08002d64 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d68:	b085      	sub	sp, #20
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d6e:	2100      	movs	r1, #0
 8002d70:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	2000      	movs	r0, #0
 8002d76:	460c      	mov	r4, r1
 8002d78:	4605      	mov	r5, r0
 8002d7a:	4620      	mov	r0, r4
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	f04f 0a00 	mov.w	sl, #0
 8002d82:	f04f 0b00 	mov.w	fp, #0
 8002d86:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002d8a:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002d8e:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002d92:	4650      	mov	r0, sl
 8002d94:	4659      	mov	r1, fp
 8002d96:	1b02      	subs	r2, r0, r4
 8002d98:	eb61 0305 	sbc.w	r3, r1, r5
 8002d9c:	f04f 0000 	mov.w	r0, #0
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	0099      	lsls	r1, r3, #2
 8002da6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002daa:	0090      	lsls	r0, r2, #2
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	eb12 0804 	adds.w	r8, r2, r4
 8002db4:	eb43 0905 	adc.w	r9, r3, r5
 8002db8:	f04f 0200 	mov.w	r2, #0
 8002dbc:	f04f 0300 	mov.w	r3, #0
 8002dc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002dc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002dc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dcc:	4690      	mov	r8, r2
 8002dce:	4699      	mov	r9, r3
 8002dd0:	4640      	mov	r0, r8
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	f04f 0300 	mov.w	r3, #0
 8002ddc:	0a82      	lsrs	r2, r0, #10
 8002dde:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002de2:	0a8b      	lsrs	r3, r1, #10
 8002de4:	4613      	mov	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002de8:	68fb      	ldr	r3, [r7, #12]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002df4:	4770      	bx	lr

08002df6 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	b084      	sub	sp, #16
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff ff93 	bl	8002d2a <TIMER_IF_Convert_ms2Tick>
 8002e04:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002e06:	f000 f8d5 	bl	8002fb4 <GetTimerTicks>
 8002e0a:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e0c:	e000      	b.n	8002e10 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002e0e:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e10:	f000 f8d0 	bl	8002fb4 <GetTimerTicks>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d8f6      	bhi.n	8002e0e <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002e32:	f01b fa19 	bl	801e268 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002e46:	f000 f8a5 	bl	8002f94 <TIMER_IF_BkUp_Read_MSBticks>
 8002e4a:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	4618      	mov	r0, r3
 8002e52:	f000 f88f 	bl	8002f74 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002e5e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e62:	b08c      	sub	sp, #48	; 0x30
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002e6c:	f000 f8a2 	bl	8002fb4 <GetTimerTicks>
 8002e70:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002e72:	f000 f88f 	bl	8002f94 <TIMER_IF_BkUp_Read_MSBticks>
 8002e76:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	60bb      	str	r3, [r7, #8]
 8002e7e:	60fa      	str	r2, [r7, #12]
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	000b      	movs	r3, r1
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e90:	2000      	movs	r0, #0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4605      	mov	r5, r0
 8002e96:	eb12 0804 	adds.w	r8, r2, r4
 8002e9a:	eb43 0905 	adc.w	r9, r3, r5
 8002e9e:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002ea2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ea6:	f04f 0200 	mov.w	r2, #0
 8002eaa:	f04f 0300 	mov.w	r3, #0
 8002eae:	0a82      	lsrs	r2, r0, #10
 8002eb0:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002eb4:	0a8b      	lsrs	r3, r1, #10
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002ec8:	f04f 0b00 	mov.w	fp, #0
 8002ecc:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff46 	bl	8002d64 <TIMER_IF_Convert_Tick2ms>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3730      	adds	r7, #48	; 0x30
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002eec <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4803      	ldr	r0, [pc, #12]	; (8002f08 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002efa:	f007 f8e7 	bl	800a0cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200002f0 	.word	0x200002f0

08002f0c <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	2101      	movs	r1, #1
 8002f18:	4803      	ldr	r0, [pc, #12]	; (8002f28 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002f1a:	f007 f8d7 	bl	800a0cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	200002f0 	.word	0x200002f0

08002f2c <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002f36:	2100      	movs	r1, #0
 8002f38:	4804      	ldr	r0, [pc, #16]	; (8002f4c <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002f3a:	f007 f8df 	bl	800a0fc <HAL_RTCEx_BKUPRead>
 8002f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002f40:	687b      	ldr	r3, [r7, #4]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200002f0 	.word	0x200002f0

08002f50 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f56:	2300      	movs	r3, #0
 8002f58:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4804      	ldr	r0, [pc, #16]	; (8002f70 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002f5e:	f007 f8cd 	bl	800a0fc <HAL_RTCEx_BKUPRead>
 8002f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002f64:	687b      	ldr	r3, [r7, #4]
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	200002f0 	.word	0x200002f0

08002f74 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	2102      	movs	r1, #2
 8002f80:	4803      	ldr	r0, [pc, #12]	; (8002f90 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002f82:	f007 f8a3 	bl	800a0cc <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200002f0 	.word	0x200002f0

08002f94 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002f9a:	2102      	movs	r1, #2
 8002f9c:	4804      	ldr	r0, [pc, #16]	; (8002fb0 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002f9e:	f007 f8ad 	bl	800a0fc <HAL_RTCEx_BKUPRead>
 8002fa2:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002fa4:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200002f0 	.word	0x200002f0

08002fb4 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002fba:	480b      	ldr	r0, [pc, #44]	; (8002fe8 <GetTimerTicks+0x34>)
 8002fbc:	f7ff fdd9 	bl	8002b72 <LL_RTC_TIME_GetSubSecond>
 8002fc0:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002fc2:	e003      	b.n	8002fcc <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002fc4:	4808      	ldr	r0, [pc, #32]	; (8002fe8 <GetTimerTicks+0x34>)
 8002fc6:	f7ff fdd4 	bl	8002b72 <LL_RTC_TIME_GetSubSecond>
 8002fca:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002fcc:	4806      	ldr	r0, [pc, #24]	; (8002fe8 <GetTimerTicks+0x34>)
 8002fce:	f7ff fdd0 	bl	8002b72 <LL_RTC_TIME_GetSubSecond>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d1f4      	bne.n	8002fc4 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	40002800 	.word	0x40002800

08002fec <LL_AHB2_GRP1_EnableClock>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002ffa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4313      	orrs	r3, r2
 8003002:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4013      	ands	r3, r2
 800300e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003010:	68fb      	ldr	r3, [r7, #12]
}
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	bc80      	pop	{r7}
 800301a:	4770      	bx	lr

0800301c <LL_APB1_GRP1_EnableClock>:
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003028:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800302a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4313      	orrs	r3, r2
 8003032:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4013      	ands	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003040:	68fb      	ldr	r3, [r7, #12]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <LL_APB1_GRP1_DisableClock>:
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	43db      	mvns	r3, r3
 800305e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003062:	4013      	ands	r3, r2
 8003064:	658b      	str	r3, [r1, #88]	; 0x58
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <LL_APB2_GRP1_EnableClock>:
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800308c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	bc80      	pop	{r7}
 800309e:	4770      	bx	lr

080030a0 <LL_APB2_GRP1_DisableClock>:
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030b6:	4013      	ands	r3, r2
 80030b8:	660b      	str	r3, [r1, #96]	; 0x60
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr

080030c4 <LL_SYSCFG_EnableFastModePlus>:
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	4904      	ldr	r1, [pc, #16]	; (80030e4 <LL_SYSCFG_EnableFastModePlus+0x20>)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bc80      	pop	{r7}
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000

080030e8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80030ec:	4b26      	ldr	r3, [pc, #152]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 80030ee:	4a27      	ldr	r2, [pc, #156]	; (800318c <MX_USART1_UART_Init+0xa4>)
 80030f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80030f2:	4b25      	ldr	r3, [pc, #148]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 80030f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80030fa:	4b23      	ldr	r3, [pc, #140]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003100:	4b21      	ldr	r3, [pc, #132]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003102:	2200      	movs	r2, #0
 8003104:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003106:	4b20      	ldr	r3, [pc, #128]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003108:	2200      	movs	r2, #0
 800310a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800310c:	4b1e      	ldr	r3, [pc, #120]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 800310e:	220c      	movs	r2, #12
 8003110:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003114:	2200      	movs	r2, #0
 8003116:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 800311a:	2200      	movs	r2, #0
 800311c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800311e:	4b1a      	ldr	r3, [pc, #104]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003120:	2200      	movs	r2, #0
 8003122:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003124:	4b18      	ldr	r3, [pc, #96]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003126:	2200      	movs	r2, #0
 8003128:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 800312a:	4b17      	ldr	r3, [pc, #92]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003130:	4b15      	ldr	r3, [pc, #84]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003132:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003136:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003138:	4b13      	ldr	r3, [pc, #76]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 800313a:	2200      	movs	r2, #0
 800313c:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800313e:	4812      	ldr	r0, [pc, #72]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003140:	f007 fda1 	bl	800ac86 <HAL_UART_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 800314a:	f7fe ffc7 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800314e:	2100      	movs	r1, #0
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003152:	f009 fefc 	bl	800cf4e <HAL_UARTEx_SetTxFifoThreshold>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 800315c:	f7fe ffbe 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003160:	2100      	movs	r1, #0
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003164:	f009 ff31 	bl	800cfca <HAL_UARTEx_SetRxFifoThreshold>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 800316e:	f7fe ffb5 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8003172:	4805      	ldr	r0, [pc, #20]	; (8003188 <MX_USART1_UART_Init+0xa0>)
 8003174:	f009 fe78 	bl	800ce68 <HAL_UARTEx_EnableFifoMode>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 800317e:	f7fe ffad 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003182:	bf00      	nop
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	200003c4 	.word	0x200003c4
 800318c:	40013800 	.word	0x40013800

08003190 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <MX_USART2_UART_Init+0x94>)
 8003196:	4a24      	ldr	r2, [pc, #144]	; (8003228 <MX_USART2_UART_Init+0x98>)
 8003198:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <MX_USART2_UART_Init+0x94>)
 800319c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031a8:	4b1e      	ldr	r3, [pc, #120]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ae:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b4:	4b1b      	ldr	r3, [pc, #108]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031b6:	220c      	movs	r2, #12
 80031b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ba:	4b1a      	ldr	r3, [pc, #104]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031bc:	2200      	movs	r2, #0
 80031be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80031c0:	4b18      	ldr	r3, [pc, #96]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031c6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c8:	4b16      	ldr	r3, [pc, #88]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031d4:	4b13      	ldr	r3, [pc, #76]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031da:	4812      	ldr	r0, [pc, #72]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031dc:	f007 fd53 	bl	800ac86 <HAL_UART_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80031e6:	f7fe ff79 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031ea:	2100      	movs	r1, #0
 80031ec:	480d      	ldr	r0, [pc, #52]	; (8003224 <MX_USART2_UART_Init+0x94>)
 80031ee:	f009 feae 	bl	800cf4e <HAL_UARTEx_SetTxFifoThreshold>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80031f8:	f7fe ff70 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80031fc:	2100      	movs	r1, #0
 80031fe:	4809      	ldr	r0, [pc, #36]	; (8003224 <MX_USART2_UART_Init+0x94>)
 8003200:	f009 fee3 	bl	800cfca <HAL_UARTEx_SetRxFifoThreshold>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800320a:	f7fe ff67 	bl	80020dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800320e:	4805      	ldr	r0, [pc, #20]	; (8003224 <MX_USART2_UART_Init+0x94>)
 8003210:	f009 fe65 	bl	800cede <HAL_UARTEx_DisableFifoMode>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800321a:	f7fe ff5f 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000458 	.word	0x20000458
 8003228:	40004400 	.word	0x40004400

0800322c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b09a      	sub	sp, #104	; 0x68
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 8003244:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003252:	f107 030c 	add.w	r3, r7, #12
 8003256:	2238      	movs	r2, #56	; 0x38
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f01b fbec 	bl	801ea38 <memset>
  if(uartHandle->Instance==USART1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6f      	ldr	r2, [pc, #444]	; (8003424 <HAL_UART_MspInit+0x1f8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f040 80a4 	bne.w	80033b4 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800326c:	2301      	movs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003270:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003274:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003276:	f107 030c 	add.w	r3, r7, #12
 800327a:	4618      	mov	r0, r3
 800327c:	f006 faae 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 8003286:	f7fe ff29 	bl	80020dc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800328a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800328e:	f7ff feef 	bl	8003070 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2002      	movs	r0, #2
 8003294:	f7ff feaa 	bl	8002fec <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8003298:	23c0      	movs	r3, #192	; 0xc0
 800329a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329c:	2302      	movs	r3, #2
 800329e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032a0:	2301      	movs	r3, #1
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032a4:	2301      	movs	r3, #1
 80032a6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032a8:	2307      	movs	r3, #7
 80032aa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032b0:	4619      	mov	r1, r3
 80032b2:	485d      	ldr	r0, [pc, #372]	; (8003428 <HAL_UART_MspInit+0x1fc>)
 80032b4:	f002 fec0 	bl	8006038 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80032b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032bc:	f7ff ff02 	bl	80030c4 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80032c0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80032c4:	f7ff fefe 	bl	80030c4 <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80032c8:	4b58      	ldr	r3, [pc, #352]	; (800342c <HAL_UART_MspInit+0x200>)
 80032ca:	4a59      	ldr	r2, [pc, #356]	; (8003430 <HAL_UART_MspInit+0x204>)
 80032cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032ce:	4b57      	ldr	r3, [pc, #348]	; (800342c <HAL_UART_MspInit+0x200>)
 80032d0:	2212      	movs	r2, #18
 80032d2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032d4:	4b55      	ldr	r3, [pc, #340]	; (800342c <HAL_UART_MspInit+0x200>)
 80032d6:	2210      	movs	r2, #16
 80032d8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032da:	4b54      	ldr	r3, [pc, #336]	; (800342c <HAL_UART_MspInit+0x200>)
 80032dc:	2200      	movs	r2, #0
 80032de:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032e0:	4b52      	ldr	r3, [pc, #328]	; (800342c <HAL_UART_MspInit+0x200>)
 80032e2:	2280      	movs	r2, #128	; 0x80
 80032e4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_UART_MspInit+0x200>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ec:	4b4f      	ldr	r3, [pc, #316]	; (800342c <HAL_UART_MspInit+0x200>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032f2:	4b4e      	ldr	r3, [pc, #312]	; (800342c <HAL_UART_MspInit+0x200>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032f8:	4b4c      	ldr	r3, [pc, #304]	; (800342c <HAL_UART_MspInit+0x200>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032fe:	484b      	ldr	r0, [pc, #300]	; (800342c <HAL_UART_MspInit+0x200>)
 8003300:	f001 fff8 	bl	80052f4 <HAL_DMA_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 800330a:	f7fe fee7 	bl	80020dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a46      	ldr	r2, [pc, #280]	; (800342c <HAL_UART_MspInit+0x200>)
 8003312:	67da      	str	r2, [r3, #124]	; 0x7c
 8003314:	4a45      	ldr	r2, [pc, #276]	; (800342c <HAL_UART_MspInit+0x200>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_UART_MspInit+0x208>)
 800331c:	4a46      	ldr	r2, [pc, #280]	; (8003438 <HAL_UART_MspInit+0x20c>)
 800331e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003320:	4b44      	ldr	r3, [pc, #272]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003322:	2211      	movs	r2, #17
 8003324:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003326:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003328:	2200      	movs	r2, #0
 800332a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800332c:	4b41      	ldr	r3, [pc, #260]	; (8003434 <HAL_UART_MspInit+0x208>)
 800332e:	2200      	movs	r2, #0
 8003330:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003338:	4b3e      	ldr	r3, [pc, #248]	; (8003434 <HAL_UART_MspInit+0x208>)
 800333a:	2200      	movs	r2, #0
 800333c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003340:	2200      	movs	r2, #0
 8003342:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003344:	4b3b      	ldr	r3, [pc, #236]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003346:	2200      	movs	r2, #0
 8003348:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800334a:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <HAL_UART_MspInit+0x208>)
 800334c:	2200      	movs	r2, #0
 800334e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003350:	4838      	ldr	r0, [pc, #224]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003352:	f001 ffcf 	bl	80052f4 <HAL_DMA_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 800335c:	f7fe febe 	bl	80020dc <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003364:	2300      	movs	r3, #0
 8003366:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003368:	2300      	movs	r3, #0
 800336a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 800336e:	2301      	movs	r3, #1
 8003370:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 8003374:	2301      	movs	r3, #1
 8003376:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003378:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800337c:	4619      	mov	r1, r3
 800337e:	482d      	ldr	r0, [pc, #180]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003380:	f002 fbae 	bl	8005ae0 <HAL_DMAEx_ConfigMuxSync>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800338a:	f7fe fea7 	bl	80020dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a28      	ldr	r2, [pc, #160]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003392:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003396:	4a27      	ldr	r2, [pc, #156]	; (8003434 <HAL_UART_MspInit+0x208>)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800339c:	2200      	movs	r2, #0
 800339e:	2102      	movs	r1, #2
 80033a0:	2024      	movs	r0, #36	; 0x24
 80033a2:	f001 ff70 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033a6:	2024      	movs	r0, #36	; 0x24
 80033a8:	f001 ff87 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033ac:	200c      	movs	r0, #12
 80033ae:	f001 ff84 	bl	80052ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033b2:	e033      	b.n	800341c <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a20      	ldr	r2, [pc, #128]	; (800343c <HAL_UART_MspInit+0x210>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d12e      	bne.n	800341c <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033be:	2302      	movs	r3, #2
 80033c0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033c2:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80033c6:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c8:	f107 030c 	add.w	r3, r7, #12
 80033cc:	4618      	mov	r0, r3
 80033ce:	f006 fa05 	bl	80097dc <HAL_RCCEx_PeriphCLKConfig>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80033d8:	f7fe fe80 	bl	80020dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033dc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033e0:	f7ff fe1c 	bl	800301c <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e4:	2001      	movs	r0, #1
 80033e6:	f7ff fe01 	bl	8002fec <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80033ea:	230c      	movs	r3, #12
 80033ec:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ee:	2302      	movs	r3, #2
 80033f0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033f2:	2301      	movs	r3, #1
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80033f6:	2301      	movs	r3, #1
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033fa:	2307      	movs	r3, #7
 80033fc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003402:	4619      	mov	r1, r3
 8003404:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003408:	f002 fe16 	bl	8006038 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800340c:	2200      	movs	r2, #0
 800340e:	2100      	movs	r1, #0
 8003410:	2025      	movs	r0, #37	; 0x25
 8003412:	f001 ff38 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003416:	2025      	movs	r0, #37	; 0x25
 8003418:	f001 ff4f 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 800341c:	bf00      	nop
 800341e:	3768      	adds	r7, #104	; 0x68
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40013800 	.word	0x40013800
 8003428:	48000400 	.word	0x48000400
 800342c:	200004ec 	.word	0x200004ec
 8003430:	40020008 	.word	0x40020008
 8003434:	2000054c 	.word	0x2000054c
 8003438:	4002001c 	.word	0x4002001c
 800343c:	40004400 	.word	0x40004400

08003440 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a17      	ldr	r2, [pc, #92]	; (80034ac <HAL_UART_MspDeInit+0x6c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d116      	bne.n	8003480 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003452:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003456:	f7ff fe23 	bl	80030a0 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 800345a:	21c0      	movs	r1, #192	; 0xc0
 800345c:	4814      	ldr	r0, [pc, #80]	; (80034b0 <HAL_UART_MspDeInit+0x70>)
 800345e:	f002 ff4b 	bl	80062f8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	4618      	mov	r0, r3
 8003468:	f001 ffec 	bl	8005444 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003472:	4618      	mov	r0, r3
 8003474:	f001 ffe6 	bl	8005444 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003478:	2024      	movs	r0, #36	; 0x24
 800347a:	f001 ff2c 	bl	80052d6 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800347e:	e010      	b.n	80034a2 <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a0b      	ldr	r2, [pc, #44]	; (80034b4 <HAL_UART_MspDeInit+0x74>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d10b      	bne.n	80034a2 <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 800348a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800348e:	f7ff fddd 	bl	800304c <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 8003492:	210c      	movs	r1, #12
 8003494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003498:	f002 ff2e 	bl	80062f8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800349c:	2025      	movs	r0, #37	; 0x25
 800349e:	f001 ff1a 	bl	80052d6 <HAL_NVIC_DisableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	40013800 	.word	0x40013800
 80034b0:	48000400 	.word	0x48000400
 80034b4:	40004400 	.word	0x40004400

080034b8 <LL_APB2_GRP1_ForceReset>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80034c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	640b      	str	r3, [r1, #64]	; 0x40
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <LL_APB2_GRP1_ReleaseReset>:
{
 80034da:	b480      	push	{r7}
 80034dc:	b083      	sub	sp, #12
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80034e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	43db      	mvns	r3, r3
 80034ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034f0:	4013      	ands	r3, r2
 80034f2:	640b      	str	r3, [r1, #64]	; 0x40
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
	...

08003500 <LL_EXTI_EnableIT_0_31>:
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003508:	4b06      	ldr	r3, [pc, #24]	; (8003524 <LL_EXTI_EnableIT_0_31+0x24>)
 800350a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800350e:	4905      	ldr	r1, [pc, #20]	; (8003524 <LL_EXTI_EnableIT_0_31+0x24>)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	58000800 	.word	0x58000800

08003528 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003530:	4a07      	ldr	r2, [pc, #28]	; (8003550 <vcom_Init+0x28>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8003536:	f7fe f80f 	bl	8001558 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800353a:	f7ff fdd5 	bl	80030e8 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 800353e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003542:	f7ff ffdd 	bl	8003500 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8003546:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	200005b0 	.word	0x200005b0

08003554 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003558:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800355c:	f7ff ffac 	bl	80034b8 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003560:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003564:	f7ff ffb9 	bl	80034da <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <vcom_DeInit+0x28>)
 800356a:	f7ff ff69 	bl	8003440 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 800356e:	200f      	movs	r0, #15
 8003570:	f001 feb1 	bl	80052d6 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 8003574:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200003c4 	.word	0x200003c4

08003580 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	461a      	mov	r2, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4804      	ldr	r0, [pc, #16]	; (80035a4 <vcom_Trace_DMA+0x24>)
 8003594:	f007 fc14 	bl	800adc0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8003598:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800359a:	4618      	mov	r0, r3
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	200003c4 	.word	0x200003c4

080035a8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b084      	sub	sp, #16
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80035b0:	4a19      	ldr	r2, [pc, #100]	; (8003618 <vcom_ReceiveInit+0x70>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80035b6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035ba:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80035bc:	f107 0308 	add.w	r3, r7, #8
 80035c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035c4:	4815      	ldr	r0, [pc, #84]	; (800361c <vcom_ReceiveInit+0x74>)
 80035c6:	f009 fbc2 	bl	800cd4e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80035ca:	bf00      	nop
 80035cc:	4b13      	ldr	r3, [pc, #76]	; (800361c <vcom_ReceiveInit+0x74>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035da:	d0f7      	beq.n	80035cc <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80035dc:	bf00      	nop
 80035de:	4b0f      	ldr	r3, [pc, #60]	; (800361c <vcom_ReceiveInit+0x74>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ec:	d1f7      	bne.n	80035de <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 80035ee:	4b0b      	ldr	r3, [pc, #44]	; (800361c <vcom_ReceiveInit+0x74>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <vcom_ReceiveInit+0x74>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80035fc:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 80035fe:	4807      	ldr	r0, [pc, #28]	; (800361c <vcom_ReceiveInit+0x74>)
 8003600:	f009 fc00 	bl	800ce04 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 8003604:	2201      	movs	r2, #1
 8003606:	4906      	ldr	r1, [pc, #24]	; (8003620 <vcom_ReceiveInit+0x78>)
 8003608:	4804      	ldr	r0, [pc, #16]	; (800361c <vcom_ReceiveInit+0x74>)
 800360a:	f007 fb8d 	bl	800ad28 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800360e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	200005b4 	.word	0x200005b4
 800361c:	200003c4 	.word	0x200003c4
 8003620:	200005ac 	.word	0x200005ac

08003624 <vcom_Resume>:

void vcom_Resume(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003628:	4808      	ldr	r0, [pc, #32]	; (800364c <vcom_Resume+0x28>)
 800362a:	f007 fb2c 	bl	800ac86 <HAL_UART_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <vcom_Resume+0x14>
  {
    Error_Handler();
 8003634:	f7fe fd52 	bl	80020dc <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003638:	4805      	ldr	r0, [pc, #20]	; (8003650 <vcom_Resume+0x2c>)
 800363a:	f001 fe5b 	bl	80052f4 <HAL_DMA_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <vcom_Resume+0x24>
  {
    Error_Handler();
 8003644:	f7fe fd4a 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003648:	bf00      	nop
 800364a:	bd80      	pop	{r7, pc}
 800364c:	200003c4 	.word	0x200003c4
 8003650:	200004ec 	.word	0x200004ec

08003654 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a05      	ldr	r2, [pc, #20]	; (8003678 <HAL_UART_TxCpltCallback+0x24>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d103      	bne.n	800366e <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_UART_TxCpltCallback+0x28>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2000      	movs	r0, #0
 800366c:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800366e:	bf00      	nop
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	40013800 	.word	0x40013800
 800367c:	200005b0 	.word	0x200005b0

08003680 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a11      	ldr	r2, [pc, #68]	; (80036d4 <HAL_UART_RxCpltCallback+0x54>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d113      	bne.n	80036ba <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_UART_RxCpltCallback+0x58>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_UART_RxCpltCallback+0x30>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d105      	bne.n	80036b0 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <HAL_UART_RxCpltCallback+0x58>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2200      	movs	r2, #0
 80036aa:	2101      	movs	r1, #1
 80036ac:	480b      	ldr	r0, [pc, #44]	; (80036dc <HAL_UART_RxCpltCallback+0x5c>)
 80036ae:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80036b0:	2201      	movs	r2, #1
 80036b2:	490a      	ldr	r1, [pc, #40]	; (80036dc <HAL_UART_RxCpltCallback+0x5c>)
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f007 fb37 	bl	800ad28 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a08      	ldr	r2, [pc, #32]	; (80036e0 <HAL_UART_RxCpltCallback+0x60>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_UART_RxCpltCallback+0x64>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40013800 	.word	0x40013800
 80036d8:	200005b4 	.word	0x200005b4
 80036dc:	200005ac 	.word	0x200005ac
 80036e0:	40004400 	.word	0x40004400
 80036e4:	20000008 	.word	0x20000008

080036e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036e8:	480d      	ldr	r0, [pc, #52]	; (8003720 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036ec:	f7ff fa3b 	bl	8002b66 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036f0:	480c      	ldr	r0, [pc, #48]	; (8003724 <LoopForever+0x6>)
  ldr r1, =_edata
 80036f2:	490d      	ldr	r1, [pc, #52]	; (8003728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <LoopForever+0xe>)
  movs r3, #0
 80036f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036f8:	e002      	b.n	8003700 <LoopCopyDataInit>

080036fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036fe:	3304      	adds	r3, #4

08003700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003704:	d3f9      	bcc.n	80036fa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003706:	4a0a      	ldr	r2, [pc, #40]	; (8003730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003708:	4c0a      	ldr	r4, [pc, #40]	; (8003734 <LoopForever+0x16>)
  movs r3, #0
 800370a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800370c:	e001      	b.n	8003712 <LoopFillZerobss>

0800370e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800370e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003710:	3204      	adds	r2, #4

08003712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003714:	d3fb      	bcc.n	800370e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003716:	f01b f997 	bl	801ea48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800371a:	f7fe fb75 	bl	8001e08 <main>

0800371e <LoopForever>:

LoopForever:
    b LoopForever
 800371e:	e7fe      	b.n	800371e <LoopForever>
  ldr   r0, =_estack
 8003720:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003728:	20000164 	.word	0x20000164
  ldr r2, =_sidata
 800372c:	0801fc14 	.word	0x0801fc14
  ldr r2, =_sbss
 8003730:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8003734:	20002024 	.word	0x20002024

08003738 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003738:	e7fe      	b.n	8003738 <ADC_IRQHandler>

0800373a <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003740:	1d3b      	adds	r3, r7, #4
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
 800374c:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800374e:	2310      	movs	r3, #16
 8003750:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8003752:	2301      	movs	r3, #1
 8003754:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800375a:	2303      	movs	r3, #3
 800375c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	4619      	mov	r1, r3
 8003762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003766:	f002 fc67 	bl	8006038 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800376a:	2320      	movs	r3, #32
 800376c:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800376e:	1d3b      	adds	r3, r7, #4
 8003770:	4619      	mov	r1, r3
 8003772:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003776:	f002 fc5f 	bl	8006038 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800377a:	2200      	movs	r2, #0
 800377c:	2120      	movs	r1, #32
 800377e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003782:	f002 fe87 	bl	8006494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003786:	2200      	movs	r2, #0
 8003788:	2110      	movs	r1, #16
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f002 fe81 	bl	8006494 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	4603      	mov	r3, r0
 80037a4:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80037a6:	79fb      	ldrb	r3, [r7, #7]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d83f      	bhi.n	800382c <BSP_RADIO_ConfigRFSwitch+0x90>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <BSP_RADIO_ConfigRFSwitch+0x18>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037c5 	.word	0x080037c5
 80037b8:	080037df 	.word	0x080037df
 80037bc:	080037f9 	.word	0x080037f9
 80037c0:	08003813 	.word	0x08003813
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80037c4:	2200      	movs	r2, #0
 80037c6:	2110      	movs	r1, #16
 80037c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037cc:	f002 fe62 	bl	8006494 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80037d0:	2200      	movs	r2, #0
 80037d2:	2120      	movs	r1, #32
 80037d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037d8:	f002 fe5c 	bl	8006494 <HAL_GPIO_WritePin>
      break;      
 80037dc:	e027      	b.n	800382e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80037de:	2201      	movs	r2, #1
 80037e0:	2110      	movs	r1, #16
 80037e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e6:	f002 fe55 	bl	8006494 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80037ea:	2200      	movs	r2, #0
 80037ec:	2120      	movs	r1, #32
 80037ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f2:	f002 fe4f 	bl	8006494 <HAL_GPIO_WritePin>
      break;
 80037f6:	e01a      	b.n	800382e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80037f8:	2201      	movs	r2, #1
 80037fa:	2110      	movs	r1, #16
 80037fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003800:	f002 fe48 	bl	8006494 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003804:	2201      	movs	r2, #1
 8003806:	2120      	movs	r1, #32
 8003808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380c:	f002 fe42 	bl	8006494 <HAL_GPIO_WritePin>
      break;
 8003810:	e00d      	b.n	800382e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8003812:	2200      	movs	r2, #0
 8003814:	2110      	movs	r1, #16
 8003816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800381a:	f002 fe3b 	bl	8006494 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800381e:	2201      	movs	r2, #1
 8003820:	2120      	movs	r1, #32
 8003822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003826:	f002 fe35 	bl	8006494 <HAL_GPIO_WritePin>
      break;
 800382a:	e000      	b.n	800382e <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 800382c:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 800383c:	2302      	movs	r3, #2
}
 800383e:	4618      	mov	r0, r3
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr

08003846 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8003846:	b480      	push	{r7}
 8003848:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003858:	2301      	movs	r3, #1
}
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr

08003862 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8003862:	b480      	push	{r7}
 8003864:	b085      	sub	sp, #20
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8003872:	230f      	movs	r3, #15
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e001      	b.n	800387c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003878:	2316      	movs	r3, #22
 800387a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800387c:	68fb      	ldr	r3, [r7, #12]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	bc80      	pop	{r7}
 8003886:	4770      	bx	lr

08003888 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 800388e:	2300      	movs	r3, #0
 8003890:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 8003892:	88f9      	ldrh	r1, [r7, #6]
 8003894:	463b      	mov	r3, r7
 8003896:	2221      	movs	r2, #33	; 0x21
 8003898:	4618      	mov	r0, r3
 800389a:	f000 fa0d 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	463b      	mov	r3, r7
 80038a6:	4619      	mov	r1, r3
 80038a8:	2069      	movs	r0, #105	; 0x69
 80038aa:	f000 fa27 	bl	8003cfc <sensirion_i2c_write_data>
 80038ae:	4603      	mov	r3, r0
 80038b0:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80038b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <sen5x_start_measurement+0x38>
        return error;
 80038ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038be:	e004      	b.n	80038ca <sen5x_start_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 80038c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038c4:	f000 faca 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3708      	adds	r7, #8
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 80038de:	88f9      	ldrh	r1, [r7, #6]
 80038e0:	463b      	mov	r3, r7
 80038e2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 f9e6 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 80038ec:	4603      	mov	r3, r0
 80038ee:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80038f0:	88fa      	ldrh	r2, [r7, #6]
 80038f2:	463b      	mov	r3, r7
 80038f4:	4619      	mov	r1, r3
 80038f6:	2069      	movs	r0, #105	; 0x69
 80038f8:	f000 fa00 	bl	8003cfc <sensirion_i2c_write_data>
 80038fc:	4603      	mov	r3, r0
 80038fe:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8003900:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <sen5x_stop_measurement+0x3a>
        return error;
 8003908:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800390c:	e003      	b.n	8003916 <sen5x_stop_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 800390e:	4804      	ldr	r0, [pc, #16]	; (8003920 <sen5x_stop_measurement+0x4c>)
 8003910:	f000 faa4 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	00030d40 	.word	0x00030d40

08003924 <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   uint16_t* voc_index, uint16_t* nox_index) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b08c      	sub	sp, #48	; 0x30
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
 8003930:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 8003932:	2300      	movs	r3, #0
 8003934:	85fb      	strh	r3, [r7, #46]	; 0x2e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 8003936:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8003940:	4618      	mov	r0, r3
 8003942:	f000 f9b9 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 8003946:	4603      	mov	r3, r0
 8003948:	85fb      	strh	r3, [r7, #46]	; 0x2e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 800394a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800394c:	f107 0314 	add.w	r3, r7, #20
 8003950:	4619      	mov	r1, r3
 8003952:	2069      	movs	r0, #105	; 0x69
 8003954:	f000 f9d2 	bl	8003cfc <sensirion_i2c_write_data>
 8003958:	4603      	mov	r3, r0
 800395a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (error) {
 800395c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <sen5x_read_measured_values+0x46>
        return error;
 8003964:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003968:	e063      	b.n	8003a32 <sen5x_read_measured_values+0x10e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 800396a:	f644 6020 	movw	r0, #20000	; 0x4e20
 800396e:	f000 fa75 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 8003972:	f107 0314 	add.w	r3, r7, #20
 8003976:	2210      	movs	r2, #16
 8003978:	4619      	mov	r1, r3
 800397a:	2069      	movs	r0, #105	; 0x69
 800397c:	f000 f9d2 	bl	8003d24 <sensirion_i2c_read_data_inplace>
 8003980:	4603      	mov	r3, r0
 8003982:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (error) {
 8003984:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <sen5x_read_measured_values+0x6e>
        return error;
 800398c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003990:	e04f      	b.n	8003a32 <sen5x_read_measured_values+0x10e>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 8003992:	f107 0314 	add.w	r3, r7, #20
 8003996:	4618      	mov	r0, r3
 8003998:	f000 f8fe 	bl	8003b98 <sensirion_common_bytes_to_uint16_t>
 800399c:	4603      	mov	r3, r0
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80039a4:	f107 0314 	add.w	r3, r7, #20
 80039a8:	3302      	adds	r3, #2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f000 f8f4 	bl	8003b98 <sensirion_common_bytes_to_uint16_t>
 80039b0:	4603      	mov	r3, r0
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80039b8:	f107 0314 	add.w	r3, r7, #20
 80039bc:	3304      	adds	r3, #4
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 f8ea 	bl	8003b98 <sensirion_common_bytes_to_uint16_t>
 80039c4:	4603      	mov	r3, r0
 80039c6:	461a      	mov	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 80039cc:	f107 0314 	add.w	r3, r7, #20
 80039d0:	3306      	adds	r3, #6
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 f8e0 	bl	8003b98 <sensirion_common_bytes_to_uint16_t>
 80039d8:	4603      	mov	r3, r0
 80039da:	461a      	mov	r2, r3
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	3308      	adds	r3, #8
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f8ea 	bl	8003bc0 <sensirion_common_bytes_to_int16_t>
 80039ec:	4603      	mov	r3, r0
 80039ee:	461a      	mov	r2, r3
 80039f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f2:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 80039f4:	f107 0314 	add.w	r3, r7, #20
 80039f8:	330a      	adds	r3, #10
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 f8e0 	bl	8003bc0 <sensirion_common_bytes_to_int16_t>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a06:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f8d6 	bl	8003bc0 <sensirion_common_bytes_to_int16_t>
 8003a14:	4603      	mov	r3, r0
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1a:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	330e      	adds	r3, #14
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f8cc 	bl	8003bc0 <sensirion_common_bytes_to_int16_t>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2e:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b090      	sub	sp, #64	; 0x40
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	87fb      	strh	r3, [r7, #62]	; 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8003a4a:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	f24d 0214 	movw	r2, #53268	; 0xd014
 8003a54:	4618      	mov	r0, r3
 8003a56:	f000 f92f 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	87fb      	strh	r3, [r7, #62]	; 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003a5e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003a60:	f107 030c 	add.w	r3, r7, #12
 8003a64:	4619      	mov	r1, r3
 8003a66:	2069      	movs	r0, #105	; 0x69
 8003a68:	f000 f948 	bl	8003cfc <sensirion_i2c_write_data>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003a70:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <sen5x_get_product_name+0x44>
        return error;
 8003a78:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003a7c:	e01c      	b.n	8003ab8 <sen5x_get_product_name+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8003a7e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a82:	f000 f9eb 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8003a86:	f107 030c 	add.w	r3, r7, #12
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	2069      	movs	r0, #105	; 0x69
 8003a90:	f000 f948 	bl	8003d24 <sensirion_i2c_read_data_inplace>
 8003a94:	4603      	mov	r3, r0
 8003a96:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003a98:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <sen5x_get_product_name+0x6c>
        return error;
 8003aa0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003aa4:	e008      	b.n	8003ab8 <sen5x_get_product_name+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	f107 030c 	add.w	r3, r7, #12
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f892 	bl	8003bda <sensirion_common_copy_bytes>
    return NO_ERROR;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3740      	adds	r7, #64	; 0x40
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b090      	sub	sp, #64	; 0x40
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8003acc:	2300      	movs	r3, #0
 8003ace:	87fb      	strh	r3, [r7, #62]	; 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8003ad0:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	f24d 0233 	movw	r2, #53299	; 0xd033
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f8ec 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	87fb      	strh	r3, [r7, #62]	; 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003ae4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003ae6:	f107 030c 	add.w	r3, r7, #12
 8003aea:	4619      	mov	r1, r3
 8003aec:	2069      	movs	r0, #105	; 0x69
 8003aee:	f000 f905 	bl	8003cfc <sensirion_i2c_write_data>
 8003af2:	4603      	mov	r3, r0
 8003af4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003af6:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <sen5x_get_serial_number+0x44>
        return error;
 8003afe:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b02:	e01c      	b.n	8003b3e <sen5x_get_serial_number+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8003b04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b08:	f000 f9a8 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	2220      	movs	r2, #32
 8003b12:	4619      	mov	r1, r3
 8003b14:	2069      	movs	r0, #105	; 0x69
 8003b16:	f000 f905 	bl	8003d24 <sensirion_i2c_read_data_inplace>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003b1e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <sen5x_get_serial_number+0x6c>
        return error;
 8003b26:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b2a:	e008      	b.n	8003b3e <sen5x_get_serial_number+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	f107 030c 	add.w	r3, r7, #12
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f84f 	bl	8003bda <sensirion_common_copy_bytes>
    return NO_ERROR;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3740      	adds	r7, #64	; 0x40
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8003b52:	88f9      	ldrh	r1, [r7, #6]
 8003b54:	463b      	mov	r3, r7
 8003b56:	f24d 3204 	movw	r2, #54020	; 0xd304
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f8ac 	bl	8003cb8 <sensirion_i2c_add_command_to_buffer>
 8003b60:	4603      	mov	r3, r0
 8003b62:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003b64:	88fa      	ldrh	r2, [r7, #6]
 8003b66:	463b      	mov	r3, r7
 8003b68:	4619      	mov	r1, r3
 8003b6a:	2069      	movs	r0, #105	; 0x69
 8003b6c:	f000 f8c6 	bl	8003cfc <sensirion_i2c_write_data>
 8003b70:	4603      	mov	r3, r0
 8003b72:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8003b74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <sen5x_device_reset+0x3a>
        return error;
 8003b7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b80:	e003      	b.n	8003b8a <sen5x_device_reset+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8003b82:	4804      	ldr	r0, [pc, #16]	; (8003b94 <sen5x_device_reset+0x4c>)
 8003b84:	f000 f96a 	bl	8003e5c <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	00030d40 	.word	0x00030d40

08003b98 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	b21a      	sxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	3301      	adds	r3, #1
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b21b      	sxth	r3, r3
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	b21b      	sxth	r3, r3
 8003bb4:	b29b      	uxth	r3, r3
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr

08003bc0 <sensirion_common_bytes_to_int16_t>:
uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
}

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ffe5 	bl	8003b98 <sensirion_common_bytes_to_uint16_t>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b21b      	sxth	r3, r3
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8003bda:	b480      	push	{r7}
 8003bdc:	b087      	sub	sp, #28
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	60b9      	str	r1, [r7, #8]
 8003be4:	4613      	mov	r3, r2
 8003be6:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8003be8:	2300      	movs	r3, #0
 8003bea:	82fb      	strh	r3, [r7, #22]
 8003bec:	e00a      	b.n	8003c04 <sensirion_common_copy_bytes+0x2a>
        destination[i] = source[i];
 8003bee:	8afb      	ldrh	r3, [r7, #22]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	441a      	add	r2, r3
 8003bf4:	8afb      	ldrh	r3, [r7, #22]
 8003bf6:	68b9      	ldr	r1, [r7, #8]
 8003bf8:	440b      	add	r3, r1
 8003bfa:	7812      	ldrb	r2, [r2, #0]
 8003bfc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8003bfe:	8afb      	ldrh	r3, [r7, #22]
 8003c00:	3301      	adds	r3, #1
 8003c02:	82fb      	strh	r3, [r7, #22]
 8003c04:	8afa      	ldrh	r2, [r7, #22]
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d3f0      	bcc.n	8003bee <sensirion_common_copy_bytes+0x14>
    }
}
 8003c0c:	bf00      	nop
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8003c24:	23ff      	movs	r3, #255	; 0xff
 8003c26:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003c28:	2300      	movs	r3, #0
 8003c2a:	81fb      	strh	r3, [r7, #14]
 8003c2c:	e021      	b.n	8003c72 <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	4413      	add	r3, r2
 8003c34:	781a      	ldrb	r2, [r3, #0]
 8003c36:	7b7b      	ldrb	r3, [r7, #13]
 8003c38:	4053      	eors	r3, r2
 8003c3a:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	733b      	strb	r3, [r7, #12]
 8003c40:	e011      	b.n	8003c66 <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8003c42:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	da07      	bge.n	8003c5a <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8003c4a:	7b7b      	ldrb	r3, [r7, #13]
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8003c54:	b25b      	sxtb	r3, r3
 8003c56:	737b      	strb	r3, [r7, #13]
 8003c58:	e002      	b.n	8003c60 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8003c5a:	7b7b      	ldrb	r3, [r7, #13]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003c60:	7b3b      	ldrb	r3, [r7, #12]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	733b      	strb	r3, [r7, #12]
 8003c66:	7b3b      	ldrb	r3, [r7, #12]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ea      	bne.n	8003c42 <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003c6c:	89fb      	ldrh	r3, [r7, #14]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	81fb      	strh	r3, [r7, #14]
 8003c72:	89fa      	ldrh	r2, [r7, #14]
 8003c74:	887b      	ldrh	r3, [r7, #2]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d3d9      	bcc.n	8003c2e <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8003c7a:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bc80      	pop	{r7}
 8003c84:	4770      	bx	lr

08003c86 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b082      	sub	sp, #8
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	807b      	strh	r3, [r7, #2]
 8003c92:	4613      	mov	r3, r2
 8003c94:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff ffbc 	bl	8003c18 <sensirion_i2c_generate_crc>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	787b      	ldrb	r3, [r7, #1]
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d001      	beq.n	8003cae <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8003cc8:	883b      	ldrh	r3, [r7, #0]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	1c59      	adds	r1, r3, #1
 8003cd2:	8079      	strh	r1, [r7, #2]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	440b      	add	r3, r1
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8003cde:	887b      	ldrh	r3, [r7, #2]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	807a      	strh	r2, [r7, #2]
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4413      	add	r3, r2
 8003cea:	883a      	ldrh	r2, [r7, #0]
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	701a      	strb	r2, [r3, #0]
    return offset;
 8003cf0:	887b      	ldrh	r3, [r7, #2]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	6039      	str	r1, [r7, #0]
 8003d06:	71fb      	strb	r3, [r7, #7]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8003d0c:	88ba      	ldrh	r2, [r7, #4]
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	6839      	ldr	r1, [r7, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f886 	bl	8003e24 <sensirion_i2c_hal_write>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	b21b      	sxth	r3, r3
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	6039      	str	r1, [r7, #0]
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	4613      	mov	r3, r2
 8003d32:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8003d34:	88bb      	ldrh	r3, [r7, #4]
 8003d36:	085b      	lsrs	r3, r3, #1
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	0052      	lsls	r2, r2, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8003d42:	88bb      	ldrh	r3, [r7, #4]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	e047      	b.n	8003de2 <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8003d52:	897a      	ldrh	r2, [r7, #10]
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	6839      	ldr	r1, [r7, #0]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f847 	bl	8003dec <sensirion_i2c_hal_read>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	813b      	strh	r3, [r7, #8]
    if (error) {
 8003d62:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d002      	beq.n	8003d70 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8003d6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003d6e:	e038      	b.n	8003de2 <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003d70:	2300      	movs	r3, #0
 8003d72:	81fb      	strh	r3, [r7, #14]
 8003d74:	2300      	movs	r3, #0
 8003d76:	81bb      	strh	r3, [r7, #12]
 8003d78:	e02e      	b.n	8003dd8 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8003d7a:	89fb      	ldrh	r3, [r7, #14]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8003d80:	89fb      	ldrh	r3, [r7, #14]
 8003d82:	3302      	adds	r3, #2
 8003d84:	683a      	ldr	r2, [r7, #0]
 8003d86:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	f7ff ff7a 	bl	8003c86 <sensirion_i2c_check_crc>
 8003d92:	4603      	mov	r3, r0
 8003d94:	813b      	strh	r3, [r7, #8]
        if (error) {
 8003d96:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8003d9e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003da2:	e01e      	b.n	8003de2 <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	441a      	add	r2, r3
 8003daa:	89bb      	ldrh	r3, [r7, #12]
 8003dac:	1c59      	adds	r1, r3, #1
 8003dae:	81b9      	strh	r1, [r7, #12]
 8003db0:	4619      	mov	r1, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	440b      	add	r3, r1
 8003db6:	7812      	ldrb	r2, [r2, #0]
 8003db8:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8003dba:	89fb      	ldrh	r3, [r7, #14]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	89bb      	ldrh	r3, [r7, #12]
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	81b9      	strh	r1, [r7, #12]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	440b      	add	r3, r1
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	3303      	adds	r3, #3
 8003dd6:	81fb      	strh	r3, [r7, #14]
 8003dd8:	89fa      	ldrh	r2, [r7, #14]
 8003dda:	897b      	ldrh	r3, [r7, #10]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d3cc      	bcc.n	8003d7a <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
	...

08003dec <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	4603      	mov	r3, r0
 8003df4:	6039      	str	r1, [r7, #0]
 8003df6:	71fb      	strb	r3, [r7, #7]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1),
 8003dfc:	79fb      	ldrb	r3, [r7, #7]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	b299      	uxth	r1, r3
 8003e04:	88bb      	ldrh	r3, [r7, #4]
 8003e06:	2264      	movs	r2, #100	; 0x64
 8003e08:	9200      	str	r2, [sp, #0]
 8003e0a:	683a      	ldr	r2, [r7, #0]
 8003e0c:	4804      	ldr	r0, [pc, #16]	; (8003e20 <sensirion_i2c_hal_read+0x34>)
 8003e0e:	f002 fcdb 	bl	80067c8 <HAL_I2C_Master_Receive>
 8003e12:	4603      	mov	r3, r0
 8003e14:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	200001ec 	.word	0x200001ec

08003e24 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af02      	add	r7, sp, #8
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	6039      	str	r1, [r7, #0]
 8003e2e:	71fb      	strb	r3, [r7, #7]
 8003e30:	4613      	mov	r3, r2
 8003e32:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1),
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	b299      	uxth	r1, r3
 8003e3c:	88bb      	ldrh	r3, [r7, #4]
 8003e3e:	2264      	movs	r2, #100	; 0x64
 8003e40:	9200      	str	r2, [sp, #0]
 8003e42:	683a      	ldr	r2, [r7, #0]
 8003e44:	4804      	ldr	r0, [pc, #16]	; (8003e58 <sensirion_i2c_hal_write+0x34>)
 8003e46:	f002 fbcb 	bl	80065e0 <HAL_I2C_Master_Transmit>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	200001ec 	.word	0x200001ec

08003e5c <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a12      	ldr	r2, [pc, #72]	; (8003eb0 <sensirion_i2c_hal_sleep_usec+0x54>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4b0f      	ldr	r3, [pc, #60]	; (8003eb0 <sensirion_i2c_hal_sleep_usec+0x54>)
 8003e74:	fba3 1302 	umull	r1, r3, r3, r2
 8003e78:	099b      	lsrs	r3, r3, #6
 8003e7a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e7e:	fb01 f303 	mul.w	r3, r1, r3
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <sensirion_i2c_hal_sleep_usec+0x32>
        msec++;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8003e8e:	f000 f879 	bl	8003f84 <HAL_GetHalVersion>
 8003e92:	4603      	mov	r3, r0
 8003e94:	4a07      	ldr	r2, [pc, #28]	; (8003eb4 <sensirion_i2c_hal_sleep_usec+0x58>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d202      	bcs.n	8003ea0 <sensirion_i2c_hal_sleep_usec+0x44>
        msec++;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7fe fdfd 	bl	8002aa0 <HAL_Delay>
}
 8003ea6:	bf00      	nop
 8003ea8:	3710      	adds	r7, #16
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	10624dd3 	.word	0x10624dd3
 8003eb4:	01010100 	.word	0x01010100

08003eb8 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	4a03      	ldr	r2, [pc, #12]	; (8003ed0 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	6053      	str	r3, [r2, #4]
}
 8003ec8:	bf00      	nop
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	e0042000 	.word	0xe0042000

08003ed4 <LL_DBGMCU_EnableDBGStopMode>:
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4a03      	ldr	r2, [pc, #12]	; (8003eec <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003ede:	f043 0302 	orr.w	r3, r3, #2
 8003ee2:	6053      	str	r3, [r2, #4]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	e0042000 	.word	0xe0042000

08003ef0 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003ef4:	4b04      	ldr	r3, [pc, #16]	; (8003f08 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a03      	ldr	r2, [pc, #12]	; (8003f08 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003efa:	f043 0304 	orr.w	r3, r3, #4
 8003efe:	6053      	str	r3, [r2, #4]
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	e0042000 	.word	0xe0042000

08003f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f16:	2003      	movs	r0, #3
 8003f18:	f001 f9aa 	bl	8005270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f1c:	f005 fa80 	bl	8009420 <HAL_RCC_GetHCLKFreq>
 8003f20:	4603      	mov	r3, r0
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <HAL_Init+0x3c>)
 8003f24:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f26:	200f      	movs	r0, #15
 8003f28:	f7fe fd9c 	bl	8002a64 <HAL_InitTick>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	71fb      	strb	r3, [r7, #7]
 8003f36:	e001      	b.n	8003f3c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f38:	f7fe fb03 	bl	8002542 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3708      	adds	r7, #8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	20000004 	.word	0x20000004

08003f4c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <HAL_SuspendTick+0x18>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a03      	ldr	r2, [pc, #12]	; (8003f64 <HAL_SuspendTick+0x18>)
 8003f56:	f023 0302 	bic.w	r3, r3, #2
 8003f5a:	6013      	str	r3, [r2, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	e000e010 	.word	0xe000e010

08003f68 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f6c:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <HAL_ResumeTick+0x18>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a03      	ldr	r2, [pc, #12]	; (8003f80 <HAL_ResumeTick+0x18>)
 8003f72:	f043 0302 	orr.w	r3, r3, #2
 8003f76:	6013      	str	r3, [r2, #0]
}
 8003f78:	bf00      	nop
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr
 8003f80:	e000e010 	.word	0xe000e010

08003f84 <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return __STM32WLxx_HAL_VERSION;
 8003f88:	4b02      	ldr	r3, [pc, #8]	; (8003f94 <HAL_GetHalVersion+0x10>)
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	01030000 	.word	0x01030000

08003f98 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <HAL_GetUIDw0+0x10>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bc80      	pop	{r7}
 8003fa6:	4770      	bx	lr
 8003fa8:	1fff7590 	.word	0x1fff7590

08003fac <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003fac:	b480      	push	{r7}
 8003fae:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003fb0:	4b02      	ldr	r3, [pc, #8]	; (8003fbc <HAL_GetUIDw1+0x10>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	1fff7594 	.word	0x1fff7594

08003fc0 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003fc4:	4b02      	ldr	r3, [pc, #8]	; (8003fd0 <HAL_GetUIDw2+0x10>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr
 8003fd0:	1fff7598 	.word	0x1fff7598

08003fd4 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003fd8:	f7ff ff6e 	bl	8003eb8 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003fdc:	bf00      	nop
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003fe4:	f7ff ff76 	bl	8003ed4 <LL_DBGMCU_EnableDBGStopMode>
}
 8003fe8:	bf00      	nop
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8003ff0:	f7ff ff7e 	bl	8003ef0 <LL_DBGMCU_EnableDBGStandbyMode>
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	601a      	str	r2, [r3, #0]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004036:	b480      	push	{r7}
 8004038:	b085      	sub	sp, #20
 800403a:	af00      	add	r7, sp, #0
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	60b9      	str	r1, [r7, #8]
 8004040:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	695a      	ldr	r2, [r3, #20]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2107      	movs	r1, #7
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	401a      	ands	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	fa01 f303 	lsl.w	r3, r1, r3
 8004062:	431a      	orrs	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr

08004072 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8004072:	b480      	push	{r7}
 8004074:	b083      	sub	sp, #12
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
 800407a:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2107      	movs	r1, #7
 8004088:	fa01 f303 	lsl.w	r3, r1, r3
 800408c:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr

080040c6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	60b9      	str	r1, [r7, #8]
 80040d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	210f      	movs	r1, #15
 80040de:	fa01 f303 	lsl.w	r3, r1, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	401a      	ands	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	0e9b      	lsrs	r3, r3, #26
 80040ea:	f003 010f 	and.w	r1, r3, #15
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	fa01 f303 	lsl.w	r3, r1, r3
 80040f8:	431a      	orrs	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80040fe:	bf00      	nop
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	f3c3 0311 	ubfx	r3, r3, #0, #18
 800411c:	431a      	orrs	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004122:	bf00      	nop
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr

0800412c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800412c:	b480      	push	{r7}
 800412e:	b083      	sub	sp, #12
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004140:	43db      	mvns	r3, r3
 8004142:	401a      	ands	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr

08004152 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004152:	b480      	push	{r7}
 8004154:	b085      	sub	sp, #20
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	021b      	lsls	r3, r3, #8
 8004166:	43db      	mvns	r3, r3
 8004168:	401a      	ands	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	0219      	lsls	r1, r3, #8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	400b      	ands	r3, r1
 8004172:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8004176:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800417a:	431a      	orrs	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004180:	bf00      	nop
 8004182:	3714      	adds	r7, #20
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800419a:	f023 0317 	bic.w	r3, r3, #23
 800419e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041c0:	f023 0317 	bic.w	r3, r3, #23
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	6093      	str	r3, [r2, #8]
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bc80      	pop	{r7}
 80041d0:	4770      	bx	lr

080041d2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041e6:	d101      	bne.n	80041ec <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bc80      	pop	{r7}
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004208:	f023 0317 	bic.w	r3, r3, #23
 800420c:	f043 0201 	orr.w	r2, r3, #1
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	bc80      	pop	{r7}
 800421c:	4770      	bx	lr

0800421e <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800422e:	f023 0317 	bic.w	r3, r3, #23
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <LL_ADC_IsEnabled+0x18>
 8004258:	2301      	movs	r3, #1
 800425a:	e000      	b.n	800425e <LL_ADC_IsEnabled+0x1a>
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b02      	cmp	r3, #2
 800427a:	d101      	bne.n	8004280 <LL_ADC_IsDisableOngoing+0x18>
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <LL_ADC_IsDisableOngoing+0x1a>
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800429c:	f023 0317 	bic.w	r3, r3, #23
 80042a0:	f043 0204 	orr.w	r2, r3, #4
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr

080042b2 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042c2:	f023 0317 	bic.w	r3, r3, #23
 80042c6:	f043 0210 	orr.w	r2, r3, #16
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr

080042d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f003 0304 	and.w	r3, r3, #4
 80042e8:	2b04      	cmp	r3, #4
 80042ea:	d101      	bne.n	80042f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr

080042fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b088      	sub	sp, #32
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004304:	2300      	movs	r3, #0
 8004306:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800430c:	2300      	movs	r3, #0
 800430e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004310:	2300      	movs	r3, #0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e17e      	b.n	800461c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f7fd f855 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff ff44 	bl	80041d2 <LL_ADC_IsInternalRegulatorEnabled>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d115      	bne.n	800437c <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff ff18 	bl	800418a <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800435a:	4b9e      	ldr	r3, [pc, #632]	; (80045d4 <HAL_ADC_Init+0x2d8>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	4a9d      	ldr	r2, [pc, #628]	; (80045d8 <HAL_ADC_Init+0x2dc>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	3301      	adds	r3, #1
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800436e:	e002      	b.n	8004376 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3b01      	subs	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f9      	bne.n	8004370 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff ff26 	bl	80041d2 <LL_ADC_IsInternalRegulatorEnabled>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004390:	f043 0210 	orr.w	r2, r3, #16
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	f043 0201 	orr.w	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff93 	bl	80042d8 <LL_ADC_REG_IsConversionOngoing>
 80043b2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 8124 	bne.w	800460a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f040 8120 	bne.w	800460a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ce:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043d2:	f043 0202 	orr.w	r2, r3, #2
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff30 	bl	8004244 <LL_ADC_IsEnabled>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80a7 	bne.w	800453a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7e1b      	ldrb	r3, [r3, #24]
 80043f4:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80043f6:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	7e5b      	ldrb	r3, [r3, #25]
 80043fc:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80043fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	7e9b      	ldrb	r3, [r3, #26]
 8004404:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004406:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800440c:	2a00      	cmp	r2, #0
 800440e:	d002      	beq.n	8004416 <HAL_ADC_Init+0x11a>
 8004410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004414:	e000      	b.n	8004418 <HAL_ADC_Init+0x11c>
 8004416:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004418:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800441e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	da04      	bge.n	8004432 <HAL_ADC_Init+0x136>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004430:	e001      	b.n	8004436 <HAL_ADC_Init+0x13a>
 8004432:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8004436:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800443e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004440:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	4313      	orrs	r3, r2
 8004446:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d114      	bne.n	800447c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	7e9b      	ldrb	r3, [r3, #26]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d104      	bne.n	8004464 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	e00b      	b.n	800447c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004468:	f043 0220 	orr.w	r2, r3, #32
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004474:	f043 0201 	orr.w	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	2b00      	cmp	r3, #0
 8004482:	d009      	beq.n	8004498 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004490:	4313      	orrs	r3, r2
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80044a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	6812      	ldr	r2, [r2, #0]
 80044aa:	69b9      	ldr	r1, [r7, #24]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044bc:	4313      	orrs	r3, r2
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d111      	bne.n	80044f2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80044e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80044e6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	4b38      	ldr	r3, [pc, #224]	; (80045dc <HAL_ADC_Init+0x2e0>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	6812      	ldr	r2, [r2, #0]
 8004500:	6979      	ldr	r1, [r7, #20]
 8004502:	430b      	orrs	r3, r1
 8004504:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800450e:	d014      	beq.n	800453a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004518:	d00f      	beq.n	800453a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004522:	d00a      	beq.n	800453a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8004524:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_ADC_Init+0x2e4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004534:	492a      	ldr	r1, [pc, #168]	; (80045e0 <HAL_ADC_Init+0x2e4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	461a      	mov	r2, r3
 8004544:	2100      	movs	r1, #0
 8004546:	f7ff fd76 	bl	8004036 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6818      	ldr	r0, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004552:	461a      	mov	r2, r3
 8004554:	4923      	ldr	r1, [pc, #140]	; (80045e4 <HAL_ADC_Init+0x2e8>)
 8004556:	f7ff fd6e 	bl	8004036 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d108      	bne.n	8004574 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f062 020f 	orn	r2, r2, #15
 8004570:	629a      	str	r2, [r3, #40]	; 0x28
 8004572:	e017      	b.n	80045a4 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800457c:	d112      	bne.n	80045a4 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
 8004588:	3b01      	subs	r3, #1
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	f003 031c 	and.w	r3, r3, #28
 8004590:	f06f 020f 	mvn.w	r2, #15
 8004594:	fa02 f103 	lsl.w	r1, r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2100      	movs	r1, #0
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fd61 	bl	8004072 <LL_ADC_GetSamplingTimeCommonChannels>
 80045b0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d116      	bne.n	80045e8 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c4:	f023 0303 	bic.w	r3, r3, #3
 80045c8:	f043 0201 	orr.w	r2, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045d0:	e023      	b.n	800461a <HAL_ADC_Init+0x31e>
 80045d2:	bf00      	nop
 80045d4:	20000004 	.word	0x20000004
 80045d8:	053e2d63 	.word	0x053e2d63
 80045dc:	1ffffc02 	.word	0x1ffffc02
 80045e0:	40012708 	.word	0x40012708
 80045e4:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ec:	f023 0312 	bic.w	r3, r3, #18
 80045f0:	f043 0210 	orr.w	r2, r3, #16
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045fc:	f043 0201 	orr.w	r2, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004608:	e007      	b.n	800461a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f043 0210 	orr.w	r2, r3, #16
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800461a:	7ffb      	ldrb	r3, [r7, #31]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3720      	adds	r7, #32
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07a      	b.n	800472c <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 face 	bl	8004be4 <ADC_ConversionStop>
 8004648:	4603      	mov	r3, r0
 800464a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800464c:	7bfb      	ldrb	r3, [r7, #15]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10f      	bne.n	8004672 <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fb92 	bl	8004d7c <ADC_Disable>
 8004658:	4603      	mov	r3, r0
 800465a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2201      	movs	r2, #1
 8004666:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fd9f 	bl	80041b0 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	6812      	ldr	r2, [r2, #0]
 800467c:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004680:	f023 0303 	bic.w	r3, r3, #3
 8004684:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f240 329f 	movw	r2, #927	; 0x39f
 800468e:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68d9      	ldr	r1, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	4b26      	ldr	r3, [pc, #152]	; (8004734 <HAL_ADC_DeInit+0x110>)
 800469c:	400b      	ands	r3, r1
 800469e:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691a      	ldr	r2, [r3, #16]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80046ae:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0207 	bic.w	r2, r2, #7
 80046be:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6a1a      	ldr	r2, [r3, #32]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80046ce:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80046de:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80046ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_ADC_DeInit+0x114>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_ADC_DeInit+0x114>)
 8004704:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004708:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f7fc fe92 	bl	8001434 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800472a:	7bfb      	ldrb	r3, [r7, #15]
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	833e0200 	.word	0x833e0200
 8004738:	40012708 	.word	0x40012708

0800473c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fdc5 	bl	80042d8 <LL_ADC_REG_IsConversionOngoing>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d132      	bne.n	80047ba <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_ADC_Start+0x26>
 800475e:	2302      	movs	r3, #2
 8004760:	e02e      	b.n	80047c0 <HAL_ADC_Start+0x84>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fa80 	bl	8004c70 <ADC_Enable>
 8004770:	4603      	mov	r3, r0
 8004772:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11a      	bne.n	80047b0 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	221c      	movs	r2, #28
 800479a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fd6f 	bl	800428c <LL_ADC_REG_StartConversion>
 80047ae:	e006      	b.n	80047be <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80047b8:	e001      	b.n	80047be <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3710      	adds	r7, #16
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <HAL_ADC_Stop+0x16>
 80047da:	2302      	movs	r3, #2
 80047dc:	e022      	b.n	8004824 <HAL_ADC_Stop+0x5c>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f9fc 	bl	8004be4 <ADC_ConversionStop>
 80047ec:	4603      	mov	r3, r0
 80047ee:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d111      	bne.n	800481a <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fac0 	bl	8004d7c <ADC_Disable>
 80047fc:	4603      	mov	r3, r0
 80047fe:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d109      	bne.n	800481a <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	2b08      	cmp	r3, #8
 800483c:	d102      	bne.n	8004844 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800483e:	2308      	movs	r3, #8
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e010      	b.n	8004866 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e077      	b.n	8004952 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8004862:	2304      	movs	r3, #4
 8004864:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8004866:	f7fe f907 	bl	8002a78 <HAL_GetTick>
 800486a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800486c:	e021      	b.n	80048b2 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d01d      	beq.n	80048b2 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004876:	f7fe f8ff 	bl	8002a78 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d302      	bcc.n	800488c <HAL_ADC_PollForConversion+0x60>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d112      	bne.n	80048b2 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04f      	b.n	8004952 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d0d6      	beq.n	800486e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fbe6 	bl	80040a2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d031      	beq.n	8004940 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	7e9b      	ldrb	r3, [r3, #26]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d12d      	bne.n	8004940 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d126      	bne.n	8004940 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7ff fcee 	bl	80042d8 <LL_ADC_REG_IsConversionOngoing>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d112      	bne.n	8004928 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 020c 	bic.w	r2, r2, #12
 8004910:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	f043 0201 	orr.w	r2, r3, #1
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	659a      	str	r2, [r3, #88]	; 0x58
 8004926:	e00b      	b.n	8004940 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492c:	f043 0220 	orr.w	r2, r3, #32
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f043 0201 	orr.w	r2, r3, #1
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	7e1b      	ldrb	r3, [r3, #24]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d103      	bne.n	8004950 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	220c      	movs	r2, #12
 800494e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004968:	4618      	mov	r0, r3
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
	...

08004974 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004982:	2300      	movs	r3, #0
 8004984:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_ADC_ConfigChannel+0x28>
 8004998:	2302      	movs	r3, #2
 800499a:	e110      	b.n	8004bbe <HAL_ADC_ConfigChannel+0x24a>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fc95 	bl	80042d8 <LL_ADC_REG_IsConversionOngoing>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 80f7 	bne.w	8004ba4 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	f000 80b1 	beq.w	8004b22 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	691b      	ldr	r3, [r3, #16]
 80049c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c8:	d004      	beq.n	80049d4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049ce:	4a7e      	ldr	r2, [pc, #504]	; (8004bc8 <HAL_ADC_ConfigChannel+0x254>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d108      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f7ff fb92 	bl	8004108 <LL_ADC_REG_SetSequencerChAdd>
 80049e4:	e041      	b.n	8004a6a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 031f 	and.w	r3, r3, #31
 80049f2:	210f      	movs	r1, #15
 80049f4:	fa01 f303 	lsl.w	r3, r1, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d105      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0xa0>
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	0e9b      	lsrs	r3, r3, #26
 8004a0e:	f003 031f 	and.w	r3, r3, #31
 8004a12:	e011      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xc4>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e003      	b.n	8004a38 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	6839      	ldr	r1, [r7, #0]
 8004a3a:	6849      	ldr	r1, [r1, #4]
 8004a3c:	f001 011f 	and.w	r1, r1, #31
 8004a40:	408b      	lsls	r3, r1
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	089b      	lsrs	r3, r3, #2
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d808      	bhi.n	8004a6a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f7ff fb2e 	bl	80040c6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6818      	ldr	r0, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	6819      	ldr	r1, [r3, #0]
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	461a      	mov	r2, r3
 8004a78:	f7ff fb6b 	bl	8004152 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f280 8097 	bge.w	8004bb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a86:	4851      	ldr	r0, [pc, #324]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004a88:	f7ff fac8 	bl	800401c <LL_ADC_GetCommonPathInternalCh>
 8004a8c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a4f      	ldr	r2, [pc, #316]	; (8004bd0 <HAL_ADC_ConfigChannel+0x25c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d120      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d11b      	bne.n	8004ada <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4848      	ldr	r0, [pc, #288]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004aac:	f7ff faa4 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_ADC_ConfigChannel+0x260>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	099b      	lsrs	r3, r3, #6
 8004ab6:	4a48      	ldr	r2, [pc, #288]	; (8004bd8 <HAL_ADC_ConfigChannel+0x264>)
 8004ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8004abc:	099b      	lsrs	r3, r3, #6
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	005b      	lsls	r3, r3, #1
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004aca:	e002      	b.n	8004ad2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d1f9      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ad8:	e06c      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3f      	ldr	r2, [pc, #252]	; (8004bdc <HAL_ADC_ConfigChannel+0x268>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d10c      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d107      	bne.n	8004afe <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af4:	4619      	mov	r1, r3
 8004af6:	4835      	ldr	r0, [pc, #212]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004af8:	f7ff fa7e 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004afc:	e05a      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a37      	ldr	r2, [pc, #220]	; (8004be0 <HAL_ADC_ConfigChannel+0x26c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d155      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d150      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b18:	4619      	mov	r1, r3
 8004b1a:	482c      	ldr	r0, [pc, #176]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004b1c:	f7ff fa6c 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004b20:	e048      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2a:	d004      	beq.n	8004b36 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <HAL_ADC_ConfigChannel+0x254>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d107      	bne.n	8004b46 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4610      	mov	r0, r2
 8004b42:	f7ff faf3 	bl	800412c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	da32      	bge.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b4e:	481f      	ldr	r0, [pc, #124]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004b50:	f7ff fa64 	bl	800401c <LL_ADC_GetCommonPathInternalCh>
 8004b54:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <HAL_ADC_ConfigChannel+0x25c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d107      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b66:	4619      	mov	r1, r3
 8004b68:	4818      	ldr	r0, [pc, #96]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004b6a:	f7ff fa45 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004b6e:	e021      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_ADC_ConfigChannel+0x268>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d107      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b80:	4619      	mov	r1, r3
 8004b82:	4812      	ldr	r0, [pc, #72]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004b84:	f7ff fa38 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004b88:	e014      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a14      	ldr	r2, [pc, #80]	; (8004be0 <HAL_ADC_ConfigChannel+0x26c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10f      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	480b      	ldr	r0, [pc, #44]	; (8004bcc <HAL_ADC_ConfigChannel+0x258>)
 8004b9e:	f7ff fa2b 	bl	8003ff8 <LL_ADC_SetCommonPathInternalCh>
 8004ba2:	e007      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba8:	f043 0220 	orr.w	r2, r3, #32
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3720      	adds	r7, #32
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	80000004 	.word	0x80000004
 8004bcc:	40012708 	.word	0x40012708
 8004bd0:	b0001000 	.word	0xb0001000
 8004bd4:	20000004 	.word	0x20000004
 8004bd8:	053e2d63 	.word	0x053e2d63
 8004bdc:	b8004000 	.word	0xb8004000
 8004be0:	b4002000 	.word	0xb4002000

08004be4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7ff fb71 	bl	80042d8 <LL_ADC_REG_IsConversionOngoing>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d033      	beq.n	8004c64 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff fb31 	bl	8004268 <LL_ADC_IsDisableOngoing>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fb4e 	bl	80042b2 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c16:	f7fd ff2f 	bl	8002a78 <HAL_GetTick>
 8004c1a:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c1c:	e01b      	b.n	8004c56 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c1e:	f7fd ff2b 	bl	8002a78 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d914      	bls.n	8004c56 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0304 	and.w	r3, r3, #4
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00d      	beq.n	8004c56 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c3e:	f043 0210 	orr.w	r2, r3, #16
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4a:	f043 0201 	orr.w	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e007      	b.n	8004c66 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1dc      	bne.n	8004c1e <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
	...

08004c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7ff fadf 	bl	8004244 <LL_ADC_IsEnabled>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d169      	bne.n	8004d60 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <ADC_Enable+0xfc>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00d      	beq.n	8004cb6 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f043 0210 	orr.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004caa:	f043 0201 	orr.w	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e055      	b.n	8004d62 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff fa9c 	bl	80041f8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004cc0:	482b      	ldr	r0, [pc, #172]	; (8004d70 <ADC_Enable+0x100>)
 8004cc2:	f7ff f9ab 	bl	800401c <LL_ADC_GetCommonPathInternalCh>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00f      	beq.n	8004cf0 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cd0:	4b28      	ldr	r3, [pc, #160]	; (8004d74 <ADC_Enable+0x104>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	099b      	lsrs	r3, r3, #6
 8004cd6:	4a28      	ldr	r2, [pc, #160]	; (8004d78 <ADC_Enable+0x108>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004ce0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ce2:	e002      	b.n	8004cea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f9      	bne.n	8004ce4 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	7e5b      	ldrb	r3, [r3, #25]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d033      	beq.n	8004d60 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004cf8:	f7fd febe 	bl	8002a78 <HAL_GetTick>
 8004cfc:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004cfe:	e028      	b.n	8004d52 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff fa9d 	bl	8004244 <LL_ADC_IsEnabled>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d104      	bne.n	8004d1a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fa6f 	bl	80041f8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d1a:	f7fd fead 	bl	8002a78 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d914      	bls.n	8004d52 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d00d      	beq.n	8004d52 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f043 0210 	orr.w	r2, r3, #16
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d46:	f043 0201 	orr.w	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e007      	b.n	8004d62 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d1cf      	bne.n	8004d00 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	80000017 	.word	0x80000017
 8004d70:	40012708 	.word	0x40012708
 8004d74:	20000004 	.word	0x20000004
 8004d78:	053e2d63 	.word	0x053e2d63

08004d7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7ff fa6d 	bl	8004268 <LL_ADC_IsDisableOngoing>
 8004d8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fa55 	bl	8004244 <LL_ADC_IsEnabled>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d047      	beq.n	8004e30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d144      	bne.n	8004e30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 0305 	and.w	r3, r3, #5
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d10c      	bne.n	8004dce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fa30 	bl	800421e <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dc6:	f7fd fe57 	bl	8002a78 <HAL_GetTick>
 8004dca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004dcc:	e029      	b.n	8004e22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd2:	f043 0210 	orr.w	r2, r3, #16
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e023      	b.n	8004e32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004dea:	f7fd fe45 	bl	8002a78 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d914      	bls.n	8004e22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00d      	beq.n	8004e22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0a:	f043 0210 	orr.w	r2, r3, #16
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	f043 0201 	orr.w	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e007      	b.n	8004e32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 0301 	and.w	r3, r3, #1
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1dc      	bne.n	8004dea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <LL_ADC_SetCalibrationFactor>:
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e4a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004e58:	bf00      	nop
 8004e5a:	370c      	adds	r7, #12
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <LL_ADC_GetCalibrationFactor>:
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <LL_ADC_Enable>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e8e:	f023 0317 	bic.w	r3, r3, #23
 8004e92:	f043 0201 	orr.w	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr

08004ea4 <LL_ADC_Disable>:
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004eb4:	f023 0317 	bic.w	r3, r3, #23
 8004eb8:	f043 0202 	orr.w	r2, r3, #2
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bc80      	pop	{r7}
 8004ec8:	4770      	bx	lr

08004eca <LL_ADC_IsEnabled>:
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d101      	bne.n	8004ee2 <LL_ADC_IsEnabled+0x18>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <LL_ADC_IsEnabled+0x1a>
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bc80      	pop	{r7}
 8004eec:	4770      	bx	lr

08004eee <LL_ADC_StartCalibration>:
{
 8004eee:	b480      	push	{r7}
 8004ef0:	b083      	sub	sp, #12
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004efe:	f023 0317 	bic.w	r3, r3, #23
 8004f02:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	609a      	str	r2, [r3, #8]
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <LL_ADC_IsCalibrationOnGoing>:
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f28:	d101      	bne.n	8004f2e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	370c      	adds	r7, #12
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bc80      	pop	{r7}
 8004f38:	4770      	bx	lr

08004f3a <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b088      	sub	sp, #32
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_ADCEx_Calibration_Start+0x1e>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e0b9      	b.n	80050cc <HAL_ADCEx_Calibration_Start+0x192>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f7ff ff0b 	bl	8004d7c <ADC_Disable>
 8004f66:	4603      	mov	r3, r0
 8004f68:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ffab 	bl	8004eca <LL_ADC_IsEnabled>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f040 809d 	bne.w	80050b6 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f80:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f84:	f043 0202 	orr.w	r2, r3, #2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	f248 0303 	movw	r3, #32771	; 0x8003
 8004f96:	4013      	ands	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	6812      	ldr	r2, [r2, #0]
 8004fa4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fa8:	f023 0303 	bic.w	r3, r3, #3
 8004fac:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004fae:	2300      	movs	r3, #0
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e02e      	b.n	8005012 <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7ff ff98 	bl	8004eee <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004fbe:	e014      	b.n	8004fea <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004fcc:	d30d      	bcc.n	8004fea <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f023 0312 	bic.w	r3, r3, #18
 8004fd6:	f043 0210 	orr.w	r2, r3, #16
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e070      	b.n	80050cc <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7ff ff90 	bl	8004f14 <LL_ADC_IsCalibrationOnGoing>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1e2      	bne.n	8004fc0 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7ff ff2f 	bl	8004e62 <LL_ADC_GetCalibrationFactor>
 8005004:	4602      	mov	r2, r0
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	4413      	add	r3, r2
 800500a:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	3301      	adds	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	2b07      	cmp	r3, #7
 8005016:	d9cd      	bls.n	8004fb4 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005020:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff ff29 	bl	8004e7e <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	4618      	mov	r0, r3
 8005034:	f7ff ff01 	bl	8004e3a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4618      	mov	r0, r3
 800503e:	f7ff ff31 	bl	8004ea4 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005042:	f7fd fd19 	bl	8002a78 <HAL_GetTick>
 8005046:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005048:	e01c      	b.n	8005084 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800504a:	f7fd fd15 	bl	8002a78 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d915      	bls.n	8005084 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7ff ff34 	bl	8004eca <LL_ADC_IsEnabled>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00d      	beq.n	8005084 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506c:	f043 0210 	orr.w	r2, r3, #16
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005078:	f043 0201 	orr.w	r2, r3, #1
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e023      	b.n	80050cc <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff ff1e 	bl	8004eca <LL_ADC_IsEnabled>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1da      	bne.n	800504a <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68d9      	ldr	r1, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	f023 0303 	bic.w	r3, r3, #3
 80050ac:	f043 0201 	orr.w	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	659a      	str	r2, [r3, #88]	; 0x58
 80050b4:	e005      	b.n	80050c2 <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ba:	f043 0210 	orr.w	r2, r3, #16
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f003 0307 	and.w	r3, r3, #7
 80050e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <__NVIC_SetPriorityGrouping+0x44>)
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050f0:	4013      	ands	r3, r2
 80050f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80050fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005106:	4a04      	ldr	r2, [pc, #16]	; (8005118 <__NVIC_SetPriorityGrouping+0x44>)
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	60d3      	str	r3, [r2, #12]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <__NVIC_GetPriorityGrouping+0x18>)
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	0a1b      	lsrs	r3, r3, #8
 8005126:	f003 0307 	and.w	r3, r3, #7
}
 800512a:	4618      	mov	r0, r3
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	e000ed00 	.word	0xe000ed00

08005138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005146:	2b00      	cmp	r3, #0
 8005148:	db0b      	blt.n	8005162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800514a:	79fb      	ldrb	r3, [r7, #7]
 800514c:	f003 021f 	and.w	r2, r3, #31
 8005150:	4906      	ldr	r1, [pc, #24]	; (800516c <__NVIC_EnableIRQ+0x34>)
 8005152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2001      	movs	r0, #1
 800515a:	fa00 f202 	lsl.w	r2, r0, r2
 800515e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005162:	bf00      	nop
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr
 800516c:	e000e100 	.word	0xe000e100

08005170 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800517a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517e:	2b00      	cmp	r3, #0
 8005180:	db12      	blt.n	80051a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005182:	79fb      	ldrb	r3, [r7, #7]
 8005184:	f003 021f 	and.w	r2, r3, #31
 8005188:	490a      	ldr	r1, [pc, #40]	; (80051b4 <__NVIC_DisableIRQ+0x44>)
 800518a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518e:	095b      	lsrs	r3, r3, #5
 8005190:	2001      	movs	r0, #1
 8005192:	fa00 f202 	lsl.w	r2, r0, r2
 8005196:	3320      	adds	r3, #32
 8005198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800519c:	f3bf 8f4f 	dsb	sy
}
 80051a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051a2:	f3bf 8f6f 	isb	sy
}
 80051a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	e000e100 	.word	0xe000e100

080051b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0a      	blt.n	80051e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	490c      	ldr	r1, [pc, #48]	; (8005204 <__NVIC_SetPriority+0x4c>)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	440b      	add	r3, r1
 80051dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051e0:	e00a      	b.n	80051f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4908      	ldr	r1, [pc, #32]	; (8005208 <__NVIC_SetPriority+0x50>)
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3b04      	subs	r3, #4
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	440b      	add	r3, r1
 80051f6:	761a      	strb	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e100 	.word	0xe000e100
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800520c:	b480      	push	{r7}
 800520e:	b089      	sub	sp, #36	; 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f1c3 0307 	rsb	r3, r3, #7
 8005226:	2b04      	cmp	r3, #4
 8005228:	bf28      	it	cs
 800522a:	2304      	movcs	r3, #4
 800522c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	3304      	adds	r3, #4
 8005232:	2b06      	cmp	r3, #6
 8005234:	d902      	bls.n	800523c <NVIC_EncodePriority+0x30>
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	3b03      	subs	r3, #3
 800523a:	e000      	b.n	800523e <NVIC_EncodePriority+0x32>
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005240:	f04f 32ff 	mov.w	r2, #4294967295
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43da      	mvns	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	401a      	ands	r2, r3
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005254:	f04f 31ff 	mov.w	r1, #4294967295
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	43d9      	mvns	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005264:	4313      	orrs	r3, r2
         );
}
 8005266:	4618      	mov	r0, r3
 8005268:	3724      	adds	r7, #36	; 0x24
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff2b 	bl	80050d4 <__NVIC_SetPriorityGrouping>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	4603      	mov	r3, r0
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005294:	f7ff ff42 	bl	800511c <__NVIC_GetPriorityGrouping>
 8005298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7ff ffb4 	bl	800520c <NVIC_EncodePriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff83 	bl	80051b8 <__NVIC_SetPriority>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff35 	bl	8005138 <__NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	4603      	mov	r3, r0
 80052de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f7ff ff43 	bl	8005170 <__NVIC_DisableIRQ>
}
 80052ea:	bf00      	nop
 80052ec:	3708      	adds	r7, #8
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
	...

080052f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e08e      	b.n	8005424 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	4b47      	ldr	r3, [pc, #284]	; (800542c <HAL_DMA_Init+0x138>)
 800530e:	429a      	cmp	r2, r3
 8005310:	d80f      	bhi.n	8005332 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	4b45      	ldr	r3, [pc, #276]	; (8005430 <HAL_DMA_Init+0x13c>)
 800531a:	4413      	add	r3, r2
 800531c:	4a45      	ldr	r2, [pc, #276]	; (8005434 <HAL_DMA_Init+0x140>)
 800531e:	fba2 2303 	umull	r2, r3, r2, r3
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	009a      	lsls	r2, r3, #2
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a42      	ldr	r2, [pc, #264]	; (8005438 <HAL_DMA_Init+0x144>)
 800532e:	641a      	str	r2, [r3, #64]	; 0x40
 8005330:	e00e      	b.n	8005350 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	461a      	mov	r2, r3
 8005338:	4b40      	ldr	r3, [pc, #256]	; (800543c <HAL_DMA_Init+0x148>)
 800533a:	4413      	add	r3, r2
 800533c:	4a3d      	ldr	r2, [pc, #244]	; (8005434 <HAL_DMA_Init+0x140>)
 800533e:	fba2 2303 	umull	r2, r3, r2, r3
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a3c      	ldr	r2, [pc, #240]	; (8005440 <HAL_DMA_Init+0x14c>)
 800534e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6812      	ldr	r2, [r2, #0]
 8005362:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6819      	ldr	r1, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689a      	ldr	r2, [r3, #8]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fb30 	bl	8005a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053b0:	d102      	bne.n	80053b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d010      	beq.n	80053fa <HAL_DMA_Init+0x106>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d80c      	bhi.n	80053fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 fb59 	bl	8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80053f6:	605a      	str	r2, [r3, #4]
 80053f8:	e008      	b.n	800540c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2201      	movs	r2, #1
 8005416:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2200      	movs	r2, #0
 800541e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40020407 	.word	0x40020407
 8005430:	bffdfff8 	.word	0xbffdfff8
 8005434:	cccccccd 	.word	0xcccccccd
 8005438:	40020000 	.word	0x40020000
 800543c:	bffdfbf8 	.word	0xbffdfbf8
 8005440:	40020400 	.word	0x40020400

08005444 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e07b      	b.n	800554e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f022 0201 	bic.w	r2, r2, #1
 8005464:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	461a      	mov	r2, r3
 800546c:	4b3a      	ldr	r3, [pc, #232]	; (8005558 <HAL_DMA_DeInit+0x114>)
 800546e:	429a      	cmp	r2, r3
 8005470:	d80f      	bhi.n	8005492 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	4b38      	ldr	r3, [pc, #224]	; (800555c <HAL_DMA_DeInit+0x118>)
 800547a:	4413      	add	r3, r2
 800547c:	4a38      	ldr	r2, [pc, #224]	; (8005560 <HAL_DMA_DeInit+0x11c>)
 800547e:	fba2 2303 	umull	r2, r3, r2, r3
 8005482:	091b      	lsrs	r3, r3, #4
 8005484:	009a      	lsls	r2, r3, #2
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a35      	ldr	r2, [pc, #212]	; (8005564 <HAL_DMA_DeInit+0x120>)
 800548e:	641a      	str	r2, [r3, #64]	; 0x40
 8005490:	e00e      	b.n	80054b0 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	4b33      	ldr	r3, [pc, #204]	; (8005568 <HAL_DMA_DeInit+0x124>)
 800549a:	4413      	add	r3, r2
 800549c:	4a30      	ldr	r2, [pc, #192]	; (8005560 <HAL_DMA_DeInit+0x11c>)
 800549e:	fba2 2303 	umull	r2, r3, r2, r3
 80054a2:	091b      	lsrs	r3, r3, #4
 80054a4:	009a      	lsls	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2f      	ldr	r2, [pc, #188]	; (800556c <HAL_DMA_DeInit+0x128>)
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054bc:	f003 021c 	and.w	r2, r3, #28
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	2101      	movs	r1, #1
 80054c6:	fa01 f202 	lsl.w	r2, r1, r2
 80054ca:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 fa9b 	bl	8005a08 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054e2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00f      	beq.n	800550c <HAL_DMA_DeInit+0xc8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	d80b      	bhi.n	800550c <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 facf 	bl	8005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800550a:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3708      	adds	r7, #8
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40020407 	.word	0x40020407
 800555c:	bffdfff8 	.word	0xbffdfff8
 8005560:	cccccccd 	.word	0xcccccccd
 8005564:	40020000 	.word	0x40020000
 8005568:	bffdfbf8 	.word	0xbffdfbf8
 800556c:	40020400 	.word	0x40020400

08005570 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b086      	sub	sp, #24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
 800557c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800557e:	2300      	movs	r3, #0
 8005580:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <HAL_DMA_Start_IT+0x20>
 800558c:	2302      	movs	r3, #2
 800558e:	e069      	b.n	8005664 <HAL_DMA_Start_IT+0xf4>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d155      	bne.n	8005650 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f022 0201 	bic.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68b9      	ldr	r1, [r7, #8]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f9e0 	bl	800598e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d008      	beq.n	80055e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 020e 	orr.w	r2, r2, #14
 80055e4:	601a      	str	r2, [r3, #0]
 80055e6:	e00f      	b.n	8005608 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f042 020a 	orr.w	r2, r2, #10
 8005606:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d007      	beq.n	8005626 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005620:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005624:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	e008      	b.n	8005662 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005662:	7dfb      	ldrb	r3, [r7, #23]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e04f      	b.n	800571e <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d008      	beq.n	800569c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2204      	movs	r2, #4
 800568e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e040      	b.n	800571e <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 020e 	bic.w	r2, r2, #14
 80056aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d0:	f003 021c 	and.w	r2, r3, #28
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f202 	lsl.w	r2, r1, r2
 80056de:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80056e8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00c      	beq.n	800570c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005700:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800570a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005730:	2300      	movs	r3, #0
 8005732:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d005      	beq.n	800574c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	73fb      	strb	r3, [r7, #15]
 800574a:	e047      	b.n	80057dc <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f022 020e 	bic.w	r2, r2, #14
 800575a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005780:	f003 021c 	and.w	r2, r3, #28
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	2101      	movs	r1, #1
 800578a:	fa01 f202 	lsl.w	r2, r1, r2
 800578e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005798:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00c      	beq.n	80057bc <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
    }
  }
  return status;
 80057dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b084      	sub	sp, #16
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005804:	f003 031c 	and.w	r3, r3, #28
 8005808:	2204      	movs	r2, #4
 800580a:	409a      	lsls	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	4013      	ands	r3, r2
 8005810:	2b00      	cmp	r3, #0
 8005812:	d027      	beq.n	8005864 <HAL_DMA_IRQHandler+0x7c>
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f003 0304 	and.w	r3, r3, #4
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d107      	bne.n	800583c <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f022 0204 	bic.w	r2, r2, #4
 800583a:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005840:	f003 021c 	and.w	r2, r3, #28
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	2104      	movs	r1, #4
 800584a:	fa01 f202 	lsl.w	r2, r1, r2
 800584e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	2b00      	cmp	r3, #0
 8005856:	f000 8081 	beq.w	800595c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8005862:	e07b      	b.n	800595c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005868:	f003 031c 	and.w	r3, r3, #28
 800586c:	2202      	movs	r2, #2
 800586e:	409a      	lsls	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d03d      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x10c>
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d038      	beq.n	80058f4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0320 	and.w	r3, r3, #32
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10b      	bne.n	80058a8 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 020a 	bic.w	r2, r2, #10
 800589e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b2e      	ldr	r3, [pc, #184]	; (8005968 <HAL_DMA_IRQHandler+0x180>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d909      	bls.n	80058c8 <HAL_DMA_IRQHandler+0xe0>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b8:	f003 031c 	and.w	r3, r3, #28
 80058bc:	4a2b      	ldr	r2, [pc, #172]	; (800596c <HAL_DMA_IRQHandler+0x184>)
 80058be:	2102      	movs	r1, #2
 80058c0:	fa01 f303 	lsl.w	r3, r1, r3
 80058c4:	6053      	str	r3, [r2, #4]
 80058c6:	e008      	b.n	80058da <HAL_DMA_IRQHandler+0xf2>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058cc:	f003 031c 	and.w	r3, r3, #28
 80058d0:	4a27      	ldr	r2, [pc, #156]	; (8005970 <HAL_DMA_IRQHandler+0x188>)
 80058d2:	2102      	movs	r1, #2
 80058d4:	fa01 f303 	lsl.w	r3, r1, r3
 80058d8:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d038      	beq.n	800595c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80058f2:	e033      	b.n	800595c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058f8:	f003 031c 	and.w	r3, r3, #28
 80058fc:	2208      	movs	r2, #8
 80058fe:	409a      	lsls	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4013      	ands	r3, r2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02a      	beq.n	800595e <HAL_DMA_IRQHandler+0x176>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	d025      	beq.n	800595e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 020e 	bic.w	r2, r2, #14
 8005920:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005926:	f003 021c 	and.w	r2, r3, #28
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	2101      	movs	r1, #1
 8005930:	fa01 f202 	lsl.w	r2, r1, r2
 8005934:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	2b00      	cmp	r3, #0
 8005952:	d004      	beq.n	800595e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800595c:	bf00      	nop
 800595e:	bf00      	nop
}
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	40020080 	.word	0x40020080
 800596c:	40020400 	.word	0x40020400
 8005970:	40020000 	.word	0x40020000

08005974 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005982:	b2db      	uxtb	r3, r3
}
 8005984:	4618      	mov	r0, r3
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	bc80      	pop	{r7}
 800598c:	4770      	bx	lr

0800598e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800598e:	b480      	push	{r7}
 8005990:	b085      	sub	sp, #20
 8005992:	af00      	add	r7, sp, #0
 8005994:	60f8      	str	r0, [r7, #12]
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d004      	beq.n	80059b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	f003 021c 	and.w	r2, r3, #28
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c4:	2101      	movs	r1, #1
 80059c6:	fa01 f202 	lsl.w	r2, r1, r2
 80059ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	2b10      	cmp	r3, #16
 80059da:	d108      	bne.n	80059ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80059ec:	e007      	b.n	80059fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	60da      	str	r2, [r3, #12]
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bc80      	pop	{r7}
 8005a06:	4770      	bx	lr

08005a08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	461a      	mov	r2, r3
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d813      	bhi.n	8005a44 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a20:	089b      	lsrs	r3, r3, #2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a28:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3b08      	subs	r3, #8
 8005a38:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]
 8005a42:	e011      	b.n	8005a68 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	089b      	lsrs	r3, r3, #2
 8005a4a:	009a      	lsls	r2, r3, #2
 8005a4c:	4b10      	ldr	r3, [pc, #64]	; (8005a90 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005a4e:	4413      	add	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	3b08      	subs	r3, #8
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005a62:	091b      	lsrs	r3, r3, #4
 8005a64:	3307      	adds	r3, #7
 8005a66:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a0a      	ldr	r2, [pc, #40]	; (8005a94 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005a6c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 031f 	and.w	r3, r3, #31
 8005a74:	2201      	movs	r2, #1
 8005a76:	409a      	lsls	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a7c:	bf00      	nop
 8005a7e:	3714      	adds	r7, #20
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	40020407 	.word	0x40020407
 8005a8c:	cccccccd 	.word	0xcccccccd
 8005a90:	4002081c 	.word	0x4002081c
 8005a94:	40020880 	.word	0x40020880

08005a98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4b0a      	ldr	r3, [pc, #40]	; (8005ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a08      	ldr	r2, [pc, #32]	; (8005adc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005abc:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bc80      	pop	{r7}
 8005ad6:	4770      	bx	lr
 8005ad8:	1000823f 	.word	0x1000823f
 8005adc:	40020940 	.word	0x40020940

08005ae0 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d12b      	bne.n	8005b4e <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_DMAEx_ConfigMuxSync+0x24>
 8005b00:	2302      	movs	r3, #2
 8005b02:	e028      	b.n	8005b56 <HAL_DMAEx_ConfigMuxSync+0x76>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	04db      	lsls	r3, r3, #19
 8005b22:	431a      	orrs	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	7a1b      	ldrb	r3, [r3, #8]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	431a      	orrs	r2, r3
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	7a5b      	ldrb	r3, [r3, #9]
 8005b36:	025b      	lsls	r3, r3, #9
 8005b38:	431a      	orrs	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e003      	b.n	8005b56 <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2280      	movs	r2, #128	; 0x80
 8005b52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
  }
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b72:	4013      	ands	r3, r2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d01a      	beq.n	8005bae <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005b90:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d022      	beq.n	8005bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc0:	4013      	ands	r3, r2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d01a      	beq.n	8005bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bde:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	4798      	blx	r3
      }
    }
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c12:	4b1c      	ldr	r3, [pc, #112]	; (8005c84 <HAL_FLASH_Program+0x80>)
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_FLASH_Program+0x1a>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e02d      	b.n	8005c7a <HAL_FLASH_Program+0x76>
 8005c1e:	4b19      	ldr	r3, [pc, #100]	; (8005c84 <HAL_FLASH_Program+0x80>)
 8005c20:	2201      	movs	r2, #1
 8005c22:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c24:	4b17      	ldr	r3, [pc, #92]	; (8005c84 <HAL_FLASH_Program+0x80>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2e:	f000 f869 	bl	8005d04 <FLASH_WaitForLastOperation>
 8005c32:	4603      	mov	r3, r0
 8005c34:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005c36:	7dfb      	ldrb	r3, [r7, #23]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d11a      	bne.n	8005c72 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d105      	bne.n	8005c4e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c46:	68b8      	ldr	r0, [r7, #8]
 8005c48:	f000 f8be 	bl	8005dc8 <FLASH_Program_DoubleWord>
 8005c4c:	e004      	b.n	8005c58 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	4619      	mov	r1, r3
 8005c52:	68b8      	ldr	r0, [r7, #8]
 8005c54:	f000 f8de 	bl	8005e14 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c5c:	f000 f852 	bl	8005d04 <FLASH_WaitForLastOperation>
 8005c60:	4603      	mov	r3, r0
 8005c62:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005c64:	4b08      	ldr	r3, [pc, #32]	; (8005c88 <HAL_FLASH_Program+0x84>)
 8005c66:	695a      	ldr	r2, [r3, #20]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	43db      	mvns	r3, r3
 8005c6c:	4906      	ldr	r1, [pc, #24]	; (8005c88 <HAL_FLASH_Program+0x84>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c72:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <HAL_FLASH_Program+0x80>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3718      	adds	r7, #24
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	200005b8 	.word	0x200005b8
 8005c88:	58004000 	.word	0x58004000

08005c8c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005c96:	4b0b      	ldr	r3, [pc, #44]	; (8005cc4 <HAL_FLASH_Unlock+0x38>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da0b      	bge.n	8005cb6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c9e:	4b09      	ldr	r3, [pc, #36]	; (8005cc4 <HAL_FLASH_Unlock+0x38>)
 8005ca0:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <HAL_FLASH_Unlock+0x3c>)
 8005ca2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005ca4:	4b07      	ldr	r3, [pc, #28]	; (8005cc4 <HAL_FLASH_Unlock+0x38>)
 8005ca6:	4a09      	ldr	r2, [pc, #36]	; (8005ccc <HAL_FLASH_Unlock+0x40>)
 8005ca8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005caa:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <HAL_FLASH_Unlock+0x38>)
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	da01      	bge.n	8005cb6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bc80      	pop	{r7}
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	58004000 	.word	0x58004000
 8005cc8:	45670123 	.word	0x45670123
 8005ccc:	cdef89ab 	.word	0xcdef89ab

08005cd0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005cda:	4b09      	ldr	r3, [pc, #36]	; (8005d00 <HAL_FLASH_Lock+0x30>)
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	4a08      	ldr	r2, [pc, #32]	; (8005d00 <HAL_FLASH_Lock+0x30>)
 8005ce0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ce4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_FLASH_Lock+0x30>)
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db01      	blt.n	8005cf2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	58004000 	.word	0x58004000

08005d04 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005d0c:	f7fc feb4 	bl	8002a78 <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d12:	e009      	b.n	8005d28 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d14:	f7fc feb0 	bl	8002a78 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d801      	bhi.n	8005d28 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	e047      	b.n	8005db8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d28:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d34:	d0ee      	beq.n	8005d14 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005d36:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d002      	beq.n	8005d4c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d46:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005d52:	4013      	ands	r3, r2
 8005d54:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d007      	beq.n	8005d70 <FLASH_WaitForLastOperation+0x6c>
 8005d60:	4b17      	ldr	r3, [pc, #92]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d6a:	4915      	ldr	r1, [pc, #84]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	618b      	str	r3, [r1, #24]
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <FLASH_WaitForLastOperation+0x80>
 8005d7a:	4a11      	ldr	r2, [pc, #68]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d82:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00e      	beq.n	8005da8 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005d8a:	4a0e      	ldr	r2, [pc, #56]	; (8005dc4 <FLASH_WaitForLastOperation+0xc0>)
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	e011      	b.n	8005db8 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d94:	f7fc fe70 	bl	8002a78 <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d801      	bhi.n	8005da8 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	e007      	b.n	8005db8 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <FLASH_WaitForLastOperation+0xbc>)
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005db4:	d0ee      	beq.n	8005d94 <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	58004000 	.word	0x58004000
 8005dc4:	200005b8 	.word	0x200005b8

08005dc8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	60f8      	str	r0, [r7, #12]
 8005dd0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <FLASH_Program_DoubleWord+0x48>)
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	4a0d      	ldr	r2, [pc, #52]	; (8005e10 <FLASH_Program_DoubleWord+0x48>)
 8005dda:	f043 0301 	orr.w	r3, r3, #1
 8005dde:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005de6:	f3bf 8f6f 	isb	sy
}
 8005dea:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005dec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	f04f 0300 	mov.w	r3, #0
 8005df8:	000a      	movs	r2, r1
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	3104      	adds	r1, #4
 8005e00:	4613      	mov	r3, r2
 8005e02:	600b      	str	r3, [r1, #0]
}
 8005e04:	bf00      	nop
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bc80      	pop	{r7}
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	58004000 	.word	0x58004000

08005e14 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005e14:	b480      	push	{r7}
 8005e16:	b089      	sub	sp, #36	; 0x24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005e1e:	2340      	movs	r3, #64	; 0x40
 8005e20:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <FLASH_Program_Fast+0x78>)
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	4a17      	ldr	r2, [pc, #92]	; (8005e8c <FLASH_Program_Fast+0x78>)
 8005e30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e34:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e36:	f3ef 8310 	mrs	r3, PRIMASK
 8005e3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e40:	b672      	cpsid	i
}
 8005e42:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	3304      	adds	r3, #4
 8005e50:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	3304      	adds	r3, #4
 8005e56:	617b      	str	r3, [r7, #20]
    row_index--;
 8005e58:	7ffb      	ldrb	r3, [r7, #31]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005e5e:	7ffb      	ldrb	r3, [r7, #31]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1ef      	bne.n	8005e44 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005e64:	bf00      	nop
 8005e66:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <FLASH_Program_Fast+0x78>)
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d0f8      	beq.n	8005e66 <FLASH_Program_Fast+0x52>
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005e80:	bf00      	nop
 8005e82:	3724      	adds	r7, #36	; 0x24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bc80      	pop	{r7}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	58004000 	.word	0x58004000

08005e90 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005e9a:	4b28      	ldr	r3, [pc, #160]	; (8005f3c <HAL_FLASHEx_Erase+0xac>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d101      	bne.n	8005ea6 <HAL_FLASHEx_Erase+0x16>
 8005ea2:	2302      	movs	r3, #2
 8005ea4:	e046      	b.n	8005f34 <HAL_FLASHEx_Erase+0xa4>
 8005ea6:	4b25      	ldr	r3, [pc, #148]	; (8005f3c <HAL_FLASHEx_Erase+0xac>)
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005eac:	4b23      	ldr	r3, [pc, #140]	; (8005f3c <HAL_FLASHEx_Erase+0xac>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eb6:	f7ff ff25 	bl	8005d04 <FLASH_WaitForLastOperation>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d133      	bne.n	8005f2c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d108      	bne.n	8005ede <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005ecc:	f000 f838 	bl	8005f40 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ed0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ed4:	f7ff ff16 	bl	8005d04 <FLASH_WaitForLastOperation>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	73fb      	strb	r3, [r7, #15]
 8005edc:	e024      	b.n	8005f28 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee4:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	e012      	b.n	8005f14 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005eee:	68b8      	ldr	r0, [r7, #8]
 8005ef0:	f000 f836 	bl	8005f60 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ef8:	f7ff ff04 	bl	8005d04 <FLASH_WaitForLastOperation>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	601a      	str	r2, [r3, #0]
          break;
 8005f0c:	e00a      	b.n	8005f24 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	3301      	adds	r3, #1
 8005f12:	60bb      	str	r3, [r7, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d3e4      	bcc.n	8005eee <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005f24:	f000 f878 	bl	8006018 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f28:	f000 f832 	bl	8005f90 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f2c:	4b03      	ldr	r3, [pc, #12]	; (8005f3c <HAL_FLASHEx_Erase+0xac>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]

  return status;
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	200005b8 	.word	0x200005b8

08005f40 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005f40:	b480      	push	{r7}
 8005f42:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005f44:	4b05      	ldr	r3, [pc, #20]	; (8005f5c <FLASH_MassErase+0x1c>)
 8005f46:	695b      	ldr	r3, [r3, #20]
 8005f48:	4a04      	ldr	r2, [pc, #16]	; (8005f5c <FLASH_MassErase+0x1c>)
 8005f4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6153      	str	r3, [r2, #20]
#endif
}
 8005f54:	bf00      	nop
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bc80      	pop	{r7}
 8005f5a:	4770      	bx	lr
 8005f5c:	58004000 	.word	0x58004000

08005f60 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005f68:	4b08      	ldr	r3, [pc, #32]	; (8005f8c <FLASH_PageErase+0x2c>)
 8005f6a:	695b      	ldr	r3, [r3, #20]
 8005f6c:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4313      	orrs	r3, r2
 8005f76:	4a05      	ldr	r2, [pc, #20]	; (8005f8c <FLASH_PageErase+0x2c>)
 8005f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f7c:	f043 0302 	orr.w	r3, r3, #2
 8005f80:	6153      	str	r3, [r2, #20]
#endif
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bc80      	pop	{r7}
 8005f8a:	4770      	bx	lr
 8005f8c:	58004000 	.word	0x58004000

08005f90 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005f94:	4b1f      	ldr	r3, [pc, #124]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d117      	bne.n	8005fd0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005fa0:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a1b      	ldr	r2, [pc, #108]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005faa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fac:	4b19      	ldr	r3, [pc, #100]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a18      	ldr	r2, [pc, #96]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	4b16      	ldr	r3, [pc, #88]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a15      	ldr	r2, [pc, #84]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fc4:	4b13      	ldr	r3, [pc, #76]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a12      	ldr	r2, [pc, #72]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fce:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005fd0:	4b10      	ldr	r3, [pc, #64]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d117      	bne.n	800600c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005fdc:	4b0d      	ldr	r3, [pc, #52]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0c      	ldr	r2, [pc, #48]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fe2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fe6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005fe8:	4b0a      	ldr	r3, [pc, #40]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005fee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ff2:	6013      	str	r3, [r2, #0]
 8005ff4:	4b07      	ldr	r3, [pc, #28]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a06      	ldr	r2, [pc, #24]	; (8006014 <FLASH_FlushCaches+0x84>)
 8005ffa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ffe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006000:	4b04      	ldr	r3, [pc, #16]	; (8006014 <FLASH_FlushCaches+0x84>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a03      	ldr	r2, [pc, #12]	; (8006014 <FLASH_FlushCaches+0x84>)
 8006006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800600a:	6013      	str	r3, [r2, #0]
  }
#endif
}
 800600c:	bf00      	nop
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	58004000 	.word	0x58004000

08006018 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800601c:	4b05      	ldr	r3, [pc, #20]	; (8006034 <FLASH_AcknowledgePageErase+0x1c>)
 800601e:	695b      	ldr	r3, [r3, #20]
 8006020:	4a04      	ldr	r2, [pc, #16]	; (8006034 <FLASH_AcknowledgePageErase+0x1c>)
 8006022:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8006026:	f023 0302 	bic.w	r3, r3, #2
 800602a:	6153      	str	r3, [r2, #20]
#endif
}
 800602c:	bf00      	nop
 800602e:	46bd      	mov	sp, r7
 8006030:	bc80      	pop	{r7}
 8006032:	4770      	bx	lr
 8006034:	58004000 	.word	0x58004000

08006038 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006046:	e140      	b.n	80062ca <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	2101      	movs	r1, #1
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	4013      	ands	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	f000 8132 	beq.w	80062c4 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	f003 0303 	and.w	r3, r3, #3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d005      	beq.n	8006078 <HAL_GPIO_Init+0x40>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	f003 0303 	and.w	r3, r3, #3
 8006074:	2b02      	cmp	r3, #2
 8006076:	d130      	bne.n	80060da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	005b      	lsls	r3, r3, #1
 8006082:	2203      	movs	r2, #3
 8006084:	fa02 f303 	lsl.w	r3, r2, r3
 8006088:	43db      	mvns	r3, r3
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4013      	ands	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4313      	orrs	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ae:	2201      	movs	r2, #1
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	fa02 f303 	lsl.w	r3, r2, r3
 80060b6:	43db      	mvns	r3, r3
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	4013      	ands	r3, r2
 80060bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	091b      	lsrs	r3, r3, #4
 80060c4:	f003 0201 	and.w	r2, r3, #1
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f003 0303 	and.w	r3, r3, #3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d017      	beq.n	8006116 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	2203      	movs	r2, #3
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4013      	ands	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689a      	ldr	r2, [r3, #8]
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b02      	cmp	r3, #2
 8006120:	d123      	bne.n	800616a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	08da      	lsrs	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	3208      	adds	r2, #8
 800612a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	220f      	movs	r2, #15
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	4013      	ands	r3, r2
 8006144:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	08da      	lsrs	r2, r3, #3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	3208      	adds	r2, #8
 8006164:	6939      	ldr	r1, [r7, #16]
 8006166:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	005b      	lsls	r3, r3, #1
 8006174:	2203      	movs	r2, #3
 8006176:	fa02 f303 	lsl.w	r3, r2, r3
 800617a:	43db      	mvns	r3, r3
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	4013      	ands	r3, r2
 8006180:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f003 0203 	and.w	r2, r3, #3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	4313      	orrs	r3, r2
 8006196:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 808c 	beq.w	80062c4 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80061ac:	4a4e      	ldr	r2, [pc, #312]	; (80062e8 <HAL_GPIO_Init+0x2b0>)
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	3302      	adds	r3, #2
 80061b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 0303 	and.w	r3, r3, #3
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	2207      	movs	r2, #7
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	43db      	mvns	r3, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4013      	ands	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061d6:	d00d      	beq.n	80061f4 <HAL_GPIO_Init+0x1bc>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a44      	ldr	r2, [pc, #272]	; (80062ec <HAL_GPIO_Init+0x2b4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <HAL_GPIO_Init+0x1b8>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a43      	ldr	r2, [pc, #268]	; (80062f0 <HAL_GPIO_Init+0x2b8>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d101      	bne.n	80061ec <HAL_GPIO_Init+0x1b4>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e004      	b.n	80061f6 <HAL_GPIO_Init+0x1be>
 80061ec:	2307      	movs	r3, #7
 80061ee:	e002      	b.n	80061f6 <HAL_GPIO_Init+0x1be>
 80061f0:	2301      	movs	r3, #1
 80061f2:	e000      	b.n	80061f6 <HAL_GPIO_Init+0x1be>
 80061f4:	2300      	movs	r3, #0
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	f002 0203 	and.w	r2, r2, #3
 80061fc:	0092      	lsls	r2, r2, #2
 80061fe:	4093      	lsls	r3, r2
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006206:	4938      	ldr	r1, [pc, #224]	; (80062e8 <HAL_GPIO_Init+0x2b0>)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	089b      	lsrs	r3, r3, #2
 800620c:	3302      	adds	r3, #2
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006214:	4b37      	ldr	r3, [pc, #220]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	43db      	mvns	r3, r3
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4013      	ands	r3, r2
 8006222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d003      	beq.n	8006238 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	4313      	orrs	r3, r2
 8006236:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006238:	4a2e      	ldr	r2, [pc, #184]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800623e:	4b2d      	ldr	r3, [pc, #180]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	43db      	mvns	r3, r3
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4013      	ands	r3, r2
 800624c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800625a:	693a      	ldr	r2, [r7, #16]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006262:	4a24      	ldr	r2, [pc, #144]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006268:	4b22      	ldr	r3, [pc, #136]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 800626a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	43db      	mvns	r3, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	4013      	ands	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4313      	orrs	r3, r2
 800628c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800628e:	4a19      	ldr	r2, [pc, #100]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8006296:	4b17      	ldr	r3, [pc, #92]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 8006298:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800629c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	43db      	mvns	r3, r3
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4013      	ands	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80062bc:	4a0d      	ldr	r2, [pc, #52]	; (80062f4 <HAL_GPIO_Init+0x2bc>)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	3301      	adds	r3, #1
 80062c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa22 f303 	lsr.w	r3, r2, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f47f aeb7 	bne.w	8006048 <HAL_GPIO_Init+0x10>
  }
}
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bc80      	pop	{r7}
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	40010000 	.word	0x40010000
 80062ec:	48000400 	.word	0x48000400
 80062f0:	48000800 	.word	0x48000800
 80062f4:	58000800 	.word	0x58000800

080062f8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006302:	2300      	movs	r3, #0
 8006304:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8006306:	e0af      	b.n	8006468 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006308:	2201      	movs	r2, #1
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	fa02 f303 	lsl.w	r3, r2, r3
 8006310:	683a      	ldr	r2, [r7, #0]
 8006312:	4013      	ands	r3, r2
 8006314:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	f000 80a2 	beq.w	8006462 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800631e:	4a59      	ldr	r2, [pc, #356]	; (8006484 <HAL_GPIO_DeInit+0x18c>)
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	089b      	lsrs	r3, r3, #2
 8006324:	3302      	adds	r3, #2
 8006326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800632a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	2207      	movs	r2, #7
 8006336:	fa02 f303 	lsl.w	r3, r2, r3
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4013      	ands	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006346:	d00d      	beq.n	8006364 <HAL_GPIO_DeInit+0x6c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a4f      	ldr	r2, [pc, #316]	; (8006488 <HAL_GPIO_DeInit+0x190>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d007      	beq.n	8006360 <HAL_GPIO_DeInit+0x68>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a4e      	ldr	r2, [pc, #312]	; (800648c <HAL_GPIO_DeInit+0x194>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d101      	bne.n	800635c <HAL_GPIO_DeInit+0x64>
 8006358:	2302      	movs	r3, #2
 800635a:	e004      	b.n	8006366 <HAL_GPIO_DeInit+0x6e>
 800635c:	2307      	movs	r3, #7
 800635e:	e002      	b.n	8006366 <HAL_GPIO_DeInit+0x6e>
 8006360:	2301      	movs	r3, #1
 8006362:	e000      	b.n	8006366 <HAL_GPIO_DeInit+0x6e>
 8006364:	2300      	movs	r3, #0
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	f002 0203 	and.w	r2, r2, #3
 800636c:	0092      	lsls	r2, r2, #2
 800636e:	4093      	lsls	r3, r2
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	429a      	cmp	r2, r3
 8006374:	d136      	bne.n	80063e4 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8006376:	4b46      	ldr	r3, [pc, #280]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 8006378:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	43db      	mvns	r3, r3
 8006380:	4943      	ldr	r1, [pc, #268]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 8006382:	4013      	ands	r3, r2
 8006384:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8006388:	4b41      	ldr	r3, [pc, #260]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 800638a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	43db      	mvns	r3, r3
 8006392:	493f      	ldr	r1, [pc, #252]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 8006394:	4013      	ands	r3, r2
 8006396:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800639a:	4b3d      	ldr	r3, [pc, #244]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	43db      	mvns	r3, r3
 80063a2:	493b      	ldr	r1, [pc, #236]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80063a8:	4b39      	ldr	r3, [pc, #228]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	4937      	ldr	r1, [pc, #220]	; (8006490 <HAL_GPIO_DeInit+0x198>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	f003 0303 	and.w	r3, r3, #3
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	2207      	movs	r2, #7
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80063c6:	4a2f      	ldr	r2, [pc, #188]	; (8006484 <HAL_GPIO_DeInit+0x18c>)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	3302      	adds	r3, #2
 80063ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	43da      	mvns	r2, r3
 80063d6:	482b      	ldr	r0, [pc, #172]	; (8006484 <HAL_GPIO_DeInit+0x18c>)
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	089b      	lsrs	r3, r3, #2
 80063dc:	400a      	ands	r2, r1
 80063de:	3302      	adds	r3, #2
 80063e0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	2103      	movs	r1, #3
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	431a      	orrs	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	08da      	lsrs	r2, r3, #3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3208      	adds	r2, #8
 8006400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	f003 0307 	and.w	r3, r3, #7
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	220f      	movs	r2, #15
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43db      	mvns	r3, r3
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	08d2      	lsrs	r2, r2, #3
 8006418:	4019      	ands	r1, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3208      	adds	r2, #8
 800641e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	689a      	ldr	r2, [r3, #8]
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	005b      	lsls	r3, r3, #1
 800642a:	2103      	movs	r1, #3
 800642c:	fa01 f303 	lsl.w	r3, r1, r3
 8006430:	43db      	mvns	r3, r3
 8006432:	401a      	ands	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685a      	ldr	r2, [r3, #4]
 800643c:	2101      	movs	r1, #1
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	fa01 f303 	lsl.w	r3, r1, r3
 8006444:	43db      	mvns	r3, r3
 8006446:	401a      	ands	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68da      	ldr	r2, [r3, #12]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	005b      	lsls	r3, r3, #1
 8006454:	2103      	movs	r1, #3
 8006456:	fa01 f303 	lsl.w	r3, r1, r3
 800645a:	43db      	mvns	r3, r3
 800645c:	401a      	ands	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
    }

    position++;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	3301      	adds	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	fa22 f303 	lsr.w	r3, r2, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f af49 	bne.w	8006308 <HAL_GPIO_DeInit+0x10>
  }
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	bc80      	pop	{r7}
 8006480:	4770      	bx	lr
 8006482:	bf00      	nop
 8006484:	40010000 	.word	0x40010000
 8006488:	48000400 	.word	0x48000400
 800648c:	48000800 	.word	0x48000800
 8006490:	58000800 	.word	0x58000800

08006494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	460b      	mov	r3, r1
 800649e:	807b      	strh	r3, [r7, #2]
 80064a0:	4613      	mov	r3, r2
 80064a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064a4:	787b      	ldrb	r3, [r7, #1]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d003      	beq.n	80064b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064aa:	887a      	ldrh	r2, [r7, #2]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064b0:	e002      	b.n	80064b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064b2:	887a      	ldrh	r2, [r7, #2]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e081      	b.n	80065d8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d106      	bne.n	80064ee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f7fb fb93 	bl	8001c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2224      	movs	r2, #36	; 0x24
 80064f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006512:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006522:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d107      	bne.n	800653c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006538:	609a      	str	r2, [r3, #8]
 800653a:	e006      	b.n	800654a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006548:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b02      	cmp	r3, #2
 8006550:	d104      	bne.n	800655c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800655a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800656a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800656e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800657e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	691a      	ldr	r2, [r3, #16]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69d9      	ldr	r1, [r3, #28]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1a      	ldr	r2, [r3, #32]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f042 0201 	orr.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2220      	movs	r2, #32
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3708      	adds	r7, #8
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	607a      	str	r2, [r7, #4]
 80065ea:	461a      	mov	r2, r3
 80065ec:	460b      	mov	r3, r1
 80065ee:	817b      	strh	r3, [r7, #10]
 80065f0:	4613      	mov	r3, r2
 80065f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b20      	cmp	r3, #32
 80065fe:	f040 80da 	bne.w	80067b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006608:	2b01      	cmp	r3, #1
 800660a:	d101      	bne.n	8006610 <HAL_I2C_Master_Transmit+0x30>
 800660c:	2302      	movs	r3, #2
 800660e:	e0d3      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006618:	f7fc fa2e 	bl	8002a78 <HAL_GetTick>
 800661c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	9300      	str	r3, [sp, #0]
 8006622:	2319      	movs	r3, #25
 8006624:	2201      	movs	r2, #1
 8006626:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 fedc 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 8006630:	4603      	mov	r3, r0
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e0be      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2221      	movs	r2, #33	; 0x21
 800663e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2210      	movs	r2, #16
 8006646:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2200      	movs	r2, #0
 800664e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	893a      	ldrh	r2, [r7, #8]
 800665a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006666:	b29b      	uxth	r3, r3
 8006668:	2bff      	cmp	r3, #255	; 0xff
 800666a:	d90e      	bls.n	800668a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	22ff      	movs	r2, #255	; 0xff
 8006670:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006676:	b2da      	uxtb	r2, r3
 8006678:	8979      	ldrh	r1, [r7, #10]
 800667a:	4b51      	ldr	r3, [pc, #324]	; (80067c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 f8c6 	bl	8007814 <I2C_TransferConfig>
 8006688:	e06c      	b.n	8006764 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800668e:	b29a      	uxth	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006698:	b2da      	uxtb	r2, r3
 800669a:	8979      	ldrh	r1, [r7, #10]
 800669c:	4b48      	ldr	r3, [pc, #288]	; (80067c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800669e:	9300      	str	r3, [sp, #0]
 80066a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066a4:	68f8      	ldr	r0, [r7, #12]
 80066a6:	f001 f8b5 	bl	8007814 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80066aa:	e05b      	b.n	8006764 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	6a39      	ldr	r1, [r7, #32]
 80066b0:	68f8      	ldr	r0, [r7, #12]
 80066b2:	f000 fed9 	bl	8007468 <I2C_WaitOnTXISFlagUntilTimeout>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e07b      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	781a      	ldrb	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d034      	beq.n	8006764 <HAL_I2C_Master_Transmit+0x184>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d130      	bne.n	8006764 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	2200      	movs	r2, #0
 800670a:	2180      	movs	r1, #128	; 0x80
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fe6b 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e04d      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	2bff      	cmp	r3, #255	; 0xff
 8006724:	d90e      	bls.n	8006744 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	22ff      	movs	r2, #255	; 0xff
 800672a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006730:	b2da      	uxtb	r2, r3
 8006732:	8979      	ldrh	r1, [r7, #10]
 8006734:	2300      	movs	r3, #0
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f001 f869 	bl	8007814 <I2C_TransferConfig>
 8006742:	e00f      	b.n	8006764 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006748:	b29a      	uxth	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006752:	b2da      	uxtb	r2, r3
 8006754:	8979      	ldrh	r1, [r7, #10]
 8006756:	2300      	movs	r3, #0
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f001 f858 	bl	8007814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d19e      	bne.n	80066ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	6a39      	ldr	r1, [r7, #32]
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 feb8 	bl	80074e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e01a      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2220      	movs	r2, #32
 8006788:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8006796:	400b      	ands	r3, r1
 8006798:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2220      	movs	r2, #32
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	e000      	b.n	80067b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80067b6:	2302      	movs	r3, #2
  }
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3718      	adds	r7, #24
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	80002000 	.word	0x80002000
 80067c4:	fe00e800 	.word	0xfe00e800

080067c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	461a      	mov	r2, r3
 80067d4:	460b      	mov	r3, r1
 80067d6:	817b      	strh	r3, [r7, #10]
 80067d8:	4613      	mov	r3, r2
 80067da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	2b20      	cmp	r3, #32
 80067e6:	f040 80db 	bne.w	80069a0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d101      	bne.n	80067f8 <HAL_I2C_Master_Receive+0x30>
 80067f4:	2302      	movs	r3, #2
 80067f6:	e0d4      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006800:	f7fc f93a 	bl	8002a78 <HAL_GetTick>
 8006804:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	2319      	movs	r3, #25
 800680c:	2201      	movs	r2, #1
 800680e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006812:	68f8      	ldr	r0, [r7, #12]
 8006814:	f000 fde8 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e0bf      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2222      	movs	r2, #34	; 0x22
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2210      	movs	r2, #16
 800682e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	687a      	ldr	r2, [r7, #4]
 800683c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	893a      	ldrh	r2, [r7, #8]
 8006842:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800684e:	b29b      	uxth	r3, r3
 8006850:	2bff      	cmp	r3, #255	; 0xff
 8006852:	d90e      	bls.n	8006872 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	22ff      	movs	r2, #255	; 0xff
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	b2da      	uxtb	r2, r3
 8006860:	8979      	ldrh	r1, [r7, #10]
 8006862:	4b52      	ldr	r3, [pc, #328]	; (80069ac <HAL_I2C_Master_Receive+0x1e4>)
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 ffd2 	bl	8007814 <I2C_TransferConfig>
 8006870:	e06d      	b.n	800694e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006876:	b29a      	uxth	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006880:	b2da      	uxtb	r2, r3
 8006882:	8979      	ldrh	r1, [r7, #10]
 8006884:	4b49      	ldr	r3, [pc, #292]	; (80069ac <HAL_I2C_Master_Receive+0x1e4>)
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 ffc1 	bl	8007814 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006892:	e05c      	b.n	800694e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	6a39      	ldr	r1, [r7, #32]
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 fe61 	bl	8007560 <I2C_WaitOnRXNEFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e07c      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	1c5a      	adds	r2, r3, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	3b01      	subs	r3, #1
 80068c6:	b29a      	uxth	r2, r3
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068de:	b29b      	uxth	r3, r3
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d034      	beq.n	800694e <HAL_I2C_Master_Receive+0x186>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d130      	bne.n	800694e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	2200      	movs	r2, #0
 80068f4:	2180      	movs	r1, #128	; 0x80
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fd76 	bl	80073e8 <I2C_WaitOnFlagUntilTimeout>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e04d      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800690a:	b29b      	uxth	r3, r3
 800690c:	2bff      	cmp	r3, #255	; 0xff
 800690e:	d90e      	bls.n	800692e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800691a:	b2da      	uxtb	r2, r3
 800691c:	8979      	ldrh	r1, [r7, #10]
 800691e:	2300      	movs	r3, #0
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 ff74 	bl	8007814 <I2C_TransferConfig>
 800692c:	e00f      	b.n	800694e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006932:	b29a      	uxth	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800693c:	b2da      	uxtb	r2, r3
 800693e:	8979      	ldrh	r1, [r7, #10]
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 ff63 	bl	8007814 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006952:	b29b      	uxth	r3, r3
 8006954:	2b00      	cmp	r3, #0
 8006956:	d19d      	bne.n	8006894 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006958:	697a      	ldr	r2, [r7, #20]
 800695a:	6a39      	ldr	r1, [r7, #32]
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fdc3 	bl	80074e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e01a      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2220      	movs	r2, #32
 8006972:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6859      	ldr	r1, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <HAL_I2C_Master_Receive+0x1e8>)
 8006980:	400b      	ands	r3, r1
 8006982:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2220      	movs	r2, #32
 8006988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e000      	b.n	80069a2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80069a0:	2302      	movs	r3, #2
  }
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3718      	adds	r7, #24
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	80002400 	.word	0x80002400
 80069b0:	fe00e800 	.word	0xfe00e800

080069b4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	68f9      	ldr	r1, [r7, #12]
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	4798      	blx	r3
  }
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	699b      	ldr	r3, [r3, #24]
 80069f6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00f      	beq.n	8006a2a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a18:	f043 0201 	orr.w	r2, r3, #1
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a28:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00f      	beq.n	8006a54 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00a      	beq.n	8006a54 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a42:	f043 0208 	orr.w	r2, r3, #8
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a52:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00f      	beq.n	8006a7e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00a      	beq.n	8006a7e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	f043 0202 	orr.w	r2, r3, #2
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f003 030b 	and.w	r3, r3, #11
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d003      	beq.n	8006a96 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006a8e:	68f9      	ldr	r1, [r7, #12]
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb71 	bl	8007178 <I2C_ITError>
  }
}
 8006a96:	bf00      	nop
 8006a98:	3718      	adds	r7, #24
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006a9e:	b480      	push	{r7}
 8006aa0:	b083      	sub	sp, #12
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006aa6:	bf00      	nop
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bc80      	pop	{r7}
 8006aae:	4770      	bx	lr

08006ab0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bc80      	pop	{r7}
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
 8006aca:	460b      	mov	r3, r1
 8006acc:	70fb      	strb	r3, [r7, #3]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bc80      	pop	{r7}
 8006ada:	4770      	bx	lr

08006adc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bc80      	pop	{r7}
 8006aec:	4770      	bx	lr

08006aee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b083      	sub	sp, #12
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006af6:	bf00      	nop
 8006af8:	370c      	adds	r7, #12
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bc80      	pop	{r7}
 8006afe:	4770      	bx	lr

08006b00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b083      	sub	sp, #12
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b08:	bf00      	nop
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr

08006b12 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b086      	sub	sp, #24
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	60f8      	str	r0, [r7, #12]
 8006b1a:	60b9      	str	r1, [r7, #8]
 8006b1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b22:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <I2C_Slave_ISR_IT+0x24>
 8006b32:	2302      	movs	r3, #2
 8006b34:	e0e1      	b.n	8006cfa <I2C_Slave_ISR_IT+0x1e8>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f003 0320 	and.w	r3, r3, #32
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b52:	6939      	ldr	r1, [r7, #16]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f9b5 	bl	8006ec4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f003 0310 	and.w	r3, r3, #16
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d04b      	beq.n	8006bfc <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d046      	beq.n	8006bfc <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d128      	bne.n	8006bca <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b28      	cmp	r3, #40	; 0x28
 8006b82:	d108      	bne.n	8006b96 <I2C_Slave_ISR_IT+0x84>
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b8a:	d104      	bne.n	8006b96 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006b8c:	6939      	ldr	r1, [r7, #16]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 fa9e 	bl	80070d0 <I2C_ITListenCplt>
 8006b94:	e031      	b.n	8006bfa <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b29      	cmp	r3, #41	; 0x29
 8006ba0:	d10e      	bne.n	8006bc0 <I2C_Slave_ISR_IT+0xae>
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006ba8:	d00a      	beq.n	8006bc0 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2210      	movs	r2, #16
 8006bb0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f000 fbd7 	bl	8007366 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f926 	bl	8006e0a <I2C_ITSlaveSeqCplt>
 8006bbe:	e01c      	b.n	8006bfa <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2210      	movs	r2, #16
 8006bc6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006bc8:	e08f      	b.n	8006cea <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2210      	movs	r2, #16
 8006bd0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd6:	f043 0204 	orr.w	r2, r3, #4
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <I2C_Slave_ISR_IT+0xda>
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bea:	d17e      	bne.n	8006cea <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 fac0 	bl	8007178 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006bf8:	e077      	b.n	8006cea <I2C_Slave_ISR_IT+0x1d8>
 8006bfa:	e076      	b.n	8006cea <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	f003 0304 	and.w	r3, r3, #4
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d02f      	beq.n	8006c66 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d02a      	beq.n	8006c66 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d018      	beq.n	8006c4c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2c:	1c5a      	adds	r2, r3, #1
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	3b01      	subs	r3, #1
 8006c46:	b29a      	uxth	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d14b      	bne.n	8006cee <I2C_Slave_ISR_IT+0x1dc>
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c5c:	d047      	beq.n	8006cee <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c5e:	68f8      	ldr	r0, [r7, #12]
 8006c60:	f000 f8d3 	bl	8006e0a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c64:	e043      	b.n	8006cee <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d009      	beq.n	8006c84 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d004      	beq.n	8006c84 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c7a:	6939      	ldr	r1, [r7, #16]
 8006c7c:	68f8      	ldr	r0, [r7, #12]
 8006c7e:	f000 f840 	bl	8006d02 <I2C_ITAddrCplt>
 8006c82:	e035      	b.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d030      	beq.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d02b      	beq.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d018      	beq.n	8006cd4 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	781a      	ldrb	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	b29a      	uxth	r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cd2:	e00d      	b.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cda:	d002      	beq.n	8006ce2 <I2C_Slave_ISR_IT+0x1d0>
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d106      	bne.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006ce2:	68f8      	ldr	r0, [r7, #12]
 8006ce4:	f000 f891 	bl	8006e0a <I2C_ITSlaveSeqCplt>
 8006ce8:	e002      	b.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006cea:	bf00      	nop
 8006cec:	e000      	b.n	8006cf0 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006cee:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3718      	adds	r7, #24
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d18:	2b28      	cmp	r3, #40	; 0x28
 8006d1a:	d16a      	bne.n	8006df2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	0c1b      	lsrs	r3, r3, #16
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d3a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d48:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68db      	ldr	r3, [r3, #12]
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d56:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d138      	bne.n	8006dd2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d60:	897b      	ldrh	r3, [r7, #10]
 8006d62:	09db      	lsrs	r3, r3, #7
 8006d64:	b29a      	uxth	r2, r3
 8006d66:	89bb      	ldrh	r3, [r7, #12]
 8006d68:	4053      	eors	r3, r2
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	f003 0306 	and.w	r3, r3, #6
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11c      	bne.n	8006dae <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d74:	897b      	ldrh	r3, [r7, #10]
 8006d76:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d13b      	bne.n	8006e02 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2208      	movs	r2, #8
 8006d96:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006da0:	89ba      	ldrh	r2, [r7, #12]
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	4619      	mov	r1, r3
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f7ff fe8b 	bl	8006ac2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006dac:	e029      	b.n	8006e02 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006dae:	893b      	ldrh	r3, [r7, #8]
 8006db0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006db2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 fd5c 	bl	8007874 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dc4:	89ba      	ldrh	r2, [r7, #12]
 8006dc6:	7bfb      	ldrb	r3, [r7, #15]
 8006dc8:	4619      	mov	r1, r3
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7ff fe79 	bl	8006ac2 <HAL_I2C_AddrCallback>
}
 8006dd0:	e017      	b.n	8006e02 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fd4c 	bl	8007874 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006de4:	89ba      	ldrh	r2, [r7, #12]
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
 8006de8:	4619      	mov	r1, r3
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f7ff fe69 	bl	8006ac2 <HAL_I2C_AddrCallback>
}
 8006df0:	e007      	b.n	8006e02 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2208      	movs	r2, #8
 8006df8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b084      	sub	sp, #16
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d008      	beq.n	8006e3e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e3a:	601a      	str	r2, [r3, #0]
 8006e3c:	e00c      	b.n	8006e58 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d007      	beq.n	8006e58 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e56:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b29      	cmp	r3, #41	; 0x29
 8006e62:	d112      	bne.n	8006e8a <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2228      	movs	r2, #40	; 0x28
 8006e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2221      	movs	r2, #33	; 0x21
 8006e70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e72:	2101      	movs	r1, #1
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fcfd 	bl	8007874 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7ff fe0b 	bl	8006a9e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006e88:	e017      	b.n	8006eba <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b2a      	cmp	r3, #42	; 0x2a
 8006e94:	d111      	bne.n	8006eba <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2228      	movs	r2, #40	; 0x28
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2222      	movs	r2, #34	; 0x22
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ea4:	2102      	movs	r1, #2
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fce4 	bl	8007874 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7ff fdfb 	bl	8006ab0 <HAL_I2C_SlaveRxCpltCallback>
}
 8006eba:	bf00      	nop
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ee0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2220      	movs	r2, #32
 8006ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006eea:	7bfb      	ldrb	r3, [r7, #15]
 8006eec:	2b21      	cmp	r3, #33	; 0x21
 8006eee:	d002      	beq.n	8006ef6 <I2C_ITSlaveCplt+0x32>
 8006ef0:	7bfb      	ldrb	r3, [r7, #15]
 8006ef2:	2b29      	cmp	r3, #41	; 0x29
 8006ef4:	d108      	bne.n	8006f08 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ef6:	f248 0101 	movw	r1, #32769	; 0x8001
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 fcba 	bl	8007874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2221      	movs	r2, #33	; 0x21
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
 8006f06:	e00d      	b.n	8006f24 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b22      	cmp	r3, #34	; 0x22
 8006f0c:	d002      	beq.n	8006f14 <I2C_ITSlaveCplt+0x50>
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	2b2a      	cmp	r3, #42	; 0x2a
 8006f12:	d107      	bne.n	8006f24 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f14:	f248 0102 	movw	r1, #32770	; 0x8002
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 fcab 	bl	8007874 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2222      	movs	r2, #34	; 0x22
 8006f22:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f32:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b62      	ldr	r3, [pc, #392]	; (80070c8 <I2C_ITSlaveCplt+0x204>)
 8006f40:	400b      	ands	r3, r1
 8006f42:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa0e 	bl	8007366 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d013      	beq.n	8006f7c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f62:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d01f      	beq.n	8006fac <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f7a:	e017      	b.n	8006fac <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d012      	beq.n	8006fac <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006f94:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d006      	beq.n	8006fac <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f003 0304 	and.w	r3, r3, #4
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d020      	beq.n	8006ff8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f023 0304 	bic.w	r3, r3, #4
 8006fbc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	b2d2      	uxtb	r2, r2
 8006fca:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00c      	beq.n	8006ff8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f043 0204 	orr.w	r2, r3, #4
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007020:	2b00      	cmp	r3, #0
 8007022:	d010      	beq.n	8007046 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f8a4 	bl	8007178 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007036:	b2db      	uxtb	r3, r3
 8007038:	2b28      	cmp	r3, #40	; 0x28
 800703a:	d141      	bne.n	80070c0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f846 	bl	80070d0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007044:	e03c      	b.n	80070c0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800704e:	d014      	beq.n	800707a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff feda 	bl	8006e0a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a1c      	ldr	r2, [pc, #112]	; (80070cc <I2C_ITSlaveCplt+0x208>)
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2220      	movs	r2, #32
 8007060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff fd32 	bl	8006adc <HAL_I2C_ListenCpltCallback>
}
 8007078:	e022      	b.n	80070c0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b22      	cmp	r3, #34	; 0x22
 8007084:	d10e      	bne.n	80070a4 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2220      	movs	r2, #32
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f7ff fd07 	bl	8006ab0 <HAL_I2C_SlaveRxCpltCallback>
}
 80070a2:	e00d      	b.n	80070c0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f7ff fcef 	bl	8006a9e <HAL_I2C_SlaveTxCpltCallback>
}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	fe00e800 	.word	0xfe00e800
 80070cc:	ffff0000 	.word	0xffff0000

080070d0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a25      	ldr	r2, [pc, #148]	; (8007174 <I2C_ITListenCplt+0xa4>)
 80070de:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2200      	movs	r2, #0
 80070e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f003 0304 	and.w	r3, r3, #4
 8007102:	2b00      	cmp	r3, #0
 8007104:	d022      	beq.n	800714c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	b2d2      	uxtb	r2, r2
 8007112:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007122:	2b00      	cmp	r3, #0
 8007124:	d012      	beq.n	800714c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007144:	f043 0204 	orr.w	r2, r3, #4
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800714c:	f248 0103 	movw	r1, #32771	; 0x8003
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fb8f 	bl	8007874 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2210      	movs	r2, #16
 800715c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7ff fcb8 	bl	8006adc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800716c:	bf00      	nop
 800716e:	3708      	adds	r7, #8
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	ffff0000 	.word	0xffff0000

08007178 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007188:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a5d      	ldr	r2, [pc, #372]	; (800730c <I2C_ITError+0x194>)
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80071aa:	7bfb      	ldrb	r3, [r7, #15]
 80071ac:	2b28      	cmp	r3, #40	; 0x28
 80071ae:	d005      	beq.n	80071bc <I2C_ITError+0x44>
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
 80071b2:	2b29      	cmp	r3, #41	; 0x29
 80071b4:	d002      	beq.n	80071bc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ba:	d10b      	bne.n	80071d4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071bc:	2103      	movs	r1, #3
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fb58 	bl	8007874 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2228      	movs	r2, #40	; 0x28
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a50      	ldr	r2, [pc, #320]	; (8007310 <I2C_ITError+0x198>)
 80071d0:	635a      	str	r2, [r3, #52]	; 0x34
 80071d2:	e011      	b.n	80071f8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071d4:	f248 0103 	movw	r1, #32771	; 0x8003
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 fb4b 	bl	8007874 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b60      	cmp	r3, #96	; 0x60
 80071e8:	d003      	beq.n	80071f2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007202:	2b00      	cmp	r3, #0
 8007204:	d039      	beq.n	800727a <I2C_ITError+0x102>
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	2b11      	cmp	r3, #17
 800720a:	d002      	beq.n	8007212 <I2C_ITError+0x9a>
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	2b21      	cmp	r3, #33	; 0x21
 8007210:	d133      	bne.n	800727a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800721c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007220:	d107      	bne.n	8007232 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007230:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fb9c 	bl	8005974 <HAL_DMA_GetState>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d017      	beq.n	8007272 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007246:	4a33      	ldr	r2, [pc, #204]	; (8007314 <I2C_ITError+0x19c>)
 8007248:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007256:	4618      	mov	r0, r3
 8007258:	f7fe fa66 	bl	8005728 <HAL_DMA_Abort_IT>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d04d      	beq.n	80072fe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800726c:	4610      	mov	r0, r2
 800726e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007270:	e045      	b.n	80072fe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f850 	bl	8007318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007278:	e041      	b.n	80072fe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	2b00      	cmp	r3, #0
 8007280:	d039      	beq.n	80072f6 <I2C_ITError+0x17e>
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2b12      	cmp	r3, #18
 8007286:	d002      	beq.n	800728e <I2C_ITError+0x116>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b22      	cmp	r3, #34	; 0x22
 800728c:	d133      	bne.n	80072f6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800729c:	d107      	bne.n	80072ae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fe fb5e 	bl	8005974 <HAL_DMA_GetState>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d017      	beq.n	80072ee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c2:	4a14      	ldr	r2, [pc, #80]	; (8007314 <I2C_ITError+0x19c>)
 80072c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe fa28 	bl	8005728 <HAL_DMA_Abort_IT>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d011      	beq.n	8007302 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80072e8:	4610      	mov	r0, r2
 80072ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072ec:	e009      	b.n	8007302 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f812 	bl	8007318 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072f4:	e005      	b.n	8007302 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f80e 	bl	8007318 <I2C_TreatErrorCallback>
  }
}
 80072fc:	e002      	b.n	8007304 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80072fe:	bf00      	nop
 8007300:	e000      	b.n	8007304 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007302:	bf00      	nop
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	ffff0000 	.word	0xffff0000
 8007310:	08006b13 	.word	0x08006b13
 8007314:	080073ad 	.word	0x080073ad

08007318 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007326:	b2db      	uxtb	r3, r3
 8007328:	2b60      	cmp	r3, #96	; 0x60
 800732a:	d10e      	bne.n	800734a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2220      	movs	r2, #32
 8007330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fbdc 	bl	8006b00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007348:	e009      	b.n	800735e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff fbc8 	bl	8006aee <HAL_I2C_ErrorCallback>
}
 800735e:	bf00      	nop
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b02      	cmp	r3, #2
 800737a:	d103      	bne.n	8007384 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2200      	movs	r2, #0
 8007382:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d007      	beq.n	80073a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	699a      	ldr	r2, [r3, #24]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f042 0201 	orr.w	r2, r2, #1
 80073a0:	619a      	str	r2, [r3, #24]
  }
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bc80      	pop	{r7}
 80073aa:	4770      	bx	lr

080073ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	2200      	movs	r2, #0
 80073c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	2200      	movs	r2, #0
 80073d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f7ff ff9c 	bl	8007318 <I2C_TreatErrorCallback>
}
 80073e0:	bf00      	nop
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80073f8:	e022      	b.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007400:	d01e      	beq.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007402:	f7fb fb39 	bl	8002a78 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	683a      	ldr	r2, [r7, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d302      	bcc.n	8007418 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d113      	bne.n	8007440 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800741c:	f043 0220 	orr.w	r2, r3, #32
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	e00f      	b.n	8007460 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	4013      	ands	r3, r2
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	79fb      	ldrb	r3, [r7, #7]
 800745a:	429a      	cmp	r2, r3
 800745c:	d0cd      	beq.n	80073fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007474:	e02c      	b.n	80074d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	68f8      	ldr	r0, [r7, #12]
 800747c:	f000 f8ea 	bl	8007654 <I2C_IsErrorOccurred>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d001      	beq.n	800748a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007486:	2301      	movs	r3, #1
 8007488:	e02a      	b.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007490:	d01e      	beq.n	80074d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007492:	f7fb faf1 	bl	8002a78 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d302      	bcc.n	80074a8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d113      	bne.n	80074d0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074ac:	f043 0220 	orr.w	r2, r3, #32
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e007      	b.n	80074e0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d1cb      	bne.n	8007476 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074f4:	e028      	b.n	8007548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f8aa 	bl	8007654 <I2C_IsErrorOccurred>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e026      	b.n	8007558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800750a:	f7fb fab5 	bl	8002a78 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	68ba      	ldr	r2, [r7, #8]
 8007516:	429a      	cmp	r2, r3
 8007518:	d302      	bcc.n	8007520 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d113      	bne.n	8007548 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007524:	f043 0220 	orr.w	r2, r3, #32
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2200      	movs	r2, #0
 8007540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e007      	b.n	8007558 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b20      	cmp	r3, #32
 8007554:	d1cf      	bne.n	80074f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	3710      	adds	r7, #16
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b084      	sub	sp, #16
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800756c:	e064      	b.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	68b9      	ldr	r1, [r7, #8]
 8007572:	68f8      	ldr	r0, [r7, #12]
 8007574:	f000 f86e 	bl	8007654 <I2C_IsErrorOccurred>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e062      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 0320 	and.w	r3, r3, #32
 800758c:	2b20      	cmp	r3, #32
 800758e:	d138      	bne.n	8007602 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	699b      	ldr	r3, [r3, #24]
 8007596:	f003 0304 	and.w	r3, r3, #4
 800759a:	2b04      	cmp	r3, #4
 800759c:	d105      	bne.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	e04e      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	f003 0310 	and.w	r3, r3, #16
 80075b4:	2b10      	cmp	r3, #16
 80075b6:	d107      	bne.n	80075c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2210      	movs	r2, #16
 80075be:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2204      	movs	r2, #4
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
 80075c6:	e002      	b.n	80075ce <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2220      	movs	r2, #32
 80075d4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6859      	ldr	r1, [r3, #4]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	4b1b      	ldr	r3, [pc, #108]	; (8007650 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80075e2:	400b      	ands	r3, r1
 80075e4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2220      	movs	r2, #32
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80075fe:	2301      	movs	r3, #1
 8007600:	e022      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007602:	f7fb fa39 	bl	8002a78 <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	429a      	cmp	r2, r3
 8007610:	d302      	bcc.n	8007618 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d10f      	bne.n	8007638 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761c:	f043 0220 	orr.w	r2, r3, #32
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2220      	movs	r2, #32
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e007      	b.n	8007648 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	f003 0304 	and.w	r3, r3, #4
 8007642:	2b04      	cmp	r3, #4
 8007644:	d193      	bne.n	800756e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	fe00e800 	.word	0xfe00e800

08007654 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b08a      	sub	sp, #40	; 0x28
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699b      	ldr	r3, [r3, #24]
 800766c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	f003 0310 	and.w	r3, r3, #16
 800767c:	2b00      	cmp	r3, #0
 800767e:	d068      	beq.n	8007752 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2210      	movs	r2, #16
 8007686:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007688:	e049      	b.n	800771e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007690:	d045      	beq.n	800771e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007692:	f7fb f9f1 	bl	8002a78 <HAL_GetTick>
 8007696:	4602      	mov	r2, r0
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d302      	bcc.n	80076a8 <I2C_IsErrorOccurred+0x54>
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d13a      	bne.n	800771e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076b2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076ba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	699b      	ldr	r3, [r3, #24]
 80076c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ca:	d121      	bne.n	8007710 <I2C_IsErrorOccurred+0xbc>
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076d2:	d01d      	beq.n	8007710 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076d4:	7cfb      	ldrb	r3, [r7, #19]
 80076d6:	2b20      	cmp	r3, #32
 80076d8:	d01a      	beq.n	8007710 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685a      	ldr	r2, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80076e8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80076ea:	f7fb f9c5 	bl	8002a78 <HAL_GetTick>
 80076ee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076f0:	e00e      	b.n	8007710 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80076f2:	f7fb f9c1 	bl	8002a78 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	2b19      	cmp	r3, #25
 80076fe:	d907      	bls.n	8007710 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	f043 0320 	orr.w	r3, r3, #32
 8007706:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800770e:	e006      	b.n	800771e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	f003 0320 	and.w	r3, r3, #32
 800771a:	2b20      	cmp	r3, #32
 800771c:	d1e9      	bne.n	80076f2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	f003 0320 	and.w	r3, r3, #32
 8007728:	2b20      	cmp	r3, #32
 800772a:	d003      	beq.n	8007734 <I2C_IsErrorOccurred+0xe0>
 800772c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007730:	2b00      	cmp	r3, #0
 8007732:	d0aa      	beq.n	800768a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007738:	2b00      	cmp	r3, #0
 800773a:	d103      	bne.n	8007744 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2220      	movs	r2, #32
 8007742:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	f043 0304 	orr.w	r3, r3, #4
 800774a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	699b      	ldr	r3, [r3, #24]
 8007758:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00b      	beq.n	800777c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	f043 0301 	orr.w	r3, r3, #1
 800776a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007774:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00b      	beq.n	800779e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f043 0308 	orr.w	r3, r3, #8
 800778c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007796:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00b      	beq.n	80077c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	f043 0302 	orr.w	r3, r3, #2
 80077ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80077c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01c      	beq.n	8007802 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f7ff fdcc 	bl	8007366 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6859      	ldr	r1, [r3, #4]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b0d      	ldr	r3, [pc, #52]	; (8007810 <I2C_IsErrorOccurred+0x1bc>)
 80077da:	400b      	ands	r3, r1
 80077dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	431a      	orrs	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2220      	movs	r2, #32
 80077ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007802:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007806:	4618      	mov	r0, r3
 8007808:	3728      	adds	r7, #40	; 0x28
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	fe00e800 	.word	0xfe00e800

08007814 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	460b      	mov	r3, r1
 8007820:	817b      	strh	r3, [r7, #10]
 8007822:	4613      	mov	r3, r2
 8007824:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007826:	897b      	ldrh	r3, [r7, #10]
 8007828:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800782c:	7a7b      	ldrb	r3, [r7, #9]
 800782e:	041b      	lsls	r3, r3, #16
 8007830:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007834:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800783a:	6a3b      	ldr	r3, [r7, #32]
 800783c:	4313      	orrs	r3, r2
 800783e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007842:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	0d5b      	lsrs	r3, r3, #21
 800784e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007852:	4b07      	ldr	r3, [pc, #28]	; (8007870 <I2C_TransferConfig+0x5c>)
 8007854:	430b      	orrs	r3, r1
 8007856:	43db      	mvns	r3, r3
 8007858:	ea02 0103 	and.w	r1, r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	bc80      	pop	{r7}
 800786e:	4770      	bx	lr
 8007870:	03ff63ff 	.word	0x03ff63ff

08007874 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007874:	b480      	push	{r7}
 8007876:	b085      	sub	sp, #20
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007884:	887b      	ldrh	r3, [r7, #2]
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00f      	beq.n	80078ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8007894:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800789c:	b2db      	uxtb	r3, r3
 800789e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078a2:	2b28      	cmp	r3, #40	; 0x28
 80078a4:	d003      	beq.n	80078ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80078ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	f003 0302 	and.w	r3, r3, #2
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00f      	beq.n	80078d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80078be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078cc:	2b28      	cmp	r3, #40	; 0x28
 80078ce:	d003      	beq.n	80078d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80078d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80078d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	da03      	bge.n	80078e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80078e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078e8:	887b      	ldrh	r3, [r7, #2]
 80078ea:	2b10      	cmp	r3, #16
 80078ec:	d103      	bne.n	80078f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80078f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078f6:	887b      	ldrh	r3, [r7, #2]
 80078f8:	2b20      	cmp	r3, #32
 80078fa:	d103      	bne.n	8007904 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f043 0320 	orr.w	r3, r3, #32
 8007902:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007904:	887b      	ldrh	r3, [r7, #2]
 8007906:	2b40      	cmp	r3, #64	; 0x40
 8007908:	d103      	bne.n	8007912 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007910:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	6819      	ldr	r1, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	43da      	mvns	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	400a      	ands	r2, r1
 8007922:	601a      	str	r2, [r3, #0]
}
 8007924:	bf00      	nop
 8007926:	3714      	adds	r7, #20
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b20      	cmp	r3, #32
 8007942:	d138      	bne.n	80079b6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800794a:	2b01      	cmp	r3, #1
 800794c:	d101      	bne.n	8007952 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800794e:	2302      	movs	r3, #2
 8007950:	e032      	b.n	80079b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2201      	movs	r2, #1
 8007956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2224      	movs	r2, #36	; 0x24
 800795e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f022 0201 	bic.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007980:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6819      	ldr	r1, [r3, #0]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f042 0201 	orr.w	r2, r2, #1
 80079a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2220      	movs	r2, #32
 80079a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	e000      	b.n	80079b8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079b6:	2302      	movs	r3, #2
  }
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b085      	sub	sp, #20
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b20      	cmp	r3, #32
 80079d6:	d139      	bne.n	8007a4c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e033      	b.n	8007a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	; 0x24
 80079f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f022 0201 	bic.w	r2, r2, #1
 8007a04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a14:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	021b      	lsls	r3, r3, #8
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f042 0201 	orr.w	r2, r2, #1
 8007a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2220      	movs	r2, #32
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	e000      	b.n	8007a4e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a4c:	2302      	movs	r3, #2
  }
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <LL_RCC_SetLPTIMClockSource>:
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a64:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	0c1b      	lsrs	r3, r3, #16
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	43db      	mvns	r3, r3
 8007a70:	401a      	ands	r2, r3
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	041b      	lsls	r3, r3, #16
 8007a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bc80      	pop	{r7}
 8007a88:	4770      	bx	lr

08007a8a <LL_RCC_GetLPTIMClockSource>:
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8007a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a96:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	0c1a      	lsrs	r2, r3, #16
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4313      	orrs	r3, r2
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bc80      	pop	{r7}
 8007aac:	4770      	bx	lr

08007aae <LL_APB1_GRP1_ForceReset>:
{
 8007aae:	b480      	push	{r7}
 8007ab0:	b083      	sub	sp, #12
 8007ab2:	af00      	add	r7, sp, #0
 8007ab4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8007ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bc80      	pop	{r7}
 8007ace:	4770      	bx	lr

08007ad0 <LL_APB1_GRP2_ForceReset>:
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8007ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ade:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007ae8:	bf00      	nop
 8007aea:	370c      	adds	r7, #12
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bc80      	pop	{r7}
 8007af0:	4770      	bx	lr

08007af2 <LL_APB1_GRP1_ReleaseReset>:
{
 8007af2:	b480      	push	{r7}
 8007af4:	b083      	sub	sp, #12
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8007afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	43db      	mvns	r3, r3
 8007b04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b08:	4013      	ands	r3, r2
 8007b0a:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007b0c:	bf00      	nop
 8007b0e:	370c      	adds	r7, #12
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bc80      	pop	{r7}
 8007b14:	4770      	bx	lr

08007b16 <LL_APB1_GRP2_ReleaseReset>:
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8007b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	43db      	mvns	r3, r3
 8007b28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bc80      	pop	{r7}
 8007b38:	4770      	bx	lr
	...

08007b3c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	e0b6      	b.n	8007cbc <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d106      	bne.n	8007b6e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7fa f905 	bl	8001d78 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2202      	movs	r2, #2
 8007b72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	691a      	ldr	r2, [r3, #16]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f042 0201 	orr.w	r2, r2, #1
 8007b84:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b8e:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007b98:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 fa44 	bl	800802c <LPTIM_WaitForFlag>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d101      	bne.n	8007bae <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e086      	b.n	8007cbc <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f000 fa6c 	bl	800808c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa2b 	bl	8008010 <HAL_LPTIM_GetState>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b03      	cmp	r3, #3
 8007bbe:	d101      	bne.n	8007bc4 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e07b      	b.n	8007cbc <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d004      	beq.n	8007bde <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bdc:	d103      	bne.n	8007be6 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f023 031e 	bic.w	r3, r3, #30
 8007be4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	695b      	ldr	r3, [r3, #20]
 8007bea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d005      	beq.n	8007bfe <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007bf8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4b30      	ldr	r3, [pc, #192]	; (8007cc4 <HAL_LPTIM_Init+0x188>)
 8007c02:	4013      	ands	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c0e:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007c14:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007c1a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007c20:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c22:	68fa      	ldr	r2, [r7, #12]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d107      	bne.n	8007c40 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d004      	beq.n	8007c52 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c50:	d107      	bne.n	8007c62 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	68fa      	ldr	r2, [r7, #12]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	695b      	ldr	r3, [r3, #20]
 8007c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d00a      	beq.n	8007c84 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c76:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007c7c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c7e:	68fa      	ldr	r2, [r7, #12]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <HAL_LPTIM_Init+0x18c>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d108      	bne.n	8007ca8 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	621a      	str	r2, [r3, #32]
 8007ca6:	e004      	b.n	8007cb2 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cb0:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	ff19f1fe 	.word	0xff19f1fe
 8007cc8:	40007c00 	.word	0x40007c00

08007ccc <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a3f      	ldr	r2, [pc, #252]	; (8007de4 <HAL_LPTIM_TimeOut_Start_IT+0x118>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d108      	bne.n	8007cfc <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8007cea:	4b3f      	ldr	r3, [pc, #252]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007cec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cf0:	4a3d      	ldr	r2, [pc, #244]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007cf2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cf6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007cfa:	e015      	b.n	8007d28 <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a3a      	ldr	r2, [pc, #232]	; (8007dec <HAL_LPTIM_TimeOut_Start_IT+0x120>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d108      	bne.n	8007d18 <HAL_LPTIM_TimeOut_Start_IT+0x4c>
 8007d06:	4b38      	ldr	r3, [pc, #224]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0c:	4a36      	ldr	r2, [pc, #216]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d0e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d16:	e007      	b.n	8007d28 <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007d18:	4b33      	ldr	r3, [pc, #204]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d1e:	4a32      	ldr	r2, [pc, #200]	; (8007de8 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	68da      	ldr	r2, [r3, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	691a      	ldr	r2, [r3, #16]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f042 0201 	orr.w	r2, r2, #1
 8007d46:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2210      	movs	r2, #16
 8007d4e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68ba      	ldr	r2, [r7, #8]
 8007d56:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007d58:	2110      	movs	r1, #16
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f966 	bl	800802c <LPTIM_WaitForFlag>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d101      	bne.n	8007d6a <HAL_LPTIM_TimeOut_Start_IT+0x9e>
  {
    return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e038      	b.n	8007ddc <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2208      	movs	r2, #8
 8007d70:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007d7a:	2108      	movs	r1, #8
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f000 f955 	bl	800802c <LPTIM_WaitForFlag>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d101      	bne.n	8007d8c <HAL_LPTIM_TimeOut_Start_IT+0xc0>
  {
    return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e027      	b.n	8007ddc <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f000 f97d 	bl	800808c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f93c 	bl	8008010 <HAL_LPTIM_GetState>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d101      	bne.n	8007da2 <HAL_LPTIM_TimeOut_Start_IT+0xd6>
  {
    return HAL_TIMEOUT;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e01c      	b.n	8007ddc <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	689a      	ldr	r2, [r3, #8]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f042 0201 	orr.w	r2, r2, #1
 8007db0:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691a      	ldr	r2, [r3, #16]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f042 0201 	orr.w	r2, r2, #1
 8007dc0:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	691a      	ldr	r2, [r3, #16]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0204 	orr.w	r2, r2, #4
 8007dd0:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	40007c00 	.word	0x40007c00
 8007de8:	58000800 	.word	0x58000800
 8007dec:	40009400 	.word	0x40009400

08007df0 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d10d      	bne.n	8007e22 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d106      	bne.n	8007e22 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7fa f8e9 	bl	8001ff4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d10d      	bne.n	8007e4c <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d106      	bne.n	8007e4c <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2202      	movs	r2, #2
 8007e44:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f89a 	bl	8007f80 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0304 	and.w	r3, r3, #4
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d10d      	bne.n	8007e76 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 0304 	and.w	r3, r3, #4
 8007e64:	2b04      	cmp	r3, #4
 8007e66:	d106      	bne.n	8007e76 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f88e 	bl	8007f92 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0308 	and.w	r3, r3, #8
 8007e80:	2b08      	cmp	r3, #8
 8007e82:	d10d      	bne.n	8007ea0 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b08      	cmp	r3, #8
 8007e90:	d106      	bne.n	8007ea0 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2208      	movs	r2, #8
 8007e98:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 f882 	bl	8007fa4 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f003 0310 	and.w	r3, r3, #16
 8007eaa:	2b10      	cmp	r3, #16
 8007eac:	d10d      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f003 0310 	and.w	r3, r3, #16
 8007eb8:	2b10      	cmp	r3, #16
 8007eba:	d106      	bne.n	8007eca <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2210      	movs	r2, #16
 8007ec2:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 f876 	bl	8007fb6 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0320 	and.w	r3, r3, #32
 8007ed4:	2b20      	cmp	r3, #32
 8007ed6:	d10d      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b20      	cmp	r3, #32
 8007ee4:	d106      	bne.n	8007ef4 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2220      	movs	r2, #32
 8007eec:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f86a 	bl	8007fc8 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d10d      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0c:	2b40      	cmp	r3, #64	; 0x40
 8007f0e:	d106      	bne.n	8007f1e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2240      	movs	r2, #64	; 0x40
 8007f16:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f000 f85e 	bl	8007fda <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f28:	2b80      	cmp	r3, #128	; 0x80
 8007f2a:	d10d      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b80      	cmp	r3, #128	; 0x80
 8007f38:	d106      	bne.n	8007f48 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	2280      	movs	r2, #128	; 0x80
 8007f40:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f852 	bl	8007fec <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f56:	d10f      	bne.n	8007f78 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f66:	d107      	bne.n	8007f78 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f70:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f843 	bl	8007ffe <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bc80      	pop	{r7}
 8007f90:	4770      	bx	lr

08007f92 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f92:	b480      	push	{r7}
 8007f94:	b083      	sub	sp, #12
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr

08007fb6 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fb6:	b480      	push	{r7}
 8007fb8:	b083      	sub	sp, #12
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007fbe:	bf00      	nop
 8007fc0:	370c      	adds	r7, #12
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bc80      	pop	{r7}
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr

08007fda <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fda:	b480      	push	{r7}
 8007fdc:	b083      	sub	sp, #12
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007fe2:	bf00      	nop
 8007fe4:	370c      	adds	r7, #12
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bc80      	pop	{r7}
 8007fea:	4770      	bx	lr

08007fec <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bc80      	pop	{r7}
 8007ffc:	4770      	bx	lr

08007ffe <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	bc80      	pop	{r7}
 800800e:	4770      	bx	lr

08008010 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800801e:	b2db      	uxtb	r3, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	bc80      	pop	{r7}
 8008028:	4770      	bx	lr
	...

0800802c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800803a:	4b12      	ldr	r3, [pc, #72]	; (8008084 <LPTIM_WaitForFlag+0x58>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a12      	ldr	r2, [pc, #72]	; (8008088 <LPTIM_WaitForFlag+0x5c>)
 8008040:	fba2 2303 	umull	r2, r3, r2, r3
 8008044:	0b9b      	lsrs	r3, r3, #14
 8008046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	3b01      	subs	r3, #1
 8008054:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681a      	ldr	r2, [r3, #0]
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	4013      	ands	r3, r2
 800806a:	683a      	ldr	r2, [r7, #0]
 800806c:	429a      	cmp	r2, r3
 800806e:	d002      	beq.n	8008076 <LPTIM_WaitForFlag+0x4a>
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d1ec      	bne.n	8008050 <LPTIM_WaitForFlag+0x24>

  return result;
 8008076:	7bfb      	ldrb	r3, [r7, #15]
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	bc80      	pop	{r7}
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	20000004 	.word	0x20000004
 8008088:	d1b71759 	.word	0xd1b71759

0800808c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b08e      	sub	sp, #56	; 0x38
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8008094:	2300      	movs	r3, #0
 8008096:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008098:	f3ef 8310 	mrs	r3, PRIMASK
 800809c:	613b      	str	r3, [r7, #16]
  return(result);
 800809e:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80080a0:	633b      	str	r3, [r7, #48]	; 0x30
 80080a2:	2301      	movs	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f383 8810 	msr	PRIMASK, r3
}
 80080ac:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a8f      	ldr	r2, [pc, #572]	; (80082f0 <LPTIM_Disable+0x264>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d015      	beq.n	80080e4 <LPTIM_Disable+0x58>
 80080b8:	4a8d      	ldr	r2, [pc, #564]	; (80082f0 <LPTIM_Disable+0x264>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d818      	bhi.n	80080f0 <LPTIM_Disable+0x64>
 80080be:	4a8d      	ldr	r2, [pc, #564]	; (80082f4 <LPTIM_Disable+0x268>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d003      	beq.n	80080cc <LPTIM_Disable+0x40>
 80080c4:	4a8c      	ldr	r2, [pc, #560]	; (80082f8 <LPTIM_Disable+0x26c>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d006      	beq.n	80080d8 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 80080ca:	e011      	b.n	80080f0 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080cc:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80080d0:	f7ff fcdb 	bl	8007a8a <LL_RCC_GetLPTIMClockSource>
 80080d4:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80080d6:	e00c      	b.n	80080f2 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080d8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80080dc:	f7ff fcd5 	bl	8007a8a <LL_RCC_GetLPTIMClockSource>
 80080e0:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80080e2:	e006      	b.n	80080f2 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80080e4:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80080e8:	f7ff fccf 	bl	8007a8a <LL_RCC_GetLPTIMClockSource>
 80080ec:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80080ee:	e000      	b.n	80080f2 <LPTIM_Disable+0x66>
      break;
 80080f0:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	695b      	ldr	r3, [r3, #20]
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008120:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a72      	ldr	r2, [pc, #456]	; (80082f0 <LPTIM_Disable+0x264>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d019      	beq.n	8008160 <LPTIM_Disable+0xd4>
 800812c:	4a70      	ldr	r2, [pc, #448]	; (80082f0 <LPTIM_Disable+0x264>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d81d      	bhi.n	800816e <LPTIM_Disable+0xe2>
 8008132:	4a70      	ldr	r2, [pc, #448]	; (80082f4 <LPTIM_Disable+0x268>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <LPTIM_Disable+0xb4>
 8008138:	4a6f      	ldr	r2, [pc, #444]	; (80082f8 <LPTIM_Disable+0x26c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d009      	beq.n	8008152 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 800813e:	e016      	b.n	800816e <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008140:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008144:	f7ff fcb3 	bl	8007aae <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008148:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800814c:	f7ff fcd1 	bl	8007af2 <LL_APB1_GRP1_ReleaseReset>
      break;
 8008150:	e00e      	b.n	8008170 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8008152:	2020      	movs	r0, #32
 8008154:	f7ff fcbc 	bl	8007ad0 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008158:	2020      	movs	r0, #32
 800815a:	f7ff fcdc 	bl	8007b16 <LL_APB1_GRP2_ReleaseReset>
      break;
 800815e:	e007      	b.n	8008170 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008160:	2040      	movs	r0, #64	; 0x40
 8008162:	f7ff fcb5 	bl	8007ad0 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008166:	2040      	movs	r0, #64	; 0x40
 8008168:	f7ff fcd5 	bl	8007b16 <LL_APB1_GRP2_ReleaseReset>
      break;
 800816c:	e000      	b.n	8008170 <LPTIM_Disable+0xe4>
      break;
 800816e:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <LPTIM_Disable+0xf8>
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d103      	bne.n	8008184 <LPTIM_Disable+0xf8>
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	2b00      	cmp	r3, #0
 8008180:	f000 8097 	beq.w	80082b2 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a59      	ldr	r2, [pc, #356]	; (80082f0 <LPTIM_Disable+0x264>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d013      	beq.n	80081b6 <LPTIM_Disable+0x12a>
 800818e:	4a58      	ldr	r2, [pc, #352]	; (80082f0 <LPTIM_Disable+0x264>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d815      	bhi.n	80081c0 <LPTIM_Disable+0x134>
 8008194:	4a57      	ldr	r2, [pc, #348]	; (80082f4 <LPTIM_Disable+0x268>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d003      	beq.n	80081a2 <LPTIM_Disable+0x116>
 800819a:	4a57      	ldr	r2, [pc, #348]	; (80082f8 <LPTIM_Disable+0x26c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d005      	beq.n	80081ac <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80081a0:	e00e      	b.n	80081c0 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80081a2:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80081a6:	f7ff fc57 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 80081aa:	e00a      	b.n	80081c2 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80081ac:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80081b0:	f7ff fc52 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 80081b4:	e005      	b.n	80081c2 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80081b6:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80081ba:	f7ff fc4d 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 80081be:	e000      	b.n	80081c2 <LPTIM_Disable+0x136>
        break;
 80081c0:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d01a      	beq.n	80081fe <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	691a      	ldr	r2, [r3, #16]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0201 	orr.w	r2, r2, #1
 80081d6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081de:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80081e0:	2108      	movs	r1, #8
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7ff ff22 	bl	800802c <LPTIM_WaitForFlag>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d103      	bne.n	80081f6 <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2203      	movs	r2, #3
 80081f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2208      	movs	r2, #8
 80081fc:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80081fe:	6a3b      	ldr	r3, [r7, #32]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d01a      	beq.n	800823a <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6a3a      	ldr	r2, [r7, #32]
 800821a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800821c:	2110      	movs	r1, #16
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f7ff ff04 	bl	800802c <LPTIM_WaitForFlag>
 8008224:	4603      	mov	r3, r0
 8008226:	2b03      	cmp	r3, #3
 8008228:	d103      	bne.n	8008232 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2203      	movs	r2, #3
 800822e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2210      	movs	r2, #16
 8008238:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01c      	beq.n	800827a <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	691a      	ldr	r2, [r3, #16]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8008258:	f44f 7180 	mov.w	r1, #256	; 0x100
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f7ff fee5 	bl	800802c <LPTIM_WaitForFlag>
 8008262:	4603      	mov	r3, r0
 8008264:	2b03      	cmp	r3, #3
 8008266:	d103      	bne.n	8008270 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2203      	movs	r2, #3
 800826c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008278:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1c      	ldr	r2, [pc, #112]	; (80082f0 <LPTIM_Disable+0x264>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d011      	beq.n	80082a8 <LPTIM_Disable+0x21c>
 8008284:	4a1a      	ldr	r2, [pc, #104]	; (80082f0 <LPTIM_Disable+0x264>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d812      	bhi.n	80082b0 <LPTIM_Disable+0x224>
 800828a:	4a1a      	ldr	r2, [pc, #104]	; (80082f4 <LPTIM_Disable+0x268>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d003      	beq.n	8008298 <LPTIM_Disable+0x20c>
 8008290:	4a19      	ldr	r2, [pc, #100]	; (80082f8 <LPTIM_Disable+0x26c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d004      	beq.n	80082a0 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 8008296:	e00b      	b.n	80082b0 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8008298:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800829a:	f7ff fbdd 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 800829e:	e008      	b.n	80082b2 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80082a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082a2:	f7ff fbd9 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 80082a6:	e004      	b.n	80082b2 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80082a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082aa:	f7ff fbd5 	bl	8007a58 <LL_RCC_SetLPTIMClockSource>
        break;
 80082ae:	e000      	b.n	80082b2 <LPTIM_Disable+0x226>
        break;
 80082b0:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	691a      	ldr	r2, [r3, #16]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f022 0201 	bic.w	r2, r2, #1
 80082c0:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082c8:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d0:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	69fa      	ldr	r2, [r7, #28]
 80082d8:	621a      	str	r2, [r3, #32]
 80082da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f383 8810 	msr	PRIMASK, r3
}
 80082e4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80082e6:	bf00      	nop
 80082e8:	3738      	adds	r7, #56	; 0x38
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	40009800 	.word	0x40009800
 80082f4:	40007c00 	.word	0x40007c00
 80082f8:	40009400 	.word	0x40009400

080082fc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008300:	4b04      	ldr	r3, [pc, #16]	; (8008314 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a03      	ldr	r2, [pc, #12]	; (8008314 <HAL_PWR_EnableBkUpAccess+0x18>)
 8008306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800830a:	6013      	str	r3, [r2, #0]
}
 800830c:	bf00      	nop
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr
 8008314:	58000400 	.word	0x58000400

08008318 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800832a:	4b13      	ldr	r3, [pc, #76]	; (8008378 <HAL_PWR_EnterSLEEPMode+0x60>)
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008332:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008336:	d10d      	bne.n	8008354 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008338:	f000 f83c 	bl	80083b4 <HAL_PWREx_DisableLowPowerRunMode>
 800833c:	4603      	mov	r3, r0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d008      	beq.n	8008354 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8008342:	e015      	b.n	8008370 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008350:	f000 f822 	bl	8008398 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <HAL_PWR_EnterSLEEPMode+0x64>)
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	4a08      	ldr	r2, [pc, #32]	; (800837c <HAL_PWR_EnterSLEEPMode+0x64>)
 800835a:	f023 0304 	bic.w	r3, r3, #4
 800835e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008360:	78fb      	ldrb	r3, [r7, #3]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d101      	bne.n	800836a <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008366:	bf30      	wfi
 8008368:	e002      	b.n	8008370 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800836a:	bf40      	sev
    __WFE();
 800836c:	bf20      	wfe
    __WFE();
 800836e:	bf20      	wfe
  }
}
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	58000400 	.word	0x58000400
 800837c:	e000ed00 	.word	0xe000ed00

08008380 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8008384:	4b03      	ldr	r3, [pc, #12]	; (8008394 <HAL_PWREx_GetVoltageRange+0x14>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800838c:	4618      	mov	r0, r3
 800838e:	46bd      	mov	sp, r7
 8008390:	bc80      	pop	{r7}
 8008392:	4770      	bx	lr
 8008394:	58000400 	.word	0x58000400

08008398 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800839c:	4b04      	ldr	r3, [pc, #16]	; (80083b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a03      	ldr	r2, [pc, #12]	; (80083b0 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80083a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083a6:	6013      	str	r3, [r2, #0]
}
 80083a8:	bf00      	nop
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bc80      	pop	{r7}
 80083ae:	4770      	bx	lr
 80083b0:	58000400 	.word	0x58000400

080083b4 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b083      	sub	sp, #12
 80083b8:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a15      	ldr	r2, [pc, #84]	; (8008414 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083c4:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80083c6:	4b14      	ldr	r3, [pc, #80]	; (8008418 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2232      	movs	r2, #50	; 0x32
 80083cc:	fb02 f303 	mul.w	r3, r2, r3
 80083d0:	4a12      	ldr	r2, [pc, #72]	; (800841c <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80083d2:	fba2 2303 	umull	r2, r3, r2, r3
 80083d6:	0c9b      	lsrs	r3, r3, #18
 80083d8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80083da:	e002      	b.n	80083e2 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3b01      	subs	r3, #1
 80083e0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80083e2:	4b0c      	ldr	r3, [pc, #48]	; (8008414 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ee:	d102      	bne.n	80083f6 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d1f2      	bne.n	80083dc <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80083f6:	4b07      	ldr	r3, [pc, #28]	; (8008414 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083f8:	695b      	ldr	r3, [r3, #20]
 80083fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80083fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008402:	d101      	bne.n	8008408 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8008404:	2303      	movs	r3, #3
 8008406:	e000      	b.n	800840a <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	370c      	adds	r7, #12
 800840e:	46bd      	mov	sp, r7
 8008410:	bc80      	pop	{r7}
 8008412:	4770      	bx	lr
 8008414:	58000400 	.word	0x58000400
 8008418:	20000004 	.word	0x20000004
 800841c:	431bde83 	.word	0x431bde83

08008420 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 800842a:	4b10      	ldr	r3, [pc, #64]	; (800846c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f023 0307 	bic.w	r3, r3, #7
 8008432:	4a0e      	ldr	r2, [pc, #56]	; (800846c <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008434:	f043 0302 	orr.w	r3, r3, #2
 8008438:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800843a:	4b0d      	ldr	r3, [pc, #52]	; (8008470 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	4a0c      	ldr	r2, [pc, #48]	; (8008470 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008440:	f043 0304 	orr.w	r3, r3, #4
 8008444:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8008446:	79fb      	ldrb	r3, [r7, #7]
 8008448:	2b01      	cmp	r3, #1
 800844a:	d101      	bne.n	8008450 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800844c:	bf30      	wfi
 800844e:	e002      	b.n	8008456 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008450:	bf40      	sev
    __WFE();
 8008452:	bf20      	wfe
    __WFE();
 8008454:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008456:	4b06      	ldr	r3, [pc, #24]	; (8008470 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	4a05      	ldr	r2, [pc, #20]	; (8008470 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800845c:	f023 0304 	bic.w	r3, r3, #4
 8008460:	6113      	str	r3, [r2, #16]
}
 8008462:	bf00      	nop
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	bc80      	pop	{r7}
 800846a:	4770      	bx	lr
 800846c:	58000400 	.word	0x58000400
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <LL_PWR_IsEnabledBkUpAccess>:
{
 8008474:	b480      	push	{r7}
 8008476:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008484:	d101      	bne.n	800848a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8008486:	2301      	movs	r3, #1
 8008488:	e000      	b.n	800848c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	46bd      	mov	sp, r7
 8008490:	bc80      	pop	{r7}
 8008492:	4770      	bx	lr
 8008494:	58000400 	.word	0x58000400

08008498 <LL_RCC_HSE_EnableTcxo>:
{
 8008498:	b480      	push	{r7}
 800849a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800849c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084aa:	6013      	str	r3, [r2, #0]
}
 80084ac:	bf00      	nop
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr

080084b4 <LL_RCC_HSE_DisableTcxo>:
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80084b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084c6:	6013      	str	r3, [r2, #0]
}
 80084c8:	bf00      	nop
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bc80      	pop	{r7}
 80084ce:	4770      	bx	lr

080084d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80084d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084e2:	d101      	bne.n	80084e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bc80      	pop	{r7}
 80084f0:	4770      	bx	lr

080084f2 <LL_RCC_HSE_Enable>:
{
 80084f2:	b480      	push	{r7}
 80084f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008504:	6013      	str	r3, [r2, #0]
}
 8008506:	bf00      	nop
 8008508:	46bd      	mov	sp, r7
 800850a:	bc80      	pop	{r7}
 800850c:	4770      	bx	lr

0800850e <LL_RCC_HSE_Disable>:
{
 800850e:	b480      	push	{r7}
 8008510:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800851c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008520:	6013      	str	r3, [r2, #0]
}
 8008522:	bf00      	nop
 8008524:	46bd      	mov	sp, r7
 8008526:	bc80      	pop	{r7}
 8008528:	4770      	bx	lr

0800852a <LL_RCC_HSE_IsReady>:
{
 800852a:	b480      	push	{r7}
 800852c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800852e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800853c:	d101      	bne.n	8008542 <LL_RCC_HSE_IsReady+0x18>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <LL_RCC_HSE_IsReady+0x1a>
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	bc80      	pop	{r7}
 800854a:	4770      	bx	lr

0800854c <LL_RCC_HSI_Enable>:
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800855a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855e:	6013      	str	r3, [r2, #0]
}
 8008560:	bf00      	nop
 8008562:	46bd      	mov	sp, r7
 8008564:	bc80      	pop	{r7}
 8008566:	4770      	bx	lr

08008568 <LL_RCC_HSI_Disable>:
{
 8008568:	b480      	push	{r7}
 800856a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800856c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800857a:	6013      	str	r3, [r2, #0]
}
 800857c:	bf00      	nop
 800857e:	46bd      	mov	sp, r7
 8008580:	bc80      	pop	{r7}
 8008582:	4770      	bx	lr

08008584 <LL_RCC_HSI_IsReady>:
{
 8008584:	b480      	push	{r7}
 8008586:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008596:	d101      	bne.n	800859c <LL_RCC_HSI_IsReady+0x18>
 8008598:	2301      	movs	r3, #1
 800859a:	e000      	b.n	800859e <LL_RCC_HSI_IsReady+0x1a>
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bc80      	pop	{r7}
 80085a4:	4770      	bx	lr

080085a6 <LL_RCC_HSI_SetCalibTrimming>:
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80085ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	061b      	lsls	r3, r3, #24
 80085bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085c0:	4313      	orrs	r3, r2
 80085c2:	604b      	str	r3, [r1, #4]
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bc80      	pop	{r7}
 80085cc:	4770      	bx	lr

080085ce <LL_RCC_LSE_IsReady>:
{
 80085ce:	b480      	push	{r7}
 80085d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	2b02      	cmp	r3, #2
 80085e0:	d101      	bne.n	80085e6 <LL_RCC_LSE_IsReady+0x18>
 80085e2:	2301      	movs	r3, #1
 80085e4:	e000      	b.n	80085e8 <LL_RCC_LSE_IsReady+0x1a>
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bc80      	pop	{r7}
 80085ee:	4770      	bx	lr

080085f0 <LL_RCC_LSI_Enable>:
{
 80085f0:	b480      	push	{r7}
 80085f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80085f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008600:	f043 0301 	orr.w	r3, r3, #1
 8008604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008608:	bf00      	nop
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <LL_RCC_LSI_Disable>:
{
 8008610:	b480      	push	{r7}
 8008612:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8008614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800861c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008628:	bf00      	nop
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <LL_RCC_LSI_IsReady>:
{
 8008630:	b480      	push	{r7}
 8008632:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8008634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800863c:	f003 0302 	and.w	r3, r3, #2
 8008640:	2b02      	cmp	r3, #2
 8008642:	d101      	bne.n	8008648 <LL_RCC_LSI_IsReady+0x18>
 8008644:	2301      	movs	r3, #1
 8008646:	e000      	b.n	800864a <LL_RCC_LSI_IsReady+0x1a>
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr

08008652 <LL_RCC_MSI_Enable>:
{
 8008652:	b480      	push	{r7}
 8008654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8008656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008660:	f043 0301 	orr.w	r3, r3, #1
 8008664:	6013      	str	r3, [r2, #0]
}
 8008666:	bf00      	nop
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <LL_RCC_MSI_Disable>:
{
 800866e:	b480      	push	{r7}
 8008670:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800867c:	f023 0301 	bic.w	r3, r3, #1
 8008680:	6013      	str	r3, [r2, #0]
}
 8008682:	bf00      	nop
 8008684:	46bd      	mov	sp, r7
 8008686:	bc80      	pop	{r7}
 8008688:	4770      	bx	lr

0800868a <LL_RCC_MSI_IsReady>:
{
 800868a:	b480      	push	{r7}
 800868c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800868e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b02      	cmp	r3, #2
 800869a:	d101      	bne.n	80086a0 <LL_RCC_MSI_IsReady+0x16>
 800869c:	2301      	movs	r3, #1
 800869e:	e000      	b.n	80086a2 <LL_RCC_MSI_IsReady+0x18>
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bc80      	pop	{r7}
 80086a8:	4770      	bx	lr

080086aa <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80086aa:	b480      	push	{r7}
 80086ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80086ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f003 0308 	and.w	r3, r3, #8
 80086b8:	2b08      	cmp	r3, #8
 80086ba:	d101      	bne.n	80086c0 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80086bc:	2301      	movs	r3, #1
 80086be:	e000      	b.n	80086c2 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bc80      	pop	{r7}
 80086c8:	4770      	bx	lr

080086ca <LL_RCC_MSI_GetRange>:
{
 80086ca:	b480      	push	{r7}
 80086cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80086ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80086e0:	b480      	push	{r7}
 80086e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80086e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80086ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80086f8:	b480      	push	{r7}
 80086fa:	b083      	sub	sp, #12
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	021b      	lsls	r3, r3, #8
 800870e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008712:	4313      	orrs	r3, r2
 8008714:	604b      	str	r3, [r1, #4]
}
 8008716:	bf00      	nop
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	bc80      	pop	{r7}
 800871e:	4770      	bx	lr

08008720 <LL_RCC_SetSysClkSource>:
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f023 0203 	bic.w	r2, r3, #3
 8008732:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4313      	orrs	r3, r2
 800873a:	608b      	str	r3, [r1, #8]
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	bc80      	pop	{r7}
 8008744:	4770      	bx	lr

08008746 <LL_RCC_GetSysClkSource>:
{
 8008746:	b480      	push	{r7}
 8008748:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800874a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 030c 	and.w	r3, r3, #12
}
 8008754:	4618      	mov	r0, r3
 8008756:	46bd      	mov	sp, r7
 8008758:	bc80      	pop	{r7}
 800875a:	4770      	bx	lr

0800875c <LL_RCC_SetAHBPrescaler>:
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800876e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4313      	orrs	r3, r2
 8008776:	608b      	str	r3, [r1, #8]
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bc80      	pop	{r7}
 8008780:	4770      	bx	lr

08008782 <LL_RCC_SetAHB3Prescaler>:
{
 8008782:	b480      	push	{r7}
 8008784:	b083      	sub	sp, #12
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800878a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800878e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008792:	f023 020f 	bic.w	r2, r3, #15
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	091b      	lsrs	r3, r3, #4
 800879a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	bc80      	pop	{r7}
 80087ac:	4770      	bx	lr

080087ae <LL_RCC_SetAPB1Prescaler>:
{
 80087ae:	b480      	push	{r7}
 80087b0:	b083      	sub	sp, #12
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80087b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	608b      	str	r3, [r1, #8]
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <LL_RCC_SetAPB2Prescaler>:
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80087dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087e6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	608b      	str	r3, [r1, #8]
}
 80087f0:	bf00      	nop
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bc80      	pop	{r7}
 80087f8:	4770      	bx	lr

080087fa <LL_RCC_GetAHBPrescaler>:
{
 80087fa:	b480      	push	{r7}
 80087fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80087fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008808:	4618      	mov	r0, r3
 800880a:	46bd      	mov	sp, r7
 800880c:	bc80      	pop	{r7}
 800880e:	4770      	bx	lr

08008810 <LL_RCC_GetAHB3Prescaler>:
{
 8008810:	b480      	push	{r7}
 8008812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8008814:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008818:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008822:	4618      	mov	r0, r3
 8008824:	46bd      	mov	sp, r7
 8008826:	bc80      	pop	{r7}
 8008828:	4770      	bx	lr

0800882a <LL_RCC_GetAPB1Prescaler>:
{
 800882a:	b480      	push	{r7}
 800882c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800882e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008832:	689b      	ldr	r3, [r3, #8]
 8008834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008838:	4618      	mov	r0, r3
 800883a:	46bd      	mov	sp, r7
 800883c:	bc80      	pop	{r7}
 800883e:	4770      	bx	lr

08008840 <LL_RCC_GetAPB2Prescaler>:
{
 8008840:	b480      	push	{r7}
 8008842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800884e:	4618      	mov	r0, r3
 8008850:	46bd      	mov	sp, r7
 8008852:	bc80      	pop	{r7}
 8008854:	4770      	bx	lr

08008856 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008856:	b480      	push	{r7}
 8008858:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800885a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008868:	6013      	str	r3, [r2, #0]
}
 800886a:	bf00      	nop
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr

08008872 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008872:	b480      	push	{r7}
 8008874:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008884:	6013      	str	r3, [r2, #0]
}
 8008886:	bf00      	nop
 8008888:	46bd      	mov	sp, r7
 800888a:	bc80      	pop	{r7}
 800888c:	4770      	bx	lr

0800888e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800888e:	b480      	push	{r7}
 8008890:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088a0:	d101      	bne.n	80088a6 <LL_RCC_PLL_IsReady+0x18>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <LL_RCC_PLL_IsReady+0x1a>
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc80      	pop	{r7}
 80088ae:	4770      	bx	lr

080088b0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80088b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	0a1b      	lsrs	r3, r3, #8
 80088bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80088cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	46bd      	mov	sp, r7
 80088da:	bc80      	pop	{r7}
 80088dc:	4770      	bx	lr

080088de <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80088de:	b480      	push	{r7}
 80088e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80088e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bc80      	pop	{r7}
 80088f2:	4770      	bx	lr

080088f4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80088f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	f003 0303 	and.w	r3, r3, #3
}
 8008902:	4618      	mov	r0, r3
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr

0800890a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800890a:	b480      	push	{r7}
 800890c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800890e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800891c:	d101      	bne.n	8008922 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800891e:	2301      	movs	r3, #1
 8008920:	e000      	b.n	8008924 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	46bd      	mov	sp, r7
 8008928:	bc80      	pop	{r7}
 800892a:	4770      	bx	lr

0800892c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008934:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800893c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008940:	d101      	bne.n	8008946 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008942:	2301      	movs	r3, #1
 8008944:	e000      	b.n	8008948 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	46bd      	mov	sp, r7
 800894c:	bc80      	pop	{r7}
 800894e:	4770      	bx	lr

08008950 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008950:	b480      	push	{r7}
 8008952:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008954:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800895e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008962:	d101      	bne.n	8008968 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008964:	2301      	movs	r3, #1
 8008966:	e000      	b.n	800896a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	46bd      	mov	sp, r7
 800896e:	bc80      	pop	{r7}
 8008970:	4770      	bx	lr

08008972 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008972:	b480      	push	{r7}
 8008974:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008980:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008984:	d101      	bne.n	800898a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008986:	2301      	movs	r3, #1
 8008988:	e000      	b.n	800898c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr

08008994 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e36f      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089a6:	f7ff fece 	bl	8008746 <LL_RCC_GetSysClkSource>
 80089aa:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089ac:	f7ff ffa2 	bl	80088f4 <LL_RCC_PLL_GetMainSource>
 80089b0:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0320 	and.w	r3, r3, #32
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f000 80c4 	beq.w	8008b48 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80089c0:	69fb      	ldr	r3, [r7, #28]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d005      	beq.n	80089d2 <HAL_RCC_OscConfig+0x3e>
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	2b0c      	cmp	r3, #12
 80089ca:	d176      	bne.n	8008aba <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d173      	bne.n	8008aba <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80089da:	2301      	movs	r3, #1
 80089dc:	e353      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0308 	and.w	r3, r3, #8
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <HAL_RCC_OscConfig+0x68>
 80089f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089fa:	e006      	b.n	8008a0a <HAL_RCC_OscConfig+0x76>
 80089fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a04:	091b      	lsrs	r3, r3, #4
 8008a06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d222      	bcs.n	8008a54 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a12:	4618      	mov	r0, r3
 8008a14:	f000 fd3c 	bl	8009490 <RCC_SetFlashLatencyFromMSIRange>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e331      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a2c:	f043 0308 	orr.w	r3, r3, #8
 8008a30:	6013      	str	r3, [r2, #0]
 8008a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a44:	4313      	orrs	r3, r2
 8008a46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f7ff fe53 	bl	80086f8 <LL_RCC_MSI_SetCalibTrimming>
 8008a52:	e021      	b.n	8008a98 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a5e:	f043 0308 	orr.w	r3, r3, #8
 8008a62:	6013      	str	r3, [r2, #0]
 8008a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a76:	4313      	orrs	r3, r2
 8008a78:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe3a 	bl	80086f8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f000 fd01 	bl	8009490 <RCC_SetFlashLatencyFromMSIRange>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	e2f6      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008a98:	f000 fcc2 	bl	8009420 <HAL_RCC_GetHCLKFreq>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4aa7      	ldr	r2, [pc, #668]	; (8008d3c <HAL_RCC_OscConfig+0x3a8>)
 8008aa0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8008aa2:	4ba7      	ldr	r3, [pc, #668]	; (8008d40 <HAL_RCC_OscConfig+0x3ac>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7f9 ffdc 	bl	8002a64 <HAL_InitTick>
 8008aac:	4603      	mov	r3, r0
 8008aae:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008ab0:	7cfb      	ldrb	r3, [r7, #19]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d047      	beq.n	8008b46 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8008ab6:	7cfb      	ldrb	r3, [r7, #19]
 8008ab8:	e2e5      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d02c      	beq.n	8008b1c <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008ac2:	f7ff fdc6 	bl	8008652 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ac6:	f7f9 ffd7 	bl	8002a78 <HAL_GetTick>
 8008aca:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008acc:	e008      	b.n	8008ae0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ace:	f7f9 ffd3 	bl	8002a78 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d901      	bls.n	8008ae0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e2d2      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008ae0:	f7ff fdd3 	bl	800868a <LL_RCC_MSI_IsReady>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d0f1      	beq.n	8008ace <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008af4:	f043 0308 	orr.w	r3, r3, #8
 8008af8:	6013      	str	r3, [r2, #0]
 8008afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fdef 	bl	80086f8 <LL_RCC_MSI_SetCalibTrimming>
 8008b1a:	e015      	b.n	8008b48 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008b1c:	f7ff fda7 	bl	800866e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008b20:	f7f9 ffaa 	bl	8002a78 <HAL_GetTick>
 8008b24:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b28:	f7f9 ffa6 	bl	8002a78 <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e2a5      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008b3a:	f7ff fda6 	bl	800868a <LL_RCC_MSI_IsReady>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1f1      	bne.n	8008b28 <HAL_RCC_OscConfig+0x194>
 8008b44:	e000      	b.n	8008b48 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008b46:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f003 0301 	and.w	r3, r3, #1
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d058      	beq.n	8008c06 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	2b08      	cmp	r3, #8
 8008b58:	d005      	beq.n	8008b66 <HAL_RCC_OscConfig+0x1d2>
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b0c      	cmp	r3, #12
 8008b5e:	d108      	bne.n	8008b72 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	2b03      	cmp	r3, #3
 8008b64:	d105      	bne.n	8008b72 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d14b      	bne.n	8008c06 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e289      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b84:	4313      	orrs	r3, r2
 8008b86:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b90:	d102      	bne.n	8008b98 <HAL_RCC_OscConfig+0x204>
 8008b92:	f7ff fcae 	bl	80084f2 <LL_RCC_HSE_Enable>
 8008b96:	e00d      	b.n	8008bb4 <HAL_RCC_OscConfig+0x220>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008ba0:	d104      	bne.n	8008bac <HAL_RCC_OscConfig+0x218>
 8008ba2:	f7ff fc79 	bl	8008498 <LL_RCC_HSE_EnableTcxo>
 8008ba6:	f7ff fca4 	bl	80084f2 <LL_RCC_HSE_Enable>
 8008baa:	e003      	b.n	8008bb4 <HAL_RCC_OscConfig+0x220>
 8008bac:	f7ff fcaf 	bl	800850e <LL_RCC_HSE_Disable>
 8008bb0:	f7ff fc80 	bl	80084b4 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d012      	beq.n	8008be2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bbc:	f7f9 ff5c 	bl	8002a78 <HAL_GetTick>
 8008bc0:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bc4:	f7f9 ff58 	bl	8002a78 <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b64      	cmp	r3, #100	; 0x64
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e257      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008bd6:	f7ff fca8 	bl	800852a <LL_RCC_HSE_IsReady>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0f1      	beq.n	8008bc4 <HAL_RCC_OscConfig+0x230>
 8008be0:	e011      	b.n	8008c06 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008be2:	f7f9 ff49 	bl	8002a78 <HAL_GetTick>
 8008be6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008be8:	e008      	b.n	8008bfc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bea:	f7f9 ff45 	bl	8002a78 <HAL_GetTick>
 8008bee:	4602      	mov	r2, r0
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	2b64      	cmp	r3, #100	; 0x64
 8008bf6:	d901      	bls.n	8008bfc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e244      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008bfc:	f7ff fc95 	bl	800852a <LL_RCC_HSE_IsReady>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d1f1      	bne.n	8008bea <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d046      	beq.n	8008ca0 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	2b04      	cmp	r3, #4
 8008c16:	d005      	beq.n	8008c24 <HAL_RCC_OscConfig+0x290>
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	2b0c      	cmp	r3, #12
 8008c1c:	d10e      	bne.n	8008c3c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d10b      	bne.n	8008c3c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d101      	bne.n	8008c30 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e22a      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	695b      	ldr	r3, [r3, #20]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7ff fcb6 	bl	80085a6 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c3a:	e031      	b.n	8008ca0 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d019      	beq.n	8008c78 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c44:	f7ff fc82 	bl	800854c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c48:	f7f9 ff16 	bl	8002a78 <HAL_GetTick>
 8008c4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c50:	f7f9 ff12 	bl	8002a78 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e211      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c62:	f7ff fc8f 	bl	8008584 <LL_RCC_HSI_IsReady>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d0f1      	beq.n	8008c50 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fc98 	bl	80085a6 <LL_RCC_HSI_SetCalibTrimming>
 8008c76:	e013      	b.n	8008ca0 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c78:	f7ff fc76 	bl	8008568 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c7c:	f7f9 fefc 	bl	8002a78 <HAL_GetTick>
 8008c80:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008c82:	e008      	b.n	8008c96 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c84:	f7f9 fef8 	bl	8002a78 <HAL_GetTick>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	1ad3      	subs	r3, r2, r3
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d901      	bls.n	8008c96 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e1f7      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008c96:	f7ff fc75 	bl	8008584 <LL_RCC_HSI_IsReady>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1f1      	bne.n	8008c84 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d06e      	beq.n	8008d8a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d056      	beq.n	8008d62 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cbc:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	69da      	ldr	r2, [r3, #28]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f003 0310 	and.w	r3, r3, #16
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d031      	beq.n	8008d30 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d006      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d101      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e1d0      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d013      	beq.n	8008d16 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8008cee:	f7ff fc8f 	bl	8008610 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008cf2:	f7f9 fec1 	bl	8002a78 <HAL_GetTick>
 8008cf6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008cf8:	e008      	b.n	8008d0c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008cfa:	f7f9 febd 	bl	8002a78 <HAL_GetTick>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	2b11      	cmp	r3, #17
 8008d06:	d901      	bls.n	8008d0c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	e1bc      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8008d0c:	f7ff fc90 	bl	8008630 <LL_RCC_LSI_IsReady>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1f1      	bne.n	8008cfa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008d16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d1e:	f023 0210 	bic.w	r2, r3, #16
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
 8008d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d30:	f7ff fc5e 	bl	80085f0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d34:	f7f9 fea0 	bl	8002a78 <HAL_GetTick>
 8008d38:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008d3a:	e00c      	b.n	8008d56 <HAL_RCC_OscConfig+0x3c2>
 8008d3c:	20000004 	.word	0x20000004
 8008d40:	2000000c 	.word	0x2000000c
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d44:	f7f9 fe98 	bl	8002a78 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	2b11      	cmp	r3, #17
 8008d50:	d901      	bls.n	8008d56 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e197      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008d56:	f7ff fc6b 	bl	8008630 <LL_RCC_LSI_IsReady>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0f1      	beq.n	8008d44 <HAL_RCC_OscConfig+0x3b0>
 8008d60:	e013      	b.n	8008d8a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d62:	f7ff fc55 	bl	8008610 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d66:	f7f9 fe87 	bl	8002a78 <HAL_GetTick>
 8008d6a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d6e:	f7f9 fe83 	bl	8002a78 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b11      	cmp	r3, #17
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e182      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008d80:	f7ff fc56 	bl	8008630 <LL_RCC_LSI_IsReady>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f1      	bne.n	8008d6e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	f000 80d8 	beq.w	8008f48 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008d98:	f7ff fb6c 	bl	8008474 <LL_PWR_IsEnabledBkUpAccess>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d113      	bne.n	8008dca <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008da2:	f7ff faab 	bl	80082fc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008da6:	f7f9 fe67 	bl	8002a78 <HAL_GetTick>
 8008daa:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008dac:	e008      	b.n	8008dc0 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dae:	f7f9 fe63 	bl	8002a78 <HAL_GetTick>
 8008db2:	4602      	mov	r2, r0
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	1ad3      	subs	r3, r2, r3
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d901      	bls.n	8008dc0 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e162      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008dc0:	f7ff fb58 	bl	8008474 <LL_PWR_IsEnabledBkUpAccess>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d0f1      	beq.n	8008dae <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d07b      	beq.n	8008eca <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	68db      	ldr	r3, [r3, #12]
 8008dd6:	2b85      	cmp	r3, #133	; 0x85
 8008dd8:	d003      	beq.n	8008de2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	68db      	ldr	r3, [r3, #12]
 8008dde:	2b05      	cmp	r3, #5
 8008de0:	d109      	bne.n	8008df6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008dee:	f043 0304 	orr.w	r3, r3, #4
 8008df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008df6:	f7f9 fe3f 	bl	8002a78 <HAL_GetTick>
 8008dfa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e08:	f043 0301 	orr.w	r3, r3, #1
 8008e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e10:	e00a      	b.n	8008e28 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e12:	f7f9 fe31 	bl	8002a78 <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d901      	bls.n	8008e28 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008e24:	2303      	movs	r3, #3
 8008e26:	e12e      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e28:	f7ff fbd1 	bl	80085ce <LL_RCC_LSE_IsReady>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d0ef      	beq.n	8008e12 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	2b81      	cmp	r3, #129	; 0x81
 8008e38:	d003      	beq.n	8008e42 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	2b85      	cmp	r3, #133	; 0x85
 8008e40:	d121      	bne.n	8008e86 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e42:	f7f9 fe19 	bl	8002a78 <HAL_GetTick>
 8008e46:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008e5c:	e00a      	b.n	8008e74 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e5e:	f7f9 fe0b 	bl	8002a78 <HAL_GetTick>
 8008e62:	4602      	mov	r2, r0
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	1ad3      	subs	r3, r2, r3
 8008e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d901      	bls.n	8008e74 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008e70:	2303      	movs	r3, #3
 8008e72:	e108      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d0ec      	beq.n	8008e5e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e84:	e060      	b.n	8008f48 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e86:	f7f9 fdf7 	bl	8002a78 <HAL_GetTick>
 8008e8a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ea0:	e00a      	b.n	8008eb8 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ea2:	f7f9 fde9 	bl	8002a78 <HAL_GetTick>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	1ad3      	subs	r3, r2, r3
 8008eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d901      	bls.n	8008eb8 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e0e6      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1ec      	bne.n	8008ea2 <HAL_RCC_OscConfig+0x50e>
 8008ec8:	e03e      	b.n	8008f48 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008eca:	f7f9 fdd5 	bl	8002a78 <HAL_GetTick>
 8008ece:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008edc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ee4:	e00a      	b.n	8008efc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ee6:	f7f9 fdc7 	bl	8002a78 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d901      	bls.n	8008efc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	e0c4      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1ec      	bne.n	8008ee6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f0c:	f7f9 fdb4 	bl	8002a78 <HAL_GetTick>
 8008f10:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f1e:	f023 0301 	bic.w	r3, r3, #1
 8008f22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f26:	e00a      	b.n	8008f3e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f28:	f7f9 fda6 	bl	8002a78 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e0a3      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f3e:	f7ff fb46 	bl	80085ce <LL_RCC_LSE_IsReady>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1ef      	bne.n	8008f28 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 8099 	beq.w	8009084 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	2b0c      	cmp	r3, #12
 8008f56:	d06c      	beq.n	8009032 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f5c:	2b02      	cmp	r3, #2
 8008f5e:	d14b      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f60:	f7ff fc87 	bl	8008872 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f64:	f7f9 fd88 	bl	8002a78 <HAL_GetTick>
 8008f68:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f6c:	f7f9 fd84 	bl	8002a78 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e083      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f7e:	f7ff fc86 	bl	800888e <LL_RCC_PLL_IsReady>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1f1      	bne.n	8008f6c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	4b40      	ldr	r3, [pc, #256]	; (8009090 <HAL_RCC_OscConfig+0x6fc>)
 8008f90:	4013      	ands	r3, r2
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f9a:	4311      	orrs	r1, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fa0:	0212      	lsls	r2, r2, #8
 8008fa2:	4311      	orrs	r1, r2
 8008fa4:	687a      	ldr	r2, [r7, #4]
 8008fa6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fa8:	4311      	orrs	r1, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fae:	4311      	orrs	r1, r2
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008fb4:	430a      	orrs	r2, r1
 8008fb6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fbe:	f7ff fc4a 	bl	8008856 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fd0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd2:	f7f9 fd51 	bl	8002a78 <HAL_GetTick>
 8008fd6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fda:	f7f9 fd4d 	bl	8002a78 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b0a      	cmp	r3, #10
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e04c      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8008fec:	f7ff fc4f 	bl	800888e <LL_RCC_PLL_IsReady>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0f1      	beq.n	8008fda <HAL_RCC_OscConfig+0x646>
 8008ff6:	e045      	b.n	8009084 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff8:	f7ff fc3b 	bl	8008872 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffc:	f7f9 fd3c 	bl	8002a78 <HAL_GetTick>
 8009000:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009004:	f7f9 fd38 	bl	8002a78 <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b0a      	cmp	r3, #10
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e037      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8009016:	f7ff fc3a 	bl	800888e <LL_RCC_PLL_IsReady>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f1      	bne.n	8009004 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009024:	68da      	ldr	r2, [r3, #12]
 8009026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800902a:	4b1a      	ldr	r3, [pc, #104]	; (8009094 <HAL_RCC_OscConfig+0x700>)
 800902c:	4013      	ands	r3, r2
 800902e:	60cb      	str	r3, [r1, #12]
 8009030:	e028      	b.n	8009084 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e023      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	f003 0203 	and.w	r2, r3, #3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009050:	429a      	cmp	r2, r3
 8009052:	d115      	bne.n	8009080 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8009054:	69bb      	ldr	r3, [r7, #24]
 8009056:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800905e:	429a      	cmp	r2, r3
 8009060:	d10e      	bne.n	8009080 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8009062:	69bb      	ldr	r3, [r7, #24]
 8009064:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800906c:	021b      	lsls	r3, r3, #8
 800906e:	429a      	cmp	r2, r3
 8009070:	d106      	bne.n	8009080 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8009072:	69bb      	ldr	r3, [r7, #24]
 8009074:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907c:	429a      	cmp	r2, r3
 800907e:	d001      	beq.n	8009084 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	e000      	b.n	8009086 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3720      	adds	r7, #32
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	11c1808c 	.word	0x11c1808c
 8009094:	eefefffc 	.word	0xeefefffc

08009098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e10f      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090ac:	4b89      	ldr	r3, [pc, #548]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d91b      	bls.n	80090f2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090ba:	4b86      	ldr	r3, [pc, #536]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f023 0207 	bic.w	r2, r3, #7
 80090c2:	4984      	ldr	r1, [pc, #528]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090ca:	f7f9 fcd5 	bl	8002a78 <HAL_GetTick>
 80090ce:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090d0:	e008      	b.n	80090e4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090d2:	f7f9 fcd1 	bl	8002a78 <HAL_GetTick>
 80090d6:	4602      	mov	r2, r0
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	1ad3      	subs	r3, r2, r3
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d901      	bls.n	80090e4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e0f3      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e4:	4b7b      	ldr	r3, [pc, #492]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f003 0307 	and.w	r3, r3, #7
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d1ef      	bne.n	80090d2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f003 0302 	and.w	r3, r3, #2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d016      	beq.n	800912c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	4618      	mov	r0, r3
 8009104:	f7ff fb2a 	bl	800875c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009108:	f7f9 fcb6 	bl	8002a78 <HAL_GetTick>
 800910c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800910e:	e008      	b.n	8009122 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009110:	f7f9 fcb2 	bl	8002a78 <HAL_GetTick>
 8009114:	4602      	mov	r2, r0
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	1ad3      	subs	r3, r2, r3
 800911a:	2b02      	cmp	r3, #2
 800911c:	d901      	bls.n	8009122 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800911e:	2303      	movs	r3, #3
 8009120:	e0d4      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009122:	f7ff fbf2 	bl	800890a <LL_RCC_IsActiveFlag_HPRE>
 8009126:	4603      	mov	r3, r0
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f1      	beq.n	8009110 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d016      	beq.n	8009166 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	4618      	mov	r0, r3
 800913e:	f7ff fb20 	bl	8008782 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009142:	f7f9 fc99 	bl	8002a78 <HAL_GetTick>
 8009146:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009148:	e008      	b.n	800915c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800914a:	f7f9 fc95 	bl	8002a78 <HAL_GetTick>
 800914e:	4602      	mov	r2, r0
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	2b02      	cmp	r3, #2
 8009156:	d901      	bls.n	800915c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009158:	2303      	movs	r3, #3
 800915a:	e0b7      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800915c:	f7ff fbe6 	bl	800892c <LL_RCC_IsActiveFlag_SHDHPRE>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d0f1      	beq.n	800914a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f003 0304 	and.w	r3, r3, #4
 800916e:	2b00      	cmp	r3, #0
 8009170:	d016      	beq.n	80091a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fb19 	bl	80087ae <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800917c:	f7f9 fc7c 	bl	8002a78 <HAL_GetTick>
 8009180:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009182:	e008      	b.n	8009196 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009184:	f7f9 fc78 	bl	8002a78 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e09a      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8009196:	f7ff fbdb 	bl	8008950 <LL_RCC_IsActiveFlag_PPRE1>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f1      	beq.n	8009184 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0308 	and.w	r3, r3, #8
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d017      	beq.n	80091dc <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7ff fb0e 	bl	80087d4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80091b8:	f7f9 fc5e 	bl	8002a78 <HAL_GetTick>
 80091bc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80091c0:	f7f9 fc5a 	bl	8002a78 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e07c      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80091d2:	f7ff fbce 	bl	8008972 <LL_RCC_IsActiveFlag_PPRE2>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d0f1      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d043      	beq.n	8009270 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d106      	bne.n	80091fe <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80091f0:	f7ff f99b 	bl	800852a <LL_RCC_HSE_IsReady>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d11e      	bne.n	8009238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	e066      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	2b03      	cmp	r3, #3
 8009204:	d106      	bne.n	8009214 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8009206:	f7ff fb42 	bl	800888e <LL_RCC_PLL_IsReady>
 800920a:	4603      	mov	r3, r0
 800920c:	2b00      	cmp	r3, #0
 800920e:	d113      	bne.n	8009238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e05b      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800921c:	f7ff fa35 	bl	800868a <LL_RCC_MSI_IsReady>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d108      	bne.n	8009238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e050      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800922a:	f7ff f9ab 	bl	8008584 <LL_RCC_HSI_IsReady>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d101      	bne.n	8009238 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009234:	2301      	movs	r3, #1
 8009236:	e049      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	4618      	mov	r0, r3
 800923e:	f7ff fa6f 	bl	8008720 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009242:	f7f9 fc19 	bl	8002a78 <HAL_GetTick>
 8009246:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009248:	e00a      	b.n	8009260 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800924a:	f7f9 fc15 	bl	8002a78 <HAL_GetTick>
 800924e:	4602      	mov	r2, r0
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	1ad3      	subs	r3, r2, r3
 8009254:	f241 3288 	movw	r2, #5000	; 0x1388
 8009258:	4293      	cmp	r3, r2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e035      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009260:	f7ff fa71 	bl	8008746 <LL_RCC_GetSysClkSource>
 8009264:	4602      	mov	r2, r0
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	429a      	cmp	r2, r3
 800926e:	d1ec      	bne.n	800924a <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009270:	4b18      	ldr	r3, [pc, #96]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d21b      	bcs.n	80092b6 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800927e:	4b15      	ldr	r3, [pc, #84]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f023 0207 	bic.w	r2, r3, #7
 8009286:	4913      	ldr	r1, [pc, #76]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	4313      	orrs	r3, r2
 800928c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800928e:	f7f9 fbf3 	bl	8002a78 <HAL_GetTick>
 8009292:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009294:	e008      	b.n	80092a8 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009296:	f7f9 fbef 	bl	8002a78 <HAL_GetTick>
 800929a:	4602      	mov	r2, r0
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	1ad3      	subs	r3, r2, r3
 80092a0:	2b02      	cmp	r3, #2
 80092a2:	d901      	bls.n	80092a8 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80092a4:	2303      	movs	r3, #3
 80092a6:	e011      	b.n	80092cc <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a8:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <HAL_RCC_ClockConfig+0x23c>)
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f003 0307 	and.w	r3, r3, #7
 80092b0:	683a      	ldr	r2, [r7, #0]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d1ef      	bne.n	8009296 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80092b6:	f000 f8b3 	bl	8009420 <HAL_RCC_GetHCLKFreq>
 80092ba:	4603      	mov	r3, r0
 80092bc:	4a06      	ldr	r2, [pc, #24]	; (80092d8 <HAL_RCC_ClockConfig+0x240>)
 80092be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80092c0:	4b06      	ldr	r3, [pc, #24]	; (80092dc <HAL_RCC_ClockConfig+0x244>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f7f9 fbcd 	bl	8002a64 <HAL_InitTick>
 80092ca:	4603      	mov	r3, r0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3710      	adds	r7, #16
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	58004000 	.word	0x58004000
 80092d8:	20000004 	.word	0x20000004
 80092dc:	2000000c 	.word	0x2000000c

080092e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092e0:	b590      	push	{r4, r7, lr}
 80092e2:	b087      	sub	sp, #28
 80092e4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80092e6:	2300      	movs	r3, #0
 80092e8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092ee:	f7ff fa2a 	bl	8008746 <LL_RCC_GetSysClkSource>
 80092f2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80092f4:	f7ff fafe 	bl	80088f4 <LL_RCC_PLL_GetMainSource>
 80092f8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <HAL_RCC_GetSysClockFreq+0x2c>
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b0c      	cmp	r3, #12
 8009304:	d139      	bne.n	800937a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d136      	bne.n	800937a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800930c:	f7ff f9cd 	bl	80086aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d115      	bne.n	8009342 <HAL_RCC_GetSysClockFreq+0x62>
 8009316:	f7ff f9c8 	bl	80086aa <LL_RCC_MSI_IsEnabledRangeSelect>
 800931a:	4603      	mov	r3, r0
 800931c:	2b01      	cmp	r3, #1
 800931e:	d106      	bne.n	800932e <HAL_RCC_GetSysClockFreq+0x4e>
 8009320:	f7ff f9d3 	bl	80086ca <LL_RCC_MSI_GetRange>
 8009324:	4603      	mov	r3, r0
 8009326:	0a1b      	lsrs	r3, r3, #8
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	e005      	b.n	800933a <HAL_RCC_GetSysClockFreq+0x5a>
 800932e:	f7ff f9d7 	bl	80086e0 <LL_RCC_MSI_GetRangeAfterStandby>
 8009332:	4603      	mov	r3, r0
 8009334:	0a1b      	lsrs	r3, r3, #8
 8009336:	f003 030f 	and.w	r3, r3, #15
 800933a:	4a36      	ldr	r2, [pc, #216]	; (8009414 <HAL_RCC_GetSysClockFreq+0x134>)
 800933c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009340:	e014      	b.n	800936c <HAL_RCC_GetSysClockFreq+0x8c>
 8009342:	f7ff f9b2 	bl	80086aa <LL_RCC_MSI_IsEnabledRangeSelect>
 8009346:	4603      	mov	r3, r0
 8009348:	2b01      	cmp	r3, #1
 800934a:	d106      	bne.n	800935a <HAL_RCC_GetSysClockFreq+0x7a>
 800934c:	f7ff f9bd 	bl	80086ca <LL_RCC_MSI_GetRange>
 8009350:	4603      	mov	r3, r0
 8009352:	091b      	lsrs	r3, r3, #4
 8009354:	f003 030f 	and.w	r3, r3, #15
 8009358:	e005      	b.n	8009366 <HAL_RCC_GetSysClockFreq+0x86>
 800935a:	f7ff f9c1 	bl	80086e0 <LL_RCC_MSI_GetRangeAfterStandby>
 800935e:	4603      	mov	r3, r0
 8009360:	091b      	lsrs	r3, r3, #4
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	4a2b      	ldr	r2, [pc, #172]	; (8009414 <HAL_RCC_GetSysClockFreq+0x134>)
 8009368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800936c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d115      	bne.n	80093a0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009378:	e012      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	2b04      	cmp	r3, #4
 800937e:	d102      	bne.n	8009386 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009380:	4b25      	ldr	r3, [pc, #148]	; (8009418 <HAL_RCC_GetSysClockFreq+0x138>)
 8009382:	617b      	str	r3, [r7, #20]
 8009384:	e00c      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b08      	cmp	r3, #8
 800938a:	d109      	bne.n	80093a0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800938c:	f7ff f8a0 	bl	80084d0 <LL_RCC_HSE_IsEnabledDiv2>
 8009390:	4603      	mov	r3, r0
 8009392:	2b01      	cmp	r3, #1
 8009394:	d102      	bne.n	800939c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009396:	4b20      	ldr	r3, [pc, #128]	; (8009418 <HAL_RCC_GetSysClockFreq+0x138>)
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	e001      	b.n	80093a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800939c:	4b1f      	ldr	r3, [pc, #124]	; (800941c <HAL_RCC_GetSysClockFreq+0x13c>)
 800939e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093a0:	f7ff f9d1 	bl	8008746 <LL_RCC_GetSysClkSource>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b0c      	cmp	r3, #12
 80093a8:	d12f      	bne.n	800940a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80093aa:	f7ff faa3 	bl	80088f4 <LL_RCC_PLL_GetMainSource>
 80093ae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2b02      	cmp	r3, #2
 80093b4:	d003      	beq.n	80093be <HAL_RCC_GetSysClockFreq+0xde>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2b03      	cmp	r3, #3
 80093ba:	d003      	beq.n	80093c4 <HAL_RCC_GetSysClockFreq+0xe4>
 80093bc:	e00d      	b.n	80093da <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80093be:	4b16      	ldr	r3, [pc, #88]	; (8009418 <HAL_RCC_GetSysClockFreq+0x138>)
 80093c0:	60fb      	str	r3, [r7, #12]
        break;
 80093c2:	e00d      	b.n	80093e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80093c4:	f7ff f884 	bl	80084d0 <LL_RCC_HSE_IsEnabledDiv2>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d102      	bne.n	80093d4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80093ce:	4b12      	ldr	r3, [pc, #72]	; (8009418 <HAL_RCC_GetSysClockFreq+0x138>)
 80093d0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80093d2:	e005      	b.n	80093e0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80093d4:	4b11      	ldr	r3, [pc, #68]	; (800941c <HAL_RCC_GetSysClockFreq+0x13c>)
 80093d6:	60fb      	str	r3, [r7, #12]
        break;
 80093d8:	e002      	b.n	80093e0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	60fb      	str	r3, [r7, #12]
        break;
 80093de:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80093e0:	f7ff fa66 	bl	80088b0 <LL_RCC_PLL_GetN>
 80093e4:	4602      	mov	r2, r0
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	fb03 f402 	mul.w	r4, r3, r2
 80093ec:	f7ff fa77 	bl	80088de <LL_RCC_PLL_GetDivider>
 80093f0:	4603      	mov	r3, r0
 80093f2:	091b      	lsrs	r3, r3, #4
 80093f4:	3301      	adds	r3, #1
 80093f6:	fbb4 f4f3 	udiv	r4, r4, r3
 80093fa:	f7ff fa65 	bl	80088c8 <LL_RCC_PLL_GetR>
 80093fe:	4603      	mov	r3, r0
 8009400:	0f5b      	lsrs	r3, r3, #29
 8009402:	3301      	adds	r3, #1
 8009404:	fbb4 f3f3 	udiv	r3, r4, r3
 8009408:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800940a:	697b      	ldr	r3, [r7, #20]
}
 800940c:	4618      	mov	r0, r3
 800940e:	371c      	adds	r7, #28
 8009410:	46bd      	mov	sp, r7
 8009412:	bd90      	pop	{r4, r7, pc}
 8009414:	0801f554 	.word	0x0801f554
 8009418:	00f42400 	.word	0x00f42400
 800941c:	01e84800 	.word	0x01e84800

08009420 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009420:	b598      	push	{r3, r4, r7, lr}
 8009422:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009424:	f7ff ff5c 	bl	80092e0 <HAL_RCC_GetSysClockFreq>
 8009428:	4604      	mov	r4, r0
 800942a:	f7ff f9e6 	bl	80087fa <LL_RCC_GetAHBPrescaler>
 800942e:	4603      	mov	r3, r0
 8009430:	091b      	lsrs	r3, r3, #4
 8009432:	f003 030f 	and.w	r3, r3, #15
 8009436:	4a03      	ldr	r2, [pc, #12]	; (8009444 <HAL_RCC_GetHCLKFreq+0x24>)
 8009438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800943c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009440:	4618      	mov	r0, r3
 8009442:	bd98      	pop	{r3, r4, r7, pc}
 8009444:	0801f4f4 	.word	0x0801f4f4

08009448 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009448:	b598      	push	{r3, r4, r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800944c:	f7ff ffe8 	bl	8009420 <HAL_RCC_GetHCLKFreq>
 8009450:	4604      	mov	r4, r0
 8009452:	f7ff f9ea 	bl	800882a <LL_RCC_GetAPB1Prescaler>
 8009456:	4603      	mov	r3, r0
 8009458:	0a1b      	lsrs	r3, r3, #8
 800945a:	4a03      	ldr	r2, [pc, #12]	; (8009468 <HAL_RCC_GetPCLK1Freq+0x20>)
 800945c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009460:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd98      	pop	{r3, r4, r7, pc}
 8009468:	0801f534 	.word	0x0801f534

0800946c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800946c:	b598      	push	{r3, r4, r7, lr}
 800946e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009470:	f7ff ffd6 	bl	8009420 <HAL_RCC_GetHCLKFreq>
 8009474:	4604      	mov	r4, r0
 8009476:	f7ff f9e3 	bl	8008840 <LL_RCC_GetAPB2Prescaler>
 800947a:	4603      	mov	r3, r0
 800947c:	0adb      	lsrs	r3, r3, #11
 800947e:	4a03      	ldr	r2, [pc, #12]	; (800948c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009484:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009488:	4618      	mov	r0, r3
 800948a:	bd98      	pop	{r3, r4, r7, pc}
 800948c:	0801f534 	.word	0x0801f534

08009490 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8009490:	b590      	push	{r4, r7, lr}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	091b      	lsrs	r3, r3, #4
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	4a10      	ldr	r2, [pc, #64]	; (80094e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80094a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80094a8:	f7ff f9b2 	bl	8008810 <LL_RCC_GetAHB3Prescaler>
 80094ac:	4603      	mov	r3, r0
 80094ae:	091b      	lsrs	r3, r3, #4
 80094b0:	f003 030f 	and.w	r3, r3, #15
 80094b4:	4a0c      	ldr	r2, [pc, #48]	; (80094e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80094b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	4a09      	ldr	r2, [pc, #36]	; (80094ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	0c9c      	lsrs	r4, r3, #18
 80094cc:	f7fe ff58 	bl	8008380 <HAL_PWREx_GetVoltageRange>
 80094d0:	4603      	mov	r3, r0
 80094d2:	4619      	mov	r1, r3
 80094d4:	4620      	mov	r0, r4
 80094d6:	f000 f80b 	bl	80094f0 <RCC_SetFlashLatency>
 80094da:	4603      	mov	r3, r0
}
 80094dc:	4618      	mov	r0, r3
 80094de:	3714      	adds	r7, #20
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd90      	pop	{r4, r7, pc}
 80094e4:	0801f554 	.word	0x0801f554
 80094e8:	0801f4f4 	.word	0x0801f4f4
 80094ec:	431bde83 	.word	0x431bde83

080094f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b08e      	sub	sp, #56	; 0x38
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80094fa:	4a3a      	ldr	r2, [pc, #232]	; (80095e4 <RCC_SetFlashLatency+0xf4>)
 80094fc:	f107 0320 	add.w	r3, r7, #32
 8009500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009504:	6018      	str	r0, [r3, #0]
 8009506:	3304      	adds	r3, #4
 8009508:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800950a:	4a37      	ldr	r2, [pc, #220]	; (80095e8 <RCC_SetFlashLatency+0xf8>)
 800950c:	f107 0318 	add.w	r3, r7, #24
 8009510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009514:	6018      	str	r0, [r3, #0]
 8009516:	3304      	adds	r3, #4
 8009518:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800951a:	4a34      	ldr	r2, [pc, #208]	; (80095ec <RCC_SetFlashLatency+0xfc>)
 800951c:	f107 030c 	add.w	r3, r7, #12
 8009520:	ca07      	ldmia	r2, {r0, r1, r2}
 8009522:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009526:	2300      	movs	r3, #0
 8009528:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009530:	d11b      	bne.n	800956a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009532:	2300      	movs	r3, #0
 8009534:	633b      	str	r3, [r7, #48]	; 0x30
 8009536:	e014      	b.n	8009562 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	3338      	adds	r3, #56	; 0x38
 800953e:	443b      	add	r3, r7
 8009540:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	4293      	cmp	r3, r2
 800954a:	d807      	bhi.n	800955c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800954c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	3338      	adds	r3, #56	; 0x38
 8009552:	443b      	add	r3, r7
 8009554:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009558:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800955a:	e021      	b.n	80095a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	3301      	adds	r3, #1
 8009560:	633b      	str	r3, [r7, #48]	; 0x30
 8009562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009564:	2b02      	cmp	r3, #2
 8009566:	d9e7      	bls.n	8009538 <RCC_SetFlashLatency+0x48>
 8009568:	e01a      	b.n	80095a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800956a:	2300      	movs	r3, #0
 800956c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800956e:	e014      	b.n	800959a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	3338      	adds	r3, #56	; 0x38
 8009576:	443b      	add	r3, r7
 8009578:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800957c:	461a      	mov	r2, r3
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	4293      	cmp	r3, r2
 8009582:	d807      	bhi.n	8009594 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3338      	adds	r3, #56	; 0x38
 800958a:	443b      	add	r3, r7
 800958c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009590:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009592:	e005      	b.n	80095a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009596:	3301      	adds	r3, #1
 8009598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800959a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959c:	2b02      	cmp	r3, #2
 800959e:	d9e7      	bls.n	8009570 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80095a0:	4b13      	ldr	r3, [pc, #76]	; (80095f0 <RCC_SetFlashLatency+0x100>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f023 0207 	bic.w	r2, r3, #7
 80095a8:	4911      	ldr	r1, [pc, #68]	; (80095f0 <RCC_SetFlashLatency+0x100>)
 80095aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ac:	4313      	orrs	r3, r2
 80095ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095b0:	f7f9 fa62 	bl	8002a78 <HAL_GetTick>
 80095b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80095b6:	e008      	b.n	80095ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80095b8:	f7f9 fa5e 	bl	8002a78 <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d901      	bls.n	80095ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	e007      	b.n	80095da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80095ca:	4b09      	ldr	r3, [pc, #36]	; (80095f0 <RCC_SetFlashLatency+0x100>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0307 	and.w	r3, r3, #7
 80095d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d1ef      	bne.n	80095b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3738      	adds	r7, #56	; 0x38
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	0801ec84 	.word	0x0801ec84
 80095e8:	0801ec8c 	.word	0x0801ec8c
 80095ec:	0801ec94 	.word	0x0801ec94
 80095f0:	58004000 	.word	0x58004000

080095f4 <LL_RCC_LSE_IsReady>:
{
 80095f4:	b480      	push	{r7}
 80095f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80095f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b02      	cmp	r3, #2
 8009606:	d101      	bne.n	800960c <LL_RCC_LSE_IsReady+0x18>
 8009608:	2301      	movs	r3, #1
 800960a:	e000      	b.n	800960e <LL_RCC_LSE_IsReady+0x1a>
 800960c:	2300      	movs	r3, #0
}
 800960e:	4618      	mov	r0, r3
 8009610:	46bd      	mov	sp, r7
 8009612:	bc80      	pop	{r7}
 8009614:	4770      	bx	lr

08009616 <LL_RCC_SetUSARTClockSource>:
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800961e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009622:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	0c1b      	lsrs	r3, r3, #16
 800962a:	43db      	mvns	r3, r3
 800962c:	401a      	ands	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	b29b      	uxth	r3, r3
 8009632:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009636:	4313      	orrs	r3, r2
 8009638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800963c:	bf00      	nop
 800963e:	370c      	adds	r7, #12
 8009640:	46bd      	mov	sp, r7
 8009642:	bc80      	pop	{r7}
 8009644:	4770      	bx	lr

08009646 <LL_RCC_SetI2SClockSource>:
{
 8009646:	b480      	push	{r7}
 8009648:	b083      	sub	sp, #12
 800964a:	af00      	add	r7, sp, #0
 800964c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800964e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800965a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4313      	orrs	r3, r2
 8009662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009666:	bf00      	nop
 8009668:	370c      	adds	r7, #12
 800966a:	46bd      	mov	sp, r7
 800966c:	bc80      	pop	{r7}
 800966e:	4770      	bx	lr

08009670 <LL_RCC_SetLPUARTClockSource>:
{
 8009670:	b480      	push	{r7}
 8009672:	b083      	sub	sp, #12
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800967c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009680:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009684:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	4313      	orrs	r3, r2
 800968c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009690:	bf00      	nop
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	bc80      	pop	{r7}
 8009698:	4770      	bx	lr

0800969a <LL_RCC_SetI2CClockSource>:
{
 800969a:	b480      	push	{r7}
 800969c:	b083      	sub	sp, #12
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80096a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	091b      	lsrs	r3, r3, #4
 80096ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80096b2:	43db      	mvns	r3, r3
 80096b4:	401a      	ands	r2, r3
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	011b      	lsls	r3, r3, #4
 80096ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80096be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096c2:	4313      	orrs	r3, r2
 80096c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bc80      	pop	{r7}
 80096d0:	4770      	bx	lr

080096d2 <LL_RCC_SetLPTIMClockSource>:
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80096da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	0c1b      	lsrs	r3, r3, #16
 80096e6:	041b      	lsls	r3, r3, #16
 80096e8:	43db      	mvns	r3, r3
 80096ea:	401a      	ands	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	041b      	lsls	r3, r3, #16
 80096f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096f4:	4313      	orrs	r3, r2
 80096f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096fa:	bf00      	nop
 80096fc:	370c      	adds	r7, #12
 80096fe:	46bd      	mov	sp, r7
 8009700:	bc80      	pop	{r7}
 8009702:	4770      	bx	lr

08009704 <LL_RCC_SetRNGClockSource>:
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800970c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009714:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009718:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4313      	orrs	r3, r2
 8009720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	bc80      	pop	{r7}
 800972c:	4770      	bx	lr

0800972e <LL_RCC_SetADCClockSource>:
{
 800972e:	b480      	push	{r7}
 8009730:	b083      	sub	sp, #12
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009736:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800973a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800973e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4313      	orrs	r3, r2
 800974a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr

08009758 <LL_RCC_SetRTCClockSource>:
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009768:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800976c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4313      	orrs	r3, r2
 8009774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	bc80      	pop	{r7}
 8009780:	4770      	bx	lr

08009782 <LL_RCC_GetRTCClockSource>:
{
 8009782:	b480      	push	{r7}
 8009784:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009786:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800978a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800978e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8009792:	4618      	mov	r0, r3
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr

0800979a <LL_RCC_ForceBackupDomainReset>:
{
 800979a:	b480      	push	{r7}
 800979c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800979e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097b2:	bf00      	nop
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr

080097ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80097ba:	b480      	push	{r7}
 80097bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097d2:	bf00      	nop
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bc80      	pop	{r7}
 80097d8:	4770      	bx	lr
	...

080097dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b086      	sub	sp, #24
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80097e4:	2300      	movs	r3, #0
 80097e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80097e8:	2300      	movs	r3, #0
 80097ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80097ec:	2300      	movs	r3, #0
 80097ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d058      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80097fc:	f7fe fd7e 	bl	80082fc <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009800:	f7f9 f93a 	bl	8002a78 <HAL_GetTick>
 8009804:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009806:	e009      	b.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009808:	f7f9 f936 	bl	8002a78 <HAL_GetTick>
 800980c:	4602      	mov	r2, r0
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	1ad3      	subs	r3, r2, r3
 8009812:	2b02      	cmp	r3, #2
 8009814:	d902      	bls.n	800981c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8009816:	2303      	movs	r3, #3
 8009818:	74fb      	strb	r3, [r7, #19]
        break;
 800981a:	e006      	b.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800981c:	4b7b      	ldr	r3, [pc, #492]	; (8009a0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009824:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009828:	d1ee      	bne.n	8009808 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800982a:	7cfb      	ldrb	r3, [r7, #19]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d13c      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009830:	f7ff ffa7 	bl	8009782 <LL_RCC_GetRTCClockSource>
 8009834:	4602      	mov	r2, r0
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800983a:	429a      	cmp	r2, r3
 800983c:	d00f      	beq.n	800985e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800983e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800984a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800984c:	f7ff ffa5 	bl	800979a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009850:	f7ff ffb3 	bl	80097ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009854:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	f003 0302 	and.w	r3, r3, #2
 8009864:	2b00      	cmp	r3, #0
 8009866:	d014      	beq.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009868:	f7f9 f906 	bl	8002a78 <HAL_GetTick>
 800986c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800986e:	e00b      	b.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009870:	f7f9 f902 	bl	8002a78 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	f241 3288 	movw	r2, #5000	; 0x1388
 800987e:	4293      	cmp	r3, r2
 8009880:	d902      	bls.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8009882:	2303      	movs	r3, #3
 8009884:	74fb      	strb	r3, [r7, #19]
            break;
 8009886:	e004      	b.n	8009892 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8009888:	f7ff feb4 	bl	80095f4 <LL_RCC_LSE_IsReady>
 800988c:	4603      	mov	r3, r0
 800988e:	2b01      	cmp	r3, #1
 8009890:	d1ee      	bne.n	8009870 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8009892:	7cfb      	ldrb	r3, [r7, #19]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d105      	bne.n	80098a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800989c:	4618      	mov	r0, r3
 800989e:	f7ff ff5b 	bl	8009758 <LL_RCC_SetRTCClockSource>
 80098a2:	e004      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098a4:	7cfb      	ldrb	r3, [r7, #19]
 80098a6:	74bb      	strb	r3, [r7, #18]
 80098a8:	e001      	b.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098aa:	7cfb      	ldrb	r3, [r7, #19]
 80098ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f003 0301 	and.w	r3, r3, #1
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d004      	beq.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	685b      	ldr	r3, [r3, #4]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff fea9 	bl	8009616 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f7ff fe9e 	bl	8009616 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0320 	and.w	r3, r3, #32
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d004      	beq.n	80098f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fec0 	bl	8009670 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d004      	beq.n	8009906 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fee6 	bl	80096d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800990e:	2b00      	cmp	r3, #0
 8009910:	d004      	beq.n	800991c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff fedb 	bl	80096d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009924:	2b00      	cmp	r3, #0
 8009926:	d004      	beq.n	8009932 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992c:	4618      	mov	r0, r3
 800992e:	f7ff fed0 	bl	80096d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800993a:	2b00      	cmp	r3, #0
 800993c:	d004      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fea9 	bl	800969a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	4618      	mov	r0, r3
 800995a:	f7ff fe9e 	bl	800969a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	69db      	ldr	r3, [r3, #28]
 800996e:	4618      	mov	r0, r3
 8009970:	f7ff fe93 	bl	800969a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0310 	and.w	r3, r3, #16
 800997c:	2b00      	cmp	r3, #0
 800997e:	d011      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	4618      	mov	r0, r3
 8009986:	f7ff fe5e 	bl	8009646 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009992:	d107      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8009994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009998:	68db      	ldr	r3, [r3, #12]
 800999a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800999e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d010      	beq.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099b4:	4618      	mov	r0, r3
 80099b6:	f7ff fea5 	bl	8009704 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d107      	bne.n	80099d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80099c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7ff fea3 	bl	800972e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099f0:	d107      	bne.n	8009a02 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80099f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a00:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009a02:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	3718      	adds	r7, #24
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	bd80      	pop	{r7, pc}
 8009a0c:	58000400 	.word	0x58000400

08009a10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d071      	beq.n	8009b06 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a28:	b2db      	uxtb	r3, r3
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d106      	bne.n	8009a3c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f7f8 fc58 	bl	80022ec <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2202      	movs	r2, #2
 8009a40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a44:	4b32      	ldr	r3, [pc, #200]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a46:	68db      	ldr	r3, [r3, #12]
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b10      	cmp	r3, #16
 8009a4e:	d051      	beq.n	8009af4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a50:	4b2f      	ldr	r3, [pc, #188]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a52:	22ca      	movs	r2, #202	; 0xca
 8009a54:	625a      	str	r2, [r3, #36]	; 0x24
 8009a56:	4b2e      	ldr	r3, [pc, #184]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a58:	2253      	movs	r2, #83	; 0x53
 8009a5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 fa11 	bl	8009e84 <RTC_EnterInitMode>
 8009a62:	4603      	mov	r3, r0
 8009a64:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d13f      	bne.n	8009aec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009a6c:	4b28      	ldr	r3, [pc, #160]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	4a27      	ldr	r2, [pc, #156]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a72:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009a7c:	4b24      	ldr	r3, [pc, #144]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a7e:	699a      	ldr	r2, [r3, #24]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6859      	ldr	r1, [r3, #4]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	4319      	orrs	r1, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	699b      	ldr	r3, [r3, #24]
 8009a8e:	430b      	orrs	r3, r1
 8009a90:	491f      	ldr	r1, [pc, #124]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	041b      	lsls	r3, r3, #16
 8009aa0:	491b      	ldr	r1, [pc, #108]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009aa6:	4b1a      	ldr	r3, [pc, #104]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009aa8:	68db      	ldr	r3, [r3, #12]
 8009aaa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	4915      	ldr	r1, [pc, #84]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fa14 	bl	8009eec <RTC_ExitInitMode>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009ac8:	7bfb      	ldrb	r3, [r7, #15]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10e      	bne.n	8009aec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009ace:	4b10      	ldr	r3, [pc, #64]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009ad0:	699b      	ldr	r3, [r3, #24]
 8009ad2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6a19      	ldr	r1, [r3, #32]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	4319      	orrs	r1, r3
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	695b      	ldr	r3, [r3, #20]
 8009ae4:	430b      	orrs	r3, r1
 8009ae6:	490a      	ldr	r1, [pc, #40]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aec:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <HAL_RTC_Init+0x100>)
 8009aee:	22ff      	movs	r2, #255	; 0xff
 8009af0:	625a      	str	r2, [r3, #36]	; 0x24
 8009af2:	e001      	b.n	8009af8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d103      	bne.n	8009b06 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	40002800 	.word	0x40002800

08009b14 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b087      	sub	sp, #28
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b2a:	2b01      	cmp	r3, #1
 8009b2c:	d101      	bne.n	8009b32 <HAL_RTC_SetAlarm_IT+0x1e>
 8009b2e:	2302      	movs	r3, #2
 8009b30:	e0f3      	b.n	8009d1a <HAL_RTC_SetAlarm_IT+0x206>
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009b42:	4b78      	ldr	r3, [pc, #480]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b4a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b52:	d06a      	beq.n	8009c2a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d13a      	bne.n	8009bd0 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009b5a:	4b72      	ldr	r3, [pc, #456]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009b5c:	699b      	ldr	r3, [r3, #24]
 8009b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d102      	bne.n	8009b6c <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f000 f9f5 	bl	8009f68 <RTC_ByteToBcd2>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	785b      	ldrb	r3, [r3, #1]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f9ee 	bl	8009f68 <RTC_ByteToBcd2>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b90:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	789b      	ldrb	r3, [r3, #2]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f000 f9e6 	bl	8009f68 <RTC_ByteToBcd2>
 8009b9c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b9e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	78db      	ldrb	r3, [r3, #3]
 8009ba6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009ba8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f9d8 	bl	8009f68 <RTC_ByteToBcd2>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009bbc:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009bc4:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009bca:	4313      	orrs	r3, r2
 8009bcc:	617b      	str	r3, [r7, #20]
 8009bce:	e02c      	b.n	8009c2a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	695b      	ldr	r3, [r3, #20]
 8009bd4:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009bd8:	d00d      	beq.n	8009bf6 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	695b      	ldr	r3, [r3, #20]
 8009bde:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009be2:	d008      	beq.n	8009bf6 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009be4:	4b4f      	ldr	r3, [pc, #316]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009be6:	699b      	ldr	r3, [r3, #24]
 8009be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d102      	bne.n	8009bf6 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	785b      	ldrb	r3, [r3, #1]
 8009c00:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009c02:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c08:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	78db      	ldrb	r3, [r3, #3]
 8009c0e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009c10:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c18:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009c1a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009c1c:	68bb      	ldr	r3, [r7, #8]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009c20:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009c26:	4313      	orrs	r3, r2
 8009c28:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c2a:	4b3e      	ldr	r3, [pc, #248]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c2c:	22ca      	movs	r2, #202	; 0xca
 8009c2e:	625a      	str	r2, [r3, #36]	; 0x24
 8009c30:	4b3c      	ldr	r3, [pc, #240]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c32:	2253      	movs	r2, #83	; 0x53
 8009c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c3e:	d12c      	bne.n	8009c9a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009c40:	4b38      	ldr	r3, [pc, #224]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	4a37      	ldr	r2, [pc, #220]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c4a:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009c4c:	4b35      	ldr	r3, [pc, #212]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c4e:	2201      	movs	r2, #1
 8009c50:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c58:	d107      	bne.n	8009c6a <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	699a      	ldr	r2, [r3, #24]
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	69db      	ldr	r3, [r3, #28]
 8009c62:	4930      	ldr	r1, [pc, #192]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	644b      	str	r3, [r1, #68]	; 0x44
 8009c68:	e006      	b.n	8009c78 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009c6a:	4a2e      	ldr	r2, [pc, #184]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009c70:	4a2c      	ldr	r2, [pc, #176]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	699b      	ldr	r3, [r3, #24]
 8009c76:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009c78:	4a2a      	ldr	r2, [pc, #168]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c84:	f043 0201 	orr.w	r2, r3, #1
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009c8c:	4b25      	ldr	r3, [pc, #148]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	4a24      	ldr	r2, [pc, #144]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c92:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009c96:	6193      	str	r3, [r2, #24]
 8009c98:	e02b      	b.n	8009cf2 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009c9a:	4b22      	ldr	r3, [pc, #136]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009c9c:	699b      	ldr	r3, [r3, #24]
 8009c9e:	4a21      	ldr	r2, [pc, #132]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ca0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009ca4:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009ca6:	4b1f      	ldr	r3, [pc, #124]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ca8:	2202      	movs	r2, #2
 8009caa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009cac:	693b      	ldr	r3, [r7, #16]
 8009cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cb2:	d107      	bne.n	8009cc4 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	699a      	ldr	r2, [r3, #24]
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	4919      	ldr	r1, [pc, #100]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cc2:	e006      	b.n	8009cd2 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009cc4:	4a17      	ldr	r2, [pc, #92]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009cca:	4a16      	ldr	r2, [pc, #88]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009cd2:	4a14      	ldr	r2, [pc, #80]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cde:	f043 0202 	orr.w	r2, r3, #2
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009ce6:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009ce8:	699b      	ldr	r3, [r3, #24]
 8009cea:	4a0e      	ldr	r2, [pc, #56]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009cec:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009cf0:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009cf2:	4b0d      	ldr	r3, [pc, #52]	; (8009d28 <HAL_RTC_SetAlarm_IT+0x214>)
 8009cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cf8:	4a0b      	ldr	r2, [pc, #44]	; (8009d28 <HAL_RTC_SetAlarm_IT+0x214>)
 8009cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d02:	4b08      	ldr	r3, [pc, #32]	; (8009d24 <HAL_RTC_SetAlarm_IT+0x210>)
 8009d04:	22ff      	movs	r2, #255	; 0xff
 8009d06:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2200      	movs	r2, #0
 8009d14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009d18:	2300      	movs	r3, #0
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	371c      	adds	r7, #28
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd90      	pop	{r4, r7, pc}
 8009d22:	bf00      	nop
 8009d24:	40002800 	.word	0x40002800
 8009d28:	58000800 	.word	0x58000800

08009d2c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b083      	sub	sp, #12
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_RTC_DeactivateAlarm+0x18>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e048      	b.n	8009dd6 <HAL_RTC_DeactivateAlarm+0xaa>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2202      	movs	r2, #2
 8009d50:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d54:	4b22      	ldr	r3, [pc, #136]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d56:	22ca      	movs	r2, #202	; 0xca
 8009d58:	625a      	str	r2, [r3, #36]	; 0x24
 8009d5a:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d5c:	2253      	movs	r2, #83	; 0x53
 8009d5e:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d66:	d115      	bne.n	8009d94 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009d68:	4b1d      	ldr	r3, [pc, #116]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d72:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009d74:	4b1a      	ldr	r3, [pc, #104]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d78:	4a19      	ldr	r2, [pc, #100]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d7e:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d84:	f023 0201 	bic.w	r2, r3, #1
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009d8c:	4b14      	ldr	r3, [pc, #80]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d92:	e014      	b.n	8009dbe <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009d94:	4b12      	ldr	r3, [pc, #72]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	4a11      	ldr	r2, [pc, #68]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d9a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009d9e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009da0:	4b0f      	ldr	r3, [pc, #60]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009da4:	4a0e      	ldr	r2, [pc, #56]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009daa:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db0:	f023 0202 	bic.w	r2, r3, #2
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009db8:	4b09      	ldr	r3, [pc, #36]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dba:	2202      	movs	r2, #2
 8009dbc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dbe:	4b08      	ldr	r3, [pc, #32]	; (8009de0 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dc0:	22ff      	movs	r2, #255	; 0xff
 8009dc2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dd4:	2300      	movs	r3, #0
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	370c      	adds	r7, #12
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bc80      	pop	{r7}
 8009dde:	4770      	bx	lr
 8009de0:	40002800 	.word	0x40002800

08009de4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8009dec:	4b11      	ldr	r3, [pc, #68]	; (8009e34 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009dee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df4:	4013      	ands	r3, r2
 8009df6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d005      	beq.n	8009e0e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009e02:	4b0c      	ldr	r3, [pc, #48]	; (8009e34 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e04:	2201      	movs	r2, #1
 8009e06:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f7f9 f80e 	bl	8002e2a <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f003 0302 	and.w	r3, r3, #2
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d005      	beq.n	8009e24 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009e18:	4b06      	ldr	r3, [pc, #24]	; (8009e34 <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e1a:	2202      	movs	r2, #2
 8009e1c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f94a 	bl	800a0b8 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009e2c:	bf00      	nop
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}
 8009e34:	40002800 	.word	0x40002800

08009e38 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009e40:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <HAL_RTC_WaitForSynchro+0x48>)
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	4a0e      	ldr	r2, [pc, #56]	; (8009e80 <HAL_RTC_WaitForSynchro+0x48>)
 8009e46:	f023 0320 	bic.w	r3, r3, #32
 8009e4a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009e4c:	f7f8 fe14 	bl	8002a78 <HAL_GetTick>
 8009e50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e52:	e009      	b.n	8009e68 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e54:	f7f8 fe10 	bl	8002a78 <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e62:	d901      	bls.n	8009e68 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009e64:	2303      	movs	r3, #3
 8009e66:	e006      	b.n	8009e76 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e68:	4b05      	ldr	r3, [pc, #20]	; (8009e80 <HAL_RTC_WaitForSynchro+0x48>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	f003 0320 	and.w	r3, r3, #32
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d0ef      	beq.n	8009e54 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3710      	adds	r7, #16
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40002800 	.word	0x40002800

08009e84 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009e90:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <RTC_EnterInitMode+0x64>)
 8009e92:	68db      	ldr	r3, [r3, #12]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d120      	bne.n	8009ede <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009e9c:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <RTC_EnterInitMode+0x64>)
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	4a11      	ldr	r2, [pc, #68]	; (8009ee8 <RTC_EnterInitMode+0x64>)
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009ea8:	f7f8 fde6 	bl	8002a78 <HAL_GetTick>
 8009eac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009eae:	e00d      	b.n	8009ecc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009eb0:	f7f8 fde2 	bl	8002a78 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebe:	d905      	bls.n	8009ecc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ec0:	2303      	movs	r3, #3
 8009ec2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2203      	movs	r2, #3
 8009ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ecc:	4b06      	ldr	r3, [pc, #24]	; (8009ee8 <RTC_EnterInitMode+0x64>)
 8009ece:	68db      	ldr	r3, [r3, #12]
 8009ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d102      	bne.n	8009ede <RTC_EnterInitMode+0x5a>
 8009ed8:	7bfb      	ldrb	r3, [r7, #15]
 8009eda:	2b03      	cmp	r3, #3
 8009edc:	d1e8      	bne.n	8009eb0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	40002800 	.word	0x40002800

08009eec <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	4a19      	ldr	r2, [pc, #100]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f02:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f04:	4b17      	ldr	r3, [pc, #92]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f003 0320 	and.w	r3, r3, #32
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10c      	bne.n	8009f2a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f7ff ff91 	bl	8009e38 <HAL_RTC_WaitForSynchro>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d01e      	beq.n	8009f5a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2203      	movs	r2, #3
 8009f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009f24:	2303      	movs	r3, #3
 8009f26:	73fb      	strb	r3, [r7, #15]
 8009f28:	e017      	b.n	8009f5a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f2a:	4b0e      	ldr	r3, [pc, #56]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009f2c:	699b      	ldr	r3, [r3, #24]
 8009f2e:	4a0d      	ldr	r2, [pc, #52]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009f30:	f023 0320 	bic.w	r3, r3, #32
 8009f34:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7ff ff7e 	bl	8009e38 <HAL_RTC_WaitForSynchro>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d005      	beq.n	8009f4e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2203      	movs	r2, #3
 8009f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009f4a:	2303      	movs	r3, #3
 8009f4c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f4e:	4b05      	ldr	r3, [pc, #20]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <RTC_ExitInitMode+0x78>)
 8009f54:	f043 0320 	orr.w	r3, r3, #32
 8009f58:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	40002800 	.word	0x40002800

08009f68 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009f76:	79fb      	ldrb	r3, [r7, #7]
 8009f78:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009f7a:	e005      	b.n	8009f88 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	3301      	adds	r3, #1
 8009f80:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009f82:	7afb      	ldrb	r3, [r7, #11]
 8009f84:	3b0a      	subs	r3, #10
 8009f86:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009f88:	7afb      	ldrb	r3, [r7, #11]
 8009f8a:	2b09      	cmp	r3, #9
 8009f8c:	d8f6      	bhi.n	8009f7c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	011b      	lsls	r3, r3, #4
 8009f94:	b2da      	uxtb	r2, r3
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	b2db      	uxtb	r3, r3
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bc80      	pop	{r7}
 8009fa4:	4770      	bx	lr
	...

08009fa8 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d101      	bne.n	8009fbe <HAL_RTCEx_EnableBypassShadow+0x16>
 8009fba:	2302      	movs	r3, #2
 8009fbc:	e01f      	b.n	8009ffe <HAL_RTCEx_EnableBypassShadow+0x56>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	2202      	movs	r2, #2
 8009fca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fce:	4b0e      	ldr	r3, [pc, #56]	; (800a008 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fd0:	22ca      	movs	r2, #202	; 0xca
 8009fd2:	625a      	str	r2, [r3, #36]	; 0x24
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fd6:	2253      	movs	r2, #83	; 0x53
 8009fd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009fda:	4b0b      	ldr	r3, [pc, #44]	; (800a008 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	4a0a      	ldr	r2, [pc, #40]	; (800a008 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fe0:	f043 0320 	orr.w	r3, r3, #32
 8009fe4:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fe6:	4b08      	ldr	r3, [pc, #32]	; (800a008 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fe8:	22ff      	movs	r2, #255	; 0xff
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009ffc:	2300      	movs	r3, #0
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	bc80      	pop	{r7}
 800a006:	4770      	bx	lr
 800a008:	40002800 	.word	0x40002800

0800a00c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_RTCEx_SetSSRU_IT+0x16>
 800a01e:	2302      	movs	r3, #2
 800a020:	e027      	b.n	800a072 <HAL_RTCEx_SetSSRU_IT+0x66>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2202      	movs	r2, #2
 800a02e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a032:	4b12      	ldr	r3, [pc, #72]	; (800a07c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a034:	22ca      	movs	r2, #202	; 0xca
 800a036:	625a      	str	r2, [r3, #36]	; 0x24
 800a038:	4b10      	ldr	r3, [pc, #64]	; (800a07c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a03a:	2253      	movs	r2, #83	; 0x53
 800a03c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a03e:	4b0f      	ldr	r3, [pc, #60]	; (800a07c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	4a0e      	ldr	r2, [pc, #56]	; (800a07c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a044:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a048:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800a04a:	4b0d      	ldr	r3, [pc, #52]	; (800a080 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a050:	4a0b      	ldr	r2, [pc, #44]	; (800a080 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a052:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a056:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a05a:	4b08      	ldr	r3, [pc, #32]	; (800a07c <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a05c:	22ff      	movs	r2, #255	; 0xff
 800a05e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	370c      	adds	r7, #12
 800a076:	46bd      	mov	sp, r7
 800a078:	bc80      	pop	{r7}
 800a07a:	4770      	bx	lr
 800a07c:	40002800 	.word	0x40002800
 800a080:	58000800 	.word	0x58000800

0800a084 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a08e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d005      	beq.n	800a0a4 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a09a:	2240      	movs	r2, #64	; 0x40
 800a09c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f7f8 fecd 	bl	8002e3e <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	40002800 	.word	0x40002800

0800a0b8 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bc80      	pop	{r7}
 800a0c8:	4770      	bx	lr
	...

0800a0cc <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a0d8:	4b07      	ldr	r3, [pc, #28]	; (800a0f8 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a0da:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	697a      	ldr	r2, [r7, #20]
 800a0e2:	4413      	add	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	601a      	str	r2, [r3, #0]
}
 800a0ec:	bf00      	nop
 800a0ee:	371c      	adds	r7, #28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bc80      	pop	{r7}
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	4000b100 	.word	0x4000b100

0800a0fc <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b085      	sub	sp, #20
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
 800a104:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a106:	4b07      	ldr	r3, [pc, #28]	; (800a124 <HAL_RTCEx_BKUPRead+0x28>)
 800a108:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	68fa      	ldr	r2, [r7, #12]
 800a110:	4413      	add	r3, r2
 800a112:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681b      	ldr	r3, [r3, #0]
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bc80      	pop	{r7}
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	4000b100 	.word	0x4000b100

0800a128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a136:	2301      	movs	r3, #1
 800a138:	e0c6      	b.n	800a2c8 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d108      	bne.n	800a154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a14a:	d009      	beq.n	800a160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	61da      	str	r2, [r3, #28]
 800a152:	e005      	b.n	800a160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d106      	bne.n	800a17a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f7f8 f963 	bl	8002440 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2202      	movs	r2, #2
 800a17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a190:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a19a:	d902      	bls.n	800a1a2 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a19c:	2300      	movs	r3, #0
 800a19e:	60fb      	str	r3, [r7, #12]
 800a1a0:	e002      	b.n	800a1a8 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1a6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1b0:	d007      	beq.n	800a1c2 <HAL_SPI_Init+0x9a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	68db      	ldr	r3, [r3, #12]
 800a1b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1ba:	d002      	beq.n	800a1c2 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1d2:	431a      	orrs	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	691b      	ldr	r3, [r3, #16]
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	f003 0301 	and.w	r3, r3, #1
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1f0:	431a      	orrs	r2, r3
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69db      	ldr	r3, [r3, #28]
 800a1f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6a1b      	ldr	r3, [r3, #32]
 800a200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a204:	ea42 0103 	orr.w	r1, r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a20c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a220:	d11b      	bne.n	800a25a <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10b      	bne.n	800a242 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a232:	d903      	bls.n	800a23c <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2202      	movs	r2, #2
 800a238:	631a      	str	r2, [r3, #48]	; 0x30
 800a23a:	e002      	b.n	800a242 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a246:	2b02      	cmp	r3, #2
 800a248:	d107      	bne.n	800a25a <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	681a      	ldr	r2, [r3, #0]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a258:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	699b      	ldr	r3, [r3, #24]
 800a25e:	0c1b      	lsrs	r3, r3, #16
 800a260:	f003 0204 	and.w	r2, r3, #4
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a268:	f003 0310 	and.w	r3, r3, #16
 800a26c:	431a      	orrs	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a272:	f003 0308 	and.w	r3, r3, #8
 800a276:	431a      	orrs	r2, r3
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68db      	ldr	r3, [r3, #12]
 800a27c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a280:	ea42 0103 	orr.w	r1, r2, r3
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	430a      	orrs	r2, r1
 800a290:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a29a:	d105      	bne.n	800a2a8 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	b292      	uxth	r2, r2
 800a2a6:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	69da      	ldr	r2, [r3, #28]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <LL_PWR_SetRadioBusyTrigger>:
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a2d8:	4b06      	ldr	r3, [pc, #24]	; (800a2f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2e0:	4904      	ldr	r1, [pc, #16]	; (800a2f4 <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	608b      	str	r3, [r1, #8]
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bc80      	pop	{r7}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	58000400 	.word	0x58000400

0800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a302:	4a04      	ldr	r2, [pc, #16]	; (800a314 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a30c:	bf00      	nop
 800a30e:	46bd      	mov	sp, r7
 800a310:	bc80      	pop	{r7}
 800a312:	4770      	bx	lr
 800a314:	58000400 	.word	0x58000400

0800a318 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a31e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a322:	4a04      	ldr	r2, [pc, #16]	; (800a334 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a324:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a328:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a32c:	bf00      	nop
 800a32e:	46bd      	mov	sp, r7
 800a330:	bc80      	pop	{r7}
 800a332:	4770      	bx	lr
 800a334:	58000400 	.word	0x58000400

0800a338 <LL_PWR_ClearFlag_RFBUSY>:
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a33c:	4b03      	ldr	r3, [pc, #12]	; (800a34c <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a33e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a342:	619a      	str	r2, [r3, #24]
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	bc80      	pop	{r7}
 800a34a:	4770      	bx	lr
 800a34c:	58000400 	.word	0x58000400

0800a350 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a354:	4b06      	ldr	r3, [pc, #24]	; (800a370 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	f003 0302 	and.w	r3, r3, #2
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d101      	bne.n	800a364 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a360:	2301      	movs	r3, #1
 800a362:	e000      	b.n	800a366 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	46bd      	mov	sp, r7
 800a36a:	bc80      	pop	{r7}
 800a36c:	4770      	bx	lr
 800a36e:	bf00      	nop
 800a370:	58000400 	.word	0x58000400

0800a374 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a374:	b480      	push	{r7}
 800a376:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a378:	4b06      	ldr	r3, [pc, #24]	; (800a394 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a37a:	695b      	ldr	r3, [r3, #20]
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b04      	cmp	r3, #4
 800a382:	d101      	bne.n	800a388 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	46bd      	mov	sp, r7
 800a38e:	bc80      	pop	{r7}
 800a390:	4770      	bx	lr
 800a392:	bf00      	nop
 800a394:	58000400 	.word	0x58000400

0800a398 <LL_RCC_RF_DisableReset>:
{
 800a398:	b480      	push	{r7}
 800a39a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a39c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a3b0:	bf00      	nop
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bc80      	pop	{r7}
 800a3b6:	4770      	bx	lr

0800a3b8 <LL_RCC_IsRFUnderReset>:
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a3bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3cc:	d101      	bne.n	800a3d2 <LL_RCC_IsRFUnderReset+0x1a>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e000      	b.n	800a3d4 <LL_RCC_IsRFUnderReset+0x1c>
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bc80      	pop	{r7}
 800a3da:	4770      	bx	lr

0800a3dc <LL_EXTI_EnableIT_32_63>:
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <LL_EXTI_EnableIT_32_63+0x24>)
 800a3e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a3ea:	4905      	ldr	r1, [pc, #20]	; (800a400 <LL_EXTI_EnableIT_32_63+0x24>)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bc80      	pop	{r7}
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	58000800 	.word	0x58000800

0800a404 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d103      	bne.n	800a41a <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	73fb      	strb	r3, [r7, #15]
    return status;
 800a416:	7bfb      	ldrb	r3, [r7, #15]
 800a418:	e052      	b.n	800a4c0 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	799b      	ldrb	r3, [r3, #6]
 800a422:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800a424:	7bbb      	ldrb	r3, [r7, #14]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <HAL_SUBGHZ_Init+0x2c>
 800a42a:	7bbb      	ldrb	r3, [r7, #14]
 800a42c:	2b03      	cmp	r3, #3
 800a42e:	d109      	bne.n	800a444 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f7f8 f948 	bl	80026cc <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a43c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a440:	f7ff ffcc 	bl	800a3dc <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800a444:	7bbb      	ldrb	r3, [r7, #14]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d126      	bne.n	800a498 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2202      	movs	r2, #2
 800a44e:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800a450:	f7ff ffa2 	bl	800a398 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a454:	4b1c      	ldr	r3, [pc, #112]	; (800a4c8 <HAL_SUBGHZ_Init+0xc4>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	4613      	mov	r3, r2
 800a45a:	00db      	lsls	r3, r3, #3
 800a45c:	1a9b      	subs	r3, r3, r2
 800a45e:	009b      	lsls	r3, r3, #2
 800a460:	0cdb      	lsrs	r3, r3, #19
 800a462:	2264      	movs	r2, #100	; 0x64
 800a464:	fb02 f303 	mul.w	r3, r2, r3
 800a468:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d105      	bne.n	800a47c <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	609a      	str	r2, [r3, #8]
        break;
 800a47a:	e007      	b.n	800a48c <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	3b01      	subs	r3, #1
 800a480:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a482:	f7ff ff99 	bl	800a3b8 <LL_RCC_IsRFUnderReset>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1ee      	bne.n	800a46a <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a48c:	f7ff ff34 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a490:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a494:	f7ff ff1c 	bl	800a2d0 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a498:	f7ff ff4e 	bl	800a338 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d10a      	bne.n	800a4b8 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f000 faac 	bl	800aa04 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	719a      	strb	r2, [r3, #6]

  return status;
 800a4be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3710      	adds	r7, #16
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}
 800a4c8:	20000004 	.word	0x20000004

0800a4cc <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b086      	sub	sp, #24
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	460b      	mov	r3, r1
 800a4da:	817b      	strh	r3, [r7, #10]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	799b      	ldrb	r3, [r3, #6]
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d14a      	bne.n	800a580 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	795b      	ldrb	r3, [r3, #5]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d101      	bne.n	800a4f6 <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a4f2:	2302      	movs	r3, #2
 800a4f4:	e045      	b.n	800a582 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2202      	movs	r2, #2
 800a500:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a502:	68f8      	ldr	r0, [r7, #12]
 800a504:	f000 fb4c 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a508:	f7ff ff06 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a50c:	210d      	movs	r1, #13
 800a50e:	68f8      	ldr	r0, [r7, #12]
 800a510:	f000 fa98 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a514:	897b      	ldrh	r3, [r7, #10]
 800a516:	0a1b      	lsrs	r3, r3, #8
 800a518:	b29b      	uxth	r3, r3
 800a51a:	b2db      	uxtb	r3, r3
 800a51c:	4619      	mov	r1, r3
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f000 fa90 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a524:	897b      	ldrh	r3, [r7, #10]
 800a526:	b2db      	uxtb	r3, r3
 800a528:	4619      	mov	r1, r3
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f000 fa8a 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a530:	2300      	movs	r3, #0
 800a532:	82bb      	strh	r3, [r7, #20]
 800a534:	e00a      	b.n	800a54c <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a536:	8abb      	ldrh	r3, [r7, #20]
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	4413      	add	r3, r2
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	4619      	mov	r1, r3
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 fa7f 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a546:	8abb      	ldrh	r3, [r7, #20]
 800a548:	3301      	adds	r3, #1
 800a54a:	82bb      	strh	r3, [r7, #20]
 800a54c:	8aba      	ldrh	r2, [r7, #20]
 800a54e:	893b      	ldrh	r3, [r7, #8]
 800a550:	429a      	cmp	r2, r3
 800a552:	d3f0      	bcc.n	800a536 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a554:	f7ff fed0 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fb45 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d002      	beq.n	800a56c <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	75fb      	strb	r3, [r7, #23]
 800a56a:	e001      	b.n	800a570 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2201      	movs	r2, #1
 800a574:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	715a      	strb	r2, [r3, #5]

    return status;
 800a57c:	7dfb      	ldrb	r3, [r7, #23]
 800a57e:	e000      	b.n	800a582 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b088      	sub	sp, #32
 800a58e:	af00      	add	r7, sp, #0
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	607a      	str	r2, [r7, #4]
 800a594:	461a      	mov	r2, r3
 800a596:	460b      	mov	r3, r1
 800a598:	817b      	strh	r3, [r7, #10]
 800a59a:	4613      	mov	r3, r2
 800a59c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	799b      	ldrb	r3, [r3, #6]
 800a5a6:	b2db      	uxtb	r3, r3
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d14a      	bne.n	800a642 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	795b      	ldrb	r3, [r3, #5]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d101      	bne.n	800a5b8 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	e045      	b.n	800a644 <HAL_SUBGHZ_ReadRegisters+0xba>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f000 faee 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5c4:	f7ff fea8 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a5c8:	211d      	movs	r1, #29
 800a5ca:	68f8      	ldr	r0, [r7, #12]
 800a5cc:	f000 fa3a 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a5d0:	897b      	ldrh	r3, [r7, #10]
 800a5d2:	0a1b      	lsrs	r3, r3, #8
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	4619      	mov	r1, r3
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fa32 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a5e0:	897b      	ldrh	r3, [r7, #10]
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 fa2c 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a5ec:	2100      	movs	r1, #0
 800a5ee:	68f8      	ldr	r0, [r7, #12]
 800a5f0:	f000 fa28 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	82fb      	strh	r3, [r7, #22]
 800a5f8:	e009      	b.n	800a60e <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a5fa:	69b9      	ldr	r1, [r7, #24]
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 fa77 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	3301      	adds	r3, #1
 800a606:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a608:	8afb      	ldrh	r3, [r7, #22]
 800a60a:	3301      	adds	r3, #1
 800a60c:	82fb      	strh	r3, [r7, #22]
 800a60e:	8afa      	ldrh	r2, [r7, #22]
 800a610:	893b      	ldrh	r3, [r7, #8]
 800a612:	429a      	cmp	r2, r3
 800a614:	d3f1      	bcc.n	800a5fa <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a616:	f7ff fe6f 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fae4 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d002      	beq.n	800a62e <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	77fb      	strb	r3, [r7, #31]
 800a62c:	e001      	b.n	800a632 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2201      	movs	r2, #1
 800a636:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2200      	movs	r2, #0
 800a63c:	715a      	strb	r2, [r3, #5]

    return status;
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	e000      	b.n	800a644 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a642:	2302      	movs	r3, #2
  }
}
 800a644:	4618      	mov	r0, r3
 800a646:	3720      	adds	r7, #32
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	607a      	str	r2, [r7, #4]
 800a656:	461a      	mov	r2, r3
 800a658:	460b      	mov	r3, r1
 800a65a:	72fb      	strb	r3, [r7, #11]
 800a65c:	4613      	mov	r3, r2
 800a65e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	799b      	ldrb	r3, [r3, #6]
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b01      	cmp	r3, #1
 800a668:	d14a      	bne.n	800a700 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	795b      	ldrb	r3, [r3, #5]
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d101      	bne.n	800a676 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a672:	2302      	movs	r3, #2
 800a674:	e045      	b.n	800a702 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	2201      	movs	r2, #1
 800a67a:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	f000 fa8f 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	2b84      	cmp	r3, #132	; 0x84
 800a686:	d002      	beq.n	800a68e <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a688:	7afb      	ldrb	r3, [r7, #11]
 800a68a:	2b94      	cmp	r3, #148	; 0x94
 800a68c:	d103      	bne.n	800a696 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	711a      	strb	r2, [r3, #4]
 800a694:	e002      	b.n	800a69c <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	2200      	movs	r2, #0
 800a69a:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a69c:	f7ff fe3c 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	68f8      	ldr	r0, [r7, #12]
 800a6a6:	f000 f9cd 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	82bb      	strh	r3, [r7, #20]
 800a6ae:	e00a      	b.n	800a6c6 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a6b0:	8abb      	ldrh	r3, [r7, #20]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	781b      	ldrb	r3, [r3, #0]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f9c2 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a6c0:	8abb      	ldrh	r3, [r7, #20]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	82bb      	strh	r3, [r7, #20]
 800a6c6:	8aba      	ldrh	r2, [r7, #20]
 800a6c8:	893b      	ldrh	r3, [r7, #8]
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d3f0      	bcc.n	800a6b0 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a6ce:	f7ff fe13 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
 800a6d4:	2b84      	cmp	r3, #132	; 0x84
 800a6d6:	d002      	beq.n	800a6de <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a6d8:	68f8      	ldr	r0, [r7, #12]
 800a6da:	f000 fa85 	bl	800abe8 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	689b      	ldr	r3, [r3, #8]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d002      	beq.n	800a6ec <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
 800a6ea:	e001      	b.n	800a6f0 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	715a      	strb	r2, [r3, #5]

    return status;
 800a6fc:	7dfb      	ldrb	r3, [r7, #23]
 800a6fe:	e000      	b.n	800a702 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a700:	2302      	movs	r3, #2
  }
}
 800a702:	4618      	mov	r0, r3
 800a704:	3718      	adds	r7, #24
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b088      	sub	sp, #32
 800a70e:	af00      	add	r7, sp, #0
 800a710:	60f8      	str	r0, [r7, #12]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	461a      	mov	r2, r3
 800a716:	460b      	mov	r3, r1
 800a718:	72fb      	strb	r3, [r7, #11]
 800a71a:	4613      	mov	r3, r2
 800a71c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	799b      	ldrb	r3, [r3, #6]
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d13d      	bne.n	800a7a8 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	795b      	ldrb	r3, [r3, #5]
 800a730:	2b01      	cmp	r3, #1
 800a732:	d101      	bne.n	800a738 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a734:	2302      	movs	r3, #2
 800a736:	e038      	b.n	800a7aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f000 fa2e 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a744:	f7ff fde8 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a748:	7afb      	ldrb	r3, [r7, #11]
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f979 	bl	800aa44 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a752:	2100      	movs	r1, #0
 800a754:	68f8      	ldr	r0, [r7, #12]
 800a756:	f000 f975 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a75a:	2300      	movs	r3, #0
 800a75c:	82fb      	strh	r3, [r7, #22]
 800a75e:	e009      	b.n	800a774 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a760:	69b9      	ldr	r1, [r7, #24]
 800a762:	68f8      	ldr	r0, [r7, #12]
 800a764:	f000 f9c4 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	3301      	adds	r3, #1
 800a76c:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a76e:	8afb      	ldrh	r3, [r7, #22]
 800a770:	3301      	adds	r3, #1
 800a772:	82fb      	strh	r3, [r7, #22]
 800a774:	8afa      	ldrh	r2, [r7, #22]
 800a776:	893b      	ldrh	r3, [r7, #8]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3f1      	bcc.n	800a760 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a77c:	f7ff fdbc 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f000 fa31 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	689b      	ldr	r3, [r3, #8]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	77fb      	strb	r3, [r7, #31]
 800a792:	e001      	b.n	800a798 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a794:	2300      	movs	r3, #0
 800a796:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2201      	movs	r2, #1
 800a79c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	715a      	strb	r2, [r3, #5]

    return status;
 800a7a4:	7ffb      	ldrb	r3, [r7, #31]
 800a7a6:	e000      	b.n	800a7aa <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a7a8:	2302      	movs	r3, #2
  }
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3720      	adds	r7, #32
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	461a      	mov	r2, r3
 800a7be:	460b      	mov	r3, r1
 800a7c0:	72fb      	strb	r3, [r7, #11]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	799b      	ldrb	r3, [r3, #6]
 800a7ca:	b2db      	uxtb	r3, r3
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d13e      	bne.n	800a84e <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	795b      	ldrb	r3, [r3, #5]
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e039      	b.n	800a850 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 f9dc 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a7e8:	f7ff fd96 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a7ec:	210e      	movs	r1, #14
 800a7ee:	68f8      	ldr	r0, [r7, #12]
 800a7f0:	f000 f928 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a7f4:	7afb      	ldrb	r3, [r7, #11]
 800a7f6:	4619      	mov	r1, r3
 800a7f8:	68f8      	ldr	r0, [r7, #12]
 800a7fa:	f000 f923 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a7fe:	2300      	movs	r3, #0
 800a800:	82bb      	strh	r3, [r7, #20]
 800a802:	e00a      	b.n	800a81a <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a804:	8abb      	ldrh	r3, [r7, #20]
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	4413      	add	r3, r2
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	4619      	mov	r1, r3
 800a80e:	68f8      	ldr	r0, [r7, #12]
 800a810:	f000 f918 	bl	800aa44 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a814:	8abb      	ldrh	r3, [r7, #20]
 800a816:	3301      	adds	r3, #1
 800a818:	82bb      	strh	r3, [r7, #20]
 800a81a:	8aba      	ldrh	r2, [r7, #20]
 800a81c:	893b      	ldrh	r3, [r7, #8]
 800a81e:	429a      	cmp	r2, r3
 800a820:	d3f0      	bcc.n	800a804 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a822:	f7ff fd69 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 f9de 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	75fb      	strb	r3, [r7, #23]
 800a838:	e001      	b.n	800a83e <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a83a:	2300      	movs	r3, #0
 800a83c:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2201      	movs	r2, #1
 800a842:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2200      	movs	r2, #0
 800a848:	715a      	strb	r2, [r3, #5]

    return status;
 800a84a:	7dfb      	ldrb	r3, [r7, #23]
 800a84c:	e000      	b.n	800a850 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a84e:	2302      	movs	r3, #2
  }
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b088      	sub	sp, #32
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	60f8      	str	r0, [r7, #12]
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	461a      	mov	r2, r3
 800a864:	460b      	mov	r3, r1
 800a866:	72fb      	strb	r3, [r7, #11]
 800a868:	4613      	mov	r3, r2
 800a86a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	799b      	ldrb	r3, [r3, #6]
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b01      	cmp	r3, #1
 800a878:	d141      	bne.n	800a8fe <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	795b      	ldrb	r3, [r3, #5]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d101      	bne.n	800a886 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a882:	2302      	movs	r3, #2
 800a884:	e03c      	b.n	800a900 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2201      	movs	r2, #1
 800a88a:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 f987 	bl	800aba0 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a892:	f7ff fd41 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a896:	211e      	movs	r1, #30
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 f8d3 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 f8ce 	bl	800aa44 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 f8ca 	bl	800aa44 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	82fb      	strh	r3, [r7, #22]
 800a8b4:	e009      	b.n	800a8ca <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a8b6:	69b9      	ldr	r1, [r7, #24]
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f000 f919 	bl	800aaf0 <SUBGHZSPI_Receive>
      pData++;
 800a8be:	69bb      	ldr	r3, [r7, #24]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a8c4:	8afb      	ldrh	r3, [r7, #22]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	82fb      	strh	r3, [r7, #22]
 800a8ca:	8afa      	ldrh	r2, [r7, #22]
 800a8cc:	893b      	ldrh	r3, [r7, #8]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d3f1      	bcc.n	800a8b6 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a8d2:	f7ff fd11 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f986 	bl	800abe8 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d002      	beq.n	800a8ea <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	77fb      	strb	r3, [r7, #31]
 800a8e8:	e001      	b.n	800a8ee <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2201      	movs	r2, #1
 800a8f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	715a      	strb	r2, [r3, #5]

    return status;
 800a8fa:	7ffb      	ldrb	r3, [r7, #31]
 800a8fc:	e000      	b.n	800a900 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a8fe:	2302      	movs	r3, #2
  }
}
 800a900:	4618      	mov	r0, r3
 800a902:	3720      	adds	r7, #32
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b084      	sub	sp, #16
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a910:	2300      	movs	r3, #0
 800a912:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a914:	f107 020c 	add.w	r2, r7, #12
 800a918:	2302      	movs	r3, #2
 800a91a:	2112      	movs	r1, #18
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7ff fef4 	bl	800a70a <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a922:	7b3b      	ldrb	r3, [r7, #12]
 800a924:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a926:	89fb      	ldrh	r3, [r7, #14]
 800a928:	021b      	lsls	r3, r3, #8
 800a92a:	b21a      	sxth	r2, r3
 800a92c:	7b7b      	ldrb	r3, [r7, #13]
 800a92e:	b21b      	sxth	r3, r3
 800a930:	4313      	orrs	r3, r2
 800a932:	b21b      	sxth	r3, r3
 800a934:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a936:	f107 020c 	add.w	r2, r7, #12
 800a93a:	2302      	movs	r3, #2
 800a93c:	2102      	movs	r1, #2
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fe84 	bl	800a64c <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a944:	89fb      	ldrh	r3, [r7, #14]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f012 fb2c 	bl	801cfac <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a954:	89fb      	ldrh	r3, [r7, #14]
 800a956:	f003 0302 	and.w	r3, r3, #2
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d002      	beq.n	800a964 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f012 fb32 	bl	801cfc8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a964:	89fb      	ldrh	r3, [r7, #14]
 800a966:	f003 0304 	and.w	r3, r3, #4
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f012 fb82 	bl	801d078 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	f003 0308 	and.w	r3, r3, #8
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f012 fb88 	bl	801d094 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a984:	89fb      	ldrh	r3, [r7, #14]
 800a986:	f003 0310 	and.w	r3, r3, #16
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f012 fb8e 	bl	801d0b0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a994:	89fb      	ldrh	r3, [r7, #14]
 800a996:	f003 0320 	and.w	r3, r3, #32
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d002      	beq.n	800a9a4 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f012 fb5c 	bl	801d05c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a9a4:	89fb      	ldrh	r3, [r7, #14]
 800a9a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d002      	beq.n	800a9b4 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f012 fb18 	bl	801cfe4 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a9b4:	89fb      	ldrh	r3, [r7, #14]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d00d      	beq.n	800a9da <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a9be:	89fb      	ldrh	r3, [r7, #14]
 800a9c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d004      	beq.n	800a9d2 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f012 fb18 	bl	801d000 <HAL_SUBGHZ_CADStatusCallback>
 800a9d0:	e003      	b.n	800a9da <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	f012 fb13 	bl	801d000 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a9da:	89fb      	ldrh	r3, [r7, #14]
 800a9dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d002      	beq.n	800a9ea <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f012 fb29 	bl	801d03c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800a9ea:	89fb      	ldrh	r3, [r7, #14]
 800a9ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d002      	beq.n	800a9fa <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f012 fb69 	bl	801d0cc <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
	...

0800aa04 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b083      	sub	sp, #12
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa0c:	4b0c      	ldr	r3, [pc, #48]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a0b      	ldr	r2, [pc, #44]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa16:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800aa18:	4a09      	ldr	r2, [pc, #36]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800aa20:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa24:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800aa28:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa2a:	4b05      	ldr	r3, [pc, #20]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	4a04      	ldr	r2, [pc, #16]	; (800aa40 <SUBGHZSPI_Init+0x3c>)
 800aa30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa34:	6013      	str	r3, [r2, #0]
}
 800aa36:	bf00      	nop
 800aa38:	370c      	adds	r7, #12
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bc80      	pop	{r7}
 800aa3e:	4770      	bx	lr
 800aa40:	58010000 	.word	0x58010000

0800aa44 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa54:	4b23      	ldr	r3, [pc, #140]	; (800aae4 <SUBGHZSPI_Transmit+0xa0>)
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	4613      	mov	r3, r2
 800aa5a:	00db      	lsls	r3, r3, #3
 800aa5c:	1a9b      	subs	r3, r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	0cdb      	lsrs	r3, r3, #19
 800aa62:	2264      	movs	r2, #100	; 0x64
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d105      	bne.n	800aa7c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	609a      	str	r2, [r3, #8]
      break;
 800aa7a:	e008      	b.n	800aa8e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	3b01      	subs	r3, #1
 800aa80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800aa82:	4b19      	ldr	r3, [pc, #100]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b02      	cmp	r3, #2
 800aa8c:	d1ed      	bne.n	800aa6a <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800aa8e:	4b17      	ldr	r3, [pc, #92]	; (800aaec <SUBGHZSPI_Transmit+0xa8>)
 800aa90:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa98:	4b12      	ldr	r3, [pc, #72]	; (800aae4 <SUBGHZSPI_Transmit+0xa0>)
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	1a9b      	subs	r3, r3, r2
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	0cdb      	lsrs	r3, r3, #19
 800aaa6:	2264      	movs	r2, #100	; 0x64
 800aaa8:	fb02 f303 	mul.w	r3, r2, r3
 800aaac:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2201      	movs	r2, #1
 800aabc:	609a      	str	r2, [r3, #8]
      break;
 800aabe:	e008      	b.n	800aad2 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800aac6:	4b08      	ldr	r3, [pc, #32]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d1ed      	bne.n	800aaae <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800aad2:	4b05      	ldr	r3, [pc, #20]	; (800aae8 <SUBGHZSPI_Transmit+0xa4>)
 800aad4:	68db      	ldr	r3, [r3, #12]

  return status;
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	371c      	adds	r7, #28
 800aadc:	46bd      	mov	sp, r7
 800aade:	bc80      	pop	{r7}
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	20000004 	.word	0x20000004
 800aae8:	58010000 	.word	0x58010000
 800aaec:	5801000c 	.word	0x5801000c

0800aaf0 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aafa:	2300      	movs	r3, #0
 800aafc:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aafe:	4b25      	ldr	r3, [pc, #148]	; (800ab94 <SUBGHZSPI_Receive+0xa4>)
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	1a9b      	subs	r3, r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	0cdb      	lsrs	r3, r3, #19
 800ab0c:	2264      	movs	r2, #100	; 0x64
 800ab0e:	fb02 f303 	mul.w	r3, r2, r3
 800ab12:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d105      	bne.n	800ab26 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2201      	movs	r2, #1
 800ab22:	609a      	str	r2, [r3, #8]
      break;
 800ab24:	e008      	b.n	800ab38 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800ab2c:	4b1a      	ldr	r3, [pc, #104]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f003 0302 	and.w	r3, r3, #2
 800ab34:	2b02      	cmp	r3, #2
 800ab36:	d1ed      	bne.n	800ab14 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800ab38:	4b18      	ldr	r3, [pc, #96]	; (800ab9c <SUBGHZSPI_Receive+0xac>)
 800ab3a:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	22ff      	movs	r2, #255	; 0xff
 800ab40:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ab42:	4b14      	ldr	r3, [pc, #80]	; (800ab94 <SUBGHZSPI_Receive+0xa4>)
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	4613      	mov	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	1a9b      	subs	r3, r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	0cdb      	lsrs	r3, r3, #19
 800ab50:	2264      	movs	r2, #100	; 0x64
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d105      	bne.n	800ab6a <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2201      	movs	r2, #1
 800ab66:	609a      	str	r2, [r3, #8]
      break;
 800ab68:	e008      	b.n	800ab7c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800ab70:	4b09      	ldr	r3, [pc, #36]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b01      	cmp	r3, #1
 800ab7a:	d1ed      	bne.n	800ab58 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800ab7c:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <SUBGHZSPI_Receive+0xa8>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	b2da      	uxtb	r2, r3
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	701a      	strb	r2, [r3, #0]

  return status;
 800ab86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bc80      	pop	{r7}
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	20000004 	.word	0x20000004
 800ab98:	58010000 	.word	0x58010000
 800ab9c:	5801000c 	.word	0x5801000c

0800aba0 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b084      	sub	sp, #16
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	791b      	ldrb	r3, [r3, #4]
 800abac:	2b01      	cmp	r3, #1
 800abae:	d111      	bne.n	800abd4 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800abb0:	4b0c      	ldr	r3, [pc, #48]	; (800abe4 <SUBGHZ_CheckDeviceReady+0x44>)
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	005b      	lsls	r3, r3, #1
 800abb8:	4413      	add	r3, r2
 800abba:	00db      	lsls	r3, r3, #3
 800abbc:	0c1b      	lsrs	r3, r3, #16
 800abbe:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800abc0:	f7ff fbaa 	bl	800a318 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d1f9      	bne.n	800abc4 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800abd0:	f7ff fb92 	bl	800a2f8 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 f807 	bl	800abe8 <SUBGHZ_WaitOnBusy>
 800abda:	4603      	mov	r3, r0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20000004 	.word	0x20000004

0800abe8 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800abf0:	2300      	movs	r3, #0
 800abf2:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800abf4:	4b12      	ldr	r3, [pc, #72]	; (800ac40 <SUBGHZ_WaitOnBusy+0x58>)
 800abf6:	681a      	ldr	r2, [r3, #0]
 800abf8:	4613      	mov	r3, r2
 800abfa:	005b      	lsls	r3, r3, #1
 800abfc:	4413      	add	r3, r2
 800abfe:	00db      	lsls	r3, r3, #3
 800ac00:	0d1b      	lsrs	r3, r3, #20
 800ac02:	2264      	movs	r2, #100	; 0x64
 800ac04:	fb02 f303 	mul.w	r3, r2, r3
 800ac08:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800ac0a:	f7ff fbb3 	bl	800a374 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800ac0e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d105      	bne.n	800ac22 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	609a      	str	r2, [r3, #8]
      break;
 800ac20:	e009      	b.n	800ac36 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3b01      	subs	r3, #1
 800ac26:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800ac28:	f7ff fb92 	bl	800a350 <LL_PWR_IsActiveFlag_RFBUSYS>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	4013      	ands	r3, r2
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	d0e9      	beq.n	800ac0a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800ac36:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3718      	adds	r7, #24
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	20000004 	.word	0x20000004

0800ac44 <LL_RCC_GetUSARTClockSource>:
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ac4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	401a      	ands	r2, r3
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	041b      	lsls	r3, r3, #16
 800ac5c:	4313      	orrs	r3, r2
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr

0800ac68 <LL_RCC_GetLPUARTClockSource>:
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b083      	sub	sp, #12
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ac70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	4013      	ands	r3, r2
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bc80      	pop	{r7}
 800ac84:	4770      	bx	lr

0800ac86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b082      	sub	sp, #8
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac94:	2301      	movs	r3, #1
 800ac96:	e042      	b.n	800ad1e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d106      	bne.n	800acb0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7f8 fabe 	bl	800322c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2224      	movs	r2, #36	; 0x24
 800acb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fc3b 	bl	800b544 <UART_SetConfig>
 800acce:	4603      	mov	r3, r0
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d101      	bne.n	800acd8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	e022      	b.n	800ad1e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fea3 	bl	800ba2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	685a      	ldr	r2, [r3, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acf4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	689a      	ldr	r2, [r3, #8]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad04:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f042 0201 	orr.w	r2, r2, #1
 800ad14:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 ff29 	bl	800bb6e <UART_CheckIdleState>
 800ad1c:	4603      	mov	r3, r0
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
	...

0800ad28 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08a      	sub	sp, #40	; 0x28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	4613      	mov	r3, r2
 800ad34:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d137      	bne.n	800adb0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d002      	beq.n	800ad4c <HAL_UART_Receive_IT+0x24>
 800ad46:	88fb      	ldrh	r3, [r7, #6]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d101      	bne.n	800ad50 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	e030      	b.n	800adb2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2200      	movs	r2, #0
 800ad54:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a18      	ldr	r2, [pc, #96]	; (800adbc <HAL_UART_Receive_IT+0x94>)
 800ad5c:	4293      	cmp	r3, r2
 800ad5e:	d01f      	beq.n	800ada0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d018      	beq.n	800ada0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	e853 3f00 	ldrex	r3, [r3]
 800ad7a:	613b      	str	r3, [r7, #16]
   return(result);
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad82:	627b      	str	r3, [r7, #36]	; 0x24
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	623b      	str	r3, [r7, #32]
 800ad8e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad90:	69f9      	ldr	r1, [r7, #28]
 800ad92:	6a3a      	ldr	r2, [r7, #32]
 800ad94:	e841 2300 	strex	r3, r2, [r1]
 800ad98:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d1e6      	bne.n	800ad6e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	461a      	mov	r2, r3
 800ada4:	68b9      	ldr	r1, [r7, #8]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 fff8 	bl	800bd9c <UART_Start_Receive_IT>
 800adac:	4603      	mov	r3, r0
 800adae:	e000      	b.n	800adb2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adb0:	2302      	movs	r3, #2
  }
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3728      	adds	r7, #40	; 0x28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	bf00      	nop
 800adbc:	40008000 	.word	0x40008000

0800adc0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08a      	sub	sp, #40	; 0x28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800add4:	2b20      	cmp	r3, #32
 800add6:	d167      	bne.n	800aea8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d002      	beq.n	800ade4 <HAL_UART_Transmit_DMA+0x24>
 800adde:	88fb      	ldrh	r3, [r7, #6]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d101      	bne.n	800ade8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	e060      	b.n	800aeaa <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	88fa      	ldrh	r2, [r7, #6]
 800adf2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	88fa      	ldrh	r2, [r7, #6]
 800adfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2221      	movs	r2, #33	; 0x21
 800ae0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d028      	beq.n	800ae68 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae1a:	4a26      	ldr	r2, [pc, #152]	; (800aeb4 <HAL_UART_Transmit_DMA+0xf4>)
 800ae1c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae22:	4a25      	ldr	r2, [pc, #148]	; (800aeb8 <HAL_UART_Transmit_DMA+0xf8>)
 800ae24:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2a:	4a24      	ldr	r2, [pc, #144]	; (800aebc <HAL_UART_Transmit_DMA+0xfc>)
 800ae2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae32:	2200      	movs	r2, #0
 800ae34:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3e:	4619      	mov	r1, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	3328      	adds	r3, #40	; 0x28
 800ae46:	461a      	mov	r2, r3
 800ae48:	88fb      	ldrh	r3, [r7, #6]
 800ae4a:	f7fa fb91 	bl	8005570 <HAL_DMA_Start_IT>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d009      	beq.n	800ae68 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2210      	movs	r2, #16
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	e020      	b.n	800aeaa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	2240      	movs	r2, #64	; 0x40
 800ae6e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	3308      	adds	r3, #8
 800ae76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	e853 3f00 	ldrex	r3, [r3]
 800ae7e:	613b      	str	r3, [r7, #16]
   return(result);
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae86:	627b      	str	r3, [r7, #36]	; 0x24
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae90:	623a      	str	r2, [r7, #32]
 800ae92:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae94:	69f9      	ldr	r1, [r7, #28]
 800ae96:	6a3a      	ldr	r2, [r7, #32]
 800ae98:	e841 2300 	strex	r3, r2, [r1]
 800ae9c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d1e5      	bne.n	800ae70 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aea4:	2300      	movs	r3, #0
 800aea6:	e000      	b.n	800aeaa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aea8:	2302      	movs	r3, #2
  }
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3728      	adds	r7, #40	; 0x28
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	0800c127 	.word	0x0800c127
 800aeb8:	0800c1c1 	.word	0x0800c1c1
 800aebc:	0800c1dd 	.word	0x0800c1dd

0800aec0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aec0:	b580      	push	{r7, lr}
 800aec2:	b0ba      	sub	sp, #232	; 0xe8
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	69db      	ldr	r3, [r3, #28]
 800aece:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aee6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800aeea:	f640 030f 	movw	r3, #2063	; 0x80f
 800aeee:	4013      	ands	r3, r2
 800aef0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800aef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d11b      	bne.n	800af34 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af00:	f003 0320 	and.w	r3, r3, #32
 800af04:	2b00      	cmp	r3, #0
 800af06:	d015      	beq.n	800af34 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af0c:	f003 0320 	and.w	r3, r3, #32
 800af10:	2b00      	cmp	r3, #0
 800af12:	d105      	bne.n	800af20 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af24:	2b00      	cmp	r3, #0
 800af26:	f000 82e3 	beq.w	800b4f0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4798      	blx	r3
      }
      return;
 800af32:	e2dd      	b.n	800b4f0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 8123 	beq.w	800b184 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af3e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af42:	4b8d      	ldr	r3, [pc, #564]	; (800b178 <HAL_UART_IRQHandler+0x2b8>)
 800af44:	4013      	ands	r3, r2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d106      	bne.n	800af58 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af4a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af4e:	4b8b      	ldr	r3, [pc, #556]	; (800b17c <HAL_UART_IRQHandler+0x2bc>)
 800af50:	4013      	ands	r3, r2
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8116 	beq.w	800b184 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af5c:	f003 0301 	and.w	r3, r3, #1
 800af60:	2b00      	cmp	r3, #0
 800af62:	d011      	beq.n	800af88 <HAL_UART_IRQHandler+0xc8>
 800af64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2201      	movs	r2, #1
 800af76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af7e:	f043 0201 	orr.w	r2, r3, #1
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d011      	beq.n	800afb8 <HAL_UART_IRQHandler+0xf8>
 800af94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d00b      	beq.n	800afb8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2202      	movs	r2, #2
 800afa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afae:	f043 0204 	orr.w	r2, r3, #4
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afbc:	f003 0304 	and.w	r3, r3, #4
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d011      	beq.n	800afe8 <HAL_UART_IRQHandler+0x128>
 800afc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afc8:	f003 0301 	and.w	r3, r3, #1
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d00b      	beq.n	800afe8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2204      	movs	r2, #4
 800afd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afde:	f043 0202 	orr.w	r2, r3, #2
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afec:	f003 0308 	and.w	r3, r3, #8
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d017      	beq.n	800b024 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b00      	cmp	r3, #0
 800affe:	d105      	bne.n	800b00c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b004:	4b5c      	ldr	r3, [pc, #368]	; (800b178 <HAL_UART_IRQHandler+0x2b8>)
 800b006:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2208      	movs	r2, #8
 800b012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b01a:	f043 0208 	orr.w	r2, r3, #8
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d012      	beq.n	800b056 <HAL_UART_IRQHandler+0x196>
 800b030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00c      	beq.n	800b056 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b04c:	f043 0220 	orr.w	r2, r3, #32
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 8249 	beq.w	800b4f4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b066:	f003 0320 	and.w	r3, r3, #32
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d013      	beq.n	800b096 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b06e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b072:	f003 0320 	and.w	r3, r3, #32
 800b076:	2b00      	cmp	r3, #0
 800b078:	d105      	bne.n	800b086 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b07a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b07e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d007      	beq.n	800b096 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d003      	beq.n	800b096 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b09c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0aa:	2b40      	cmp	r3, #64	; 0x40
 800b0ac:	d005      	beq.n	800b0ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d054      	beq.n	800b164 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 ffce 	bl	800c05c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	689b      	ldr	r3, [r3, #8]
 800b0c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0ca:	2b40      	cmp	r3, #64	; 0x40
 800b0cc:	d146      	bne.n	800b15c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	3308      	adds	r3, #8
 800b0d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b0e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	3308      	adds	r3, #8
 800b0f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b0fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b0fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b102:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b112:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1d9      	bne.n	800b0ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b120:	2b00      	cmp	r3, #0
 800b122:	d017      	beq.n	800b154 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b12a:	4a15      	ldr	r2, [pc, #84]	; (800b180 <HAL_UART_IRQHandler+0x2c0>)
 800b12c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b134:	4618      	mov	r0, r3
 800b136:	f7fa faf7 	bl	8005728 <HAL_DMA_Abort_IT>
 800b13a:	4603      	mov	r3, r0
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d019      	beq.n	800b174 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b148:	687a      	ldr	r2, [r7, #4]
 800b14a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b14e:	4610      	mov	r0, r2
 800b150:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b152:	e00f      	b.n	800b174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 f9e0 	bl	800b51a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b15a:	e00b      	b.n	800b174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f000 f9dc 	bl	800b51a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b162:	e007      	b.n	800b174 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 f9d8 	bl	800b51a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b172:	e1bf      	b.n	800b4f4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b174:	bf00      	nop
    return;
 800b176:	e1bd      	b.n	800b4f4 <HAL_UART_IRQHandler+0x634>
 800b178:	10000001 	.word	0x10000001
 800b17c:	04000120 	.word	0x04000120
 800b180:	0800c25d 	.word	0x0800c25d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b188:	2b01      	cmp	r3, #1
 800b18a:	f040 8153 	bne.w	800b434 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b192:	f003 0310 	and.w	r3, r3, #16
 800b196:	2b00      	cmp	r3, #0
 800b198:	f000 814c 	beq.w	800b434 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a0:	f003 0310 	and.w	r3, r3, #16
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	f000 8145 	beq.w	800b434 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2210      	movs	r2, #16
 800b1b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	689b      	ldr	r3, [r3, #8]
 800b1b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1bc:	2b40      	cmp	r3, #64	; 0x40
 800b1be:	f040 80bb 	bne.w	800b338 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	f000 818f 	beq.w	800b4f8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	f080 8187 	bcs.w	800b4f8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	f003 0320 	and.w	r3, r3, #32
 800b202:	2b00      	cmp	r3, #0
 800b204:	f040 8087 	bne.w	800b316 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b21c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	461a      	mov	r2, r3
 800b22e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b236:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b23a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b23e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b242:	e841 2300 	strex	r3, r2, [r1]
 800b246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b24a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d1da      	bne.n	800b208 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	3308      	adds	r3, #8
 800b258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b264:	f023 0301 	bic.w	r3, r3, #1
 800b268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	3308      	adds	r3, #8
 800b272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b27a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b27e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e1      	bne.n	800b252 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b29e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3308      	adds	r3, #8
 800b2ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2ba:	e841 2300 	strex	r3, r2, [r1]
 800b2be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1e3      	bne.n	800b28e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	2220      	movs	r2, #32
 800b2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2dc:	e853 3f00 	ldrex	r3, [r3]
 800b2e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2e4:	f023 0310 	bic.w	r3, r3, #16
 800b2e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b2f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b2fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b2fe:	e841 2300 	strex	r3, r2, [r1]
 800b302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b306:	2b00      	cmp	r3, #0
 800b308:	d1e4      	bne.n	800b2d4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b310:	4618      	mov	r0, r3
 800b312:	f7fa f9ab 	bl	800566c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2202      	movs	r2, #2
 800b31a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b328:	b29b      	uxth	r3, r3
 800b32a:	1ad3      	subs	r3, r2, r3
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	4619      	mov	r1, r3
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	f000 f8fb 	bl	800b52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b336:	e0df      	b.n	800b4f8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b344:	b29b      	uxth	r3, r3
 800b346:	1ad3      	subs	r3, r2, r3
 800b348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b352:	b29b      	uxth	r3, r3
 800b354:	2b00      	cmp	r3, #0
 800b356:	f000 80d1 	beq.w	800b4fc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b35a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b35e:	2b00      	cmp	r3, #0
 800b360:	f000 80cc 	beq.w	800b4fc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	e853 3f00 	ldrex	r3, [r3]
 800b370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	461a      	mov	r2, r3
 800b382:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b386:	647b      	str	r3, [r7, #68]	; 0x44
 800b388:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b38c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e4      	bne.n	800b364 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	3308      	adds	r3, #8
 800b3a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	e853 3f00 	ldrex	r3, [r3]
 800b3a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3b0:	f023 0301 	bic.w	r3, r3, #1
 800b3b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	3308      	adds	r3, #8
 800b3be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3c2:	633a      	str	r2, [r7, #48]	; 0x30
 800b3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3ca:	e841 2300 	strex	r3, r2, [r1]
 800b3ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d1e1      	bne.n	800b39a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2220      	movs	r2, #32
 800b3da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	e853 3f00 	ldrex	r3, [r3]
 800b3f6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f023 0310 	bic.w	r3, r3, #16
 800b3fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b40c:	61fb      	str	r3, [r7, #28]
 800b40e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b410:	69b9      	ldr	r1, [r7, #24]
 800b412:	69fa      	ldr	r2, [r7, #28]
 800b414:	e841 2300 	strex	r3, r2, [r1]
 800b418:	617b      	str	r3, [r7, #20]
   return(result);
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d1e4      	bne.n	800b3ea <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b426:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b42a:	4619      	mov	r1, r3
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 f87d 	bl	800b52c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b432:	e063      	b.n	800b4fc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00e      	beq.n	800b45e <HAL_UART_IRQHandler+0x59e>
 800b440:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d008      	beq.n	800b45e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b456:	6878      	ldr	r0, [r7, #4]
 800b458:	f001 fc5e 	bl	800cd18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b45c:	e051      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b45e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b466:	2b00      	cmp	r3, #0
 800b468:	d014      	beq.n	800b494 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b46a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b472:	2b00      	cmp	r3, #0
 800b474:	d105      	bne.n	800b482 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b476:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b47a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d008      	beq.n	800b494 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b486:	2b00      	cmp	r3, #0
 800b488:	d03a      	beq.n	800b500 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	4798      	blx	r3
    }
    return;
 800b492:	e035      	b.n	800b500 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d009      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x5f4>
 800b4a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 feeb 	bl	800c288 <UART_EndTransmit_IT>
    return;
 800b4b2:	e026      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x614>
 800b4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d003      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f001 fc35 	bl	800cd3c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4d2:	e016      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d010      	beq.n	800b502 <HAL_UART_IRQHandler+0x642>
 800b4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	da0c      	bge.n	800b502 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f001 fc1e 	bl	800cd2a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ee:	e008      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
      return;
 800b4f0:	bf00      	nop
 800b4f2:	e006      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
    return;
 800b4f4:	bf00      	nop
 800b4f6:	e004      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
      return;
 800b4f8:	bf00      	nop
 800b4fa:	e002      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
      return;
 800b4fc:	bf00      	nop
 800b4fe:	e000      	b.n	800b502 <HAL_UART_IRQHandler+0x642>
    return;
 800b500:	bf00      	nop
  }
}
 800b502:	37e8      	adds	r7, #232	; 0xe8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b510:	bf00      	nop
 800b512:	370c      	adds	r7, #12
 800b514:	46bd      	mov	sp, r7
 800b516:	bc80      	pop	{r7}
 800b518:	4770      	bx	lr

0800b51a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b51a:	b480      	push	{r7}
 800b51c:	b083      	sub	sp, #12
 800b51e:	af00      	add	r7, sp, #0
 800b520:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b522:	bf00      	nop
 800b524:	370c      	adds	r7, #12
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr

0800b52c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b083      	sub	sp, #12
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
 800b534:	460b      	mov	r3, r1
 800b536:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b538:	bf00      	nop
 800b53a:	370c      	adds	r7, #12
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bc80      	pop	{r7}
 800b540:	4770      	bx	lr
	...

0800b544 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b548:	b08c      	sub	sp, #48	; 0x30
 800b54a:	af00      	add	r7, sp, #0
 800b54c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	691b      	ldr	r3, [r3, #16]
 800b55c:	431a      	orrs	r2, r3
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	695b      	ldr	r3, [r3, #20]
 800b562:	431a      	orrs	r2, r3
 800b564:	697b      	ldr	r3, [r7, #20]
 800b566:	69db      	ldr	r3, [r3, #28]
 800b568:	4313      	orrs	r3, r2
 800b56a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	4b94      	ldr	r3, [pc, #592]	; (800b7c4 <UART_SetConfig+0x280>)
 800b574:	4013      	ands	r3, r2
 800b576:	697a      	ldr	r2, [r7, #20]
 800b578:	6812      	ldr	r2, [r2, #0]
 800b57a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b57c:	430b      	orrs	r3, r1
 800b57e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	685b      	ldr	r3, [r3, #4]
 800b586:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	68da      	ldr	r2, [r3, #12]
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	430a      	orrs	r2, r1
 800b594:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a89      	ldr	r2, [pc, #548]	; (800b7c8 <UART_SetConfig+0x284>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d004      	beq.n	800b5b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b5ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b5be:	697a      	ldr	r2, [r7, #20]
 800b5c0:	6812      	ldr	r2, [r2, #0]
 800b5c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5c4:	430b      	orrs	r3, r1
 800b5c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	f023 010f 	bic.w	r1, r3, #15
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	430a      	orrs	r2, r1
 800b5dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	4a7a      	ldr	r2, [pc, #488]	; (800b7cc <UART_SetConfig+0x288>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d127      	bne.n	800b638 <UART_SetConfig+0xf4>
 800b5e8:	2003      	movs	r0, #3
 800b5ea:	f7ff fb2b 	bl	800ac44 <LL_RCC_GetUSARTClockSource>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d81b      	bhi.n	800b630 <UART_SetConfig+0xec>
 800b5f8:	a201      	add	r2, pc, #4	; (adr r2, 800b600 <UART_SetConfig+0xbc>)
 800b5fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fe:	bf00      	nop
 800b600:	0800b611 	.word	0x0800b611
 800b604:	0800b621 	.word	0x0800b621
 800b608:	0800b619 	.word	0x0800b619
 800b60c:	0800b629 	.word	0x0800b629
 800b610:	2301      	movs	r3, #1
 800b612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b616:	e080      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b618:	2302      	movs	r3, #2
 800b61a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b61e:	e07c      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b620:	2304      	movs	r3, #4
 800b622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b626:	e078      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b628:	2308      	movs	r3, #8
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62e:	e074      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b630:	2310      	movs	r3, #16
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b636:	e070      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	4a64      	ldr	r2, [pc, #400]	; (800b7d0 <UART_SetConfig+0x28c>)
 800b63e:	4293      	cmp	r3, r2
 800b640:	d138      	bne.n	800b6b4 <UART_SetConfig+0x170>
 800b642:	200c      	movs	r0, #12
 800b644:	f7ff fafe 	bl	800ac44 <LL_RCC_GetUSARTClockSource>
 800b648:	4603      	mov	r3, r0
 800b64a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b64e:	2b0c      	cmp	r3, #12
 800b650:	d82c      	bhi.n	800b6ac <UART_SetConfig+0x168>
 800b652:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <UART_SetConfig+0x114>)
 800b654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b658:	0800b68d 	.word	0x0800b68d
 800b65c:	0800b6ad 	.word	0x0800b6ad
 800b660:	0800b6ad 	.word	0x0800b6ad
 800b664:	0800b6ad 	.word	0x0800b6ad
 800b668:	0800b69d 	.word	0x0800b69d
 800b66c:	0800b6ad 	.word	0x0800b6ad
 800b670:	0800b6ad 	.word	0x0800b6ad
 800b674:	0800b6ad 	.word	0x0800b6ad
 800b678:	0800b695 	.word	0x0800b695
 800b67c:	0800b6ad 	.word	0x0800b6ad
 800b680:	0800b6ad 	.word	0x0800b6ad
 800b684:	0800b6ad 	.word	0x0800b6ad
 800b688:	0800b6a5 	.word	0x0800b6a5
 800b68c:	2300      	movs	r3, #0
 800b68e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b692:	e042      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b694:	2302      	movs	r3, #2
 800b696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b69a:	e03e      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b69c:	2304      	movs	r3, #4
 800b69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6a2:	e03a      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b6a4:	2308      	movs	r3, #8
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6aa:	e036      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6b2:	e032      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4a43      	ldr	r2, [pc, #268]	; (800b7c8 <UART_SetConfig+0x284>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d12a      	bne.n	800b714 <UART_SetConfig+0x1d0>
 800b6be:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b6c2:	f7ff fad1 	bl	800ac68 <LL_RCC_GetLPUARTClockSource>
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6cc:	d01a      	beq.n	800b704 <UART_SetConfig+0x1c0>
 800b6ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6d2:	d81b      	bhi.n	800b70c <UART_SetConfig+0x1c8>
 800b6d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6d8:	d00c      	beq.n	800b6f4 <UART_SetConfig+0x1b0>
 800b6da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6de:	d815      	bhi.n	800b70c <UART_SetConfig+0x1c8>
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <UART_SetConfig+0x1a8>
 800b6e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6e8:	d008      	beq.n	800b6fc <UART_SetConfig+0x1b8>
 800b6ea:	e00f      	b.n	800b70c <UART_SetConfig+0x1c8>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6f2:	e012      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6fa:	e00e      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b6fc:	2304      	movs	r3, #4
 800b6fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b702:	e00a      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b704:	2308      	movs	r3, #8
 800b706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b70a:	e006      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b70c:	2310      	movs	r3, #16
 800b70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b712:	e002      	b.n	800b71a <UART_SetConfig+0x1d6>
 800b714:	2310      	movs	r3, #16
 800b716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a2a      	ldr	r2, [pc, #168]	; (800b7c8 <UART_SetConfig+0x284>)
 800b720:	4293      	cmp	r3, r2
 800b722:	f040 80a4 	bne.w	800b86e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b72a:	2b08      	cmp	r3, #8
 800b72c:	d823      	bhi.n	800b776 <UART_SetConfig+0x232>
 800b72e:	a201      	add	r2, pc, #4	; (adr r2, 800b734 <UART_SetConfig+0x1f0>)
 800b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b734:	0800b759 	.word	0x0800b759
 800b738:	0800b777 	.word	0x0800b777
 800b73c:	0800b761 	.word	0x0800b761
 800b740:	0800b777 	.word	0x0800b777
 800b744:	0800b767 	.word	0x0800b767
 800b748:	0800b777 	.word	0x0800b777
 800b74c:	0800b777 	.word	0x0800b777
 800b750:	0800b777 	.word	0x0800b777
 800b754:	0800b76f 	.word	0x0800b76f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b758:	f7fd fe76 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800b75c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b75e:	e010      	b.n	800b782 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b760:	4b1c      	ldr	r3, [pc, #112]	; (800b7d4 <UART_SetConfig+0x290>)
 800b762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b764:	e00d      	b.n	800b782 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b766:	f7fd fdbb 	bl	80092e0 <HAL_RCC_GetSysClockFreq>
 800b76a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b76c:	e009      	b.n	800b782 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b76e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b772:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b774:	e005      	b.n	800b782 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b77a:	2301      	movs	r3, #1
 800b77c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b780:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b784:	2b00      	cmp	r3, #0
 800b786:	f000 8137 	beq.w	800b9f8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b78e:	4a12      	ldr	r2, [pc, #72]	; (800b7d8 <UART_SetConfig+0x294>)
 800b790:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b794:	461a      	mov	r2, r3
 800b796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b798:	fbb3 f3f2 	udiv	r3, r3, r2
 800b79c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	685a      	ldr	r2, [r3, #4]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	005b      	lsls	r3, r3, #1
 800b7a6:	4413      	add	r3, r2
 800b7a8:	69ba      	ldr	r2, [r7, #24]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d305      	bcc.n	800b7ba <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7b4:	69ba      	ldr	r2, [r7, #24]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d910      	bls.n	800b7dc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7c0:	e11a      	b.n	800b9f8 <UART_SetConfig+0x4b4>
 800b7c2:	bf00      	nop
 800b7c4:	cfff69f3 	.word	0xcfff69f3
 800b7c8:	40008000 	.word	0x40008000
 800b7cc:	40013800 	.word	0x40013800
 800b7d0:	40004400 	.word	0x40004400
 800b7d4:	00f42400 	.word	0x00f42400
 800b7d8:	0801f5e4 	.word	0x0801f5e4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7de:	2200      	movs	r2, #0
 800b7e0:	60bb      	str	r3, [r7, #8]
 800b7e2:	60fa      	str	r2, [r7, #12]
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e8:	4a8e      	ldr	r2, [pc, #568]	; (800ba24 <UART_SetConfig+0x4e0>)
 800b7ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	603b      	str	r3, [r7, #0]
 800b7f4:	607a      	str	r2, [r7, #4]
 800b7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b7fe:	f7f5 fbc5 	bl	8000f8c <__aeabi_uldivmod>
 800b802:	4602      	mov	r2, r0
 800b804:	460b      	mov	r3, r1
 800b806:	4610      	mov	r0, r2
 800b808:	4619      	mov	r1, r3
 800b80a:	f04f 0200 	mov.w	r2, #0
 800b80e:	f04f 0300 	mov.w	r3, #0
 800b812:	020b      	lsls	r3, r1, #8
 800b814:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b818:	0202      	lsls	r2, r0, #8
 800b81a:	6979      	ldr	r1, [r7, #20]
 800b81c:	6849      	ldr	r1, [r1, #4]
 800b81e:	0849      	lsrs	r1, r1, #1
 800b820:	2000      	movs	r0, #0
 800b822:	460c      	mov	r4, r1
 800b824:	4605      	mov	r5, r0
 800b826:	eb12 0804 	adds.w	r8, r2, r4
 800b82a:	eb43 0905 	adc.w	r9, r3, r5
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	469a      	mov	sl, r3
 800b836:	4693      	mov	fp, r2
 800b838:	4652      	mov	r2, sl
 800b83a:	465b      	mov	r3, fp
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f5 fba4 	bl	8000f8c <__aeabi_uldivmod>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4613      	mov	r3, r2
 800b84a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b852:	d308      	bcc.n	800b866 <UART_SetConfig+0x322>
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b85a:	d204      	bcs.n	800b866 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	6a3a      	ldr	r2, [r7, #32]
 800b862:	60da      	str	r2, [r3, #12]
 800b864:	e0c8      	b.n	800b9f8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b86c:	e0c4      	b.n	800b9f8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	69db      	ldr	r3, [r3, #28]
 800b872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b876:	d167      	bne.n	800b948 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b878:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b87c:	2b08      	cmp	r3, #8
 800b87e:	d828      	bhi.n	800b8d2 <UART_SetConfig+0x38e>
 800b880:	a201      	add	r2, pc, #4	; (adr r2, 800b888 <UART_SetConfig+0x344>)
 800b882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b886:	bf00      	nop
 800b888:	0800b8ad 	.word	0x0800b8ad
 800b88c:	0800b8b5 	.word	0x0800b8b5
 800b890:	0800b8bd 	.word	0x0800b8bd
 800b894:	0800b8d3 	.word	0x0800b8d3
 800b898:	0800b8c3 	.word	0x0800b8c3
 800b89c:	0800b8d3 	.word	0x0800b8d3
 800b8a0:	0800b8d3 	.word	0x0800b8d3
 800b8a4:	0800b8d3 	.word	0x0800b8d3
 800b8a8:	0800b8cb 	.word	0x0800b8cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8ac:	f7fd fdcc 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800b8b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8b2:	e014      	b.n	800b8de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8b4:	f7fd fdda 	bl	800946c <HAL_RCC_GetPCLK2Freq>
 800b8b8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ba:	e010      	b.n	800b8de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8bc:	4b5a      	ldr	r3, [pc, #360]	; (800ba28 <UART_SetConfig+0x4e4>)
 800b8be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8c0:	e00d      	b.n	800b8de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8c2:	f7fd fd0d 	bl	80092e0 <HAL_RCC_GetSysClockFreq>
 800b8c6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8c8:	e009      	b.n	800b8de <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8d0:	e005      	b.n	800b8de <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f000 8089 	beq.w	800b9f8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	4a4e      	ldr	r2, [pc, #312]	; (800ba24 <UART_SetConfig+0x4e0>)
 800b8ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b8f8:	005a      	lsls	r2, r3, #1
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	085b      	lsrs	r3, r3, #1
 800b900:	441a      	add	r2, r3
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	fbb2 f3f3 	udiv	r3, r2, r3
 800b90a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b90c:	6a3b      	ldr	r3, [r7, #32]
 800b90e:	2b0f      	cmp	r3, #15
 800b910:	d916      	bls.n	800b940 <UART_SetConfig+0x3fc>
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b918:	d212      	bcs.n	800b940 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b91a:	6a3b      	ldr	r3, [r7, #32]
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	f023 030f 	bic.w	r3, r3, #15
 800b922:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	085b      	lsrs	r3, r3, #1
 800b928:	b29b      	uxth	r3, r3
 800b92a:	f003 0307 	and.w	r3, r3, #7
 800b92e:	b29a      	uxth	r2, r3
 800b930:	8bfb      	ldrh	r3, [r7, #30]
 800b932:	4313      	orrs	r3, r2
 800b934:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b936:	697b      	ldr	r3, [r7, #20]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	8bfa      	ldrh	r2, [r7, #30]
 800b93c:	60da      	str	r2, [r3, #12]
 800b93e:	e05b      	b.n	800b9f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b940:	2301      	movs	r3, #1
 800b942:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b946:	e057      	b.n	800b9f8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b948:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b94c:	2b08      	cmp	r3, #8
 800b94e:	d828      	bhi.n	800b9a2 <UART_SetConfig+0x45e>
 800b950:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <UART_SetConfig+0x414>)
 800b952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b956:	bf00      	nop
 800b958:	0800b97d 	.word	0x0800b97d
 800b95c:	0800b985 	.word	0x0800b985
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	0800b9a3 	.word	0x0800b9a3
 800b968:	0800b993 	.word	0x0800b993
 800b96c:	0800b9a3 	.word	0x0800b9a3
 800b970:	0800b9a3 	.word	0x0800b9a3
 800b974:	0800b9a3 	.word	0x0800b9a3
 800b978:	0800b99b 	.word	0x0800b99b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b97c:	f7fd fd64 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800b980:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b982:	e014      	b.n	800b9ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b984:	f7fd fd72 	bl	800946c <HAL_RCC_GetPCLK2Freq>
 800b988:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b98a:	e010      	b.n	800b9ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b98c:	4b26      	ldr	r3, [pc, #152]	; (800ba28 <UART_SetConfig+0x4e4>)
 800b98e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b990:	e00d      	b.n	800b9ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b992:	f7fd fca5 	bl	80092e0 <HAL_RCC_GetSysClockFreq>
 800b996:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b998:	e009      	b.n	800b9ae <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b99a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b99e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9a0:	e005      	b.n	800b9ae <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b9ac:	bf00      	nop
    }

    if (pclk != 0U)
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d021      	beq.n	800b9f8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9b8:	4a1a      	ldr	r2, [pc, #104]	; (800ba24 <UART_SetConfig+0x4e0>)
 800b9ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9be:	461a      	mov	r2, r3
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	085b      	lsrs	r3, r3, #1
 800b9cc:	441a      	add	r2, r3
 800b9ce:	697b      	ldr	r3, [r7, #20]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9d8:	6a3b      	ldr	r3, [r7, #32]
 800b9da:	2b0f      	cmp	r3, #15
 800b9dc:	d909      	bls.n	800b9f2 <UART_SetConfig+0x4ae>
 800b9de:	6a3b      	ldr	r3, [r7, #32]
 800b9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e4:	d205      	bcs.n	800b9f2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9e6:	6a3b      	ldr	r3, [r7, #32]
 800b9e8:	b29a      	uxth	r2, r3
 800b9ea:	697b      	ldr	r3, [r7, #20]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	60da      	str	r2, [r3, #12]
 800b9f0:	e002      	b.n	800b9f8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	2201      	movs	r2, #1
 800ba04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2200      	movs	r2, #0
 800ba12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba14:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3730      	adds	r7, #48	; 0x30
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba22:	bf00      	nop
 800ba24:	0801f5e4 	.word	0x0801f5e4
 800ba28:	00f42400 	.word	0x00f42400

0800ba2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b083      	sub	sp, #12
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba38:	f003 0301 	and.w	r3, r3, #1
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d00a      	beq.n	800ba56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba5a:	f003 0302 	and.w	r3, r3, #2
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00a      	beq.n	800ba78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685b      	ldr	r3, [r3, #4]
 800ba68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	430a      	orrs	r2, r1
 800ba76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba7c:	f003 0304 	and.w	r3, r3, #4
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d00a      	beq.n	800ba9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	430a      	orrs	r2, r1
 800ba98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba9e:	f003 0308 	and.w	r3, r3, #8
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00a      	beq.n	800babc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	430a      	orrs	r2, r1
 800baba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac0:	f003 0310 	and.w	r3, r3, #16
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00a      	beq.n	800bade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	689b      	ldr	r3, [r3, #8]
 800bace:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bae2:	f003 0320 	and.w	r3, r3, #32
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d00a      	beq.n	800bb00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	430a      	orrs	r2, r1
 800bafe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d01a      	beq.n	800bb42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	430a      	orrs	r2, r1
 800bb20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb2a:	d10a      	bne.n	800bb42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	430a      	orrs	r2, r1
 800bb40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d00a      	beq.n	800bb64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	430a      	orrs	r2, r1
 800bb62:	605a      	str	r2, [r3, #4]
  }
}
 800bb64:	bf00      	nop
 800bb66:	370c      	adds	r7, #12
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bc80      	pop	{r7}
 800bb6c:	4770      	bx	lr

0800bb6e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b086      	sub	sp, #24
 800bb72:	af02      	add	r7, sp, #8
 800bb74:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb7e:	f7f6 ff7b 	bl	8002a78 <HAL_GetTick>
 800bb82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f003 0308 	and.w	r3, r3, #8
 800bb8e:	2b08      	cmp	r3, #8
 800bb90:	d10e      	bne.n	800bbb0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bb92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bb96:	9300      	str	r3, [sp, #0]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bba0:	6878      	ldr	r0, [r7, #4]
 800bba2:	f000 f832 	bl	800bc0a <UART_WaitOnFlagUntilTimeout>
 800bba6:	4603      	mov	r3, r0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d001      	beq.n	800bbb0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e028      	b.n	800bc02 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f003 0304 	and.w	r3, r3, #4
 800bbba:	2b04      	cmp	r3, #4
 800bbbc:	d10e      	bne.n	800bbdc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbc2:	9300      	str	r3, [sp, #0]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f81c 	bl	800bc0a <UART_WaitOnFlagUntilTimeout>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e012      	b.n	800bc02 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2220      	movs	r2, #32
 800bbe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2220      	movs	r2, #32
 800bbe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc00:	2300      	movs	r3, #0
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3710      	adds	r7, #16
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd80      	pop	{r7, pc}

0800bc0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b09c      	sub	sp, #112	; 0x70
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	60f8      	str	r0, [r7, #12]
 800bc12:	60b9      	str	r1, [r7, #8]
 800bc14:	603b      	str	r3, [r7, #0]
 800bc16:	4613      	mov	r3, r2
 800bc18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc1a:	e0a9      	b.n	800bd70 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc22:	f000 80a5 	beq.w	800bd70 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc26:	f7f6 ff27 	bl	8002a78 <HAL_GetTick>
 800bc2a:	4602      	mov	r2, r0
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d302      	bcc.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x32>
 800bc36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d140      	bne.n	800bcbe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc44:	e853 3f00 	ldrex	r3, [r3]
 800bc48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc50:	667b      	str	r3, [r7, #100]	; 0x64
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	461a      	mov	r2, r3
 800bc58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc62:	e841 2300 	strex	r3, r2, [r1]
 800bc66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1e6      	bne.n	800bc3c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	3308      	adds	r3, #8
 800bc74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc78:	e853 3f00 	ldrex	r3, [r3]
 800bc7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc80:	f023 0301 	bic.w	r3, r3, #1
 800bc84:	663b      	str	r3, [r7, #96]	; 0x60
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bc8e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bc90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bc94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc96:	e841 2300 	strex	r3, r2, [r1]
 800bc9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bc9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d1e5      	bne.n	800bc6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2220      	movs	r2, #32
 800bca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2220      	movs	r2, #32
 800bcae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800bcba:	2303      	movs	r3, #3
 800bcbc:	e069      	b.n	800bd92 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d051      	beq.n	800bd70 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcda:	d149      	bne.n	800bd70 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bce4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcee:	e853 3f00 	ldrex	r3, [r3]
 800bcf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bcfa:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	461a      	mov	r2, r3
 800bd02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd04:	637b      	str	r3, [r7, #52]	; 0x34
 800bd06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd0c:	e841 2300 	strex	r3, r2, [r1]
 800bd10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d1e6      	bne.n	800bce6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3308      	adds	r3, #8
 800bd1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd20:	697b      	ldr	r3, [r7, #20]
 800bd22:	e853 3f00 	ldrex	r3, [r3]
 800bd26:	613b      	str	r3, [r7, #16]
   return(result);
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f023 0301 	bic.w	r3, r3, #1
 800bd2e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd38:	623a      	str	r2, [r7, #32]
 800bd3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd3c:	69f9      	ldr	r1, [r7, #28]
 800bd3e:	6a3a      	ldr	r2, [r7, #32]
 800bd40:	e841 2300 	strex	r3, r2, [r1]
 800bd44:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1e5      	bne.n	800bd18 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	2220      	movs	r2, #32
 800bd50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2220      	movs	r2, #32
 800bd58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	2220      	movs	r2, #32
 800bd60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd6c:	2303      	movs	r3, #3
 800bd6e:	e010      	b.n	800bd92 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	69da      	ldr	r2, [r3, #28]
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	bf0c      	ite	eq
 800bd80:	2301      	moveq	r3, #1
 800bd82:	2300      	movne	r3, #0
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	461a      	mov	r2, r3
 800bd88:	79fb      	ldrb	r3, [r7, #7]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	f43f af46 	beq.w	800bc1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3770      	adds	r7, #112	; 0x70
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
	...

0800bd9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b0a3      	sub	sp, #140	; 0x8c
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	4613      	mov	r3, r2
 800bda8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68ba      	ldr	r2, [r7, #8]
 800bdae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	88fa      	ldrh	r2, [r7, #6]
 800bdb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	88fa      	ldrh	r2, [r7, #6]
 800bdbc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdce:	d10e      	bne.n	800bdee <UART_Start_Receive_IT+0x52>
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d105      	bne.n	800bde4 <UART_Start_Receive_IT+0x48>
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdde:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bde2:	e02d      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	22ff      	movs	r2, #255	; 0xff
 800bde8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdec:	e028      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d10d      	bne.n	800be12 <UART_Start_Receive_IT+0x76>
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	691b      	ldr	r3, [r3, #16]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d104      	bne.n	800be08 <UART_Start_Receive_IT+0x6c>
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	22ff      	movs	r2, #255	; 0xff
 800be02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be06:	e01b      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	227f      	movs	r2, #127	; 0x7f
 800be0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be10:	e016      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be1a:	d10d      	bne.n	800be38 <UART_Start_Receive_IT+0x9c>
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	691b      	ldr	r3, [r3, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d104      	bne.n	800be2e <UART_Start_Receive_IT+0x92>
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	227f      	movs	r2, #127	; 0x7f
 800be28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be2c:	e008      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	223f      	movs	r2, #63	; 0x3f
 800be32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be36:	e003      	b.n	800be40 <UART_Start_Receive_IT+0xa4>
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2200      	movs	r2, #0
 800be3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	2200      	movs	r2, #0
 800be44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	2222      	movs	r2, #34	; 0x22
 800be4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	3308      	adds	r3, #8
 800be56:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be5a:	e853 3f00 	ldrex	r3, [r3]
 800be5e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800be60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be62:	f043 0301 	orr.w	r3, r3, #1
 800be66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3308      	adds	r3, #8
 800be70:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800be74:	673a      	str	r2, [r7, #112]	; 0x70
 800be76:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800be7a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be7c:	e841 2300 	strex	r3, r2, [r1]
 800be80:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800be82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e3      	bne.n	800be50 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be90:	d14f      	bne.n	800bf32 <UART_Start_Receive_IT+0x196>
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800be98:	88fa      	ldrh	r2, [r7, #6]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d349      	bcc.n	800bf32 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bea6:	d107      	bne.n	800beb8 <UART_Start_Receive_IT+0x11c>
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	4a46      	ldr	r2, [pc, #280]	; (800bfcc <UART_Start_Receive_IT+0x230>)
 800beb4:	675a      	str	r2, [r3, #116]	; 0x74
 800beb6:	e002      	b.n	800bebe <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4a45      	ldr	r2, [pc, #276]	; (800bfd0 <UART_Start_Receive_IT+0x234>)
 800bebc:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d01a      	beq.n	800befc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bece:	e853 3f00 	ldrex	r3, [r3]
 800bed2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800beda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	461a      	mov	r2, r3
 800bee4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bee8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800beea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800beee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bef0:	e841 2300 	strex	r3, r2, [r1]
 800bef4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d1e4      	bne.n	800bec6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	3308      	adds	r3, #8
 800bf02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf06:	e853 3f00 	ldrex	r3, [r3]
 800bf0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf12:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf1c:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf24:	e841 2300 	strex	r3, r2, [r1]
 800bf28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e5      	bne.n	800befc <UART_Start_Receive_IT+0x160>
 800bf30:	e046      	b.n	800bfc0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf3a:	d107      	bne.n	800bf4c <UART_Start_Receive_IT+0x1b0>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4a23      	ldr	r2, [pc, #140]	; (800bfd4 <UART_Start_Receive_IT+0x238>)
 800bf48:	675a      	str	r2, [r3, #116]	; 0x74
 800bf4a:	e002      	b.n	800bf52 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	4a22      	ldr	r2, [pc, #136]	; (800bfd8 <UART_Start_Receive_IT+0x23c>)
 800bf50:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d019      	beq.n	800bf8e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf62:	e853 3f00 	ldrex	r3, [r3]
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf6a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bf6e:	677b      	str	r3, [r7, #116]	; 0x74
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	461a      	mov	r2, r3
 800bf76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf78:	637b      	str	r3, [r7, #52]	; 0x34
 800bf7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf80:	e841 2300 	strex	r3, r2, [r1]
 800bf84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e6      	bne.n	800bf5a <UART_Start_Receive_IT+0x1be>
 800bf8c:	e018      	b.n	800bfc0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	e853 3f00 	ldrex	r3, [r3]
 800bf9a:	613b      	str	r3, [r7, #16]
   return(result);
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f043 0320 	orr.w	r3, r3, #32
 800bfa2:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfac:	623b      	str	r3, [r7, #32]
 800bfae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfb0:	69f9      	ldr	r1, [r7, #28]
 800bfb2:	6a3a      	ldr	r2, [r7, #32]
 800bfb4:	e841 2300 	strex	r3, r2, [r1]
 800bfb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfba:	69bb      	ldr	r3, [r7, #24]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d1e6      	bne.n	800bf8e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bfc0:	2300      	movs	r3, #0
}
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	378c      	adds	r7, #140	; 0x8c
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	bc80      	pop	{r7}
 800bfca:	4770      	bx	lr
 800bfcc:	0800c9b1 	.word	0x0800c9b1
 800bfd0:	0800c651 	.word	0x0800c651
 800bfd4:	0800c499 	.word	0x0800c499
 800bfd8:	0800c2e1 	.word	0x0800c2e1

0800bfdc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b08f      	sub	sp, #60	; 0x3c
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	e853 3f00 	ldrex	r3, [r3]
 800bff0:	61fb      	str	r3, [r7, #28]
   return(result);
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bff8:	637b      	str	r3, [r7, #52]	; 0x34
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	461a      	mov	r2, r3
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c004:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c006:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c008:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c00a:	e841 2300 	strex	r3, r2, [r1]
 800c00e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1e6      	bne.n	800bfe4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	3308      	adds	r3, #8
 800c01c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	60bb      	str	r3, [r7, #8]
   return(result);
 800c026:	68bb      	ldr	r3, [r7, #8]
 800c028:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c02c:	633b      	str	r3, [r7, #48]	; 0x30
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3308      	adds	r3, #8
 800c034:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c036:	61ba      	str	r2, [r7, #24]
 800c038:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6979      	ldr	r1, [r7, #20]
 800c03c:	69ba      	ldr	r2, [r7, #24]
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	613b      	str	r3, [r7, #16]
   return(result);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e5      	bne.n	800c016 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c052:	bf00      	nop
 800c054:	373c      	adds	r7, #60	; 0x3c
 800c056:	46bd      	mov	sp, r7
 800c058:	bc80      	pop	{r7}
 800c05a:	4770      	bx	lr

0800c05c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b095      	sub	sp, #84	; 0x54
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c06c:	e853 3f00 	ldrex	r3, [r3]
 800c070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	461a      	mov	r2, r3
 800c080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c082:	643b      	str	r3, [r7, #64]	; 0x40
 800c084:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c08a:	e841 2300 	strex	r3, r2, [r1]
 800c08e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c092:	2b00      	cmp	r3, #0
 800c094:	d1e6      	bne.n	800c064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	3308      	adds	r3, #8
 800c09c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c09e:	6a3b      	ldr	r3, [r7, #32]
 800c0a0:	e853 3f00 	ldrex	r3, [r3]
 800c0a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0a6:	69fb      	ldr	r3, [r7, #28]
 800c0a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0ac:	f023 0301 	bic.w	r3, r3, #1
 800c0b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0c2:	e841 2300 	strex	r3, r2, [r1]
 800c0c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1e3      	bne.n	800c096 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0d2:	2b01      	cmp	r3, #1
 800c0d4:	d118      	bne.n	800c108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	e853 3f00 	ldrex	r3, [r3]
 800c0e2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	f023 0310 	bic.w	r3, r3, #16
 800c0ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0f4:	61bb      	str	r3, [r7, #24]
 800c0f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f8:	6979      	ldr	r1, [r7, #20]
 800c0fa:	69ba      	ldr	r2, [r7, #24]
 800c0fc:	e841 2300 	strex	r3, r2, [r1]
 800c100:	613b      	str	r3, [r7, #16]
   return(result);
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d1e6      	bne.n	800c0d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2220      	movs	r2, #32
 800c10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	2200      	movs	r2, #0
 800c114:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2200      	movs	r2, #0
 800c11a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c11c:	bf00      	nop
 800c11e:	3754      	adds	r7, #84	; 0x54
 800c120:	46bd      	mov	sp, r7
 800c122:	bc80      	pop	{r7}
 800c124:	4770      	bx	lr

0800c126 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c126:	b580      	push	{r7, lr}
 800c128:	b090      	sub	sp, #64	; 0x40
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f003 0320 	and.w	r3, r3, #32
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d137      	bne.n	800c1b2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c144:	2200      	movs	r2, #0
 800c146:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	3308      	adds	r3, #8
 800c150:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c154:	e853 3f00 	ldrex	r3, [r3]
 800c158:	623b      	str	r3, [r7, #32]
   return(result);
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c160:	63bb      	str	r3, [r7, #56]	; 0x38
 800c162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3308      	adds	r3, #8
 800c168:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c16a:	633a      	str	r2, [r7, #48]	; 0x30
 800c16c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c172:	e841 2300 	strex	r3, r2, [r1]
 800c176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1e5      	bne.n	800c14a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	e853 3f00 	ldrex	r3, [r3]
 800c18a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c192:	637b      	str	r3, [r7, #52]	; 0x34
 800c194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	461a      	mov	r2, r3
 800c19a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19c:	61fb      	str	r3, [r7, #28]
 800c19e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1a0:	69b9      	ldr	r1, [r7, #24]
 800c1a2:	69fa      	ldr	r2, [r7, #28]
 800c1a4:	e841 2300 	strex	r3, r2, [r1]
 800c1a8:	617b      	str	r3, [r7, #20]
   return(result);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1e6      	bne.n	800c17e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1b0:	e002      	b.n	800c1b8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c1b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c1b4:	f7f7 fa4e 	bl	8003654 <HAL_UART_TxCpltCallback>
}
 800c1b8:	bf00      	nop
 800c1ba:	3740      	adds	r7, #64	; 0x40
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f7ff f99a 	bl	800b508 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1d4:	bf00      	nop
 800c1d6:	3710      	adds	r7, #16
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b086      	sub	sp, #24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c1f0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c1f2:	697b      	ldr	r3, [r7, #20]
 800c1f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1f8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c204:	2b80      	cmp	r3, #128	; 0x80
 800c206:	d109      	bne.n	800c21c <UART_DMAError+0x40>
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	2b21      	cmp	r3, #33	; 0x21
 800c20c:	d106      	bne.n	800c21c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2200      	movs	r2, #0
 800c212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c216:	6978      	ldr	r0, [r7, #20]
 800c218:	f7ff fee0 	bl	800bfdc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c226:	2b40      	cmp	r3, #64	; 0x40
 800c228:	d109      	bne.n	800c23e <UART_DMAError+0x62>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2b22      	cmp	r3, #34	; 0x22
 800c22e:	d106      	bne.n	800c23e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	2200      	movs	r2, #0
 800c234:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c238:	6978      	ldr	r0, [r7, #20]
 800c23a:	f7ff ff0f 	bl	800c05c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c244:	f043 0210 	orr.w	r2, r3, #16
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c24e:	6978      	ldr	r0, [r7, #20]
 800c250:	f7ff f963 	bl	800b51a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c254:	bf00      	nop
 800c256:	3718      	adds	r7, #24
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c268:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	2200      	movs	r2, #0
 800c276:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f7ff f94d 	bl	800b51a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c280:	bf00      	nop
 800c282:	3710      	adds	r7, #16
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b088      	sub	sp, #32
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	e853 3f00 	ldrex	r3, [r3]
 800c29c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2a4:	61fb      	str	r3, [r7, #28]
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	461a      	mov	r2, r3
 800c2ac:	69fb      	ldr	r3, [r7, #28]
 800c2ae:	61bb      	str	r3, [r7, #24]
 800c2b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b2:	6979      	ldr	r1, [r7, #20]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	e841 2300 	strex	r3, r2, [r1]
 800c2ba:	613b      	str	r3, [r7, #16]
   return(result);
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1e6      	bne.n	800c290 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2220      	movs	r2, #32
 800c2c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7f7 f9bf 	bl	8003654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2d6:	bf00      	nop
 800c2d8:	3720      	adds	r7, #32
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}
	...

0800c2e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b09c      	sub	sp, #112	; 0x70
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c2ee:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2f8:	2b22      	cmp	r3, #34	; 0x22
 800c2fa:	f040 80be 	bne.w	800c47a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c304:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c308:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c30c:	b2d9      	uxtb	r1, r3
 800c30e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c312:	b2da      	uxtb	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c318:	400a      	ands	r2, r1
 800c31a:	b2d2      	uxtb	r2, r2
 800c31c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c322:	1c5a      	adds	r2, r3, #1
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c32e:	b29b      	uxth	r3, r3
 800c330:	3b01      	subs	r3, #1
 800c332:	b29a      	uxth	r2, r3
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	f040 80a1 	bne.w	800c48a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c350:	e853 3f00 	ldrex	r3, [r3]
 800c354:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c358:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c35c:	66bb      	str	r3, [r7, #104]	; 0x68
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	461a      	mov	r2, r3
 800c364:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c366:	65bb      	str	r3, [r7, #88]	; 0x58
 800c368:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c36a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c36c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1e6      	bne.n	800c348 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3308      	adds	r3, #8
 800c380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c384:	e853 3f00 	ldrex	r3, [r3]
 800c388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	f023 0301 	bic.w	r3, r3, #1
 800c390:	667b      	str	r3, [r7, #100]	; 0x64
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c39a:	647a      	str	r2, [r7, #68]	; 0x44
 800c39c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c39e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3a2:	e841 2300 	strex	r3, r2, [r1]
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d1e5      	bne.n	800c37a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2220      	movs	r2, #32
 800c3b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4a33      	ldr	r2, [pc, #204]	; (800c494 <UART_RxISR_8BIT+0x1b4>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d01f      	beq.n	800c40c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d018      	beq.n	800c40c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e2:	e853 3f00 	ldrex	r3, [r3]
 800c3e6:	623b      	str	r3, [r7, #32]
   return(result);
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c3ee:	663b      	str	r3, [r7, #96]	; 0x60
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c3f8:	633b      	str	r3, [r7, #48]	; 0x30
 800c3fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d1e6      	bne.n	800c3da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c410:	2b01      	cmp	r3, #1
 800c412:	d12e      	bne.n	800c472 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	e853 3f00 	ldrex	r3, [r3]
 800c426:	60fb      	str	r3, [r7, #12]
   return(result);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	f023 0310 	bic.w	r3, r3, #16
 800c42e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	461a      	mov	r2, r3
 800c436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c438:	61fb      	str	r3, [r7, #28]
 800c43a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43c:	69b9      	ldr	r1, [r7, #24]
 800c43e:	69fa      	ldr	r2, [r7, #28]
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	617b      	str	r3, [r7, #20]
   return(result);
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e6      	bne.n	800c41a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	69db      	ldr	r3, [r3, #28]
 800c452:	f003 0310 	and.w	r3, r3, #16
 800c456:	2b10      	cmp	r3, #16
 800c458:	d103      	bne.n	800c462 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	2210      	movs	r2, #16
 800c460:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c468:	4619      	mov	r1, r3
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7ff f85e 	bl	800b52c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c470:	e00b      	b.n	800c48a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7f7 f904 	bl	8003680 <HAL_UART_RxCpltCallback>
}
 800c478:	e007      	b.n	800c48a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	699a      	ldr	r2, [r3, #24]
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f042 0208 	orr.w	r2, r2, #8
 800c488:	619a      	str	r2, [r3, #24]
}
 800c48a:	bf00      	nop
 800c48c:	3770      	adds	r7, #112	; 0x70
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	40008000 	.word	0x40008000

0800c498 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b09c      	sub	sp, #112	; 0x70
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4b0:	2b22      	cmp	r3, #34	; 0x22
 800c4b2:	f040 80be 	bne.w	800c632 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4bc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4c4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c4c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c4ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4da:	1c9a      	adds	r2, r3, #2
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f040 80a1 	bne.w	800c642 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c508:	e853 3f00 	ldrex	r3, [r3]
 800c50c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c50e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c510:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c514:	667b      	str	r3, [r7, #100]	; 0x64
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	461a      	mov	r2, r3
 800c51c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c51e:	657b      	str	r3, [r7, #84]	; 0x54
 800c520:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c522:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c524:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c526:	e841 2300 	strex	r3, r2, [r1]
 800c52a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c52c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d1e6      	bne.n	800c500 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	3308      	adds	r3, #8
 800c538:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	e853 3f00 	ldrex	r3, [r3]
 800c540:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	663b      	str	r3, [r7, #96]	; 0x60
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c552:	643a      	str	r2, [r7, #64]	; 0x40
 800c554:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e5      	bne.n	800c532 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2220      	movs	r2, #32
 800c56a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2200      	movs	r2, #0
 800c572:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2200      	movs	r2, #0
 800c578:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a33      	ldr	r2, [pc, #204]	; (800c64c <UART_RxISR_16BIT+0x1b4>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d01f      	beq.n	800c5c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	685b      	ldr	r3, [r3, #4]
 800c58a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d018      	beq.n	800c5c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c598:	6a3b      	ldr	r3, [r7, #32]
 800c59a:	e853 3f00 	ldrex	r3, [r3]
 800c59e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5a0:	69fb      	ldr	r3, [r7, #28]
 800c5a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5b2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5b8:	e841 2300 	strex	r3, r2, [r1]
 800c5bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d1e6      	bne.n	800c592 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5c8:	2b01      	cmp	r3, #1
 800c5ca:	d12e      	bne.n	800c62a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	e853 3f00 	ldrex	r3, [r3]
 800c5de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	f023 0310 	bic.w	r3, r3, #16
 800c5e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	461a      	mov	r2, r3
 800c5ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c5f0:	61bb      	str	r3, [r7, #24]
 800c5f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f4:	6979      	ldr	r1, [r7, #20]
 800c5f6:	69ba      	ldr	r2, [r7, #24]
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e6      	bne.n	800c5d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	69db      	ldr	r3, [r3, #28]
 800c60a:	f003 0310 	and.w	r3, r3, #16
 800c60e:	2b10      	cmp	r3, #16
 800c610:	d103      	bne.n	800c61a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2210      	movs	r2, #16
 800c618:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f7fe ff82 	bl	800b52c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c628:	e00b      	b.n	800c642 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f7f7 f828 	bl	8003680 <HAL_UART_RxCpltCallback>
}
 800c630:	e007      	b.n	800c642 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	699a      	ldr	r2, [r3, #24]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	f042 0208 	orr.w	r2, r2, #8
 800c640:	619a      	str	r2, [r3, #24]
}
 800c642:	bf00      	nop
 800c644:	3770      	adds	r7, #112	; 0x70
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	40008000 	.word	0x40008000

0800c650 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b0ac      	sub	sp, #176	; 0xb0
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c65e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	69db      	ldr	r3, [r3, #28]
 800c668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	689b      	ldr	r3, [r3, #8]
 800c67c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c686:	2b22      	cmp	r3, #34	; 0x22
 800c688:	f040 8182 	bne.w	800c990 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c692:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c696:	e125      	b.n	800c8e4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c69e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c6a6:	b2d9      	uxtb	r1, r3
 800c6a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6b2:	400a      	ands	r2, r1
 800c6b4:	b2d2      	uxtb	r2, r2
 800c6b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6bc:	1c5a      	adds	r2, r3, #1
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	b29a      	uxth	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c6de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d053      	beq.n	800c792 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c6ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d011      	beq.n	800c71a <UART_RxISR_8BIT_FIFOEN+0xca>
 800c6f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00b      	beq.n	800c71a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2201      	movs	r2, #1
 800c708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c710:	f043 0201 	orr.w	r2, r3, #1
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c71a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c71e:	f003 0302 	and.w	r3, r3, #2
 800c722:	2b00      	cmp	r3, #0
 800c724:	d011      	beq.n	800c74a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c72a:	f003 0301 	and.w	r3, r3, #1
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d00b      	beq.n	800c74a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	2202      	movs	r2, #2
 800c738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c740:	f043 0204 	orr.w	r2, r3, #4
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c74a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c74e:	f003 0304 	and.w	r3, r3, #4
 800c752:	2b00      	cmp	r3, #0
 800c754:	d011      	beq.n	800c77a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00b      	beq.n	800c77a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	2204      	movs	r2, #4
 800c768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c770:	f043 0202 	orr.w	r2, r3, #2
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c780:	2b00      	cmp	r3, #0
 800c782:	d006      	beq.n	800c792 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7fe fec8 	bl	800b51a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2200      	movs	r2, #0
 800c78e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c798:	b29b      	uxth	r3, r3
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f040 80a2 	bne.w	800c8e4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7a8:	e853 3f00 	ldrex	r3, [r3]
 800c7ac:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c7ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	461a      	mov	r2, r3
 800c7be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7c4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c7c8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c7ca:	e841 2300 	strex	r3, r2, [r1]
 800c7ce:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c7d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1e4      	bne.n	800c7a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3308      	adds	r3, #8
 800c7dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c7e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c7ec:	f023 0301 	bic.w	r3, r3, #1
 800c7f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	3308      	adds	r3, #8
 800c7fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c7fe:	66ba      	str	r2, [r7, #104]	; 0x68
 800c800:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c802:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c804:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c806:	e841 2300 	strex	r3, r2, [r1]
 800c80a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c80c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d1e1      	bne.n	800c7d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	2220      	movs	r2, #32
 800c816:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2200      	movs	r2, #0
 800c824:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a5f      	ldr	r2, [pc, #380]	; (800c9a8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d021      	beq.n	800c874 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d01a      	beq.n	800c874 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c844:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c846:	e853 3f00 	ldrex	r3, [r3]
 800c84a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c84e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c852:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	461a      	mov	r2, r3
 800c85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c860:	657b      	str	r3, [r7, #84]	; 0x54
 800c862:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c868:	e841 2300 	strex	r3, r2, [r1]
 800c86c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c86e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1e4      	bne.n	800c83e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c878:	2b01      	cmp	r3, #1
 800c87a:	d130      	bne.n	800c8de <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2200      	movs	r2, #0
 800c880:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88a:	e853 3f00 	ldrex	r3, [r3]
 800c88e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	f023 0310 	bic.w	r3, r3, #16
 800c896:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	461a      	mov	r2, r3
 800c8a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8a4:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8ac:	e841 2300 	strex	r3, r2, [r1]
 800c8b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1e4      	bne.n	800c882 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	f003 0310 	and.w	r3, r3, #16
 800c8c2:	2b10      	cmp	r3, #16
 800c8c4:	d103      	bne.n	800c8ce <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	2210      	movs	r2, #16
 800c8cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8d4:	4619      	mov	r1, r3
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7fe fe28 	bl	800b52c <HAL_UARTEx_RxEventCallback>
 800c8dc:	e002      	b.n	800c8e4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f7f6 fece 	bl	8003680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8e4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d006      	beq.n	800c8fa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c8ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c8f0:	f003 0320 	and.w	r3, r3, #32
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	f47f aecf 	bne.w	800c698 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c900:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d049      	beq.n	800c9a0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c912:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c916:	429a      	cmp	r2, r3
 800c918:	d242      	bcs.n	800c9a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	3308      	adds	r3, #8
 800c920:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c922:	6a3b      	ldr	r3, [r7, #32]
 800c924:	e853 3f00 	ldrex	r3, [r3]
 800c928:	61fb      	str	r3, [r7, #28]
   return(result);
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	3308      	adds	r3, #8
 800c93a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c93e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c940:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c942:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c946:	e841 2300 	strex	r3, r2, [r1]
 800c94a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1e3      	bne.n	800c91a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	4a15      	ldr	r2, [pc, #84]	; (800c9ac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c956:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	e853 3f00 	ldrex	r3, [r3]
 800c964:	60bb      	str	r3, [r7, #8]
   return(result);
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	f043 0320 	orr.w	r3, r3, #32
 800c96c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	461a      	mov	r2, r3
 800c976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c97a:	61bb      	str	r3, [r7, #24]
 800c97c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c97e:	6979      	ldr	r1, [r7, #20]
 800c980:	69ba      	ldr	r2, [r7, #24]
 800c982:	e841 2300 	strex	r3, r2, [r1]
 800c986:	613b      	str	r3, [r7, #16]
   return(result);
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d1e4      	bne.n	800c958 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c98e:	e007      	b.n	800c9a0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	699a      	ldr	r2, [r3, #24]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f042 0208 	orr.w	r2, r2, #8
 800c99e:	619a      	str	r2, [r3, #24]
}
 800c9a0:	bf00      	nop
 800c9a2:	37b0      	adds	r7, #176	; 0xb0
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	40008000 	.word	0x40008000
 800c9ac:	0800c2e1 	.word	0x0800c2e1

0800c9b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b0ae      	sub	sp, #184	; 0xb8
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9be:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	69db      	ldr	r3, [r3, #28]
 800c9c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9e6:	2b22      	cmp	r3, #34	; 0x22
 800c9e8:	f040 8186 	bne.w	800ccf8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c9f2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c9f6:	e129      	b.n	800cc4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9fe:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ca0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ca0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ca12:	4013      	ands	r3, r2
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca20:	1c9a      	adds	r2, r3, #2
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca2c:	b29b      	uxth	r3, r3
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	69db      	ldr	r3, [r3, #28]
 800ca3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d053      	beq.n	800caf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca52:	f003 0301 	and.w	r3, r3, #1
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d011      	beq.n	800ca7e <UART_RxISR_16BIT_FIFOEN+0xce>
 800ca5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00b      	beq.n	800ca7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2201      	movs	r2, #1
 800ca6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca74:	f043 0201 	orr.w	r2, r3, #1
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca82:	f003 0302 	and.w	r3, r3, #2
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d011      	beq.n	800caae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800ca8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ca8e:	f003 0301 	and.w	r3, r3, #1
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d00b      	beq.n	800caae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	2202      	movs	r2, #2
 800ca9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caa4:	f043 0204 	orr.w	r2, r3, #4
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800caae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cab2:	f003 0304 	and.w	r3, r3, #4
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d011      	beq.n	800cade <UART_RxISR_16BIT_FIFOEN+0x12e>
 800caba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cabe:	f003 0301 	and.w	r3, r3, #1
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d00b      	beq.n	800cade <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2204      	movs	r2, #4
 800cacc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cad4:	f043 0202 	orr.w	r2, r3, #2
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d006      	beq.n	800caf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cae8:	6878      	ldr	r0, [r7, #4]
 800caea:	f7fe fd16 	bl	800b51a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	f040 80a4 	bne.w	800cc4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb0c:	e853 3f00 	ldrex	r3, [r3]
 800cb10:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cb12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	461a      	mov	r2, r3
 800cb22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb2a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb2c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cb32:	e841 2300 	strex	r3, r2, [r1]
 800cb36:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cb38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d1e2      	bne.n	800cb04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	3308      	adds	r3, #8
 800cb44:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb48:	e853 3f00 	ldrex	r3, [r3]
 800cb4c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cb4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb54:	f023 0301 	bic.w	r3, r3, #1
 800cb58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	3308      	adds	r3, #8
 800cb62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cb66:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cb68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb6e:	e841 2300 	strex	r3, r2, [r1]
 800cb72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cb74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d1e1      	bne.n	800cb3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2220      	movs	r2, #32
 800cb7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2200      	movs	r2, #0
 800cb86:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	4a5f      	ldr	r2, [pc, #380]	; (800cd10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d021      	beq.n	800cbdc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d01a      	beq.n	800cbdc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbae:	e853 3f00 	ldrex	r3, [r3]
 800cbb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cbb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cbba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbc8:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbd0:	e841 2300 	strex	r3, r2, [r1]
 800cbd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1e4      	bne.n	800cba6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbe0:	2b01      	cmp	r3, #1
 800cbe2:	d130      	bne.n	800cc46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf2:	e853 3f00 	ldrex	r3, [r3]
 800cbf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	f023 0310 	bic.w	r3, r3, #16
 800cbfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	461a      	mov	r2, r3
 800cc08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc0c:	647b      	str	r3, [r7, #68]	; 0x44
 800cc0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e4      	bne.n	800cbea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	69db      	ldr	r3, [r3, #28]
 800cc26:	f003 0310 	and.w	r3, r3, #16
 800cc2a:	2b10      	cmp	r3, #16
 800cc2c:	d103      	bne.n	800cc36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2210      	movs	r2, #16
 800cc34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f7fe fc74 	bl	800b52c <HAL_UARTEx_RxEventCallback>
 800cc44:	e002      	b.n	800cc4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f7f6 fd1a 	bl	8003680 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d006      	beq.n	800cc62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cc54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc58:	f003 0320 	and.w	r3, r3, #32
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	f47f aecb 	bne.w	800c9f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc68:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d049      	beq.n	800cd08 <UART_RxISR_16BIT_FIFOEN+0x358>
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d242      	bcs.n	800cd08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	3308      	adds	r3, #8
 800cc88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	e853 3f00 	ldrex	r3, [r3]
 800cc90:	623b      	str	r3, [r7, #32]
   return(result);
 800cc92:	6a3b      	ldr	r3, [r7, #32]
 800cc94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	3308      	adds	r3, #8
 800cca2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800cca6:	633a      	str	r2, [r7, #48]	; 0x30
 800cca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccae:	e841 2300 	strex	r3, r2, [r1]
 800ccb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ccb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d1e3      	bne.n	800cc82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4a15      	ldr	r2, [pc, #84]	; (800cd14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ccbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	e853 3f00 	ldrex	r3, [r3]
 800cccc:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	f043 0320 	orr.w	r3, r3, #32
 800ccd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	461a      	mov	r2, r3
 800ccde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cce2:	61fb      	str	r3, [r7, #28]
 800cce4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cce6:	69b9      	ldr	r1, [r7, #24]
 800cce8:	69fa      	ldr	r2, [r7, #28]
 800ccea:	e841 2300 	strex	r3, r2, [r1]
 800ccee:	617b      	str	r3, [r7, #20]
   return(result);
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d1e4      	bne.n	800ccc0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ccf6:	e007      	b.n	800cd08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	699a      	ldr	r2, [r3, #24]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f042 0208 	orr.w	r2, r2, #8
 800cd06:	619a      	str	r2, [r3, #24]
}
 800cd08:	bf00      	nop
 800cd0a:	37b8      	adds	r7, #184	; 0xb8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}
 800cd10:	40008000 	.word	0x40008000
 800cd14:	0800c499 	.word	0x0800c499

0800cd18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b083      	sub	sp, #12
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd20:	bf00      	nop
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bc80      	pop	{r7}
 800cd28:	4770      	bx	lr

0800cd2a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd2a:	b480      	push	{r7}
 800cd2c:	b083      	sub	sp, #12
 800cd2e:	af00      	add	r7, sp, #0
 800cd30:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd32:	bf00      	nop
 800cd34:	370c      	adds	r7, #12
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bc80      	pop	{r7}
 800cd3a:	4770      	bx	lr

0800cd3c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd44:	bf00      	nop
 800cd46:	370c      	adds	r7, #12
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bc80      	pop	{r7}
 800cd4c:	4770      	bx	lr

0800cd4e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b088      	sub	sp, #32
 800cd52:	af02      	add	r7, sp, #8
 800cd54:	60f8      	str	r0, [r7, #12]
 800cd56:	1d3b      	adds	r3, r7, #4
 800cd58:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cd5c:	2300      	movs	r3, #0
 800cd5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d101      	bne.n	800cd6e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cd6a:	2302      	movs	r3, #2
 800cd6c:	e046      	b.n	800cdfc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	2201      	movs	r2, #1
 800cd72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2224      	movs	r2, #36	; 0x24
 800cd7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	681a      	ldr	r2, [r3, #0]
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f022 0201 	bic.w	r2, r2, #1
 800cd8c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cd98:	687a      	ldr	r2, [r7, #4]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	430a      	orrs	r2, r1
 800cda0:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d105      	bne.n	800cdb4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cda8:	1d3b      	adds	r3, r7, #4
 800cdaa:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 f949 	bl	800d046 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	681a      	ldr	r2, [r3, #0]
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f042 0201 	orr.w	r2, r2, #1
 800cdc2:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdc4:	f7f5 fe58 	bl	8002a78 <HAL_GetTick>
 800cdc8:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdce:	9300      	str	r3, [sp, #0]
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f7fe ff16 	bl	800bc0a <UART_WaitOnFlagUntilTimeout>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d002      	beq.n	800cdea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cde4:	2303      	movs	r3, #3
 800cde6:	75fb      	strb	r3, [r7, #23]
 800cde8:	e003      	b.n	800cdf2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	2220      	movs	r2, #32
 800cdee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800cdfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3718      	adds	r7, #24
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ce04:	b480      	push	{r7}
 800ce06:	b089      	sub	sp, #36	; 0x24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce12:	2b01      	cmp	r3, #1
 800ce14:	d101      	bne.n	800ce1a <HAL_UARTEx_EnableStopMode+0x16>
 800ce16:	2302      	movs	r3, #2
 800ce18:	e021      	b.n	800ce5e <HAL_UARTEx_EnableStopMode+0x5a>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2201      	movs	r2, #1
 800ce1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	e853 3f00 	ldrex	r3, [r3]
 800ce2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	f043 0302 	orr.w	r3, r3, #2
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	61bb      	str	r3, [r7, #24]
 800ce42:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6979      	ldr	r1, [r7, #20]
 800ce46:	69ba      	ldr	r2, [r7, #24]
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e6      	bne.n	800ce22 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce5c:	2300      	movs	r3, #0
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3724      	adds	r7, #36	; 0x24
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bc80      	pop	{r7}
 800ce66:	4770      	bx	lr

0800ce68 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	d101      	bne.n	800ce7e <HAL_UARTEx_EnableFifoMode+0x16>
 800ce7a:	2302      	movs	r3, #2
 800ce7c:	e02b      	b.n	800ced6 <HAL_UARTEx_EnableFifoMode+0x6e>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2201      	movs	r2, #1
 800ce82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2224      	movs	r2, #36	; 0x24
 800ce8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681a      	ldr	r2, [r3, #0]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	f022 0201 	bic.w	r2, r2, #1
 800cea4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ceac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800ceb4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f000 f8e4 	bl	800d08c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ced4:	2300      	movs	r3, #0
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3710      	adds	r7, #16
 800ceda:	46bd      	mov	sp, r7
 800cedc:	bd80      	pop	{r7, pc}

0800cede <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cede:	b480      	push	{r7}
 800cee0:	b085      	sub	sp, #20
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ceec:	2b01      	cmp	r3, #1
 800ceee:	d101      	bne.n	800cef4 <HAL_UARTEx_DisableFifoMode+0x16>
 800cef0:	2302      	movs	r3, #2
 800cef2:	e027      	b.n	800cf44 <HAL_UARTEx_DisableFifoMode+0x66>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2201      	movs	r2, #1
 800cef8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2224      	movs	r2, #36	; 0x24
 800cf00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f022 0201 	bic.w	r2, r2, #1
 800cf1a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2220      	movs	r2, #32
 800cf36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3714      	adds	r7, #20
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bc80      	pop	{r7}
 800cf4c:	4770      	bx	lr

0800cf4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b084      	sub	sp, #16
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf5e:	2b01      	cmp	r3, #1
 800cf60:	d101      	bne.n	800cf66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf62:	2302      	movs	r3, #2
 800cf64:	e02d      	b.n	800cfc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2201      	movs	r2, #1
 800cf6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2224      	movs	r2, #36	; 0x24
 800cf72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f022 0201 	bic.w	r2, r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	689b      	ldr	r3, [r3, #8]
 800cf94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	683a      	ldr	r2, [r7, #0]
 800cf9e:	430a      	orrs	r2, r1
 800cfa0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	f000 f872 	bl	800d08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	68fa      	ldr	r2, [r7, #12]
 800cfae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
 800cfd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cfda:	2b01      	cmp	r3, #1
 800cfdc:	d101      	bne.n	800cfe2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cfde:	2302      	movs	r3, #2
 800cfe0:	e02d      	b.n	800d03e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2224      	movs	r2, #36	; 0x24
 800cfee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f022 0201 	bic.w	r2, r2, #1
 800d008:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	689b      	ldr	r3, [r3, #8]
 800d010:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	430a      	orrs	r2, r1
 800d01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 f834 	bl	800d08c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2220      	movs	r2, #32
 800d030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	2200      	movs	r2, #0
 800d038:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d03c:	2300      	movs	r3, #0
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}

0800d046 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d046:	b480      	push	{r7}
 800d048:	b085      	sub	sp, #20
 800d04a:	af00      	add	r7, sp, #0
 800d04c:	60f8      	str	r0, [r7, #12]
 800d04e:	1d3b      	adds	r3, r7, #4
 800d050:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	685b      	ldr	r3, [r3, #4]
 800d05a:	f023 0210 	bic.w	r2, r3, #16
 800d05e:	893b      	ldrh	r3, [r7, #8]
 800d060:	4619      	mov	r1, r3
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	430a      	orrs	r2, r1
 800d068:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d074:	7abb      	ldrb	r3, [r7, #10]
 800d076:	061a      	lsls	r2, r3, #24
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	430a      	orrs	r2, r1
 800d07e:	605a      	str	r2, [r3, #4]
}
 800d080:	bf00      	nop
 800d082:	3714      	adds	r7, #20
 800d084:	46bd      	mov	sp, r7
 800d086:	bc80      	pop	{r7}
 800d088:	4770      	bx	lr
	...

0800d08c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d108      	bne.n	800d0ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0ac:	e031      	b.n	800d112 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0ae:	2308      	movs	r3, #8
 800d0b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0b2:	2308      	movs	r3, #8
 800d0b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	689b      	ldr	r3, [r3, #8]
 800d0bc:	0e5b      	lsrs	r3, r3, #25
 800d0be:	b2db      	uxtb	r3, r3
 800d0c0:	f003 0307 	and.w	r3, r3, #7
 800d0c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	689b      	ldr	r3, [r3, #8]
 800d0cc:	0f5b      	lsrs	r3, r3, #29
 800d0ce:	b2db      	uxtb	r3, r3
 800d0d0:	f003 0307 	and.w	r3, r3, #7
 800d0d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0d6:	7bbb      	ldrb	r3, [r7, #14]
 800d0d8:	7b3a      	ldrb	r2, [r7, #12]
 800d0da:	4910      	ldr	r1, [pc, #64]	; (800d11c <UARTEx_SetNbDataToProcess+0x90>)
 800d0dc:	5c8a      	ldrb	r2, [r1, r2]
 800d0de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0e2:	7b3a      	ldrb	r2, [r7, #12]
 800d0e4:	490e      	ldr	r1, [pc, #56]	; (800d120 <UARTEx_SetNbDataToProcess+0x94>)
 800d0e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0e8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0ec:	b29a      	uxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d0f4:	7bfb      	ldrb	r3, [r7, #15]
 800d0f6:	7b7a      	ldrb	r2, [r7, #13]
 800d0f8:	4908      	ldr	r1, [pc, #32]	; (800d11c <UARTEx_SetNbDataToProcess+0x90>)
 800d0fa:	5c8a      	ldrb	r2, [r1, r2]
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d100:	7b7a      	ldrb	r2, [r7, #13]
 800d102:	4907      	ldr	r1, [pc, #28]	; (800d120 <UARTEx_SetNbDataToProcess+0x94>)
 800d104:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d106:	fb93 f3f2 	sdiv	r3, r3, r2
 800d10a:	b29a      	uxth	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d112:	bf00      	nop
 800d114:	3714      	adds	r7, #20
 800d116:	46bd      	mov	sp, r7
 800d118:	bc80      	pop	{r7}
 800d11a:	4770      	bx	lr
 800d11c:	0801f5fc 	.word	0x0801f5fc
 800d120:	0801f604 	.word	0x0801f604

0800d124 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d128:	f7f5 fb18 	bl	800275c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d12c:	f000 f820 	bl	800d170 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d130:	bf00      	nop
 800d132:	bd80      	pop	{r7, pc}

0800d134 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d138:	f04f 30ff 	mov.w	r0, #4294967295
 800d13c:	f010 fdb6 	bl	801dcac <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d140:	bf00      	nop
 800d142:	bd80      	pop	{r7, pc}

0800d144 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d144:	b480      	push	{r7}
 800d146:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d148:	f3bf 8f4f 	dsb	sy
}
 800d14c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d14e:	4b06      	ldr	r3, [pc, #24]	; (800d168 <__NVIC_SystemReset+0x24>)
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d156:	4904      	ldr	r1, [pc, #16]	; (800d168 <__NVIC_SystemReset+0x24>)
 800d158:	4b04      	ldr	r3, [pc, #16]	; (800d16c <__NVIC_SystemReset+0x28>)
 800d15a:	4313      	orrs	r3, r2
 800d15c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d15e:	f3bf 8f4f 	dsb	sy
}
 800d162:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d164:	bf00      	nop
 800d166:	e7fd      	b.n	800d164 <__NVIC_SystemReset+0x20>
 800d168:	e000ed00 	.word	0xe000ed00
 800d16c:	05fa0004 	.word	0x05fa0004

0800d170 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d17a:	2300      	movs	r3, #0
 800d17c:	9302      	str	r3, [sp, #8]
 800d17e:	2303      	movs	r3, #3
 800d180:	9301      	str	r3, [sp, #4]
 800d182:	2301      	movs	r3, #1
 800d184:	9300      	str	r3, [sp, #0]
 800d186:	4b59      	ldr	r3, [pc, #356]	; (800d2ec <LoRaWAN_Init+0x17c>)
 800d188:	2200      	movs	r2, #0
 800d18a:	2100      	movs	r1, #0
 800d18c:	2002      	movs	r0, #2
 800d18e:	f011 f9db 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d192:	2300      	movs	r3, #0
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	2305      	movs	r3, #5
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	2302      	movs	r3, #2
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4b54      	ldr	r3, [pc, #336]	; (800d2f0 <LoRaWAN_Init+0x180>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	2002      	movs	r0, #2
 800d1a6:	f011 f9cf 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9302      	str	r3, [sp, #8]
 800d1ae:	2303      	movs	r3, #3
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4b4f      	ldr	r3, [pc, #316]	; (800d2f4 <LoRaWAN_Init+0x184>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	2002      	movs	r0, #2
 800d1be:	f011 f9c3 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d1c2:	1d3b      	adds	r3, r7, #4
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	2000      	movs	r0, #0
 800d1c8:	f003 f974 	bl	80104b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	0e1b      	lsrs	r3, r3, #24
 800d1d0:	b2db      	uxtb	r3, r3
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	0c1b      	lsrs	r3, r3, #16
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	4619      	mov	r1, r3
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	0a1b      	lsrs	r3, r3, #8
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	9302      	str	r3, [sp, #8]
 800d1e4:	9101      	str	r1, [sp, #4]
 800d1e6:	9200      	str	r2, [sp, #0]
 800d1e8:	4b43      	ldr	r3, [pc, #268]	; (800d2f8 <LoRaWAN_Init+0x188>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	2002      	movs	r0, #2
 800d1f0:	f011 f9aa 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d1f4:	1d3b      	adds	r3, r7, #4
 800d1f6:	4619      	mov	r1, r3
 800d1f8:	2001      	movs	r0, #1
 800d1fa:	f003 f95b 	bl	80104b4 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	0e1b      	lsrs	r3, r3, #24
 800d202:	b2db      	uxtb	r3, r3
 800d204:	461a      	mov	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	0c1b      	lsrs	r3, r3, #16
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	4619      	mov	r1, r3
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	b2db      	uxtb	r3, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	b2c0      	uxtb	r0, r0
 800d218:	9003      	str	r0, [sp, #12]
 800d21a:	9302      	str	r3, [sp, #8]
 800d21c:	9101      	str	r1, [sp, #4]
 800d21e:	9200      	str	r2, [sp, #0]
 800d220:	4b36      	ldr	r3, [pc, #216]	; (800d2fc <LoRaWAN_Init+0x18c>)
 800d222:	2200      	movs	r2, #0
 800d224:	2100      	movs	r1, #0
 800d226:	2002      	movs	r0, #2
 800d228:	f011 f98e 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d22c:	2300      	movs	r3, #0
 800d22e:	9300      	str	r3, [sp, #0]
 800d230:	4b33      	ldr	r3, [pc, #204]	; (800d300 <LoRaWAN_Init+0x190>)
 800d232:	2200      	movs	r2, #0
 800d234:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d238:	4832      	ldr	r0, [pc, #200]	; (800d304 <LoRaWAN_Init+0x194>)
 800d23a:	f010 fed7 	bl	801dfec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d23e:	2300      	movs	r3, #0
 800d240:	9300      	str	r3, [sp, #0]
 800d242:	4b31      	ldr	r3, [pc, #196]	; (800d308 <LoRaWAN_Init+0x198>)
 800d244:	2200      	movs	r2, #0
 800d246:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d24a:	4830      	ldr	r0, [pc, #192]	; (800d30c <LoRaWAN_Init+0x19c>)
 800d24c:	f010 fece 	bl	801dfec <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d250:	2300      	movs	r3, #0
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <LoRaWAN_Init+0x1a0>)
 800d256:	2201      	movs	r2, #1
 800d258:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d25c:	482d      	ldr	r0, [pc, #180]	; (800d314 <LoRaWAN_Init+0x1a4>)
 800d25e:	f010 fec5 	bl	801dfec <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d262:	2300      	movs	r3, #0
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	4b2c      	ldr	r3, [pc, #176]	; (800d318 <LoRaWAN_Init+0x1a8>)
 800d268:	2200      	movs	r2, #0
 800d26a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d26e:	482b      	ldr	r0, [pc, #172]	; (800d31c <LoRaWAN_Init+0x1ac>)
 800d270:	f010 febc 	bl	801dfec <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d274:	4a2a      	ldr	r2, [pc, #168]	; (800d320 <LoRaWAN_Init+0x1b0>)
 800d276:	2100      	movs	r1, #0
 800d278:	2001      	movs	r0, #1
 800d27a:	f010 fe13 	bl	801dea4 <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d27e:	4a29      	ldr	r2, [pc, #164]	; (800d324 <LoRaWAN_Init+0x1b4>)
 800d280:	2100      	movs	r1, #0
 800d282:	2002      	movs	r0, #2
 800d284:	f010 fe0e 	bl	801dea4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d288:	4a27      	ldr	r2, [pc, #156]	; (800d328 <LoRaWAN_Init+0x1b8>)
 800d28a:	2100      	movs	r1, #0
 800d28c:	2004      	movs	r0, #4
 800d28e:	f010 fe09 	bl	801dea4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d292:	4a26      	ldr	r2, [pc, #152]	; (800d32c <LoRaWAN_Init+0x1bc>)
 800d294:	2100      	movs	r1, #0
 800d296:	2008      	movs	r0, #8
 800d298:	f010 fe04 	bl	801dea4 <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d29c:	f000 fcf6 	bl	800dc8c <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d2a0:	4923      	ldr	r1, [pc, #140]	; (800d330 <LoRaWAN_Init+0x1c0>)
 800d2a2:	4824      	ldr	r0, [pc, #144]	; (800d334 <LoRaWAN_Init+0x1c4>)
 800d2a4:	f002 fa1c 	bl	800f6e0 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d2a8:	4823      	ldr	r0, [pc, #140]	; (800d338 <LoRaWAN_Init+0x1c8>)
 800d2aa:	f002 fa75 	bl	800f798 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d2ae:	4819      	ldr	r0, [pc, #100]	; (800d314 <LoRaWAN_Init+0x1a4>)
 800d2b0:	f010 fed2 	bl	801e058 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d2b4:	4b21      	ldr	r3, [pc, #132]	; (800d33c <LoRaWAN_Init+0x1cc>)
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	4a21      	ldr	r2, [pc, #132]	; (800d340 <LoRaWAN_Init+0x1d0>)
 800d2ba:	7812      	ldrb	r2, [r2, #0]
 800d2bc:	4611      	mov	r1, r2
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f002 fb38 	bl	800f934 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d2c4:	4b1f      	ldr	r3, [pc, #124]	; (800d344 <LoRaWAN_Init+0x1d4>)
 800d2c6:	781b      	ldrb	r3, [r3, #0]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10b      	bne.n	800d2e4 <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d2cc:	4b1e      	ldr	r3, [pc, #120]	; (800d348 <LoRaWAN_Init+0x1d8>)
 800d2ce:	6819      	ldr	r1, [r3, #0]
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	9300      	str	r3, [sp, #0]
 800d2d4:	4b1d      	ldr	r3, [pc, #116]	; (800d34c <LoRaWAN_Init+0x1dc>)
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	481d      	ldr	r0, [pc, #116]	; (800d350 <LoRaWAN_Init+0x1e0>)
 800d2da:	f010 fe87 	bl	801dfec <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d2de:	481c      	ldr	r0, [pc, #112]	; (800d350 <LoRaWAN_Init+0x1e0>)
 800d2e0:	f010 feba 	bl	801e058 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}
 800d2ec:	0801ecc0 	.word	0x0801ecc0
 800d2f0:	0801ece4 	.word	0x0801ece4
 800d2f4:	0801ed04 	.word	0x0801ed04
 800d2f8:	0801ed24 	.word	0x0801ed24
 800d2fc:	0801ed48 	.word	0x0801ed48
 800d300:	0800d7b5 	.word	0x0800d7b5
 800d304:	200006f8 	.word	0x200006f8
 800d308:	0800d7c7 	.word	0x0800d7c7
 800d30c:	20000710 	.word	0x20000710
 800d310:	0800d7d9 	.word	0x0800d7d9
 800d314:	20000728 	.word	0x20000728
 800d318:	0800db8d 	.word	0x0800db8d
 800d31c:	200005ec 	.word	0x200005ec
 800d320:	0800f909 	.word	0x0800f909
 800d324:	0800d4ad 	.word	0x0800d4ad
 800d328:	0800dbb1 	.word	0x0800dbb1
 800d32c:	0800db0d 	.word	0x0800db0d
 800d330:	01030000 	.word	0x01030000
 800d334:	2000002c 	.word	0x2000002c
 800d338:	20000078 	.word	0x20000078
 800d33c:	20000028 	.word	0x20000028
 800d340:	20000029 	.word	0x20000029
 800d344:	200005d0 	.word	0x200005d0
 800d348:	20000090 	.word	0x20000090
 800d34c:	0800d791 	.word	0x0800d791
 800d350:	200005d4 	.word	0x200005d4

0800d354 <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d354:	b5b0      	push	{r4, r5, r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af06      	add	r7, sp, #24
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 808c 	beq.w	800d482 <OnRxData+0x12e>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d36a:	4848      	ldr	r0, [pc, #288]	; (800d48c <OnRxData+0x138>)
 800d36c:	f010 fe74 	bl	801e058 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	781b      	ldrb	r3, [r3, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d060      	beq.n	800d43a <OnRxData+0xe6>
    {
      if (appData != NULL)
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d05d      	beq.n	800d43a <OnRxData+0xe6>
      {
        RxPort = appData->Port;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	685b      	ldr	r3, [r3, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d056      	beq.n	800d43a <OnRxData+0xe6>
        {
    switch (appData->Port)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	781b      	ldrb	r3, [r3, #0]
 800d390:	2b02      	cmp	r3, #2
 800d392:	d01f      	beq.n	800d3d4 <OnRxData+0x80>
 800d394:	2b03      	cmp	r3, #3
 800d396:	d14b      	bne.n	800d430 <OnRxData+0xdc>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	785b      	ldrb	r3, [r3, #1]
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d149      	bne.n	800d434 <OnRxData+0xe0>
        {
          switch (appData->Buffer[0])
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b02      	cmp	r3, #2
 800d3a8:	d00e      	beq.n	800d3c8 <OnRxData+0x74>
 800d3aa:	2b02      	cmp	r3, #2
 800d3ac:	dc10      	bgt.n	800d3d0 <OnRxData+0x7c>
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d002      	beq.n	800d3b8 <OnRxData+0x64>
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d004      	beq.n	800d3c0 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d3b6:	e00b      	b.n	800d3d0 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	f002 fc83 	bl	800fcc4 <LmHandlerRequestClass>
              break;
 800d3be:	e008      	b.n	800d3d2 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d3c0:	2001      	movs	r0, #1
 800d3c2:	f002 fc7f 	bl	800fcc4 <LmHandlerRequestClass>
              break;
 800d3c6:	e004      	b.n	800d3d2 <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d3c8:	2002      	movs	r0, #2
 800d3ca:	f002 fc7b 	bl	800fcc4 <LmHandlerRequestClass>
              break;
 800d3ce:	e000      	b.n	800d3d2 <OnRxData+0x7e>
              break;
 800d3d0:	bf00      	nop
          }
        }
        break;
 800d3d2:	e02f      	b.n	800d434 <OnRxData+0xe0>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	785b      	ldrb	r3, [r3, #1]
 800d3d8:	2b01      	cmp	r3, #1
 800d3da:	d12d      	bne.n	800d438 <OnRxData+0xe4>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	4b29      	ldr	r3, [pc, #164]	; (800d490 <OnRxData+0x13c>)
 800d3ea:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d3ec:	4b28      	ldr	r3, [pc, #160]	; (800d490 <OnRxData+0x13c>)
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10e      	bne.n	800d412 <OnRxData+0xbe>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d3f4:	4b27      	ldr	r3, [pc, #156]	; (800d494 <OnRxData+0x140>)
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	2003      	movs	r0, #3
 800d3fc:	f011 f8a4 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
            LEDON = 0;
 800d400:	4b25      	ldr	r3, [pc, #148]	; (800d498 <OnRxData+0x144>)
 800d402:	2200      	movs	r2, #0
 800d404:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d406:	2201      	movs	r2, #1
 800d408:	2120      	movs	r1, #32
 800d40a:	4824      	ldr	r0, [pc, #144]	; (800d49c <OnRxData+0x148>)
 800d40c:	f7f9 f842 	bl	8006494 <HAL_GPIO_WritePin>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  LEDON = 1;
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d410:	e012      	b.n	800d438 <OnRxData+0xe4>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d412:	4b23      	ldr	r3, [pc, #140]	; (800d4a0 <OnRxData+0x14c>)
 800d414:	2200      	movs	r2, #0
 800d416:	2100      	movs	r1, #0
 800d418:	2003      	movs	r0, #3
 800d41a:	f011 f895 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
                  LEDON = 1;
 800d41e:	4b1e      	ldr	r3, [pc, #120]	; (800d498 <OnRxData+0x144>)
 800d420:	2201      	movs	r2, #1
 800d422:	701a      	strb	r2, [r3, #0]
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d424:	2200      	movs	r2, #0
 800d426:	2120      	movs	r1, #32
 800d428:	481c      	ldr	r0, [pc, #112]	; (800d49c <OnRxData+0x148>)
 800d42a:	f7f9 f833 	bl	8006494 <HAL_GPIO_WritePin>
        break;
 800d42e:	e003      	b.n	800d438 <OnRxData+0xe4>

      default:

        break;
 800d430:	bf00      	nop
 800d432:	e002      	b.n	800d43a <OnRxData+0xe6>
        break;
 800d434:	bf00      	nop
 800d436:	e000      	b.n	800d43a <OnRxData+0xe6>
        break;
 800d438:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	7c1b      	ldrb	r3, [r3, #16]
 800d43e:	2b05      	cmp	r3, #5
 800d440:	d81f      	bhi.n	800d482 <OnRxData+0x12e>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	68db      	ldr	r3, [r3, #12]
 800d446:	7bfa      	ldrb	r2, [r7, #15]
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d44e:	460c      	mov	r4, r1
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	7c09      	ldrb	r1, [r1, #16]
 800d454:	4608      	mov	r0, r1
 800d456:	4913      	ldr	r1, [pc, #76]	; (800d4a4 <OnRxData+0x150>)
 800d458:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d45c:	6838      	ldr	r0, [r7, #0]
 800d45e:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d462:	4605      	mov	r5, r0
 800d464:	6838      	ldr	r0, [r7, #0]
 800d466:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d46a:	9005      	str	r0, [sp, #20]
 800d46c:	9504      	str	r5, [sp, #16]
 800d46e:	9103      	str	r1, [sp, #12]
 800d470:	9402      	str	r4, [sp, #8]
 800d472:	9201      	str	r2, [sp, #4]
 800d474:	9300      	str	r3, [sp, #0]
 800d476:	4b0c      	ldr	r3, [pc, #48]	; (800d4a8 <OnRxData+0x154>)
 800d478:	2200      	movs	r2, #0
 800d47a:	2100      	movs	r1, #0
 800d47c:	2003      	movs	r0, #3
 800d47e:	f011 f863 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d482:	bf00      	nop
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bdb0      	pop	{r4, r5, r7, pc}
 800d48a:	bf00      	nop
 800d48c:	20000710 	.word	0x20000710
 800d490:	200006f6 	.word	0x200006f6
 800d494:	0801ed6c 	.word	0x0801ed6c
 800d498:	20000286 	.word	0x20000286
 800d49c:	48000400 	.word	0x48000400
 800d4a0:	0801ed78 	.word	0x0801ed78
 800d4a4:	20000010 	.word	0x20000010
 800d4a8:	0801ed84 	.word	0x0801ed84

0800d4ac <SendTxData>:

static void SendTxData(void)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b086      	sub	sp, #24
 800d4b0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d4b2:	23ff      	movs	r3, #255	; 0xff
 800d4b4:	72fb      	strb	r3, [r7, #11]
  extBattery = GetBatteryLevel();
 800d4b6:	f7f5 f981 	bl	80027bc <GetBatteryLevel>
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4ba0      	ldr	r3, [pc, #640]	; (800d740 <SendTxData+0x294>)
 800d4c0:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	60fb      	str	r3, [r7, #12]


  uint32_t i = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	607b      	str	r3, [r7, #4]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", extBattery);
 800d4ca:	4b9d      	ldr	r3, [pc, #628]	; (800d740 <SendTxData+0x294>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	9300      	str	r3, [sp, #0]
 800d4d0:	4b9c      	ldr	r3, [pc, #624]	; (800d744 <SendTxData+0x298>)
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	2002      	movs	r0, #2
 800d4d8:	f011 f836 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d4dc:	4b9a      	ldr	r3, [pc, #616]	; (800d748 <SendTxData+0x29c>)
 800d4de:	2202      	movs	r2, #2
 800d4e0:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1) >> 8;
 800d4e2:	4b9a      	ldr	r3, [pc, #616]	; (800d74c <SendTxData+0x2a0>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	0a18      	lsrs	r0, r3, #8
 800d4e8:	4b97      	ldr	r3, [pc, #604]	; (800d748 <SendTxData+0x29c>)
 800d4ea:	685a      	ldr	r2, [r3, #4]
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	1c59      	adds	r1, r3, #1
 800d4f0:	6079      	str	r1, [r7, #4]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	b2c2      	uxtb	r2, r0
 800d4f6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1)%256;
 800d4f8:	4b94      	ldr	r3, [pc, #592]	; (800d74c <SendTxData+0x2a0>)
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	4b92      	ldr	r3, [pc, #584]	; (800d748 <SendTxData+0x29c>)
 800d4fe:	685a      	ldr	r2, [r3, #4]
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	1c59      	adds	r1, r3, #1
 800d504:	6079      	str	r1, [r7, #4]
 800d506:	4413      	add	r3, r2
 800d508:	b2c2      	uxtb	r2, r0
 800d50a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5)>>8;
 800d50c:	4b90      	ldr	r3, [pc, #576]	; (800d750 <SendTxData+0x2a4>)
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	0a18      	lsrs	r0, r3, #8
 800d512:	4b8d      	ldr	r3, [pc, #564]	; (800d748 <SendTxData+0x29c>)
 800d514:	685a      	ldr	r2, [r3, #4]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	1c59      	adds	r1, r3, #1
 800d51a:	6079      	str	r1, [r7, #4]
 800d51c:	4413      	add	r3, r2
 800d51e:	b2c2      	uxtb	r2, r0
 800d520:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5)%256;
 800d522:	4b8b      	ldr	r3, [pc, #556]	; (800d750 <SendTxData+0x2a4>)
 800d524:	6818      	ldr	r0, [r3, #0]
 800d526:	4b88      	ldr	r3, [pc, #544]	; (800d748 <SendTxData+0x29c>)
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	1c59      	adds	r1, r3, #1
 800d52e:	6079      	str	r1, [r7, #4]
 800d530:	4413      	add	r3, r2
 800d532:	b2c2      	uxtb	r2, r0
 800d534:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10)>>8;
 800d536:	4b87      	ldr	r3, [pc, #540]	; (800d754 <SendTxData+0x2a8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	0a18      	lsrs	r0, r3, #8
 800d53c:	4b82      	ldr	r3, [pc, #520]	; (800d748 <SendTxData+0x29c>)
 800d53e:	685a      	ldr	r2, [r3, #4]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	1c59      	adds	r1, r3, #1
 800d544:	6079      	str	r1, [r7, #4]
 800d546:	4413      	add	r3, r2
 800d548:	b2c2      	uxtb	r2, r0
 800d54a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10)%256;
 800d54c:	4b81      	ldr	r3, [pc, #516]	; (800d754 <SendTxData+0x2a8>)
 800d54e:	6818      	ldr	r0, [r3, #0]
 800d550:	4b7d      	ldr	r3, [pc, #500]	; (800d748 <SendTxData+0x29c>)
 800d552:	685a      	ldr	r2, [r3, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	1c59      	adds	r1, r3, #1
 800d558:	6079      	str	r1, [r7, #4]
 800d55a:	4413      	add	r3, r2
 800d55c:	b2c2      	uxtb	r2, r0
 800d55e:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temperatureTX*100.0)) + 10000;
 800d560:	4b7d      	ldr	r3, [pc, #500]	; (800d758 <SendTxData+0x2ac>)
 800d562:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d566:	f04f 0200 	mov.w	r2, #0
 800d56a:	4b7c      	ldr	r3, [pc, #496]	; (800d75c <SendTxData+0x2b0>)
 800d56c:	f7f2 ffc8 	bl	8000500 <__aeabi_dmul>
 800d570:	4602      	mov	r2, r0
 800d572:	460b      	mov	r3, r1
 800d574:	4610      	mov	r0, r2
 800d576:	4619      	mov	r1, r3
 800d578:	f7f3 fa5c 	bl	8000a34 <__aeabi_d2iz>
 800d57c:	4603      	mov	r3, r0
 800d57e:	b21b      	sxth	r3, r3
 800d580:	b29b      	uxth	r3, r3
 800d582:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d586:	3310      	adds	r3, #16
 800d588:	b29b      	uxth	r3, r3
 800d58a:	807b      	strh	r3, [r7, #2]
  AppData.Buffer[i++] = tempVar/100;
 800d58c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d590:	4a73      	ldr	r2, [pc, #460]	; (800d760 <SendTxData+0x2b4>)
 800d592:	fb82 1203 	smull	r1, r2, r2, r3
 800d596:	1152      	asrs	r2, r2, #5
 800d598:	17db      	asrs	r3, r3, #31
 800d59a:	1ad3      	subs	r3, r2, r3
 800d59c:	b218      	sxth	r0, r3
 800d59e:	4b6a      	ldr	r3, [pc, #424]	; (800d748 <SendTxData+0x29c>)
 800d5a0:	685a      	ldr	r2, [r3, #4]
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	1c59      	adds	r1, r3, #1
 800d5a6:	6079      	str	r1, [r7, #4]
 800d5a8:	4413      	add	r3, r2
 800d5aa:	b2c2      	uxtb	r2, r0
 800d5ac:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d5ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5b2:	4a6b      	ldr	r2, [pc, #428]	; (800d760 <SendTxData+0x2b4>)
 800d5b4:	fb82 1203 	smull	r1, r2, r2, r3
 800d5b8:	1151      	asrs	r1, r2, #5
 800d5ba:	17da      	asrs	r2, r3, #31
 800d5bc:	1a8a      	subs	r2, r1, r2
 800d5be:	2164      	movs	r1, #100	; 0x64
 800d5c0:	fb01 f202 	mul.w	r2, r1, r2
 800d5c4:	1a9b      	subs	r3, r3, r2
 800d5c6:	b218      	sxth	r0, r3
 800d5c8:	4b5f      	ldr	r3, [pc, #380]	; (800d748 <SendTxData+0x29c>)
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	1c59      	adds	r1, r3, #1
 800d5d0:	6079      	str	r1, [r7, #4]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	b2c2      	uxtb	r2, r0
 800d5d6:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d5d8:	4b62      	ldr	r3, [pc, #392]	; (800d764 <SendTxData+0x2b8>)
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7f2 ff37 	bl	8000450 <__aeabi_f2d>
 800d5e2:	f04f 0200 	mov.w	r2, #0
 800d5e6:	4b5d      	ldr	r3, [pc, #372]	; (800d75c <SendTxData+0x2b0>)
 800d5e8:	f7f2 ff8a 	bl	8000500 <__aeabi_dmul>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4610      	mov	r0, r2
 800d5f2:	4619      	mov	r1, r3
 800d5f4:	f7f3 fa1e 	bl	8000a34 <__aeabi_d2iz>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	807b      	strh	r3, [r7, #2]
  AppData.Buffer[i++] = tempVar/100;
 800d5fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d600:	4a57      	ldr	r2, [pc, #348]	; (800d760 <SendTxData+0x2b4>)
 800d602:	fb82 1203 	smull	r1, r2, r2, r3
 800d606:	1152      	asrs	r2, r2, #5
 800d608:	17db      	asrs	r3, r3, #31
 800d60a:	1ad3      	subs	r3, r2, r3
 800d60c:	b218      	sxth	r0, r3
 800d60e:	4b4e      	ldr	r3, [pc, #312]	; (800d748 <SendTxData+0x29c>)
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	1c59      	adds	r1, r3, #1
 800d616:	6079      	str	r1, [r7, #4]
 800d618:	4413      	add	r3, r2
 800d61a:	b2c2      	uxtb	r2, r0
 800d61c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d61e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d622:	4a4f      	ldr	r2, [pc, #316]	; (800d760 <SendTxData+0x2b4>)
 800d624:	fb82 1203 	smull	r1, r2, r2, r3
 800d628:	1151      	asrs	r1, r2, #5
 800d62a:	17da      	asrs	r2, r3, #31
 800d62c:	1a8a      	subs	r2, r1, r2
 800d62e:	2164      	movs	r1, #100	; 0x64
 800d630:	fb01 f202 	mul.w	r2, r1, r2
 800d634:	1a9b      	subs	r3, r3, r2
 800d636:	b218      	sxth	r0, r3
 800d638:	4b43      	ldr	r3, [pc, #268]	; (800d748 <SendTxData+0x29c>)
 800d63a:	685a      	ldr	r2, [r3, #4]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	1c59      	adds	r1, r3, #1
 800d640:	6079      	str	r1, [r7, #4]
 800d642:	4413      	add	r3, r2
 800d644:	b2c2      	uxtb	r2, r0
 800d646:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = VOC/256;
 800d648:	4b47      	ldr	r3, [pc, #284]	; (800d768 <SendTxData+0x2bc>)
 800d64a:	881b      	ldrh	r3, [r3, #0]
 800d64c:	0a1b      	lsrs	r3, r3, #8
 800d64e:	b298      	uxth	r0, r3
 800d650:	4b3d      	ldr	r3, [pc, #244]	; (800d748 <SendTxData+0x29c>)
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	1c59      	adds	r1, r3, #1
 800d658:	6079      	str	r1, [r7, #4]
 800d65a:	4413      	add	r3, r2
 800d65c:	b2c2      	uxtb	r2, r0
 800d65e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = VOC%256;
 800d660:	4b41      	ldr	r3, [pc, #260]	; (800d768 <SendTxData+0x2bc>)
 800d662:	8818      	ldrh	r0, [r3, #0]
 800d664:	4b38      	ldr	r3, [pc, #224]	; (800d748 <SendTxData+0x29c>)
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	6079      	str	r1, [r7, #4]
 800d66e:	4413      	add	r3, r2
 800d670:	b2c2      	uxtb	r2, r0
 800d672:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = extBattery;
 800d674:	4b32      	ldr	r3, [pc, #200]	; (800d740 <SendTxData+0x294>)
 800d676:	6818      	ldr	r0, [r3, #0]
 800d678:	4b33      	ldr	r3, [pc, #204]	; (800d748 <SendTxData+0x29c>)
 800d67a:	685a      	ldr	r2, [r3, #4]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	1c59      	adds	r1, r3, #1
 800d680:	6079      	str	r1, [r7, #4]
 800d682:	4413      	add	r3, r2
 800d684:	b2c2      	uxtb	r2, r0
 800d686:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = LEDON;
 800d688:	4b2f      	ldr	r3, [pc, #188]	; (800d748 <SendTxData+0x29c>)
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	1c59      	adds	r1, r3, #1
 800d690:	6079      	str	r1, [r7, #4]
 800d692:	4413      	add	r3, r2
 800d694:	4a35      	ldr	r2, [pc, #212]	; (800d76c <SendTxData+0x2c0>)
 800d696:	7812      	ldrb	r2, [r2, #0]
 800d698:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	4b2a      	ldr	r3, [pc, #168]	; (800d748 <SendTxData+0x29c>)
 800d6a0:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6a2:	4b33      	ldr	r3, [pc, #204]	; (800d770 <SendTxData+0x2c4>)
 800d6a4:	7a5b      	ldrb	r3, [r3, #9]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d007      	beq.n	800d6ba <SendTxData+0x20e>
 800d6aa:	f002 f9e7 	bl	800fa7c <LmHandlerJoinStatus>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d102      	bne.n	800d6ba <SendTxData+0x20e>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d6b4:	482e      	ldr	r0, [pc, #184]	; (800d770 <SendTxData+0x2c4>)
 800d6b6:	f010 fd3d 	bl	801e134 <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d6ba:	4b2e      	ldr	r3, [pc, #184]	; (800d774 <SendTxData+0x2c8>)
 800d6bc:	78db      	ldrb	r3, [r3, #3]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	4821      	ldr	r0, [pc, #132]	; (800d748 <SendTxData+0x29c>)
 800d6c4:	f002 f9f6 	bl	800fab4 <LmHandlerSend>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	72fb      	strb	r3, [r7, #11]
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d6cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d106      	bne.n	800d6e2 <SendTxData+0x236>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d6d4:	4b28      	ldr	r3, [pc, #160]	; (800d778 <SendTxData+0x2cc>)
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	2100      	movs	r1, #0
 800d6da:	2001      	movs	r0, #1
 800d6dc:	f010 ff34 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
 800d6e0:	e016      	b.n	800d710 <SendTxData+0x264>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d6e2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6e6:	f113 0f06 	cmn.w	r3, #6
 800d6ea:	d111      	bne.n	800d710 <SendTxData+0x264>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d6ec:	f002 f918 	bl	800f920 <LmHandlerGetDutyCycleWaitTime>
 800d6f0:	60f8      	str	r0, [r7, #12]
    if (nextTxIn > 0)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d00b      	beq.n	800d710 <SendTxData+0x264>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4a20      	ldr	r2, [pc, #128]	; (800d77c <SendTxData+0x2d0>)
 800d6fc:	fba2 2303 	umull	r2, r3, r2, r3
 800d700:	099b      	lsrs	r3, r3, #6
 800d702:	9300      	str	r3, [sp, #0]
 800d704:	4b1e      	ldr	r3, [pc, #120]	; (800d780 <SendTxData+0x2d4>)
 800d706:	2201      	movs	r2, #1
 800d708:	2100      	movs	r1, #0
 800d70a:	2001      	movs	r0, #1
 800d70c:	f010 ff1c 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d710:	4b1c      	ldr	r3, [pc, #112]	; (800d784 <SendTxData+0x2d8>)
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d10f      	bne.n	800d738 <SendTxData+0x28c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d718:	481b      	ldr	r0, [pc, #108]	; (800d788 <SendTxData+0x2dc>)
 800d71a:	f010 fd0b 	bl	801e134 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d71e:	4b1b      	ldr	r3, [pc, #108]	; (800d78c <SendTxData+0x2e0>)
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	4293      	cmp	r3, r2
 800d726:	bf38      	it	cc
 800d728:	4613      	movcc	r3, r2
 800d72a:	4619      	mov	r1, r3
 800d72c:	4816      	ldr	r0, [pc, #88]	; (800d788 <SendTxData+0x2dc>)
 800d72e:	f010 fd71 	bl	801e214 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d732:	4815      	ldr	r0, [pc, #84]	; (800d788 <SendTxData+0x2dc>)
 800d734:	f010 fc90 	bl	801e058 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d738:	bf00      	nop
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}
 800d740:	20000287 	.word	0x20000287
 800d744:	0801edcc 	.word	0x0801edcc
 800d748:	20000094 	.word	0x20000094
 800d74c:	2000027e 	.word	0x2000027e
 800d750:	2000027c 	.word	0x2000027c
 800d754:	20000282 	.word	0x20000282
 800d758:	20000290 	.word	0x20000290
 800d75c:	40590000 	.word	0x40590000
 800d760:	51eb851f 	.word	0x51eb851f
 800d764:	20000298 	.word	0x20000298
 800d768:	20000284 	.word	0x20000284
 800d76c:	20000286 	.word	0x20000286
 800d770:	20000728 	.word	0x20000728
 800d774:	20000078 	.word	0x20000078
 800d778:	0801edd8 	.word	0x0801edd8
 800d77c:	10624dd3 	.word	0x10624dd3
 800d780:	0801ede8 	.word	0x0801ede8
 800d784:	200005d0 	.word	0x200005d0
 800d788:	200005d4 	.word	0x200005d4
 800d78c:	20000090 	.word	0x20000090

0800d790 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b082      	sub	sp, #8
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d798:	2100      	movs	r1, #0
 800d79a:	2002      	movs	r0, #2
 800d79c:	f010 fba4 	bl	801dee8 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d7a0:	4803      	ldr	r0, [pc, #12]	; (800d7b0 <OnTxTimerEvent+0x20>)
 800d7a2:	f010 fc59 	bl	801e058 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d7a6:	bf00      	nop
 800d7a8:	3708      	adds	r7, #8
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	200005d4 	.word	0x200005d4

0800d7b4 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d7bc:	bf00      	nop
 800d7be:	370c      	adds	r7, #12
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bc80      	pop	{r7}
 800d7c4:	4770      	bx	lr

0800d7c6 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d7ce:	bf00      	nop
 800d7d0:	370c      	adds	r7, #12
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bc80      	pop	{r7}
 800d7d6:	4770      	bx	lr

0800d7d8 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d7d8:	b480      	push	{r7}
 800d7da:	b083      	sub	sp, #12
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d7e0:	bf00      	nop
 800d7e2:	370c      	adds	r7, #12
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bc80      	pop	{r7}
 800d7e8:	4770      	bx	lr
	...

0800d7ec <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af04      	add	r7, sp, #16
 800d7f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d041      	beq.n	800d87e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d03d      	beq.n	800d87e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d802:	4821      	ldr	r0, [pc, #132]	; (800d888 <OnTxData+0x9c>)
 800d804:	f010 fc28 	bl	801e058 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d808:	4b20      	ldr	r3, [pc, #128]	; (800d88c <OnTxData+0xa0>)
 800d80a:	2200      	movs	r2, #0
 800d80c:	2100      	movs	r1, #0
 800d80e:	2002      	movs	r0, #2
 800d810:	f010 fe9a 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	7c12      	ldrb	r2, [r2, #16]
 800d81c:	4611      	mov	r1, r2
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d824:	4610      	mov	r0, r2
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d82c:	9203      	str	r2, [sp, #12]
 800d82e:	9002      	str	r0, [sp, #8]
 800d830:	9101      	str	r1, [sp, #4]
 800d832:	9300      	str	r3, [sp, #0]
 800d834:	4b16      	ldr	r3, [pc, #88]	; (800d890 <OnTxData+0xa4>)
 800d836:	2200      	movs	r2, #0
 800d838:	2100      	movs	r1, #0
 800d83a:	2003      	movs	r0, #3
 800d83c:	f010 fe84 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d840:	4b14      	ldr	r3, [pc, #80]	; (800d894 <OnTxData+0xa8>)
 800d842:	2200      	movs	r2, #0
 800d844:	2100      	movs	r1, #0
 800d846:	2003      	movs	r0, #3
 800d848:	f010 fe7e 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	7a1b      	ldrb	r3, [r3, #8]
 800d850:	2b01      	cmp	r3, #1
 800d852:	d10e      	bne.n	800d872 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	7a5b      	ldrb	r3, [r3, #9]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <OnTxData+0x74>
 800d85c:	4b0e      	ldr	r3, [pc, #56]	; (800d898 <OnTxData+0xac>)
 800d85e:	e000      	b.n	800d862 <OnTxData+0x76>
 800d860:	4b0e      	ldr	r3, [pc, #56]	; (800d89c <OnTxData+0xb0>)
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <OnTxData+0xb4>)
 800d866:	2200      	movs	r2, #0
 800d868:	2100      	movs	r1, #0
 800d86a:	2003      	movs	r0, #3
 800d86c:	f010 fe6c 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d870:	e005      	b.n	800d87e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d872:	4b0c      	ldr	r3, [pc, #48]	; (800d8a4 <OnTxData+0xb8>)
 800d874:	2200      	movs	r2, #0
 800d876:	2100      	movs	r1, #0
 800d878:	2003      	movs	r0, #3
 800d87a:	f010 fe65 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 800d87e:	bf00      	nop
 800d880:	3708      	adds	r7, #8
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200006f8 	.word	0x200006f8
 800d88c:	0801ee08 	.word	0x0801ee08
 800d890:	0801ee3c 	.word	0x0801ee3c
 800d894:	0801ee70 	.word	0x0801ee70
 800d898:	0801ee80 	.word	0x0801ee80
 800d89c:	0801ee84 	.word	0x0801ee84
 800d8a0:	0801ee8c 	.word	0x0801ee8c
 800d8a4:	0801eea0 	.word	0x0801eea0

0800d8a8 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d035      	beq.n	800d922 <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d11a      	bne.n	800d8f6 <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d8c0:	481a      	ldr	r0, [pc, #104]	; (800d92c <OnJoinRequest+0x84>)
 800d8c2:	f010 fc37 	bl	801e134 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d8c6:	4b1a      	ldr	r3, [pc, #104]	; (800d930 <OnJoinRequest+0x88>)
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	2002      	movs	r0, #2
 800d8ce:	f010 fe3b 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	79db      	ldrb	r3, [r3, #7]
 800d8d6:	2b01      	cmp	r3, #1
 800d8d8:	d106      	bne.n	800d8e8 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d8da:	4b16      	ldr	r3, [pc, #88]	; (800d934 <OnJoinRequest+0x8c>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	2100      	movs	r1, #0
 800d8e0:	2002      	movs	r0, #2
 800d8e2:	f010 fe31 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d8e6:	e01c      	b.n	800d922 <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d8e8:	4b13      	ldr	r3, [pc, #76]	; (800d938 <OnJoinRequest+0x90>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	2002      	movs	r0, #2
 800d8f0:	f010 fe2a 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 800d8f4:	e015      	b.n	800d922 <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d8f6:	4b11      	ldr	r3, [pc, #68]	; (800d93c <OnJoinRequest+0x94>)
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	2100      	movs	r1, #0
 800d8fc:	2002      	movs	r0, #2
 800d8fe:	f010 fe23 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	79db      	ldrb	r3, [r3, #7]
 800d906:	2b02      	cmp	r3, #2
 800d908:	d10b      	bne.n	800d922 <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d90a:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <OnJoinRequest+0x98>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	2100      	movs	r1, #0
 800d910:	2002      	movs	r0, #2
 800d912:	f010 fe19 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d916:	4b0b      	ldr	r3, [pc, #44]	; (800d944 <OnJoinRequest+0x9c>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2101      	movs	r1, #1
 800d91c:	4618      	mov	r0, r3
 800d91e:	f002 f809 	bl	800f934 <LmHandlerJoin>
}
 800d922:	bf00      	nop
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	20000728 	.word	0x20000728
 800d930:	0801eeb0 	.word	0x0801eeb0
 800d934:	0801eec8 	.word	0x0801eec8
 800d938:	0801eee8 	.word	0x0801eee8
 800d93c:	0801ef08 	.word	0x0801ef08
 800d940:	0801ef24 	.word	0x0801ef24
 800d944:	20000028 	.word	0x20000028

0800d948 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d94a:	b093      	sub	sp, #76	; 0x4c
 800d94c:	af0c      	add	r7, sp, #48	; 0x30
 800d94e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d056      	beq.n	800da04 <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	785b      	ldrb	r3, [r3, #1]
 800d95a:	2b02      	cmp	r3, #2
 800d95c:	d008      	beq.n	800d970 <OnBeaconStatusChange+0x28>
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d049      	beq.n	800d9f6 <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d962:	4b2a      	ldr	r3, [pc, #168]	; (800da0c <OnBeaconStatusChange+0xc4>)
 800d964:	2200      	movs	r2, #0
 800d966:	2100      	movs	r1, #0
 800d968:	2002      	movs	r0, #2
 800d96a:	f010 fded 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d96e:	e049      	b.n	800da04 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	7c1b      	ldrb	r3, [r3, #16]
 800d974:	4618      	mov	r0, r3
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d97c:	461c      	mov	r4, r3
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d984:	461d      	mov	r5, r3
 800d986:	697b      	ldr	r3, [r7, #20]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	6852      	ldr	r2, [r2, #4]
 800d98e:	6979      	ldr	r1, [r7, #20]
 800d990:	7d49      	ldrb	r1, [r1, #21]
 800d992:	460e      	mov	r6, r1
 800d994:	6979      	ldr	r1, [r7, #20]
 800d996:	7d89      	ldrb	r1, [r1, #22]
 800d998:	6139      	str	r1, [r7, #16]
 800d99a:	6979      	ldr	r1, [r7, #20]
 800d99c:	7dc9      	ldrb	r1, [r1, #23]
 800d99e:	60f9      	str	r1, [r7, #12]
 800d9a0:	6979      	ldr	r1, [r7, #20]
 800d9a2:	7e09      	ldrb	r1, [r1, #24]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	6979      	ldr	r1, [r7, #20]
 800d9a8:	7e49      	ldrb	r1, [r1, #25]
 800d9aa:	6079      	str	r1, [r7, #4]
 800d9ac:	6979      	ldr	r1, [r7, #20]
 800d9ae:	7e89      	ldrb	r1, [r1, #26]
 800d9b0:	6039      	str	r1, [r7, #0]
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	7ec9      	ldrb	r1, [r1, #27]
 800d9b6:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9b8:	f8d7 c000 	ldr.w	ip, [r7]
 800d9bc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d9c0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d9c4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d9c8:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d9cc:	f8cd c020 	str.w	ip, [sp, #32]
 800d9d0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d9d4:	f8cd c01c 	str.w	ip, [sp, #28]
 800d9d8:	6939      	ldr	r1, [r7, #16]
 800d9da:	9106      	str	r1, [sp, #24]
 800d9dc:	9605      	str	r6, [sp, #20]
 800d9de:	9204      	str	r2, [sp, #16]
 800d9e0:	9303      	str	r3, [sp, #12]
 800d9e2:	9502      	str	r5, [sp, #8]
 800d9e4:	9401      	str	r4, [sp, #4]
 800d9e6:	9000      	str	r0, [sp, #0]
 800d9e8:	4b09      	ldr	r3, [pc, #36]	; (800da10 <OnBeaconStatusChange+0xc8>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	2100      	movs	r1, #0
 800d9ee:	2002      	movs	r0, #2
 800d9f0:	f010 fdaa 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800d9f4:	e006      	b.n	800da04 <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800d9f6:	4b07      	ldr	r3, [pc, #28]	; (800da14 <OnBeaconStatusChange+0xcc>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	2002      	movs	r0, #2
 800d9fe:	f010 fda3 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800da02:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800da04:	bf00      	nop
 800da06:	371c      	adds	r7, #28
 800da08:	46bd      	mov	sp, r7
 800da0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da0c:	0801ef48 	.word	0x0801ef48
 800da10:	0801ef60 	.word	0x0801ef60
 800da14:	0801efd4 	.word	0x0801efd4

0800da18 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800da18:	b480      	push	{r7}
 800da1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800da1c:	bf00      	nop
 800da1e:	46bd      	mov	sp, r7
 800da20:	bc80      	pop	{r7}
 800da22:	4770      	bx	lr

0800da24 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b084      	sub	sp, #16
 800da28:	af02      	add	r7, sp, #8
 800da2a:	4603      	mov	r3, r0
 800da2c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	4a06      	ldr	r2, [pc, #24]	; (800da4c <OnClassChange+0x28>)
 800da32:	5cd3      	ldrb	r3, [r2, r3]
 800da34:	9300      	str	r3, [sp, #0]
 800da36:	4b06      	ldr	r3, [pc, #24]	; (800da50 <OnClassChange+0x2c>)
 800da38:	2200      	movs	r2, #0
 800da3a:	2100      	movs	r1, #0
 800da3c:	2002      	movs	r0, #2
 800da3e:	f010 fd83 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	0801f010 	.word	0x0801f010
 800da50:	0801eff4 	.word	0x0801eff4

0800da54 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800da54:	b580      	push	{r7, lr}
 800da56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800da58:	2100      	movs	r1, #0
 800da5a:	2001      	movs	r0, #1
 800da5c:	f010 fa44 	bl	801dee8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800da60:	bf00      	nop
 800da62:	bd80      	pop	{r7, pc}

0800da64 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800da6c:	4a0d      	ldr	r2, [pc, #52]	; (800daa4 <OnTxPeriodicityChanged+0x40>)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800da72:	4b0c      	ldr	r3, [pc, #48]	; (800daa4 <OnTxPeriodicityChanged+0x40>)
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d103      	bne.n	800da82 <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800da7a:	4b0a      	ldr	r3, [pc, #40]	; (800daa4 <OnTxPeriodicityChanged+0x40>)
 800da7c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800da80:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800da82:	4809      	ldr	r0, [pc, #36]	; (800daa8 <OnTxPeriodicityChanged+0x44>)
 800da84:	f010 fb56 	bl	801e134 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800da88:	4b06      	ldr	r3, [pc, #24]	; (800daa4 <OnTxPeriodicityChanged+0x40>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	4619      	mov	r1, r3
 800da8e:	4806      	ldr	r0, [pc, #24]	; (800daa8 <OnTxPeriodicityChanged+0x44>)
 800da90:	f010 fbc0 	bl	801e214 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800da94:	4804      	ldr	r0, [pc, #16]	; (800daa8 <OnTxPeriodicityChanged+0x44>)
 800da96:	f010 fadf 	bl	801e058 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800da9a:	bf00      	nop
 800da9c:	3708      	adds	r7, #8
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	20000090 	.word	0x20000090
 800daa8:	200005d4 	.word	0x200005d4

0800daac <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800dab6:	4a04      	ldr	r2, [pc, #16]	; (800dac8 <OnTxFrameCtrlChanged+0x1c>)
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800dabc:	bf00      	nop
 800dabe:	370c      	adds	r7, #12
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bc80      	pop	{r7}
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	20000078 	.word	0x20000078

0800dacc <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800dad6:	4a04      	ldr	r2, [pc, #16]	; (800dae8 <OnPingSlotPeriodicityChanged+0x1c>)
 800dad8:	79fb      	ldrb	r3, [r7, #7]
 800dada:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800dadc:	bf00      	nop
 800dade:	370c      	adds	r7, #12
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bc80      	pop	{r7}
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	20000078 	.word	0x20000078

0800daec <OnSystemReset>:

static void OnSystemReset(void)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800daf0:	f002 fd11 	bl	8010516 <LmHandlerHalt>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d106      	bne.n	800db08 <OnSystemReset+0x1c>
 800dafa:	f001 ffbf 	bl	800fa7c <LmHandlerJoinStatus>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800db04:	f7ff fb1e 	bl	800d144 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800db08:	bf00      	nop
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <StopJoin>:

static void StopJoin(void)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800db10:	4817      	ldr	r0, [pc, #92]	; (800db70 <StopJoin+0x64>)
 800db12:	f010 fb0f 	bl	801e134 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800db16:	f002 fcf1 	bl	80104fc <LmHandlerStop>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d006      	beq.n	800db2e <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800db20:	4b14      	ldr	r3, [pc, #80]	; (800db74 <StopJoin+0x68>)
 800db22:	2200      	movs	r2, #0
 800db24:	2100      	movs	r1, #0
 800db26:	2002      	movs	r0, #2
 800db28:	f010 fd0e 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
 800db2c:	e01a      	b.n	800db64 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800db2e:	4b12      	ldr	r3, [pc, #72]	; (800db78 <StopJoin+0x6c>)
 800db30:	2200      	movs	r2, #0
 800db32:	2100      	movs	r1, #0
 800db34:	2002      	movs	r0, #2
 800db36:	f010 fd07 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800db3a:	4b10      	ldr	r3, [pc, #64]	; (800db7c <StopJoin+0x70>)
 800db3c:	2201      	movs	r2, #1
 800db3e:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800db40:	4b0f      	ldr	r3, [pc, #60]	; (800db80 <StopJoin+0x74>)
 800db42:	2200      	movs	r2, #0
 800db44:	2100      	movs	r1, #0
 800db46:	2002      	movs	r0, #2
 800db48:	f010 fcfe 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800db4c:	480d      	ldr	r0, [pc, #52]	; (800db84 <StopJoin+0x78>)
 800db4e:	f001 fe23 	bl	800f798 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800db52:	4b0a      	ldr	r3, [pc, #40]	; (800db7c <StopJoin+0x70>)
 800db54:	781b      	ldrb	r3, [r3, #0]
 800db56:	2101      	movs	r1, #1
 800db58:	4618      	mov	r0, r3
 800db5a:	f001 feeb 	bl	800f934 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800db5e:	4804      	ldr	r0, [pc, #16]	; (800db70 <StopJoin+0x64>)
 800db60:	f010 fa7a 	bl	801e058 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800db64:	4808      	ldr	r0, [pc, #32]	; (800db88 <StopJoin+0x7c>)
 800db66:	f010 fa77 	bl	801e058 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800db6a:	bf00      	nop
 800db6c:	bd80      	pop	{r7, pc}
 800db6e:	bf00      	nop
 800db70:	200005d4 	.word	0x200005d4
 800db74:	0801f014 	.word	0x0801f014
 800db78:	0801f034 	.word	0x0801f034
 800db7c:	20000028 	.word	0x20000028
 800db80:	0801f048 	.word	0x0801f048
 800db84:	20000078 	.word	0x20000078
 800db88:	200005ec 	.word	0x200005ec

0800db8c <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b082      	sub	sp, #8
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800db94:	4b05      	ldr	r3, [pc, #20]	; (800dbac <OnStopJoinTimerEvent+0x20>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b02      	cmp	r3, #2
 800db9a:	d103      	bne.n	800dba4 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800db9c:	2100      	movs	r1, #0
 800db9e:	2008      	movs	r0, #8
 800dba0:	f010 f9a2 	bl	801dee8 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	20000028 	.word	0x20000028

0800dbb0 <StoreContext>:

static void StoreContext(void)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dbb6:	23ff      	movs	r3, #255	; 0xff
 800dbb8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800dbba:	f002 fce1 	bl	8010580 <LmHandlerNvmDataStore>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800dbc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbc6:	f113 0f08 	cmn.w	r3, #8
 800dbca:	d106      	bne.n	800dbda <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800dbcc:	4b0a      	ldr	r3, [pc, #40]	; (800dbf8 <StoreContext+0x48>)
 800dbce:	2200      	movs	r2, #0
 800dbd0:	2100      	movs	r1, #0
 800dbd2:	2002      	movs	r0, #2
 800dbd4:	f010 fcb8 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800dbd8:	e00a      	b.n	800dbf0 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800dbda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbe2:	d105      	bne.n	800dbf0 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800dbe4:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <StoreContext+0x4c>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2100      	movs	r1, #0
 800dbea:	2002      	movs	r0, #2
 800dbec:	f010 fcac 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 800dbf0:	bf00      	nop
 800dbf2:	3708      	adds	r7, #8
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	0801f068 	.word	0x0801f068
 800dbfc:	0801f080 	.word	0x0801f080

0800dc00 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b082      	sub	sp, #8
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	4603      	mov	r3, r0
 800dc08:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dc0a:	79fb      	ldrb	r3, [r7, #7]
 800dc0c:	2b01      	cmp	r3, #1
 800dc0e:	d106      	bne.n	800dc1e <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dc10:	4b08      	ldr	r3, [pc, #32]	; (800dc34 <OnNvmDataChange+0x34>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	2100      	movs	r1, #0
 800dc16:	2002      	movs	r0, #2
 800dc18:	f010 fc96 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dc1c:	e005      	b.n	800dc2a <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dc1e:	4b06      	ldr	r3, [pc, #24]	; (800dc38 <OnNvmDataChange+0x38>)
 800dc20:	2200      	movs	r2, #0
 800dc22:	2100      	movs	r1, #0
 800dc24:	2002      	movs	r0, #2
 800dc26:	f010 fc8f 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	0801f098 	.word	0x0801f098
 800dc38:	0801f0ac 	.word	0x0801f0ac

0800dc3c <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b082      	sub	sp, #8
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dc46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc4a:	4807      	ldr	r0, [pc, #28]	; (800dc68 <OnStoreContextRequest+0x2c>)
 800dc4c:	f7f3 fcf6 	bl	800163c <FLASH_IF_Erase>
 800dc50:	4603      	mov	r3, r0
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d104      	bne.n	800dc60 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	6879      	ldr	r1, [r7, #4]
 800dc5a:	4803      	ldr	r0, [pc, #12]	; (800dc68 <OnStoreContextRequest+0x2c>)
 800dc5c:	f7f3 fc9e 	bl	800159c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dc60:	bf00      	nop
 800dc62:	3708      	adds	r7, #8
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bd80      	pop	{r7, pc}
 800dc68:	0803f000 	.word	0x0803f000

0800dc6c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b082      	sub	sp, #8
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dc76:	683a      	ldr	r2, [r7, #0]
 800dc78:	4903      	ldr	r1, [pc, #12]	; (800dc88 <OnRestoreContextRequest+0x1c>)
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f7f3 fcb6 	bl	80015ec <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	0803f000 	.word	0x0803f000

0800dc8c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dc90:	4b15      	ldr	r3, [pc, #84]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dc96:	4b14      	ldr	r3, [pc, #80]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dc98:	2200      	movs	r2, #0
 800dc9a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dc9c:	4b12      	ldr	r3, [pc, #72]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dc9e:	2200      	movs	r2, #0
 800dca0:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dca2:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dca4:	2200      	movs	r2, #0
 800dca6:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dca8:	4b0f      	ldr	r3, [pc, #60]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	f043 0320 	orr.w	r3, r3, #32
 800dcb0:	4a0d      	ldr	r2, [pc, #52]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dcb2:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dcb4:	4b0c      	ldr	r3, [pc, #48]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dcb6:	685b      	ldr	r3, [r3, #4]
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d10c      	bne.n	800dcd6 <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dcbc:	4b0b      	ldr	r3, [pc, #44]	; (800dcec <LoraInfo_Init+0x60>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2100      	movs	r1, #0
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	f010 fc40 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dcc8:	bf00      	nop
 800dcca:	f010 fc2b 	bl	801e524 <UTIL_ADV_TRACE_IsBufferEmpty>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d1fa      	bne.n	800dcca <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dcd4:	e7fe      	b.n	800dcd4 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dcd6:	4b04      	ldr	r3, [pc, #16]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dcdc:	4b02      	ldr	r3, [pc, #8]	; (800dce8 <LoraInfo_Init+0x5c>)
 800dcde:	2200      	movs	r2, #0
 800dce0:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dce2:	bf00      	nop
 800dce4:	bd80      	pop	{r7, pc}
 800dce6:	bf00      	nop
 800dce8:	20000740 	.word	0x20000740
 800dcec:	0801f0c0 	.word	0x0801f0c0

0800dcf0 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dcf4:	4b02      	ldr	r3, [pc, #8]	; (800dd00 <LoraInfo_GetPtr+0x10>)
}
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bc80      	pop	{r7}
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	20000740 	.word	0x20000740

0800dd04 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dd08:	f7f5 fd17 	bl	800373a <BSP_RADIO_Init>
 800dd0c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	bd80      	pop	{r7, pc}

0800dd12 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dd12:	b580      	push	{r7, lr}
 800dd14:	b082      	sub	sp, #8
 800dd16:	af00      	add	r7, sp, #0
 800dd18:	4603      	mov	r3, r0
 800dd1a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dd1c:	79fb      	ldrb	r3, [r7, #7]
 800dd1e:	4618      	mov	r0, r3
 800dd20:	f7f5 fd3c 	bl	800379c <BSP_RADIO_ConfigRFSwitch>
 800dd24:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	3708      	adds	r7, #8
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dd32:	f7f5 fd81 	bl	8003838 <BSP_RADIO_GetTxConfig>
 800dd36:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dd40:	f7f5 fd81 	bl	8003846 <BSP_RADIO_IsTCXO>
 800dd44:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd46:	4618      	mov	r0, r3
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dd4e:	f7f5 fd81 	bl	8003854 <BSP_RADIO_IsDCDC>
 800dd52:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b082      	sub	sp, #8
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	4603      	mov	r3, r0
 800dd60:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	4618      	mov	r0, r3
 800dd66:	f7f5 fd7c 	bl	8003862 <BSP_RADIO_GetRFOMaxPowerConfig>
 800dd6a:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3708      	adds	r7, #8
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b082      	sub	sp, #8
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	33f1      	adds	r3, #241	; 0xf1
 800dd80:	2210      	movs	r2, #16
 800dd82:	2100      	movs	r1, #0
 800dd84:	4618      	mov	r0, r3
 800dd86:	f00c f875 	bl	8019e74 <memset1>
    ctx->M_n = 0;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	22f0      	movs	r2, #240	; 0xf0
 800dd96:	2100      	movs	r1, #0
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f00c f86b 	bl	8019e74 <memset1>
}
 800dd9e:	bf00      	nop
 800dda0:	3708      	adds	r7, #8
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b082      	sub	sp, #8
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	461a      	mov	r2, r3
 800ddb4:	2110      	movs	r1, #16
 800ddb6:	6838      	ldr	r0, [r7, #0]
 800ddb8:	f000 fe5c 	bl	800ea74 <lorawan_aes_set_key>
}
 800ddbc:	bf00      	nop
 800ddbe:	3708      	adds	r7, #8
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	bd80      	pop	{r7, pc}

0800ddc4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b08c      	sub	sp, #48	; 0x30
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	60f8      	str	r0, [r7, #12]
 800ddcc:	60b9      	str	r1, [r7, #8]
 800ddce:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	f000 80a1 	beq.w	800df1e <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800dde2:	f1c3 0310 	rsb	r3, r3, #16
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	4293      	cmp	r3, r2
 800ddea:	bf28      	it	cs
 800ddec:	4613      	movcs	r3, r2
 800ddee:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f203 1201 	addw	r2, r3, #257	; 0x101
 800ddf6:	68fb      	ldr	r3, [r7, #12]
 800ddf8:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddfc:	4413      	add	r3, r2
 800ddfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de00:	b292      	uxth	r2, r2
 800de02:	68b9      	ldr	r1, [r7, #8]
 800de04:	4618      	mov	r0, r3
 800de06:	f00b fffa 	bl	8019dfe <memcpy1>
        ctx->M_n += mlen;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800de10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de12:	441a      	add	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de20:	2b0f      	cmp	r3, #15
 800de22:	f240 808d 	bls.w	800df40 <AES_CMAC_Update+0x17c>
 800de26:	687a      	ldr	r2, [r7, #4]
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	429a      	cmp	r2, r3
 800de2c:	f000 8088 	beq.w	800df40 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800de30:	2300      	movs	r3, #0
 800de32:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de34:	e015      	b.n	800de62 <AES_CMAC_Update+0x9e>
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de3a:	4413      	add	r3, r2
 800de3c:	33f1      	adds	r3, #241	; 0xf1
 800de3e:	781a      	ldrb	r2, [r3, #0]
 800de40:	68f9      	ldr	r1, [r7, #12]
 800de42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de44:	440b      	add	r3, r1
 800de46:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de4a:	781b      	ldrb	r3, [r3, #0]
 800de4c:	4053      	eors	r3, r2
 800de4e:	b2d9      	uxtb	r1, r3
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de54:	4413      	add	r3, r2
 800de56:	33f1      	adds	r3, #241	; 0xf1
 800de58:	460a      	mov	r2, r1
 800de5a:	701a      	strb	r2, [r3, #0]
 800de5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5e:	3301      	adds	r3, #1
 800de60:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	2b0f      	cmp	r3, #15
 800de66:	dde6      	ble.n	800de36 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de6e:	f107 0314 	add.w	r3, r7, #20
 800de72:	2210      	movs	r2, #16
 800de74:	4618      	mov	r0, r3
 800de76:	f00b ffc2 	bl	8019dfe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	f107 0114 	add.w	r1, r7, #20
 800de80:	f107 0314 	add.w	r3, r7, #20
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fed3 	bl	800ec30 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	33f1      	adds	r3, #241	; 0xf1
 800de8e:	f107 0114 	add.w	r1, r7, #20
 800de92:	2210      	movs	r2, #16
 800de94:	4618      	mov	r0, r3
 800de96:	f00b ffb2 	bl	8019dfe <memcpy1>

        data += mlen;
 800de9a:	68ba      	ldr	r2, [r7, #8]
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	4413      	add	r3, r2
 800dea0:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800dea2:	687a      	ldr	r2, [r7, #4]
 800dea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea6:	1ad3      	subs	r3, r2, r3
 800dea8:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800deaa:	e038      	b.n	800df1e <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800deac:	2300      	movs	r3, #0
 800deae:	62bb      	str	r3, [r7, #40]	; 0x28
 800deb0:	e013      	b.n	800deda <AES_CMAC_Update+0x116>
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deb6:	4413      	add	r3, r2
 800deb8:	33f1      	adds	r3, #241	; 0xf1
 800deba:	781a      	ldrb	r2, [r3, #0]
 800debc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800debe:	68b9      	ldr	r1, [r7, #8]
 800dec0:	440b      	add	r3, r1
 800dec2:	781b      	ldrb	r3, [r3, #0]
 800dec4:	4053      	eors	r3, r2
 800dec6:	b2d9      	uxtb	r1, r3
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800decc:	4413      	add	r3, r2
 800dece:	33f1      	adds	r3, #241	; 0xf1
 800ded0:	460a      	mov	r2, r1
 800ded2:	701a      	strb	r2, [r3, #0]
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	3301      	adds	r3, #1
 800ded8:	62bb      	str	r3, [r7, #40]	; 0x28
 800deda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dedc:	2b0f      	cmp	r3, #15
 800dede:	dde8      	ble.n	800deb2 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800dee6:	f107 0314 	add.w	r3, r7, #20
 800deea:	2210      	movs	r2, #16
 800deec:	4618      	mov	r0, r3
 800deee:	f00b ff86 	bl	8019dfe <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800def2:	68fa      	ldr	r2, [r7, #12]
 800def4:	f107 0114 	add.w	r1, r7, #20
 800def8:	f107 0314 	add.w	r3, r7, #20
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fe97 	bl	800ec30 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	33f1      	adds	r3, #241	; 0xf1
 800df06:	f107 0114 	add.w	r1, r7, #20
 800df0a:	2210      	movs	r2, #16
 800df0c:	4618      	mov	r0, r3
 800df0e:	f00b ff76 	bl	8019dfe <memcpy1>

        data += 16;
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	3310      	adds	r3, #16
 800df16:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	3b10      	subs	r3, #16
 800df1c:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2b10      	cmp	r3, #16
 800df22:	d8c3      	bhi.n	800deac <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	b292      	uxth	r2, r2
 800df2e:	68b9      	ldr	r1, [r7, #8]
 800df30:	4618      	mov	r0, r3
 800df32:	f00b ff64 	bl	8019dfe <memcpy1>
    ctx->M_n = len;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800df3e:	e000      	b.n	800df42 <AES_CMAC_Update+0x17e>
            return;
 800df40:	bf00      	nop
}
 800df42:	3730      	adds	r7, #48	; 0x30
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}

0800df48 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b092      	sub	sp, #72	; 0x48
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800df52:	f107 031c 	add.w	r3, r7, #28
 800df56:	2210      	movs	r2, #16
 800df58:	2100      	movs	r1, #0
 800df5a:	4618      	mov	r0, r3
 800df5c:	f00b ff8a 	bl	8019e74 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800df60:	683a      	ldr	r2, [r7, #0]
 800df62:	f107 011c 	add.w	r1, r7, #28
 800df66:	f107 031c 	add.w	r3, r7, #28
 800df6a:	4618      	mov	r0, r3
 800df6c:	f000 fe60 	bl	800ec30 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800df70:	7f3b      	ldrb	r3, [r7, #28]
 800df72:	b25b      	sxtb	r3, r3
 800df74:	2b00      	cmp	r3, #0
 800df76:	da30      	bge.n	800dfda <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800df78:	2300      	movs	r3, #0
 800df7a:	647b      	str	r3, [r7, #68]	; 0x44
 800df7c:	e01b      	b.n	800dfb6 <AES_CMAC_Final+0x6e>
 800df7e:	f107 021c 	add.w	r2, r7, #28
 800df82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df84:	4413      	add	r3, r2
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	b25a      	sxtb	r2, r3
 800df8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df8e:	3301      	adds	r3, #1
 800df90:	3348      	adds	r3, #72	; 0x48
 800df92:	443b      	add	r3, r7
 800df94:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800df98:	09db      	lsrs	r3, r3, #7
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	b25b      	sxtb	r3, r3
 800df9e:	4313      	orrs	r3, r2
 800dfa0:	b25b      	sxtb	r3, r3
 800dfa2:	b2d9      	uxtb	r1, r3
 800dfa4:	f107 021c 	add.w	r2, r7, #28
 800dfa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfaa:	4413      	add	r3, r2
 800dfac:	460a      	mov	r2, r1
 800dfae:	701a      	strb	r2, [r3, #0]
 800dfb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfb2:	3301      	adds	r3, #1
 800dfb4:	647b      	str	r3, [r7, #68]	; 0x44
 800dfb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfb8:	2b0e      	cmp	r3, #14
 800dfba:	dde0      	ble.n	800df7e <AES_CMAC_Final+0x36>
 800dfbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	b2db      	uxtb	r3, r3
 800dfc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dfc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfcc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dfd0:	43db      	mvns	r3, r3
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dfd8:	e027      	b.n	800e02a <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dfda:	2300      	movs	r3, #0
 800dfdc:	643b      	str	r3, [r7, #64]	; 0x40
 800dfde:	e01b      	b.n	800e018 <AES_CMAC_Final+0xd0>
 800dfe0:	f107 021c 	add.w	r2, r7, #28
 800dfe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfe6:	4413      	add	r3, r2
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	b25a      	sxtb	r2, r3
 800dfee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dff0:	3301      	adds	r3, #1
 800dff2:	3348      	adds	r3, #72	; 0x48
 800dff4:	443b      	add	r3, r7
 800dff6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dffa:	09db      	lsrs	r3, r3, #7
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	b25b      	sxtb	r3, r3
 800e000:	4313      	orrs	r3, r2
 800e002:	b25b      	sxtb	r3, r3
 800e004:	b2d9      	uxtb	r1, r3
 800e006:	f107 021c 	add.w	r2, r7, #28
 800e00a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e00c:	4413      	add	r3, r2
 800e00e:	460a      	mov	r2, r1
 800e010:	701a      	strb	r2, [r3, #0]
 800e012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e014:	3301      	adds	r3, #1
 800e016:	643b      	str	r3, [r7, #64]	; 0x40
 800e018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e01a:	2b0e      	cmp	r3, #14
 800e01c:	dde0      	ble.n	800dfe0 <AES_CMAC_Final+0x98>
 800e01e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e022:	005b      	lsls	r3, r3, #1
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e030:	2b10      	cmp	r3, #16
 800e032:	d11d      	bne.n	800e070 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e034:	2300      	movs	r3, #0
 800e036:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e038:	e016      	b.n	800e068 <AES_CMAC_Final+0x120>
 800e03a:	683a      	ldr	r2, [r7, #0]
 800e03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e03e:	4413      	add	r3, r2
 800e040:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e044:	781a      	ldrb	r2, [r3, #0]
 800e046:	f107 011c 	add.w	r1, r7, #28
 800e04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04c:	440b      	add	r3, r1
 800e04e:	781b      	ldrb	r3, [r3, #0]
 800e050:	4053      	eors	r3, r2
 800e052:	b2d9      	uxtb	r1, r3
 800e054:	683a      	ldr	r2, [r7, #0]
 800e056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e058:	4413      	add	r3, r2
 800e05a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e05e:	460a      	mov	r2, r1
 800e060:	701a      	strb	r2, [r3, #0]
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	3301      	adds	r3, #1
 800e066:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e06a:	2b0f      	cmp	r3, #15
 800e06c:	dde5      	ble.n	800e03a <AES_CMAC_Final+0xf2>
 800e06e:	e096      	b.n	800e19e <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e070:	7f3b      	ldrb	r3, [r7, #28]
 800e072:	b25b      	sxtb	r3, r3
 800e074:	2b00      	cmp	r3, #0
 800e076:	da30      	bge.n	800e0da <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e078:	2300      	movs	r3, #0
 800e07a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e07c:	e01b      	b.n	800e0b6 <AES_CMAC_Final+0x16e>
 800e07e:	f107 021c 	add.w	r2, r7, #28
 800e082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e084:	4413      	add	r3, r2
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	005b      	lsls	r3, r3, #1
 800e08a:	b25a      	sxtb	r2, r3
 800e08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e08e:	3301      	adds	r3, #1
 800e090:	3348      	adds	r3, #72	; 0x48
 800e092:	443b      	add	r3, r7
 800e094:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e098:	09db      	lsrs	r3, r3, #7
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	b25b      	sxtb	r3, r3
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	b25b      	sxtb	r3, r3
 800e0a2:	b2d9      	uxtb	r1, r3
 800e0a4:	f107 021c 	add.w	r2, r7, #28
 800e0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0aa:	4413      	add	r3, r2
 800e0ac:	460a      	mov	r2, r1
 800e0ae:	701a      	strb	r2, [r3, #0]
 800e0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0b8:	2b0e      	cmp	r3, #14
 800e0ba:	dde0      	ble.n	800e07e <AES_CMAC_Final+0x136>
 800e0bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	b2db      	uxtb	r3, r3
 800e0c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e0c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0cc:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e0d0:	43db      	mvns	r3, r3
 800e0d2:	b2db      	uxtb	r3, r3
 800e0d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e0d8:	e027      	b.n	800e12a <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e0da:	2300      	movs	r3, #0
 800e0dc:	637b      	str	r3, [r7, #52]	; 0x34
 800e0de:	e01b      	b.n	800e118 <AES_CMAC_Final+0x1d0>
 800e0e0:	f107 021c 	add.w	r2, r7, #28
 800e0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0e6:	4413      	add	r3, r2
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	005b      	lsls	r3, r3, #1
 800e0ec:	b25a      	sxtb	r2, r3
 800e0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	3348      	adds	r3, #72	; 0x48
 800e0f4:	443b      	add	r3, r7
 800e0f6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0fa:	09db      	lsrs	r3, r3, #7
 800e0fc:	b2db      	uxtb	r3, r3
 800e0fe:	b25b      	sxtb	r3, r3
 800e100:	4313      	orrs	r3, r2
 800e102:	b25b      	sxtb	r3, r3
 800e104:	b2d9      	uxtb	r1, r3
 800e106:	f107 021c 	add.w	r2, r7, #28
 800e10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e10c:	4413      	add	r3, r2
 800e10e:	460a      	mov	r2, r1
 800e110:	701a      	strb	r2, [r3, #0]
 800e112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e114:	3301      	adds	r3, #1
 800e116:	637b      	str	r3, [r7, #52]	; 0x34
 800e118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e11a:	2b0e      	cmp	r3, #14
 800e11c:	dde0      	ble.n	800e0e0 <AES_CMAC_Final+0x198>
 800e11e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e122:	005b      	lsls	r3, r3, #1
 800e124:	b2db      	uxtb	r3, r3
 800e126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e130:	683a      	ldr	r2, [r7, #0]
 800e132:	4413      	add	r3, r2
 800e134:	2280      	movs	r2, #128	; 0x80
 800e136:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e13a:	e007      	b.n	800e14c <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4413      	add	r3, r2
 800e146:	2200      	movs	r2, #0
 800e148:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e160:	2b0f      	cmp	r3, #15
 800e162:	d9eb      	bls.n	800e13c <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e164:	2300      	movs	r3, #0
 800e166:	633b      	str	r3, [r7, #48]	; 0x30
 800e168:	e016      	b.n	800e198 <AES_CMAC_Final+0x250>
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16e:	4413      	add	r3, r2
 800e170:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e174:	781a      	ldrb	r2, [r3, #0]
 800e176:	f107 011c 	add.w	r1, r7, #28
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	440b      	add	r3, r1
 800e17e:	781b      	ldrb	r3, [r3, #0]
 800e180:	4053      	eors	r3, r2
 800e182:	b2d9      	uxtb	r1, r3
 800e184:	683a      	ldr	r2, [r7, #0]
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	4413      	add	r3, r2
 800e18a:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e18e:	460a      	mov	r2, r1
 800e190:	701a      	strb	r2, [r3, #0]
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	3301      	adds	r3, #1
 800e196:	633b      	str	r3, [r7, #48]	; 0x30
 800e198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19a:	2b0f      	cmp	r3, #15
 800e19c:	dde5      	ble.n	800e16a <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e19e:	2300      	movs	r3, #0
 800e1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1a2:	e015      	b.n	800e1d0 <AES_CMAC_Final+0x288>
 800e1a4:	683a      	ldr	r2, [r7, #0]
 800e1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a8:	4413      	add	r3, r2
 800e1aa:	33f1      	adds	r3, #241	; 0xf1
 800e1ac:	781a      	ldrb	r2, [r3, #0]
 800e1ae:	6839      	ldr	r1, [r7, #0]
 800e1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b2:	440b      	add	r3, r1
 800e1b4:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	4053      	eors	r3, r2
 800e1bc:	b2d9      	uxtb	r1, r3
 800e1be:	683a      	ldr	r2, [r7, #0]
 800e1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c2:	4413      	add	r3, r2
 800e1c4:	33f1      	adds	r3, #241	; 0xf1
 800e1c6:	460a      	mov	r2, r1
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d2:	2b0f      	cmp	r3, #15
 800e1d4:	dde6      	ble.n	800e1a4 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e1dc:	f107 030c 	add.w	r3, r7, #12
 800e1e0:	2210      	movs	r2, #16
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f00b fe0b 	bl	8019dfe <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e1e8:	683a      	ldr	r2, [r7, #0]
 800e1ea:	f107 030c 	add.w	r3, r7, #12
 800e1ee:	6879      	ldr	r1, [r7, #4]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f000 fd1d 	bl	800ec30 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e1f6:	f107 031c 	add.w	r3, r7, #28
 800e1fa:	2210      	movs	r2, #16
 800e1fc:	2100      	movs	r1, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f00b fe38 	bl	8019e74 <memset1>
}
 800e204:	bf00      	nop
 800e206:	3748      	adds	r7, #72	; 0x48
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	781a      	ldrb	r2, [r3, #0]
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	3301      	adds	r3, #1
 800e222:	683a      	ldr	r2, [r7, #0]
 800e224:	7852      	ldrb	r2, [r2, #1]
 800e226:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	3302      	adds	r3, #2
 800e22c:	683a      	ldr	r2, [r7, #0]
 800e22e:	7892      	ldrb	r2, [r2, #2]
 800e230:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	3303      	adds	r3, #3
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	78d2      	ldrb	r2, [r2, #3]
 800e23a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	3304      	adds	r3, #4
 800e240:	683a      	ldr	r2, [r7, #0]
 800e242:	7912      	ldrb	r2, [r2, #4]
 800e244:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	3305      	adds	r3, #5
 800e24a:	683a      	ldr	r2, [r7, #0]
 800e24c:	7952      	ldrb	r2, [r2, #5]
 800e24e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	3306      	adds	r3, #6
 800e254:	683a      	ldr	r2, [r7, #0]
 800e256:	7992      	ldrb	r2, [r2, #6]
 800e258:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	3307      	adds	r3, #7
 800e25e:	683a      	ldr	r2, [r7, #0]
 800e260:	79d2      	ldrb	r2, [r2, #7]
 800e262:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	3308      	adds	r3, #8
 800e268:	683a      	ldr	r2, [r7, #0]
 800e26a:	7a12      	ldrb	r2, [r2, #8]
 800e26c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	3309      	adds	r3, #9
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	7a52      	ldrb	r2, [r2, #9]
 800e276:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	330a      	adds	r3, #10
 800e27c:	683a      	ldr	r2, [r7, #0]
 800e27e:	7a92      	ldrb	r2, [r2, #10]
 800e280:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	330b      	adds	r3, #11
 800e286:	683a      	ldr	r2, [r7, #0]
 800e288:	7ad2      	ldrb	r2, [r2, #11]
 800e28a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	330c      	adds	r3, #12
 800e290:	683a      	ldr	r2, [r7, #0]
 800e292:	7b12      	ldrb	r2, [r2, #12]
 800e294:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	330d      	adds	r3, #13
 800e29a:	683a      	ldr	r2, [r7, #0]
 800e29c:	7b52      	ldrb	r2, [r2, #13]
 800e29e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	330e      	adds	r3, #14
 800e2a4:	683a      	ldr	r2, [r7, #0]
 800e2a6:	7b92      	ldrb	r2, [r2, #14]
 800e2a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	330f      	adds	r3, #15
 800e2ae:	683a      	ldr	r2, [r7, #0]
 800e2b0:	7bd2      	ldrb	r2, [r2, #15]
 800e2b2:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2b4:	bf00      	nop
 800e2b6:	370c      	adds	r7, #12
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bc80      	pop	{r7}
 800e2bc:	4770      	bx	lr

0800e2be <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e2be:	b480      	push	{r7}
 800e2c0:	b085      	sub	sp, #20
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	60f8      	str	r0, [r7, #12]
 800e2c6:	60b9      	str	r1, [r7, #8]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e2cc:	e007      	b.n	800e2de <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	1c53      	adds	r3, r2, #1
 800e2d2:	60bb      	str	r3, [r7, #8]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	1c59      	adds	r1, r3, #1
 800e2d8:	60f9      	str	r1, [r7, #12]
 800e2da:	7812      	ldrb	r2, [r2, #0]
 800e2dc:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e2de:	79fb      	ldrb	r3, [r7, #7]
 800e2e0:	1e5a      	subs	r2, r3, #1
 800e2e2:	71fa      	strb	r2, [r7, #7]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1f2      	bne.n	800e2ce <copy_block_nn+0x10>
}
 800e2e8:	bf00      	nop
 800e2ea:	bf00      	nop
 800e2ec:	3714      	adds	r7, #20
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bc80      	pop	{r7}
 800e2f2:	4770      	bx	lr

0800e2f4 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b083      	sub	sp, #12
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	781a      	ldrb	r2, [r3, #0]
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	4053      	eors	r3, r2
 800e308:	b2da      	uxtb	r2, r3
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	3301      	adds	r3, #1
 800e312:	7819      	ldrb	r1, [r3, #0]
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3301      	adds	r3, #1
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	3301      	adds	r3, #1
 800e31e:	404a      	eors	r2, r1
 800e320:	b2d2      	uxtb	r2, r2
 800e322:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	3302      	adds	r3, #2
 800e328:	7819      	ldrb	r1, [r3, #0]
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	3302      	adds	r3, #2
 800e32e:	781a      	ldrb	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	3302      	adds	r3, #2
 800e334:	404a      	eors	r2, r1
 800e336:	b2d2      	uxtb	r2, r2
 800e338:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	3303      	adds	r3, #3
 800e33e:	7819      	ldrb	r1, [r3, #0]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	3303      	adds	r3, #3
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	3303      	adds	r3, #3
 800e34a:	404a      	eors	r2, r1
 800e34c:	b2d2      	uxtb	r2, r2
 800e34e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	3304      	adds	r3, #4
 800e354:	7819      	ldrb	r1, [r3, #0]
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	3304      	adds	r3, #4
 800e35a:	781a      	ldrb	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	3304      	adds	r3, #4
 800e360:	404a      	eors	r2, r1
 800e362:	b2d2      	uxtb	r2, r2
 800e364:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	3305      	adds	r3, #5
 800e36a:	7819      	ldrb	r1, [r3, #0]
 800e36c:	683b      	ldr	r3, [r7, #0]
 800e36e:	3305      	adds	r3, #5
 800e370:	781a      	ldrb	r2, [r3, #0]
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	3305      	adds	r3, #5
 800e376:	404a      	eors	r2, r1
 800e378:	b2d2      	uxtb	r2, r2
 800e37a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3306      	adds	r3, #6
 800e380:	7819      	ldrb	r1, [r3, #0]
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	3306      	adds	r3, #6
 800e386:	781a      	ldrb	r2, [r3, #0]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3306      	adds	r3, #6
 800e38c:	404a      	eors	r2, r1
 800e38e:	b2d2      	uxtb	r2, r2
 800e390:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	3307      	adds	r3, #7
 800e396:	7819      	ldrb	r1, [r3, #0]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	3307      	adds	r3, #7
 800e39c:	781a      	ldrb	r2, [r3, #0]
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	3307      	adds	r3, #7
 800e3a2:	404a      	eors	r2, r1
 800e3a4:	b2d2      	uxtb	r2, r2
 800e3a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	3308      	adds	r3, #8
 800e3ac:	7819      	ldrb	r1, [r3, #0]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	3308      	adds	r3, #8
 800e3b2:	781a      	ldrb	r2, [r3, #0]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	3308      	adds	r3, #8
 800e3b8:	404a      	eors	r2, r1
 800e3ba:	b2d2      	uxtb	r2, r2
 800e3bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	3309      	adds	r3, #9
 800e3c2:	7819      	ldrb	r1, [r3, #0]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	3309      	adds	r3, #9
 800e3c8:	781a      	ldrb	r2, [r3, #0]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	3309      	adds	r3, #9
 800e3ce:	404a      	eors	r2, r1
 800e3d0:	b2d2      	uxtb	r2, r2
 800e3d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	330a      	adds	r3, #10
 800e3d8:	7819      	ldrb	r1, [r3, #0]
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	330a      	adds	r3, #10
 800e3de:	781a      	ldrb	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	330a      	adds	r3, #10
 800e3e4:	404a      	eors	r2, r1
 800e3e6:	b2d2      	uxtb	r2, r2
 800e3e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	330b      	adds	r3, #11
 800e3ee:	7819      	ldrb	r1, [r3, #0]
 800e3f0:	683b      	ldr	r3, [r7, #0]
 800e3f2:	330b      	adds	r3, #11
 800e3f4:	781a      	ldrb	r2, [r3, #0]
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	330b      	adds	r3, #11
 800e3fa:	404a      	eors	r2, r1
 800e3fc:	b2d2      	uxtb	r2, r2
 800e3fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	330c      	adds	r3, #12
 800e404:	7819      	ldrb	r1, [r3, #0]
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	330c      	adds	r3, #12
 800e40a:	781a      	ldrb	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	330c      	adds	r3, #12
 800e410:	404a      	eors	r2, r1
 800e412:	b2d2      	uxtb	r2, r2
 800e414:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	330d      	adds	r3, #13
 800e41a:	7819      	ldrb	r1, [r3, #0]
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	330d      	adds	r3, #13
 800e420:	781a      	ldrb	r2, [r3, #0]
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	330d      	adds	r3, #13
 800e426:	404a      	eors	r2, r1
 800e428:	b2d2      	uxtb	r2, r2
 800e42a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	330e      	adds	r3, #14
 800e430:	7819      	ldrb	r1, [r3, #0]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	330e      	adds	r3, #14
 800e436:	781a      	ldrb	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	330e      	adds	r3, #14
 800e43c:	404a      	eors	r2, r1
 800e43e:	b2d2      	uxtb	r2, r2
 800e440:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	330f      	adds	r3, #15
 800e446:	7819      	ldrb	r1, [r3, #0]
 800e448:	683b      	ldr	r3, [r7, #0]
 800e44a:	330f      	adds	r3, #15
 800e44c:	781a      	ldrb	r2, [r3, #0]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	330f      	adds	r3, #15
 800e452:	404a      	eors	r2, r1
 800e454:	b2d2      	uxtb	r2, r2
 800e456:	701a      	strb	r2, [r3, #0]
#endif
}
 800e458:	bf00      	nop
 800e45a:	370c      	adds	r7, #12
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bc80      	pop	{r7}
 800e460:	4770      	bx	lr

0800e462 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e462:	b480      	push	{r7}
 800e464:	b085      	sub	sp, #20
 800e466:	af00      	add	r7, sp, #0
 800e468:	60f8      	str	r0, [r7, #12]
 800e46a:	60b9      	str	r1, [r7, #8]
 800e46c:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	4053      	eors	r3, r2
 800e478:	b2da      	uxtb	r2, r3
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	3301      	adds	r3, #1
 800e482:	7819      	ldrb	r1, [r3, #0]
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3301      	adds	r3, #1
 800e488:	781a      	ldrb	r2, [r3, #0]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3301      	adds	r3, #1
 800e48e:	404a      	eors	r2, r1
 800e490:	b2d2      	uxtb	r2, r2
 800e492:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	3302      	adds	r3, #2
 800e498:	7819      	ldrb	r1, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	3302      	adds	r3, #2
 800e49e:	781a      	ldrb	r2, [r3, #0]
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	3302      	adds	r3, #2
 800e4a4:	404a      	eors	r2, r1
 800e4a6:	b2d2      	uxtb	r2, r2
 800e4a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4aa:	68bb      	ldr	r3, [r7, #8]
 800e4ac:	3303      	adds	r3, #3
 800e4ae:	7819      	ldrb	r1, [r3, #0]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	3303      	adds	r3, #3
 800e4b4:	781a      	ldrb	r2, [r3, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	3303      	adds	r3, #3
 800e4ba:	404a      	eors	r2, r1
 800e4bc:	b2d2      	uxtb	r2, r2
 800e4be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e4c0:	68bb      	ldr	r3, [r7, #8]
 800e4c2:	3304      	adds	r3, #4
 800e4c4:	7819      	ldrb	r1, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	3304      	adds	r3, #4
 800e4ca:	781a      	ldrb	r2, [r3, #0]
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	404a      	eors	r2, r1
 800e4d2:	b2d2      	uxtb	r2, r2
 800e4d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	3305      	adds	r3, #5
 800e4da:	7819      	ldrb	r1, [r3, #0]
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	3305      	adds	r3, #5
 800e4e0:	781a      	ldrb	r2, [r3, #0]
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	3305      	adds	r3, #5
 800e4e6:	404a      	eors	r2, r1
 800e4e8:	b2d2      	uxtb	r2, r2
 800e4ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	3306      	adds	r3, #6
 800e4f0:	7819      	ldrb	r1, [r3, #0]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	3306      	adds	r3, #6
 800e4f6:	781a      	ldrb	r2, [r3, #0]
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3306      	adds	r3, #6
 800e4fc:	404a      	eors	r2, r1
 800e4fe:	b2d2      	uxtb	r2, r2
 800e500:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	3307      	adds	r3, #7
 800e506:	7819      	ldrb	r1, [r3, #0]
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	3307      	adds	r3, #7
 800e50c:	781a      	ldrb	r2, [r3, #0]
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3307      	adds	r3, #7
 800e512:	404a      	eors	r2, r1
 800e514:	b2d2      	uxtb	r2, r2
 800e516:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	3308      	adds	r3, #8
 800e51c:	7819      	ldrb	r1, [r3, #0]
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	3308      	adds	r3, #8
 800e522:	781a      	ldrb	r2, [r3, #0]
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	3308      	adds	r3, #8
 800e528:	404a      	eors	r2, r1
 800e52a:	b2d2      	uxtb	r2, r2
 800e52c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	3309      	adds	r3, #9
 800e532:	7819      	ldrb	r1, [r3, #0]
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	3309      	adds	r3, #9
 800e538:	781a      	ldrb	r2, [r3, #0]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	3309      	adds	r3, #9
 800e53e:	404a      	eors	r2, r1
 800e540:	b2d2      	uxtb	r2, r2
 800e542:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	330a      	adds	r3, #10
 800e548:	7819      	ldrb	r1, [r3, #0]
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	330a      	adds	r3, #10
 800e54e:	781a      	ldrb	r2, [r3, #0]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	330a      	adds	r3, #10
 800e554:	404a      	eors	r2, r1
 800e556:	b2d2      	uxtb	r2, r2
 800e558:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	330b      	adds	r3, #11
 800e55e:	7819      	ldrb	r1, [r3, #0]
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	330b      	adds	r3, #11
 800e564:	781a      	ldrb	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	330b      	adds	r3, #11
 800e56a:	404a      	eors	r2, r1
 800e56c:	b2d2      	uxtb	r2, r2
 800e56e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	330c      	adds	r3, #12
 800e574:	7819      	ldrb	r1, [r3, #0]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	330c      	adds	r3, #12
 800e57a:	781a      	ldrb	r2, [r3, #0]
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	330c      	adds	r3, #12
 800e580:	404a      	eors	r2, r1
 800e582:	b2d2      	uxtb	r2, r2
 800e584:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e586:	68bb      	ldr	r3, [r7, #8]
 800e588:	330d      	adds	r3, #13
 800e58a:	7819      	ldrb	r1, [r3, #0]
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	330d      	adds	r3, #13
 800e590:	781a      	ldrb	r2, [r3, #0]
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	330d      	adds	r3, #13
 800e596:	404a      	eors	r2, r1
 800e598:	b2d2      	uxtb	r2, r2
 800e59a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	330e      	adds	r3, #14
 800e5a0:	7819      	ldrb	r1, [r3, #0]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	330e      	adds	r3, #14
 800e5a6:	781a      	ldrb	r2, [r3, #0]
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	330e      	adds	r3, #14
 800e5ac:	404a      	eors	r2, r1
 800e5ae:	b2d2      	uxtb	r2, r2
 800e5b0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	330f      	adds	r3, #15
 800e5b6:	7819      	ldrb	r1, [r3, #0]
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	330f      	adds	r3, #15
 800e5bc:	781a      	ldrb	r2, [r3, #0]
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	330f      	adds	r3, #15
 800e5c2:	404a      	eors	r2, r1
 800e5c4:	b2d2      	uxtb	r2, r2
 800e5c6:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e5c8:	bf00      	nop
 800e5ca:	3714      	adds	r7, #20
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	bc80      	pop	{r7}
 800e5d0:	4770      	bx	lr

0800e5d2 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b082      	sub	sp, #8
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff fe88 	bl	800e2f4 <xor_block>
}
 800e5e4:	bf00      	nop
 800e5e6:	3708      	adds	r7, #8
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}

0800e5ec <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e5ec:	b480      	push	{r7}
 800e5ee:	b085      	sub	sp, #20
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	461a      	mov	r2, r3
 800e5fa:	4b48      	ldr	r3, [pc, #288]	; (800e71c <shift_sub_rows+0x130>)
 800e5fc:	5c9a      	ldrb	r2, [r3, r2]
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	701a      	strb	r2, [r3, #0]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3304      	adds	r3, #4
 800e606:	781b      	ldrb	r3, [r3, #0]
 800e608:	4619      	mov	r1, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	3304      	adds	r3, #4
 800e60e:	4a43      	ldr	r2, [pc, #268]	; (800e71c <shift_sub_rows+0x130>)
 800e610:	5c52      	ldrb	r2, [r2, r1]
 800e612:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	3308      	adds	r3, #8
 800e618:	781b      	ldrb	r3, [r3, #0]
 800e61a:	4619      	mov	r1, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	3308      	adds	r3, #8
 800e620:	4a3e      	ldr	r2, [pc, #248]	; (800e71c <shift_sub_rows+0x130>)
 800e622:	5c52      	ldrb	r2, [r2, r1]
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	330c      	adds	r3, #12
 800e62a:	781b      	ldrb	r3, [r3, #0]
 800e62c:	4619      	mov	r1, r3
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	330c      	adds	r3, #12
 800e632:	4a3a      	ldr	r2, [pc, #232]	; (800e71c <shift_sub_rows+0x130>)
 800e634:	5c52      	ldrb	r2, [r2, r1]
 800e636:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	73fb      	strb	r3, [r7, #15]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	3305      	adds	r3, #5
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4619      	mov	r1, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	3301      	adds	r3, #1
 800e64a:	4a34      	ldr	r2, [pc, #208]	; (800e71c <shift_sub_rows+0x130>)
 800e64c:	5c52      	ldrb	r2, [r2, r1]
 800e64e:	701a      	strb	r2, [r3, #0]
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	3309      	adds	r3, #9
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	4619      	mov	r1, r3
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	3305      	adds	r3, #5
 800e65c:	4a2f      	ldr	r2, [pc, #188]	; (800e71c <shift_sub_rows+0x130>)
 800e65e:	5c52      	ldrb	r2, [r2, r1]
 800e660:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	330d      	adds	r3, #13
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	4619      	mov	r1, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	3309      	adds	r3, #9
 800e66e:	4a2b      	ldr	r2, [pc, #172]	; (800e71c <shift_sub_rows+0x130>)
 800e670:	5c52      	ldrb	r2, [r2, r1]
 800e672:	701a      	strb	r2, [r3, #0]
 800e674:	7bfa      	ldrb	r2, [r7, #15]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	330d      	adds	r3, #13
 800e67a:	4928      	ldr	r1, [pc, #160]	; (800e71c <shift_sub_rows+0x130>)
 800e67c:	5c8a      	ldrb	r2, [r1, r2]
 800e67e:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	789b      	ldrb	r3, [r3, #2]
 800e684:	73fb      	strb	r3, [r7, #15]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	330a      	adds	r3, #10
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	4619      	mov	r1, r3
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	3302      	adds	r3, #2
 800e692:	4a22      	ldr	r2, [pc, #136]	; (800e71c <shift_sub_rows+0x130>)
 800e694:	5c52      	ldrb	r2, [r2, r1]
 800e696:	701a      	strb	r2, [r3, #0]
 800e698:	7bfa      	ldrb	r2, [r7, #15]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	330a      	adds	r3, #10
 800e69e:	491f      	ldr	r1, [pc, #124]	; (800e71c <shift_sub_rows+0x130>)
 800e6a0:	5c8a      	ldrb	r2, [r1, r2]
 800e6a2:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	799b      	ldrb	r3, [r3, #6]
 800e6a8:	73fb      	strb	r3, [r7, #15]
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	330e      	adds	r3, #14
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	4619      	mov	r1, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	3306      	adds	r3, #6
 800e6b6:	4a19      	ldr	r2, [pc, #100]	; (800e71c <shift_sub_rows+0x130>)
 800e6b8:	5c52      	ldrb	r2, [r2, r1]
 800e6ba:	701a      	strb	r2, [r3, #0]
 800e6bc:	7bfa      	ldrb	r2, [r7, #15]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	330e      	adds	r3, #14
 800e6c2:	4916      	ldr	r1, [pc, #88]	; (800e71c <shift_sub_rows+0x130>)
 800e6c4:	5c8a      	ldrb	r2, [r1, r2]
 800e6c6:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	7bdb      	ldrb	r3, [r3, #15]
 800e6cc:	73fb      	strb	r3, [r7, #15]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	330b      	adds	r3, #11
 800e6d2:	781b      	ldrb	r3, [r3, #0]
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	330f      	adds	r3, #15
 800e6da:	4a10      	ldr	r2, [pc, #64]	; (800e71c <shift_sub_rows+0x130>)
 800e6dc:	5c52      	ldrb	r2, [r2, r1]
 800e6de:	701a      	strb	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	3307      	adds	r3, #7
 800e6e4:	781b      	ldrb	r3, [r3, #0]
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	330b      	adds	r3, #11
 800e6ec:	4a0b      	ldr	r2, [pc, #44]	; (800e71c <shift_sub_rows+0x130>)
 800e6ee:	5c52      	ldrb	r2, [r2, r1]
 800e6f0:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	3303      	adds	r3, #3
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	3307      	adds	r3, #7
 800e6fe:	4a07      	ldr	r2, [pc, #28]	; (800e71c <shift_sub_rows+0x130>)
 800e700:	5c52      	ldrb	r2, [r2, r1]
 800e702:	701a      	strb	r2, [r3, #0]
 800e704:	7bfa      	ldrb	r2, [r7, #15]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	3303      	adds	r3, #3
 800e70a:	4904      	ldr	r1, [pc, #16]	; (800e71c <shift_sub_rows+0x130>)
 800e70c:	5c8a      	ldrb	r2, [r1, r2]
 800e70e:	701a      	strb	r2, [r3, #0]
}
 800e710:	bf00      	nop
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	bc80      	pop	{r7}
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	0801f60c 	.word	0x0801f60c

0800e720 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e728:	f107 0308 	add.w	r3, r7, #8
 800e72c:	6879      	ldr	r1, [r7, #4]
 800e72e:	4618      	mov	r0, r3
 800e730:	f7ff fd6c 	bl	800e20c <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e734:	7a3b      	ldrb	r3, [r7, #8]
 800e736:	461a      	mov	r2, r3
 800e738:	4b9a      	ldr	r3, [pc, #616]	; (800e9a4 <mix_sub_columns+0x284>)
 800e73a:	5c9a      	ldrb	r2, [r3, r2]
 800e73c:	7b7b      	ldrb	r3, [r7, #13]
 800e73e:	4619      	mov	r1, r3
 800e740:	4b99      	ldr	r3, [pc, #612]	; (800e9a8 <mix_sub_columns+0x288>)
 800e742:	5c5b      	ldrb	r3, [r3, r1]
 800e744:	4053      	eors	r3, r2
 800e746:	b2da      	uxtb	r2, r3
 800e748:	7cbb      	ldrb	r3, [r7, #18]
 800e74a:	4619      	mov	r1, r3
 800e74c:	4b97      	ldr	r3, [pc, #604]	; (800e9ac <mix_sub_columns+0x28c>)
 800e74e:	5c5b      	ldrb	r3, [r3, r1]
 800e750:	4053      	eors	r3, r2
 800e752:	b2da      	uxtb	r2, r3
 800e754:	7dfb      	ldrb	r3, [r7, #23]
 800e756:	4619      	mov	r1, r3
 800e758:	4b94      	ldr	r3, [pc, #592]	; (800e9ac <mix_sub_columns+0x28c>)
 800e75a:	5c5b      	ldrb	r3, [r3, r1]
 800e75c:	4053      	eors	r3, r2
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e764:	7a3b      	ldrb	r3, [r7, #8]
 800e766:	461a      	mov	r2, r3
 800e768:	4b90      	ldr	r3, [pc, #576]	; (800e9ac <mix_sub_columns+0x28c>)
 800e76a:	5c9a      	ldrb	r2, [r3, r2]
 800e76c:	7b7b      	ldrb	r3, [r7, #13]
 800e76e:	4619      	mov	r1, r3
 800e770:	4b8c      	ldr	r3, [pc, #560]	; (800e9a4 <mix_sub_columns+0x284>)
 800e772:	5c5b      	ldrb	r3, [r3, r1]
 800e774:	4053      	eors	r3, r2
 800e776:	b2da      	uxtb	r2, r3
 800e778:	7cbb      	ldrb	r3, [r7, #18]
 800e77a:	4619      	mov	r1, r3
 800e77c:	4b8a      	ldr	r3, [pc, #552]	; (800e9a8 <mix_sub_columns+0x288>)
 800e77e:	5c5b      	ldrb	r3, [r3, r1]
 800e780:	4053      	eors	r3, r2
 800e782:	b2d9      	uxtb	r1, r3
 800e784:	7dfb      	ldrb	r3, [r7, #23]
 800e786:	461a      	mov	r2, r3
 800e788:	4b88      	ldr	r3, [pc, #544]	; (800e9ac <mix_sub_columns+0x28c>)
 800e78a:	5c9a      	ldrb	r2, [r3, r2]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	3301      	adds	r3, #1
 800e790:	404a      	eors	r2, r1
 800e792:	b2d2      	uxtb	r2, r2
 800e794:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e796:	7a3b      	ldrb	r3, [r7, #8]
 800e798:	461a      	mov	r2, r3
 800e79a:	4b84      	ldr	r3, [pc, #528]	; (800e9ac <mix_sub_columns+0x28c>)
 800e79c:	5c9a      	ldrb	r2, [r3, r2]
 800e79e:	7b7b      	ldrb	r3, [r7, #13]
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4b82      	ldr	r3, [pc, #520]	; (800e9ac <mix_sub_columns+0x28c>)
 800e7a4:	5c5b      	ldrb	r3, [r3, r1]
 800e7a6:	4053      	eors	r3, r2
 800e7a8:	b2da      	uxtb	r2, r3
 800e7aa:	7cbb      	ldrb	r3, [r7, #18]
 800e7ac:	4619      	mov	r1, r3
 800e7ae:	4b7d      	ldr	r3, [pc, #500]	; (800e9a4 <mix_sub_columns+0x284>)
 800e7b0:	5c5b      	ldrb	r3, [r3, r1]
 800e7b2:	4053      	eors	r3, r2
 800e7b4:	b2d9      	uxtb	r1, r3
 800e7b6:	7dfb      	ldrb	r3, [r7, #23]
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	4b7b      	ldr	r3, [pc, #492]	; (800e9a8 <mix_sub_columns+0x288>)
 800e7bc:	5c9a      	ldrb	r2, [r3, r2]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	3302      	adds	r3, #2
 800e7c2:	404a      	eors	r2, r1
 800e7c4:	b2d2      	uxtb	r2, r2
 800e7c6:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e7c8:	7a3b      	ldrb	r3, [r7, #8]
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	4b76      	ldr	r3, [pc, #472]	; (800e9a8 <mix_sub_columns+0x288>)
 800e7ce:	5c9a      	ldrb	r2, [r3, r2]
 800e7d0:	7b7b      	ldrb	r3, [r7, #13]
 800e7d2:	4619      	mov	r1, r3
 800e7d4:	4b75      	ldr	r3, [pc, #468]	; (800e9ac <mix_sub_columns+0x28c>)
 800e7d6:	5c5b      	ldrb	r3, [r3, r1]
 800e7d8:	4053      	eors	r3, r2
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	7cbb      	ldrb	r3, [r7, #18]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	4b72      	ldr	r3, [pc, #456]	; (800e9ac <mix_sub_columns+0x28c>)
 800e7e2:	5c5b      	ldrb	r3, [r3, r1]
 800e7e4:	4053      	eors	r3, r2
 800e7e6:	b2d9      	uxtb	r1, r3
 800e7e8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	4b6d      	ldr	r3, [pc, #436]	; (800e9a4 <mix_sub_columns+0x284>)
 800e7ee:	5c9a      	ldrb	r2, [r3, r2]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3303      	adds	r3, #3
 800e7f4:	404a      	eors	r2, r1
 800e7f6:	b2d2      	uxtb	r2, r2
 800e7f8:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e7fa:	7b3b      	ldrb	r3, [r7, #12]
 800e7fc:	461a      	mov	r2, r3
 800e7fe:	4b69      	ldr	r3, [pc, #420]	; (800e9a4 <mix_sub_columns+0x284>)
 800e800:	5c9a      	ldrb	r2, [r3, r2]
 800e802:	7c7b      	ldrb	r3, [r7, #17]
 800e804:	4619      	mov	r1, r3
 800e806:	4b68      	ldr	r3, [pc, #416]	; (800e9a8 <mix_sub_columns+0x288>)
 800e808:	5c5b      	ldrb	r3, [r3, r1]
 800e80a:	4053      	eors	r3, r2
 800e80c:	b2da      	uxtb	r2, r3
 800e80e:	7dbb      	ldrb	r3, [r7, #22]
 800e810:	4619      	mov	r1, r3
 800e812:	4b66      	ldr	r3, [pc, #408]	; (800e9ac <mix_sub_columns+0x28c>)
 800e814:	5c5b      	ldrb	r3, [r3, r1]
 800e816:	4053      	eors	r3, r2
 800e818:	b2d9      	uxtb	r1, r3
 800e81a:	7afb      	ldrb	r3, [r7, #11]
 800e81c:	461a      	mov	r2, r3
 800e81e:	4b63      	ldr	r3, [pc, #396]	; (800e9ac <mix_sub_columns+0x28c>)
 800e820:	5c9a      	ldrb	r2, [r3, r2]
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	3304      	adds	r3, #4
 800e826:	404a      	eors	r2, r1
 800e828:	b2d2      	uxtb	r2, r2
 800e82a:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e82c:	7b3b      	ldrb	r3, [r7, #12]
 800e82e:	461a      	mov	r2, r3
 800e830:	4b5e      	ldr	r3, [pc, #376]	; (800e9ac <mix_sub_columns+0x28c>)
 800e832:	5c9a      	ldrb	r2, [r3, r2]
 800e834:	7c7b      	ldrb	r3, [r7, #17]
 800e836:	4619      	mov	r1, r3
 800e838:	4b5a      	ldr	r3, [pc, #360]	; (800e9a4 <mix_sub_columns+0x284>)
 800e83a:	5c5b      	ldrb	r3, [r3, r1]
 800e83c:	4053      	eors	r3, r2
 800e83e:	b2da      	uxtb	r2, r3
 800e840:	7dbb      	ldrb	r3, [r7, #22]
 800e842:	4619      	mov	r1, r3
 800e844:	4b58      	ldr	r3, [pc, #352]	; (800e9a8 <mix_sub_columns+0x288>)
 800e846:	5c5b      	ldrb	r3, [r3, r1]
 800e848:	4053      	eors	r3, r2
 800e84a:	b2d9      	uxtb	r1, r3
 800e84c:	7afb      	ldrb	r3, [r7, #11]
 800e84e:	461a      	mov	r2, r3
 800e850:	4b56      	ldr	r3, [pc, #344]	; (800e9ac <mix_sub_columns+0x28c>)
 800e852:	5c9a      	ldrb	r2, [r3, r2]
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	3305      	adds	r3, #5
 800e858:	404a      	eors	r2, r1
 800e85a:	b2d2      	uxtb	r2, r2
 800e85c:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e85e:	7b3b      	ldrb	r3, [r7, #12]
 800e860:	461a      	mov	r2, r3
 800e862:	4b52      	ldr	r3, [pc, #328]	; (800e9ac <mix_sub_columns+0x28c>)
 800e864:	5c9a      	ldrb	r2, [r3, r2]
 800e866:	7c7b      	ldrb	r3, [r7, #17]
 800e868:	4619      	mov	r1, r3
 800e86a:	4b50      	ldr	r3, [pc, #320]	; (800e9ac <mix_sub_columns+0x28c>)
 800e86c:	5c5b      	ldrb	r3, [r3, r1]
 800e86e:	4053      	eors	r3, r2
 800e870:	b2da      	uxtb	r2, r3
 800e872:	7dbb      	ldrb	r3, [r7, #22]
 800e874:	4619      	mov	r1, r3
 800e876:	4b4b      	ldr	r3, [pc, #300]	; (800e9a4 <mix_sub_columns+0x284>)
 800e878:	5c5b      	ldrb	r3, [r3, r1]
 800e87a:	4053      	eors	r3, r2
 800e87c:	b2d9      	uxtb	r1, r3
 800e87e:	7afb      	ldrb	r3, [r7, #11]
 800e880:	461a      	mov	r2, r3
 800e882:	4b49      	ldr	r3, [pc, #292]	; (800e9a8 <mix_sub_columns+0x288>)
 800e884:	5c9a      	ldrb	r2, [r3, r2]
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	3306      	adds	r3, #6
 800e88a:	404a      	eors	r2, r1
 800e88c:	b2d2      	uxtb	r2, r2
 800e88e:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e890:	7b3b      	ldrb	r3, [r7, #12]
 800e892:	461a      	mov	r2, r3
 800e894:	4b44      	ldr	r3, [pc, #272]	; (800e9a8 <mix_sub_columns+0x288>)
 800e896:	5c9a      	ldrb	r2, [r3, r2]
 800e898:	7c7b      	ldrb	r3, [r7, #17]
 800e89a:	4619      	mov	r1, r3
 800e89c:	4b43      	ldr	r3, [pc, #268]	; (800e9ac <mix_sub_columns+0x28c>)
 800e89e:	5c5b      	ldrb	r3, [r3, r1]
 800e8a0:	4053      	eors	r3, r2
 800e8a2:	b2da      	uxtb	r2, r3
 800e8a4:	7dbb      	ldrb	r3, [r7, #22]
 800e8a6:	4619      	mov	r1, r3
 800e8a8:	4b40      	ldr	r3, [pc, #256]	; (800e9ac <mix_sub_columns+0x28c>)
 800e8aa:	5c5b      	ldrb	r3, [r3, r1]
 800e8ac:	4053      	eors	r3, r2
 800e8ae:	b2d9      	uxtb	r1, r3
 800e8b0:	7afb      	ldrb	r3, [r7, #11]
 800e8b2:	461a      	mov	r2, r3
 800e8b4:	4b3b      	ldr	r3, [pc, #236]	; (800e9a4 <mix_sub_columns+0x284>)
 800e8b6:	5c9a      	ldrb	r2, [r3, r2]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	3307      	adds	r3, #7
 800e8bc:	404a      	eors	r2, r1
 800e8be:	b2d2      	uxtb	r2, r2
 800e8c0:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e8c2:	7c3b      	ldrb	r3, [r7, #16]
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	4b37      	ldr	r3, [pc, #220]	; (800e9a4 <mix_sub_columns+0x284>)
 800e8c8:	5c9a      	ldrb	r2, [r3, r2]
 800e8ca:	7d7b      	ldrb	r3, [r7, #21]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4b36      	ldr	r3, [pc, #216]	; (800e9a8 <mix_sub_columns+0x288>)
 800e8d0:	5c5b      	ldrb	r3, [r3, r1]
 800e8d2:	4053      	eors	r3, r2
 800e8d4:	b2da      	uxtb	r2, r3
 800e8d6:	7abb      	ldrb	r3, [r7, #10]
 800e8d8:	4619      	mov	r1, r3
 800e8da:	4b34      	ldr	r3, [pc, #208]	; (800e9ac <mix_sub_columns+0x28c>)
 800e8dc:	5c5b      	ldrb	r3, [r3, r1]
 800e8de:	4053      	eors	r3, r2
 800e8e0:	b2d9      	uxtb	r1, r3
 800e8e2:	7bfb      	ldrb	r3, [r7, #15]
 800e8e4:	461a      	mov	r2, r3
 800e8e6:	4b31      	ldr	r3, [pc, #196]	; (800e9ac <mix_sub_columns+0x28c>)
 800e8e8:	5c9a      	ldrb	r2, [r3, r2]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3308      	adds	r3, #8
 800e8ee:	404a      	eors	r2, r1
 800e8f0:	b2d2      	uxtb	r2, r2
 800e8f2:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e8f4:	7c3b      	ldrb	r3, [r7, #16]
 800e8f6:	461a      	mov	r2, r3
 800e8f8:	4b2c      	ldr	r3, [pc, #176]	; (800e9ac <mix_sub_columns+0x28c>)
 800e8fa:	5c9a      	ldrb	r2, [r3, r2]
 800e8fc:	7d7b      	ldrb	r3, [r7, #21]
 800e8fe:	4619      	mov	r1, r3
 800e900:	4b28      	ldr	r3, [pc, #160]	; (800e9a4 <mix_sub_columns+0x284>)
 800e902:	5c5b      	ldrb	r3, [r3, r1]
 800e904:	4053      	eors	r3, r2
 800e906:	b2da      	uxtb	r2, r3
 800e908:	7abb      	ldrb	r3, [r7, #10]
 800e90a:	4619      	mov	r1, r3
 800e90c:	4b26      	ldr	r3, [pc, #152]	; (800e9a8 <mix_sub_columns+0x288>)
 800e90e:	5c5b      	ldrb	r3, [r3, r1]
 800e910:	4053      	eors	r3, r2
 800e912:	b2d9      	uxtb	r1, r3
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	461a      	mov	r2, r3
 800e918:	4b24      	ldr	r3, [pc, #144]	; (800e9ac <mix_sub_columns+0x28c>)
 800e91a:	5c9a      	ldrb	r2, [r3, r2]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	3309      	adds	r3, #9
 800e920:	404a      	eors	r2, r1
 800e922:	b2d2      	uxtb	r2, r2
 800e924:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e926:	7c3b      	ldrb	r3, [r7, #16]
 800e928:	461a      	mov	r2, r3
 800e92a:	4b20      	ldr	r3, [pc, #128]	; (800e9ac <mix_sub_columns+0x28c>)
 800e92c:	5c9a      	ldrb	r2, [r3, r2]
 800e92e:	7d7b      	ldrb	r3, [r7, #21]
 800e930:	4619      	mov	r1, r3
 800e932:	4b1e      	ldr	r3, [pc, #120]	; (800e9ac <mix_sub_columns+0x28c>)
 800e934:	5c5b      	ldrb	r3, [r3, r1]
 800e936:	4053      	eors	r3, r2
 800e938:	b2da      	uxtb	r2, r3
 800e93a:	7abb      	ldrb	r3, [r7, #10]
 800e93c:	4619      	mov	r1, r3
 800e93e:	4b19      	ldr	r3, [pc, #100]	; (800e9a4 <mix_sub_columns+0x284>)
 800e940:	5c5b      	ldrb	r3, [r3, r1]
 800e942:	4053      	eors	r3, r2
 800e944:	b2d9      	uxtb	r1, r3
 800e946:	7bfb      	ldrb	r3, [r7, #15]
 800e948:	461a      	mov	r2, r3
 800e94a:	4b17      	ldr	r3, [pc, #92]	; (800e9a8 <mix_sub_columns+0x288>)
 800e94c:	5c9a      	ldrb	r2, [r3, r2]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	330a      	adds	r3, #10
 800e952:	404a      	eors	r2, r1
 800e954:	b2d2      	uxtb	r2, r2
 800e956:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e958:	7c3b      	ldrb	r3, [r7, #16]
 800e95a:	461a      	mov	r2, r3
 800e95c:	4b12      	ldr	r3, [pc, #72]	; (800e9a8 <mix_sub_columns+0x288>)
 800e95e:	5c9a      	ldrb	r2, [r3, r2]
 800e960:	7d7b      	ldrb	r3, [r7, #21]
 800e962:	4619      	mov	r1, r3
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <mix_sub_columns+0x28c>)
 800e966:	5c5b      	ldrb	r3, [r3, r1]
 800e968:	4053      	eors	r3, r2
 800e96a:	b2da      	uxtb	r2, r3
 800e96c:	7abb      	ldrb	r3, [r7, #10]
 800e96e:	4619      	mov	r1, r3
 800e970:	4b0e      	ldr	r3, [pc, #56]	; (800e9ac <mix_sub_columns+0x28c>)
 800e972:	5c5b      	ldrb	r3, [r3, r1]
 800e974:	4053      	eors	r3, r2
 800e976:	b2d9      	uxtb	r1, r3
 800e978:	7bfb      	ldrb	r3, [r7, #15]
 800e97a:	461a      	mov	r2, r3
 800e97c:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <mix_sub_columns+0x284>)
 800e97e:	5c9a      	ldrb	r2, [r3, r2]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	330b      	adds	r3, #11
 800e984:	404a      	eors	r2, r1
 800e986:	b2d2      	uxtb	r2, r2
 800e988:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e98a:	7d3b      	ldrb	r3, [r7, #20]
 800e98c:	461a      	mov	r2, r3
 800e98e:	4b05      	ldr	r3, [pc, #20]	; (800e9a4 <mix_sub_columns+0x284>)
 800e990:	5c9a      	ldrb	r2, [r3, r2]
 800e992:	7a7b      	ldrb	r3, [r7, #9]
 800e994:	4619      	mov	r1, r3
 800e996:	4b04      	ldr	r3, [pc, #16]	; (800e9a8 <mix_sub_columns+0x288>)
 800e998:	5c5b      	ldrb	r3, [r3, r1]
 800e99a:	4053      	eors	r3, r2
 800e99c:	b2da      	uxtb	r2, r3
 800e99e:	7bbb      	ldrb	r3, [r7, #14]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	e005      	b.n	800e9b0 <mix_sub_columns+0x290>
 800e9a4:	0801f70c 	.word	0x0801f70c
 800e9a8:	0801f80c 	.word	0x0801f80c
 800e9ac:	0801f60c 	.word	0x0801f60c
 800e9b0:	4b2d      	ldr	r3, [pc, #180]	; (800ea68 <mix_sub_columns+0x348>)
 800e9b2:	5c5b      	ldrb	r3, [r3, r1]
 800e9b4:	4053      	eors	r3, r2
 800e9b6:	b2d9      	uxtb	r1, r3
 800e9b8:	7cfb      	ldrb	r3, [r7, #19]
 800e9ba:	461a      	mov	r2, r3
 800e9bc:	4b2a      	ldr	r3, [pc, #168]	; (800ea68 <mix_sub_columns+0x348>)
 800e9be:	5c9a      	ldrb	r2, [r3, r2]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	330c      	adds	r3, #12
 800e9c4:	404a      	eors	r2, r1
 800e9c6:	b2d2      	uxtb	r2, r2
 800e9c8:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e9ca:	7d3b      	ldrb	r3, [r7, #20]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	4b26      	ldr	r3, [pc, #152]	; (800ea68 <mix_sub_columns+0x348>)
 800e9d0:	5c9a      	ldrb	r2, [r3, r2]
 800e9d2:	7a7b      	ldrb	r3, [r7, #9]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	4b25      	ldr	r3, [pc, #148]	; (800ea6c <mix_sub_columns+0x34c>)
 800e9d8:	5c5b      	ldrb	r3, [r3, r1]
 800e9da:	4053      	eors	r3, r2
 800e9dc:	b2da      	uxtb	r2, r3
 800e9de:	7bbb      	ldrb	r3, [r7, #14]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	4b23      	ldr	r3, [pc, #140]	; (800ea70 <mix_sub_columns+0x350>)
 800e9e4:	5c5b      	ldrb	r3, [r3, r1]
 800e9e6:	4053      	eors	r3, r2
 800e9e8:	b2d9      	uxtb	r1, r3
 800e9ea:	7cfb      	ldrb	r3, [r7, #19]
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4b1e      	ldr	r3, [pc, #120]	; (800ea68 <mix_sub_columns+0x348>)
 800e9f0:	5c9a      	ldrb	r2, [r3, r2]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	330d      	adds	r3, #13
 800e9f6:	404a      	eors	r2, r1
 800e9f8:	b2d2      	uxtb	r2, r2
 800e9fa:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800e9fc:	7d3b      	ldrb	r3, [r7, #20]
 800e9fe:	461a      	mov	r2, r3
 800ea00:	4b19      	ldr	r3, [pc, #100]	; (800ea68 <mix_sub_columns+0x348>)
 800ea02:	5c9a      	ldrb	r2, [r3, r2]
 800ea04:	7a7b      	ldrb	r3, [r7, #9]
 800ea06:	4619      	mov	r1, r3
 800ea08:	4b17      	ldr	r3, [pc, #92]	; (800ea68 <mix_sub_columns+0x348>)
 800ea0a:	5c5b      	ldrb	r3, [r3, r1]
 800ea0c:	4053      	eors	r3, r2
 800ea0e:	b2da      	uxtb	r2, r3
 800ea10:	7bbb      	ldrb	r3, [r7, #14]
 800ea12:	4619      	mov	r1, r3
 800ea14:	4b15      	ldr	r3, [pc, #84]	; (800ea6c <mix_sub_columns+0x34c>)
 800ea16:	5c5b      	ldrb	r3, [r3, r1]
 800ea18:	4053      	eors	r3, r2
 800ea1a:	b2d9      	uxtb	r1, r3
 800ea1c:	7cfb      	ldrb	r3, [r7, #19]
 800ea1e:	461a      	mov	r2, r3
 800ea20:	4b13      	ldr	r3, [pc, #76]	; (800ea70 <mix_sub_columns+0x350>)
 800ea22:	5c9a      	ldrb	r2, [r3, r2]
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	330e      	adds	r3, #14
 800ea28:	404a      	eors	r2, r1
 800ea2a:	b2d2      	uxtb	r2, r2
 800ea2c:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ea2e:	7d3b      	ldrb	r3, [r7, #20]
 800ea30:	461a      	mov	r2, r3
 800ea32:	4b0f      	ldr	r3, [pc, #60]	; (800ea70 <mix_sub_columns+0x350>)
 800ea34:	5c9a      	ldrb	r2, [r3, r2]
 800ea36:	7a7b      	ldrb	r3, [r7, #9]
 800ea38:	4619      	mov	r1, r3
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	; (800ea68 <mix_sub_columns+0x348>)
 800ea3c:	5c5b      	ldrb	r3, [r3, r1]
 800ea3e:	4053      	eors	r3, r2
 800ea40:	b2da      	uxtb	r2, r3
 800ea42:	7bbb      	ldrb	r3, [r7, #14]
 800ea44:	4619      	mov	r1, r3
 800ea46:	4b08      	ldr	r3, [pc, #32]	; (800ea68 <mix_sub_columns+0x348>)
 800ea48:	5c5b      	ldrb	r3, [r3, r1]
 800ea4a:	4053      	eors	r3, r2
 800ea4c:	b2d9      	uxtb	r1, r3
 800ea4e:	7cfb      	ldrb	r3, [r7, #19]
 800ea50:	461a      	mov	r2, r3
 800ea52:	4b06      	ldr	r3, [pc, #24]	; (800ea6c <mix_sub_columns+0x34c>)
 800ea54:	5c9a      	ldrb	r2, [r3, r2]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	330f      	adds	r3, #15
 800ea5a:	404a      	eors	r2, r1
 800ea5c:	b2d2      	uxtb	r2, r2
 800ea5e:	701a      	strb	r2, [r3, #0]
  }
 800ea60:	bf00      	nop
 800ea62:	3718      	adds	r7, #24
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0801f60c 	.word	0x0801f60c
 800ea6c:	0801f70c 	.word	0x0801f70c
 800ea70:	0801f80c 	.word	0x0801f80c

0800ea74 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b086      	sub	sp, #24
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	60f8      	str	r0, [r7, #12]
 800ea7c:	460b      	mov	r3, r1
 800ea7e:	607a      	str	r2, [r7, #4]
 800ea80:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ea82:	7afb      	ldrb	r3, [r7, #11]
 800ea84:	3b10      	subs	r3, #16
 800ea86:	2b10      	cmp	r3, #16
 800ea88:	bf8c      	ite	hi
 800ea8a:	2201      	movhi	r2, #1
 800ea8c:	2200      	movls	r2, #0
 800ea8e:	b2d2      	uxtb	r2, r2
 800ea90:	2a00      	cmp	r2, #0
 800ea92:	d10b      	bne.n	800eaac <lorawan_aes_set_key+0x38>
 800ea94:	4a64      	ldr	r2, [pc, #400]	; (800ec28 <lorawan_aes_set_key+0x1b4>)
 800ea96:	fa22 f303 	lsr.w	r3, r2, r3
 800ea9a:	f003 0301 	and.w	r3, r3, #1
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	bf14      	ite	ne
 800eaa2:	2301      	movne	r3, #1
 800eaa4:	2300      	moveq	r3, #0
 800eaa6:	b2db      	uxtb	r3, r3
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d105      	bne.n	800eab8 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2200      	movs	r2, #0
 800eab0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800eab4:	23ff      	movs	r3, #255	; 0xff
 800eab6:	e0b2      	b.n	800ec1e <lorawan_aes_set_key+0x1aa>
        break;
 800eab8:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7afa      	ldrb	r2, [r7, #11]
 800eabe:	68f9      	ldr	r1, [r7, #12]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff fbfc 	bl	800e2be <copy_block_nn>
    hi = (keylen + 28) << 2;
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	331c      	adds	r3, #28
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	009b      	lsls	r3, r3, #2
 800eace:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800ead0:	7c7b      	ldrb	r3, [r7, #17]
 800ead2:	091b      	lsrs	r3, r3, #4
 800ead4:	b2db      	uxtb	r3, r3
 800ead6:	3b01      	subs	r3, #1
 800ead8:	b2da      	uxtb	r2, r3
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eae0:	7afb      	ldrb	r3, [r7, #11]
 800eae2:	75fb      	strb	r3, [r7, #23]
 800eae4:	2301      	movs	r3, #1
 800eae6:	75bb      	strb	r3, [r7, #22]
 800eae8:	e093      	b.n	800ec12 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800eaea:	7dfb      	ldrb	r3, [r7, #23]
 800eaec:	3b04      	subs	r3, #4
 800eaee:	687a      	ldr	r2, [r7, #4]
 800eaf0:	5cd3      	ldrb	r3, [r2, r3]
 800eaf2:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	3b03      	subs	r3, #3
 800eaf8:	687a      	ldr	r2, [r7, #4]
 800eafa:	5cd3      	ldrb	r3, [r2, r3]
 800eafc:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800eafe:	7dfb      	ldrb	r3, [r7, #23]
 800eb00:	3b02      	subs	r3, #2
 800eb02:	687a      	ldr	r2, [r7, #4]
 800eb04:	5cd3      	ldrb	r3, [r2, r3]
 800eb06:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eb08:	7dfb      	ldrb	r3, [r7, #23]
 800eb0a:	3b01      	subs	r3, #1
 800eb0c:	687a      	ldr	r2, [r7, #4]
 800eb0e:	5cd3      	ldrb	r3, [r2, r3]
 800eb10:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eb12:	7dfb      	ldrb	r3, [r7, #23]
 800eb14:	7afa      	ldrb	r2, [r7, #11]
 800eb16:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb1a:	fb01 f202 	mul.w	r2, r1, r2
 800eb1e:	1a9b      	subs	r3, r3, r2
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d127      	bne.n	800eb76 <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eb26:	7d7b      	ldrb	r3, [r7, #21]
 800eb28:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eb2a:	7d3b      	ldrb	r3, [r7, #20]
 800eb2c:	4a3f      	ldr	r2, [pc, #252]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb2e:	5cd2      	ldrb	r2, [r2, r3]
 800eb30:	7dbb      	ldrb	r3, [r7, #22]
 800eb32:	4053      	eors	r3, r2
 800eb34:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eb36:	7cfb      	ldrb	r3, [r7, #19]
 800eb38:	4a3c      	ldr	r2, [pc, #240]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb3a:	5cd3      	ldrb	r3, [r2, r3]
 800eb3c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800eb3e:	7cbb      	ldrb	r3, [r7, #18]
 800eb40:	4a3a      	ldr	r2, [pc, #232]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb42:	5cd3      	ldrb	r3, [r2, r3]
 800eb44:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eb46:	7c3b      	ldrb	r3, [r7, #16]
 800eb48:	4a38      	ldr	r2, [pc, #224]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb4a:	5cd3      	ldrb	r3, [r2, r3]
 800eb4c:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eb4e:	7dbb      	ldrb	r3, [r7, #22]
 800eb50:	005b      	lsls	r3, r3, #1
 800eb52:	b25a      	sxtb	r2, r3
 800eb54:	7dbb      	ldrb	r3, [r7, #22]
 800eb56:	09db      	lsrs	r3, r3, #7
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	0049      	lsls	r1, r1, #1
 800eb5e:	440b      	add	r3, r1
 800eb60:	4619      	mov	r1, r3
 800eb62:	00c8      	lsls	r0, r1, #3
 800eb64:	4619      	mov	r1, r3
 800eb66:	4603      	mov	r3, r0
 800eb68:	440b      	add	r3, r1
 800eb6a:	b2db      	uxtb	r3, r3
 800eb6c:	b25b      	sxtb	r3, r3
 800eb6e:	4053      	eors	r3, r2
 800eb70:	b25b      	sxtb	r3, r3
 800eb72:	75bb      	strb	r3, [r7, #22]
 800eb74:	e01c      	b.n	800ebb0 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800eb76:	7afb      	ldrb	r3, [r7, #11]
 800eb78:	2b18      	cmp	r3, #24
 800eb7a:	d919      	bls.n	800ebb0 <lorawan_aes_set_key+0x13c>
 800eb7c:	7dfb      	ldrb	r3, [r7, #23]
 800eb7e:	7afa      	ldrb	r2, [r7, #11]
 800eb80:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb84:	fb01 f202 	mul.w	r2, r1, r2
 800eb88:	1a9b      	subs	r3, r3, r2
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	2b10      	cmp	r3, #16
 800eb8e:	d10f      	bne.n	800ebb0 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800eb90:	7d7b      	ldrb	r3, [r7, #21]
 800eb92:	4a26      	ldr	r2, [pc, #152]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb94:	5cd3      	ldrb	r3, [r2, r3]
 800eb96:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800eb98:	7d3b      	ldrb	r3, [r7, #20]
 800eb9a:	4a24      	ldr	r2, [pc, #144]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eb9c:	5cd3      	ldrb	r3, [r2, r3]
 800eb9e:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800eba0:	7cfb      	ldrb	r3, [r7, #19]
 800eba2:	4a22      	ldr	r2, [pc, #136]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800eba4:	5cd3      	ldrb	r3, [r2, r3]
 800eba6:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800eba8:	7cbb      	ldrb	r3, [r7, #18]
 800ebaa:	4a20      	ldr	r2, [pc, #128]	; (800ec2c <lorawan_aes_set_key+0x1b8>)
 800ebac:	5cd3      	ldrb	r3, [r2, r3]
 800ebae:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ebb0:	7dfa      	ldrb	r2, [r7, #23]
 800ebb2:	7afb      	ldrb	r3, [r7, #11]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ebb8:	7c3b      	ldrb	r3, [r7, #16]
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	5cd1      	ldrb	r1, [r2, r3]
 800ebbe:	7dfb      	ldrb	r3, [r7, #23]
 800ebc0:	7d7a      	ldrb	r2, [r7, #21]
 800ebc2:	404a      	eors	r2, r1
 800ebc4:	b2d1      	uxtb	r1, r2
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ebca:	7c3b      	ldrb	r3, [r7, #16]
 800ebcc:	3301      	adds	r3, #1
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	5cd1      	ldrb	r1, [r2, r3]
 800ebd2:	7dfb      	ldrb	r3, [r7, #23]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	7d3a      	ldrb	r2, [r7, #20]
 800ebd8:	404a      	eors	r2, r1
 800ebda:	b2d1      	uxtb	r1, r2
 800ebdc:	687a      	ldr	r2, [r7, #4]
 800ebde:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ebe0:	7c3b      	ldrb	r3, [r7, #16]
 800ebe2:	3302      	adds	r3, #2
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	5cd1      	ldrb	r1, [r2, r3]
 800ebe8:	7dfb      	ldrb	r3, [r7, #23]
 800ebea:	3302      	adds	r3, #2
 800ebec:	7cfa      	ldrb	r2, [r7, #19]
 800ebee:	404a      	eors	r2, r1
 800ebf0:	b2d1      	uxtb	r1, r2
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ebf6:	7c3b      	ldrb	r3, [r7, #16]
 800ebf8:	3303      	adds	r3, #3
 800ebfa:	687a      	ldr	r2, [r7, #4]
 800ebfc:	5cd1      	ldrb	r1, [r2, r3]
 800ebfe:	7dfb      	ldrb	r3, [r7, #23]
 800ec00:	3303      	adds	r3, #3
 800ec02:	7cba      	ldrb	r2, [r7, #18]
 800ec04:	404a      	eors	r2, r1
 800ec06:	b2d1      	uxtb	r1, r2
 800ec08:	687a      	ldr	r2, [r7, #4]
 800ec0a:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	3304      	adds	r3, #4
 800ec10:	75fb      	strb	r3, [r7, #23]
 800ec12:	7dfa      	ldrb	r2, [r7, #23]
 800ec14:	7c7b      	ldrb	r3, [r7, #17]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	f4ff af67 	bcc.w	800eaea <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ec1c:	2300      	movs	r3, #0
}
 800ec1e:	4618      	mov	r0, r3
 800ec20:	3718      	adds	r7, #24
 800ec22:	46bd      	mov	sp, r7
 800ec24:	bd80      	pop	{r7, pc}
 800ec26:	bf00      	nop
 800ec28:	00010101 	.word	0x00010101
 800ec2c:	0801f60c 	.word	0x0801f60c

0800ec30 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b08a      	sub	sp, #40	; 0x28
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d038      	beq.n	800ecb8 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	f107 0314 	add.w	r3, r7, #20
 800ec4c:	68f9      	ldr	r1, [r7, #12]
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f7ff fc07 	bl	800e462 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec54:	2301      	movs	r3, #1
 800ec56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec5a:	e014      	b.n	800ec86 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ec5c:	f107 0314 	add.w	r3, r7, #20
 800ec60:	4618      	mov	r0, r3
 800ec62:	f7ff fd5d 	bl	800e720 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec6c:	0112      	lsls	r2, r2, #4
 800ec6e:	441a      	add	r2, r3
 800ec70:	f107 0314 	add.w	r3, r7, #20
 800ec74:	4611      	mov	r1, r2
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7ff fcab 	bl	800e5d2 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec80:	3301      	adds	r3, #1
 800ec82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec8c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d3e3      	bcc.n	800ec5c <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ec94:	f107 0314 	add.w	r3, r7, #20
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fca7 	bl	800e5ec <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eca4:	0112      	lsls	r2, r2, #4
 800eca6:	441a      	add	r2, r3
 800eca8:	f107 0314 	add.w	r3, r7, #20
 800ecac:	4619      	mov	r1, r3
 800ecae:	68b8      	ldr	r0, [r7, #8]
 800ecb0:	f7ff fbd7 	bl	800e462 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	e000      	b.n	800ecba <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ecb8:	23ff      	movs	r3, #255	; 0xff
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3728      	adds	r7, #40	; 0x28
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ecc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecc6:	b0a1      	sub	sp, #132	; 0x84
 800ecc8:	af12      	add	r7, sp, #72	; 0x48
 800ecca:	4603      	mov	r3, r0
 800eccc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ecd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ecd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecd8:	4611      	mov	r1, r2
 800ecda:	4618      	mov	r0, r3
 800ecdc:	f000 fa12 	bl	800f104 <SecureElementGetKeyByID>
 800ece0:	4603      	mov	r3, r0
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d174      	bne.n	800edd0 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ece6:	2300      	movs	r3, #0
 800ece8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ecec:	e06c      	b.n	800edc8 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ecee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ecf2:	4939      	ldr	r1, [pc, #228]	; (800edd8 <PrintKey+0x114>)
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	005b      	lsls	r3, r3, #1
 800ecf8:	4413      	add	r3, r2
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	440b      	add	r3, r1
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ed04:	429a      	cmp	r2, r3
 800ed06:	d15a      	bne.n	800edbe <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ed08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed0c:	4932      	ldr	r1, [pc, #200]	; (800edd8 <PrintKey+0x114>)
 800ed0e:	4613      	mov	r3, r2
 800ed10:	005b      	lsls	r3, r3, #1
 800ed12:	4413      	add	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	440b      	add	r3, r1
 800ed18:	3308      	adds	r3, #8
 800ed1a:	6819      	ldr	r1, [r3, #0]
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1e:	785b      	ldrb	r3, [r3, #1]
 800ed20:	461d      	mov	r5, r3
 800ed22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed24:	789b      	ldrb	r3, [r3, #2]
 800ed26:	461e      	mov	r6, r3
 800ed28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2a:	78db      	ldrb	r3, [r3, #3]
 800ed2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed30:	791b      	ldrb	r3, [r3, #4]
 800ed32:	627b      	str	r3, [r7, #36]	; 0x24
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	795b      	ldrb	r3, [r3, #5]
 800ed38:	623b      	str	r3, [r7, #32]
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	799b      	ldrb	r3, [r3, #6]
 800ed3e:	61fb      	str	r3, [r7, #28]
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	79db      	ldrb	r3, [r3, #7]
 800ed44:	61bb      	str	r3, [r7, #24]
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	7a1b      	ldrb	r3, [r3, #8]
 800ed4a:	617b      	str	r3, [r7, #20]
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	7a5b      	ldrb	r3, [r3, #9]
 800ed50:	613b      	str	r3, [r7, #16]
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	7a9b      	ldrb	r3, [r3, #10]
 800ed56:	60fb      	str	r3, [r7, #12]
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	7adb      	ldrb	r3, [r3, #11]
 800ed5c:	60bb      	str	r3, [r7, #8]
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	7b1b      	ldrb	r3, [r3, #12]
 800ed62:	607b      	str	r3, [r7, #4]
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	7b5b      	ldrb	r3, [r3, #13]
 800ed68:	461c      	mov	r4, r3
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	7b9b      	ldrb	r3, [r3, #14]
 800ed6e:	4618      	mov	r0, r3
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	7bdb      	ldrb	r3, [r3, #15]
 800ed74:	461a      	mov	r2, r3
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	7c1b      	ldrb	r3, [r3, #16]
 800ed7a:	9310      	str	r3, [sp, #64]	; 0x40
 800ed7c:	920f      	str	r2, [sp, #60]	; 0x3c
 800ed7e:	900e      	str	r0, [sp, #56]	; 0x38
 800ed80:	940d      	str	r4, [sp, #52]	; 0x34
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	920c      	str	r2, [sp, #48]	; 0x30
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed8a:	68fa      	ldr	r2, [r7, #12]
 800ed8c:	920a      	str	r2, [sp, #40]	; 0x28
 800ed8e:	693a      	ldr	r2, [r7, #16]
 800ed90:	9209      	str	r2, [sp, #36]	; 0x24
 800ed92:	697a      	ldr	r2, [r7, #20]
 800ed94:	9208      	str	r2, [sp, #32]
 800ed96:	69ba      	ldr	r2, [r7, #24]
 800ed98:	9207      	str	r2, [sp, #28]
 800ed9a:	69fa      	ldr	r2, [r7, #28]
 800ed9c:	9206      	str	r2, [sp, #24]
 800ed9e:	6a3a      	ldr	r2, [r7, #32]
 800eda0:	9205      	str	r2, [sp, #20]
 800eda2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eda4:	9204      	str	r2, [sp, #16]
 800eda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda8:	9303      	str	r3, [sp, #12]
 800edaa:	9602      	str	r6, [sp, #8]
 800edac:	9501      	str	r5, [sp, #4]
 800edae:	9100      	str	r1, [sp, #0]
 800edb0:	4b0a      	ldr	r3, [pc, #40]	; (800eddc <PrintKey+0x118>)
 800edb2:	2200      	movs	r2, #0
 800edb4:	2100      	movs	r1, #0
 800edb6:	2002      	movs	r0, #2
 800edb8:	f00f fbc6 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
 800edbc:	e008      	b.n	800edd0 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800edbe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edc2:	3301      	adds	r3, #1
 800edc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800edc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edcc:	2b0a      	cmp	r3, #10
 800edce:	d98e      	bls.n	800ecee <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800edd0:	373c      	adds	r7, #60	; 0x3c
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edd6:	bf00      	nop
 800edd8:	0801f90c 	.word	0x0801f90c
 800eddc:	0801f1a4 	.word	0x0801f1a4

0800ede0 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800ede0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ede2:	b091      	sub	sp, #68	; 0x44
 800ede4:	af08      	add	r7, sp, #32
 800ede6:	4603      	mov	r3, r0
 800ede8:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800edea:	2300      	movs	r3, #0
 800edec:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800edee:	f107 0310 	add.w	r3, r7, #16
 800edf2:	4618      	mov	r0, r3
 800edf4:	f000 fbf0 	bl	800f5d8 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800edf8:	7c3b      	ldrb	r3, [r7, #16]
 800edfa:	7c7a      	ldrb	r2, [r7, #17]
 800edfc:	7cb9      	ldrb	r1, [r7, #18]
 800edfe:	7cf8      	ldrb	r0, [r7, #19]
 800ee00:	7d3c      	ldrb	r4, [r7, #20]
 800ee02:	7d7d      	ldrb	r5, [r7, #21]
 800ee04:	7dbe      	ldrb	r6, [r7, #22]
 800ee06:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ee0a:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee0e:	9606      	str	r6, [sp, #24]
 800ee10:	9505      	str	r5, [sp, #20]
 800ee12:	9404      	str	r4, [sp, #16]
 800ee14:	9003      	str	r0, [sp, #12]
 800ee16:	9102      	str	r1, [sp, #8]
 800ee18:	9201      	str	r2, [sp, #4]
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	4b24      	ldr	r3, [pc, #144]	; (800eeb0 <PrintIds+0xd0>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2100      	movs	r1, #0
 800ee22:	2002      	movs	r0, #2
 800ee24:	f00f fb90 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ee28:	f107 0318 	add.w	r3, r7, #24
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f000 fc03 	bl	800f638 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee32:	7e3b      	ldrb	r3, [r7, #24]
 800ee34:	7e7a      	ldrb	r2, [r7, #25]
 800ee36:	7eb9      	ldrb	r1, [r7, #26]
 800ee38:	7ef8      	ldrb	r0, [r7, #27]
 800ee3a:	7f3c      	ldrb	r4, [r7, #28]
 800ee3c:	7f7d      	ldrb	r5, [r7, #29]
 800ee3e:	7fbe      	ldrb	r6, [r7, #30]
 800ee40:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ee44:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee48:	9606      	str	r6, [sp, #24]
 800ee4a:	9505      	str	r5, [sp, #20]
 800ee4c:	9404      	str	r4, [sp, #16]
 800ee4e:	9003      	str	r0, [sp, #12]
 800ee50:	9102      	str	r1, [sp, #8]
 800ee52:	9201      	str	r2, [sp, #4]
 800ee54:	9300      	str	r3, [sp, #0]
 800ee56:	4b17      	ldr	r3, [pc, #92]	; (800eeb4 <PrintIds+0xd4>)
 800ee58:	2200      	movs	r2, #0
 800ee5a:	2100      	movs	r1, #0
 800ee5c:	2002      	movs	r0, #2
 800ee5e:	f00f fb73 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ee62:	f107 020c 	add.w	r2, r7, #12
 800ee66:	79fb      	ldrb	r3, [r7, #7]
 800ee68:	4611      	mov	r1, r2
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	f000 fc16 	bl	800f69c <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee70:	f107 030c 	add.w	r3, r7, #12
 800ee74:	3303      	adds	r3, #3
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	461a      	mov	r2, r3
 800ee7a:	f107 030c 	add.w	r3, r7, #12
 800ee7e:	3302      	adds	r3, #2
 800ee80:	781b      	ldrb	r3, [r3, #0]
 800ee82:	4619      	mov	r1, r3
 800ee84:	f107 030c 	add.w	r3, r7, #12
 800ee88:	3301      	adds	r3, #1
 800ee8a:	781b      	ldrb	r3, [r3, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f107 030c 	add.w	r3, r7, #12
 800ee92:	781b      	ldrb	r3, [r3, #0]
 800ee94:	9303      	str	r3, [sp, #12]
 800ee96:	9002      	str	r0, [sp, #8]
 800ee98:	9101      	str	r1, [sp, #4]
 800ee9a:	9200      	str	r2, [sp, #0]
 800ee9c:	4b06      	ldr	r3, [pc, #24]	; (800eeb8 <PrintIds+0xd8>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	2100      	movs	r1, #0
 800eea2:	2002      	movs	r0, #2
 800eea4:	f00f fb50 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800eea8:	bf00      	nop
 800eeaa:	3724      	adds	r7, #36	; 0x24
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eeb0:	0801f200 	.word	0x0801f200
 800eeb4:	0801f240 	.word	0x0801f240
 800eeb8:	0801f280 	.word	0x0801f280

0800eebc <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	4603      	mov	r3, r0
 800eec4:	6039      	str	r1, [r7, #0]
 800eec6:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eec8:	2300      	movs	r3, #0
 800eeca:	73fb      	strb	r3, [r7, #15]
 800eecc:	e01a      	b.n	800ef04 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eece:	4b12      	ldr	r3, [pc, #72]	; (800ef18 <GetKeyByID+0x5c>)
 800eed0:	6819      	ldr	r1, [r3, #0]
 800eed2:	7bfa      	ldrb	r2, [r7, #15]
 800eed4:	4613      	mov	r3, r2
 800eed6:	011b      	lsls	r3, r3, #4
 800eed8:	4413      	add	r3, r2
 800eeda:	440b      	add	r3, r1
 800eedc:	3318      	adds	r3, #24
 800eede:	781b      	ldrb	r3, [r3, #0]
 800eee0:	79fa      	ldrb	r2, [r7, #7]
 800eee2:	429a      	cmp	r2, r3
 800eee4:	d10b      	bne.n	800eefe <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eee6:	4b0c      	ldr	r3, [pc, #48]	; (800ef18 <GetKeyByID+0x5c>)
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	7bfa      	ldrb	r2, [r7, #15]
 800eeec:	4613      	mov	r3, r2
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	4413      	add	r3, r2
 800eef2:	3318      	adds	r3, #24
 800eef4:	18ca      	adds	r2, r1, r3
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800eefa:	2300      	movs	r3, #0
 800eefc:	e006      	b.n	800ef0c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	3301      	adds	r3, #1
 800ef02:	73fb      	strb	r3, [r7, #15]
 800ef04:	7bfb      	ldrb	r3, [r7, #15]
 800ef06:	2b0a      	cmp	r3, #10
 800ef08:	d9e1      	bls.n	800eece <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef0a:	2303      	movs	r3, #3
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bc80      	pop	{r7}
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	20000750 	.word	0x20000750

0800ef1c <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef1c:	b590      	push	{r4, r7, lr}
 800ef1e:	b0d1      	sub	sp, #324	; 0x144
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ef26:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ef2a:	6020      	str	r0, [r4, #0]
 800ef2c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ef30:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ef34:	6001      	str	r1, [r0, #0]
 800ef36:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ef3a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ef3e:	600a      	str	r2, [r1, #0]
 800ef40:	461a      	mov	r2, r3
 800ef42:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef46:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef4a:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef50:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d003      	beq.n	800ef62 <ComputeCmac+0x46>
 800ef5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d101      	bne.n	800ef66 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef62:	2302      	movs	r3, #2
 800ef64:	e05d      	b.n	800f022 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ef66:	f107 0314 	add.w	r3, r7, #20
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe ff02 	bl	800dd74 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef70:	f107 0210 	add.w	r2, r7, #16
 800ef74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef78:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	4611      	mov	r1, r2
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff ff9b 	bl	800eebc <GetKeyByID>
 800ef86:	4603      	mov	r3, r0
 800ef88:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800ef8c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d144      	bne.n	800f01e <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800ef94:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	1c5a      	adds	r2, r3, #1
 800efa0:	f107 0314 	add.w	r3, r7, #20
 800efa4:	4611      	mov	r1, r2
 800efa6:	4618      	mov	r0, r3
 800efa8:	f7fe fefd 	bl	800dda6 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800efac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efb0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d009      	beq.n	800efce <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800efba:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efbe:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efc2:	f107 0014 	add.w	r0, r7, #20
 800efc6:	2210      	movs	r2, #16
 800efc8:	6819      	ldr	r1, [r3, #0]
 800efca:	f7fe fefb 	bl	800ddc4 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800efce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efd2:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800efd6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efda:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800efde:	f107 0014 	add.w	r0, r7, #20
 800efe2:	6812      	ldr	r2, [r2, #0]
 800efe4:	6819      	ldr	r1, [r3, #0]
 800efe6:	f7fe feed 	bl	800ddc4 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800efea:	f107 0214 	add.w	r2, r7, #20
 800efee:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800eff2:	4611      	mov	r1, r2
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fe ffa7 	bl	800df48 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800effa:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800effe:	461a      	mov	r2, r3
 800f000:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f004:	021b      	lsls	r3, r3, #8
 800f006:	431a      	orrs	r2, r3
 800f008:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f00c:	041b      	lsls	r3, r3, #16
 800f00e:	431a      	orrs	r2, r3
 800f010:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f014:	061b      	lsls	r3, r3, #24
 800f016:	431a      	orrs	r2, r3
 800f018:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f01c:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f01e:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f022:	4618      	mov	r0, r3
 800f024:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f028:	46bd      	mov	sp, r7
 800f02a:	bd90      	pop	{r4, r7, pc}

0800f02c <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d101      	bne.n	800f03e <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f03a:	2302      	movs	r3, #2
 800f03c:	e00a      	b.n	800f054 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f03e:	4a07      	ldr	r2, [pc, #28]	; (800f05c <SecureElementInit+0x30>)
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f044:	4b05      	ldr	r3, [pc, #20]	; (800f05c <SecureElementInit+0x30>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	22d8      	movs	r2, #216	; 0xd8
 800f04a:	4905      	ldr	r1, [pc, #20]	; (800f060 <SecureElementInit+0x34>)
 800f04c:	4618      	mov	r0, r3
 800f04e:	f00a fed6 	bl	8019dfe <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f052:	2300      	movs	r3, #0
}
 800f054:	4618      	mov	r0, r3
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}
 800f05c:	20000750 	.word	0x20000750
 800f060:	0801fb28 	.word	0x0801fb28

0800f064 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b086      	sub	sp, #24
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f06e:	2300      	movs	r3, #0
 800f070:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f072:	f107 030c 	add.w	r3, r7, #12
 800f076:	4618      	mov	r0, r3
 800f078:	f000 faae 	bl	800f5d8 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f07c:	f107 0308 	add.w	r3, r7, #8
 800f080:	4619      	mov	r1, r3
 800f082:	2001      	movs	r0, #1
 800f084:	f000 fb0a 	bl	800f69c <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d024      	beq.n	800f0d8 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f08e:	2300      	movs	r3, #0
 800f090:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f092:	2300      	movs	r3, #0
 800f094:	75bb      	strb	r3, [r7, #22]
 800f096:	e00c      	b.n	800f0b2 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f098:	7dbb      	ldrb	r3, [r7, #22]
 800f09a:	3318      	adds	r3, #24
 800f09c:	443b      	add	r3, r7
 800f09e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d002      	beq.n	800f0ac <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f0a6:	2301      	movs	r3, #1
 800f0a8:	75fb      	strb	r3, [r7, #23]
                break;
 800f0aa:	e005      	b.n	800f0b8 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0ac:	7dbb      	ldrb	r3, [r7, #22]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	75bb      	strb	r3, [r7, #22]
 800f0b2:	7dbb      	ldrb	r3, [r7, #22]
 800f0b4:	2b07      	cmp	r3, #7
 800f0b6:	d9ef      	bls.n	800f098 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f0b8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ba:	f083 0301 	eor.w	r3, r3, #1
 800f0be:	b2db      	uxtb	r3, r3
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d009      	beq.n	800f0d8 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f0c4:	f107 020c 	add.w	r2, r7, #12
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4610      	mov	r0, r2
 800f0cc:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f0ce:	f107 030c 	add.w	r3, r7, #12
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 fa68 	bl	800f5a8 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00c      	beq.n	800f0f8 <SecureElementInitMcuID+0x94>
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d109      	bne.n	800f0f8 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f0e4:	f107 0208 	add.w	r2, r7, #8
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	4610      	mov	r0, r2
 800f0ec:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	4619      	mov	r1, r3
 800f0f2:	2001      	movs	r0, #1
 800f0f4:	f000 fab8 	bl	800f668 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f0f8:	2300      	movs	r3, #0
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3718      	adds	r7, #24
 800f0fe:	46bd      	mov	sp, r7
 800f100:	bd80      	pop	{r7, pc}
	...

0800f104 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	4603      	mov	r3, r0
 800f10c:	6039      	str	r1, [r7, #0]
 800f10e:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f110:	2300      	movs	r3, #0
 800f112:	73fb      	strb	r3, [r7, #15]
 800f114:	e01a      	b.n	800f14c <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f116:	4b12      	ldr	r3, [pc, #72]	; (800f160 <SecureElementGetKeyByID+0x5c>)
 800f118:	6819      	ldr	r1, [r3, #0]
 800f11a:	7bfa      	ldrb	r2, [r7, #15]
 800f11c:	4613      	mov	r3, r2
 800f11e:	011b      	lsls	r3, r3, #4
 800f120:	4413      	add	r3, r2
 800f122:	440b      	add	r3, r1
 800f124:	3318      	adds	r3, #24
 800f126:	781b      	ldrb	r3, [r3, #0]
 800f128:	79fa      	ldrb	r2, [r7, #7]
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d10b      	bne.n	800f146 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f12e:	4b0c      	ldr	r3, [pc, #48]	; (800f160 <SecureElementGetKeyByID+0x5c>)
 800f130:	6819      	ldr	r1, [r3, #0]
 800f132:	7bfa      	ldrb	r2, [r7, #15]
 800f134:	4613      	mov	r3, r2
 800f136:	011b      	lsls	r3, r3, #4
 800f138:	4413      	add	r3, r2
 800f13a:	3318      	adds	r3, #24
 800f13c:	18ca      	adds	r2, r1, r3
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f142:	2300      	movs	r3, #0
 800f144:	e006      	b.n	800f154 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f146:	7bfb      	ldrb	r3, [r7, #15]
 800f148:	3301      	adds	r3, #1
 800f14a:	73fb      	strb	r3, [r7, #15]
 800f14c:	7bfb      	ldrb	r3, [r7, #15]
 800f14e:	2b0a      	cmp	r3, #10
 800f150:	d9e1      	bls.n	800f116 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f152:	2303      	movs	r3, #3
}
 800f154:	4618      	mov	r0, r3
 800f156:	3714      	adds	r7, #20
 800f158:	46bd      	mov	sp, r7
 800f15a:	bc80      	pop	{r7}
 800f15c:	4770      	bx	lr
 800f15e:	bf00      	nop
 800f160:	20000750 	.word	0x20000750

0800f164 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f164:	b580      	push	{r7, lr}
 800f166:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f168:	2000      	movs	r0, #0
 800f16a:	f7ff fdab 	bl	800ecc4 <PrintKey>
    PrintKey( NWK_KEY );
 800f16e:	2001      	movs	r0, #1
 800f170:	f7ff fda8 	bl	800ecc4 <PrintKey>
    PrintKey( APP_S_KEY );
 800f174:	2009      	movs	r0, #9
 800f176:	f7ff fda5 	bl	800ecc4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f17a:	2008      	movs	r0, #8
 800f17c:	f7ff fda2 	bl	800ecc4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f180:	2000      	movs	r0, #0
 800f182:	f7ff fe2d 	bl	800ede0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	bd80      	pop	{r7, pc}

0800f18c <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b082      	sub	sp, #8
 800f190:	af00      	add	r7, sp, #0
 800f192:	4603      	mov	r3, r0
 800f194:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f196:	200b      	movs	r0, #11
 800f198:	f7ff fd94 	bl	800ecc4 <PrintKey>
    PrintKey( MC_KE_KEY );
 800f19c:	200c      	movs	r0, #12
 800f19e:	f7ff fd91 	bl	800ecc4 <PrintKey>
    PrintKey( APP_S_KEY );
 800f1a2:	2009      	movs	r0, #9
 800f1a4:	f7ff fd8e 	bl	800ecc4 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1a8:	2008      	movs	r0, #8
 800f1aa:	f7ff fd8b 	bl	800ecc4 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f1ae:	200a      	movs	r0, #10
 800f1b0:	f7ff fd88 	bl	800ecc4 <PrintKey>
    PrintIds( mode );
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	f7ff fe12 	bl	800ede0 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3708      	adds	r7, #8
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
	...

0800f1c8 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b088      	sub	sp, #32
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	6039      	str	r1, [r7, #0]
 800f1d2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d101      	bne.n	800f1de <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1da:	2302      	movs	r3, #2
 800f1dc:	e04c      	b.n	800f278 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1de:	2300      	movs	r3, #0
 800f1e0:	77fb      	strb	r3, [r7, #31]
 800f1e2:	e045      	b.n	800f270 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f1e4:	4b26      	ldr	r3, [pc, #152]	; (800f280 <SecureElementSetKey+0xb8>)
 800f1e6:	6819      	ldr	r1, [r3, #0]
 800f1e8:	7ffa      	ldrb	r2, [r7, #31]
 800f1ea:	4613      	mov	r3, r2
 800f1ec:	011b      	lsls	r3, r3, #4
 800f1ee:	4413      	add	r3, r2
 800f1f0:	440b      	add	r3, r1
 800f1f2:	3318      	adds	r3, #24
 800f1f4:	781b      	ldrb	r3, [r3, #0]
 800f1f6:	79fa      	ldrb	r2, [r7, #7]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d136      	bne.n	800f26a <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f1fc:	79fb      	ldrb	r3, [r7, #7]
 800f1fe:	2b0d      	cmp	r3, #13
 800f200:	d123      	bne.n	800f24a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f202:	2306      	movs	r3, #6
 800f204:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f206:	2300      	movs	r3, #0
 800f208:	60fb      	str	r3, [r7, #12]
 800f20a:	f107 0310 	add.w	r3, r7, #16
 800f20e:	2200      	movs	r2, #0
 800f210:	601a      	str	r2, [r3, #0]
 800f212:	605a      	str	r2, [r3, #4]
 800f214:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f216:	f107 030c 	add.w	r3, r7, #12
 800f21a:	220c      	movs	r2, #12
 800f21c:	2110      	movs	r1, #16
 800f21e:	6838      	ldr	r0, [r7, #0]
 800f220:	f000 f876 	bl	800f310 <SecureElementAesEncrypt>
 800f224:	4603      	mov	r3, r0
 800f226:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f228:	4b15      	ldr	r3, [pc, #84]	; (800f280 <SecureElementSetKey+0xb8>)
 800f22a:	6819      	ldr	r1, [r3, #0]
 800f22c:	7ffa      	ldrb	r2, [r7, #31]
 800f22e:	4613      	mov	r3, r2
 800f230:	011b      	lsls	r3, r3, #4
 800f232:	4413      	add	r3, r2
 800f234:	3318      	adds	r3, #24
 800f236:	440b      	add	r3, r1
 800f238:	3301      	adds	r3, #1
 800f23a:	f107 010c 	add.w	r1, r7, #12
 800f23e:	2210      	movs	r2, #16
 800f240:	4618      	mov	r0, r3
 800f242:	f00a fddc 	bl	8019dfe <memcpy1>
                return retval;
 800f246:	7fbb      	ldrb	r3, [r7, #30]
 800f248:	e016      	b.n	800f278 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f24a:	4b0d      	ldr	r3, [pc, #52]	; (800f280 <SecureElementSetKey+0xb8>)
 800f24c:	6819      	ldr	r1, [r3, #0]
 800f24e:	7ffa      	ldrb	r2, [r7, #31]
 800f250:	4613      	mov	r3, r2
 800f252:	011b      	lsls	r3, r3, #4
 800f254:	4413      	add	r3, r2
 800f256:	3318      	adds	r3, #24
 800f258:	440b      	add	r3, r1
 800f25a:	3301      	adds	r3, #1
 800f25c:	2210      	movs	r2, #16
 800f25e:	6839      	ldr	r1, [r7, #0]
 800f260:	4618      	mov	r0, r3
 800f262:	f00a fdcc 	bl	8019dfe <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f266:	2300      	movs	r3, #0
 800f268:	e006      	b.n	800f278 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f26a:	7ffb      	ldrb	r3, [r7, #31]
 800f26c:	3301      	adds	r3, #1
 800f26e:	77fb      	strb	r3, [r7, #31]
 800f270:	7ffb      	ldrb	r3, [r7, #31]
 800f272:	2b0a      	cmp	r3, #10
 800f274:	d9b6      	bls.n	800f1e4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f276:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f278:	4618      	mov	r0, r3
 800f27a:	3720      	adds	r7, #32
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	20000750 	.word	0x20000750

0800f284 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b086      	sub	sp, #24
 800f288:	af02      	add	r7, sp, #8
 800f28a:	60f8      	str	r0, [r7, #12]
 800f28c:	60b9      	str	r1, [r7, #8]
 800f28e:	607a      	str	r2, [r7, #4]
 800f290:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f292:	78fb      	ldrb	r3, [r7, #3]
 800f294:	2b0b      	cmp	r3, #11
 800f296:	d901      	bls.n	800f29c <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f298:	2303      	movs	r3, #3
 800f29a:	e009      	b.n	800f2b0 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f29c:	78fa      	ldrb	r2, [r7, #3]
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	9300      	str	r3, [sp, #0]
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	68b9      	ldr	r1, [r7, #8]
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f7ff fe37 	bl	800ef1c <ComputeCmac>
 800f2ae:	4603      	mov	r3, r0
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b088      	sub	sp, #32
 800f2bc:	af02      	add	r7, sp, #8
 800f2be:	60f8      	str	r0, [r7, #12]
 800f2c0:	60b9      	str	r1, [r7, #8]
 800f2c2:	607a      	str	r2, [r7, #4]
 800f2c4:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d101      	bne.n	800f2d0 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2cc:	2302      	movs	r3, #2
 800f2ce:	e01b      	b.n	800f308 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f2d0:	2306      	movs	r3, #6
 800f2d2:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f2d8:	78fa      	ldrb	r2, [r7, #3]
 800f2da:	f107 0310 	add.w	r3, r7, #16
 800f2de:	9300      	str	r3, [sp, #0]
 800f2e0:	4613      	mov	r3, r2
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	68f9      	ldr	r1, [r7, #12]
 800f2e6:	2000      	movs	r0, #0
 800f2e8:	f7ff fe18 	bl	800ef1c <ComputeCmac>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f2f0:	7dfb      	ldrb	r3, [r7, #23]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d001      	beq.n	800f2fa <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f2f6:	7dfb      	ldrb	r3, [r7, #23]
 800f2f8:	e006      	b.n	800f308 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	687a      	ldr	r2, [r7, #4]
 800f2fe:	429a      	cmp	r2, r3
 800f300:	d001      	beq.n	800f306 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f302:	2301      	movs	r3, #1
 800f304:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f306:	7dfb      	ldrb	r3, [r7, #23]
}
 800f308:	4618      	mov	r0, r3
 800f30a:	3718      	adds	r7, #24
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}

0800f310 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b0c2      	sub	sp, #264	; 0x108
 800f314:	af00      	add	r7, sp, #0
 800f316:	60f8      	str	r0, [r7, #12]
 800f318:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f31c:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f320:	6001      	str	r1, [r0, #0]
 800f322:	4611      	mov	r1, r2
 800f324:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f328:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f32c:	6013      	str	r3, [r2, #0]
 800f32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f332:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f336:	460a      	mov	r2, r1
 800f338:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d006      	beq.n	800f34e <SecureElementAesEncrypt+0x3e>
 800f340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f34e:	2302      	movs	r3, #2
 800f350:	e059      	b.n	800f406 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f356:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	f003 030f 	and.w	r3, r3, #15
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f364:	2305      	movs	r3, #5
 800f366:	e04e      	b.n	800f406 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f368:	f107 0314 	add.w	r3, r7, #20
 800f36c:	22f0      	movs	r2, #240	; 0xf0
 800f36e:	2100      	movs	r1, #0
 800f370:	4618      	mov	r0, r3
 800f372:	f00a fd7f 	bl	8019e74 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f376:	f107 0210 	add.w	r2, r7, #16
 800f37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f37e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f382:	781b      	ldrb	r3, [r3, #0]
 800f384:	4611      	mov	r1, r2
 800f386:	4618      	mov	r0, r3
 800f388:	f7ff fd98 	bl	800eebc <GetKeyByID>
 800f38c:	4603      	mov	r3, r0
 800f38e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f392:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f396:	2b00      	cmp	r3, #0
 800f398:	d133      	bne.n	800f402 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f39a:	693b      	ldr	r3, [r7, #16]
 800f39c:	3301      	adds	r3, #1
 800f39e:	f107 0214 	add.w	r2, r7, #20
 800f3a2:	2110      	movs	r1, #16
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7ff fb65 	bl	800ea74 <lorawan_aes_set_key>

        uint8_t block = 0;
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f3b0:	e020      	b.n	800f3f4 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3b2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	18d0      	adds	r0, r2, r3
 800f3ba:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3be:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3c2:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f3c6:	6812      	ldr	r2, [r2, #0]
 800f3c8:	4413      	add	r3, r2
 800f3ca:	f107 0214 	add.w	r2, r7, #20
 800f3ce:	4619      	mov	r1, r3
 800f3d0:	f7ff fc2e 	bl	800ec30 <lorawan_aes_encrypt>
            block = block + 16;
 800f3d4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3d8:	3310      	adds	r3, #16
 800f3da:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f3de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3e2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f3e6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3ea:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f3ee:	6812      	ldr	r2, [r2, #0]
 800f3f0:	3a10      	subs	r2, #16
 800f3f2:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f3f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1d7      	bne.n	800f3b2 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f402:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f406:	4618      	mov	r0, r3
 800f408:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b088      	sub	sp, #32
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	460b      	mov	r3, r1
 800f41a:	70fb      	strb	r3, [r7, #3]
 800f41c:	4613      	mov	r3, r2
 800f41e:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d101      	bne.n	800f42a <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f426:	2302      	movs	r3, #2
 800f428:	e02e      	b.n	800f488 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f42a:	2306      	movs	r3, #6
 800f42c:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f42e:	78bb      	ldrb	r3, [r7, #2]
 800f430:	2b0c      	cmp	r3, #12
 800f432:	d104      	bne.n	800f43e <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f434:	78fb      	ldrb	r3, [r7, #3]
 800f436:	2b0b      	cmp	r3, #11
 800f438:	d001      	beq.n	800f43e <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f43a:	2303      	movs	r3, #3
 800f43c:	e024      	b.n	800f488 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f43e:	2300      	movs	r3, #0
 800f440:	60fb      	str	r3, [r7, #12]
 800f442:	f107 0310 	add.w	r3, r7, #16
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	605a      	str	r2, [r3, #4]
 800f44c:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f44e:	f107 030c 	add.w	r3, r7, #12
 800f452:	78fa      	ldrb	r2, [r7, #3]
 800f454:	2110      	movs	r1, #16
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f7ff ff5a 	bl	800f310 <SecureElementAesEncrypt>
 800f45c:	4603      	mov	r3, r0
 800f45e:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f460:	7ffb      	ldrb	r3, [r7, #31]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f466:	7ffb      	ldrb	r3, [r7, #31]
 800f468:	e00e      	b.n	800f488 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f46a:	f107 020c 	add.w	r2, r7, #12
 800f46e:	78bb      	ldrb	r3, [r7, #2]
 800f470:	4611      	mov	r1, r2
 800f472:	4618      	mov	r0, r3
 800f474:	f7ff fea8 	bl	800f1c8 <SecureElementSetKey>
 800f478:	4603      	mov	r3, r0
 800f47a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f47c:	7ffb      	ldrb	r3, [r7, #31]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d001      	beq.n	800f486 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f482:	7ffb      	ldrb	r3, [r7, #31]
 800f484:	e000      	b.n	800f488 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f486:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3720      	adds	r7, #32
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}

0800f490 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b086      	sub	sp, #24
 800f494:	af00      	add	r7, sp, #0
 800f496:	60b9      	str	r1, [r7, #8]
 800f498:	607b      	str	r3, [r7, #4]
 800f49a:	4603      	mov	r3, r0
 800f49c:	73fb      	strb	r3, [r7, #15]
 800f49e:	4613      	mov	r3, r2
 800f4a0:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d005      	beq.n	800f4b4 <SecureElementProcessJoinAccept+0x24>
 800f4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d002      	beq.n	800f4b4 <SecureElementProcessJoinAccept+0x24>
 800f4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d101      	bne.n	800f4b8 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4b4:	2302      	movs	r3, #2
 800f4b6:	e05c      	b.n	800f572 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4bc:	2b21      	cmp	r3, #33	; 0x21
 800f4be:	d901      	bls.n	800f4c4 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f4c0:	2305      	movs	r3, #5
 800f4c2:	e056      	b.n	800f572 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f4c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	461a      	mov	r2, r3
 800f4d0:	6879      	ldr	r1, [r7, #4]
 800f4d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4d4:	f00a fc93 	bl	8019dfe <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	1c58      	adds	r0, r3, #1
 800f4dc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4e0:	3b01      	subs	r3, #1
 800f4e2:	4619      	mov	r1, r3
 800f4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4e6:	3301      	adds	r3, #1
 800f4e8:	7dfa      	ldrb	r2, [r7, #23]
 800f4ea:	f7ff ff11 	bl	800f310 <SecureElementAesEncrypt>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d001      	beq.n	800f4f8 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f4f4:	2307      	movs	r3, #7
 800f4f6:	e03c      	b.n	800f572 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fa:	330b      	adds	r3, #11
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	09db      	lsrs	r3, r3, #7
 800f500:	b2da      	uxtb	r2, r3
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f506:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f50a:	3b04      	subs	r3, #4
 800f50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50e:	4413      	add	r3, r2
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	4619      	mov	r1, r3
 800f514:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f518:	3b03      	subs	r3, #3
 800f51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f51c:	4413      	add	r3, r2
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	021b      	lsls	r3, r3, #8
 800f522:	ea41 0203 	orr.w	r2, r1, r3
 800f526:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f52a:	3b02      	subs	r3, #2
 800f52c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f52e:	440b      	add	r3, r1
 800f530:	781b      	ldrb	r3, [r3, #0]
 800f532:	041b      	lsls	r3, r3, #16
 800f534:	431a      	orrs	r2, r3
 800f536:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f53a:	3b01      	subs	r3, #1
 800f53c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f53e:	440b      	add	r3, r1
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	061b      	lsls	r3, r3, #24
 800f544:	4313      	orrs	r3, r2
 800f546:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54a:	781b      	ldrb	r3, [r3, #0]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d10d      	bne.n	800f56c <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f550:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f554:	3b04      	subs	r3, #4
 800f556:	4619      	mov	r1, r3
 800f558:	2301      	movs	r3, #1
 800f55a:	693a      	ldr	r2, [r7, #16]
 800f55c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f55e:	f7ff feab 	bl	800f2b8 <SecureElementVerifyAesCmac>
 800f562:	4603      	mov	r3, r0
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f568:	2301      	movs	r3, #1
 800f56a:	e002      	b.n	800f572 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f56c:	2304      	movs	r3, #4
 800f56e:	e000      	b.n	800f572 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f570:	2300      	movs	r3, #0
}
 800f572:	4618      	mov	r0, r3
 800f574:	3718      	adds	r7, #24
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
	...

0800f57c <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	2b00      	cmp	r3, #0
 800f588:	d101      	bne.n	800f58e <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f58a:	2302      	movs	r3, #2
 800f58c:	e006      	b.n	800f59c <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <SecureElementRandomNumber+0x28>)
 800f590:	695b      	ldr	r3, [r3, #20]
 800f592:	4798      	blx	r3
 800f594:	4602      	mov	r2, r0
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f59a:	2300      	movs	r3, #0
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	0801f9d8 	.word	0x0801f9d8

0800f5a8 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d101      	bne.n	800f5ba <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	e007      	b.n	800f5ca <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f5ba:	4b06      	ldr	r3, [pc, #24]	; (800f5d4 <SecureElementSetDevEui+0x2c>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2208      	movs	r2, #8
 800f5c0:	6879      	ldr	r1, [r7, #4]
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f00a fc1b 	bl	8019dfe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5c8:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3708      	adds	r7, #8
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	20000750 	.word	0x20000750

0800f5d8 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d101      	bne.n	800f5ea <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5e6:	2302      	movs	r3, #2
 800f5e8:	e007      	b.n	800f5fa <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f5ea:	4b06      	ldr	r3, [pc, #24]	; (800f604 <SecureElementGetDevEui+0x2c>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2208      	movs	r2, #8
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f00a fc03 	bl	8019dfe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5f8:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	20000750 	.word	0x20000750

0800f608 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	2b00      	cmp	r3, #0
 800f614:	d101      	bne.n	800f61a <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f616:	2302      	movs	r3, #2
 800f618:	e008      	b.n	800f62c <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f61a:	4b06      	ldr	r3, [pc, #24]	; (800f634 <SecureElementSetJoinEui+0x2c>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	3308      	adds	r3, #8
 800f620:	2208      	movs	r2, #8
 800f622:	6879      	ldr	r1, [r7, #4]
 800f624:	4618      	mov	r0, r3
 800f626:	f00a fbea 	bl	8019dfe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f62a:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}
 800f634:	20000750 	.word	0x20000750

0800f638 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d101      	bne.n	800f64a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f646:	2302      	movs	r3, #2
 800f648:	e008      	b.n	800f65c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f64a:	4b06      	ldr	r3, [pc, #24]	; (800f664 <SecureElementGetJoinEui+0x2c>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	3308      	adds	r3, #8
 800f650:	2208      	movs	r2, #8
 800f652:	4619      	mov	r1, r3
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f00a fbd2 	bl	8019dfe <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f65a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f65c:	4618      	mov	r0, r3
 800f65e:	3708      	adds	r7, #8
 800f660:	46bd      	mov	sp, r7
 800f662:	bd80      	pop	{r7, pc}
 800f664:	20000750 	.word	0x20000750

0800f668 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	4603      	mov	r3, r0
 800f670:	6039      	str	r1, [r7, #0]
 800f672:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f674:	79fb      	ldrb	r3, [r7, #7]
 800f676:	2b02      	cmp	r3, #2
 800f678:	d104      	bne.n	800f684 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f67a:	4b07      	ldr	r3, [pc, #28]	; (800f698 <SecureElementSetDevAddr+0x30>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	683a      	ldr	r2, [r7, #0]
 800f680:	611a      	str	r2, [r3, #16]
 800f682:	e003      	b.n	800f68c <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f684:	4b04      	ldr	r3, [pc, #16]	; (800f698 <SecureElementSetDevAddr+0x30>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	683a      	ldr	r2, [r7, #0]
 800f68a:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f68c:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f68e:	4618      	mov	r0, r3
 800f690:	370c      	adds	r7, #12
 800f692:	46bd      	mov	sp, r7
 800f694:	bc80      	pop	{r7}
 800f696:	4770      	bx	lr
 800f698:	20000750 	.word	0x20000750

0800f69c <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f69c:	b480      	push	{r7}
 800f69e:	b083      	sub	sp, #12
 800f6a0:	af00      	add	r7, sp, #0
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	6039      	str	r1, [r7, #0]
 800f6a6:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d101      	bne.n	800f6b2 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6ae:	2302      	movs	r3, #2
 800f6b0:	e00e      	b.n	800f6d0 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6b2:	79fb      	ldrb	r3, [r7, #7]
 800f6b4:	2b02      	cmp	r3, #2
 800f6b6:	d105      	bne.n	800f6c4 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6b8:	4b08      	ldr	r3, [pc, #32]	; (800f6dc <SecureElementGetDevAddr+0x40>)
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	691a      	ldr	r2, [r3, #16]
 800f6be:	683b      	ldr	r3, [r7, #0]
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	e004      	b.n	800f6ce <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f6c4:	4b05      	ldr	r3, [pc, #20]	; (800f6dc <SecureElementGetDevAddr+0x40>)
 800f6c6:	681b      	ldr	r3, [r3, #0]
 800f6c8:	695a      	ldr	r2, [r3, #20]
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f6ce:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	370c      	adds	r7, #12
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	bc80      	pop	{r7}
 800f6d8:	4770      	bx	lr
 800f6da:	bf00      	nop
 800f6dc:	20000750 	.word	0x20000750

0800f6e0 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b082      	sub	sp, #8
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	6078      	str	r0, [r7, #4]
 800f6e8:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f6ea:	4a22      	ldr	r2, [pc, #136]	; (800f774 <LmHandlerInit+0x94>)
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f6f0:	4b21      	ldr	r3, [pc, #132]	; (800f778 <LmHandlerInit+0x98>)
 800f6f2:	4a22      	ldr	r2, [pc, #136]	; (800f77c <LmHandlerInit+0x9c>)
 800f6f4:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f6f6:	4b20      	ldr	r3, [pc, #128]	; (800f778 <LmHandlerInit+0x98>)
 800f6f8:	4a21      	ldr	r2, [pc, #132]	; (800f780 <LmHandlerInit+0xa0>)
 800f6fa:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f6fc:	4b1e      	ldr	r3, [pc, #120]	; (800f778 <LmHandlerInit+0x98>)
 800f6fe:	4a21      	ldr	r2, [pc, #132]	; (800f784 <LmHandlerInit+0xa4>)
 800f700:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f702:	4b1d      	ldr	r3, [pc, #116]	; (800f778 <LmHandlerInit+0x98>)
 800f704:	4a20      	ldr	r2, [pc, #128]	; (800f788 <LmHandlerInit+0xa8>)
 800f706:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f708:	4b1a      	ldr	r3, [pc, #104]	; (800f774 <LmHandlerInit+0x94>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	4a1f      	ldr	r2, [pc, #124]	; (800f78c <LmHandlerInit+0xac>)
 800f710:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f712:	4b18      	ldr	r3, [pc, #96]	; (800f774 <LmHandlerInit+0x94>)
 800f714:	681b      	ldr	r3, [r3, #0]
 800f716:	685b      	ldr	r3, [r3, #4]
 800f718:	4a1c      	ldr	r2, [pc, #112]	; (800f78c <LmHandlerInit+0xac>)
 800f71a:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f71c:	4b15      	ldr	r3, [pc, #84]	; (800f774 <LmHandlerInit+0x94>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	4a1a      	ldr	r2, [pc, #104]	; (800f78c <LmHandlerInit+0xac>)
 800f724:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f726:	4b13      	ldr	r3, [pc, #76]	; (800f774 <LmHandlerInit+0x94>)
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	4a17      	ldr	r2, [pc, #92]	; (800f78c <LmHandlerInit+0xac>)
 800f72e:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f730:	4b16      	ldr	r3, [pc, #88]	; (800f78c <LmHandlerInit+0xac>)
 800f732:	4a17      	ldr	r2, [pc, #92]	; (800f790 <LmHandlerInit+0xb0>)
 800f734:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f736:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <LmHandlerInit+0x94>)
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	4a13      	ldr	r2, [pc, #76]	; (800f78c <LmHandlerInit+0xac>)
 800f73e:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f740:	4914      	ldr	r1, [pc, #80]	; (800f794 <LmHandlerInit+0xb4>)
 800f742:	2000      	movs	r0, #0
 800f744:	f000 fd44 	bl	80101d0 <LmHandlerPackageRegister>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f74e:	f04f 33ff 	mov.w	r3, #4294967295
 800f752:	e00a      	b.n	800f76a <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f754:	463b      	mov	r3, r7
 800f756:	4618      	mov	r0, r3
 800f758:	f001 fa30 	bl	8010bbc <LmhpPackagesRegistrationInit>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f762:	f04f 33ff 	mov.w	r3, #4294967295
 800f766:	e000      	b.n	800f76a <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3708      	adds	r7, #8
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	20000798 	.word	0x20000798
 800f778:	2000079c 	.word	0x2000079c
 800f77c:	0800fe95 	.word	0x0800fe95
 800f780:	0800ff09 	.word	0x0800ff09
 800f784:	0800ffe9 	.word	0x0800ffe9
 800f788:	0801013d 	.word	0x0801013d
 800f78c:	200007ac 	.word	0x200007ac
 800f790:	08010591 	.word	0x08010591
 800f794:	2000009c 	.word	0x2000009c

0800f798 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b090      	sub	sp, #64	; 0x40
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f7a0:	2218      	movs	r2, #24
 800f7a2:	6879      	ldr	r1, [r7, #4]
 800f7a4:	4852      	ldr	r0, [pc, #328]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f7a6:	f00a fb2a 	bl	8019dfe <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f7aa:	f7fe faa1 	bl	800dcf0 <LoraInfo_GetPtr>
 800f7ae:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f7b0:	4b4f      	ldr	r3, [pc, #316]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	4093      	lsls	r3, r2
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	4013      	ands	r3, r2
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d106      	bne.n	800f7d4 <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f7c6:	4b4b      	ldr	r3, [pc, #300]	; (800f8f4 <LmHandlerConfigure+0x15c>)
 800f7c8:	2201      	movs	r2, #1
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	f00e febb 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f7d2:	e7fe      	b.n	800f7d2 <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f7d4:	4b46      	ldr	r3, [pc, #280]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f7d6:	781b      	ldrb	r3, [r3, #0]
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4947      	ldr	r1, [pc, #284]	; (800f8f8 <LmHandlerConfigure+0x160>)
 800f7dc:	4847      	ldr	r0, [pc, #284]	; (800f8fc <LmHandlerConfigure+0x164>)
 800f7de:	f004 fbc3 	bl	8013f68 <LoRaMacInitialization>
 800f7e2:	4603      	mov	r3, r0
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d002      	beq.n	800f7ee <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ec:	e07c      	b.n	800f8e8 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f7ee:	2305      	movs	r3, #5
 800f7f0:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f7f6:	f107 0314 	add.w	r3, r7, #20
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f005 f902 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f800:	4b3d      	ldr	r3, [pc, #244]	; (800f8f8 <LmHandlerConfigure+0x160>)
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	4a3c      	ldr	r2, [pc, #240]	; (800f8f8 <LmHandlerConfigure+0x160>)
 800f806:	68d2      	ldr	r2, [r2, #12]
 800f808:	4611      	mov	r1, r2
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff fc2a 	bl	800f064 <SecureElementInitMcuID>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d002      	beq.n	800f81c <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f816:	f04f 33ff 	mov.w	r3, #4294967295
 800f81a:	e065      	b.n	800f8e8 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f81c:	2306      	movs	r3, #6
 800f81e:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f820:	f107 0314 	add.w	r3, r7, #20
 800f824:	4618      	mov	r0, r3
 800f826:	f004 ff37 	bl	8014698 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	4a34      	ldr	r2, [pc, #208]	; (800f900 <LmHandlerConfigure+0x168>)
 800f82e:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f830:	f107 0314 	add.w	r3, r7, #20
 800f834:	4618      	mov	r0, r3
 800f836:	f005 f8e5 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f83a:	2302      	movs	r3, #2
 800f83c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f83e:	4b30      	ldr	r3, [pc, #192]	; (800f900 <LmHandlerConfigure+0x168>)
 800f840:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f842:	f107 0314 	add.w	r3, r7, #20
 800f846:	4618      	mov	r0, r3
 800f848:	f004 ff26 	bl	8014698 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f84c:	2303      	movs	r3, #3
 800f84e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f850:	4b2c      	ldr	r3, [pc, #176]	; (800f904 <LmHandlerConfigure+0x16c>)
 800f852:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f854:	f107 0314 	add.w	r3, r7, #20
 800f858:	4618      	mov	r0, r3
 800f85a:	f004 ff1d 	bl	8014698 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f85e:	f7ff fc81 	bl	800f164 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f862:	230f      	movs	r3, #15
 800f864:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f866:	2301      	movs	r3, #1
 800f868:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f86a:	f107 0314 	add.w	r3, r7, #20
 800f86e:	4618      	mov	r0, r3
 800f870:	f005 f8c8 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f874:	2310      	movs	r3, #16
 800f876:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f878:	2300      	movs	r3, #0
 800f87a:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f87c:	f107 0314 	add.w	r3, r7, #20
 800f880:	4618      	mov	r0, r3
 800f882:	f005 f8bf 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f886:	2304      	movs	r3, #4
 800f888:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f88a:	4b19      	ldr	r3, [pc, #100]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f88c:	789b      	ldrb	r3, [r3, #2]
 800f88e:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f890:	f107 0314 	add.w	r3, r7, #20
 800f894:	4618      	mov	r0, r3
 800f896:	f005 f8b5 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f89a:	2339      	movs	r3, #57	; 0x39
 800f89c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f89e:	4b14      	ldr	r3, [pc, #80]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f8a0:	695b      	ldr	r3, [r3, #20]
 800f8a2:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8a4:	f107 0314 	add.w	r3, r7, #20
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f005 f8ab 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f8ae:	230f      	movs	r3, #15
 800f8b0:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f8b2:	4b0f      	ldr	r3, [pc, #60]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	f107 020c 	add.w	r2, r7, #12
 800f8ba:	4611      	mov	r1, r2
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f007 ff84 	bl	80177ca <RegionGetPhyParam>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	bf14      	ite	ne
 800f8cc:	2301      	movne	r3, #1
 800f8ce:	2300      	moveq	r3, #0
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	4b07      	ldr	r3, [pc, #28]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f8d4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f8d6:	2014      	movs	r0, #20
 800f8d8:	f000 fac4 	bl	800fe64 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f8dc:	4b04      	ldr	r3, [pc, #16]	; (800f8f0 <LmHandlerConfigure+0x158>)
 800f8de:	79db      	ldrb	r3, [r3, #7]
 800f8e0:	4618      	mov	r0, r3
 800f8e2:	f005 fe6b 	bl	80155bc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f8e6:	2300      	movs	r3, #0
}
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3740      	adds	r7, #64	; 0x40
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	20000780 	.word	0x20000780
 800f8f4:	0801f2ac 	.word	0x0801f2ac
 800f8f8:	200007ac 	.word	0x200007ac
 800f8fc:	2000079c 	.word	0x2000079c
 800f900:	20000754 	.word	0x20000754
 800f904:	2000075c 	.word	0x2000075c

0800f908 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f90c:	f002 fb36 	bl	8011f7c <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f910:	f000 fd9c 	bl	801044c <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f914:	f000 fd6c 	bl	80103f0 <LmHandlerPackageIsTxPending>
 800f918:	4603      	mov	r3, r0
 800f91a:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f91c:	bd80      	pop	{r7, pc}
	...

0800f920 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f920:	b480      	push	{r7}
 800f922:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f924:	4b02      	ldr	r3, [pc, #8]	; (800f930 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f926:	681b      	ldr	r3, [r3, #0]
}
 800f928:	4618      	mov	r0, r3
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bc80      	pop	{r7}
 800f92e:	4770      	bx	lr
 800f930:	200007c4 	.word	0x200007c4

0800f934 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f934:	b580      	push	{r7, lr}
 800f936:	b092      	sub	sp, #72	; 0x48
 800f938:	af00      	add	r7, sp, #0
 800f93a:	4603      	mov	r3, r0
 800f93c:	460a      	mov	r2, r1
 800f93e:	71fb      	strb	r3, [r7, #7]
 800f940:	4613      	mov	r3, r2
 800f942:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f944:	2301      	movs	r3, #1
 800f946:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f94a:	4b47      	ldr	r3, [pc, #284]	; (800fa68 <LmHandlerJoin+0x134>)
 800f94c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f950:	b2db      	uxtb	r3, r3
 800f952:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f956:	4b44      	ldr	r3, [pc, #272]	; (800fa68 <LmHandlerJoin+0x134>)
 800f958:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f95c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f960:	79fb      	ldrb	r3, [r7, #7]
 800f962:	2b02      	cmp	r3, #2
 800f964:	d110      	bne.n	800f988 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f966:	2302      	movs	r3, #2
 800f968:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f96c:	4b3f      	ldr	r3, [pc, #252]	; (800fa6c <LmHandlerJoin+0x138>)
 800f96e:	2202      	movs	r2, #2
 800f970:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f972:	4a3e      	ldr	r2, [pc, #248]	; (800fa6c <LmHandlerJoin+0x138>)
 800f974:	79bb      	ldrb	r3, [r7, #6]
 800f976:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f978:	f004 fda8 	bl	80144cc <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f97c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f980:	4618      	mov	r0, r3
 800f982:	f005 fbd3 	bl	801512c <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f986:	e06b      	b.n	800fa60 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f988:	2301      	movs	r3, #1
 800f98a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f98e:	4b37      	ldr	r3, [pc, #220]	; (800fa6c <LmHandlerJoin+0x138>)
 800f990:	2201      	movs	r2, #1
 800f992:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f994:	4b34      	ldr	r3, [pc, #208]	; (800fa68 <LmHandlerJoin+0x134>)
 800f996:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f99a:	4b34      	ldr	r3, [pc, #208]	; (800fa6c <LmHandlerJoin+0x138>)
 800f99c:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f99e:	4b32      	ldr	r3, [pc, #200]	; (800fa68 <LmHandlerJoin+0x134>)
 800f9a0:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f9a4:	4b31      	ldr	r3, [pc, #196]	; (800fa6c <LmHandlerJoin+0x138>)
 800f9a6:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f9a8:	4b30      	ldr	r3, [pc, #192]	; (800fa6c <LmHandlerJoin+0x138>)
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f9ae:	4a2f      	ldr	r2, [pc, #188]	; (800fa6c <LmHandlerJoin+0x138>)
 800f9b0:	79bb      	ldrb	r3, [r7, #6]
 800f9b2:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f9b4:	4b2e      	ldr	r3, [pc, #184]	; (800fa70 <LmHandlerJoin+0x13c>)
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	f083 0301 	eor.w	r3, r3, #1
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d034      	beq.n	800fa2c <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f9c2:	231e      	movs	r3, #30
 800f9c4:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f9c6:	4b28      	ldr	r3, [pc, #160]	; (800fa68 <LmHandlerJoin+0x134>)
 800f9c8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9cc:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9ce:	f107 030c 	add.w	r3, r7, #12
 800f9d2:	4618      	mov	r0, r3
 800f9d4:	f005 f816 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f9d8:	231f      	movs	r3, #31
 800f9da:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f9dc:	4b22      	ldr	r3, [pc, #136]	; (800fa68 <LmHandlerJoin+0x134>)
 800f9de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9e2:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9e4:	f107 030c 	add.w	r3, r7, #12
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f005 f80b 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800f9ee:	2321      	movs	r3, #33	; 0x21
 800f9f0:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800f9f2:	4b1d      	ldr	r3, [pc, #116]	; (800fa68 <LmHandlerJoin+0x134>)
 800f9f4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f9f8:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9fa:	f107 030c 	add.w	r3, r7, #12
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f005 f800 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fa04:	2320      	movs	r3, #32
 800fa06:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800fa08:	4b17      	ldr	r3, [pc, #92]	; (800fa68 <LmHandlerJoin+0x134>)
 800fa0a:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa0e:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa10:	f107 030c 	add.w	r3, r7, #12
 800fa14:	4618      	mov	r0, r3
 800fa16:	f004 fff5 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fa1a:	2328      	movs	r3, #40	; 0x28
 800fa1c:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fa1e:	4b15      	ldr	r3, [pc, #84]	; (800fa74 <LmHandlerJoin+0x140>)
 800fa20:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa22:	f107 030c 	add.w	r3, r7, #12
 800fa26:	4618      	mov	r0, r3
 800fa28:	f004 ffec 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fa2c:	f004 fd4e 	bl	80144cc <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa30:	2301      	movs	r3, #1
 800fa32:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fa34:	2301      	movs	r3, #1
 800fa36:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fa38:	f107 030c 	add.w	r3, r7, #12
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f004 ffe1 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fa42:	4b0d      	ldr	r3, [pc, #52]	; (800fa78 <LmHandlerJoin+0x144>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d004      	beq.n	800fa56 <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fa4c:	4b0a      	ldr	r3, [pc, #40]	; (800fa78 <LmHandlerJoin+0x144>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa52:	4806      	ldr	r0, [pc, #24]	; (800fa6c <LmHandlerJoin+0x138>)
 800fa54:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fa56:	4b04      	ldr	r3, [pc, #16]	; (800fa68 <LmHandlerJoin+0x134>)
 800fa58:	785b      	ldrb	r3, [r3, #1]
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	f000 f932 	bl	800fcc4 <LmHandlerRequestClass>
}
 800fa60:	bf00      	nop
 800fa62:	3748      	adds	r7, #72	; 0x48
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	20000780 	.word	0x20000780
 800fa6c:	200000a8 	.word	0x200000a8
 800fa70:	200008ba 	.word	0x200008ba
 800fa74:	01000300 	.word	0x01000300
 800fa78:	20000798 	.word	0x20000798

0800fa7c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b08c      	sub	sp, #48	; 0x30
 800fa80:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa82:	2301      	movs	r3, #1
 800fa84:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fa86:	1d3b      	adds	r3, r7, #4
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f004 fe05 	bl	8014698 <LoRaMacMibGetRequestConfirm>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800fa94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d106      	bne.n	800faaa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fa9c:	7a3b      	ldrb	r3, [r7, #8]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d101      	bne.n	800faa6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800faa2:	2300      	movs	r3, #0
 800faa4:	e002      	b.n	800faac <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800faa6:	2301      	movs	r3, #1
 800faa8:	e000      	b.n	800faac <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800faaa:	2300      	movs	r3, #0
    }
}
 800faac:	4618      	mov	r0, r3
 800faae:	3730      	adds	r7, #48	; 0x30
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b08a      	sub	sp, #40	; 0x28
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	460b      	mov	r3, r1
 800fabe:	70fb      	strb	r3, [r7, #3]
 800fac0:	4613      	mov	r3, r2
 800fac2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fac4:	23ff      	movs	r3, #255	; 0xff
 800fac6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800faca:	f001 ffe3 	bl	8011a94 <LoRaMacIsBusy>
 800face:	4603      	mov	r3, r0
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d002      	beq.n	800fada <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fad4:	f06f 0301 	mvn.w	r3, #1
 800fad8:	e0be      	b.n	800fc58 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800fada:	f001 fff7 	bl	8011acc <LoRaMacIsStopped>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d002      	beq.n	800faea <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fae4:	f06f 0302 	mvn.w	r3, #2
 800fae8:	e0b6      	b.n	800fc58 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800faea:	f7ff ffc7 	bl	800fa7c <LmHandlerJoinStatus>
 800faee:	4603      	mov	r3, r0
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d00a      	beq.n	800fb0a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800faf4:	4b5a      	ldr	r3, [pc, #360]	; (800fc60 <LmHandlerSend+0x1ac>)
 800faf6:	79db      	ldrb	r3, [r3, #7]
 800faf8:	4a59      	ldr	r2, [pc, #356]	; (800fc60 <LmHandlerSend+0x1ac>)
 800fafa:	7a12      	ldrb	r2, [r2, #8]
 800fafc:	4611      	mov	r1, r2
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7ff ff18 	bl	800f934 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb04:	f06f 0302 	mvn.w	r3, #2
 800fb08:	e0a6      	b.n	800fc58 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800fb0a:	4b56      	ldr	r3, [pc, #344]	; (800fc64 <LmHandlerSend+0x1b0>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	68db      	ldr	r3, [r3, #12]
 800fb10:	4798      	blx	r3
 800fb12:	4603      	mov	r3, r0
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d00d      	beq.n	800fb34 <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	781a      	ldrb	r2, [r3, #0]
 800fb1c:	4b51      	ldr	r3, [pc, #324]	; (800fc64 <LmHandlerSend+0x1b0>)
 800fb1e:	681b      	ldr	r3, [r3, #0]
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d006      	beq.n	800fb34 <LmHandlerSend+0x80>
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d002      	beq.n	800fb34 <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fb2e:	f06f 0303 	mvn.w	r3, #3
 800fb32:	e091      	b.n	800fc58 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fb34:	4a4c      	ldr	r2, [pc, #304]	; (800fc68 <LmHandlerSend+0x1b4>)
 800fb36:	78fb      	ldrb	r3, [r7, #3]
 800fb38:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fb3a:	78fb      	ldrb	r3, [r7, #3]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	bf14      	ite	ne
 800fb40:	2301      	movne	r3, #1
 800fb42:	2300      	moveq	r3, #0
 800fb44:	b2db      	uxtb	r3, r3
 800fb46:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fb48:	4b48      	ldr	r3, [pc, #288]	; (800fc6c <LmHandlerSend+0x1b8>)
 800fb4a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb4e:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	f107 020c 	add.w	r2, r7, #12
 800fb58:	4611      	mov	r1, r2
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	f004 fd16 	bl	801458c <LoRaMacQueryTxPossible>
 800fb60:	4603      	mov	r3, r0
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d009      	beq.n	800fb7a <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fb66:	2300      	movs	r3, #0
 800fb68:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fb72:	23f9      	movs	r3, #249	; 0xf9
 800fb74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb78:	e009      	b.n	800fb8e <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	781b      	ldrb	r3, [r3, #0]
 800fb7e:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	785b      	ldrb	r3, [r3, #1]
 800fb84:	b29b      	uxth	r3, r3
 800fb86:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fb8e:	4b36      	ldr	r3, [pc, #216]	; (800fc68 <LmHandlerSend+0x1b4>)
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	3310      	adds	r3, #16
 800fb94:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fb98:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fb9c:	4b33      	ldr	r3, [pc, #204]	; (800fc6c <LmHandlerSend+0x1b8>)
 800fb9e:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fba2:	4b31      	ldr	r3, [pc, #196]	; (800fc68 <LmHandlerSend+0x1b4>)
 800fba4:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fba6:	78ba      	ldrb	r2, [r7, #2]
 800fba8:	f107 0310 	add.w	r3, r7, #16
 800fbac:	4611      	mov	r1, r2
 800fbae:	4618      	mov	r0, r3
 800fbb0:	f005 fc0e 	bl	80153d0 <LoRaMacMcpsRequest>
 800fbb4:	4603      	mov	r3, r0
 800fbb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fbba:	6a3b      	ldr	r3, [r7, #32]
 800fbbc:	4a2c      	ldr	r2, [pc, #176]	; (800fc70 <LmHandlerSend+0x1bc>)
 800fbbe:	6013      	str	r3, [r2, #0]

    switch( status )
 800fbc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbc4:	2b11      	cmp	r3, #17
 800fbc6:	d840      	bhi.n	800fc4a <LmHandlerSend+0x196>
 800fbc8:	a201      	add	r2, pc, #4	; (adr r2, 800fbd0 <LmHandlerSend+0x11c>)
 800fbca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbce:	bf00      	nop
 800fbd0:	0800fc19 	.word	0x0800fc19
 800fbd4:	0800fc2b 	.word	0x0800fc2b
 800fbd8:	0800fc4b 	.word	0x0800fc4b
 800fbdc:	0800fc4b 	.word	0x0800fc4b
 800fbe0:	0800fc4b 	.word	0x0800fc4b
 800fbe4:	0800fc4b 	.word	0x0800fc4b
 800fbe8:	0800fc4b 	.word	0x0800fc4b
 800fbec:	0800fc33 	.word	0x0800fc33
 800fbf0:	0800fc4b 	.word	0x0800fc4b
 800fbf4:	0800fc4b 	.word	0x0800fc4b
 800fbf8:	0800fc4b 	.word	0x0800fc4b
 800fbfc:	0800fc43 	.word	0x0800fc43
 800fc00:	0800fc4b 	.word	0x0800fc4b
 800fc04:	0800fc4b 	.word	0x0800fc4b
 800fc08:	0800fc2b 	.word	0x0800fc2b
 800fc0c:	0800fc2b 	.word	0x0800fc2b
 800fc10:	0800fc2b 	.word	0x0800fc2b
 800fc14:	0800fc3b 	.word	0x0800fc3b
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fc18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc1c:	f113 0f07 	cmn.w	r3, #7
 800fc20:	d017      	beq.n	800fc52 <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fc22:	2300      	movs	r3, #0
 800fc24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fc28:	e013      	b.n	800fc52 <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fc2a:	23fe      	movs	r3, #254	; 0xfe
 800fc2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc30:	e010      	b.n	800fc54 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc32:	23fd      	movs	r3, #253	; 0xfd
 800fc34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc38:	e00c      	b.n	800fc54 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fc3a:	23fb      	movs	r3, #251	; 0xfb
 800fc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc40:	e008      	b.n	800fc54 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fc42:	23fa      	movs	r3, #250	; 0xfa
 800fc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc48:	e004      	b.n	800fc54 <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fc4a:	23ff      	movs	r3, #255	; 0xff
 800fc4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc50:	e000      	b.n	800fc54 <LmHandlerSend+0x1a0>
            break;
 800fc52:	bf00      	nop
    }

    return lmhStatus;
 800fc54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc58:	4618      	mov	r0, r3
 800fc5a:	3728      	adds	r7, #40	; 0x28
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	bd80      	pop	{r7, pc}
 800fc60:	200000a8 	.word	0x200000a8
 800fc64:	2000076c 	.word	0x2000076c
 800fc68:	200000b4 	.word	0x200000b4
 800fc6c:	20000780 	.word	0x20000780
 800fc70:	200007c4 	.word	0x200007c4

0800fc74 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b086      	sub	sp, #24
 800fc78:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc7a:	230a      	movs	r3, #10
 800fc7c:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fc7e:	463b      	mov	r3, r7
 800fc80:	4618      	mov	r0, r3
 800fc82:	f005 fa53 	bl	801512c <LoRaMacMlmeRequest>
 800fc86:	4603      	mov	r3, r0
 800fc88:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fc8a:	693b      	ldr	r3, [r7, #16]
 800fc8c:	4a06      	ldr	r2, [pc, #24]	; (800fca8 <LmHandlerDeviceTimeReq+0x34>)
 800fc8e:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fc90:	7dfb      	ldrb	r3, [r7, #23]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d101      	bne.n	800fc9a <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fc96:	2300      	movs	r3, #0
 800fc98:	e001      	b.n	800fc9e <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fc9a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	3718      	adds	r7, #24
 800fca2:	46bd      	mov	sp, r7
 800fca4:	bd80      	pop	{r7, pc}
 800fca6:	bf00      	nop
 800fca8:	200007c4 	.word	0x200007c4

0800fcac <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fcb6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcba:	4618      	mov	r0, r3
 800fcbc:	370c      	adds	r7, #12
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	bc80      	pop	{r7}
 800fcc2:	4770      	bx	lr

0800fcc4 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b08e      	sub	sp, #56	; 0x38
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fcd4:	f001 fede 	bl	8011a94 <LoRaMacIsBusy>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d002      	beq.n	800fce4 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fcde:	f06f 0301 	mvn.w	r3, #1
 800fce2:	e071      	b.n	800fdc8 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fce4:	f7ff feca 	bl	800fa7c <LmHandlerJoinStatus>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d002      	beq.n	800fcf4 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fcee:	f06f 0302 	mvn.w	r3, #2
 800fcf2:	e069      	b.n	800fdc8 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fcf8:	f107 030c 	add.w	r3, r7, #12
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f004 fccb 	bl	8014698 <LoRaMacMibGetRequestConfirm>
 800fd02:	4603      	mov	r3, r0
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd08:	f04f 33ff 	mov.w	r3, #4294967295
 800fd0c:	e05c      	b.n	800fdc8 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fd0e:	7c3b      	ldrb	r3, [r7, #16]
 800fd10:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fd14:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd18:	79fb      	ldrb	r3, [r7, #7]
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d052      	beq.n	800fdc4 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fd1e:	79fb      	ldrb	r3, [r7, #7]
 800fd20:	2b02      	cmp	r3, #2
 800fd22:	d028      	beq.n	800fd76 <LmHandlerRequestClass+0xb2>
 800fd24:	2b02      	cmp	r3, #2
 800fd26:	dc48      	bgt.n	800fdba <LmHandlerRequestClass+0xf6>
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d002      	beq.n	800fd32 <LmHandlerRequestClass+0x6e>
 800fd2c:	2b01      	cmp	r3, #1
 800fd2e:	d01e      	beq.n	800fd6e <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fd30:	e043      	b.n	800fdba <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fd32:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d041      	beq.n	800fdbe <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fd3a:	79fb      	ldrb	r3, [r7, #7]
 800fd3c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd3e:	f107 030c 	add.w	r3, r7, #12
 800fd42:	4618      	mov	r0, r3
 800fd44:	f004 fe5e 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d10b      	bne.n	800fd66 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd4e:	4b20      	ldr	r3, [pc, #128]	; (800fdd0 <LmHandlerRequestClass+0x10c>)
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d032      	beq.n	800fdbe <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd58:	4b1d      	ldr	r3, [pc, #116]	; (800fdd0 <LmHandlerRequestClass+0x10c>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd5e:	79fa      	ldrb	r2, [r7, #7]
 800fd60:	4610      	mov	r0, r2
 800fd62:	4798      	blx	r3
                break;
 800fd64:	e02b      	b.n	800fdbe <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd66:	23ff      	movs	r3, #255	; 0xff
 800fd68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd6c:	e027      	b.n	800fdbe <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fd6e:	23ff      	movs	r3, #255	; 0xff
 800fd70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd74:	e026      	b.n	800fdc4 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fd76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d003      	beq.n	800fd86 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fd7e:	23ff      	movs	r3, #255	; 0xff
 800fd80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd84:	e01d      	b.n	800fdc2 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fd86:	79fb      	ldrb	r3, [r7, #7]
 800fd88:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd8a:	f107 030c 	add.w	r3, r7, #12
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f004 fe38 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
 800fd94:	4603      	mov	r3, r0
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d10b      	bne.n	800fdb2 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd9a:	4b0d      	ldr	r3, [pc, #52]	; (800fdd0 <LmHandlerRequestClass+0x10c>)
 800fd9c:	681b      	ldr	r3, [r3, #0]
 800fd9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d00e      	beq.n	800fdc2 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fda4:	4b0a      	ldr	r3, [pc, #40]	; (800fdd0 <LmHandlerRequestClass+0x10c>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdaa:	79fa      	ldrb	r2, [r7, #7]
 800fdac:	4610      	mov	r0, r2
 800fdae:	4798      	blx	r3
                break;
 800fdb0:	e007      	b.n	800fdc2 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdb2:	23ff      	movs	r3, #255	; 0xff
 800fdb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdb8:	e003      	b.n	800fdc2 <LmHandlerRequestClass+0xfe>
                break;
 800fdba:	bf00      	nop
 800fdbc:	e002      	b.n	800fdc4 <LmHandlerRequestClass+0x100>
                break;
 800fdbe:	bf00      	nop
 800fdc0:	e000      	b.n	800fdc4 <LmHandlerRequestClass+0x100>
                break;
 800fdc2:	bf00      	nop
        }
    }
    return errorStatus;
 800fdc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fdc8:	4618      	mov	r0, r3
 800fdca:	3738      	adds	r7, #56	; 0x38
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}
 800fdd0:	20000798 	.word	0x20000798

0800fdd4 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08c      	sub	sp, #48	; 0x30
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d102      	bne.n	800fde8 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fde2:	f04f 33ff 	mov.w	r3, #4294967295
 800fde6:	e010      	b.n	800fe0a <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fde8:	2300      	movs	r3, #0
 800fdea:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fdec:	f107 0308 	add.w	r3, r7, #8
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f004 fc51 	bl	8014698 <LoRaMacMibGetRequestConfirm>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdfc:	f04f 33ff 	mov.w	r3, #4294967295
 800fe00:	e003      	b.n	800fe0a <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fe02:	7b3a      	ldrb	r2, [r7, #12]
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fe08:	2300      	movs	r3, #0
}
 800fe0a:	4618      	mov	r0, r3
 800fe0c:	3730      	adds	r7, #48	; 0x30
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}
	...

0800fe14 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b08c      	sub	sp, #48	; 0x30
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d102      	bne.n	800fe28 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe22:	f04f 33ff 	mov.w	r3, #4294967295
 800fe26:	e016      	b.n	800fe56 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fe28:	231f      	movs	r3, #31
 800fe2a:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fe2c:	f107 0308 	add.w	r3, r7, #8
 800fe30:	4618      	mov	r0, r3
 800fe32:	f004 fc31 	bl	8014698 <LoRaMacMibGetRequestConfirm>
 800fe36:	4603      	mov	r3, r0
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d002      	beq.n	800fe42 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe3c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe40:	e009      	b.n	800fe56 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fe42:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f993 2000 	ldrsb.w	r2, [r3]
 800fe50:	4b03      	ldr	r3, [pc, #12]	; (800fe60 <LmHandlerGetTxDatarate+0x4c>)
 800fe52:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3730      	adds	r7, #48	; 0x30
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	20000780 	.word	0x20000780

0800fe64 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b08c      	sub	sp, #48	; 0x30
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fe6c:	2322      	movs	r3, #34	; 0x22
 800fe6e:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe74:	f107 0308 	add.w	r3, r7, #8
 800fe78:	4618      	mov	r0, r3
 800fe7a:	f004 fdc3 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d002      	beq.n	800fe8a <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe84:	f04f 33ff 	mov.w	r3, #4294967295
 800fe88:	e000      	b.n	800fe8c <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3730      	adds	r7, #48	; 0x30
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b082      	sub	sp, #8
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800fe9c:	4b18      	ldr	r3, [pc, #96]	; (800ff00 <McpsConfirm+0x6c>)
 800fe9e:	2201      	movs	r2, #1
 800fea0:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	785a      	ldrb	r2, [r3, #1]
 800fea6:	4b16      	ldr	r3, [pc, #88]	; (800ff00 <McpsConfirm+0x6c>)
 800fea8:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	789b      	ldrb	r3, [r3, #2]
 800feae:	b25a      	sxtb	r2, r3
 800feb0:	4b13      	ldr	r3, [pc, #76]	; (800ff00 <McpsConfirm+0x6c>)
 800feb2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	4a11      	ldr	r2, [pc, #68]	; (800ff00 <McpsConfirm+0x6c>)
 800feba:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800fec2:	4b0f      	ldr	r3, [pc, #60]	; (800ff00 <McpsConfirm+0x6c>)
 800fec4:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	4b0c      	ldr	r3, [pc, #48]	; (800ff00 <McpsConfirm+0x6c>)
 800fece:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	791b      	ldrb	r3, [r3, #4]
 800fed4:	461a      	mov	r2, r3
 800fed6:	4b0a      	ldr	r3, [pc, #40]	; (800ff00 <McpsConfirm+0x6c>)
 800fed8:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800feda:	4b0a      	ldr	r3, [pc, #40]	; (800ff04 <McpsConfirm+0x70>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d004      	beq.n	800feee <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fee4:	4b07      	ldr	r3, [pc, #28]	; (800ff04 <McpsConfirm+0x70>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feea:	4805      	ldr	r0, [pc, #20]	; (800ff00 <McpsConfirm+0x6c>)
 800feec:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	2000      	movs	r0, #0
 800fef2:	f000 f9eb 	bl	80102cc <LmHandlerPackagesNotify>
}
 800fef6:	bf00      	nop
 800fef8:	3708      	adds	r7, #8
 800fefa:	46bd      	mov	sp, r7
 800fefc:	bd80      	pop	{r7, pc}
 800fefe:	bf00      	nop
 800ff00:	200000b4 	.word	0x200000b4
 800ff04:	20000798 	.word	0x20000798

0800ff08 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b088      	sub	sp, #32
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ff12:	2300      	movs	r3, #0
 800ff14:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ff16:	4b32      	ldr	r3, [pc, #200]	; (800ffe0 <McpsIndication+0xd8>)
 800ff18:	2201      	movs	r2, #1
 800ff1a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	785a      	ldrb	r2, [r3, #1]
 800ff20:	4b2f      	ldr	r3, [pc, #188]	; (800ffe0 <McpsIndication+0xd8>)
 800ff22:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ff24:	4b2e      	ldr	r3, [pc, #184]	; (800ffe0 <McpsIndication+0xd8>)
 800ff26:	785b      	ldrb	r3, [r3, #1]
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d155      	bne.n	800ffd8 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	791b      	ldrb	r3, [r3, #4]
 800ff30:	b25a      	sxtb	r2, r3
 800ff32:	4b2b      	ldr	r3, [pc, #172]	; (800ffe0 <McpsIndication+0xd8>)
 800ff34:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff3c:	b25a      	sxtb	r2, r3
 800ff3e:	4b28      	ldr	r3, [pc, #160]	; (800ffe0 <McpsIndication+0xd8>)
 800ff40:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ff48:	4b25      	ldr	r3, [pc, #148]	; (800ffe0 <McpsIndication+0xd8>)
 800ff4a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	78da      	ldrb	r2, [r3, #3]
 800ff50:	4b23      	ldr	r3, [pc, #140]	; (800ffe0 <McpsIndication+0xd8>)
 800ff52:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	691b      	ldr	r3, [r3, #16]
 800ff58:	4a21      	ldr	r2, [pc, #132]	; (800ffe0 <McpsIndication+0xd8>)
 800ff5a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	78db      	ldrb	r3, [r3, #3]
 800ff60:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	7b1b      	ldrb	r3, [r3, #12]
 800ff66:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ff6e:	4b1d      	ldr	r3, [pc, #116]	; (800ffe4 <McpsIndication+0xdc>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d007      	beq.n	800ff88 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff78:	4b1a      	ldr	r3, [pc, #104]	; (800ffe4 <McpsIndication+0xdc>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff7e:	f107 0218 	add.w	r2, r7, #24
 800ff82:	4917      	ldr	r1, [pc, #92]	; (800ffe0 <McpsIndication+0xd8>)
 800ff84:	4610      	mov	r0, r2
 800ff86:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ff88:	4b16      	ldr	r3, [pc, #88]	; (800ffe4 <McpsIndication+0xdc>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d007      	beq.n	800ffa2 <McpsIndication+0x9a>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	7e1b      	ldrb	r3, [r3, #24]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d003      	beq.n	800ffa2 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ff9a:	4b12      	ldr	r3, [pc, #72]	; (800ffe4 <McpsIndication+0xdc>)
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa0:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ffa2:	6879      	ldr	r1, [r7, #4]
 800ffa4:	2001      	movs	r0, #1
 800ffa6:	f000 f991 	bl	80102cc <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ffaa:	f107 0317 	add.w	r3, r7, #23
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff ff10 	bl	800fdd4 <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	795b      	ldrb	r3, [r3, #5]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00e      	beq.n	800ffda <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	733b      	strb	r3, [r7, #12]
 800ffc0:	2300      	movs	r3, #0
 800ffc2:	737b      	strb	r3, [r7, #13]
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ffc8:	f107 030c 	add.w	r3, r7, #12
 800ffcc:	2201      	movs	r2, #1
 800ffce:	2100      	movs	r1, #0
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff fd6f 	bl	800fab4 <LmHandlerSend>
 800ffd6:	e000      	b.n	800ffda <McpsIndication+0xd2>
        return;
 800ffd8:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800ffda:	3720      	adds	r7, #32
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	200000d0 	.word	0x200000d0
 800ffe4:	20000798 	.word	0x20000798

0800ffe8 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b08c      	sub	sp, #48	; 0x30
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800fff0:	4b4a      	ldr	r3, [pc, #296]	; (801011c <MlmeConfirm+0x134>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	785a      	ldrb	r2, [r3, #1]
 800fffa:	4b48      	ldr	r3, [pc, #288]	; (801011c <MlmeConfirm+0x134>)
 800fffc:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800fffe:	4b48      	ldr	r3, [pc, #288]	; (8010120 <MlmeConfirm+0x138>)
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010004:	2b00      	cmp	r3, #0
 8010006:	d004      	beq.n	8010012 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8010008:	4b45      	ldr	r3, [pc, #276]	; (8010120 <MlmeConfirm+0x138>)
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801000e:	4843      	ldr	r0, [pc, #268]	; (801011c <MlmeConfirm+0x134>)
 8010010:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 8010012:	6879      	ldr	r1, [r7, #4]
 8010014:	2002      	movs	r0, #2
 8010016:	f000 f959 	bl	80102cc <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	3b01      	subs	r3, #1
 8010020:	2b0c      	cmp	r3, #12
 8010022:	d874      	bhi.n	801010e <MlmeConfirm+0x126>
 8010024:	a201      	add	r2, pc, #4	; (adr r2, 801002c <MlmeConfirm+0x44>)
 8010026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002a:	bf00      	nop
 801002c:	08010061 	.word	0x08010061
 8010030:	0801010f 	.word	0x0801010f
 8010034:	0801010f 	.word	0x0801010f
 8010038:	0801010f 	.word	0x0801010f
 801003c:	080100dd 	.word	0x080100dd
 8010040:	0801010f 	.word	0x0801010f
 8010044:	0801010f 	.word	0x0801010f
 8010048:	0801010f 	.word	0x0801010f
 801004c:	0801010f 	.word	0x0801010f
 8010050:	0801010f 	.word	0x0801010f
 8010054:	0801010f 	.word	0x0801010f
 8010058:	080100f5 	.word	0x080100f5
 801005c:	0801010f 	.word	0x0801010f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8010060:	2306      	movs	r3, #6
 8010062:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8010064:	f107 0308 	add.w	r3, r7, #8
 8010068:	4618      	mov	r0, r3
 801006a:	f004 fb15 	bl	8014698 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 801006e:	4b2d      	ldr	r3, [pc, #180]	; (8010124 <MlmeConfirm+0x13c>)
 8010070:	79db      	ldrb	r3, [r3, #7]
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	4611      	mov	r1, r2
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff faf6 	bl	800f668 <SecureElementSetDevAddr>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	4a28      	ldr	r2, [pc, #160]	; (8010128 <MlmeConfirm+0x140>)
 8010086:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8010088:	4828      	ldr	r0, [pc, #160]	; (801012c <MlmeConfirm+0x144>)
 801008a:	f7ff fec3 	bl	800fe14 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 801008e:	4828      	ldr	r0, [pc, #160]	; (8010130 <MlmeConfirm+0x148>)
 8010090:	f000 fa4e 	bl	8010530 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8010094:	4b21      	ldr	r3, [pc, #132]	; (801011c <MlmeConfirm+0x134>)
 8010096:	785b      	ldrb	r3, [r3, #1]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d108      	bne.n	80100ae <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 801009c:	4b21      	ldr	r3, [pc, #132]	; (8010124 <MlmeConfirm+0x13c>)
 801009e:	2200      	movs	r2, #0
 80100a0:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80100a2:	4b24      	ldr	r3, [pc, #144]	; (8010134 <MlmeConfirm+0x14c>)
 80100a4:	785b      	ldrb	r3, [r3, #1]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff fe0c 	bl	800fcc4 <LmHandlerRequestClass>
 80100ac:	e002      	b.n	80100b4 <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80100ae:	4b1d      	ldr	r3, [pc, #116]	; (8010124 <MlmeConfirm+0x13c>)
 80100b0:	22ff      	movs	r2, #255	; 0xff
 80100b2:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80100b4:	4b1a      	ldr	r3, [pc, #104]	; (8010120 <MlmeConfirm+0x138>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d004      	beq.n	80100c8 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80100be:	4b18      	ldr	r3, [pc, #96]	; (8010120 <MlmeConfirm+0x138>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c4:	4817      	ldr	r0, [pc, #92]	; (8010124 <MlmeConfirm+0x13c>)
 80100c6:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100c8:	4b14      	ldr	r3, [pc, #80]	; (801011c <MlmeConfirm+0x134>)
 80100ca:	785b      	ldrb	r3, [r3, #1]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d120      	bne.n	8010112 <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80100d0:	4b14      	ldr	r3, [pc, #80]	; (8010124 <MlmeConfirm+0x13c>)
 80100d2:	79db      	ldrb	r3, [r3, #7]
 80100d4:	4618      	mov	r0, r3
 80100d6:	f7ff f859 	bl	800f18c <SecureElementPrintSessionKeys>
                }
            }
            break;
 80100da:	e01a      	b.n	8010112 <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 80100dc:	4b16      	ldr	r3, [pc, #88]	; (8010138 <MlmeConfirm+0x150>)
 80100de:	2201      	movs	r2, #1
 80100e0:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	7a1a      	ldrb	r2, [r3, #8]
 80100e6:	4b14      	ldr	r3, [pc, #80]	; (8010138 <MlmeConfirm+0x150>)
 80100e8:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	7a5a      	ldrb	r2, [r3, #9]
 80100ee:	4b12      	ldr	r3, [pc, #72]	; (8010138 <MlmeConfirm+0x150>)
 80100f0:	74da      	strb	r2, [r3, #19]
            }
            break;
 80100f2:	e00f      	b.n	8010114 <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	785b      	ldrb	r3, [r3, #1]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d105      	bne.n	8010108 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 80100fc:	4b0d      	ldr	r3, [pc, #52]	; (8010134 <MlmeConfirm+0x14c>)
 80100fe:	7c1b      	ldrb	r3, [r3, #16]
 8010100:	4618      	mov	r0, r3
 8010102:	f7ff fdd3 	bl	800fcac <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 8010106:	e005      	b.n	8010114 <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 8010108:	f7ff fdb4 	bl	800fc74 <LmHandlerDeviceTimeReq>
            break;
 801010c:	e002      	b.n	8010114 <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 801010e:	bf00      	nop
 8010110:	e000      	b.n	8010114 <MlmeConfirm+0x12c>
            break;
 8010112:	bf00      	nop
    }
}
 8010114:	bf00      	nop
 8010116:	3730      	adds	r7, #48	; 0x30
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	200000b4 	.word	0x200000b4
 8010120:	20000798 	.word	0x20000798
 8010124:	200000a8 	.word	0x200000a8
 8010128:	20000754 	.word	0x20000754
 801012c:	200000ac 	.word	0x200000ac
 8010130:	200000ad 	.word	0x200000ad
 8010134:	20000780 	.word	0x20000780
 8010138:	200000d0 	.word	0x200000d0

0801013c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	6078      	str	r0, [r7, #4]
 8010144:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 8010146:	4b20      	ldr	r3, [pc, #128]	; (80101c8 <MlmeIndication+0x8c>)
 8010148:	2200      	movs	r2, #0
 801014a:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	785a      	ldrb	r2, [r3, #1]
 8010150:	4b1d      	ldr	r3, [pc, #116]	; (80101c8 <MlmeIndication+0x8c>)
 8010152:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	789b      	ldrb	r3, [r3, #2]
 8010158:	b25a      	sxtb	r2, r3
 801015a:	4b1b      	ldr	r3, [pc, #108]	; (80101c8 <MlmeIndication+0x8c>)
 801015c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010164:	b25a      	sxtb	r2, r3
 8010166:	4b18      	ldr	r3, [pc, #96]	; (80101c8 <MlmeIndication+0x8c>)
 8010168:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010170:	4b15      	ldr	r3, [pc, #84]	; (80101c8 <MlmeIndication+0x8c>)
 8010172:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	78da      	ldrb	r2, [r3, #3]
 8010178:	4b13      	ldr	r3, [pc, #76]	; (80101c8 <MlmeIndication+0x8c>)
 801017a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	4a11      	ldr	r2, [pc, #68]	; (80101c8 <MlmeIndication+0x8c>)
 8010182:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 8010184:	4b11      	ldr	r3, [pc, #68]	; (80101cc <MlmeIndication+0x90>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00d      	beq.n	80101aa <MlmeIndication+0x6e>
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	2b0b      	cmp	r3, #11
 8010194:	d009      	beq.n	80101aa <MlmeIndication+0x6e>
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	781b      	ldrb	r3, [r3, #0]
 801019a:	2b0f      	cmp	r3, #15
 801019c:	d005      	beq.n	80101aa <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <MlmeIndication+0x90>)
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a4:	4908      	ldr	r1, [pc, #32]	; (80101c8 <MlmeIndication+0x8c>)
 80101a6:	2000      	movs	r0, #0
 80101a8:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80101aa:	6879      	ldr	r1, [r7, #4]
 80101ac:	2003      	movs	r0, #3
 80101ae:	f000 f88d 	bl	80102cc <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	781b      	ldrb	r3, [r3, #0]
 80101b6:	2b0b      	cmp	r3, #11
 80101b8:	d001      	beq.n	80101be <MlmeIndication+0x82>
 80101ba:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80101bc:	e000      	b.n	80101c0 <MlmeIndication+0x84>
            break;
 80101be:	bf00      	nop
    }
}
 80101c0:	bf00      	nop
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}
 80101c8:	200000d0 	.word	0x200000d0
 80101cc:	20000798 	.word	0x20000798

080101d0 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	4603      	mov	r3, r0
 80101d8:	6039      	str	r1, [r7, #0]
 80101da:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 80101dc:	2300      	movs	r3, #0
 80101de:	60fb      	str	r3, [r7, #12]
    switch( id )
 80101e0:	79fb      	ldrb	r3, [r7, #7]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d104      	bne.n	80101f0 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 80101e6:	f000 f9dd 	bl	80105a4 <LmhpCompliancePackageFactory>
 80101ea:	4603      	mov	r3, r0
 80101ec:	60fb      	str	r3, [r7, #12]
                break;
 80101ee:	e00d      	b.n	801020c <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 80101f0:	f107 020c 	add.w	r2, r7, #12
 80101f4:	79fb      	ldrb	r3, [r7, #7]
 80101f6:	4611      	mov	r1, r2
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 fce9 	bl	8010bd0 <LmhpPackagesRegister>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d002      	beq.n	801020a <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 8010204:	f04f 33ff 	mov.w	r3, #4294967295
 8010208:	e031      	b.n	801026e <LmHandlerPackageRegister+0x9e>
                }
                break;
 801020a:	bf00      	nop
            }
    }
    if( package != NULL )
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d02b      	beq.n	801026a <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 8010212:	79fb      	ldrb	r3, [r7, #7]
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	4918      	ldr	r1, [pc, #96]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 8010218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	4a16      	ldr	r2, [pc, #88]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 8010220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010224:	4a15      	ldr	r2, [pc, #84]	; (801027c <LmHandlerPackageRegister+0xac>)
 8010226:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8010228:	79fb      	ldrb	r3, [r7, #7]
 801022a:	4a13      	ldr	r2, [pc, #76]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 801022c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010230:	4a13      	ldr	r2, [pc, #76]	; (8010280 <LmHandlerPackageRegister+0xb0>)
 8010232:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	4a10      	ldr	r2, [pc, #64]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 8010238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801023c:	4a11      	ldr	r2, [pc, #68]	; (8010284 <LmHandlerPackageRegister+0xb4>)
 801023e:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010240:	4b11      	ldr	r3, [pc, #68]	; (8010288 <LmHandlerPackageRegister+0xb8>)
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	79fb      	ldrb	r3, [r7, #7]
 8010246:	490c      	ldr	r1, [pc, #48]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 8010248:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801024c:	6992      	ldr	r2, [r2, #24]
 801024e:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	4a09      	ldr	r2, [pc, #36]	; (8010278 <LmHandlerPackageRegister+0xa8>)
 8010254:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010258:	685b      	ldr	r3, [r3, #4]
 801025a:	4a0c      	ldr	r2, [pc, #48]	; (801028c <LmHandlerPackageRegister+0xbc>)
 801025c:	6851      	ldr	r1, [r2, #4]
 801025e:	4a0b      	ldr	r2, [pc, #44]	; (801028c <LmHandlerPackageRegister+0xbc>)
 8010260:	7852      	ldrb	r2, [r2, #1]
 8010262:	6838      	ldr	r0, [r7, #0]
 8010264:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 8010266:	2300      	movs	r3, #0
 8010268:	e001      	b.n	801026e <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 801026a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 801026e:	4618      	mov	r0, r3
 8010270:	3710      	adds	r7, #16
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	2000076c 	.word	0x2000076c
 801027c:	0800f935 	.word	0x0800f935
 8010280:	0800fab5 	.word	0x0800fab5
 8010284:	0800fc75 	.word	0x0800fc75
 8010288:	20000798 	.word	0x20000798
 801028c:	200000e4 	.word	0x200000e4

08010290 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b082      	sub	sp, #8
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 801029a:	79fb      	ldrb	r3, [r7, #7]
 801029c:	2b04      	cmp	r3, #4
 801029e:	d80e      	bhi.n	80102be <LmHandlerPackageIsInitialized+0x2e>
 80102a0:	79fb      	ldrb	r3, [r7, #7]
 80102a2:	4a09      	ldr	r2, [pc, #36]	; (80102c8 <LmHandlerPackageIsInitialized+0x38>)
 80102a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d007      	beq.n	80102be <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80102ae:	79fb      	ldrb	r3, [r7, #7]
 80102b0:	4a05      	ldr	r2, [pc, #20]	; (80102c8 <LmHandlerPackageIsInitialized+0x38>)
 80102b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	4798      	blx	r3
 80102ba:	4603      	mov	r3, r0
 80102bc:	e000      	b.n	80102c0 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80102be:	2300      	movs	r3, #0
    }
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3708      	adds	r7, #8
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	2000076c 	.word	0x2000076c

080102cc <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	6039      	str	r1, [r7, #0]
 80102d6:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80102d8:	2300      	movs	r3, #0
 80102da:	73fb      	strb	r3, [r7, #15]
 80102dc:	e07c      	b.n	80103d8 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 80102de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102e2:	4a42      	ldr	r2, [pc, #264]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 80102e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d06f      	beq.n	80103cc <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 80102ec:	79fb      	ldrb	r3, [r7, #7]
 80102ee:	2b03      	cmp	r3, #3
 80102f0:	d863      	bhi.n	80103ba <LmHandlerPackagesNotify+0xee>
 80102f2:	a201      	add	r2, pc, #4	; (adr r2, 80102f8 <LmHandlerPackagesNotify+0x2c>)
 80102f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102f8:	08010309 	.word	0x08010309
 80102fc:	0801032b 	.word	0x0801032b
 8010300:	08010377 	.word	0x08010377
 8010304:	08010399 	.word	0x08010399
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8010308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801030c:	4a37      	ldr	r2, [pc, #220]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801030e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010312:	69db      	ldr	r3, [r3, #28]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d052      	beq.n	80103be <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8010318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801031c:	4a33      	ldr	r2, [pc, #204]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801031e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010322:	69db      	ldr	r3, [r3, #28]
 8010324:	6838      	ldr	r0, [r7, #0]
 8010326:	4798      	blx	r3
                        }
                        break;
 8010328:	e049      	b.n	80103be <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801032a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801032e:	4a2f      	ldr	r2, [pc, #188]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 8010330:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010334:	6a1b      	ldr	r3, [r3, #32]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d043      	beq.n	80103c2 <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 801033a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801033e:	4a2b      	ldr	r2, [pc, #172]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 8010340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010344:	781a      	ldrb	r2, [r3, #0]
 8010346:	683b      	ldr	r3, [r7, #0]
 8010348:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 801034a:	429a      	cmp	r2, r3
 801034c:	d00a      	beq.n	8010364 <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 801034e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d135      	bne.n	80103c2 <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 8010356:	4b25      	ldr	r3, [pc, #148]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	4798      	blx	r3
 801035e:	4603      	mov	r3, r0
 8010360:	2b00      	cmp	r3, #0
 8010362:	d02e      	beq.n	80103c2 <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8010364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010368:	4a20      	ldr	r2, [pc, #128]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801036a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801036e:	6a1b      	ldr	r3, [r3, #32]
 8010370:	6838      	ldr	r0, [r7, #0]
 8010372:	4798      	blx	r3
                        }
                        break;
 8010374:	e025      	b.n	80103c2 <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 8010376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801037a:	4a1c      	ldr	r2, [pc, #112]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801037c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	d01f      	beq.n	80103c6 <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8010386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801038a:	4a18      	ldr	r2, [pc, #96]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801038c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010392:	6838      	ldr	r0, [r7, #0]
 8010394:	4798      	blx	r3
                        }
                        break;
 8010396:	e016      	b.n	80103c6 <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8010398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801039c:	4a13      	ldr	r2, [pc, #76]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 801039e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d010      	beq.n	80103ca <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80103a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ac:	4a0f      	ldr	r2, [pc, #60]	; (80103ec <LmHandlerPackagesNotify+0x120>)
 80103ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103b4:	6838      	ldr	r0, [r7, #0]
 80103b6:	4798      	blx	r3
                        }
                        break;
 80103b8:	e007      	b.n	80103ca <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80103ba:	bf00      	nop
 80103bc:	e006      	b.n	80103cc <LmHandlerPackagesNotify+0x100>
                        break;
 80103be:	bf00      	nop
 80103c0:	e004      	b.n	80103cc <LmHandlerPackagesNotify+0x100>
                        break;
 80103c2:	bf00      	nop
 80103c4:	e002      	b.n	80103cc <LmHandlerPackagesNotify+0x100>
                        break;
 80103c6:	bf00      	nop
 80103c8:	e000      	b.n	80103cc <LmHandlerPackagesNotify+0x100>
                        break;
 80103ca:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	3301      	adds	r3, #1
 80103d4:	b2db      	uxtb	r3, r3
 80103d6:	73fb      	strb	r3, [r7, #15]
 80103d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103dc:	2b04      	cmp	r3, #4
 80103de:	f77f af7e 	ble.w	80102de <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80103e2:	bf00      	nop
 80103e4:	bf00      	nop
 80103e6:	3710      	adds	r7, #16
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	2000076c 	.word	0x2000076c

080103f0 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b082      	sub	sp, #8
 80103f4:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103f6:	2300      	movs	r3, #0
 80103f8:	71fb      	strb	r3, [r7, #7]
 80103fa:	e01c      	b.n	8010436 <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 80103fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010400:	4a11      	ldr	r2, [pc, #68]	; (8010448 <LmHandlerPackageIsTxPending+0x58>)
 8010402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d00f      	beq.n	801042a <LmHandlerPackageIsTxPending+0x3a>
 801040a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00b      	beq.n	801042a <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 8010412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010416:	4a0c      	ldr	r2, [pc, #48]	; (8010448 <LmHandlerPackageIsTxPending+0x58>)
 8010418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041c:	691b      	ldr	r3, [r3, #16]
 801041e:	4798      	blx	r3
 8010420:	4603      	mov	r3, r0
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 8010426:	2301      	movs	r3, #1
 8010428:	e00a      	b.n	8010440 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801042e:	b2db      	uxtb	r3, r3
 8010430:	3301      	adds	r3, #1
 8010432:	b2db      	uxtb	r3, r3
 8010434:	71fb      	strb	r3, [r7, #7]
 8010436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801043a:	2b04      	cmp	r3, #4
 801043c:	ddde      	ble.n	80103fc <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 801043e:	2300      	movs	r3, #0
}
 8010440:	4618      	mov	r0, r3
 8010442:	3708      	adds	r7, #8
 8010444:	46bd      	mov	sp, r7
 8010446:	bd80      	pop	{r7, pc}
 8010448:	2000076c 	.word	0x2000076c

0801044c <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010452:	2300      	movs	r3, #0
 8010454:	71fb      	strb	r3, [r7, #7]
 8010456:	e022      	b.n	801049e <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801045c:	4a14      	ldr	r2, [pc, #80]	; (80104b0 <LmHandlerPackagesProcess+0x64>)
 801045e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d015      	beq.n	8010492 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801046a:	4a11      	ldr	r2, [pc, #68]	; (80104b0 <LmHandlerPackagesProcess+0x64>)
 801046c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010470:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010472:	2b00      	cmp	r3, #0
 8010474:	d00d      	beq.n	8010492 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff ff09 	bl	8010290 <LmHandlerPackageIsInitialized>
 801047e:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010480:	2b00      	cmp	r3, #0
 8010482:	d006      	beq.n	8010492 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 8010484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <LmHandlerPackagesProcess+0x64>)
 801048a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801048e:	695b      	ldr	r3, [r3, #20]
 8010490:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010496:	b2db      	uxtb	r3, r3
 8010498:	3301      	adds	r3, #1
 801049a:	b2db      	uxtb	r3, r3
 801049c:	71fb      	strb	r3, [r7, #7]
 801049e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104a2:	2b04      	cmp	r3, #4
 80104a4:	ddd8      	ble.n	8010458 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80104a6:	bf00      	nop
 80104a8:	bf00      	nop
 80104aa:	3708      	adds	r7, #8
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}
 80104b0:	2000076c 	.word	0x2000076c

080104b4 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	4603      	mov	r3, r0
 80104bc:	6039      	str	r1, [r7, #0]
 80104be:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d102      	bne.n	80104cc <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 80104c6:	f04f 33ff 	mov.w	r3, #4294967295
 80104ca:	e00e      	b.n	80104ea <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 80104cc:	79fb      	ldrb	r3, [r7, #7]
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <LmHandlerGetVersion+0x24>
 80104d2:	2b01      	cmp	r3, #1
 80104d4:	d004      	beq.n	80104e0 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 80104d6:	e007      	b.n	80104e8 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	4a06      	ldr	r2, [pc, #24]	; (80104f4 <LmHandlerGetVersion+0x40>)
 80104dc:	601a      	str	r2, [r3, #0]
            break;
 80104de:	e003      	b.n	80104e8 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	4a05      	ldr	r2, [pc, #20]	; (80104f8 <LmHandlerGetVersion+0x44>)
 80104e4:	601a      	str	r2, [r3, #0]
            break;
 80104e6:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 80104e8:	2300      	movs	r3, #0
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	370c      	adds	r7, #12
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bc80      	pop	{r7}
 80104f2:	4770      	bx	lr
 80104f4:	01000300 	.word	0x01000300
 80104f8:	01010003 	.word	0x01010003

080104fc <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010500:	f005 f882 	bl	8015608 <LoRaMacDeInitialization>
 8010504:	4603      	mov	r3, r0
 8010506:	2b00      	cmp	r3, #0
 8010508:	d101      	bne.n	801050e <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801050a:	2300      	movs	r3, #0
 801050c:	e001      	b.n	8010512 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 801050e:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010512:	4618      	mov	r0, r3
 8010514:	bd80      	pop	{r7, pc}

08010516 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8010516:	b580      	push	{r7, lr}
 8010518:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 801051a:	f004 f80d 	bl	8014538 <LoRaMacHalt>
 801051e:	4603      	mov	r3, r0
 8010520:	2b00      	cmp	r3, #0
 8010522:	d101      	bne.n	8010528 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010524:	2300      	movs	r3, #0
 8010526:	e001      	b.n	801052c <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010528:	f06f 0301 	mvn.w	r3, #1
    }
}
 801052c:	4618      	mov	r0, r3
 801052e:	bd80      	pop	{r7, pc}

08010530 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010530:	b580      	push	{r7, lr}
 8010532:	b08c      	sub	sp, #48	; 0x30
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d102      	bne.n	8010544 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 801053e:	f04f 33ff 	mov.w	r3, #4294967295
 8010542:	e016      	b.n	8010572 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8010544:	2320      	movs	r3, #32
 8010546:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010548:	f107 0308 	add.w	r3, r7, #8
 801054c:	4618      	mov	r0, r3
 801054e:	f004 f8a3 	bl	8014698 <LoRaMacMibGetRequestConfirm>
 8010552:	4603      	mov	r3, r0
 8010554:	2b00      	cmp	r3, #0
 8010556:	d002      	beq.n	801055e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010558:	f04f 33ff 	mov.w	r3, #4294967295
 801055c:	e009      	b.n	8010572 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 801055e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f993 2000 	ldrsb.w	r2, [r3]
 801056c:	4b03      	ldr	r3, [pc, #12]	; (801057c <LmHandlerGetTxPower+0x4c>)
 801056e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3730      	adds	r7, #48	; 0x30
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	20000780 	.word	0x20000780

08010580 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010580:	b480      	push	{r7}
 8010582:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 8010584:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8010588:	4618      	mov	r0, r3
 801058a:	46bd      	mov	sp, r7
 801058c:	bc80      	pop	{r7}
 801058e:	4770      	bx	lr

08010590 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 8010590:	b480      	push	{r7}
 8010592:	b083      	sub	sp, #12
 8010594:	af00      	add	r7, sp, #0
 8010596:	4603      	mov	r3, r0
 8010598:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 801059a:	bf00      	nop
 801059c:	370c      	adds	r7, #12
 801059e:	46bd      	mov	sp, r7
 80105a0:	bc80      	pop	{r7}
 80105a2:	4770      	bx	lr

080105a4 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80105a4:	b480      	push	{r7}
 80105a6:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80105a8:	4b02      	ldr	r3, [pc, #8]	; (80105b4 <LmhpCompliancePackageFactory+0x10>)
}
 80105aa:	4618      	mov	r0, r3
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bc80      	pop	{r7}
 80105b0:	4770      	bx	lr
 80105b2:	bf00      	nop
 80105b4:	200000ec 	.word	0x200000ec

080105b8 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80105b8:	b480      	push	{r7}
 80105ba:	b085      	sub	sp, #20
 80105bc:	af00      	add	r7, sp, #0
 80105be:	60f8      	str	r0, [r7, #12]
 80105c0:	60b9      	str	r1, [r7, #8]
 80105c2:	4613      	mov	r3, r2
 80105c4:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80105c6:	68fb      	ldr	r3, [r7, #12]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d00f      	beq.n	80105ec <LmhpComplianceInit+0x34>
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00c      	beq.n	80105ec <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 80105d2:	4a0c      	ldr	r2, [pc, #48]	; (8010604 <LmhpComplianceInit+0x4c>)
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80105d8:	4a0b      	ldr	r2, [pc, #44]	; (8010608 <LmhpComplianceInit+0x50>)
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80105de:	4a0a      	ldr	r2, [pc, #40]	; (8010608 <LmhpComplianceInit+0x50>)
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80105e4:	4b08      	ldr	r3, [pc, #32]	; (8010608 <LmhpComplianceInit+0x50>)
 80105e6:	2201      	movs	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]
 80105ea:	e006      	b.n	80105fa <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 80105ec:	4b05      	ldr	r3, [pc, #20]	; (8010604 <LmhpComplianceInit+0x4c>)
 80105ee:	2200      	movs	r2, #0
 80105f0:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 80105f2:	4b05      	ldr	r3, [pc, #20]	; (8010608 <LmhpComplianceInit+0x50>)
 80105f4:	2200      	movs	r2, #0
 80105f6:	701a      	strb	r2, [r3, #0]
    }
}
 80105f8:	bf00      	nop
 80105fa:	bf00      	nop
 80105fc:	3714      	adds	r7, #20
 80105fe:	46bd      	mov	sp, r7
 8010600:	bc80      	pop	{r7}
 8010602:	4770      	bx	lr
 8010604:	200008e8 	.word	0x200008e8
 8010608:	200008d4 	.word	0x200008d4

0801060c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 801060c:	b480      	push	{r7}
 801060e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010610:	4b02      	ldr	r3, [pc, #8]	; (801061c <LmhpComplianceIsInitialized+0x10>)
 8010612:	781b      	ldrb	r3, [r3, #0]
}
 8010614:	4618      	mov	r0, r3
 8010616:	46bd      	mov	sp, r7
 8010618:	bc80      	pop	{r7}
 801061a:	4770      	bx	lr
 801061c:	200008d4 	.word	0x200008d4

08010620 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010620:	b480      	push	{r7}
 8010622:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 8010624:	4b07      	ldr	r3, [pc, #28]	; (8010644 <LmhpComplianceIsRunning+0x24>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f083 0301 	eor.w	r3, r3, #1
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b00      	cmp	r3, #0
 8010630:	d001      	beq.n	8010636 <LmhpComplianceIsRunning+0x16>
    {
        return false;
 8010632:	2300      	movs	r3, #0
 8010634:	e001      	b.n	801063a <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 8010636:	4b03      	ldr	r3, [pc, #12]	; (8010644 <LmhpComplianceIsRunning+0x24>)
 8010638:	785b      	ldrb	r3, [r3, #1]
}
 801063a:	4618      	mov	r0, r3
 801063c:	46bd      	mov	sp, r7
 801063e:	bc80      	pop	{r7}
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop
 8010644:	200008d4 	.word	0x200008d4

08010648 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010650:	4b0f      	ldr	r3, [pc, #60]	; (8010690 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	f083 0301 	eor.w	r3, r3, #1
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b00      	cmp	r3, #0
 801065c:	d112      	bne.n	8010684 <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 801065e:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010660:	785b      	ldrb	r3, [r3, #1]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d00f      	beq.n	8010686 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 801066a:	2b01      	cmp	r3, #1
 801066c:	d10b      	bne.n	8010686 <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 8010672:	2b00      	cmp	r3, #0
 8010674:	d007      	beq.n	8010686 <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010676:	4b06      	ldr	r3, [pc, #24]	; (8010690 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010678:	899b      	ldrh	r3, [r3, #12]
 801067a:	3301      	adds	r3, #1
 801067c:	b29a      	uxth	r2, r3
 801067e:	4b04      	ldr	r3, [pc, #16]	; (8010690 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010680:	819a      	strh	r2, [r3, #12]
 8010682:	e000      	b.n	8010686 <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 8010684:	bf00      	nop
    }
}
 8010686:	370c      	adds	r7, #12
 8010688:	46bd      	mov	sp, r7
 801068a:	bc80      	pop	{r7}
 801068c:	4770      	bx	lr
 801068e:	bf00      	nop
 8010690:	200008d4 	.word	0x200008d4

08010694 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010694:	b480      	push	{r7}
 8010696:	b083      	sub	sp, #12
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 801069c:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 801069e:	781b      	ldrb	r3, [r3, #0]
 80106a0:	f083 0301 	eor.w	r3, r3, #1
 80106a4:	b2db      	uxtb	r3, r3
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d116      	bne.n	80106d8 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80106aa:	4b0f      	ldr	r3, [pc, #60]	; (80106e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106ac:	785b      	ldrb	r3, [r3, #1]
 80106ae:	f083 0301 	eor.w	r3, r3, #1
 80106b2:	b2db      	uxtb	r3, r3
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d111      	bne.n	80106dc <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b05      	cmp	r3, #5
 80106be:	d10e      	bne.n	80106de <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80106c0:	4b09      	ldr	r3, [pc, #36]	; (80106e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106c2:	2201      	movs	r2, #1
 80106c4:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	7a1a      	ldrb	r2, [r3, #8]
 80106ca:	4b07      	ldr	r3, [pc, #28]	; (80106e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106cc:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	7a5a      	ldrb	r2, [r3, #9]
 80106d2:	4b05      	ldr	r3, [pc, #20]	; (80106e8 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106d4:	741a      	strb	r2, [r3, #16]
 80106d6:	e002      	b.n	80106de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106d8:	bf00      	nop
 80106da:	e000      	b.n	80106de <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106dc:	bf00      	nop
    }
}
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bc80      	pop	{r7}
 80106e4:	4770      	bx	lr
 80106e6:	bf00      	nop
 80106e8:	200008d4 	.word	0x200008d4

080106ec <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 80106f2:	4b36      	ldr	r3, [pc, #216]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	f083 0301 	eor.w	r3, r3, #1
 80106fa:	b2db      	uxtb	r3, r3
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010700:	f04f 33ff 	mov.w	r3, #4294967295
 8010704:	e05e      	b.n	80107c4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 8010706:	4b31      	ldr	r3, [pc, #196]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010708:	785b      	ldrb	r3, [r3, #1]
 801070a:	f083 0301 	eor.w	r3, r3, #1
 801070e:	b2db      	uxtb	r3, r3
 8010710:	2b00      	cmp	r3, #0
 8010712:	d001      	beq.n	8010718 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010714:	2300      	movs	r3, #0
 8010716:	e055      	b.n	80107c4 <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 8010718:	4b2c      	ldr	r3, [pc, #176]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801071a:	7b9b      	ldrb	r3, [r3, #14]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d019      	beq.n	8010754 <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010720:	4b2a      	ldr	r3, [pc, #168]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010722:	2200      	movs	r2, #0
 8010724:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 8010726:	4b29      	ldr	r3, [pc, #164]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010728:	2203      	movs	r2, #3
 801072a:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 801072c:	4b27      	ldr	r3, [pc, #156]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801072e:	689b      	ldr	r3, [r3, #8]
 8010730:	2205      	movs	r2, #5
 8010732:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8010734:	4b25      	ldr	r3, [pc, #148]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010736:	689b      	ldr	r3, [r3, #8]
 8010738:	3301      	adds	r3, #1
 801073a:	4a24      	ldr	r2, [pc, #144]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801073c:	7bd2      	ldrb	r2, [r2, #15]
 801073e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010740:	4b22      	ldr	r3, [pc, #136]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010742:	689b      	ldr	r3, [r3, #8]
 8010744:	3302      	adds	r3, #2
 8010746:	4a21      	ldr	r2, [pc, #132]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010748:	7c12      	ldrb	r2, [r2, #16]
 801074a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 801074c:	4b1f      	ldr	r3, [pc, #124]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801074e:	2201      	movs	r2, #1
 8010750:	709a      	strb	r2, [r3, #2]
 8010752:	e01c      	b.n	801078e <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 8010754:	4b1d      	ldr	r3, [pc, #116]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010756:	789b      	ldrb	r3, [r3, #2]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d005      	beq.n	8010768 <LmhpComplianceTxProcess+0x7c>
 801075c:	2b04      	cmp	r3, #4
 801075e:	d116      	bne.n	801078e <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8010760:	4b1a      	ldr	r3, [pc, #104]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010762:	2201      	movs	r2, #1
 8010764:	709a      	strb	r2, [r3, #2]
                break;
 8010766:	e012      	b.n	801078e <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8010768:	4b18      	ldr	r3, [pc, #96]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801076a:	2202      	movs	r2, #2
 801076c:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 801076e:	4b17      	ldr	r3, [pc, #92]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010770:	899b      	ldrh	r3, [r3, #12]
 8010772:	0a1b      	lsrs	r3, r3, #8
 8010774:	b29a      	uxth	r2, r3
 8010776:	4b15      	ldr	r3, [pc, #84]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010778:	689b      	ldr	r3, [r3, #8]
 801077a:	b2d2      	uxtb	r2, r2
 801077c:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 801077e:	4b13      	ldr	r3, [pc, #76]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010780:	899a      	ldrh	r2, [r3, #12]
 8010782:	4b12      	ldr	r3, [pc, #72]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	3301      	adds	r3, #1
 8010788:	b2d2      	uxtb	r2, r2
 801078a:	701a      	strb	r2, [r3, #0]
                break;
 801078c:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 801078e:	23e0      	movs	r3, #224	; 0xe0
 8010790:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 8010792:	4b0e      	ldr	r3, [pc, #56]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 8010794:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 8010796:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 8010798:	4b0c      	ldr	r3, [pc, #48]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 801079a:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 801079c:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 801079e:	480c      	ldr	r0, [pc, #48]	; (80107d0 <LmhpComplianceTxProcess+0xe4>)
 80107a0:	f00d fc5a 	bl	801e058 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80107a4:	4b0b      	ldr	r3, [pc, #44]	; (80107d4 <LmhpComplianceTxProcess+0xe8>)
 80107a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d102      	bne.n	80107b2 <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 80107ac:	f04f 33ff 	mov.w	r3, #4294967295
 80107b0:	e008      	b.n	80107c4 <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80107b2:	4b08      	ldr	r3, [pc, #32]	; (80107d4 <LmhpComplianceTxProcess+0xe8>)
 80107b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107b6:	4a05      	ldr	r2, [pc, #20]	; (80107cc <LmhpComplianceTxProcess+0xe0>)
 80107b8:	78d2      	ldrb	r2, [r2, #3]
 80107ba:	4611      	mov	r1, r2
 80107bc:	4638      	mov	r0, r7
 80107be:	2201      	movs	r2, #1
 80107c0:	4798      	blx	r3
 80107c2:	4603      	mov	r3, r0
}
 80107c4:	4618      	mov	r0, r3
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}
 80107cc:	200008d4 	.word	0x200008d4
 80107d0:	200008bc 	.word	0x200008bc
 80107d4:	200000ec 	.word	0x200000ec

080107d8 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b0a4      	sub	sp, #144	; 0x90
 80107dc:	af02      	add	r7, sp, #8
 80107de:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80107e0:	4ba5      	ldr	r3, [pc, #660]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107e2:	781b      	ldrb	r3, [r3, #0]
 80107e4:	f083 0301 	eor.w	r3, r3, #1
 80107e8:	b2db      	uxtb	r3, r3
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f040 81c6 	bne.w	8010b7c <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	7b5b      	ldrb	r3, [r3, #13]
 80107f4:	f083 0301 	eor.w	r3, r3, #1
 80107f8:	b2db      	uxtb	r3, r3
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f040 81c0 	bne.w	8010b80 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010800:	4b9d      	ldr	r3, [pc, #628]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010802:	785b      	ldrb	r3, [r3, #1]
 8010804:	2b00      	cmp	r3, #0
 8010806:	d00c      	beq.n	8010822 <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	7b9b      	ldrb	r3, [r3, #14]
 801080c:	f083 0301 	eor.w	r3, r3, #1
 8010810:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010812:	2b00      	cmp	r3, #0
 8010814:	d005      	beq.n	8010822 <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 8010816:	4b98      	ldr	r3, [pc, #608]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010818:	899b      	ldrh	r3, [r3, #12]
 801081a:	3301      	adds	r3, #1
 801081c:	b29a      	uxth	r2, r3
 801081e:	4b96      	ldr	r3, [pc, #600]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010820:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	78db      	ldrb	r3, [r3, #3]
 8010826:	2be0      	cmp	r3, #224	; 0xe0
 8010828:	f040 81ac 	bne.w	8010b84 <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 801082c:	4b92      	ldr	r3, [pc, #584]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801082e:	785b      	ldrb	r3, [r3, #1]
 8010830:	f083 0301 	eor.w	r3, r3, #1
 8010834:	b2db      	uxtb	r3, r3
 8010836:	2b00      	cmp	r3, #0
 8010838:	d060      	beq.n	80108fc <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	7b1b      	ldrb	r3, [r3, #12]
 801083e:	2b04      	cmp	r3, #4
 8010840:	f040 81a7 	bne.w	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	689b      	ldr	r3, [r3, #8]
 8010848:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 801084a:	2b01      	cmp	r3, #1
 801084c:	f040 81a1 	bne.w	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	3301      	adds	r3, #1
 8010856:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010858:	2b01      	cmp	r3, #1
 801085a:	f040 819a 	bne.w	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	3302      	adds	r3, #2
 8010864:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010866:	2b01      	cmp	r3, #1
 8010868:	f040 8193 	bne.w	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	689b      	ldr	r3, [r3, #8]
 8010870:	3303      	adds	r3, #3
 8010872:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010874:	2b01      	cmp	r3, #1
 8010876:	f040 818c 	bne.w	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 801087a:	4b7f      	ldr	r3, [pc, #508]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801087c:	2200      	movs	r2, #0
 801087e:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010880:	4b7d      	ldr	r3, [pc, #500]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010882:	22e0      	movs	r2, #224	; 0xe0
 8010884:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 8010886:	4b7c      	ldr	r3, [pc, #496]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010888:	2202      	movs	r2, #2
 801088a:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 801088c:	4b7a      	ldr	r3, [pc, #488]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801088e:	2200      	movs	r2, #0
 8010890:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 8010892:	4b79      	ldr	r3, [pc, #484]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010894:	2200      	movs	r2, #0
 8010896:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 8010898:	4b77      	ldr	r3, [pc, #476]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801089a:	2200      	movs	r2, #0
 801089c:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 801089e:	4b76      	ldr	r3, [pc, #472]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a0:	2200      	movs	r2, #0
 80108a2:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80108a4:	4b74      	ldr	r3, [pc, #464]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a6:	2201      	movs	r2, #1
 80108a8:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80108aa:	4b73      	ldr	r3, [pc, #460]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ac:	2201      	movs	r2, #1
 80108ae:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 80108b0:	2304      	movs	r3, #4
 80108b2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 80108b4:	2301      	movs	r3, #1
 80108b6:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80108b8:	f107 030c 	add.w	r3, r7, #12
 80108bc:	4618      	mov	r0, r3
 80108be:	f004 f8a1 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 80108c2:	2000      	movs	r0, #0
 80108c4:	f004 fe7a 	bl	80155bc <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80108c8:	4b6c      	ldr	r3, [pc, #432]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	685b      	ldr	r3, [r3, #4]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d003      	beq.n	80108da <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80108d2:	4b6a      	ldr	r3, [pc, #424]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	685b      	ldr	r3, [r3, #4]
 80108d8:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80108da:	2300      	movs	r3, #0
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	4b68      	ldr	r3, [pc, #416]	; (8010a80 <LmhpComplianceOnMcpsIndication+0x2a8>)
 80108e0:	2200      	movs	r2, #0
 80108e2:	f04f 31ff 	mov.w	r1, #4294967295
 80108e6:	4867      	ldr	r0, [pc, #412]	; (8010a84 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80108e8:	f00d fb80 	bl	801dfec <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 80108ec:	f241 3188 	movw	r1, #5000	; 0x1388
 80108f0:	4864      	ldr	r0, [pc, #400]	; (8010a84 <LmhpComplianceOnMcpsIndication+0x2ac>)
 80108f2:	f00d fc8f 	bl	801e214 <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 80108f6:	f7ff fef9 	bl	80106ec <LmhpComplianceTxProcess>
 80108fa:	e14a      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	781a      	ldrb	r2, [r3, #0]
 8010902:	4b5d      	ldr	r3, [pc, #372]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010904:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 8010906:	4b5c      	ldr	r3, [pc, #368]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010908:	789b      	ldrb	r3, [r3, #2]
 801090a:	2b0a      	cmp	r3, #10
 801090c:	f200 813c 	bhi.w	8010b88 <LmhpComplianceOnMcpsIndication+0x3b0>
 8010910:	a201      	add	r2, pc, #4	; (adr r2, 8010918 <LmhpComplianceOnMcpsIndication+0x140>)
 8010912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010916:	bf00      	nop
 8010918:	08010945 	.word	0x08010945
 801091c:	0801098f 	.word	0x0801098f
 8010920:	08010997 	.word	0x08010997
 8010924:	080109a5 	.word	0x080109a5
 8010928:	080109b3 	.word	0x080109b3
 801092c:	08010a0b 	.word	0x08010a0b
 8010930:	08010a1d 	.word	0x08010a1d
 8010934:	08010a8d 	.word	0x08010a8d
 8010938:	08010b35 	.word	0x08010b35
 801093c:	08010b47 	.word	0x08010b47
 8010940:	08010b61 	.word	0x08010b61
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010944:	484f      	ldr	r0, [pc, #316]	; (8010a84 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010946:	f00d fbf5 	bl	801e134 <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 801094a:	4b4b      	ldr	r3, [pc, #300]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801094c:	2200      	movs	r2, #0
 801094e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010950:	4b49      	ldr	r3, [pc, #292]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010952:	2200      	movs	r2, #0
 8010954:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010956:	2304      	movs	r3, #4
 8010958:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 801095a:	4b48      	ldr	r3, [pc, #288]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	781b      	ldrb	r3, [r3, #0]
 8010960:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010962:	f107 030c 	add.w	r3, r7, #12
 8010966:	4618      	mov	r0, r3
 8010968:	f004 f84c 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 801096c:	4b43      	ldr	r3, [pc, #268]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	785b      	ldrb	r3, [r3, #1]
 8010972:	4618      	mov	r0, r3
 8010974:	f004 fe22 	bl	80155bc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010978:	4b40      	ldr	r3, [pc, #256]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689b      	ldr	r3, [r3, #8]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 8104 	beq.w	8010b8c <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010984:	4b3d      	ldr	r3, [pc, #244]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	689b      	ldr	r3, [r3, #8]
 801098a:	4798      	blx	r3
                    }
                }
                break;
 801098c:	e0fe      	b.n	8010b8c <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 801098e:	4b3a      	ldr	r3, [pc, #232]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010990:	2202      	movs	r2, #2
 8010992:	719a      	strb	r2, [r3, #6]
                break;
 8010994:	e0fd      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 8010996:	4b38      	ldr	r3, [pc, #224]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010998:	2201      	movs	r2, #1
 801099a:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 801099c:	4b36      	ldr	r3, [pc, #216]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801099e:	2201      	movs	r2, #1
 80109a0:	709a      	strb	r2, [r3, #2]
                break;
 80109a2:	e0f6      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 80109a4:	4b34      	ldr	r3, [pc, #208]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109a6:	2200      	movs	r2, #0
 80109a8:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109aa:	4b33      	ldr	r3, [pc, #204]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109ac:	2201      	movs	r2, #1
 80109ae:	709a      	strb	r2, [r3, #2]
                break;
 80109b0:	e0ef      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	7b1a      	ldrb	r2, [r3, #12]
 80109b6:	4b30      	ldr	r3, [pc, #192]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109b8:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 80109ba:	4b2f      	ldr	r3, [pc, #188]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109bc:	689b      	ldr	r3, [r3, #8]
 80109be:	2204      	movs	r2, #4
 80109c0:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109c2:	2301      	movs	r3, #1
 80109c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80109c8:	e012      	b.n	80109f0 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	689a      	ldr	r2, [r3, #8]
 80109ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109d2:	4413      	add	r3, r2
 80109d4:	781a      	ldrb	r2, [r3, #0]
 80109d6:	4b28      	ldr	r3, [pc, #160]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d8:	6899      	ldr	r1, [r3, #8]
 80109da:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109de:	440b      	add	r3, r1
 80109e0:	3201      	adds	r2, #1
 80109e2:	b2d2      	uxtb	r2, r2
 80109e4:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109ea:	3301      	adds	r3, #1
 80109ec:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80109f0:	4b21      	ldr	r3, [pc, #132]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109f2:	795a      	ldrb	r2, [r3, #5]
 80109f4:	4b20      	ldr	r3, [pc, #128]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109f6:	799b      	ldrb	r3, [r3, #6]
 80109f8:	4293      	cmp	r3, r2
 80109fa:	bf28      	it	cs
 80109fc:	4613      	movcs	r3, r2
 80109fe:	b2db      	uxtb	r3, r3
 8010a00:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d3e0      	bcc.n	80109ca <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010a08:	e0c3      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010a0a:	2305      	movs	r3, #5
 8010a0c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010a10:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a14:	4618      	mov	r0, r3
 8010a16:	f004 fb89 	bl	801512c <LoRaMacMlmeRequest>
                }
                break;
 8010a1a:	e0ba      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010a1c:	4819      	ldr	r0, [pc, #100]	; (8010a84 <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010a1e:	f00d fb89 	bl	801e134 <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010a22:	4b15      	ldr	r3, [pc, #84]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010a28:	4b13      	ldr	r3, [pc, #76]	; (8010a78 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010a2e:	2304      	movs	r3, #4
 8010a30:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010a32:	4b12      	ldr	r3, [pc, #72]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010a3a:	f107 030c 	add.w	r3, r7, #12
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f003 ffe0 	bl	8014a04 <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010a44:	4b0d      	ldr	r3, [pc, #52]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	785b      	ldrb	r3, [r3, #1]
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f004 fdb6 	bl	80155bc <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010a50:	4b0a      	ldr	r3, [pc, #40]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	689b      	ldr	r3, [r3, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d003      	beq.n	8010a62 <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010a5a:	4b08      	ldr	r3, [pc, #32]	; (8010a7c <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010a62:	4b09      	ldr	r3, [pc, #36]	; (8010a88 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	f000 8092 	beq.w	8010b90 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a70:	2101      	movs	r1, #1
 8010a72:	2002      	movs	r0, #2
 8010a74:	4798      	blx	r3
                    }
                }
                break;
 8010a76:	e08b      	b.n	8010b90 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010a78:	200008d4 	.word	0x200008d4
 8010a7c:	200008e8 	.word	0x200008e8
 8010a80:	08010ba9 	.word	0x08010ba9
 8010a84:	200008bc 	.word	0x200008bc
 8010a88:	200000ec 	.word	0x200000ec
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	7b1b      	ldrb	r3, [r3, #12]
 8010a90:	2b03      	cmp	r3, #3
 8010a92:	d113      	bne.n	8010abc <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010a94:	2306      	movs	r3, #6
 8010a96:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	781b      	ldrb	r3, [r3, #0]
 8010aa2:	021b      	lsls	r3, r3, #8
 8010aa4:	b21a      	sxth	r2, r3
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	689b      	ldr	r3, [r3, #8]
 8010aaa:	3302      	adds	r3, #2
 8010aac:	781b      	ldrb	r3, [r3, #0]
 8010aae:	b21b      	sxth	r3, r3
 8010ab0:	4313      	orrs	r3, r2
 8010ab2:	b21b      	sxth	r3, r3
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010aba:	e032      	b.n	8010b22 <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	7b1b      	ldrb	r3, [r3, #12]
 8010ac0:	2b07      	cmp	r3, #7
 8010ac2:	d12e      	bne.n	8010b22 <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010ac4:	2307      	movs	r3, #7
 8010ac6:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	3301      	adds	r3, #1
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	021b      	lsls	r3, r3, #8
 8010ad4:	b21a      	sxth	r2, r3
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	689b      	ldr	r3, [r3, #8]
 8010ada:	3302      	adds	r3, #2
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	b21b      	sxth	r3, r3
 8010ae0:	4313      	orrs	r3, r2
 8010ae2:	b21b      	sxth	r3, r3
 8010ae4:	b29b      	uxth	r3, r3
 8010ae6:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	3303      	adds	r3, #3
 8010af0:	781b      	ldrb	r3, [r3, #0]
 8010af2:	041a      	lsls	r2, r3, #16
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	3304      	adds	r3, #4
 8010afa:	781b      	ldrb	r3, [r3, #0]
 8010afc:	021b      	lsls	r3, r3, #8
 8010afe:	4313      	orrs	r3, r2
 8010b00:	687a      	ldr	r2, [r7, #4]
 8010b02:	6892      	ldr	r2, [r2, #8]
 8010b04:	3205      	adds	r2, #5
 8010b06:	7812      	ldrb	r2, [r2, #0]
 8010b08:	4313      	orrs	r3, r2
 8010b0a:	461a      	mov	r2, r3
 8010b0c:	2364      	movs	r3, #100	; 0x64
 8010b0e:	fb02 f303 	mul.w	r3, r2, r3
 8010b12:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	689b      	ldr	r3, [r3, #8]
 8010b18:	3306      	adds	r3, #6
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	b25b      	sxtb	r3, r3
 8010b1e:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010b22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b26:	4618      	mov	r0, r3
 8010b28:	f004 fb00 	bl	801512c <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010b2c:	4b1a      	ldr	r3, [pc, #104]	; (8010b98 <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010b2e:	2201      	movs	r2, #1
 8010b30:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010b32:	e02e      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010b34:	230a      	movs	r3, #10
 8010b36:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f004 faf4 	bl	801512c <LoRaMacMlmeRequest>
                }
                break;
 8010b44:	e025      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010b46:	2300      	movs	r3, #0
 8010b48:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	689b      	ldr	r3, [r3, #8]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	781b      	ldrb	r3, [r3, #0]
 8010b52:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010b54:	f107 030c 	add.w	r3, r7, #12
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f003 ff53 	bl	8014a04 <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010b5e:	e018      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010b60:	230d      	movs	r3, #13
 8010b62:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	689b      	ldr	r3, [r3, #8]
 8010b6a:	785b      	ldrb	r3, [r3, #1]
 8010b6c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b70:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010b74:	4618      	mov	r0, r3
 8010b76:	f004 fad9 	bl	801512c <LoRaMacMlmeRequest>
                }
                break;
 8010b7a:	e00a      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b7c:	bf00      	nop
 8010b7e:	e008      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b80:	bf00      	nop
 8010b82:	e006      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b84:	bf00      	nop
 8010b86:	e004      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010b88:	bf00      	nop
 8010b8a:	e002      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010b8c:	bf00      	nop
 8010b8e:	e000      	b.n	8010b92 <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010b90:	bf00      	nop
        }
    }
}
 8010b92:	3788      	adds	r7, #136	; 0x88
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	200008d4 	.word	0x200008d4

08010b9c <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010b9c:	b480      	push	{r7}
 8010b9e:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010ba0:	bf00      	nop
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bc80      	pop	{r7}
 8010ba6:	4770      	bx	lr

08010ba8 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b082      	sub	sp, #8
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010bb0:	f7ff fd9c 	bl	80106ec <LmhpComplianceTxProcess>
}
 8010bb4:	bf00      	nop
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}

08010bbc <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b083      	sub	sp, #12
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010bc4:	2300      	movs	r3, #0
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	370c      	adds	r7, #12
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bc80      	pop	{r7}
 8010bce:	4770      	bx	lr

08010bd0 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	b083      	sub	sp, #12
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	6039      	str	r1, [r7, #0]
 8010bda:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010bdc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bc80      	pop	{r7}
 8010be8:	4770      	bx	lr
	...

08010bec <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010bec:	b590      	push	{r4, r7, lr}
 8010bee:	b083      	sub	sp, #12
 8010bf0:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010bf2:	f00d fbb9 	bl	801e368 <UTIL_TIMER_GetCurrentTime>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	4a0f      	ldr	r2, [pc, #60]	; (8010c38 <OnRadioTxDone+0x4c>)
 8010bfa:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010bfc:	4c0f      	ldr	r4, [pc, #60]	; (8010c3c <OnRadioTxDone+0x50>)
 8010bfe:	463b      	mov	r3, r7
 8010c00:	4618      	mov	r0, r3
 8010c02:	f00c fd2f 	bl	801d664 <SysTimeGet>
 8010c06:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c0a:	463a      	mov	r2, r7
 8010c0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c10:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c14:	4a0a      	ldr	r2, [pc, #40]	; (8010c40 <OnRadioTxDone+0x54>)
 8010c16:	7813      	ldrb	r3, [r2, #0]
 8010c18:	f043 0310 	orr.w	r3, r3, #16
 8010c1c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c1e:	f003 f8e1 	bl	8013de4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c22:	4b08      	ldr	r3, [pc, #32]	; (8010c44 <OnRadioTxDone+0x58>)
 8010c24:	2201      	movs	r2, #1
 8010c26:	2100      	movs	r1, #0
 8010c28:	2002      	movs	r0, #2
 8010c2a:	f00d fc8d 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c2e:	bf00      	nop
 8010c30:	370c      	adds	r7, #12
 8010c32:	46bd      	mov	sp, r7
 8010c34:	bd90      	pop	{r4, r7, pc}
 8010c36:	bf00      	nop
 8010c38:	20001560 	.word	0x20001560
 8010c3c:	200008ec 	.word	0x200008ec
 8010c40:	2000155c 	.word	0x2000155c
 8010c44:	0801f2f8 	.word	0x0801f2f8

08010c48 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b084      	sub	sp, #16
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	60f8      	str	r0, [r7, #12]
 8010c50:	4608      	mov	r0, r1
 8010c52:	4611      	mov	r1, r2
 8010c54:	461a      	mov	r2, r3
 8010c56:	4603      	mov	r3, r0
 8010c58:	817b      	strh	r3, [r7, #10]
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	813b      	strh	r3, [r7, #8]
 8010c5e:	4613      	mov	r3, r2
 8010c60:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010c62:	f00d fb81 	bl	801e368 <UTIL_TIMER_GetCurrentTime>
 8010c66:	4603      	mov	r3, r0
 8010c68:	4a0f      	ldr	r2, [pc, #60]	; (8010ca8 <OnRadioRxDone+0x60>)
 8010c6a:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c6c:	4a0e      	ldr	r2, [pc, #56]	; (8010ca8 <OnRadioRxDone+0x60>)
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c72:	4a0d      	ldr	r2, [pc, #52]	; (8010ca8 <OnRadioRxDone+0x60>)
 8010c74:	897b      	ldrh	r3, [r7, #10]
 8010c76:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c78:	4a0b      	ldr	r2, [pc, #44]	; (8010ca8 <OnRadioRxDone+0x60>)
 8010c7a:	893b      	ldrh	r3, [r7, #8]
 8010c7c:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010c7e:	4a0a      	ldr	r2, [pc, #40]	; (8010ca8 <OnRadioRxDone+0x60>)
 8010c80:	79fb      	ldrb	r3, [r7, #7]
 8010c82:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010c84:	4a09      	ldr	r2, [pc, #36]	; (8010cac <OnRadioRxDone+0x64>)
 8010c86:	7813      	ldrb	r3, [r2, #0]
 8010c88:	f043 0308 	orr.w	r3, r3, #8
 8010c8c:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010c8e:	f003 f8a9 	bl	8013de4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010c92:	4b07      	ldr	r3, [pc, #28]	; (8010cb0 <OnRadioRxDone+0x68>)
 8010c94:	2201      	movs	r2, #1
 8010c96:	2100      	movs	r1, #0
 8010c98:	2002      	movs	r0, #2
 8010c9a:	f00d fc55 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c9e:	bf00      	nop
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	20001564 	.word	0x20001564
 8010cac:	2000155c 	.word	0x2000155c
 8010cb0:	0801f308 	.word	0x0801f308

08010cb4 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010cb8:	4a07      	ldr	r2, [pc, #28]	; (8010cd8 <OnRadioTxTimeout+0x24>)
 8010cba:	7813      	ldrb	r3, [r2, #0]
 8010cbc:	f043 0304 	orr.w	r3, r3, #4
 8010cc0:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010cc2:	f003 f88f 	bl	8013de4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010cc6:	4b05      	ldr	r3, [pc, #20]	; (8010cdc <OnRadioTxTimeout+0x28>)
 8010cc8:	2201      	movs	r2, #1
 8010cca:	2100      	movs	r1, #0
 8010ccc:	2002      	movs	r0, #2
 8010cce:	f00d fc3b 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cd2:	bf00      	nop
 8010cd4:	bd80      	pop	{r7, pc}
 8010cd6:	bf00      	nop
 8010cd8:	2000155c 	.word	0x2000155c
 8010cdc:	0801f318 	.word	0x0801f318

08010ce0 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010ce4:	4a04      	ldr	r2, [pc, #16]	; (8010cf8 <OnRadioRxError+0x18>)
 8010ce6:	7813      	ldrb	r3, [r2, #0]
 8010ce8:	f043 0302 	orr.w	r3, r3, #2
 8010cec:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010cee:	f003 f879 	bl	8013de4 <OnMacProcessNotify>
}
 8010cf2:	bf00      	nop
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	2000155c 	.word	0x2000155c

08010cfc <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d00:	4a07      	ldr	r2, [pc, #28]	; (8010d20 <OnRadioRxTimeout+0x24>)
 8010d02:	7813      	ldrb	r3, [r2, #0]
 8010d04:	f043 0301 	orr.w	r3, r3, #1
 8010d08:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d0a:	f003 f86b 	bl	8013de4 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d0e:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <OnRadioRxTimeout+0x28>)
 8010d10:	2201      	movs	r2, #1
 8010d12:	2100      	movs	r1, #0
 8010d14:	2002      	movs	r0, #2
 8010d16:	f00d fc17 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 8010d1a:	bf00      	nop
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	2000155c 	.word	0x2000155c
 8010d24:	0801f328 	.word	0x0801f328

08010d28 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d2c:	4b08      	ldr	r3, [pc, #32]	; (8010d50 <UpdateRxSlotIdleState+0x28>)
 8010d2e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d32:	2b02      	cmp	r3, #2
 8010d34:	d004      	beq.n	8010d40 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d36:	4b07      	ldr	r3, [pc, #28]	; (8010d54 <UpdateRxSlotIdleState+0x2c>)
 8010d38:	2206      	movs	r2, #6
 8010d3a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d3e:	e003      	b.n	8010d48 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d40:	4b04      	ldr	r3, [pc, #16]	; (8010d54 <UpdateRxSlotIdleState+0x2c>)
 8010d42:	2202      	movs	r2, #2
 8010d44:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010d48:	bf00      	nop
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bc80      	pop	{r7}
 8010d4e:	4770      	bx	lr
 8010d50:	20000df4 	.word	0x20000df4
 8010d54:	200008ec 	.word	0x200008ec

08010d58 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b092      	sub	sp, #72	; 0x48
 8010d5c:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d5e:	4b50      	ldr	r3, [pc, #320]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010d60:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d64:	2b02      	cmp	r3, #2
 8010d66:	d002      	beq.n	8010d6e <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d68:	4b4e      	ldr	r3, [pc, #312]	; (8010ea4 <ProcessRadioTxDone+0x14c>)
 8010d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d6c:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8010d72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d78:	b672      	cpsid	i
}
 8010d7a:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010d7c:	f00d faf4 	bl	801e368 <UTIL_TIMER_GetCurrentTime>
 8010d80:	4602      	mov	r2, r0
 8010d82:	4b49      	ldr	r3, [pc, #292]	; (8010ea8 <ProcessRadioTxDone+0x150>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	1ad3      	subs	r3, r2, r3
 8010d88:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010d8a:	4b48      	ldr	r3, [pc, #288]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010d8c:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d92:	1ad3      	subs	r3, r2, r3
 8010d94:	4619      	mov	r1, r3
 8010d96:	4846      	ldr	r0, [pc, #280]	; (8010eb0 <ProcessRadioTxDone+0x158>)
 8010d98:	f00d fa3c 	bl	801e214 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010d9c:	4844      	ldr	r0, [pc, #272]	; (8010eb0 <ProcessRadioTxDone+0x158>)
 8010d9e:	f00d f95b 	bl	801e058 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010da2:	4b42      	ldr	r3, [pc, #264]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010da4:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	4619      	mov	r1, r3
 8010dae:	4841      	ldr	r0, [pc, #260]	; (8010eb4 <ProcessRadioTxDone+0x15c>)
 8010db0:	f00d fa30 	bl	801e214 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010db4:	483f      	ldr	r0, [pc, #252]	; (8010eb4 <ProcessRadioTxDone+0x15c>)
 8010db6:	f00d f94f 	bl	801e058 <UTIL_TIMER_Start>
 8010dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dbc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc0:	f383 8810 	msr	PRIMASK, r3
}
 8010dc4:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010dc6:	4b36      	ldr	r3, [pc, #216]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010dc8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010dcc:	2b02      	cmp	r3, #2
 8010dce:	d004      	beq.n	8010dda <ProcessRadioTxDone+0x82>
 8010dd0:	4b36      	ldr	r3, [pc, #216]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010dd2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d019      	beq.n	8010e0e <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010dda:	2316      	movs	r3, #22
 8010ddc:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010de0:	4b2f      	ldr	r3, [pc, #188]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010de2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010de6:	f107 0220 	add.w	r2, r7, #32
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f006 fcec 	bl	80177ca <RegionGetPhyParam>
 8010df2:	4603      	mov	r3, r0
 8010df4:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010df6:	4b2d      	ldr	r3, [pc, #180]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010df8:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	4413      	add	r3, r2
 8010e00:	4619      	mov	r1, r3
 8010e02:	482d      	ldr	r0, [pc, #180]	; (8010eb8 <ProcessRadioTxDone+0x160>)
 8010e04:	f00d fa06 	bl	801e214 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010e08:	482b      	ldr	r0, [pc, #172]	; (8010eb8 <ProcessRadioTxDone+0x160>)
 8010e0a:	f00d f925 	bl	801e058 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e0e:	4b26      	ldr	r3, [pc, #152]	; (8010ea8 <ProcessRadioTxDone+0x150>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4a23      	ldr	r2, [pc, #140]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010e14:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e16:	4b25      	ldr	r3, [pc, #148]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010e18:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010e1c:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e1e:	4b22      	ldr	r3, [pc, #136]	; (8010ea8 <ProcessRadioTxDone+0x150>)
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f00c fc53 	bl	801d6d4 <SysTimeGetMcuTime>
 8010e2e:	4638      	mov	r0, r7
 8010e30:	4b1b      	ldr	r3, [pc, #108]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010e32:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010e36:	9200      	str	r2, [sp, #0]
 8010e38:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e3c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e40:	ca06      	ldmia	r2, {r1, r2}
 8010e42:	f00c fba8 	bl	801d596 <SysTimeSub>
 8010e46:	f107 0314 	add.w	r3, r7, #20
 8010e4a:	463a      	mov	r2, r7
 8010e4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e50:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e54:	4b15      	ldr	r3, [pc, #84]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010e56:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010e5a:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010e5c:	2301      	movs	r3, #1
 8010e5e:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e60:	4b0f      	ldr	r3, [pc, #60]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010e62:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d101      	bne.n	8010e6e <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e6a:	2300      	movs	r3, #0
 8010e6c:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e6e:	4b0c      	ldr	r3, [pc, #48]	; (8010ea0 <ProcessRadioTxDone+0x148>)
 8010e70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e74:	f107 0208 	add.w	r2, r7, #8
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f006 fcbd 	bl	80177fa <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010e80:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010e82:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e86:	f083 0301 	eor.w	r3, r3, #1
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d003      	beq.n	8010e98 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010e90:	4b06      	ldr	r3, [pc, #24]	; (8010eac <ProcessRadioTxDone+0x154>)
 8010e92:	2200      	movs	r2, #0
 8010e94:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010e98:	bf00      	nop
 8010e9a:	3740      	adds	r7, #64	; 0x40
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	20000df4 	.word	0x20000df4
 8010ea4:	0801f9d8 	.word	0x0801f9d8
 8010ea8:	20001560 	.word	0x20001560
 8010eac:	200008ec 	.word	0x200008ec
 8010eb0:	20000c6c 	.word	0x20000c6c
 8010eb4:	20000c84 	.word	0x20000c84
 8010eb8:	20000ce0 	.word	0x20000ce0

08010ebc <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ec0:	4b10      	ldr	r3, [pc, #64]	; (8010f04 <PrepareRxDoneAbort+0x48>)
 8010ec2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010eca:	4a0e      	ldr	r2, [pc, #56]	; (8010f04 <PrepareRxDoneAbort+0x48>)
 8010ecc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010ed0:	4b0c      	ldr	r3, [pc, #48]	; (8010f04 <PrepareRxDoneAbort+0x48>)
 8010ed2:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d002      	beq.n	8010ee0 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010eda:	2000      	movs	r0, #0
 8010edc:	f001 f950 	bl	8012180 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010ee0:	4a08      	ldr	r2, [pc, #32]	; (8010f04 <PrepareRxDoneAbort+0x48>)
 8010ee2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ee6:	f043 0302 	orr.w	r3, r3, #2
 8010eea:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010eee:	4a05      	ldr	r2, [pc, #20]	; (8010f04 <PrepareRxDoneAbort+0x48>)
 8010ef0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010ef4:	f043 0310 	orr.w	r3, r3, #16
 8010ef8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010efc:	f7ff ff14 	bl	8010d28 <UpdateRxSlotIdleState>
}
 8010f00:	bf00      	nop
 8010f02:	bd80      	pop	{r7, pc}
 8010f04:	200008ec 	.word	0x200008ec

08010f08 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f08:	b5b0      	push	{r4, r5, r7, lr}
 8010f0a:	b0aa      	sub	sp, #168	; 0xa8
 8010f0c:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f0e:	2313      	movs	r3, #19
 8010f10:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f14:	4b78      	ldr	r3, [pc, #480]	; (80110f8 <ProcessRadioRxDone+0x1f0>)
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010f1c:	4b76      	ldr	r3, [pc, #472]	; (80110f8 <ProcessRadioRxDone+0x1f0>)
 8010f1e:	891b      	ldrh	r3, [r3, #8]
 8010f20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010f24:	4b74      	ldr	r3, [pc, #464]	; (80110f8 <ProcessRadioRxDone+0x1f0>)
 8010f26:	895b      	ldrh	r3, [r3, #10]
 8010f28:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010f2c:	4b72      	ldr	r3, [pc, #456]	; (80110f8 <ProcessRadioRxDone+0x1f0>)
 8010f2e:	7b1b      	ldrb	r3, [r3, #12]
 8010f30:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010f34:	2300      	movs	r3, #0
 8010f36:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010f3a:	2300      	movs	r3, #0
 8010f3c:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f3e:	4b6f      	ldr	r3, [pc, #444]	; (80110fc <ProcessRadioRxDone+0x1f4>)
 8010f40:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f44:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f4e:	2301      	movs	r3, #1
 8010f50:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f54:	2301      	movs	r3, #1
 8010f56:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f5a:	4b69      	ldr	r3, [pc, #420]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f5c:	2200      	movs	r2, #0
 8010f5e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010f62:	4a67      	ldr	r2, [pc, #412]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f68:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010f6c:	4a64      	ldr	r2, [pc, #400]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f6e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f72:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f76:	4b62      	ldr	r3, [pc, #392]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f78:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010f7c:	4b60      	ldr	r3, [pc, #384]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f7e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010f82:	4b5f      	ldr	r3, [pc, #380]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f84:	2200      	movs	r2, #0
 8010f86:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010f8a:	4b5d      	ldr	r3, [pc, #372]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f8c:	2200      	movs	r2, #0
 8010f8e:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010f92:	4b5b      	ldr	r3, [pc, #364]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f94:	2200      	movs	r2, #0
 8010f96:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010f9a:	4b59      	ldr	r3, [pc, #356]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010fa2:	4b57      	ldr	r3, [pc, #348]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010faa:	4b55      	ldr	r3, [pc, #340]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010fb2:	4b53      	ldr	r3, [pc, #332]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010fba:	4b51      	ldr	r3, [pc, #324]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010fc2:	4b4f      	ldr	r3, [pc, #316]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010fca:	4b4d      	ldr	r3, [pc, #308]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010fd2:	4b4b      	ldr	r3, [pc, #300]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010fda:	4b4a      	ldr	r3, [pc, #296]	; (8011104 <ProcessRadioRxDone+0x1fc>)
 8010fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fde:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010fe0:	4849      	ldr	r0, [pc, #292]	; (8011108 <ProcessRadioRxDone+0x200>)
 8010fe2:	f00d f8a7 	bl	801e134 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010fe6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8010fea:	4619      	mov	r1, r3
 8010fec:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010ff0:	f004 fc4b 	bl	801588a <LoRaMacClassBRxBeacon>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d00b      	beq.n	8011012 <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8010ffa:	4a41      	ldr	r2, [pc, #260]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8010ffc:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011000:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8011004:	4a3e      	ldr	r2, [pc, #248]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8011006:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801100a:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 801100e:	f000 bc1f 	b.w	8011850 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011012:	4b3a      	ldr	r3, [pc, #232]	; (80110fc <ProcessRadioRxDone+0x1f4>)
 8011014:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011018:	2b01      	cmp	r3, #1
 801101a:	d11e      	bne.n	801105a <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801101c:	f004 fc48 	bl	80158b0 <LoRaMacClassBIsPingExpected>
 8011020:	4603      	mov	r3, r0
 8011022:	2b00      	cmp	r3, #0
 8011024:	d00a      	beq.n	801103c <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011026:	2000      	movs	r0, #0
 8011028:	f004 fbf9 	bl	801581e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801102c:	2000      	movs	r0, #0
 801102e:	f004 fc1a 	bl	8015866 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8011032:	4b33      	ldr	r3, [pc, #204]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8011034:	2204      	movs	r2, #4
 8011036:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 801103a:	e00e      	b.n	801105a <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801103c:	f004 fc3f 	bl	80158be <LoRaMacClassBIsMulticastExpected>
 8011040:	4603      	mov	r3, r0
 8011042:	2b00      	cmp	r3, #0
 8011044:	d009      	beq.n	801105a <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011046:	2000      	movs	r0, #0
 8011048:	f004 fbf3 	bl	8015832 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801104c:	2000      	movs	r0, #0
 801104e:	f004 fc13 	bl	8015878 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8011052:	4b2b      	ldr	r3, [pc, #172]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8011054:	2205      	movs	r2, #5
 8011056:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 801105a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801105e:	2b00      	cmp	r3, #0
 8011060:	d106      	bne.n	8011070 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011062:	4b27      	ldr	r3, [pc, #156]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 8011064:	2201      	movs	r2, #1
 8011066:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 801106a:	f7ff ff27 	bl	8010ebc <PrepareRxDoneAbort>
        return;
 801106e:	e3ef      	b.n	8011850 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011070:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011074:	1c5a      	adds	r2, r3, #1
 8011076:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 801107a:	461a      	mov	r2, r3
 801107c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011080:	4413      	add	r3, r2
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 8011088:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801108c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8011090:	b2db      	uxtb	r3, r3
 8011092:	3b01      	subs	r3, #1
 8011094:	2b06      	cmp	r3, #6
 8011096:	f200 83b4 	bhi.w	8011802 <ProcessRadioRxDone+0x8fa>
 801109a:	a201      	add	r2, pc, #4	; (adr r2, 80110a0 <ProcessRadioRxDone+0x198>)
 801109c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110a0:	080110bd 	.word	0x080110bd
 80110a4:	08011803 	.word	0x08011803
 80110a8:	0801129d 	.word	0x0801129d
 80110ac:	08011803 	.word	0x08011803
 80110b0:	08011295 	.word	0x08011295
 80110b4:	08011803 	.word	0x08011803
 80110b8:	080117a7 	.word	0x080117a7
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80110bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110c0:	2b10      	cmp	r3, #16
 80110c2:	d806      	bhi.n	80110d2 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110c4:	4b0e      	ldr	r3, [pc, #56]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 80110c6:	2201      	movs	r2, #1
 80110c8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80110cc:	f7ff fef6 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 80110d0:	e3be      	b.n	8011850 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 80110d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110d6:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 80110d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110dc:	b2db      	uxtb	r3, r3
 80110de:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80110e0:	4b06      	ldr	r3, [pc, #24]	; (80110fc <ProcessRadioRxDone+0x1f4>)
 80110e2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d010      	beq.n	801110c <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110ea:	4b05      	ldr	r3, [pc, #20]	; (8011100 <ProcessRadioRxDone+0x1f8>)
 80110ec:	2201      	movs	r2, #1
 80110ee:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80110f2:	f7ff fee3 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 80110f6:	e3ab      	b.n	8011850 <ProcessRadioRxDone+0x948>
 80110f8:	20001564 	.word	0x20001564
 80110fc:	20000df4 	.word	0x20000df4
 8011100:	200008ec 	.word	0x200008ec
 8011104:	0801f9d8 	.word	0x0801f9d8
 8011108:	20000c84 	.word	0x20000c84
            }

            SecureElementGetJoinEui( joinEui );
 801110c:	1d3b      	adds	r3, r7, #4
 801110e:	4618      	mov	r0, r3
 8011110:	f7fe fa92 	bl	800f638 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8011114:	f107 0214 	add.w	r2, r7, #20
 8011118:	1d3b      	adds	r3, r7, #4
 801111a:	4619      	mov	r1, r3
 801111c:	20ff      	movs	r0, #255	; 0xff
 801111e:	f005 fdd5 	bl	8016ccc <LoRaMacCryptoHandleJoinAccept>
 8011122:	4603      	mov	r3, r0
 8011124:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8011128:	2300      	movs	r3, #0
 801112a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 801112e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011132:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011136:	b2db      	uxtb	r3, r3
 8011138:	b25b      	sxtb	r3, r3
 801113a:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801113c:	4bbb      	ldr	r3, [pc, #748]	; (801142c <ProcessRadioRxDone+0x524>)
 801113e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8011142:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8011144:	4bb9      	ldr	r3, [pc, #740]	; (801142c <ProcessRadioRxDone+0x524>)
 8011146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801114a:	4639      	mov	r1, r7
 801114c:	2207      	movs	r2, #7
 801114e:	4618      	mov	r0, r3
 8011150:	f006 fb76 	bl	8017840 <RegionVerify>
 8011154:	4603      	mov	r3, r0
 8011156:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 801115a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801115e:	2b00      	cmp	r3, #0
 8011160:	f040 808c 	bne.w	801127c <ProcessRadioRxDone+0x374>
 8011164:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011168:	2b00      	cmp	r3, #0
 801116a:	f000 8087 	beq.w	801127c <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 801116e:	7f7b      	ldrb	r3, [r7, #29]
 8011170:	461a      	mov	r2, r3
 8011172:	4bae      	ldr	r3, [pc, #696]	; (801142c <ProcessRadioRxDone+0x524>)
 8011174:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8011178:	4bac      	ldr	r3, [pc, #688]	; (801142c <ProcessRadioRxDone+0x524>)
 801117a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801117e:	7fbb      	ldrb	r3, [r7, #30]
 8011180:	021b      	lsls	r3, r3, #8
 8011182:	4313      	orrs	r3, r2
 8011184:	4aa9      	ldr	r2, [pc, #676]	; (801142c <ProcessRadioRxDone+0x524>)
 8011186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 801118a:	4ba8      	ldr	r3, [pc, #672]	; (801142c <ProcessRadioRxDone+0x524>)
 801118c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011190:	7ffb      	ldrb	r3, [r7, #31]
 8011192:	041b      	lsls	r3, r3, #16
 8011194:	4313      	orrs	r3, r2
 8011196:	4aa5      	ldr	r2, [pc, #660]	; (801142c <ProcessRadioRxDone+0x524>)
 8011198:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 801119c:	6a3b      	ldr	r3, [r7, #32]
 801119e:	4aa3      	ldr	r2, [pc, #652]	; (801142c <ProcessRadioRxDone+0x524>)
 80111a0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111a4:	4ba1      	ldr	r3, [pc, #644]	; (801142c <ProcessRadioRxDone+0x524>)
 80111a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111aa:	4619      	mov	r1, r3
 80111ac:	2002      	movs	r0, #2
 80111ae:	f7fe fa5b 	bl	800f668 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111b2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111ba:	b2db      	uxtb	r3, r3
 80111bc:	461a      	mov	r2, r3
 80111be:	4b9b      	ldr	r3, [pc, #620]	; (801142c <ProcessRadioRxDone+0x524>)
 80111c0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111cc:	b2db      	uxtb	r3, r3
 80111ce:	461a      	mov	r2, r3
 80111d0:	4b96      	ldr	r3, [pc, #600]	; (801142c <ProcessRadioRxDone+0x524>)
 80111d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111de:	b2db      	uxtb	r3, r3
 80111e0:	461a      	mov	r2, r3
 80111e2:	4b92      	ldr	r3, [pc, #584]	; (801142c <ProcessRadioRxDone+0x524>)
 80111e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 80111e8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80111ec:	461a      	mov	r2, r3
 80111ee:	4b8f      	ldr	r3, [pc, #572]	; (801142c <ProcessRadioRxDone+0x524>)
 80111f0:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 80111f2:	4b8e      	ldr	r3, [pc, #568]	; (801142c <ProcessRadioRxDone+0x524>)
 80111f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d102      	bne.n	8011200 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 80111fa:	4b8c      	ldr	r3, [pc, #560]	; (801142c <ProcessRadioRxDone+0x524>)
 80111fc:	2201      	movs	r2, #1
 80111fe:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011200:	4b8a      	ldr	r3, [pc, #552]	; (801142c <ProcessRadioRxDone+0x524>)
 8011202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011208:	fb02 f303 	mul.w	r3, r2, r3
 801120c:	4a87      	ldr	r2, [pc, #540]	; (801142c <ProcessRadioRxDone+0x524>)
 801120e:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011210:	4b86      	ldr	r3, [pc, #536]	; (801142c <ProcessRadioRxDone+0x524>)
 8011212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011214:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011218:	4a84      	ldr	r2, [pc, #528]	; (801142c <ProcessRadioRxDone+0x524>)
 801121a:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 801121c:	4b83      	ldr	r3, [pc, #524]	; (801142c <ProcessRadioRxDone+0x524>)
 801121e:	2201      	movs	r2, #1
 8011220:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8011224:	4b81      	ldr	r3, [pc, #516]	; (801142c <ProcessRadioRxDone+0x524>)
 8011226:	2200      	movs	r2, #0
 8011228:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 801122c:	f107 0314 	add.w	r3, r7, #20
 8011230:	3312      	adds	r3, #18
 8011232:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 8011234:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011238:	b2db      	uxtb	r3, r3
 801123a:	3b11      	subs	r3, #17
 801123c:	b2db      	uxtb	r3, r3
 801123e:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8011242:	4b7a      	ldr	r3, [pc, #488]	; (801142c <ProcessRadioRxDone+0x524>)
 8011244:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011248:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f006 fb0d 	bl	801786e <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8011254:	4b75      	ldr	r3, [pc, #468]	; (801142c <ProcessRadioRxDone+0x524>)
 8011256:	2202      	movs	r2, #2
 8011258:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801125c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011260:	4618      	mov	r0, r3
 8011262:	f005 f80d 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011266:	4603      	mov	r3, r0
 8011268:	2b00      	cmp	r3, #0
 801126a:	f000 82d2 	beq.w	8011812 <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 801126e:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011272:	4619      	mov	r1, r3
 8011274:	2000      	movs	r0, #0
 8011276:	f004 ff77 	bl	8016168 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 801127a:	e2ca      	b.n	8011812 <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 801127c:	2001      	movs	r0, #1
 801127e:	f004 ffff 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011282:	4603      	mov	r3, r0
 8011284:	2b00      	cmp	r3, #0
 8011286:	f000 82c3 	beq.w	8011810 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 801128a:	2101      	movs	r1, #1
 801128c:	2007      	movs	r0, #7
 801128e:	f004 ff6b 	bl	8016168 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 8011292:	e2bd      	b.n	8011810 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011294:	4b66      	ldr	r3, [pc, #408]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011296:	2201      	movs	r2, #1
 8011298:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801129c:	4b63      	ldr	r3, [pc, #396]	; (801142c <ProcessRadioRxDone+0x524>)
 801129e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112a2:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112a6:	4b62      	ldr	r3, [pc, #392]	; (8011430 <ProcessRadioRxDone+0x528>)
 80112a8:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80112ac:	b25b      	sxtb	r3, r3
 80112ae:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112b2:	230d      	movs	r3, #13
 80112b4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112b8:	4b5c      	ldr	r3, [pc, #368]	; (801142c <ProcessRadioRxDone+0x524>)
 80112ba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d002      	beq.n	80112c8 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80112c2:	230e      	movs	r3, #14
 80112c4:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112c8:	4b58      	ldr	r3, [pc, #352]	; (801142c <ProcessRadioRxDone+0x524>)
 80112ca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112ce:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80112d2:	4611      	mov	r1, r2
 80112d4:	4618      	mov	r0, r3
 80112d6:	f006 fa78 	bl	80177ca <RegionGetPhyParam>
 80112da:	4603      	mov	r3, r0
 80112dc:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80112de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112e2:	3b0d      	subs	r3, #13
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	b21b      	sxth	r3, r3
 80112e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80112ec:	b21a      	sxth	r2, r3
 80112ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80112f0:	b21b      	sxth	r3, r3
 80112f2:	429a      	cmp	r2, r3
 80112f4:	dc03      	bgt.n	80112fe <ProcessRadioRxDone+0x3f6>
 80112f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112fa:	2b0b      	cmp	r3, #11
 80112fc:	d806      	bhi.n	801130c <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80112fe:	4b4c      	ldr	r3, [pc, #304]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011300:	2201      	movs	r2, #1
 8011302:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011306:	f7ff fdd9 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 801130a:	e2a1      	b.n	8011850 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 801130c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011310:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 8011312:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011316:	b2db      	uxtb	r3, r3
 8011318:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 801131c:	4b45      	ldr	r3, [pc, #276]	; (8011434 <ProcessRadioRxDone+0x52c>)
 801131e:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011320:	23ff      	movs	r3, #255	; 0xff
 8011322:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8011326:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801132a:	4618      	mov	r0, r3
 801132c:	f005 ffd0 	bl	80172d0 <LoRaMacParserData>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d006      	beq.n	8011344 <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011336:	4b3e      	ldr	r3, [pc, #248]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011338:	2201      	movs	r2, #1
 801133a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801133e:	f7ff fdbd 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 8011342:	e285      	b.n	8011850 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8011344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011346:	4a3a      	ldr	r2, [pc, #232]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011348:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 801134c:	f107 020e 	add.w	r2, r7, #14
 8011350:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011354:	4611      	mov	r1, r2
 8011356:	4618      	mov	r0, r3
 8011358:	f002 fc6b 	bl	8013c32 <DetermineFrameType>
 801135c:	4603      	mov	r3, r0
 801135e:	2b00      	cmp	r3, #0
 8011360:	d006      	beq.n	8011370 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011362:	4b33      	ldr	r3, [pc, #204]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011364:	2201      	movs	r2, #1
 8011366:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801136a:	f7ff fda7 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 801136e:	e26f      	b.n	8011850 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011370:	2300      	movs	r3, #0
 8011372:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 8011376:	2300      	movs	r3, #0
 8011378:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801137a:	2300      	movs	r3, #0
 801137c:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011380:	e04f      	b.n	8011422 <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8011382:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011386:	4929      	ldr	r1, [pc, #164]	; (801142c <ProcessRadioRxDone+0x524>)
 8011388:	4613      	mov	r3, r2
 801138a:	005b      	lsls	r3, r3, #1
 801138c:	4413      	add	r3, r2
 801138e:	011b      	lsls	r3, r3, #4
 8011390:	440b      	add	r3, r1
 8011392:	33ec      	adds	r3, #236	; 0xec
 8011394:	681a      	ldr	r2, [r3, #0]
 8011396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011398:	429a      	cmp	r2, r3
 801139a:	d13d      	bne.n	8011418 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 801139c:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113a0:	4922      	ldr	r1, [pc, #136]	; (801142c <ProcessRadioRxDone+0x524>)
 80113a2:	4613      	mov	r3, r2
 80113a4:	005b      	lsls	r3, r3, #1
 80113a6:	4413      	add	r3, r2
 80113a8:	011b      	lsls	r3, r3, #4
 80113aa:	440b      	add	r3, r1
 80113ac:	33e9      	adds	r3, #233	; 0xe9
 80113ae:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d031      	beq.n	8011418 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 80113b4:	2301      	movs	r3, #1
 80113b6:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80113ba:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113be:	491b      	ldr	r1, [pc, #108]	; (801142c <ProcessRadioRxDone+0x524>)
 80113c0:	4613      	mov	r3, r2
 80113c2:	005b      	lsls	r3, r3, #1
 80113c4:	4413      	add	r3, r2
 80113c6:	011b      	lsls	r3, r3, #4
 80113c8:	440b      	add	r3, r1
 80113ca:	33ea      	adds	r3, #234	; 0xea
 80113cc:	781b      	ldrb	r3, [r3, #0]
 80113ce:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80113d2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113d6:	4915      	ldr	r1, [pc, #84]	; (801142c <ProcessRadioRxDone+0x524>)
 80113d8:	4613      	mov	r3, r2
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	4413      	add	r3, r2
 80113de:	011b      	lsls	r3, r3, #4
 80113e0:	440b      	add	r3, r1
 80113e2:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 80113ec:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113f0:	490e      	ldr	r1, [pc, #56]	; (801142c <ProcessRadioRxDone+0x524>)
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	011b      	lsls	r3, r3, #4
 80113fa:	440b      	add	r3, r1
 80113fc:	33ec      	adds	r3, #236	; 0xec
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011404:	4b09      	ldr	r3, [pc, #36]	; (801142c <ProcessRadioRxDone+0x524>)
 8011406:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801140a:	2b02      	cmp	r3, #2
 801140c:	d114      	bne.n	8011438 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801140e:	4b08      	ldr	r3, [pc, #32]	; (8011430 <ProcessRadioRxDone+0x528>)
 8011410:	2203      	movs	r2, #3
 8011412:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 8011416:	e00f      	b.n	8011438 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011418:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801141c:	3301      	adds	r3, #1
 801141e:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011422:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8011426:	2b00      	cmp	r3, #0
 8011428:	d0ab      	beq.n	8011382 <ProcessRadioRxDone+0x47a>
 801142a:	e006      	b.n	801143a <ProcessRadioRxDone+0x532>
 801142c:	20000df4 	.word	0x20000df4
 8011430:	200008ec 	.word	0x200008ec
 8011434:	20000b24 	.word	0x20000b24
                    break;
 8011438:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801143a:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801143e:	2b01      	cmp	r3, #1
 8011440:	d117      	bne.n	8011472 <ProcessRadioRxDone+0x56a>
 8011442:	7bbb      	ldrb	r3, [r7, #14]
 8011444:	2b03      	cmp	r3, #3
 8011446:	d10d      	bne.n	8011464 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011448:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801144c:	f003 0320 	and.w	r3, r3, #32
 8011450:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011452:	2b00      	cmp	r3, #0
 8011454:	d106      	bne.n	8011464 <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 8011456:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801145e:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011460:	2b00      	cmp	r3, #0
 8011462:	d006      	beq.n	8011472 <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011464:	4bb3      	ldr	r3, [pc, #716]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011466:	2201      	movs	r2, #1
 8011468:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801146c:	f7ff fd26 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 8011470:	e1ee      	b.n	8011850 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8011472:	2315      	movs	r3, #21
 8011474:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011478:	4baf      	ldr	r3, [pc, #700]	; (8011738 <ProcessRadioRxDone+0x830>)
 801147a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801147e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011482:	4611      	mov	r1, r2
 8011484:	4618      	mov	r0, r3
 8011486:	f006 f9a0 	bl	80177ca <RegionGetPhyParam>
 801148a:	4603      	mov	r3, r0
 801148c:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 801148e:	7bb9      	ldrb	r1, [r7, #14]
 8011490:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011492:	b29b      	uxth	r3, r3
 8011494:	4da8      	ldr	r5, [pc, #672]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011496:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801149a:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 801149e:	f107 0210 	add.w	r2, r7, #16
 80114a2:	9202      	str	r2, [sp, #8]
 80114a4:	f107 020f 	add.w	r2, r7, #15
 80114a8:	9201      	str	r2, [sp, #4]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80114b0:	4622      	mov	r2, r4
 80114b2:	f000 fe8d 	bl	80121d0 <GetFCntDown>
 80114b6:	4603      	mov	r3, r0
 80114b8:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80114bc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d035      	beq.n	8011530 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80114c4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114c8:	2b07      	cmp	r3, #7
 80114ca:	d119      	bne.n	8011500 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80114cc:	4b99      	ldr	r3, [pc, #612]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80114ce:	2208      	movs	r2, #8
 80114d0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80114d4:	4b98      	ldr	r3, [pc, #608]	; (8011738 <ProcessRadioRxDone+0x830>)
 80114d6:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d11d      	bne.n	801151a <ProcessRadioRxDone+0x612>
 80114de:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80114e2:	f023 031f 	bic.w	r3, r3, #31
 80114e6:	b2db      	uxtb	r3, r3
 80114e8:	2ba0      	cmp	r3, #160	; 0xa0
 80114ea:	d116      	bne.n	801151a <ProcessRadioRxDone+0x612>
 80114ec:	4b92      	ldr	r3, [pc, #584]	; (8011738 <ProcessRadioRxDone+0x830>)
 80114ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d111      	bne.n	801151a <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 80114f6:	4b90      	ldr	r3, [pc, #576]	; (8011738 <ProcessRadioRxDone+0x830>)
 80114f8:	2201      	movs	r2, #1
 80114fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80114fe:	e00c      	b.n	801151a <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011500:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011504:	2b08      	cmp	r3, #8
 8011506:	d104      	bne.n	8011512 <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011508:	4b8a      	ldr	r3, [pc, #552]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801150a:	220a      	movs	r2, #10
 801150c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011510:	e003      	b.n	801151a <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011512:	4b88      	ldr	r3, [pc, #544]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011514:	2201      	movs	r2, #1
 8011516:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	4a85      	ldr	r2, [pc, #532]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801151e:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	4a83      	ldr	r2, [pc, #524]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011526:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 801152a:	f7ff fcc7 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 801152e:	e18f      	b.n	8011850 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011530:	7bfa      	ldrb	r2, [r7, #15]
 8011532:	6939      	ldr	r1, [r7, #16]
 8011534:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8011538:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801153c:	9300      	str	r3, [sp, #0]
 801153e:	460b      	mov	r3, r1
 8011540:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011544:	f005 fd24 	bl	8016f90 <LoRaMacCryptoUnsecureMessage>
 8011548:	4603      	mov	r3, r0
 801154a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801154e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011552:	2b00      	cmp	r3, #0
 8011554:	d00f      	beq.n	8011576 <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 8011556:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801155a:	2b02      	cmp	r3, #2
 801155c:	d104      	bne.n	8011568 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 801155e:	4b75      	ldr	r3, [pc, #468]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011560:	220b      	movs	r2, #11
 8011562:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011566:	e003      	b.n	8011570 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011568:	4b72      	ldr	r3, [pc, #456]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801156a:	220c      	movs	r2, #12
 801156c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011570:	f7ff fca4 	bl	8010ebc <PrepareRxDoneAbort>
                return;
 8011574:	e16c      	b.n	8011850 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011576:	4b6f      	ldr	r3, [pc, #444]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011578:	2200      	movs	r2, #0
 801157a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 801157e:	4a6d      	ldr	r2, [pc, #436]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011580:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011584:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 8011588:	4b6a      	ldr	r3, [pc, #424]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801158a:	2200      	movs	r2, #0
 801158c:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 8011590:	4b68      	ldr	r3, [pc, #416]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011592:	2200      	movs	r2, #0
 8011594:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011598:	693b      	ldr	r3, [r7, #16]
 801159a:	4a66      	ldr	r2, [pc, #408]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801159c:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	4a64      	ldr	r2, [pc, #400]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115a4:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115a8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115ac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	bf14      	ite	ne
 80115b6:	2301      	movne	r3, #1
 80115b8:	2300      	moveq	r3, #0
 80115ba:	b2da      	uxtb	r2, r3
 80115bc:	4b5d      	ldr	r3, [pc, #372]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115be:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115c2:	4b5c      	ldr	r3, [pc, #368]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115c4:	2200      	movs	r2, #0
 80115c6:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115ce:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	bf14      	ite	ne
 80115d8:	2301      	movne	r3, #1
 80115da:	2300      	moveq	r3, #0
 80115dc:	b2da      	uxtb	r2, r3
 80115de:	4b55      	ldr	r3, [pc, #340]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115e0:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115e4:	4b53      	ldr	r3, [pc, #332]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115e6:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d004      	beq.n	80115f8 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 80115ee:	4b51      	ldr	r3, [pc, #324]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80115f0:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d102      	bne.n	80115fe <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 80115f8:	4b4f      	ldr	r3, [pc, #316]	; (8011738 <ProcessRadioRxDone+0x830>)
 80115fa:	2200      	movs	r2, #0
 80115fc:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 80115fe:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011602:	2b01      	cmp	r3, #1
 8011604:	d104      	bne.n	8011610 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 8011606:	4b4b      	ldr	r3, [pc, #300]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011608:	2202      	movs	r2, #2
 801160a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801160e:	e01f      	b.n	8011650 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011610:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8011614:	f023 031f 	bic.w	r3, r3, #31
 8011618:	b2db      	uxtb	r3, r3
 801161a:	2ba0      	cmp	r3, #160	; 0xa0
 801161c:	d110      	bne.n	8011640 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 801161e:	4b46      	ldr	r3, [pc, #280]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011620:	2201      	movs	r2, #1
 8011622:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011626:	4b44      	ldr	r3, [pc, #272]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011628:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 801162c:	2b00      	cmp	r3, #0
 801162e:	d102      	bne.n	8011636 <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011630:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011632:	4a41      	ldr	r2, [pc, #260]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011634:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8011636:	4b3f      	ldr	r3, [pc, #252]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011638:	2201      	movs	r2, #1
 801163a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 801163e:	e007      	b.n	8011650 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011640:	4b3d      	ldr	r3, [pc, #244]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011642:	2200      	movs	r2, #0
 8011644:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011648:	4b3a      	ldr	r3, [pc, #232]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801164a:	2200      	movs	r2, #0
 801164c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011650:	4b39      	ldr	r3, [pc, #228]	; (8011738 <ProcessRadioRxDone+0x830>)
 8011652:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8011656:	2b00      	cmp	r3, #0
 8011658:	d106      	bne.n	8011668 <ProcessRadioRxDone+0x760>
 801165a:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 801165e:	f003 0310 	and.w	r3, r3, #16
 8011662:	b2db      	uxtb	r3, r3
 8011664:	2b00      	cmp	r3, #0
 8011666:	d008      	beq.n	801167a <ProcessRadioRxDone+0x772>
 8011668:	4b33      	ldr	r3, [pc, #204]	; (8011738 <ProcessRadioRxDone+0x830>)
 801166a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801166e:	2b00      	cmp	r3, #0
 8011670:	d103      	bne.n	801167a <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 8011672:	4b30      	ldr	r3, [pc, #192]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011674:	2201      	movs	r2, #1
 8011676:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 801167a:	4b2e      	ldr	r3, [pc, #184]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801167c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011680:	4a2c      	ldr	r2, [pc, #176]	; (8011734 <ProcessRadioRxDone+0x82c>)
 8011682:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 8011686:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 801168a:	4618      	mov	r0, r3
 801168c:	f001 fef2 	bl	8013474 <RemoveMacCommands>

            switch( fType )
 8011690:	7bbb      	ldrb	r3, [r7, #14]
 8011692:	2b03      	cmp	r3, #3
 8011694:	d878      	bhi.n	8011788 <ProcessRadioRxDone+0x880>
 8011696:	a201      	add	r2, pc, #4	; (adr r2, 801169c <ProcessRadioRxDone+0x794>)
 8011698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801169c:	080116ad 	.word	0x080116ad
 80116a0:	080116fd 	.word	0x080116fd
 80116a4:	0801173d 	.word	0x0801173d
 80116a8:	08011763 	.word	0x08011763
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116b0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116b4:	b2db      	uxtb	r3, r3
 80116b6:	461c      	mov	r4, r3
 80116b8:	4b1e      	ldr	r3, [pc, #120]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80116ba:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116be:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116c2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80116c6:	f102 0010 	add.w	r0, r2, #16
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	460b      	mov	r3, r1
 80116ce:	4622      	mov	r2, r4
 80116d0:	2100      	movs	r1, #0
 80116d2:	f000 fef7 	bl	80124c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116d6:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116da:	4b16      	ldr	r3, [pc, #88]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80116dc:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80116e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116e2:	4a14      	ldr	r2, [pc, #80]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80116e4:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 80116e8:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 80116ec:	4b11      	ldr	r3, [pc, #68]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80116ee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 80116f2:	4b10      	ldr	r3, [pc, #64]	; (8011734 <ProcessRadioRxDone+0x82c>)
 80116f4:	2201      	movs	r2, #1
 80116f6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 80116fa:	e04c      	b.n	8011796 <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116fc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011700:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011704:	b2db      	uxtb	r3, r3
 8011706:	461c      	mov	r4, r3
 8011708:	4b0a      	ldr	r3, [pc, #40]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801170a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 801170e:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011712:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011716:	f102 0010 	add.w	r0, r2, #16
 801171a:	9300      	str	r3, [sp, #0]
 801171c:	460b      	mov	r3, r1
 801171e:	4622      	mov	r2, r4
 8011720:	2100      	movs	r1, #0
 8011722:	f000 fecf 	bl	80124c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011726:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801172a:	4b02      	ldr	r3, [pc, #8]	; (8011734 <ProcessRadioRxDone+0x82c>)
 801172c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011730:	e031      	b.n	8011796 <ProcessRadioRxDone+0x88e>
 8011732:	bf00      	nop
 8011734:	200008ec 	.word	0x200008ec
 8011738:	20000df4 	.word	0x20000df4
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 801173c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801173e:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011742:	4b45      	ldr	r3, [pc, #276]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011744:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011748:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	460b      	mov	r3, r1
 8011750:	2100      	movs	r1, #0
 8011752:	f000 feb7 	bl	80124c4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011756:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801175a:	4b3f      	ldr	r3, [pc, #252]	; (8011858 <ProcessRadioRxDone+0x950>)
 801175c:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011760:	e019      	b.n	8011796 <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 8011762:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011766:	4b3c      	ldr	r3, [pc, #240]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011768:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 801176c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801176e:	4a3a      	ldr	r2, [pc, #232]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011770:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011774:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011778:	4b37      	ldr	r3, [pc, #220]	; (8011858 <ProcessRadioRxDone+0x950>)
 801177a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801177e:	4b36      	ldr	r3, [pc, #216]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011780:	2201      	movs	r2, #1
 8011782:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8011786:	e006      	b.n	8011796 <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011788:	4b33      	ldr	r3, [pc, #204]	; (8011858 <ProcessRadioRxDone+0x950>)
 801178a:	2201      	movs	r2, #1
 801178c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 8011790:	f7ff fb94 	bl	8010ebc <PrepareRxDoneAbort>
                    break;
 8011794:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8011796:	4a30      	ldr	r2, [pc, #192]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011798:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801179c:	f043 0302 	orr.w	r3, r3, #2
 80117a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80117a4:	e035      	b.n	8011812 <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80117a6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117ae:	18d1      	adds	r1, r2, r3
 80117b0:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117b4:	b29b      	uxth	r3, r3
 80117b6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80117ba:	1ad3      	subs	r3, r2, r3
 80117bc:	b29b      	uxth	r3, r3
 80117be:	461a      	mov	r2, r3
 80117c0:	4826      	ldr	r0, [pc, #152]	; (801185c <ProcessRadioRxDone+0x954>)
 80117c2:	f008 fb1c 	bl	8019dfe <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80117c6:	4b24      	ldr	r3, [pc, #144]	; (8011858 <ProcessRadioRxDone+0x950>)
 80117c8:	2203      	movs	r2, #3
 80117ca:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117ce:	4b22      	ldr	r3, [pc, #136]	; (8011858 <ProcessRadioRxDone+0x950>)
 80117d0:	2200      	movs	r2, #0
 80117d2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80117d6:	4b20      	ldr	r3, [pc, #128]	; (8011858 <ProcessRadioRxDone+0x950>)
 80117d8:	4a20      	ldr	r2, [pc, #128]	; (801185c <ProcessRadioRxDone+0x954>)
 80117da:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80117de:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80117e2:	b2da      	uxtb	r2, r3
 80117e4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	b2da      	uxtb	r2, r3
 80117ec:	4b1a      	ldr	r3, [pc, #104]	; (8011858 <ProcessRadioRxDone+0x950>)
 80117ee:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 80117f2:	4a19      	ldr	r2, [pc, #100]	; (8011858 <ProcessRadioRxDone+0x950>)
 80117f4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117f8:	f043 0302 	orr.w	r3, r3, #2
 80117fc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011800:	e007      	b.n	8011812 <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011802:	4b15      	ldr	r3, [pc, #84]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011804:	2201      	movs	r2, #1
 8011806:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 801180a:	f7ff fb57 	bl	8010ebc <PrepareRxDoneAbort>
            break;
 801180e:	e000      	b.n	8011812 <ProcessRadioRxDone+0x90a>
            break;
 8011810:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 8011812:	4b11      	ldr	r3, [pc, #68]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011814:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011818:	2b00      	cmp	r3, #0
 801181a:	d008      	beq.n	801182e <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 801181c:	4b0e      	ldr	r3, [pc, #56]	; (8011858 <ProcessRadioRxDone+0x950>)
 801181e:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8011822:	2b00      	cmp	r3, #0
 8011824:	d00b      	beq.n	801183e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011826:	2000      	movs	r0, #0
 8011828:	f000 fcaa 	bl	8012180 <OnAckTimeoutTimerEvent>
 801182c:	e007      	b.n	801183e <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801182e:	4b0c      	ldr	r3, [pc, #48]	; (8011860 <ProcessRadioRxDone+0x958>)
 8011830:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011834:	2b02      	cmp	r3, #2
 8011836:	d102      	bne.n	801183e <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011838:	2000      	movs	r0, #0
 801183a:	f000 fca1 	bl	8012180 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801183e:	4a06      	ldr	r2, [pc, #24]	; (8011858 <ProcessRadioRxDone+0x950>)
 8011840:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011844:	f043 0310 	orr.w	r3, r3, #16
 8011848:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 801184c:	f7ff fa6c 	bl	8010d28 <UpdateRxSlotIdleState>
}
 8011850:	3798      	adds	r7, #152	; 0x98
 8011852:	46bd      	mov	sp, r7
 8011854:	bdb0      	pop	{r4, r5, r7, pc}
 8011856:	bf00      	nop
 8011858:	200008ec 	.word	0x200008ec
 801185c:	20000b24 	.word	0x20000b24
 8011860:	20000df4 	.word	0x20000df4

08011864 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011868:	4b11      	ldr	r3, [pc, #68]	; (80118b0 <ProcessRadioTxTimeout+0x4c>)
 801186a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801186e:	2b02      	cmp	r3, #2
 8011870:	d002      	beq.n	8011878 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 8011872:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <ProcessRadioTxTimeout+0x50>)
 8011874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011876:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011878:	f7ff fa56 	bl	8010d28 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 801187c:	4b0e      	ldr	r3, [pc, #56]	; (80118b8 <ProcessRadioTxTimeout+0x54>)
 801187e:	2202      	movs	r2, #2
 8011880:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8011884:	2002      	movs	r0, #2
 8011886:	f004 fcc7 	bl	8016218 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 801188a:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <ProcessRadioTxTimeout+0x54>)
 801188c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011890:	2b00      	cmp	r3, #0
 8011892:	d003      	beq.n	801189c <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 8011894:	4b08      	ldr	r3, [pc, #32]	; (80118b8 <ProcessRadioTxTimeout+0x54>)
 8011896:	2201      	movs	r2, #1
 8011898:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 801189c:	4a06      	ldr	r2, [pc, #24]	; (80118b8 <ProcessRadioTxTimeout+0x54>)
 801189e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118a2:	f043 0310 	orr.w	r3, r3, #16
 80118a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80118aa:	bf00      	nop
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	20000df4 	.word	0x20000df4
 80118b4:	0801f9d8 	.word	0x0801f9d8
 80118b8:	200008ec 	.word	0x200008ec

080118bc <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	4603      	mov	r3, r0
 80118c4:	460a      	mov	r2, r1
 80118c6:	71fb      	strb	r3, [r7, #7]
 80118c8:	4613      	mov	r3, r2
 80118ca:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80118cc:	2300      	movs	r3, #0
 80118ce:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80118d0:	4b40      	ldr	r3, [pc, #256]	; (80119d4 <HandleRadioRxErrorTimeout+0x118>)
 80118d2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d002      	beq.n	80118e0 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80118da:	4b3f      	ldr	r3, [pc, #252]	; (80119d8 <HandleRadioRxErrorTimeout+0x11c>)
 80118dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118de:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80118e0:	f003 ffdf 	bl	80158a2 <LoRaMacClassBIsBeaconExpected>
 80118e4:	4603      	mov	r3, r0
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d007      	beq.n	80118fa <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80118ea:	2002      	movs	r0, #2
 80118ec:	f003 ff8d 	bl	801580a <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80118f0:	2000      	movs	r0, #0
 80118f2:	f003 ffaf 	bl	8015854 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 80118f6:	2301      	movs	r3, #1
 80118f8:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80118fa:	4b36      	ldr	r3, [pc, #216]	; (80119d4 <HandleRadioRxErrorTimeout+0x118>)
 80118fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011900:	2b01      	cmp	r3, #1
 8011902:	d119      	bne.n	8011938 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011904:	f003 ffd4 	bl	80158b0 <LoRaMacClassBIsPingExpected>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d007      	beq.n	801191e <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801190e:	2000      	movs	r0, #0
 8011910:	f003 ff85 	bl	801581e <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011914:	2000      	movs	r0, #0
 8011916:	f003 ffa6 	bl	8015866 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 801191a:	2301      	movs	r3, #1
 801191c:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 801191e:	f003 ffce 	bl	80158be <LoRaMacClassBIsMulticastExpected>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d007      	beq.n	8011938 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011928:	2000      	movs	r0, #0
 801192a:	f003 ff82 	bl	8015832 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 801192e:	2000      	movs	r0, #0
 8011930:	f003 ffa2 	bl	8015878 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 8011934:	2301      	movs	r3, #1
 8011936:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011938:	7bfb      	ldrb	r3, [r7, #15]
 801193a:	f083 0301 	eor.w	r3, r3, #1
 801193e:	b2db      	uxtb	r3, r3
 8011940:	2b00      	cmp	r3, #0
 8011942:	d040      	beq.n	80119c6 <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8011944:	4b25      	ldr	r3, [pc, #148]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 8011946:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801194a:	2b00      	cmp	r3, #0
 801194c:	d122      	bne.n	8011994 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 801194e:	4b23      	ldr	r3, [pc, #140]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 8011950:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011954:	2b00      	cmp	r3, #0
 8011956:	d003      	beq.n	8011960 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011958:	4a20      	ldr	r2, [pc, #128]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 801195a:	79fb      	ldrb	r3, [r7, #7]
 801195c:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011960:	79fb      	ldrb	r3, [r7, #7]
 8011962:	4618      	mov	r0, r3
 8011964:	f004 fc58 	bl	8016218 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011968:	4b1a      	ldr	r3, [pc, #104]	; (80119d4 <HandleRadioRxErrorTimeout+0x118>)
 801196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801196c:	4618      	mov	r0, r3
 801196e:	f00c fd0d 	bl	801e38c <UTIL_TIMER_GetElapsedTime>
 8011972:	4602      	mov	r2, r0
 8011974:	4b19      	ldr	r3, [pc, #100]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 8011976:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 801197a:	429a      	cmp	r2, r3
 801197c:	d323      	bcc.n	80119c6 <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 801197e:	4818      	ldr	r0, [pc, #96]	; (80119e0 <HandleRadioRxErrorTimeout+0x124>)
 8011980:	f00c fbd8 	bl	801e134 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011984:	4a15      	ldr	r2, [pc, #84]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 8011986:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801198a:	f043 0310 	orr.w	r3, r3, #16
 801198e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8011992:	e018      	b.n	80119c6 <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 8011994:	4b11      	ldr	r3, [pc, #68]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 8011996:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 801199e:	4a0f      	ldr	r2, [pc, #60]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 80119a0:	79bb      	ldrb	r3, [r7, #6]
 80119a2:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80119a6:	79bb      	ldrb	r3, [r7, #6]
 80119a8:	4618      	mov	r0, r3
 80119aa:	f004 fc35 	bl	8016218 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119ae:	4b09      	ldr	r3, [pc, #36]	; (80119d4 <HandleRadioRxErrorTimeout+0x118>)
 80119b0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119b4:	2b02      	cmp	r3, #2
 80119b6:	d006      	beq.n	80119c6 <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119b8:	4a08      	ldr	r2, [pc, #32]	; (80119dc <HandleRadioRxErrorTimeout+0x120>)
 80119ba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119be:	f043 0310 	orr.w	r3, r3, #16
 80119c2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80119c6:	f7ff f9af 	bl	8010d28 <UpdateRxSlotIdleState>
}
 80119ca:	bf00      	nop
 80119cc:	3710      	adds	r7, #16
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20000df4 	.word	0x20000df4
 80119d8:	0801f9d8 	.word	0x0801f9d8
 80119dc:	200008ec 	.word	0x200008ec
 80119e0:	20000c84 	.word	0x20000c84

080119e4 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 80119e8:	2106      	movs	r1, #6
 80119ea:	2005      	movs	r0, #5
 80119ec:	f7ff ff66 	bl	80118bc <HandleRadioRxErrorTimeout>
}
 80119f0:	bf00      	nop
 80119f2:	bd80      	pop	{r7, pc}

080119f4 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 80119f8:	2104      	movs	r1, #4
 80119fa:	2003      	movs	r0, #3
 80119fc:	f7ff ff5e 	bl	80118bc <HandleRadioRxErrorTimeout>
}
 8011a00:	bf00      	nop
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8011a0e:	607b      	str	r3, [r7, #4]
  return(result);
 8011a10:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011a12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a14:	b672      	cpsid	i
}
 8011a16:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011a18:	4b1d      	ldr	r3, [pc, #116]	; (8011a90 <LoRaMacHandleIrqEvents+0x8c>)
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011a1e:	4b1c      	ldr	r3, [pc, #112]	; (8011a90 <LoRaMacHandleIrqEvents+0x8c>)
 8011a20:	2200      	movs	r2, #0
 8011a22:	601a      	str	r2, [r3, #0]
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	f383 8810 	msr	PRIMASK, r3
}
 8011a2e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d027      	beq.n	8011a86 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011a36:	783b      	ldrb	r3, [r7, #0]
 8011a38:	f003 0310 	and.w	r3, r3, #16
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d001      	beq.n	8011a46 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011a42:	f7ff f989 	bl	8010d58 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011a46:	783b      	ldrb	r3, [r7, #0]
 8011a48:	f003 0308 	and.w	r3, r3, #8
 8011a4c:	b2db      	uxtb	r3, r3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d001      	beq.n	8011a56 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011a52:	f7ff fa59 	bl	8010f08 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011a56:	783b      	ldrb	r3, [r7, #0]
 8011a58:	f003 0304 	and.w	r3, r3, #4
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d001      	beq.n	8011a66 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011a62:	f7ff feff 	bl	8011864 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011a66:	783b      	ldrb	r3, [r7, #0]
 8011a68:	f003 0302 	and.w	r3, r3, #2
 8011a6c:	b2db      	uxtb	r3, r3
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011a72:	f7ff ffb7 	bl	80119e4 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011a76:	783b      	ldrb	r3, [r7, #0]
 8011a78:	f003 0301 	and.w	r3, r3, #1
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d001      	beq.n	8011a86 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011a82:	f7ff ffb7 	bl	80119f4 <ProcessRadioRxTimeout>
        }
    }
}
 8011a86:	bf00      	nop
 8011a88:	3710      	adds	r7, #16
 8011a8a:	46bd      	mov	sp, r7
 8011a8c:	bd80      	pop	{r7, pc}
 8011a8e:	bf00      	nop
 8011a90:	2000155c 	.word	0x2000155c

08011a94 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011a94:	b480      	push	{r7}
 8011a96:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011a98:	4b0b      	ldr	r3, [pc, #44]	; (8011ac8 <LoRaMacIsBusy+0x34>)
 8011a9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011a9e:	2b01      	cmp	r3, #1
 8011aa0:	d101      	bne.n	8011aa6 <LoRaMacIsBusy+0x12>
    {
        return false;
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	e00c      	b.n	8011ac0 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011aa6:	4b08      	ldr	r3, [pc, #32]	; (8011ac8 <LoRaMacIsBusy+0x34>)
 8011aa8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d106      	bne.n	8011abe <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011ab0:	4b05      	ldr	r3, [pc, #20]	; (8011ac8 <LoRaMacIsBusy+0x34>)
 8011ab2:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d101      	bne.n	8011abe <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011aba:	2300      	movs	r3, #0
 8011abc:	e000      	b.n	8011ac0 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011abe:	2301      	movs	r3, #1
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bc80      	pop	{r7}
 8011ac6:	4770      	bx	lr
 8011ac8:	200008ec 	.word	0x200008ec

08011acc <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011acc:	b480      	push	{r7}
 8011ace:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011ad0:	4b05      	ldr	r3, [pc, #20]	; (8011ae8 <LoRaMacIsStopped+0x1c>)
 8011ad2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d101      	bne.n	8011ade <LoRaMacIsStopped+0x12>
    {
        return true;
 8011ada:	2301      	movs	r3, #1
 8011adc:	e000      	b.n	8011ae0 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bc80      	pop	{r7}
 8011ae6:	4770      	bx	lr
 8011ae8:	200008ec 	.word	0x200008ec

08011aec <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011af6:	4a04      	ldr	r2, [pc, #16]	; (8011b08 <LoRaMacEnableRequests+0x1c>)
 8011af8:	79fb      	ldrb	r3, [r7, #7]
 8011afa:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011afe:	bf00      	nop
 8011b00:	370c      	adds	r7, #12
 8011b02:	46bd      	mov	sp, r7
 8011b04:	bc80      	pop	{r7}
 8011b06:	4770      	bx	lr
 8011b08:	200008ec 	.word	0x200008ec

08011b0c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011b12:	4b2c      	ldr	r3, [pc, #176]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b14:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b18:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011b1a:	4b2a      	ldr	r3, [pc, #168]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d14a      	bne.n	8011bba <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011b24:	4b27      	ldr	r3, [pc, #156]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b26:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	b2db      	uxtb	r3, r3
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d006      	beq.n	8011b42 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011b34:	4a23      	ldr	r2, [pc, #140]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b36:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b3a:	f36f 0300 	bfc	r3, #0, #1
 8011b3e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b42:	4b20      	ldr	r3, [pc, #128]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b44:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b48:	f003 0304 	and.w	r3, r3, #4
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d006      	beq.n	8011b60 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b52:	4a1c      	ldr	r2, [pc, #112]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b54:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b58:	f36f 0382 	bfc	r3, #2, #1
 8011b5c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b60:	2001      	movs	r0, #1
 8011b62:	f7ff ffc3 	bl	8011aec <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011b66:	793b      	ldrb	r3, [r7, #4]
 8011b68:	f003 0301 	and.w	r3, r3, #1
 8011b6c:	b2db      	uxtb	r3, r3
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d005      	beq.n	8011b7e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011b72:	4b14      	ldr	r3, [pc, #80]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b74:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	4813      	ldr	r0, [pc, #76]	; (8011bc8 <LoRaMacHandleRequestEvents+0xbc>)
 8011b7c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011b7e:	793b      	ldrb	r3, [r7, #4]
 8011b80:	f003 0304 	and.w	r3, r3, #4
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d00e      	beq.n	8011ba8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011b8a:	4810      	ldr	r0, [pc, #64]	; (8011bcc <LoRaMacHandleRequestEvents+0xc0>)
 8011b8c:	f004 fb92 	bl	80162b4 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011b90:	f004 fbe2 	bl	8016358 <LoRaMacConfirmQueueGetCnt>
 8011b94:	4603      	mov	r3, r0
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d006      	beq.n	8011ba8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011b9a:	4a0a      	ldr	r2, [pc, #40]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011b9c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ba0:	f043 0304 	orr.w	r3, r3, #4
 8011ba4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011ba8:	f003 fea7 	bl	80158fa <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011bac:	4a05      	ldr	r2, [pc, #20]	; (8011bc4 <LoRaMacHandleRequestEvents+0xb8>)
 8011bae:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bb2:	f36f 1304 	bfc	r3, #4, #1
 8011bb6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011bba:	bf00      	nop
 8011bbc:	3708      	adds	r7, #8
 8011bbe:	46bd      	mov	sp, r7
 8011bc0:	bd80      	pop	{r7, pc}
 8011bc2:	bf00      	nop
 8011bc4:	200008ec 	.word	0x200008ec
 8011bc8:	20000d20 	.word	0x20000d20
 8011bcc:	20000d34 	.word	0x20000d34

08011bd0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011bd4:	4b16      	ldr	r3, [pc, #88]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011bd6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011bda:	f003 0308 	and.w	r3, r3, #8
 8011bde:	b2db      	uxtb	r3, r3
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d00d      	beq.n	8011c00 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011be4:	4a12      	ldr	r2, [pc, #72]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011be6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bea:	f36f 03c3 	bfc	r3, #3, #1
 8011bee:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011bf2:	4b0f      	ldr	r3, [pc, #60]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011bf4:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011bf8:	68db      	ldr	r3, [r3, #12]
 8011bfa:	490e      	ldr	r1, [pc, #56]	; (8011c34 <LoRaMacHandleIndicationEvents+0x64>)
 8011bfc:	480e      	ldr	r0, [pc, #56]	; (8011c38 <LoRaMacHandleIndicationEvents+0x68>)
 8011bfe:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011c00:	4b0b      	ldr	r3, [pc, #44]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011c02:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c06:	f003 0302 	and.w	r3, r3, #2
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00d      	beq.n	8011c2c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011c10:	4a07      	ldr	r2, [pc, #28]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011c12:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c16:	f36f 0341 	bfc	r3, #1, #1
 8011c1a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011c1e:	4b04      	ldr	r3, [pc, #16]	; (8011c30 <LoRaMacHandleIndicationEvents+0x60>)
 8011c20:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c24:	685b      	ldr	r3, [r3, #4]
 8011c26:	4903      	ldr	r1, [pc, #12]	; (8011c34 <LoRaMacHandleIndicationEvents+0x64>)
 8011c28:	4804      	ldr	r0, [pc, #16]	; (8011c3c <LoRaMacHandleIndicationEvents+0x6c>)
 8011c2a:	4798      	blx	r3
    }
}
 8011c2c:	bf00      	nop
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	200008ec 	.word	0x200008ec
 8011c34:	20000d68 	.word	0x20000d68
 8011c38:	20000d48 	.word	0x20000d48
 8011c3c:	20000d04 	.word	0x20000d04

08011c40 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c46:	4b32      	ldr	r3, [pc, #200]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c48:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c4c:	f003 0301 	and.w	r3, r3, #1
 8011c50:	b2db      	uxtb	r3, r3
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d058      	beq.n	8011d08 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011c56:	2300      	movs	r3, #0
 8011c58:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c5e:	4b2c      	ldr	r3, [pc, #176]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c60:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d004      	beq.n	8011c72 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011c68:	4b29      	ldr	r3, [pc, #164]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c6a:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c6e:	2b03      	cmp	r3, #3
 8011c70:	d104      	bne.n	8011c7c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011c72:	f002 f82d 	bl	8013cd0 <CheckRetransUnconfirmedUplink>
 8011c76:	4603      	mov	r3, r0
 8011c78:	71fb      	strb	r3, [r7, #7]
 8011c7a:	e020      	b.n	8011cbe <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011c7c:	4b24      	ldr	r3, [pc, #144]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c7e:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c82:	2b01      	cmp	r3, #1
 8011c84:	d11b      	bne.n	8011cbe <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011c86:	4b22      	ldr	r3, [pc, #136]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c88:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d014      	beq.n	8011cba <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011c90:	f002 f84a 	bl	8013d28 <CheckRetransConfirmedUplink>
 8011c94:	4603      	mov	r3, r0
 8011c96:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011c98:	4b1e      	ldr	r3, [pc, #120]	; (8011d14 <LoRaMacHandleMcpsRequest+0xd4>)
 8011c9a:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d10d      	bne.n	8011cbe <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011ca2:	79fb      	ldrb	r3, [r7, #7]
 8011ca4:	f083 0301 	eor.w	r3, r3, #1
 8011ca8:	b2db      	uxtb	r3, r3
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d002      	beq.n	8011cb4 <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011cae:	f002 f8cd 	bl	8013e4c <AckTimeoutRetriesProcess>
 8011cb2:	e004      	b.n	8011cbe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011cb4:	f002 f908 	bl	8013ec8 <AckTimeoutRetriesFinalize>
 8011cb8:	e001      	b.n	8011cbe <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011cbe:	79fb      	ldrb	r3, [r7, #7]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d00d      	beq.n	8011ce0 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011cc4:	4814      	ldr	r0, [pc, #80]	; (8011d18 <LoRaMacHandleMcpsRequest+0xd8>)
 8011cc6:	f00c fa35 	bl	801e134 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011cca:	4b11      	ldr	r3, [pc, #68]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ccc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011cd0:	f023 0320 	bic.w	r3, r3, #32
 8011cd4:	4a0e      	ldr	r2, [pc, #56]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cd6:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011cda:	f002 f847 	bl	8013d6c <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011cde:	e013      	b.n	8011d08 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011ce0:	79bb      	ldrb	r3, [r7, #6]
 8011ce2:	f083 0301 	eor.w	r3, r3, #1
 8011ce6:	b2db      	uxtb	r3, r3
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00d      	beq.n	8011d08 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011cec:	4a08      	ldr	r2, [pc, #32]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cee:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011cf2:	f36f 1304 	bfc	r3, #4, #1
 8011cf6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011cfa:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011d02:	2000      	movs	r0, #0
 8011d04:	f000 f992 	bl	801202c <OnTxDelayedTimerEvent>
}
 8011d08:	bf00      	nop
 8011d0a:	3708      	adds	r7, #8
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd80      	pop	{r7, pc}
 8011d10:	200008ec 	.word	0x200008ec
 8011d14:	20000df4 	.word	0x20000df4
 8011d18:	20000c54 	.word	0x20000c54

08011d1c <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d20:	4b1b      	ldr	r3, [pc, #108]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d22:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d26:	f003 0304 	and.w	r3, r3, #4
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d02c      	beq.n	8011d8a <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011d30:	2001      	movs	r0, #1
 8011d32:	f004 faa5 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d012      	beq.n	8011d62 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011d3c:	2001      	movs	r0, #1
 8011d3e:	f004 fa41 	bl	80161c4 <LoRaMacConfirmQueueGetStatus>
 8011d42:	4603      	mov	r3, r0
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d103      	bne.n	8011d50 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011d48:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d50:	4b0f      	ldr	r3, [pc, #60]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d56:	f023 0302 	bic.w	r3, r3, #2
 8011d5a:	4a0d      	ldr	r2, [pc, #52]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d5c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011d60:	e013      	b.n	8011d8a <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d62:	2006      	movs	r0, #6
 8011d64:	f004 fa8c 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d105      	bne.n	8011d7a <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011d6e:	2007      	movs	r0, #7
 8011d70:	f004 fa86 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011d74:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d007      	beq.n	8011d8a <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d7a:	4b05      	ldr	r3, [pc, #20]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d7c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d80:	f023 0302 	bic.w	r3, r3, #2
 8011d84:	4a02      	ldr	r2, [pc, #8]	; (8011d90 <LoRaMacHandleMlmeRequest+0x74>)
 8011d86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011d8a:	bf00      	nop
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	200008ec 	.word	0x200008ec

08011d94 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011d98:	200c      	movs	r0, #12
 8011d9a:	f004 fa71 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d019      	beq.n	8011dd8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011da4:	4b0e      	ldr	r3, [pc, #56]	; (8011de0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011da6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011daa:	f003 0301 	and.w	r3, r3, #1
 8011dae:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d111      	bne.n	8011dd8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011db4:	4b0a      	ldr	r3, [pc, #40]	; (8011de0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011db6:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dba:	f003 0304 	and.w	r3, r3, #4
 8011dbe:	b2db      	uxtb	r3, r3
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d009      	beq.n	8011dd8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011dc4:	4b06      	ldr	r3, [pc, #24]	; (8011de0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dc6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dca:	f023 0302 	bic.w	r3, r3, #2
 8011dce:	4a04      	ldr	r2, [pc, #16]	; (8011de0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dd0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011dd4:	2301      	movs	r3, #1
 8011dd6:	e000      	b.n	8011dda <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011dd8:	2300      	movs	r3, #0
}
 8011dda:	4618      	mov	r0, r3
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	200008ec 	.word	0x200008ec

08011de4 <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011de4:	b480      	push	{r7}
 8011de6:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011de8:	4b0d      	ldr	r3, [pc, #52]	; (8011e20 <LoRaMacCheckForRxAbort+0x3c>)
 8011dea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d00f      	beq.n	8011e16 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011df6:	4b0a      	ldr	r3, [pc, #40]	; (8011e20 <LoRaMacCheckForRxAbort+0x3c>)
 8011df8:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011dfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e00:	4a07      	ldr	r2, [pc, #28]	; (8011e20 <LoRaMacCheckForRxAbort+0x3c>)
 8011e02:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e06:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <LoRaMacCheckForRxAbort+0x3c>)
 8011e08:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e0c:	f023 0302 	bic.w	r3, r3, #2
 8011e10:	4a03      	ldr	r2, [pc, #12]	; (8011e20 <LoRaMacCheckForRxAbort+0x3c>)
 8011e12:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011e16:	bf00      	nop
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bc80      	pop	{r7}
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop
 8011e20:	200008ec 	.word	0x200008ec

08011e24 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011e24:	b580      	push	{r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011e30:	2300      	movs	r3, #0
 8011e32:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011e34:	4b50      	ldr	r3, [pc, #320]	; (8011f78 <LoRaMacHandleNvm+0x154>)
 8011e36:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	f040 8098 	bne.w	8011f70 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	2124      	movs	r1, #36	; 0x24
 8011e44:	4618      	mov	r0, r3
 8011e46:	f008 f82f 	bl	8019ea8 <Crc32>
 8011e4a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e50:	68ba      	ldr	r2, [r7, #8]
 8011e52:	429a      	cmp	r2, r3
 8011e54:	d006      	beq.n	8011e64 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	68ba      	ldr	r2, [r7, #8]
 8011e5a:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011e5c:	89fb      	ldrh	r3, [r7, #14]
 8011e5e:	f043 0301 	orr.w	r3, r3, #1
 8011e62:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	3328      	adds	r3, #40	; 0x28
 8011e68:	211c      	movs	r1, #28
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f008 f81c 	bl	8019ea8 <Crc32>
 8011e70:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e76:	68ba      	ldr	r2, [r7, #8]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d006      	beq.n	8011e8a <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	68ba      	ldr	r2, [r7, #8]
 8011e80:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011e82:	89fb      	ldrh	r3, [r7, #14]
 8011e84:	f043 0302 	orr.w	r3, r3, #2
 8011e88:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	3348      	adds	r3, #72	; 0x48
 8011e8e:	21fc      	movs	r1, #252	; 0xfc
 8011e90:	4618      	mov	r0, r3
 8011e92:	f008 f809 	bl	8019ea8 <Crc32>
 8011e96:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011e9e:	68ba      	ldr	r2, [r7, #8]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d007      	beq.n	8011eb4 <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	68ba      	ldr	r2, [r7, #8]
 8011ea8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011eac:	89fb      	ldrh	r3, [r7, #14]
 8011eae:	f043 0304 	orr.w	r3, r3, #4
 8011eb2:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011eba:	21d4      	movs	r1, #212	; 0xd4
 8011ebc:	4618      	mov	r0, r3
 8011ebe:	f007 fff3 	bl	8019ea8 <Crc32>
 8011ec2:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	429a      	cmp	r2, r3
 8011ece:	d007      	beq.n	8011ee0 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	68ba      	ldr	r2, [r7, #8]
 8011ed4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011ed8:	89fb      	ldrh	r3, [r7, #14]
 8011eda:	f043 0308 	orr.w	r3, r3, #8
 8011ede:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011ee6:	2190      	movs	r1, #144	; 0x90
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f007 ffdd 	bl	8019ea8 <Crc32>
 8011eee:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011ef6:	68ba      	ldr	r2, [r7, #8]
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d007      	beq.n	8011f0c <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	68ba      	ldr	r2, [r7, #8]
 8011f00:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011f04:	89fb      	ldrh	r3, [r7, #14]
 8011f06:	f043 0310 	orr.w	r3, r3, #16
 8011f0a:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011f12:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011f16:	4618      	mov	r0, r3
 8011f18:	f007 ffc6 	bl	8019ea8 <Crc32>
 8011f1c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011f24:	68ba      	ldr	r2, [r7, #8]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d007      	beq.n	8011f3a <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011f32:	89fb      	ldrh	r3, [r7, #14]
 8011f34:	f043 0320 	orr.w	r3, r3, #32
 8011f38:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011f40:	2114      	movs	r1, #20
 8011f42:	4618      	mov	r0, r3
 8011f44:	f007 ffb0 	bl	8019ea8 <Crc32>
 8011f48:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011f50:	68ba      	ldr	r2, [r7, #8]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	d007      	beq.n	8011f66 <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	68ba      	ldr	r2, [r7, #8]
 8011f5a:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011f5e:	89fb      	ldrh	r3, [r7, #14]
 8011f60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f64:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011f66:	89fb      	ldrh	r3, [r7, #14]
 8011f68:	4618      	mov	r0, r3
 8011f6a:	f001 ff51 	bl	8013e10 <CallNvmDataChangeCallback>
 8011f6e:	e000      	b.n	8011f72 <LoRaMacHandleNvm+0x14e>
        return;
 8011f70:	bf00      	nop
}
 8011f72:	3710      	adds	r7, #16
 8011f74:	46bd      	mov	sp, r7
 8011f76:	bd80      	pop	{r7, pc}
 8011f78:	200008ec 	.word	0x200008ec

08011f7c <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011f82:	2300      	movs	r3, #0
 8011f84:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011f86:	f7ff fd3d 	bl	8011a04 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011f8a:	f003 fd1a 	bl	80159c2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011f8e:	4b25      	ldr	r3, [pc, #148]	; (8012024 <LoRaMacProcess+0xa8>)
 8011f90:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011f94:	f003 0310 	and.w	r3, r3, #16
 8011f98:	b2db      	uxtb	r3, r3
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d023      	beq.n	8011fe6 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011f9e:	2000      	movs	r0, #0
 8011fa0:	f7ff fda4 	bl	8011aec <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011fa4:	f7ff ff1e 	bl	8011de4 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011fa8:	f001 ffc2 	bl	8013f30 <IsRequestPending>
 8011fac:	4603      	mov	r3, r0
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d006      	beq.n	8011fc0 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011fb2:	f7ff feef 	bl	8011d94 <LoRaMacCheckForBeaconAcquisition>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	461a      	mov	r2, r3
 8011fba:	79fb      	ldrb	r3, [r7, #7]
 8011fbc:	4313      	orrs	r3, r2
 8011fbe:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011fc0:	79fb      	ldrb	r3, [r7, #7]
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d103      	bne.n	8011fce <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011fc6:	f7ff fea9 	bl	8011d1c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011fca:	f7ff fe39 	bl	8011c40 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011fce:	f7ff fd9d 	bl	8011b0c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011fd2:	2001      	movs	r0, #1
 8011fd4:	f7ff fd8a 	bl	8011aec <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011fd8:	4a12      	ldr	r2, [pc, #72]	; (8012024 <LoRaMacProcess+0xa8>)
 8011fda:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011fde:	f043 0320 	orr.w	r3, r3, #32
 8011fe2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011fe6:	f7ff fdf3 	bl	8011bd0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8011fea:	4b0e      	ldr	r3, [pc, #56]	; (8012024 <LoRaMacProcess+0xa8>)
 8011fec:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d101      	bne.n	8011ff8 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 8011ff4:	f001 fbb8 	bl	8013768 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8011ff8:	4b0a      	ldr	r3, [pc, #40]	; (8012024 <LoRaMacProcess+0xa8>)
 8011ffa:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011ffe:	f003 0320 	and.w	r3, r3, #32
 8012002:	b2db      	uxtb	r3, r3
 8012004:	2b00      	cmp	r3, #0
 8012006:	d009      	beq.n	801201c <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8012008:	4a06      	ldr	r2, [pc, #24]	; (8012024 <LoRaMacProcess+0xa8>)
 801200a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801200e:	f36f 1345 	bfc	r3, #5, #1
 8012012:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 8012016:	4804      	ldr	r0, [pc, #16]	; (8012028 <LoRaMacProcess+0xac>)
 8012018:	f7ff ff04 	bl	8011e24 <LoRaMacHandleNvm>
    }
}
 801201c:	bf00      	nop
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	200008ec 	.word	0x200008ec
 8012028:	20000df4 	.word	0x20000df4

0801202c <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b082      	sub	sp, #8
 8012030:	af00      	add	r7, sp, #0
 8012032:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 8012034:	4817      	ldr	r0, [pc, #92]	; (8012094 <OnTxDelayedTimerEvent+0x68>)
 8012036:	f00c f87d 	bl	801e134 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 801203a:	4b17      	ldr	r3, [pc, #92]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 801203c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012040:	f023 0320 	bic.w	r3, r3, #32
 8012044:	4a14      	ldr	r2, [pc, #80]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 8012046:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 801204a:	2001      	movs	r0, #1
 801204c:	f001 f8e4 	bl	8013218 <ScheduleTx>
 8012050:	4603      	mov	r3, r0
 8012052:	2b00      	cmp	r3, #0
 8012054:	d018      	beq.n	8012088 <OnTxDelayedTimerEvent+0x5c>
 8012056:	2b0b      	cmp	r3, #11
 8012058:	d016      	beq.n	8012088 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801205a:	4b10      	ldr	r3, [pc, #64]	; (801209c <OnTxDelayedTimerEvent+0x70>)
 801205c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012060:	b2da      	uxtb	r2, r3
 8012062:	4b0d      	ldr	r3, [pc, #52]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 8012064:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012068:	4b0b      	ldr	r3, [pc, #44]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 801206a:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 801206e:	4b0a      	ldr	r3, [pc, #40]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 8012070:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8012074:	4b08      	ldr	r3, [pc, #32]	; (8012098 <OnTxDelayedTimerEvent+0x6c>)
 8012076:	2209      	movs	r2, #9
 8012078:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 801207c:	2009      	movs	r0, #9
 801207e:	f004 f8cb 	bl	8016218 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8012082:	f001 fe73 	bl	8013d6c <StopRetransmission>
            break;
 8012086:	e000      	b.n	801208a <OnTxDelayedTimerEvent+0x5e>
            break;
 8012088:	bf00      	nop
        }
    }
}
 801208a:	bf00      	nop
 801208c:	3708      	adds	r7, #8
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	20000c54 	.word	0x20000c54
 8012098:	200008ec 	.word	0x200008ec
 801209c:	20000df4 	.word	0x20000df4

080120a0 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80120a0:	b580      	push	{r7, lr}
 80120a2:	b082      	sub	sp, #8
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80120a8:	4b14      	ldr	r3, [pc, #80]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120aa:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120ae:	4b13      	ldr	r3, [pc, #76]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120b0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80120b4:	4b12      	ldr	r3, [pc, #72]	; (8012100 <OnRxWindow1TimerEvent+0x60>)
 80120b6:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80120ba:	b25a      	sxtb	r2, r3
 80120bc:	4b0f      	ldr	r3, [pc, #60]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120be:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120c2:	4b0f      	ldr	r3, [pc, #60]	; (8012100 <OnRxWindow1TimerEvent+0x60>)
 80120c4:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80120c8:	4b0c      	ldr	r3, [pc, #48]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120ca:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80120ce:	4b0c      	ldr	r3, [pc, #48]	; (8012100 <OnRxWindow1TimerEvent+0x60>)
 80120d0:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80120d4:	4b09      	ldr	r3, [pc, #36]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120d6:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80120da:	4b08      	ldr	r3, [pc, #32]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120dc:	2200      	movs	r2, #0
 80120de:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80120e2:	4b06      	ldr	r3, [pc, #24]	; (80120fc <OnRxWindow1TimerEvent+0x5c>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 80120ea:	4906      	ldr	r1, [pc, #24]	; (8012104 <OnRxWindow1TimerEvent+0x64>)
 80120ec:	4806      	ldr	r0, [pc, #24]	; (8012108 <OnRxWindow1TimerEvent+0x68>)
 80120ee:	f001 fb07 	bl	8013700 <RxWindowSetup>
}
 80120f2:	bf00      	nop
 80120f4:	3708      	adds	r7, #8
 80120f6:	46bd      	mov	sp, r7
 80120f8:	bd80      	pop	{r7, pc}
 80120fa:	bf00      	nop
 80120fc:	200008ec 	.word	0x200008ec
 8012100:	20000df4 	.word	0x20000df4
 8012104:	20000ca4 	.word	0x20000ca4
 8012108:	20000c6c 	.word	0x20000c6c

0801210c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8012114:	4b16      	ldr	r3, [pc, #88]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012116:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 801211a:	2b00      	cmp	r3, #0
 801211c:	d023      	beq.n	8012166 <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801211e:	4b14      	ldr	r3, [pc, #80]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012120:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012124:	4b12      	ldr	r3, [pc, #72]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012126:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801212a:	4b12      	ldr	r3, [pc, #72]	; (8012174 <OnRxWindow2TimerEvent+0x68>)
 801212c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801212e:	4a10      	ldr	r2, [pc, #64]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012130:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012134:	4b0f      	ldr	r3, [pc, #60]	; (8012174 <OnRxWindow2TimerEvent+0x68>)
 8012136:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801213a:	4b0d      	ldr	r3, [pc, #52]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 801213c:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012140:	4b0c      	ldr	r3, [pc, #48]	; (8012174 <OnRxWindow2TimerEvent+0x68>)
 8012142:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012146:	4b0a      	ldr	r3, [pc, #40]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012148:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 801214c:	4b08      	ldr	r3, [pc, #32]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 801214e:	2200      	movs	r2, #0
 8012150:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8012154:	4b06      	ldr	r3, [pc, #24]	; (8012170 <OnRxWindow2TimerEvent+0x64>)
 8012156:	2201      	movs	r2, #1
 8012158:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 801215c:	4906      	ldr	r1, [pc, #24]	; (8012178 <OnRxWindow2TimerEvent+0x6c>)
 801215e:	4807      	ldr	r0, [pc, #28]	; (801217c <OnRxWindow2TimerEvent+0x70>)
 8012160:	f001 face 	bl	8013700 <RxWindowSetup>
 8012164:	e000      	b.n	8012168 <OnRxWindow2TimerEvent+0x5c>
        return;
 8012166:	bf00      	nop
}
 8012168:	3708      	adds	r7, #8
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}
 801216e:	bf00      	nop
 8012170:	200008ec 	.word	0x200008ec
 8012174:	20000df4 	.word	0x20000df4
 8012178:	20000cb8 	.word	0x20000cb8
 801217c:	20000c84 	.word	0x20000c84

08012180 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 8012188:	480e      	ldr	r0, [pc, #56]	; (80121c4 <OnAckTimeoutTimerEvent+0x44>)
 801218a:	f00b ffd3 	bl	801e134 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 801218e:	4b0e      	ldr	r3, [pc, #56]	; (80121c8 <OnAckTimeoutTimerEvent+0x48>)
 8012190:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8012194:	2b00      	cmp	r3, #0
 8012196:	d003      	beq.n	80121a0 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 8012198:	4b0b      	ldr	r3, [pc, #44]	; (80121c8 <OnAckTimeoutTimerEvent+0x48>)
 801219a:	2201      	movs	r2, #1
 801219c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80121a0:	4b0a      	ldr	r3, [pc, #40]	; (80121cc <OnAckTimeoutTimerEvent+0x4c>)
 80121a2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121a6:	2b02      	cmp	r3, #2
 80121a8:	d106      	bne.n	80121b8 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80121aa:	4a07      	ldr	r2, [pc, #28]	; (80121c8 <OnAckTimeoutTimerEvent+0x48>)
 80121ac:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80121b0:	f043 0310 	orr.w	r3, r3, #16
 80121b4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80121b8:	f001 fe14 	bl	8013de4 <OnMacProcessNotify>
}
 80121bc:	bf00      	nop
 80121be:	3708      	adds	r7, #8
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	20000ce0 	.word	0x20000ce0
 80121c8:	200008ec 	.word	0x200008ec
 80121cc:	20000df4 	.word	0x20000df4

080121d0 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80121d0:	b580      	push	{r7, lr}
 80121d2:	b084      	sub	sp, #16
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	60ba      	str	r2, [r7, #8]
 80121d8:	607b      	str	r3, [r7, #4]
 80121da:	4603      	mov	r3, r0
 80121dc:	73fb      	strb	r3, [r7, #15]
 80121de:	460b      	mov	r3, r1
 80121e0:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d005      	beq.n	80121f4 <GetFCntDown+0x24>
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d002      	beq.n	80121f4 <GetFCntDown+0x24>
 80121ee:	6a3b      	ldr	r3, [r7, #32]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d101      	bne.n	80121f8 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80121f4:	230a      	movs	r3, #10
 80121f6:	e029      	b.n	801224c <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 80121f8:	7bfb      	ldrb	r3, [r7, #15]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d016      	beq.n	801222c <GetFCntDown+0x5c>
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d118      	bne.n	8012234 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 8012202:	79bb      	ldrb	r3, [r7, #6]
 8012204:	2b01      	cmp	r3, #1
 8012206:	d10d      	bne.n	8012224 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012208:	7bbb      	ldrb	r3, [r7, #14]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d002      	beq.n	8012214 <GetFCntDown+0x44>
 801220e:	7bbb      	ldrb	r3, [r7, #14]
 8012210:	2b03      	cmp	r3, #3
 8012212:	d103      	bne.n	801221c <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 8012214:	69fb      	ldr	r3, [r7, #28]
 8012216:	2202      	movs	r2, #2
 8012218:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 801221a:	e00d      	b.n	8012238 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 801221c:	69fb      	ldr	r3, [r7, #28]
 801221e:	2201      	movs	r2, #1
 8012220:	701a      	strb	r2, [r3, #0]
            break;
 8012222:	e009      	b.n	8012238 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 8012224:	69fb      	ldr	r3, [r7, #28]
 8012226:	2203      	movs	r2, #3
 8012228:	701a      	strb	r2, [r3, #0]
            break;
 801222a:	e005      	b.n	8012238 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	2204      	movs	r2, #4
 8012230:	701a      	strb	r2, [r3, #0]
            break;
 8012232:	e001      	b.n	8012238 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8012234:	2305      	movs	r3, #5
 8012236:	e009      	b.n	801224c <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012238:	69fb      	ldr	r3, [r7, #28]
 801223a:	7818      	ldrb	r0, [r3, #0]
 801223c:	68bb      	ldr	r3, [r7, #8]
 801223e:	89db      	ldrh	r3, [r3, #14]
 8012240:	461a      	mov	r2, r3
 8012242:	8b39      	ldrh	r1, [r7, #24]
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	f004 fc25 	bl	8016a94 <LoRaMacCryptoGetFCntDown>
 801224a:	4603      	mov	r3, r0
}
 801224c:	4618      	mov	r0, r3
 801224e:	3710      	adds	r7, #16
 8012250:	46bd      	mov	sp, r7
 8012252:	bd80      	pop	{r7, pc}

08012254 <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 8012254:	b5b0      	push	{r4, r5, r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	4603      	mov	r3, r0
 801225c:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801225e:	2303      	movs	r3, #3
 8012260:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 8012262:	4b6d      	ldr	r3, [pc, #436]	; (8012418 <SwitchClass+0x1c4>)
 8012264:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012268:	2b02      	cmp	r3, #2
 801226a:	f000 80b9 	beq.w	80123e0 <SwitchClass+0x18c>
 801226e:	2b02      	cmp	r3, #2
 8012270:	f300 80cc 	bgt.w	801240c <SwitchClass+0x1b8>
 8012274:	2b00      	cmp	r3, #0
 8012276:	d003      	beq.n	8012280 <SwitchClass+0x2c>
 8012278:	2b01      	cmp	r3, #1
 801227a:	f000 80a3 	beq.w	80123c4 <SwitchClass+0x170>
 801227e:	e0c5      	b.n	801240c <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012280:	79fb      	ldrb	r3, [r7, #7]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d109      	bne.n	801229a <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8012286:	4b64      	ldr	r3, [pc, #400]	; (8012418 <SwitchClass+0x1c4>)
 8012288:	4a63      	ldr	r2, [pc, #396]	; (8012418 <SwitchClass+0x1c4>)
 801228a:	3374      	adds	r3, #116	; 0x74
 801228c:	326c      	adds	r2, #108	; 0x6c
 801228e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012292:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 8012296:	2300      	movs	r3, #0
 8012298:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 801229a:	79fb      	ldrb	r3, [r7, #7]
 801229c:	2b01      	cmp	r3, #1
 801229e:	d10c      	bne.n	80122ba <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80122a0:	79fb      	ldrb	r3, [r7, #7]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f003 fb2f 	bl	8015906 <LoRaMacClassBSwitchClass>
 80122a8:	4603      	mov	r3, r0
 80122aa:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80122ac:	7bfb      	ldrb	r3, [r7, #15]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d103      	bne.n	80122ba <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80122b2:	4a59      	ldr	r2, [pc, #356]	; (8012418 <SwitchClass+0x1c4>)
 80122b4:	79fb      	ldrb	r3, [r7, #7]
 80122b6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80122ba:	79fb      	ldrb	r3, [r7, #7]
 80122bc:	2b02      	cmp	r3, #2
 80122be:	f040 80a0 	bne.w	8012402 <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80122c2:	4a55      	ldr	r2, [pc, #340]	; (8012418 <SwitchClass+0x1c4>)
 80122c4:	79fb      	ldrb	r3, [r7, #7]
 80122c6:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122ca:	4a54      	ldr	r2, [pc, #336]	; (801241c <SwitchClass+0x1c8>)
 80122cc:	4b53      	ldr	r3, [pc, #332]	; (801241c <SwitchClass+0x1c8>)
 80122ce:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80122d2:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80122d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122da:	682b      	ldr	r3, [r5, #0]
 80122dc:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122de:	4b4f      	ldr	r3, [pc, #316]	; (801241c <SwitchClass+0x1c8>)
 80122e0:	2202      	movs	r2, #2
 80122e2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80122e6:	2300      	movs	r3, #0
 80122e8:	73bb      	strb	r3, [r7, #14]
 80122ea:	e05b      	b.n	80123a4 <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 80122ec:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80122f0:	4949      	ldr	r1, [pc, #292]	; (8012418 <SwitchClass+0x1c4>)
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	011b      	lsls	r3, r3, #4
 80122fa:	440b      	add	r3, r1
 80122fc:	33e9      	adds	r3, #233	; 0xe9
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d049      	beq.n	8012398 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 8012304:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012308:	4943      	ldr	r1, [pc, #268]	; (8012418 <SwitchClass+0x1c4>)
 801230a:	4613      	mov	r3, r2
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	4413      	add	r3, r2
 8012310:	011b      	lsls	r3, r3, #4
 8012312:	440b      	add	r3, r1
 8012314:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012318:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 801231a:	2b02      	cmp	r3, #2
 801231c:	d13c      	bne.n	8012398 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 801231e:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012322:	493d      	ldr	r1, [pc, #244]	; (8012418 <SwitchClass+0x1c4>)
 8012324:	4613      	mov	r3, r2
 8012326:	005b      	lsls	r3, r3, #1
 8012328:	4413      	add	r3, r2
 801232a:	011b      	lsls	r3, r3, #4
 801232c:	440b      	add	r3, r1
 801232e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	4a38      	ldr	r2, [pc, #224]	; (8012418 <SwitchClass+0x1c4>)
 8012336:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8012338:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801233c:	4936      	ldr	r1, [pc, #216]	; (8012418 <SwitchClass+0x1c4>)
 801233e:	4613      	mov	r3, r2
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	4413      	add	r3, r2
 8012344:	011b      	lsls	r3, r3, #4
 8012346:	440b      	add	r3, r1
 8012348:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801234c:	f993 3000 	ldrsb.w	r3, [r3]
 8012350:	b2da      	uxtb	r2, r3
 8012352:	4b31      	ldr	r3, [pc, #196]	; (8012418 <SwitchClass+0x1c4>)
 8012354:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012358:	4b30      	ldr	r3, [pc, #192]	; (801241c <SwitchClass+0x1c8>)
 801235a:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 801235e:	4b2f      	ldr	r3, [pc, #188]	; (801241c <SwitchClass+0x1c8>)
 8012360:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8012364:	4b2c      	ldr	r3, [pc, #176]	; (8012418 <SwitchClass+0x1c4>)
 8012366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012368:	4a2c      	ldr	r2, [pc, #176]	; (801241c <SwitchClass+0x1c8>)
 801236a:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801236e:	4b2a      	ldr	r3, [pc, #168]	; (8012418 <SwitchClass+0x1c4>)
 8012370:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012374:	4b29      	ldr	r3, [pc, #164]	; (801241c <SwitchClass+0x1c8>)
 8012376:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801237a:	4b27      	ldr	r3, [pc, #156]	; (8012418 <SwitchClass+0x1c4>)
 801237c:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012380:	4b26      	ldr	r3, [pc, #152]	; (801241c <SwitchClass+0x1c8>)
 8012382:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8012386:	4b25      	ldr	r3, [pc, #148]	; (801241c <SwitchClass+0x1c8>)
 8012388:	2203      	movs	r2, #3
 801238a:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 801238e:	4b23      	ldr	r3, [pc, #140]	; (801241c <SwitchClass+0x1c8>)
 8012390:	2201      	movs	r2, #1
 8012392:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 8012396:	e009      	b.n	80123ac <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8012398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801239c:	b2db      	uxtb	r3, r3
 801239e:	3301      	adds	r3, #1
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	73bb      	strb	r3, [r7, #14]
 80123a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	dd9f      	ble.n	80122ec <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80123ac:	4b1b      	ldr	r3, [pc, #108]	; (801241c <SwitchClass+0x1c8>)
 80123ae:	2200      	movs	r2, #0
 80123b0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80123b4:	4b1a      	ldr	r3, [pc, #104]	; (8012420 <SwitchClass+0x1cc>)
 80123b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123b8:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80123ba:	f001 f9d5 	bl	8013768 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80123c2:	e01e      	b.n	8012402 <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80123c4:	79fb      	ldrb	r3, [r7, #7]
 80123c6:	4618      	mov	r0, r3
 80123c8:	f003 fa9d 	bl	8015906 <LoRaMacClassBSwitchClass>
 80123cc:	4603      	mov	r3, r0
 80123ce:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80123d0:	7bfb      	ldrb	r3, [r7, #15]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d117      	bne.n	8012406 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123d6:	4a10      	ldr	r2, [pc, #64]	; (8012418 <SwitchClass+0x1c4>)
 80123d8:	79fb      	ldrb	r3, [r7, #7]
 80123da:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80123de:	e012      	b.n	8012406 <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80123e0:	79fb      	ldrb	r3, [r7, #7]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d111      	bne.n	801240a <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80123e6:	4b0d      	ldr	r3, [pc, #52]	; (801241c <SwitchClass+0x1c8>)
 80123e8:	2206      	movs	r2, #6
 80123ea:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123ee:	4a0a      	ldr	r2, [pc, #40]	; (8012418 <SwitchClass+0x1c4>)
 80123f0:	79fb      	ldrb	r3, [r7, #7]
 80123f2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 80123f6:	4b0a      	ldr	r3, [pc, #40]	; (8012420 <SwitchClass+0x1cc>)
 80123f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123fa:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 80123fc:	2300      	movs	r3, #0
 80123fe:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012400:	e003      	b.n	801240a <SwitchClass+0x1b6>
            break;
 8012402:	bf00      	nop
 8012404:	e002      	b.n	801240c <SwitchClass+0x1b8>
            break;
 8012406:	bf00      	nop
 8012408:	e000      	b.n	801240c <SwitchClass+0x1b8>
            break;
 801240a:	bf00      	nop
        }
    }

    return status;
 801240c:	7bfb      	ldrb	r3, [r7, #15]
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bdb0      	pop	{r4, r5, r7, pc}
 8012416:	bf00      	nop
 8012418:	20000df4 	.word	0x20000df4
 801241c:	200008ec 	.word	0x200008ec
 8012420:	0801f9d8 	.word	0x0801f9d8

08012424 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b086      	sub	sp, #24
 8012428:	af00      	add	r7, sp, #0
 801242a:	4603      	mov	r3, r0
 801242c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801242e:	4b10      	ldr	r3, [pc, #64]	; (8012470 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012430:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012434:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 8012436:	79fb      	ldrb	r3, [r7, #7]
 8012438:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 801243a:	230d      	movs	r3, #13
 801243c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 801243e:	4b0c      	ldr	r3, [pc, #48]	; (8012470 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012440:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8012444:	2b00      	cmp	r3, #0
 8012446:	d001      	beq.n	801244c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012448:	230e      	movs	r3, #14
 801244a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801244c:	4b08      	ldr	r3, [pc, #32]	; (8012470 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 801244e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012452:	f107 0210 	add.w	r2, r7, #16
 8012456:	4611      	mov	r1, r2
 8012458:	4618      	mov	r0, r3
 801245a:	f005 f9b6 	bl	80177ca <RegionGetPhyParam>
 801245e:	4603      	mov	r3, r0
 8012460:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	b2db      	uxtb	r3, r3
}
 8012466:	4618      	mov	r0, r3
 8012468:	3718      	adds	r7, #24
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop
 8012470:	20000df4 	.word	0x20000df4

08012474 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	4603      	mov	r3, r0
 801247c:	71fb      	strb	r3, [r7, #7]
 801247e:	460b      	mov	r3, r1
 8012480:	71bb      	strb	r3, [r7, #6]
 8012482:	4613      	mov	r3, r2
 8012484:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 8012486:	2300      	movs	r3, #0
 8012488:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 801248a:	2300      	movs	r3, #0
 801248c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801248e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012492:	4618      	mov	r0, r3
 8012494:	f7ff ffc6 	bl	8012424 <GetMaxAppPayloadWithoutFOptsLength>
 8012498:	4603      	mov	r3, r0
 801249a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 801249c:	79fb      	ldrb	r3, [r7, #7]
 801249e:	b29a      	uxth	r2, r3
 80124a0:	797b      	ldrb	r3, [r7, #5]
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	4413      	add	r3, r2
 80124a6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80124a8:	89ba      	ldrh	r2, [r7, #12]
 80124aa:	89fb      	ldrh	r3, [r7, #14]
 80124ac:	429a      	cmp	r2, r3
 80124ae:	d804      	bhi.n	80124ba <ValidatePayloadLength+0x46>
 80124b0:	89bb      	ldrh	r3, [r7, #12]
 80124b2:	2bff      	cmp	r3, #255	; 0xff
 80124b4:	d801      	bhi.n	80124ba <ValidatePayloadLength+0x46>
    {
        return true;
 80124b6:	2301      	movs	r3, #1
 80124b8:	e000      	b.n	80124bc <ValidatePayloadLength+0x48>
    }
    return false;
 80124ba:	2300      	movs	r3, #0
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3710      	adds	r7, #16
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}

080124c4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80124c4:	b590      	push	{r4, r7, lr}
 80124c6:	b0a5      	sub	sp, #148	; 0x94
 80124c8:	af02      	add	r7, sp, #8
 80124ca:	6078      	str	r0, [r7, #4]
 80124cc:	4608      	mov	r0, r1
 80124ce:	4611      	mov	r1, r2
 80124d0:	461a      	mov	r2, r3
 80124d2:	4603      	mov	r3, r0
 80124d4:	70fb      	strb	r3, [r7, #3]
 80124d6:	460b      	mov	r3, r1
 80124d8:	70bb      	strb	r3, [r7, #2]
 80124da:	4613      	mov	r3, r2
 80124dc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80124de:	2300      	movs	r3, #0
 80124e0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80124e4:	2300      	movs	r3, #0
 80124e6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80124ea:	2300      	movs	r3, #0
 80124ec:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 80124f0:	f000 bc6d 	b.w	8012dce <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80124f4:	78fb      	ldrb	r3, [r7, #3]
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	4413      	add	r3, r2
 80124fa:	781b      	ldrb	r3, [r3, #0]
 80124fc:	4618      	mov	r0, r3
 80124fe:	f003 fce7 	bl	8015ed0 <LoRaMacCommandsGetCmdSize>
 8012502:	4603      	mov	r3, r0
 8012504:	461a      	mov	r2, r3
 8012506:	78fb      	ldrb	r3, [r7, #3]
 8012508:	441a      	add	r2, r3
 801250a:	78bb      	ldrb	r3, [r7, #2]
 801250c:	429a      	cmp	r2, r3
 801250e:	f300 8464 	bgt.w	8012dda <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 8012512:	78fb      	ldrb	r3, [r7, #3]
 8012514:	1c5a      	adds	r2, r3, #1
 8012516:	70fa      	strb	r2, [r7, #3]
 8012518:	461a      	mov	r2, r3
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	4413      	add	r3, r2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	3b02      	subs	r3, #2
 8012522:	2b11      	cmp	r3, #17
 8012524:	f200 845b 	bhi.w	8012dde <ProcessMacCommands+0x91a>
 8012528:	a201      	add	r2, pc, #4	; (adr r2, 8012530 <ProcessMacCommands+0x6c>)
 801252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801252e:	bf00      	nop
 8012530:	08012579 	.word	0x08012579
 8012534:	080125bb 	.word	0x080125bb
 8012538:	080126d7 	.word	0x080126d7
 801253c:	08012715 	.word	0x08012715
 8012540:	08012801 	.word	0x08012801
 8012544:	0801285d 	.word	0x0801285d
 8012548:	08012919 	.word	0x08012919
 801254c:	0801296f 	.word	0x0801296f
 8012550:	08012a55 	.word	0x08012a55
 8012554:	08012ddf 	.word	0x08012ddf
 8012558:	08012ddf 	.word	0x08012ddf
 801255c:	08012af9 	.word	0x08012af9
 8012560:	08012ddf 	.word	0x08012ddf
 8012564:	08012ddf 	.word	0x08012ddf
 8012568:	08012c0f 	.word	0x08012c0f
 801256c:	08012c43 	.word	0x08012c43
 8012570:	08012cd3 	.word	0x08012cd3
 8012574:	08012d49 	.word	0x08012d49
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012578:	2005      	movs	r0, #5
 801257a:	f003 fe81 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	f000 8424 	beq.w	8012dce <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8012586:	2105      	movs	r1, #5
 8012588:	2000      	movs	r0, #0
 801258a:	f003 fded 	bl	8016168 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 801258e:	78fb      	ldrb	r3, [r7, #3]
 8012590:	1c5a      	adds	r2, r3, #1
 8012592:	70fa      	strb	r2, [r7, #3]
 8012594:	461a      	mov	r2, r3
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4413      	add	r3, r2
 801259a:	781a      	ldrb	r2, [r3, #0]
 801259c:	4bac      	ldr	r3, [pc, #688]	; (8012850 <ProcessMacCommands+0x38c>)
 801259e:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80125a2:	78fb      	ldrb	r3, [r7, #3]
 80125a4:	1c5a      	adds	r2, r3, #1
 80125a6:	70fa      	strb	r2, [r7, #3]
 80125a8:	461a      	mov	r2, r3
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	4413      	add	r3, r2
 80125ae:	781a      	ldrb	r2, [r3, #0]
 80125b0:	4ba7      	ldr	r3, [pc, #668]	; (8012850 <ProcessMacCommands+0x38c>)
 80125b2:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80125b6:	f000 bc0a 	b.w	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80125ba:	2300      	movs	r3, #0
 80125bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80125c0:	2300      	movs	r3, #0
 80125c2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80125d2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80125d6:	f083 0301 	eor.w	r3, r3, #1
 80125da:	b2db      	uxtb	r3, r3
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d078      	beq.n	80126d2 <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80125e0:	2301      	movs	r3, #1
 80125e2:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80125e6:	78fb      	ldrb	r3, [r7, #3]
 80125e8:	3b01      	subs	r3, #1
 80125ea:	687a      	ldr	r2, [r7, #4]
 80125ec:	4413      	add	r3, r2
 80125ee:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80125f0:	78ba      	ldrb	r2, [r7, #2]
 80125f2:	78fb      	ldrb	r3, [r7, #3]
 80125f4:	1ad3      	subs	r3, r2, r3
 80125f6:	b2db      	uxtb	r3, r3
 80125f8:	3301      	adds	r3, #1
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012600:	4b94      	ldr	r3, [pc, #592]	; (8012854 <ProcessMacCommands+0x390>)
 8012602:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8012606:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801260a:	4b92      	ldr	r3, [pc, #584]	; (8012854 <ProcessMacCommands+0x390>)
 801260c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012610:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8012614:	4b8f      	ldr	r3, [pc, #572]	; (8012854 <ProcessMacCommands+0x390>)
 8012616:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801261a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801261e:	4b8d      	ldr	r3, [pc, #564]	; (8012854 <ProcessMacCommands+0x390>)
 8012620:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012624:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012628:	4b8a      	ldr	r3, [pc, #552]	; (8012854 <ProcessMacCommands+0x390>)
 801262a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 801262e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 8012632:	4b88      	ldr	r3, [pc, #544]	; (8012854 <ProcessMacCommands+0x390>)
 8012634:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012638:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 801263a:	4b86      	ldr	r3, [pc, #536]	; (8012854 <ProcessMacCommands+0x390>)
 801263c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012640:	f107 0456 	add.w	r4, r7, #86	; 0x56
 8012644:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012648:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801264c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012650:	9301      	str	r3, [sp, #4]
 8012652:	f107 0355 	add.w	r3, r7, #85	; 0x55
 8012656:	9300      	str	r3, [sp, #0]
 8012658:	4623      	mov	r3, r4
 801265a:	f005 f973 	bl	8017944 <RegionLinkAdrReq>
 801265e:	4603      	mov	r3, r0
 8012660:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 8012664:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012668:	f003 0307 	and.w	r3, r3, #7
 801266c:	2b07      	cmp	r3, #7
 801266e:	d10e      	bne.n	801268e <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012670:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 8012674:	4b77      	ldr	r3, [pc, #476]	; (8012854 <ProcessMacCommands+0x390>)
 8012676:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 801267a:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 801267e:	4b75      	ldr	r3, [pc, #468]	; (8012854 <ProcessMacCommands+0x390>)
 8012680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 8012684:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8012688:	4b72      	ldr	r3, [pc, #456]	; (8012854 <ProcessMacCommands+0x390>)
 801268a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 801268e:	2300      	movs	r3, #0
 8012690:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8012694:	e00b      	b.n	80126ae <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8012696:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 801269a:	2201      	movs	r2, #1
 801269c:	4619      	mov	r1, r3
 801269e:	2003      	movs	r0, #3
 80126a0:	f003 fab6 	bl	8015c10 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126a4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80126a8:	3301      	adds	r3, #1
 80126aa:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126ae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80126b2:	4a69      	ldr	r2, [pc, #420]	; (8012858 <ProcessMacCommands+0x394>)
 80126b4:	fba2 2303 	umull	r2, r3, r2, r3
 80126b8:	089b      	lsrs	r3, r3, #2
 80126ba:	b2db      	uxtb	r3, r3
 80126bc:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d3e8      	bcc.n	8012696 <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80126c4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80126c8:	78fb      	ldrb	r3, [r7, #3]
 80126ca:	4413      	add	r3, r2
 80126cc:	b2db      	uxtb	r3, r3
 80126ce:	3b01      	subs	r3, #1
 80126d0:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80126d2:	bf00      	nop
 80126d4:	e37b      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80126d6:	78fb      	ldrb	r3, [r7, #3]
 80126d8:	1c5a      	adds	r2, r3, #1
 80126da:	70fa      	strb	r2, [r7, #3]
 80126dc:	461a      	mov	r2, r3
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	4413      	add	r3, r2
 80126e2:	781b      	ldrb	r3, [r3, #0]
 80126e4:	f003 030f 	and.w	r3, r3, #15
 80126e8:	b2da      	uxtb	r2, r3
 80126ea:	4b5a      	ldr	r3, [pc, #360]	; (8012854 <ProcessMacCommands+0x390>)
 80126ec:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 80126f0:	4b58      	ldr	r3, [pc, #352]	; (8012854 <ProcessMacCommands+0x390>)
 80126f2:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 80126f6:	461a      	mov	r2, r3
 80126f8:	2301      	movs	r3, #1
 80126fa:	4093      	lsls	r3, r2
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	4b55      	ldr	r3, [pc, #340]	; (8012854 <ProcessMacCommands+0x390>)
 8012700:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8012704:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012708:	2200      	movs	r2, #0
 801270a:	4619      	mov	r1, r3
 801270c:	2004      	movs	r0, #4
 801270e:	f003 fa7f 	bl	8015c10 <LoRaMacCommandsAddCmd>
                break;
 8012712:	e35c      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 8012714:	2307      	movs	r3, #7
 8012716:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 801271a:	78fb      	ldrb	r3, [r7, #3]
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	4413      	add	r3, r2
 8012720:	781b      	ldrb	r3, [r3, #0]
 8012722:	091b      	lsrs	r3, r3, #4
 8012724:	b2db      	uxtb	r3, r3
 8012726:	b25b      	sxtb	r3, r3
 8012728:	f003 0307 	and.w	r3, r3, #7
 801272c:	b25b      	sxtb	r3, r3
 801272e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8012732:	78fb      	ldrb	r3, [r7, #3]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	4413      	add	r3, r2
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	b25b      	sxtb	r3, r3
 801273c:	f003 030f 	and.w	r3, r3, #15
 8012740:	b25b      	sxtb	r3, r3
 8012742:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 8012746:	78fb      	ldrb	r3, [r7, #3]
 8012748:	3301      	adds	r3, #1
 801274a:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 801274c:	78fb      	ldrb	r3, [r7, #3]
 801274e:	1c5a      	adds	r2, r3, #1
 8012750:	70fa      	strb	r2, [r7, #3]
 8012752:	461a      	mov	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	4413      	add	r3, r2
 8012758:	781b      	ldrb	r3, [r3, #0]
 801275a:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801275c:	78fb      	ldrb	r3, [r7, #3]
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	70fa      	strb	r2, [r7, #3]
 8012762:	461a      	mov	r2, r3
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	4413      	add	r3, r2
 8012768:	781b      	ldrb	r3, [r3, #0]
 801276a:	021a      	lsls	r2, r3, #8
 801276c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801276e:	4313      	orrs	r3, r2
 8012770:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012772:	78fb      	ldrb	r3, [r7, #3]
 8012774:	1c5a      	adds	r2, r3, #1
 8012776:	70fa      	strb	r2, [r7, #3]
 8012778:	461a      	mov	r2, r3
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	4413      	add	r3, r2
 801277e:	781b      	ldrb	r3, [r3, #0]
 8012780:	041a      	lsls	r2, r3, #16
 8012782:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012784:	4313      	orrs	r3, r2
 8012786:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 8012788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801278a:	2264      	movs	r2, #100	; 0x64
 801278c:	fb02 f303 	mul.w	r3, r2, r3
 8012790:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8012792:	4b30      	ldr	r3, [pc, #192]	; (8012854 <ProcessMacCommands+0x390>)
 8012794:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012798:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 801279c:	4611      	mov	r1, r2
 801279e:	4618      	mov	r0, r3
 80127a0:	f005 f8ea 	bl	8017978 <RegionRxParamSetupReq>
 80127a4:	4603      	mov	r3, r0
 80127a6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80127aa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127ae:	f003 0307 	and.w	r3, r3, #7
 80127b2:	2b07      	cmp	r3, #7
 80127b4:	d117      	bne.n	80127e6 <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80127b6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127ba:	b2da      	uxtb	r2, r3
 80127bc:	4b25      	ldr	r3, [pc, #148]	; (8012854 <ProcessMacCommands+0x390>)
 80127be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80127c2:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127c6:	b2da      	uxtb	r2, r3
 80127c8:	4b22      	ldr	r3, [pc, #136]	; (8012854 <ProcessMacCommands+0x390>)
 80127ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80127ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d0:	4a20      	ldr	r2, [pc, #128]	; (8012854 <ProcessMacCommands+0x390>)
 80127d2:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80127d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127d6:	4a1f      	ldr	r2, [pc, #124]	; (8012854 <ProcessMacCommands+0x390>)
 80127d8:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80127da:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	4b1c      	ldr	r3, [pc, #112]	; (8012854 <ProcessMacCommands+0x390>)
 80127e2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80127e6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127ea:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80127ee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80127f2:	2201      	movs	r2, #1
 80127f4:	4619      	mov	r1, r3
 80127f6:	2005      	movs	r0, #5
 80127f8:	f003 fa0a 	bl	8015c10 <LoRaMacCommandsAddCmd>
                break;
 80127fc:	bf00      	nop
 80127fe:	e2e6      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012800:	23ff      	movs	r3, #255	; 0xff
 8012802:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8012806:	4b12      	ldr	r3, [pc, #72]	; (8012850 <ProcessMacCommands+0x38c>)
 8012808:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801280c:	2b00      	cmp	r3, #0
 801280e:	d00d      	beq.n	801282c <ProcessMacCommands+0x368>
 8012810:	4b0f      	ldr	r3, [pc, #60]	; (8012850 <ProcessMacCommands+0x38c>)
 8012812:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d007      	beq.n	801282c <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 801281c:	4b0c      	ldr	r3, [pc, #48]	; (8012850 <ProcessMacCommands+0x38c>)
 801281e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4798      	blx	r3
 8012826:	4603      	mov	r3, r0
 8012828:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 801282c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012830:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8012834:	787b      	ldrb	r3, [r7, #1]
 8012836:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801283a:	b2db      	uxtb	r3, r3
 801283c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012840:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012844:	2202      	movs	r2, #2
 8012846:	4619      	mov	r1, r3
 8012848:	2006      	movs	r0, #6
 801284a:	f003 f9e1 	bl	8015c10 <LoRaMacCommandsAddCmd>
                break;
 801284e:	e2be      	b.n	8012dce <ProcessMacCommands+0x90a>
 8012850:	200008ec 	.word	0x200008ec
 8012854:	20000df4 	.word	0x20000df4
 8012858:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 801285c:	2303      	movs	r3, #3
 801285e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 8012862:	78fb      	ldrb	r3, [r7, #3]
 8012864:	1c5a      	adds	r2, r3, #1
 8012866:	70fa      	strb	r2, [r7, #3]
 8012868:	461a      	mov	r2, r3
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	4413      	add	r3, r2
 801286e:	781b      	ldrb	r3, [r3, #0]
 8012870:	b25b      	sxtb	r3, r3
 8012872:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 8012876:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801287a:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 801287c:	78fb      	ldrb	r3, [r7, #3]
 801287e:	1c5a      	adds	r2, r3, #1
 8012880:	70fa      	strb	r2, [r7, #3]
 8012882:	461a      	mov	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	4413      	add	r3, r2
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 801288c:	78fb      	ldrb	r3, [r7, #3]
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	70fa      	strb	r2, [r7, #3]
 8012892:	461a      	mov	r2, r3
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	4413      	add	r3, r2
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	021a      	lsls	r2, r3, #8
 801289c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289e:	4313      	orrs	r3, r2
 80128a0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80128a2:	78fb      	ldrb	r3, [r7, #3]
 80128a4:	1c5a      	adds	r2, r3, #1
 80128a6:	70fa      	strb	r2, [r7, #3]
 80128a8:	461a      	mov	r2, r3
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	4413      	add	r3, r2
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	041a      	lsls	r2, r3, #16
 80128b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b4:	4313      	orrs	r3, r2
 80128b6:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80128b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ba:	2264      	movs	r2, #100	; 0x64
 80128bc:	fb02 f303 	mul.w	r3, r2, r3
 80128c0:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80128c2:	2300      	movs	r3, #0
 80128c4:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80128c6:	78fb      	ldrb	r3, [r7, #3]
 80128c8:	1c5a      	adds	r2, r3, #1
 80128ca:	70fa      	strb	r2, [r7, #3]
 80128cc:	461a      	mov	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	4413      	add	r3, r2
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	b25b      	sxtb	r3, r3
 80128d6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80128da:	4b85      	ldr	r3, [pc, #532]	; (8012af0 <ProcessMacCommands+0x62c>)
 80128dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f005 f859 	bl	801799e <RegionNewChannelReq>
 80128ec:	4603      	mov	r3, r0
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 80128f4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80128f8:	b25b      	sxtb	r3, r3
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	db0a      	blt.n	8012914 <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 80128fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012902:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8012906:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801290a:	2201      	movs	r2, #1
 801290c:	4619      	mov	r1, r3
 801290e:	2007      	movs	r0, #7
 8012910:	f003 f97e 	bl	8015c10 <LoRaMacCommandsAddCmd>
                }
                break;
 8012914:	bf00      	nop
 8012916:	e25a      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012918:	78fb      	ldrb	r3, [r7, #3]
 801291a:	1c5a      	adds	r2, r3, #1
 801291c:	70fa      	strb	r2, [r7, #3]
 801291e:	461a      	mov	r2, r3
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	4413      	add	r3, r2
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	f003 030f 	and.w	r3, r3, #15
 801292a:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 801292e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012932:	2b00      	cmp	r3, #0
 8012934:	d104      	bne.n	8012940 <ProcessMacCommands+0x47c>
                {
                    delay++;
 8012936:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801293a:	3301      	adds	r3, #1
 801293c:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012940:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012944:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012948:	fb02 f303 	mul.w	r3, r2, r3
 801294c:	461a      	mov	r2, r3
 801294e:	4b68      	ldr	r3, [pc, #416]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012950:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8012952:	4b67      	ldr	r3, [pc, #412]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012956:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801295a:	4a65      	ldr	r2, [pc, #404]	; (8012af0 <ProcessMacCommands+0x62c>)
 801295c:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 801295e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012962:	2200      	movs	r2, #0
 8012964:	4619      	mov	r1, r3
 8012966:	2008      	movs	r0, #8
 8012968:	f003 f952 	bl	8015c10 <LoRaMacCommandsAddCmd>
                break;
 801296c:	e22f      	b.n	8012dce <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 801296e:	78fb      	ldrb	r3, [r7, #3]
 8012970:	1c5a      	adds	r2, r3, #1
 8012972:	70fa      	strb	r2, [r7, #3]
 8012974:	461a      	mov	r2, r3
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4413      	add	r3, r2
 801297a:	781b      	ldrb	r3, [r3, #0]
 801297c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012980:	2300      	movs	r3, #0
 8012982:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 8012986:	2300      	movs	r3, #0
 8012988:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 801298c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8012990:	f003 0320 	and.w	r3, r3, #32
 8012994:	2b00      	cmp	r3, #0
 8012996:	d002      	beq.n	801299e <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 8012998:	2301      	movs	r3, #1
 801299a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 801299e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129a2:	f003 0310 	and.w	r3, r3, #16
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d002      	beq.n	80129b0 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80129aa:	2301      	movs	r3, #1
 80129ac:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80129b0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129b4:	f003 030f 	and.w	r3, r3, #15
 80129b8:	b2db      	uxtb	r3, r3
 80129ba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80129be:	4b4c      	ldr	r3, [pc, #304]	; (8012af0 <ProcessMacCommands+0x62c>)
 80129c0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80129c8:	4611      	mov	r1, r2
 80129ca:	4618      	mov	r0, r3
 80129cc:	f004 fffa 	bl	80179c4 <RegionTxParamSetupReq>
 80129d0:	4603      	mov	r3, r0
 80129d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d6:	d03b      	beq.n	8012a50 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80129d8:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80129dc:	4b44      	ldr	r3, [pc, #272]	; (8012af0 <ProcessMacCommands+0x62c>)
 80129de:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80129e2:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80129e6:	4b42      	ldr	r3, [pc, #264]	; (8012af0 <ProcessMacCommands+0x62c>)
 80129e8:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80129ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80129f0:	461a      	mov	r2, r3
 80129f2:	4b40      	ldr	r3, [pc, #256]	; (8012af4 <ProcessMacCommands+0x630>)
 80129f4:	5c9b      	ldrb	r3, [r3, r2]
 80129f6:	4618      	mov	r0, r3
 80129f8:	f7ee f8fa 	bl	8000bf0 <__aeabi_ui2f>
 80129fc:	4603      	mov	r3, r0
 80129fe:	4a3c      	ldr	r2, [pc, #240]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012a00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012a04:	2302      	movs	r3, #2
 8012a06:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a0a:	4b39      	ldr	r3, [pc, #228]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012a0c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a14:	4b36      	ldr	r3, [pc, #216]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012a16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a1a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a1e:	4611      	mov	r1, r2
 8012a20:	4618      	mov	r0, r3
 8012a22:	f004 fed2 	bl	80177ca <RegionGetPhyParam>
 8012a26:	4603      	mov	r3, r0
 8012a28:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a2c:	b25a      	sxtb	r2, r3
 8012a2e:	4b30      	ldr	r3, [pc, #192]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012a30:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a34:	4293      	cmp	r3, r2
 8012a36:	bfb8      	it	lt
 8012a38:	4613      	movlt	r3, r2
 8012a3a:	b25a      	sxtb	r2, r3
 8012a3c:	4b2c      	ldr	r3, [pc, #176]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012a3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012a42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a46:	2200      	movs	r2, #0
 8012a48:	4619      	mov	r1, r3
 8012a4a:	2009      	movs	r0, #9
 8012a4c:	f003 f8e0 	bl	8015c10 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a50:	bf00      	nop
 8012a52:	e1bc      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012a54:	2303      	movs	r3, #3
 8012a56:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012a5a:	78fb      	ldrb	r3, [r7, #3]
 8012a5c:	1c5a      	adds	r2, r3, #1
 8012a5e:	70fa      	strb	r2, [r7, #3]
 8012a60:	461a      	mov	r2, r3
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	4413      	add	r3, r2
 8012a66:	781b      	ldrb	r3, [r3, #0]
 8012a68:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012a6c:	78fb      	ldrb	r3, [r7, #3]
 8012a6e:	1c5a      	adds	r2, r3, #1
 8012a70:	70fa      	strb	r2, [r7, #3]
 8012a72:	461a      	mov	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	4413      	add	r3, r2
 8012a78:	781b      	ldrb	r3, [r3, #0]
 8012a7a:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	1c5a      	adds	r2, r3, #1
 8012a80:	70fa      	strb	r2, [r7, #3]
 8012a82:	461a      	mov	r2, r3
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	4413      	add	r3, r2
 8012a88:	781b      	ldrb	r3, [r3, #0]
 8012a8a:	021a      	lsls	r2, r3, #8
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012a92:	78fb      	ldrb	r3, [r7, #3]
 8012a94:	1c5a      	adds	r2, r3, #1
 8012a96:	70fa      	strb	r2, [r7, #3]
 8012a98:	461a      	mov	r2, r3
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	4413      	add	r3, r2
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	041a      	lsls	r2, r3, #16
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	4313      	orrs	r3, r2
 8012aa6:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aaa:	2264      	movs	r2, #100	; 0x64
 8012aac:	fb02 f303 	mul.w	r3, r2, r3
 8012ab0:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012ab2:	4b0f      	ldr	r3, [pc, #60]	; (8012af0 <ProcessMacCommands+0x62c>)
 8012ab4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ab8:	f107 0220 	add.w	r2, r7, #32
 8012abc:	4611      	mov	r1, r2
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f004 ff93 	bl	80179ea <RegionDlChannelReq>
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012acc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ad0:	b25b      	sxtb	r3, r3
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	db0a      	blt.n	8012aec <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012ad6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ada:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012ade:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	200a      	movs	r0, #10
 8012ae8:	f003 f892 	bl	8015c10 <LoRaMacCommandsAddCmd>
                }
                break;
 8012aec:	bf00      	nop
 8012aee:	e16e      	b.n	8012dce <ProcessMacCommands+0x90a>
 8012af0:	20000df4 	.word	0x20000df4
 8012af4:	0801f990 	.word	0x0801f990
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012af8:	200a      	movs	r0, #10
 8012afa:	f003 fbc1 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8012afe:	4603      	mov	r3, r0
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	f000 8164 	beq.w	8012dce <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012b06:	210a      	movs	r1, #10
 8012b08:	2000      	movs	r0, #0
 8012b0a:	f003 fb2d 	bl	8016168 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012b0e:	f107 0318 	add.w	r3, r7, #24
 8012b12:	2200      	movs	r2, #0
 8012b14:	601a      	str	r2, [r3, #0]
 8012b16:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012b18:	f107 0310 	add.w	r3, r7, #16
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	601a      	str	r2, [r3, #0]
 8012b20:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012b22:	f107 0308 	add.w	r3, r7, #8
 8012b26:	2200      	movs	r2, #0
 8012b28:	601a      	str	r2, [r3, #0]
 8012b2a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012b2c:	78fb      	ldrb	r3, [r7, #3]
 8012b2e:	1c5a      	adds	r2, r3, #1
 8012b30:	70fa      	strb	r2, [r7, #3]
 8012b32:	461a      	mov	r2, r3
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	4413      	add	r3, r2
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012b3c:	78fb      	ldrb	r3, [r7, #3]
 8012b3e:	1c5a      	adds	r2, r3, #1
 8012b40:	70fa      	strb	r2, [r7, #3]
 8012b42:	461a      	mov	r2, r3
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	4413      	add	r3, r2
 8012b48:	781b      	ldrb	r3, [r3, #0]
 8012b4a:	021a      	lsls	r2, r3, #8
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012b52:	78fb      	ldrb	r3, [r7, #3]
 8012b54:	1c5a      	adds	r2, r3, #1
 8012b56:	70fa      	strb	r2, [r7, #3]
 8012b58:	461a      	mov	r2, r3
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	4413      	add	r3, r2
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	041a      	lsls	r2, r3, #16
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	4313      	orrs	r3, r2
 8012b66:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012b68:	78fb      	ldrb	r3, [r7, #3]
 8012b6a:	1c5a      	adds	r2, r3, #1
 8012b6c:	70fa      	strb	r2, [r7, #3]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	4413      	add	r3, r2
 8012b74:	781b      	ldrb	r3, [r3, #0]
 8012b76:	061a      	lsls	r2, r3, #24
 8012b78:	69bb      	ldr	r3, [r7, #24]
 8012b7a:	4313      	orrs	r3, r2
 8012b7c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012b7e:	78fb      	ldrb	r3, [r7, #3]
 8012b80:	1c5a      	adds	r2, r3, #1
 8012b82:	70fa      	strb	r2, [r7, #3]
 8012b84:	461a      	mov	r2, r3
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	4413      	add	r3, r2
 8012b8a:	781b      	ldrb	r3, [r3, #0]
 8012b8c:	b21b      	sxth	r3, r3
 8012b8e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012b90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012b94:	461a      	mov	r2, r3
 8012b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012b9a:	fb02 f303 	mul.w	r3, r2, r3
 8012b9e:	121b      	asrs	r3, r3, #8
 8012ba0:	b21b      	sxth	r3, r3
 8012ba2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012ba4:	f107 0310 	add.w	r3, r7, #16
 8012ba8:	f107 0218 	add.w	r2, r7, #24
 8012bac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bb0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012bb4:	693a      	ldr	r2, [r7, #16]
 8012bb6:	4b8c      	ldr	r3, [pc, #560]	; (8012de8 <ProcessMacCommands+0x924>)
 8012bb8:	4413      	add	r3, r2
 8012bba:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012bbc:	f107 0308 	add.w	r3, r7, #8
 8012bc0:	4618      	mov	r0, r3
 8012bc2:	f00a fd4f 	bl	801d664 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012bc6:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012bca:	4b88      	ldr	r3, [pc, #544]	; (8012dec <ProcessMacCommands+0x928>)
 8012bcc:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012bd0:	9200      	str	r2, [sp, #0]
 8012bd2:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012bd6:	f107 0210 	add.w	r2, r7, #16
 8012bda:	ca06      	ldmia	r2, {r1, r2}
 8012bdc:	f00a fcdb 	bl	801d596 <SysTimeSub>
 8012be0:	f107 0010 	add.w	r0, r7, #16
 8012be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012be6:	9300      	str	r3, [sp, #0]
 8012be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bea:	f107 0208 	add.w	r2, r7, #8
 8012bee:	ca06      	ldmia	r2, {r1, r2}
 8012bf0:	f00a fc98 	bl	801d524 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012bf4:	f107 0310 	add.w	r3, r7, #16
 8012bf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bfc:	f00a fd04 	bl	801d608 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012c00:	f002 febf 	bl	8015982 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012c04:	4b79      	ldr	r3, [pc, #484]	; (8012dec <ProcessMacCommands+0x928>)
 8012c06:	2201      	movs	r2, #1
 8012c08:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012c0c:	e0df      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012c0e:	200d      	movs	r0, #13
 8012c10:	f003 fb36 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8012c14:	4603      	mov	r3, r0
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	f000 80d9 	beq.w	8012dce <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012c1c:	210d      	movs	r1, #13
 8012c1e:	2000      	movs	r0, #0
 8012c20:	f003 faa2 	bl	8016168 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012c24:	4b71      	ldr	r3, [pc, #452]	; (8012dec <ProcessMacCommands+0x928>)
 8012c26:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c2a:	2b04      	cmp	r3, #4
 8012c2c:	f000 80cf 	beq.w	8012dce <ProcessMacCommands+0x90a>
 8012c30:	4b6e      	ldr	r3, [pc, #440]	; (8012dec <ProcessMacCommands+0x928>)
 8012c32:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c36:	2b05      	cmp	r3, #5
 8012c38:	f000 80c9 	beq.w	8012dce <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012c3c:	f002 fe82 	bl	8015944 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012c40:	e0c5      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012c42:	2303      	movs	r3, #3
 8012c44:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012c48:	2300      	movs	r3, #0
 8012c4a:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012c4c:	78fb      	ldrb	r3, [r7, #3]
 8012c4e:	1c5a      	adds	r2, r3, #1
 8012c50:	70fa      	strb	r2, [r7, #3]
 8012c52:	461a      	mov	r2, r3
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	4413      	add	r3, r2
 8012c58:	781b      	ldrb	r3, [r3, #0]
 8012c5a:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012c5c:	78fb      	ldrb	r3, [r7, #3]
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	70fa      	strb	r2, [r7, #3]
 8012c62:	461a      	mov	r2, r3
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	4413      	add	r3, r2
 8012c68:	781b      	ldrb	r3, [r3, #0]
 8012c6a:	021b      	lsls	r3, r3, #8
 8012c6c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c6e:	4313      	orrs	r3, r2
 8012c70:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c72:	78fb      	ldrb	r3, [r7, #3]
 8012c74:	1c5a      	adds	r2, r3, #1
 8012c76:	70fa      	strb	r2, [r7, #3]
 8012c78:	461a      	mov	r2, r3
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	4413      	add	r3, r2
 8012c7e:	781b      	ldrb	r3, [r3, #0]
 8012c80:	041b      	lsls	r3, r3, #16
 8012c82:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c84:	4313      	orrs	r3, r2
 8012c86:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012c8a:	2264      	movs	r2, #100	; 0x64
 8012c8c:	fb02 f303 	mul.w	r3, r2, r3
 8012c90:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012c92:	78fb      	ldrb	r3, [r7, #3]
 8012c94:	1c5a      	adds	r2, r3, #1
 8012c96:	70fa      	strb	r2, [r7, #3]
 8012c98:	461a      	mov	r2, r3
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	f003 030f 	and.w	r3, r3, #15
 8012ca4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012ca8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cac:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f002 fe4e 	bl	8015950 <LoRaMacClassBPingSlotChannelReq>
 8012cb4:	4603      	mov	r3, r0
 8012cb6:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012cba:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012cbe:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012cc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cc6:	2201      	movs	r2, #1
 8012cc8:	4619      	mov	r1, r3
 8012cca:	2011      	movs	r0, #17
 8012ccc:	f002 ffa0 	bl	8015c10 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012cd0:	e07d      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012cd2:	200e      	movs	r0, #14
 8012cd4:	f003 fad4 	bl	8016280 <LoRaMacConfirmQueueIsCmdActive>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d077      	beq.n	8012dce <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012cde:	210e      	movs	r1, #14
 8012ce0:	2000      	movs	r0, #0
 8012ce2:	f003 fa41 	bl	8016168 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012cec:	2300      	movs	r3, #0
 8012cee:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012cf2:	78fb      	ldrb	r3, [r7, #3]
 8012cf4:	1c5a      	adds	r2, r3, #1
 8012cf6:	70fa      	strb	r2, [r7, #3]
 8012cf8:	461a      	mov	r2, r3
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4413      	add	r3, r2
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012d04:	78fb      	ldrb	r3, [r7, #3]
 8012d06:	1c5a      	adds	r2, r3, #1
 8012d08:	70fa      	strb	r2, [r7, #3]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	4413      	add	r3, r2
 8012d10:	781b      	ldrb	r3, [r3, #0]
 8012d12:	021b      	lsls	r3, r3, #8
 8012d14:	b21a      	sxth	r2, r3
 8012d16:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	b21b      	sxth	r3, r3
 8012d1e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012d22:	78fb      	ldrb	r3, [r7, #3]
 8012d24:	1c5a      	adds	r2, r3, #1
 8012d26:	70fa      	strb	r2, [r7, #3]
 8012d28:	461a      	mov	r2, r3
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012d34:	4b2e      	ldr	r3, [pc, #184]	; (8012df0 <ProcessMacCommands+0x92c>)
 8012d36:	681a      	ldr	r2, [r3, #0]
 8012d38:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012d3c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012d40:	4618      	mov	r0, r3
 8012d42:	f002 fe11 	bl	8015968 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012d46:	e042      	b.n	8012dce <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012d4e:	78fb      	ldrb	r3, [r7, #3]
 8012d50:	1c5a      	adds	r2, r3, #1
 8012d52:	70fa      	strb	r2, [r7, #3]
 8012d54:	461a      	mov	r2, r3
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	4413      	add	r3, r2
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	1c5a      	adds	r2, r3, #1
 8012d64:	70fa      	strb	r2, [r7, #3]
 8012d66:	461a      	mov	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	4413      	add	r3, r2
 8012d6c:	781b      	ldrb	r3, [r3, #0]
 8012d6e:	021b      	lsls	r3, r3, #8
 8012d70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d74:	4313      	orrs	r3, r2
 8012d76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012d7a:	78fb      	ldrb	r3, [r7, #3]
 8012d7c:	1c5a      	adds	r2, r3, #1
 8012d7e:	70fa      	strb	r2, [r7, #3]
 8012d80:	461a      	mov	r2, r3
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	4413      	add	r3, r2
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	041b      	lsls	r3, r3, #16
 8012d8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d8e:	4313      	orrs	r3, r2
 8012d90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012d98:	2264      	movs	r2, #100	; 0x64
 8012d9a:	fb02 f303 	mul.w	r3, r2, r3
 8012d9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012da2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012da6:	f002 fdf2 	bl	801598e <LoRaMacClassBBeaconFreqReq>
 8012daa:	4603      	mov	r3, r0
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	d003      	beq.n	8012db8 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012db0:	2301      	movs	r3, #1
 8012db2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012db6:	e002      	b.n	8012dbe <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012db8:	2300      	movs	r3, #0
 8012dba:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012dbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012dc2:	2201      	movs	r2, #1
 8012dc4:	4619      	mov	r1, r3
 8012dc6:	2013      	movs	r0, #19
 8012dc8:	f002 ff22 	bl	8015c10 <LoRaMacCommandsAddCmd>
                }
                break;
 8012dcc:	bf00      	nop
    while( macIndex < commandsSize )
 8012dce:	78fa      	ldrb	r2, [r7, #3]
 8012dd0:	78bb      	ldrb	r3, [r7, #2]
 8012dd2:	429a      	cmp	r2, r3
 8012dd4:	f4ff ab8e 	bcc.w	80124f4 <ProcessMacCommands+0x30>
 8012dd8:	e002      	b.n	8012de0 <ProcessMacCommands+0x91c>
            return;
 8012dda:	bf00      	nop
 8012ddc:	e000      	b.n	8012de0 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012dde:	bf00      	nop
        }
    }
}
 8012de0:	378c      	adds	r7, #140	; 0x8c
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd90      	pop	{r4, r7, pc}
 8012de6:	bf00      	nop
 8012de8:	12d53d80 	.word	0x12d53d80
 8012dec:	200008ec 	.word	0x200008ec
 8012df0:	20001564 	.word	0x20001564

08012df4 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b08e      	sub	sp, #56	; 0x38
 8012df8:	af02      	add	r7, sp, #8
 8012dfa:	60f8      	str	r0, [r7, #12]
 8012dfc:	607a      	str	r2, [r7, #4]
 8012dfe:	461a      	mov	r2, r3
 8012e00:	460b      	mov	r3, r1
 8012e02:	72fb      	strb	r3, [r7, #11]
 8012e04:	4613      	mov	r3, r2
 8012e06:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e08:	2303      	movs	r3, #3
 8012e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e0e:	4b65      	ldr	r3, [pc, #404]	; (8012fa4 <Send+0x1b0>)
 8012e10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012e14:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e18:	4b62      	ldr	r3, [pc, #392]	; (8012fa4 <Send+0x1b0>)
 8012e1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e22:	4b60      	ldr	r3, [pc, #384]	; (8012fa4 <Send+0x1b0>)
 8012e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e26:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e28:	4b5e      	ldr	r3, [pc, #376]	; (8012fa4 <Send+0x1b0>)
 8012e2a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d101      	bne.n	8012e36 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012e32:	2307      	movs	r3, #7
 8012e34:	e0b1      	b.n	8012f9a <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012e36:	4b5b      	ldr	r3, [pc, #364]	; (8012fa4 <Send+0x1b0>)
 8012e38:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d102      	bne.n	8012e46 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012e40:	4b58      	ldr	r3, [pc, #352]	; (8012fa4 <Send+0x1b0>)
 8012e42:	2200      	movs	r2, #0
 8012e44:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012e46:	2300      	movs	r3, #0
 8012e48:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012e4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e50:	f36f 0303 	bfc	r3, #0, #4
 8012e54:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012e58:	4b52      	ldr	r3, [pc, #328]	; (8012fa4 <Send+0x1b0>)
 8012e5a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012e5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e62:	f362 13c7 	bfi	r3, r2, #7, #1
 8012e66:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e6a:	4b4e      	ldr	r3, [pc, #312]	; (8012fa4 <Send+0x1b0>)
 8012e6c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e70:	2b01      	cmp	r3, #1
 8012e72:	d106      	bne.n	8012e82 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e78:	f043 0310 	orr.w	r3, r3, #16
 8012e7c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012e80:	e005      	b.n	8012e8e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012e82:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e86:	f36f 1304 	bfc	r3, #4, #1
 8012e8a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012e8e:	4b45      	ldr	r3, [pc, #276]	; (8012fa4 <Send+0x1b0>)
 8012e90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d005      	beq.n	8012ea4 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012e98:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e9c:	f043 0320 	orr.w	r3, r3, #32
 8012ea0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012ea8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	bf14      	ite	ne
 8012eb6:	2301      	movne	r3, #1
 8012eb8:	2300      	moveq	r3, #0
 8012eba:	b2db      	uxtb	r3, r3
 8012ebc:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012ebe:	4b39      	ldr	r3, [pc, #228]	; (8012fa4 <Send+0x1b0>)
 8012ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ec2:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012ec4:	4b37      	ldr	r3, [pc, #220]	; (8012fa4 <Send+0x1b0>)
 8012ec6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012eca:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012ecc:	4b35      	ldr	r3, [pc, #212]	; (8012fa4 <Send+0x1b0>)
 8012ece:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012ed2:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012ed4:	4b33      	ldr	r3, [pc, #204]	; (8012fa4 <Send+0x1b0>)
 8012ed6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012eda:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ede:	4b31      	ldr	r3, [pc, #196]	; (8012fa4 <Send+0x1b0>)
 8012ee0:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012ee4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012ee8:	4b2e      	ldr	r3, [pc, #184]	; (8012fa4 <Send+0x1b0>)
 8012eea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012eee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012ef2:	4b2c      	ldr	r3, [pc, #176]	; (8012fa4 <Send+0x1b0>)
 8012ef4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012efc:	4b29      	ldr	r3, [pc, #164]	; (8012fa4 <Send+0x1b0>)
 8012efe:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012f02:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f08:	f107 0014 	add.w	r0, r7, #20
 8012f0c:	4a26      	ldr	r2, [pc, #152]	; (8012fa8 <Send+0x1b4>)
 8012f0e:	4927      	ldr	r1, [pc, #156]	; (8012fac <Send+0x1b8>)
 8012f10:	f002 fc58 	bl	80157c4 <LoRaMacAdrCalcNext>
 8012f14:	4603      	mov	r3, r0
 8012f16:	461a      	mov	r2, r3
 8012f18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f1c:	f362 1386 	bfi	r3, r2, #6, #1
 8012f20:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012f24:	7afa      	ldrb	r2, [r7, #11]
 8012f26:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012f2a:	893b      	ldrh	r3, [r7, #8]
 8012f2c:	9300      	str	r3, [sp, #0]
 8012f2e:	687b      	ldr	r3, [r7, #4]
 8012f30:	68f8      	ldr	r0, [r7, #12]
 8012f32:	f000 fc5d 	bl	80137f0 <PrepareFrame>
 8012f36:	4603      	mov	r3, r0
 8012f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d003      	beq.n	8012f4c <Send+0x158>
 8012f44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f48:	2b0a      	cmp	r3, #10
 8012f4a:	d107      	bne.n	8012f5c <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012f4c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012f50:	4618      	mov	r0, r3
 8012f52:	f000 f961 	bl	8013218 <ScheduleTx>
 8012f56:	4603      	mov	r3, r0
 8012f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d00a      	beq.n	8012f7a <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012f64:	4a0f      	ldr	r2, [pc, #60]	; (8012fa4 <Send+0x1b0>)
 8012f66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012f6a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012f6e:	4a0d      	ldr	r2, [pc, #52]	; (8012fa4 <Send+0x1b0>)
 8012f70:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f74:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012f78:	e00d      	b.n	8012f96 <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012f7a:	4b0a      	ldr	r3, [pc, #40]	; (8012fa4 <Send+0x1b0>)
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f84:	4a07      	ldr	r2, [pc, #28]	; (8012fa4 <Send+0x1b0>)
 8012f86:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012f88:	f002 fee8 	bl	8015d5c <LoRaMacCommandsRemoveNoneStickyCmds>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d001      	beq.n	8012f96 <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012f92:	2313      	movs	r3, #19
 8012f94:	e001      	b.n	8012f9a <Send+0x1a6>
        }
    }
    return status;
 8012f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	3730      	adds	r7, #48	; 0x30
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	bd80      	pop	{r7, pc}
 8012fa2:	bf00      	nop
 8012fa4:	20000df4 	.word	0x20000df4
 8012fa8:	20000e2c 	.word	0x20000e2c
 8012fac:	20000e2d 	.word	0x20000e2d

08012fb0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b084      	sub	sp, #16
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012fc6:	79fb      	ldrb	r3, [r7, #7]
 8012fc8:	2bff      	cmp	r3, #255	; 0xff
 8012fca:	d11f      	bne.n	801300c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012fcc:	2000      	movs	r0, #0
 8012fce:	f7ff f941 	bl	8012254 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012fd2:	4b15      	ldr	r3, [pc, #84]	; (8013028 <SendReJoinReq+0x78>)
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012fda:	4b13      	ldr	r3, [pc, #76]	; (8013028 <SendReJoinReq+0x78>)
 8012fdc:	4a13      	ldr	r2, [pc, #76]	; (801302c <SendReJoinReq+0x7c>)
 8012fde:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012fe2:	4b11      	ldr	r3, [pc, #68]	; (8013028 <SendReJoinReq+0x78>)
 8012fe4:	22ff      	movs	r2, #255	; 0xff
 8012fe6:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8012fea:	7b3b      	ldrb	r3, [r7, #12]
 8012fec:	f36f 1347 	bfc	r3, #5, #3
 8012ff0:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 8012ff2:	7b3a      	ldrb	r2, [r7, #12]
 8012ff4:	4b0c      	ldr	r3, [pc, #48]	; (8013028 <SendReJoinReq+0x78>)
 8012ff6:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8012ffa:	480d      	ldr	r0, [pc, #52]	; (8013030 <SendReJoinReq+0x80>)
 8012ffc:	f7fc fb1c 	bl	800f638 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013000:	480c      	ldr	r0, [pc, #48]	; (8013034 <SendReJoinReq+0x84>)
 8013002:	f7fc fae9 	bl	800f5d8 <SecureElementGetDevEui>

            allowDelayedTx = false;
 8013006:	2300      	movs	r3, #0
 8013008:	73fb      	strb	r3, [r7, #15]

            break;
 801300a:	e002      	b.n	8013012 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801300c:	2302      	movs	r3, #2
 801300e:	73bb      	strb	r3, [r7, #14]
            break;
 8013010:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 8013012:	7bfb      	ldrb	r3, [r7, #15]
 8013014:	4618      	mov	r0, r3
 8013016:	f000 f8ff 	bl	8013218 <ScheduleTx>
 801301a:	4603      	mov	r3, r0
 801301c:	73bb      	strb	r3, [r7, #14]
    return status;
 801301e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013020:	4618      	mov	r0, r3
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	200008ec 	.word	0x200008ec
 801302c:	200008ee 	.word	0x200008ee
 8013030:	200009fa 	.word	0x200009fa
 8013034:	20000a02 	.word	0x20000a02

08013038 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 801303c:	f002 fc31 	bl	80158a2 <LoRaMacClassBIsBeaconExpected>
 8013040:	4603      	mov	r3, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d001      	beq.n	801304a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8013046:	230e      	movs	r3, #14
 8013048:	e013      	b.n	8013072 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801304a:	4b0b      	ldr	r3, [pc, #44]	; (8013078 <CheckForClassBCollision+0x40>)
 801304c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013050:	2b01      	cmp	r3, #1
 8013052:	d10d      	bne.n	8013070 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8013054:	f002 fc2c 	bl	80158b0 <LoRaMacClassBIsPingExpected>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801305e:	230f      	movs	r3, #15
 8013060:	e007      	b.n	8013072 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8013062:	f002 fc2c 	bl	80158be <LoRaMacClassBIsMulticastExpected>
 8013066:	4603      	mov	r3, r0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d001      	beq.n	8013070 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 801306c:	230f      	movs	r3, #15
 801306e:	e000      	b.n	8013072 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	bd80      	pop	{r7, pc}
 8013076:	bf00      	nop
 8013078:	20000df4 	.word	0x20000df4

0801307c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 801307c:	b590      	push	{r4, r7, lr}
 801307e:	b083      	sub	sp, #12
 8013080:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013082:	4b2d      	ldr	r3, [pc, #180]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 8013084:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8013088:	4b2b      	ldr	r3, [pc, #172]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 801308a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801308e:	4b2a      	ldr	r3, [pc, #168]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 8013090:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 8013094:	4b28      	ldr	r3, [pc, #160]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 8013096:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 801309a:	4b27      	ldr	r3, [pc, #156]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 801309c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130a0:	b25b      	sxtb	r3, r3
 80130a2:	f004 fcf9 	bl	8017a98 <RegionApplyDrOffset>
 80130a6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130a8:	b259      	sxtb	r1, r3
 80130aa:	4b23      	ldr	r3, [pc, #140]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130ac:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130b0:	4b21      	ldr	r3, [pc, #132]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130b4:	4821      	ldr	r0, [pc, #132]	; (801313c <ComputeRxWindowParameters+0xc0>)
 80130b6:	9000      	str	r0, [sp, #0]
 80130b8:	4620      	mov	r0, r4
 80130ba:	f004 fbfd 	bl	80178b8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130be:	4b1e      	ldr	r3, [pc, #120]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130c0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80130c4:	4b1c      	ldr	r3, [pc, #112]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130ca:	b259      	sxtb	r1, r3
 80130cc:	4b1a      	ldr	r3, [pc, #104]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130ce:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130d2:	4b19      	ldr	r3, [pc, #100]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130d6:	4c1a      	ldr	r4, [pc, #104]	; (8013140 <ComputeRxWindowParameters+0xc4>)
 80130d8:	9400      	str	r4, [sp, #0]
 80130da:	f004 fbed 	bl	80178b8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80130de:	4b16      	ldr	r3, [pc, #88]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130e2:	4a18      	ldr	r2, [pc, #96]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 80130e4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 80130e8:	4413      	add	r3, r2
 80130ea:	4a16      	ldr	r2, [pc, #88]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 80130ec:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80130f0:	4b11      	ldr	r3, [pc, #68]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 80130f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80130f4:	4a13      	ldr	r2, [pc, #76]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 80130f6:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 80130fa:	4413      	add	r3, r2
 80130fc:	4a11      	ldr	r2, [pc, #68]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 80130fe:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 8013102:	4b10      	ldr	r3, [pc, #64]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 8013104:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013108:	2b04      	cmp	r3, #4
 801310a:	d011      	beq.n	8013130 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 801310c:	4b0a      	ldr	r3, [pc, #40]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 801310e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013110:	4a0c      	ldr	r2, [pc, #48]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 8013112:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013116:	4413      	add	r3, r2
 8013118:	4a0a      	ldr	r2, [pc, #40]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 801311a:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 801311e:	4b06      	ldr	r3, [pc, #24]	; (8013138 <ComputeRxWindowParameters+0xbc>)
 8013120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013122:	4a08      	ldr	r2, [pc, #32]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 8013124:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013128:	4413      	add	r3, r2
 801312a:	4a06      	ldr	r2, [pc, #24]	; (8013144 <ComputeRxWindowParameters+0xc8>)
 801312c:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013130:	bf00      	nop
 8013132:	3704      	adds	r7, #4
 8013134:	46bd      	mov	sp, r7
 8013136:	bd90      	pop	{r4, r7, pc}
 8013138:	20000df4 	.word	0x20000df4
 801313c:	20000ca4 	.word	0x20000ca4
 8013140:	20000cb8 	.word	0x20000cb8
 8013144:	200008ec 	.word	0x200008ec

08013148 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b082      	sub	sp, #8
 801314c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 801314e:	2300      	movs	r3, #0
 8013150:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8013152:	4b13      	ldr	r3, [pc, #76]	; (80131a0 <VerifyTxFrame+0x58>)
 8013154:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013158:	2b00      	cmp	r3, #0
 801315a:	d01b      	beq.n	8013194 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801315c:	1d3b      	adds	r3, r7, #4
 801315e:	4618      	mov	r0, r3
 8013160:	f002 fe4c 	bl	8015dfc <LoRaMacCommandsGetSizeSerializedCmds>
 8013164:	4603      	mov	r3, r0
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801316a:	2313      	movs	r3, #19
 801316c:	e013      	b.n	8013196 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 801316e:	4b0d      	ldr	r3, [pc, #52]	; (80131a4 <VerifyTxFrame+0x5c>)
 8013170:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013174:	4a0a      	ldr	r2, [pc, #40]	; (80131a0 <VerifyTxFrame+0x58>)
 8013176:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 801317a:	687a      	ldr	r2, [r7, #4]
 801317c:	b2d2      	uxtb	r2, r2
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff f978 	bl	8012474 <ValidatePayloadLength>
 8013184:	4603      	mov	r3, r0
 8013186:	f083 0301 	eor.w	r3, r3, #1
 801318a:	b2db      	uxtb	r3, r3
 801318c:	2b00      	cmp	r3, #0
 801318e:	d001      	beq.n	8013194 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 8013190:	2308      	movs	r3, #8
 8013192:	e000      	b.n	8013196 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3708      	adds	r7, #8
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	20000df4 	.word	0x20000df4
 80131a4:	200008ec 	.word	0x200008ec

080131a8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80131a8:	b580      	push	{r7, lr}
 80131aa:	b082      	sub	sp, #8
 80131ac:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80131ae:	4b18      	ldr	r3, [pc, #96]	; (8013210 <SerializeTxFrame+0x68>)
 80131b0:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d002      	beq.n	80131be <SerializeTxFrame+0x16>
 80131b8:	2b04      	cmp	r3, #4
 80131ba:	d011      	beq.n	80131e0 <SerializeTxFrame+0x38>
 80131bc:	e021      	b.n	8013202 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80131be:	4815      	ldr	r0, [pc, #84]	; (8013214 <SerializeTxFrame+0x6c>)
 80131c0:	f004 f97a 	bl	80174b8 <LoRaMacSerializerJoinRequest>
 80131c4:	4603      	mov	r3, r0
 80131c6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131c8:	79fb      	ldrb	r3, [r7, #7]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d001      	beq.n	80131d2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80131ce:	2311      	movs	r3, #17
 80131d0:	e01a      	b.n	8013208 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80131d2:	4b0f      	ldr	r3, [pc, #60]	; (8013210 <SerializeTxFrame+0x68>)
 80131d4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80131d8:	b29a      	uxth	r2, r3
 80131da:	4b0d      	ldr	r3, [pc, #52]	; (8013210 <SerializeTxFrame+0x68>)
 80131dc:	801a      	strh	r2, [r3, #0]
            break;
 80131de:	e012      	b.n	8013206 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80131e0:	480c      	ldr	r0, [pc, #48]	; (8013214 <SerializeTxFrame+0x6c>)
 80131e2:	f004 f9eb 	bl	80175bc <LoRaMacSerializerData>
 80131e6:	4603      	mov	r3, r0
 80131e8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131ea:	79fb      	ldrb	r3, [r7, #7]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d001      	beq.n	80131f4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80131f0:	2311      	movs	r3, #17
 80131f2:	e009      	b.n	8013208 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80131f4:	4b06      	ldr	r3, [pc, #24]	; (8013210 <SerializeTxFrame+0x68>)
 80131f6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80131fa:	b29a      	uxth	r2, r3
 80131fc:	4b04      	ldr	r3, [pc, #16]	; (8013210 <SerializeTxFrame+0x68>)
 80131fe:	801a      	strh	r2, [r3, #0]
            break;
 8013200:	e001      	b.n	8013206 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013202:	2303      	movs	r3, #3
 8013204:	e000      	b.n	8013208 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 8013206:	2300      	movs	r3, #0
}
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}
 8013210:	200008ec 	.word	0x200008ec
 8013214:	200009f4 	.word	0x200009f4

08013218 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b090      	sub	sp, #64	; 0x40
 801321c:	af02      	add	r7, sp, #8
 801321e:	4603      	mov	r3, r0
 8013220:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013222:	2303      	movs	r3, #3
 8013224:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013228:	f7ff ff06 	bl	8013038 <CheckForClassBCollision>
 801322c:	4603      	mov	r3, r0
 801322e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013232:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013236:	2b00      	cmp	r3, #0
 8013238:	d002      	beq.n	8013240 <ScheduleTx+0x28>
    {
        return status;
 801323a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801323e:	e092      	b.n	8013366 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013240:	f000 f8fe 	bl	8013440 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8013244:	f7ff ffb0 	bl	80131a8 <SerializeTxFrame>
 8013248:	4603      	mov	r3, r0
 801324a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801324e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013252:	2b00      	cmp	r3, #0
 8013254:	d002      	beq.n	801325c <ScheduleTx+0x44>
    {
        return status;
 8013256:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801325a:	e084      	b.n	8013366 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801325c:	4b44      	ldr	r3, [pc, #272]	; (8013370 <ScheduleTx+0x158>)
 801325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013260:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013262:	4b43      	ldr	r3, [pc, #268]	; (8013370 <ScheduleTx+0x158>)
 8013264:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013268:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801326a:	4b41      	ldr	r3, [pc, #260]	; (8013370 <ScheduleTx+0x158>)
 801326c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013270:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8013272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013276:	4618      	mov	r0, r3
 8013278:	f00a fa2c 	bl	801d6d4 <SysTimeGetMcuTime>
 801327c:	4638      	mov	r0, r7
 801327e:	4b3c      	ldr	r3, [pc, #240]	; (8013370 <ScheduleTx+0x158>)
 8013280:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8013284:	9200      	str	r2, [sp, #0]
 8013286:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 801328a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801328e:	ca06      	ldmia	r2, {r1, r2}
 8013290:	f00a f981 	bl	801d596 <SysTimeSub>
 8013294:	f107 0320 	add.w	r3, r7, #32
 8013298:	463a      	mov	r2, r7
 801329a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801329e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80132a2:	4b33      	ldr	r3, [pc, #204]	; (8013370 <ScheduleTx+0x158>)
 80132a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132a6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80132a8:	2300      	movs	r3, #0
 80132aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80132ae:	2301      	movs	r3, #1
 80132b0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80132b2:	4b30      	ldr	r3, [pc, #192]	; (8013374 <ScheduleTx+0x15c>)
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80132b8:	4b2d      	ldr	r3, [pc, #180]	; (8013370 <ScheduleTx+0x158>)
 80132ba:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d104      	bne.n	80132cc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80132c2:	2301      	movs	r3, #1
 80132c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80132c8:	2300      	movs	r3, #0
 80132ca:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80132cc:	4b28      	ldr	r3, [pc, #160]	; (8013370 <ScheduleTx+0x158>)
 80132ce:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80132d2:	f107 0114 	add.w	r1, r7, #20
 80132d6:	4b28      	ldr	r3, [pc, #160]	; (8013378 <ScheduleTx+0x160>)
 80132d8:	9300      	str	r3, [sp, #0]
 80132da:	4b28      	ldr	r3, [pc, #160]	; (801337c <ScheduleTx+0x164>)
 80132dc:	4a28      	ldr	r2, [pc, #160]	; (8013380 <ScheduleTx+0x168>)
 80132de:	f004 fbb1 	bl	8017a44 <RegionNextChannel>
 80132e2:	4603      	mov	r3, r0
 80132e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 80132e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d025      	beq.n	801333c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 80132f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132f4:	2b0b      	cmp	r3, #11
 80132f6:	d11e      	bne.n	8013336 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 80132f8:	4b1e      	ldr	r3, [pc, #120]	; (8013374 <ScheduleTx+0x15c>)
 80132fa:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d01c      	beq.n	801333c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 8013302:	7bfb      	ldrb	r3, [r7, #15]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d013      	beq.n	8013330 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013308:	4b1a      	ldr	r3, [pc, #104]	; (8013374 <ScheduleTx+0x15c>)
 801330a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801330e:	f043 0320 	orr.w	r3, r3, #32
 8013312:	4a18      	ldr	r2, [pc, #96]	; (8013374 <ScheduleTx+0x15c>)
 8013314:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013318:	4b16      	ldr	r3, [pc, #88]	; (8013374 <ScheduleTx+0x15c>)
 801331a:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 801331e:	4619      	mov	r1, r3
 8013320:	4818      	ldr	r0, [pc, #96]	; (8013384 <ScheduleTx+0x16c>)
 8013322:	f00a ff77 	bl	801e214 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 8013326:	4817      	ldr	r0, [pc, #92]	; (8013384 <ScheduleTx+0x16c>)
 8013328:	f00a fe96 	bl	801e058 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	e01a      	b.n	8013366 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013334:	e017      	b.n	8013366 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8013336:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801333a:	e014      	b.n	8013366 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 801333c:	f7ff fe9e 	bl	801307c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013340:	f7ff ff02 	bl	8013148 <VerifyTxFrame>
 8013344:	4603      	mov	r3, r0
 8013346:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801334a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801334e:	2b00      	cmp	r3, #0
 8013350:	d002      	beq.n	8013358 <ScheduleTx+0x140>
    {
        return status;
 8013352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013356:	e006      	b.n	8013366 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013358:	4b06      	ldr	r3, [pc, #24]	; (8013374 <ScheduleTx+0x15c>)
 801335a:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 801335e:	4618      	mov	r0, r3
 8013360:	f000 fb62 	bl	8013a28 <SendFrameOnChannel>
 8013364:	4603      	mov	r3, r0
}
 8013366:	4618      	mov	r0, r3
 8013368:	3738      	adds	r7, #56	; 0x38
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	20000df4 	.word	0x20000df4
 8013374:	200008ec 	.word	0x200008ec
 8013378:	20000e24 	.word	0x20000e24
 801337c:	20000d70 	.word	0x20000d70
 8013380:	20000cfd 	.word	0x20000cfd
 8013384:	20000c54 	.word	0x20000c54

08013388 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b084      	sub	sp, #16
 801338c:	af00      	add	r7, sp, #0
 801338e:	4603      	mov	r3, r0
 8013390:	460a      	mov	r2, r1
 8013392:	71fb      	strb	r3, [r7, #7]
 8013394:	4613      	mov	r3, r2
 8013396:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8013398:	2313      	movs	r3, #19
 801339a:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 801339c:	2300      	movs	r3, #0
 801339e:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80133a0:	4b25      	ldr	r3, [pc, #148]	; (8013438 <SecureFrame+0xb0>)
 80133a2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d002      	beq.n	80133b0 <SecureFrame+0x28>
 80133aa:	2b04      	cmp	r3, #4
 80133ac:	d011      	beq.n	80133d2 <SecureFrame+0x4a>
 80133ae:	e03b      	b.n	8013428 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133b0:	4822      	ldr	r0, [pc, #136]	; (801343c <SecureFrame+0xb4>)
 80133b2:	f003 fc47 	bl	8016c44 <LoRaMacCryptoPrepareJoinRequest>
 80133b6:	4603      	mov	r3, r0
 80133b8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133ba:	7bfb      	ldrb	r3, [r7, #15]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d001      	beq.n	80133c4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133c0:	2311      	movs	r3, #17
 80133c2:	e034      	b.n	801342e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133c4:	4b1c      	ldr	r3, [pc, #112]	; (8013438 <SecureFrame+0xb0>)
 80133c6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	4b1a      	ldr	r3, [pc, #104]	; (8013438 <SecureFrame+0xb0>)
 80133ce:	801a      	strh	r2, [r3, #0]
            break;
 80133d0:	e02c      	b.n	801342c <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80133d2:	f107 0308 	add.w	r3, r7, #8
 80133d6:	4618      	mov	r0, r3
 80133d8:	f003 fb44 	bl	8016a64 <LoRaMacCryptoGetFCntUp>
 80133dc:	4603      	mov	r3, r0
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d001      	beq.n	80133e6 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80133e2:	2312      	movs	r3, #18
 80133e4:	e023      	b.n	801342e <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80133e6:	4b14      	ldr	r3, [pc, #80]	; (8013438 <SecureFrame+0xb0>)
 80133e8:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d104      	bne.n	80133fa <SecureFrame+0x72>
 80133f0:	4b11      	ldr	r3, [pc, #68]	; (8013438 <SecureFrame+0xb0>)
 80133f2:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 80133f6:	2b01      	cmp	r3, #1
 80133f8:	d902      	bls.n	8013400 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	3b01      	subs	r3, #1
 80133fe:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013400:	68b8      	ldr	r0, [r7, #8]
 8013402:	79ba      	ldrb	r2, [r7, #6]
 8013404:	79f9      	ldrb	r1, [r7, #7]
 8013406:	4b0d      	ldr	r3, [pc, #52]	; (801343c <SecureFrame+0xb4>)
 8013408:	f003 fd4a 	bl	8016ea0 <LoRaMacCryptoSecureMessage>
 801340c:	4603      	mov	r3, r0
 801340e:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013410:	7bfb      	ldrb	r3, [r7, #15]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d001      	beq.n	801341a <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013416:	2311      	movs	r3, #17
 8013418:	e009      	b.n	801342e <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801341a:	4b07      	ldr	r3, [pc, #28]	; (8013438 <SecureFrame+0xb0>)
 801341c:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013420:	b29a      	uxth	r2, r3
 8013422:	4b05      	ldr	r3, [pc, #20]	; (8013438 <SecureFrame+0xb0>)
 8013424:	801a      	strh	r2, [r3, #0]
            break;
 8013426:	e001      	b.n	801342c <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013428:	2303      	movs	r3, #3
 801342a:	e000      	b.n	801342e <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3710      	adds	r7, #16
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	200008ec 	.word	0x200008ec
 801343c:	200009f4 	.word	0x200009f4

08013440 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013440:	b480      	push	{r7}
 8013442:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8013444:	4b09      	ldr	r3, [pc, #36]	; (801346c <CalculateBackOff+0x2c>)
 8013446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013448:	2b00      	cmp	r3, #0
 801344a:	d10a      	bne.n	8013462 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 801344c:	4b07      	ldr	r3, [pc, #28]	; (801346c <CalculateBackOff+0x2c>)
 801344e:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 8013452:	3b01      	subs	r3, #1
 8013454:	4a06      	ldr	r2, [pc, #24]	; (8013470 <CalculateBackOff+0x30>)
 8013456:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 801345a:	fb02 f303 	mul.w	r3, r2, r3
 801345e:	4a03      	ldr	r2, [pc, #12]	; (801346c <CalculateBackOff+0x2c>)
 8013460:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 8013462:	bf00      	nop
 8013464:	46bd      	mov	sp, r7
 8013466:	bc80      	pop	{r7}
 8013468:	4770      	bx	lr
 801346a:	bf00      	nop
 801346c:	20000df4 	.word	0x20000df4
 8013470:	200008ec 	.word	0x200008ec

08013474 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	7139      	strb	r1, [r7, #4]
 801347e:	71fb      	strb	r3, [r7, #7]
 8013480:	4613      	mov	r3, r2
 8013482:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8013484:	79fb      	ldrb	r3, [r7, #7]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <RemoveMacCommands+0x1c>
 801348a:	79fb      	ldrb	r3, [r7, #7]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d10d      	bne.n	80134ac <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 8013490:	79bb      	ldrb	r3, [r7, #6]
 8013492:	2b01      	cmp	r3, #1
 8013494:	d108      	bne.n	80134a8 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8013496:	793b      	ldrb	r3, [r7, #4]
 8013498:	f003 0320 	and.w	r3, r3, #32
 801349c:	b2db      	uxtb	r3, r3
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d004      	beq.n	80134ac <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80134a2:	f002 fc7f 	bl	8015da4 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80134a6:	e001      	b.n	80134ac <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80134a8:	f002 fc7c 	bl	8015da4 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80134ac:	bf00      	nop
 80134ae:	3708      	adds	r7, #8
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80134b4:	b5b0      	push	{r4, r5, r7, lr}
 80134b6:	b090      	sub	sp, #64	; 0x40
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	4603      	mov	r3, r0
 80134bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80134be:	79fb      	ldrb	r3, [r7, #7]
 80134c0:	f083 0301 	eor.w	r3, r3, #1
 80134c4:	b2db      	uxtb	r3, r3
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80134ca:	4b80      	ldr	r3, [pc, #512]	; (80136cc <ResetMacParameters+0x218>)
 80134cc:	2200      	movs	r2, #0
 80134ce:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80134d2:	4b7e      	ldr	r3, [pc, #504]	; (80136cc <ResetMacParameters+0x218>)
 80134d4:	2200      	movs	r2, #0
 80134d6:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80134d8:	4b7d      	ldr	r3, [pc, #500]	; (80136d0 <ResetMacParameters+0x21c>)
 80134da:	2200      	movs	r2, #0
 80134dc:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80134e0:	4b7b      	ldr	r3, [pc, #492]	; (80136d0 <ResetMacParameters+0x21c>)
 80134e2:	2201      	movs	r2, #1
 80134e4:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 80134e8:	4b79      	ldr	r3, [pc, #484]	; (80136d0 <ResetMacParameters+0x21c>)
 80134ea:	2201      	movs	r2, #1
 80134ec:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 80134f0:	4b77      	ldr	r3, [pc, #476]	; (80136d0 <ResetMacParameters+0x21c>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80134f8:	4b74      	ldr	r3, [pc, #464]	; (80136cc <ResetMacParameters+0x218>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013500:	4b72      	ldr	r3, [pc, #456]	; (80136cc <ResetMacParameters+0x218>)
 8013502:	2201      	movs	r2, #1
 8013504:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013508:	4b70      	ldr	r3, [pc, #448]	; (80136cc <ResetMacParameters+0x218>)
 801350a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801350e:	4b6f      	ldr	r3, [pc, #444]	; (80136cc <ResetMacParameters+0x218>)
 8013510:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8013514:	4b6d      	ldr	r3, [pc, #436]	; (80136cc <ResetMacParameters+0x218>)
 8013516:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801351a:	4b6c      	ldr	r3, [pc, #432]	; (80136cc <ResetMacParameters+0x218>)
 801351c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013520:	4b6a      	ldr	r3, [pc, #424]	; (80136cc <ResetMacParameters+0x218>)
 8013522:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 8013526:	4b69      	ldr	r3, [pc, #420]	; (80136cc <ResetMacParameters+0x218>)
 8013528:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801352c:	4b67      	ldr	r3, [pc, #412]	; (80136cc <ResetMacParameters+0x218>)
 801352e:	4a67      	ldr	r2, [pc, #412]	; (80136cc <ResetMacParameters+0x218>)
 8013530:	336c      	adds	r3, #108	; 0x6c
 8013532:	32b4      	adds	r2, #180	; 0xb4
 8013534:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013538:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801353c:	4b63      	ldr	r3, [pc, #396]	; (80136cc <ResetMacParameters+0x218>)
 801353e:	4a63      	ldr	r2, [pc, #396]	; (80136cc <ResetMacParameters+0x218>)
 8013540:	3374      	adds	r3, #116	; 0x74
 8013542:	32bc      	adds	r2, #188	; 0xbc
 8013544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013548:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 801354c:	4b5f      	ldr	r3, [pc, #380]	; (80136cc <ResetMacParameters+0x218>)
 801354e:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 8013552:	4b5e      	ldr	r3, [pc, #376]	; (80136cc <ResetMacParameters+0x218>)
 8013554:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013558:	4b5c      	ldr	r3, [pc, #368]	; (80136cc <ResetMacParameters+0x218>)
 801355a:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 801355e:	4b5b      	ldr	r3, [pc, #364]	; (80136cc <ResetMacParameters+0x218>)
 8013560:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8013564:	4b59      	ldr	r3, [pc, #356]	; (80136cc <ResetMacParameters+0x218>)
 8013566:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801356a:	4a58      	ldr	r2, [pc, #352]	; (80136cc <ResetMacParameters+0x218>)
 801356c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013570:	4b56      	ldr	r3, [pc, #344]	; (80136cc <ResetMacParameters+0x218>)
 8013572:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8013576:	4a55      	ldr	r2, [pc, #340]	; (80136cc <ResetMacParameters+0x218>)
 8013578:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 801357c:	4b53      	ldr	r3, [pc, #332]	; (80136cc <ResetMacParameters+0x218>)
 801357e:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 8013582:	4b52      	ldr	r3, [pc, #328]	; (80136cc <ResetMacParameters+0x218>)
 8013584:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 8013588:	4b50      	ldr	r3, [pc, #320]	; (80136cc <ResetMacParameters+0x218>)
 801358a:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 801358e:	4b4f      	ldr	r3, [pc, #316]	; (80136cc <ResetMacParameters+0x218>)
 8013590:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 8013594:	4b4e      	ldr	r3, [pc, #312]	; (80136d0 <ResetMacParameters+0x21c>)
 8013596:	2200      	movs	r2, #0
 8013598:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 801359c:	4b4b      	ldr	r3, [pc, #300]	; (80136cc <ResetMacParameters+0x218>)
 801359e:	2200      	movs	r2, #0
 80135a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80135a4:	4b49      	ldr	r3, [pc, #292]	; (80136cc <ResetMacParameters+0x218>)
 80135a6:	2200      	movs	r2, #0
 80135a8:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80135ac:	4b47      	ldr	r3, [pc, #284]	; (80136cc <ResetMacParameters+0x218>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80135b4:	4b45      	ldr	r3, [pc, #276]	; (80136cc <ResetMacParameters+0x218>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80135bc:	4b43      	ldr	r3, [pc, #268]	; (80136cc <ResetMacParameters+0x218>)
 80135be:	2200      	movs	r2, #0
 80135c0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80135c4:	4b41      	ldr	r3, [pc, #260]	; (80136cc <ResetMacParameters+0x218>)
 80135c6:	2200      	movs	r2, #0
 80135c8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80135cc:	4b3f      	ldr	r3, [pc, #252]	; (80136cc <ResetMacParameters+0x218>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80135d4:	4b3d      	ldr	r3, [pc, #244]	; (80136cc <ResetMacParameters+0x218>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80135dc:	4b3b      	ldr	r3, [pc, #236]	; (80136cc <ResetMacParameters+0x218>)
 80135de:	2200      	movs	r2, #0
 80135e0:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80135e4:	2301      	movs	r3, #1
 80135e6:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80135e8:	4b3a      	ldr	r3, [pc, #232]	; (80136d4 <ResetMacParameters+0x220>)
 80135ea:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80135ec:	4b3a      	ldr	r3, [pc, #232]	; (80136d8 <ResetMacParameters+0x224>)
 80135ee:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80135f0:	4b36      	ldr	r3, [pc, #216]	; (80136cc <ResetMacParameters+0x218>)
 80135f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80135f6:	f107 020c 	add.w	r2, r7, #12
 80135fa:	4611      	mov	r1, r2
 80135fc:	4618      	mov	r0, r3
 80135fe:	f004 f90d 	bl	801781c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8013602:	4b33      	ldr	r3, [pc, #204]	; (80136d0 <ResetMacParameters+0x21c>)
 8013604:	2200      	movs	r2, #0
 8013606:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 801360a:	4b31      	ldr	r3, [pc, #196]	; (80136d0 <ResetMacParameters+0x21c>)
 801360c:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013610:	4b2f      	ldr	r3, [pc, #188]	; (80136d0 <ResetMacParameters+0x21c>)
 8013612:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8013616:	4b2d      	ldr	r3, [pc, #180]	; (80136cc <ResetMacParameters+0x218>)
 8013618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801361a:	4a2d      	ldr	r2, [pc, #180]	; (80136d0 <ResetMacParameters+0x21c>)
 801361c:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013620:	4b2a      	ldr	r3, [pc, #168]	; (80136cc <ResetMacParameters+0x218>)
 8013622:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8013626:	4b2a      	ldr	r3, [pc, #168]	; (80136d0 <ResetMacParameters+0x21c>)
 8013628:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 801362c:	4b27      	ldr	r3, [pc, #156]	; (80136cc <ResetMacParameters+0x218>)
 801362e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8013632:	4b27      	ldr	r3, [pc, #156]	; (80136d0 <ResetMacParameters+0x21c>)
 8013634:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013638:	4b25      	ldr	r3, [pc, #148]	; (80136d0 <ResetMacParameters+0x21c>)
 801363a:	2200      	movs	r2, #0
 801363c:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013640:	4b23      	ldr	r3, [pc, #140]	; (80136d0 <ResetMacParameters+0x21c>)
 8013642:	2201      	movs	r2, #1
 8013644:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013648:	4a21      	ldr	r2, [pc, #132]	; (80136d0 <ResetMacParameters+0x21c>)
 801364a:	4b21      	ldr	r3, [pc, #132]	; (80136d0 <ResetMacParameters+0x21c>)
 801364c:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013650:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 8013654:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013658:	682b      	ldr	r3, [r5, #0]
 801365a:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 801365c:	4b1c      	ldr	r3, [pc, #112]	; (80136d0 <ResetMacParameters+0x21c>)
 801365e:	2201      	movs	r2, #1
 8013660:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8013664:	4b1a      	ldr	r3, [pc, #104]	; (80136d0 <ResetMacParameters+0x21c>)
 8013666:	2202      	movs	r2, #2
 8013668:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 801366c:	2300      	movs	r3, #0
 801366e:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013670:	2300      	movs	r3, #0
 8013672:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 8013674:	4b16      	ldr	r3, [pc, #88]	; (80136d0 <ResetMacParameters+0x21c>)
 8013676:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801367a:	2b00      	cmp	r3, #0
 801367c:	d009      	beq.n	8013692 <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 801367e:	4b14      	ldr	r3, [pc, #80]	; (80136d0 <ResetMacParameters+0x21c>)
 8013680:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013684:	685b      	ldr	r3, [r3, #4]
 8013686:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8013688:	4b11      	ldr	r3, [pc, #68]	; (80136d0 <ResetMacParameters+0x21c>)
 801368a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801368e:	695b      	ldr	r3, [r3, #20]
 8013690:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8013692:	4b12      	ldr	r3, [pc, #72]	; (80136dc <ResetMacParameters+0x228>)
 8013694:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8013696:	4b12      	ldr	r3, [pc, #72]	; (80136e0 <ResetMacParameters+0x22c>)
 8013698:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 801369a:	4b12      	ldr	r3, [pc, #72]	; (80136e4 <ResetMacParameters+0x230>)
 801369c:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 801369e:	4b12      	ldr	r3, [pc, #72]	; (80136e8 <ResetMacParameters+0x234>)
 80136a0:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80136a2:	4b12      	ldr	r3, [pc, #72]	; (80136ec <ResetMacParameters+0x238>)
 80136a4:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80136a6:	4b12      	ldr	r3, [pc, #72]	; (80136f0 <ResetMacParameters+0x23c>)
 80136a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80136aa:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <ResetMacParameters+0x240>)
 80136ac:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80136ae:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <ResetMacParameters+0x244>)
 80136b0:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80136b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80136b6:	f107 0318 	add.w	r3, r7, #24
 80136ba:	4a10      	ldr	r2, [pc, #64]	; (80136fc <ResetMacParameters+0x248>)
 80136bc:	4618      	mov	r0, r3
 80136be:	f002 f899 	bl	80157f4 <LoRaMacClassBInit>
}
 80136c2:	bf00      	nop
 80136c4:	3740      	adds	r7, #64	; 0x40
 80136c6:	46bd      	mov	sp, r7
 80136c8:	bdb0      	pop	{r4, r5, r7, pc}
 80136ca:	bf00      	nop
 80136cc:	20000df4 	.word	0x20000df4
 80136d0:	200008ec 	.word	0x200008ec
 80136d4:	20001014 	.word	0x20001014
 80136d8:	200010a8 	.word	0x200010a8
 80136dc:	20000d48 	.word	0x20000d48
 80136e0:	20000d04 	.word	0x20000d04
 80136e4:	20000d34 	.word	0x20000d34
 80136e8:	20000d6d 	.word	0x20000d6d
 80136ec:	20000ed8 	.word	0x20000ed8
 80136f0:	20000e3c 	.word	0x20000e3c
 80136f4:	20000e40 	.word	0x20000e40
 80136f8:	20000edc 	.word	0x20000edc
 80136fc:	20001544 	.word	0x20001544

08013700 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b082      	sub	sp, #8
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801370a:	6878      	ldr	r0, [r7, #4]
 801370c:	f00a fd12 	bl	801e134 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013710:	4b11      	ldr	r3, [pc, #68]	; (8013758 <RxWindowSetup+0x58>)
 8013712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013714:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8013716:	4b11      	ldr	r3, [pc, #68]	; (801375c <RxWindowSetup+0x5c>)
 8013718:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801371c:	4a10      	ldr	r2, [pc, #64]	; (8013760 <RxWindowSetup+0x60>)
 801371e:	6839      	ldr	r1, [r7, #0]
 8013720:	4618      	mov	r0, r3
 8013722:	f004 f8e3 	bl	80178ec <RegionRxConfig>
 8013726:	4603      	mov	r3, r0
 8013728:	2b00      	cmp	r3, #0
 801372a:	d010      	beq.n	801374e <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 801372c:	4b0d      	ldr	r3, [pc, #52]	; (8013764 <RxWindowSetup+0x64>)
 801372e:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 8013732:	4b0c      	ldr	r3, [pc, #48]	; (8013764 <RxWindowSetup+0x64>)
 8013734:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013738:	4b07      	ldr	r3, [pc, #28]	; (8013758 <RxWindowSetup+0x58>)
 801373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801373c:	4a07      	ldr	r2, [pc, #28]	; (801375c <RxWindowSetup+0x5c>)
 801373e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013740:	4610      	mov	r0, r2
 8013742:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	7cda      	ldrb	r2, [r3, #19]
 8013748:	4b06      	ldr	r3, [pc, #24]	; (8013764 <RxWindowSetup+0x64>)
 801374a:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 801374e:	bf00      	nop
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}
 8013756:	bf00      	nop
 8013758:	0801f9d8 	.word	0x0801f9d8
 801375c:	20000df4 	.word	0x20000df4
 8013760:	20000d08 	.word	0x20000d08
 8013764:	200008ec 	.word	0x200008ec

08013768 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013768:	b590      	push	{r4, r7, lr}
 801376a:	b083      	sub	sp, #12
 801376c:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801376e:	4b1b      	ldr	r3, [pc, #108]	; (80137dc <OpenContinuousRxCWindow+0x74>)
 8013770:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8013774:	4b19      	ldr	r3, [pc, #100]	; (80137dc <OpenContinuousRxCWindow+0x74>)
 8013776:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801377a:	b259      	sxtb	r1, r3
 801377c:	4b17      	ldr	r3, [pc, #92]	; (80137dc <OpenContinuousRxCWindow+0x74>)
 801377e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8013782:	4b16      	ldr	r3, [pc, #88]	; (80137dc <OpenContinuousRxCWindow+0x74>)
 8013784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013786:	4c16      	ldr	r4, [pc, #88]	; (80137e0 <OpenContinuousRxCWindow+0x78>)
 8013788:	9400      	str	r4, [sp, #0]
 801378a:	f004 f895 	bl	80178b8 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801378e:	4b15      	ldr	r3, [pc, #84]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 8013790:	2202      	movs	r2, #2
 8013792:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013796:	4b13      	ldr	r3, [pc, #76]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 8013798:	2201      	movs	r2, #1
 801379a:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801379e:	4b0f      	ldr	r3, [pc, #60]	; (80137dc <OpenContinuousRxCWindow+0x74>)
 80137a0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137a4:	4a10      	ldr	r2, [pc, #64]	; (80137e8 <OpenContinuousRxCWindow+0x80>)
 80137a6:	490e      	ldr	r1, [pc, #56]	; (80137e0 <OpenContinuousRxCWindow+0x78>)
 80137a8:	4618      	mov	r0, r3
 80137aa:	f004 f89f 	bl	80178ec <RegionRxConfig>
 80137ae:	4603      	mov	r3, r0
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d00f      	beq.n	80137d4 <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80137b4:	4b0b      	ldr	r3, [pc, #44]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 80137b6:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80137ba:	4b0a      	ldr	r3, [pc, #40]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 80137bc:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80137c0:	4b0a      	ldr	r3, [pc, #40]	; (80137ec <OpenContinuousRxCWindow+0x84>)
 80137c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137c4:	2000      	movs	r0, #0
 80137c6:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80137c8:	4b06      	ldr	r3, [pc, #24]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 80137ca:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80137ce:	4b05      	ldr	r3, [pc, #20]	; (80137e4 <OpenContinuousRxCWindow+0x7c>)
 80137d0:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80137d4:	bf00      	nop
 80137d6:	3704      	adds	r7, #4
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd90      	pop	{r4, r7, pc}
 80137dc:	20000df4 	.word	0x20000df4
 80137e0:	20000ccc 	.word	0x20000ccc
 80137e4:	200008ec 	.word	0x200008ec
 80137e8:	20000d08 	.word	0x20000d08
 80137ec:	0801f9d8 	.word	0x0801f9d8

080137f0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b088      	sub	sp, #32
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	60f8      	str	r0, [r7, #12]
 80137f8:	60b9      	str	r1, [r7, #8]
 80137fa:	603b      	str	r3, [r7, #0]
 80137fc:	4613      	mov	r3, r2
 80137fe:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013800:	4b82      	ldr	r3, [pc, #520]	; (8013a0c <PrepareFrame+0x21c>)
 8013802:	2200      	movs	r2, #0
 8013804:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8013806:	4b81      	ldr	r3, [pc, #516]	; (8013a0c <PrepareFrame+0x21c>)
 8013808:	2200      	movs	r2, #0
 801380a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 801380e:	2300      	movs	r3, #0
 8013810:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 8013812:	2300      	movs	r3, #0
 8013814:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 8013816:	2300      	movs	r3, #0
 8013818:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 801381a:	683b      	ldr	r3, [r7, #0]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d101      	bne.n	8013824 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013820:	2300      	movs	r3, #0
 8013822:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 8013824:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013826:	461a      	mov	r2, r3
 8013828:	6839      	ldr	r1, [r7, #0]
 801382a:	4879      	ldr	r0, [pc, #484]	; (8013a10 <PrepareFrame+0x220>)
 801382c:	f006 fae7 	bl	8019dfe <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013830:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013832:	b2da      	uxtb	r2, r3
 8013834:	4b75      	ldr	r3, [pc, #468]	; (8013a0c <PrepareFrame+0x21c>)
 8013836:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	781a      	ldrb	r2, [r3, #0]
 801383e:	4b73      	ldr	r3, [pc, #460]	; (8013a0c <PrepareFrame+0x21c>)
 8013840:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	781b      	ldrb	r3, [r3, #0]
 8013846:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801384a:	b2db      	uxtb	r3, r3
 801384c:	2b07      	cmp	r3, #7
 801384e:	f000 80b9 	beq.w	80139c4 <PrepareFrame+0x1d4>
 8013852:	2b07      	cmp	r3, #7
 8013854:	f300 80d0 	bgt.w	80139f8 <PrepareFrame+0x208>
 8013858:	2b02      	cmp	r3, #2
 801385a:	d006      	beq.n	801386a <PrepareFrame+0x7a>
 801385c:	2b04      	cmp	r3, #4
 801385e:	f040 80cb 	bne.w	80139f8 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 8013862:	4b6a      	ldr	r3, [pc, #424]	; (8013a0c <PrepareFrame+0x21c>)
 8013864:	2201      	movs	r2, #1
 8013866:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 801386a:	4b68      	ldr	r3, [pc, #416]	; (8013a0c <PrepareFrame+0x21c>)
 801386c:	2204      	movs	r2, #4
 801386e:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8013872:	4b66      	ldr	r3, [pc, #408]	; (8013a0c <PrepareFrame+0x21c>)
 8013874:	4a67      	ldr	r2, [pc, #412]	; (8013a14 <PrepareFrame+0x224>)
 8013876:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801387a:	4b64      	ldr	r3, [pc, #400]	; (8013a0c <PrepareFrame+0x21c>)
 801387c:	22ff      	movs	r2, #255	; 0xff
 801387e:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8013882:	68fb      	ldr	r3, [r7, #12]
 8013884:	781a      	ldrb	r2, [r3, #0]
 8013886:	4b61      	ldr	r3, [pc, #388]	; (8013a0c <PrepareFrame+0x21c>)
 8013888:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801388c:	4a5f      	ldr	r2, [pc, #380]	; (8013a0c <PrepareFrame+0x21c>)
 801388e:	79fb      	ldrb	r3, [r7, #7]
 8013890:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8013894:	4b60      	ldr	r3, [pc, #384]	; (8013a18 <PrepareFrame+0x228>)
 8013896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801389a:	4a5c      	ldr	r2, [pc, #368]	; (8013a0c <PrepareFrame+0x21c>)
 801389c:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138a0:	68bb      	ldr	r3, [r7, #8]
 80138a2:	781a      	ldrb	r2, [r3, #0]
 80138a4:	4b59      	ldr	r3, [pc, #356]	; (8013a0c <PrepareFrame+0x21c>)
 80138a6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80138aa:	4b58      	ldr	r3, [pc, #352]	; (8013a0c <PrepareFrame+0x21c>)
 80138ac:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80138b0:	4b56      	ldr	r3, [pc, #344]	; (8013a0c <PrepareFrame+0x21c>)
 80138b2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80138b6:	4b55      	ldr	r3, [pc, #340]	; (8013a0c <PrepareFrame+0x21c>)
 80138b8:	4a55      	ldr	r2, [pc, #340]	; (8013a10 <PrepareFrame+0x220>)
 80138ba:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80138be:	f107 0318 	add.w	r3, r7, #24
 80138c2:	4618      	mov	r0, r3
 80138c4:	f003 f8ce 	bl	8016a64 <LoRaMacCryptoGetFCntUp>
 80138c8:	4603      	mov	r3, r0
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d001      	beq.n	80138d2 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80138ce:	2312      	movs	r3, #18
 80138d0:	e098      	b.n	8013a04 <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80138d2:	69bb      	ldr	r3, [r7, #24]
 80138d4:	b29a      	uxth	r2, r3
 80138d6:	4b4d      	ldr	r3, [pc, #308]	; (8013a0c <PrepareFrame+0x21c>)
 80138d8:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80138dc:	4b4b      	ldr	r3, [pc, #300]	; (8013a0c <PrepareFrame+0x21c>)
 80138de:	2200      	movs	r2, #0
 80138e0:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80138e4:	4b49      	ldr	r3, [pc, #292]	; (8013a0c <PrepareFrame+0x21c>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	4a47      	ldr	r2, [pc, #284]	; (8013a0c <PrepareFrame+0x21c>)
 80138f0:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80138f4:	f107 0314 	add.w	r3, r7, #20
 80138f8:	4618      	mov	r0, r3
 80138fa:	f002 fa7f 	bl	8015dfc <LoRaMacCommandsGetSizeSerializedCmds>
 80138fe:	4603      	mov	r3, r0
 8013900:	2b00      	cmp	r3, #0
 8013902:	d001      	beq.n	8013908 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013904:	2313      	movs	r3, #19
 8013906:	e07d      	b.n	8013a04 <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d076      	beq.n	80139fc <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801390e:	4b42      	ldr	r3, [pc, #264]	; (8013a18 <PrepareFrame+0x228>)
 8013910:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013914:	4618      	mov	r0, r3
 8013916:	f7fe fd85 	bl	8012424 <GetMaxAppPayloadWithoutFOptsLength>
 801391a:	4603      	mov	r3, r0
 801391c:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801391e:	4b3b      	ldr	r3, [pc, #236]	; (8013a0c <PrepareFrame+0x21c>)
 8013920:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013924:	2b00      	cmp	r3, #0
 8013926:	d01d      	beq.n	8013964 <PrepareFrame+0x174>
 8013928:	697b      	ldr	r3, [r7, #20]
 801392a:	2b0f      	cmp	r3, #15
 801392c:	d81a      	bhi.n	8013964 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 801392e:	f107 0314 	add.w	r3, r7, #20
 8013932:	4a3a      	ldr	r2, [pc, #232]	; (8013a1c <PrepareFrame+0x22c>)
 8013934:	4619      	mov	r1, r3
 8013936:	200f      	movs	r0, #15
 8013938:	f002 fa76 	bl	8015e28 <LoRaMacCommandsSerializeCmds>
 801393c:	4603      	mov	r3, r0
 801393e:	2b00      	cmp	r3, #0
 8013940:	d001      	beq.n	8013946 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013942:	2313      	movs	r3, #19
 8013944:	e05e      	b.n	8013a04 <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 8013946:	697b      	ldr	r3, [r7, #20]
 8013948:	f003 030f 	and.w	r3, r3, #15
 801394c:	b2d9      	uxtb	r1, r3
 801394e:	68ba      	ldr	r2, [r7, #8]
 8013950:	7813      	ldrb	r3, [r2, #0]
 8013952:	f361 0303 	bfi	r3, r1, #0, #4
 8013956:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	781a      	ldrb	r2, [r3, #0]
 801395c:	4b2b      	ldr	r3, [pc, #172]	; (8013a0c <PrepareFrame+0x21c>)
 801395e:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 8013962:	e04b      	b.n	80139fc <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013964:	4b29      	ldr	r3, [pc, #164]	; (8013a0c <PrepareFrame+0x21c>)
 8013966:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801396a:	2b00      	cmp	r3, #0
 801396c:	d010      	beq.n	8013990 <PrepareFrame+0x1a0>
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	2b0f      	cmp	r3, #15
 8013972:	d90d      	bls.n	8013990 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013974:	7ffb      	ldrb	r3, [r7, #31]
 8013976:	f107 0114 	add.w	r1, r7, #20
 801397a:	4a29      	ldr	r2, [pc, #164]	; (8013a20 <PrepareFrame+0x230>)
 801397c:	4618      	mov	r0, r3
 801397e:	f002 fa53 	bl	8015e28 <LoRaMacCommandsSerializeCmds>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d001      	beq.n	801398c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013988:	2313      	movs	r3, #19
 801398a:	e03b      	b.n	8013a04 <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801398c:	230a      	movs	r3, #10
 801398e:	e039      	b.n	8013a04 <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8013990:	7ffb      	ldrb	r3, [r7, #31]
 8013992:	f107 0114 	add.w	r1, r7, #20
 8013996:	4a22      	ldr	r2, [pc, #136]	; (8013a20 <PrepareFrame+0x230>)
 8013998:	4618      	mov	r0, r3
 801399a:	f002 fa45 	bl	8015e28 <LoRaMacCommandsSerializeCmds>
 801399e:	4603      	mov	r3, r0
 80139a0:	2b00      	cmp	r3, #0
 80139a2:	d001      	beq.n	80139a8 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139a4:	2313      	movs	r3, #19
 80139a6:	e02d      	b.n	8013a04 <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80139a8:	4b18      	ldr	r3, [pc, #96]	; (8013a0c <PrepareFrame+0x21c>)
 80139aa:	2200      	movs	r2, #0
 80139ac:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80139b0:	4b16      	ldr	r3, [pc, #88]	; (8013a0c <PrepareFrame+0x21c>)
 80139b2:	4a1b      	ldr	r2, [pc, #108]	; (8013a20 <PrepareFrame+0x230>)
 80139b4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80139b8:	697b      	ldr	r3, [r7, #20]
 80139ba:	b2da      	uxtb	r2, r3
 80139bc:	4b13      	ldr	r3, [pc, #76]	; (8013a0c <PrepareFrame+0x21c>)
 80139be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80139c2:	e01b      	b.n	80139fc <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d01a      	beq.n	8013a00 <PrepareFrame+0x210>
 80139ca:	4b10      	ldr	r3, [pc, #64]	; (8013a0c <PrepareFrame+0x21c>)
 80139cc:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d015      	beq.n	8013a00 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80139d4:	4813      	ldr	r0, [pc, #76]	; (8013a24 <PrepareFrame+0x234>)
 80139d6:	4b0d      	ldr	r3, [pc, #52]	; (8013a0c <PrepareFrame+0x21c>)
 80139d8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139dc:	b29b      	uxth	r3, r3
 80139de:	461a      	mov	r2, r3
 80139e0:	6839      	ldr	r1, [r7, #0]
 80139e2:	f006 fa0c 	bl	8019dfe <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80139e6:	4b09      	ldr	r3, [pc, #36]	; (8013a0c <PrepareFrame+0x21c>)
 80139e8:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	3301      	adds	r3, #1
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	4b06      	ldr	r3, [pc, #24]	; (8013a0c <PrepareFrame+0x21c>)
 80139f4:	801a      	strh	r2, [r3, #0]
            }
            break;
 80139f6:	e003      	b.n	8013a00 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80139f8:	2302      	movs	r3, #2
 80139fa:	e003      	b.n	8013a04 <PrepareFrame+0x214>
            break;
 80139fc:	bf00      	nop
 80139fe:	e000      	b.n	8013a02 <PrepareFrame+0x212>
            break;
 8013a00:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013a02:	2300      	movs	r3, #0
}
 8013a04:	4618      	mov	r0, r3
 8013a06:	3720      	adds	r7, #32
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	200008ec 	.word	0x200008ec
 8013a10:	20000a24 	.word	0x20000a24
 8013a14:	200008ee 	.word	0x200008ee
 8013a18:	20000df4 	.word	0x20000df4
 8013a1c:	20000a04 	.word	0x20000a04
 8013a20:	20000d74 	.word	0x20000d74
 8013a24:	200008ef 	.word	0x200008ef

08013a28 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b08a      	sub	sp, #40	; 0x28
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	4603      	mov	r3, r0
 8013a30:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a32:	2303      	movs	r3, #3
 8013a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013a3c:	79fb      	ldrb	r3, [r7, #7]
 8013a3e:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a40:	4b48      	ldr	r3, [pc, #288]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a42:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a46:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a48:	4b46      	ldr	r3, [pc, #280]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a4a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a4e:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013a50:	4b44      	ldr	r3, [pc, #272]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a56:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a58:	4b42      	ldr	r3, [pc, #264]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a5e:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013a60:	4b41      	ldr	r3, [pc, #260]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013a62:	881b      	ldrh	r3, [r3, #0]
 8013a64:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013a66:	4b3f      	ldr	r3, [pc, #252]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a68:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013a6c:	f107 020f 	add.w	r2, r7, #15
 8013a70:	f107 0110 	add.w	r1, r7, #16
 8013a74:	4b3d      	ldr	r3, [pc, #244]	; (8013b6c <SendFrameOnChannel+0x144>)
 8013a76:	f003 ff4e 	bl	8017916 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a7a:	4b3b      	ldr	r3, [pc, #236]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a82:	4b38      	ldr	r3, [pc, #224]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013a84:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a88:	b2da      	uxtb	r2, r3
 8013a8a:	4b37      	ldr	r3, [pc, #220]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013a8c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013a90:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013a94:	4b34      	ldr	r3, [pc, #208]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013a96:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013a9a:	79fb      	ldrb	r3, [r7, #7]
 8013a9c:	4a32      	ldr	r2, [pc, #200]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013a9e:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013aa2:	4b31      	ldr	r3, [pc, #196]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013aa4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013aa8:	4a2f      	ldr	r2, [pc, #188]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013aaa:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013aae:	4b2e      	ldr	r3, [pc, #184]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013ab0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ab4:	4a2c      	ldr	r2, [pc, #176]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013ab6:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013aba:	f001 ff07 	bl	80158cc <LoRaMacClassBIsBeaconModeActive>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d00b      	beq.n	8013adc <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013ac4:	4b28      	ldr	r3, [pc, #160]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013ac6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013aca:	4618      	mov	r0, r3
 8013acc:	f001 ff69 	bl	80159a2 <LoRaMacClassBIsUplinkCollision>
 8013ad0:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013ad2:	6a3b      	ldr	r3, [r7, #32]
 8013ad4:	2b00      	cmp	r3, #0
 8013ad6:	d001      	beq.n	8013adc <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013ad8:	2310      	movs	r3, #16
 8013ada:	e03e      	b.n	8013b5a <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013adc:	4b21      	ldr	r3, [pc, #132]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013ade:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d101      	bne.n	8013aea <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013ae6:	f001 ff66 	bl	80159b6 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013aea:	f001 ff00 	bl	80158ee <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013aee:	4b1d      	ldr	r3, [pc, #116]	; (8013b64 <SendFrameOnChannel+0x13c>)
 8013af0:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013af4:	b2db      	uxtb	r3, r3
 8013af6:	4a1c      	ldr	r2, [pc, #112]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013af8:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013afc:	4611      	mov	r1, r2
 8013afe:	4618      	mov	r0, r3
 8013b00:	f7ff fc42 	bl	8013388 <SecureFrame>
 8013b04:	4603      	mov	r3, r0
 8013b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d002      	beq.n	8013b18 <SendFrameOnChannel+0xf0>
    {
        return status;
 8013b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b16:	e020      	b.n	8013b5a <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b18:	4b13      	ldr	r3, [pc, #76]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b1a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b1e:	f043 0302 	orr.w	r3, r3, #2
 8013b22:	4a11      	ldr	r2, [pc, #68]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b24:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013b28:	4b0f      	ldr	r3, [pc, #60]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b2a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013b2e:	f083 0301 	eor.w	r3, r3, #1
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d007      	beq.n	8013b48 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013b38:	4b0b      	ldr	r3, [pc, #44]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b3a:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013b3e:	3301      	adds	r3, #1
 8013b40:	b2da      	uxtb	r2, r3
 8013b42:	4b09      	ldr	r3, [pc, #36]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b44:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013b48:	4b09      	ldr	r3, [pc, #36]	; (8013b70 <SendFrameOnChannel+0x148>)
 8013b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b4c:	4a06      	ldr	r2, [pc, #24]	; (8013b68 <SendFrameOnChannel+0x140>)
 8013b4e:	8812      	ldrh	r2, [r2, #0]
 8013b50:	b2d2      	uxtb	r2, r2
 8013b52:	4611      	mov	r1, r2
 8013b54:	4807      	ldr	r0, [pc, #28]	; (8013b74 <SendFrameOnChannel+0x14c>)
 8013b56:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013b58:	2300      	movs	r3, #0
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3728      	adds	r7, #40	; 0x28
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	20000df4 	.word	0x20000df4
 8013b68:	200008ec 	.word	0x200008ec
 8013b6c:	20000d00 	.word	0x20000d00
 8013b70:	0801f9d8 	.word	0x0801f9d8
 8013b74:	200008ee 	.word	0x200008ee

08013b78 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b086      	sub	sp, #24
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	4603      	mov	r3, r0
 8013b80:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013b82:	4b16      	ldr	r3, [pc, #88]	; (8013bdc <SetTxContinuousWave+0x64>)
 8013b84:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013b88:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013b8a:	4b15      	ldr	r3, [pc, #84]	; (8013be0 <SetTxContinuousWave+0x68>)
 8013b8c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b90:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013b92:	4b13      	ldr	r3, [pc, #76]	; (8013be0 <SetTxContinuousWave+0x68>)
 8013b94:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013b98:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013b9a:	4b11      	ldr	r3, [pc, #68]	; (8013be0 <SetTxContinuousWave+0x68>)
 8013b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013ba0:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013ba2:	4b0f      	ldr	r3, [pc, #60]	; (8013be0 <SetTxContinuousWave+0x68>)
 8013ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013ba8:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013baa:	88fb      	ldrh	r3, [r7, #6]
 8013bac:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013bae:	4b0c      	ldr	r3, [pc, #48]	; (8013be0 <SetTxContinuousWave+0x68>)
 8013bb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bb4:	f107 0208 	add.w	r2, r7, #8
 8013bb8:	4611      	mov	r1, r2
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f003 ff5a 	bl	8017a74 <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013bc0:	4b06      	ldr	r3, [pc, #24]	; (8013bdc <SetTxContinuousWave+0x64>)
 8013bc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013bc6:	f043 0302 	orr.w	r3, r3, #2
 8013bca:	4a04      	ldr	r2, [pc, #16]	; (8013bdc <SetTxContinuousWave+0x64>)
 8013bcc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013bd0:	2300      	movs	r3, #0
}
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	3718      	adds	r7, #24
 8013bd6:	46bd      	mov	sp, r7
 8013bd8:	bd80      	pop	{r7, pc}
 8013bda:	bf00      	nop
 8013bdc:	200008ec 	.word	0x200008ec
 8013be0:	20000df4 	.word	0x20000df4

08013be4 <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	4603      	mov	r3, r0
 8013bec:	6039      	str	r1, [r7, #0]
 8013bee:	80fb      	strh	r3, [r7, #6]
 8013bf0:	4613      	mov	r3, r2
 8013bf2:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013bf4:	4b09      	ldr	r3, [pc, #36]	; (8013c1c <SetTxContinuousWave1+0x38>)
 8013bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013bf8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013bfc:	88fa      	ldrh	r2, [r7, #6]
 8013bfe:	6838      	ldr	r0, [r7, #0]
 8013c00:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c02:	4b07      	ldr	r3, [pc, #28]	; (8013c20 <SetTxContinuousWave1+0x3c>)
 8013c04:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c08:	f043 0302 	orr.w	r3, r3, #2
 8013c0c:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <SetTxContinuousWave1+0x3c>)
 8013c0e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c12:	2300      	movs	r3, #0
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3708      	adds	r7, #8
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	0801f9d8 	.word	0x0801f9d8
 8013c20:	200008ec 	.word	0x200008ec

08013c24 <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013c24:	b480      	push	{r7}
 8013c26:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013c28:	2300      	movs	r3, #0
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	46bd      	mov	sp, r7
 8013c2e:	bc80      	pop	{r7}
 8013c30:	4770      	bx	lr

08013c32 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013c32:	b480      	push	{r7}
 8013c34:	b083      	sub	sp, #12
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	6078      	str	r0, [r7, #4]
 8013c3a:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d002      	beq.n	8013c48 <DetermineFrameType+0x16>
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d101      	bne.n	8013c4c <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c48:	2303      	movs	r3, #3
 8013c4a:	e03b      	b.n	8013cc4 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	7b1b      	ldrb	r3, [r3, #12]
 8013c50:	f003 030f 	and.w	r3, r3, #15
 8013c54:	b2db      	uxtb	r3, r3
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d008      	beq.n	8013c6c <DetermineFrameType+0x3a>
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d003      	beq.n	8013c6c <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c64:	683b      	ldr	r3, [r7, #0]
 8013c66:	2200      	movs	r2, #0
 8013c68:	701a      	strb	r2, [r3, #0]
 8013c6a:	e02a      	b.n	8013cc2 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d103      	bne.n	8013c7e <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c76:	683b      	ldr	r3, [r7, #0]
 8013c78:	2201      	movs	r2, #1
 8013c7a:	701a      	strb	r2, [r3, #0]
 8013c7c:	e021      	b.n	8013cc2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	7b1b      	ldrb	r3, [r3, #12]
 8013c82:	f003 030f 	and.w	r3, r3, #15
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d108      	bne.n	8013c9e <DetermineFrameType+0x6c>
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d103      	bne.n	8013c9e <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	2202      	movs	r2, #2
 8013c9a:	701a      	strb	r2, [r3, #0]
 8013c9c:	e011      	b.n	8013cc2 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	7b1b      	ldrb	r3, [r3, #12]
 8013ca2:	f003 030f 	and.w	r3, r3, #15
 8013ca6:	b2db      	uxtb	r3, r3
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	d108      	bne.n	8013cbe <DetermineFrameType+0x8c>
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d003      	beq.n	8013cbe <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	2203      	movs	r2, #3
 8013cba:	701a      	strb	r2, [r3, #0]
 8013cbc:	e001      	b.n	8013cc2 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013cbe:	2318      	movs	r3, #24
 8013cc0:	e000      	b.n	8013cc4 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013cc2:	2300      	movs	r3, #0
}
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	370c      	adds	r7, #12
 8013cc8:	46bd      	mov	sp, r7
 8013cca:	bc80      	pop	{r7}
 8013ccc:	4770      	bx	lr
	...

08013cd0 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013cd0:	b480      	push	{r7}
 8013cd2:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013cd4:	4b12      	ldr	r3, [pc, #72]	; (8013d20 <CheckRetransUnconfirmedUplink+0x50>)
 8013cd6:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013cda:	4b12      	ldr	r3, [pc, #72]	; (8013d24 <CheckRetransUnconfirmedUplink+0x54>)
 8013cdc:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d301      	bcc.n	8013ce8 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013ce4:	2301      	movs	r3, #1
 8013ce6:	e016      	b.n	8013d16 <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013ce8:	4b0d      	ldr	r3, [pc, #52]	; (8013d20 <CheckRetransUnconfirmedUplink+0x50>)
 8013cea:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013cee:	f003 0302 	and.w	r3, r3, #2
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d00d      	beq.n	8013d14 <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013cf8:	4b0a      	ldr	r3, [pc, #40]	; (8013d24 <CheckRetransUnconfirmedUplink+0x54>)
 8013cfa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013d02:	2301      	movs	r3, #1
 8013d04:	e007      	b.n	8013d16 <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013d06:	4b06      	ldr	r3, [pc, #24]	; (8013d20 <CheckRetransUnconfirmedUplink+0x50>)
 8013d08:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d101      	bne.n	8013d14 <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013d10:	2301      	movs	r3, #1
 8013d12:	e000      	b.n	8013d16 <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013d14:	2300      	movs	r3, #0
}
 8013d16:	4618      	mov	r0, r3
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bc80      	pop	{r7}
 8013d1c:	4770      	bx	lr
 8013d1e:	bf00      	nop
 8013d20:	200008ec 	.word	0x200008ec
 8013d24:	20000df4 	.word	0x20000df4

08013d28 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d28:	b480      	push	{r7}
 8013d2a:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d2c:	4b0e      	ldr	r3, [pc, #56]	; (8013d68 <CheckRetransConfirmedUplink+0x40>)
 8013d2e:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013d32:	4b0d      	ldr	r3, [pc, #52]	; (8013d68 <CheckRetransConfirmedUplink+0x40>)
 8013d34:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d301      	bcc.n	8013d40 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013d3c:	2301      	movs	r3, #1
 8013d3e:	e00f      	b.n	8013d60 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d40:	4b09      	ldr	r3, [pc, #36]	; (8013d68 <CheckRetransConfirmedUplink+0x40>)
 8013d42:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d46:	f003 0302 	and.w	r3, r3, #2
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d006      	beq.n	8013d5e <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d50:	4b05      	ldr	r3, [pc, #20]	; (8013d68 <CheckRetransConfirmedUplink+0x40>)
 8013d52:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d001      	beq.n	8013d5e <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e000      	b.n	8013d60 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013d5e:	2300      	movs	r3, #0
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bc80      	pop	{r7}
 8013d66:	4770      	bx	lr
 8013d68:	200008ec 	.word	0x200008ec

08013d6c <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d6c:	b480      	push	{r7}
 8013d6e:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d70:	4b1a      	ldr	r3, [pc, #104]	; (8013ddc <StopRetransmission+0x70>)
 8013d72:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d76:	f003 0302 	and.w	r3, r3, #2
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d009      	beq.n	8013d94 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d80:	4b16      	ldr	r3, [pc, #88]	; (8013ddc <StopRetransmission+0x70>)
 8013d82:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d00e      	beq.n	8013da8 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013d8a:	4b14      	ldr	r3, [pc, #80]	; (8013ddc <StopRetransmission+0x70>)
 8013d8c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d009      	beq.n	8013da8 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013d94:	4b12      	ldr	r3, [pc, #72]	; (8013de0 <StopRetransmission+0x74>)
 8013d96:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d004      	beq.n	8013da8 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013d9e:	4b10      	ldr	r3, [pc, #64]	; (8013de0 <StopRetransmission+0x74>)
 8013da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da2:	3301      	adds	r3, #1
 8013da4:	4a0e      	ldr	r2, [pc, #56]	; (8013de0 <StopRetransmission+0x74>)
 8013da6:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013da8:	4b0c      	ldr	r3, [pc, #48]	; (8013ddc <StopRetransmission+0x70>)
 8013daa:	2200      	movs	r2, #0
 8013dac:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013db0:	4b0a      	ldr	r3, [pc, #40]	; (8013ddc <StopRetransmission+0x70>)
 8013db2:	2200      	movs	r2, #0
 8013db4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013db8:	4b08      	ldr	r3, [pc, #32]	; (8013ddc <StopRetransmission+0x70>)
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013dc0:	4b06      	ldr	r3, [pc, #24]	; (8013ddc <StopRetransmission+0x70>)
 8013dc2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dc6:	f023 0302 	bic.w	r3, r3, #2
 8013dca:	4a04      	ldr	r2, [pc, #16]	; (8013ddc <StopRetransmission+0x70>)
 8013dcc:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013dd0:	2301      	movs	r3, #1
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bc80      	pop	{r7}
 8013dd8:	4770      	bx	lr
 8013dda:	bf00      	nop
 8013ddc:	200008ec 	.word	0x200008ec
 8013de0:	20000df4 	.word	0x20000df4

08013de4 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013de8:	4b08      	ldr	r3, [pc, #32]	; (8013e0c <OnMacProcessNotify+0x28>)
 8013dea:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d00a      	beq.n	8013e08 <OnMacProcessNotify+0x24>
 8013df2:	4b06      	ldr	r3, [pc, #24]	; (8013e0c <OnMacProcessNotify+0x28>)
 8013df4:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013df8:	695b      	ldr	r3, [r3, #20]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d004      	beq.n	8013e08 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013dfe:	4b03      	ldr	r3, [pc, #12]	; (8013e0c <OnMacProcessNotify+0x28>)
 8013e00:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e04:	695b      	ldr	r3, [r3, #20]
 8013e06:	4798      	blx	r3
    }
}
 8013e08:	bf00      	nop
 8013e0a:	bd80      	pop	{r7, pc}
 8013e0c:	200008ec 	.word	0x200008ec

08013e10 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b082      	sub	sp, #8
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	4603      	mov	r3, r0
 8013e18:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e1a:	4b0b      	ldr	r3, [pc, #44]	; (8013e48 <CallNvmDataChangeCallback+0x38>)
 8013e1c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d00c      	beq.n	8013e3e <CallNvmDataChangeCallback+0x2e>
 8013e24:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <CallNvmDataChangeCallback+0x38>)
 8013e26:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e2a:	691b      	ldr	r3, [r3, #16]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	d006      	beq.n	8013e3e <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e30:	4b05      	ldr	r3, [pc, #20]	; (8013e48 <CallNvmDataChangeCallback+0x38>)
 8013e32:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e36:	691b      	ldr	r3, [r3, #16]
 8013e38:	88fa      	ldrh	r2, [r7, #6]
 8013e3a:	4610      	mov	r0, r2
 8013e3c:	4798      	blx	r3
    }
}
 8013e3e:	bf00      	nop
 8013e40:	3708      	adds	r7, #8
 8013e42:	46bd      	mov	sp, r7
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	200008ec 	.word	0x200008ec

08013e4c <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b084      	sub	sp, #16
 8013e50:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013e52:	4b1b      	ldr	r3, [pc, #108]	; (8013ec0 <AckTimeoutRetriesProcess+0x74>)
 8013e54:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013e58:	4b19      	ldr	r3, [pc, #100]	; (8013ec0 <AckTimeoutRetriesProcess+0x74>)
 8013e5a:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013e5e:	429a      	cmp	r2, r3
 8013e60:	d229      	bcs.n	8013eb6 <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013e62:	4b17      	ldr	r3, [pc, #92]	; (8013ec0 <AckTimeoutRetriesProcess+0x74>)
 8013e64:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e68:	3301      	adds	r3, #1
 8013e6a:	b2da      	uxtb	r2, r3
 8013e6c:	4b14      	ldr	r3, [pc, #80]	; (8013ec0 <AckTimeoutRetriesProcess+0x74>)
 8013e6e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013e72:	4b13      	ldr	r3, [pc, #76]	; (8013ec0 <AckTimeoutRetriesProcess+0x74>)
 8013e74:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e78:	f003 0301 	and.w	r3, r3, #1
 8013e7c:	b2db      	uxtb	r3, r3
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d019      	beq.n	8013eb6 <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013e82:	2322      	movs	r3, #34	; 0x22
 8013e84:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e86:	4b0f      	ldr	r3, [pc, #60]	; (8013ec4 <AckTimeoutRetriesProcess+0x78>)
 8013e88:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013e8c:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013e8e:	4b0d      	ldr	r3, [pc, #52]	; (8013ec4 <AckTimeoutRetriesProcess+0x78>)
 8013e90:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013e94:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013e96:	4b0b      	ldr	r3, [pc, #44]	; (8013ec4 <AckTimeoutRetriesProcess+0x78>)
 8013e98:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013e9c:	f107 0208 	add.w	r2, r7, #8
 8013ea0:	4611      	mov	r1, r2
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f003 fc91 	bl	80177ca <RegionGetPhyParam>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	b25a      	sxtb	r2, r3
 8013eb0:	4b04      	ldr	r3, [pc, #16]	; (8013ec4 <AckTimeoutRetriesProcess+0x78>)
 8013eb2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013eb6:	bf00      	nop
 8013eb8:	3710      	adds	r7, #16
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}
 8013ebe:	bf00      	nop
 8013ec0:	200008ec 	.word	0x200008ec
 8013ec4:	20000df4 	.word	0x20000df4

08013ec8 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013ece:	4b14      	ldr	r3, [pc, #80]	; (8013f20 <AckTimeoutRetriesFinalize+0x58>)
 8013ed0:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013ed4:	f083 0301 	eor.w	r3, r3, #1
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d015      	beq.n	8013f0a <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013ede:	2302      	movs	r3, #2
 8013ee0:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013ee2:	4b10      	ldr	r3, [pc, #64]	; (8013f24 <AckTimeoutRetriesFinalize+0x5c>)
 8013ee4:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013ee6:	4b10      	ldr	r3, [pc, #64]	; (8013f28 <AckTimeoutRetriesFinalize+0x60>)
 8013ee8:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013eea:	4b10      	ldr	r3, [pc, #64]	; (8013f2c <AckTimeoutRetriesFinalize+0x64>)
 8013eec:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013ef0:	1d3a      	adds	r2, r7, #4
 8013ef2:	4611      	mov	r1, r2
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	f003 fc91 	bl	801781c <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013efa:	4b09      	ldr	r3, [pc, #36]	; (8013f20 <AckTimeoutRetriesFinalize+0x58>)
 8013efc:	2200      	movs	r2, #0
 8013efe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013f02:	4b07      	ldr	r3, [pc, #28]	; (8013f20 <AckTimeoutRetriesFinalize+0x58>)
 8013f04:	2200      	movs	r2, #0
 8013f06:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013f0a:	4b05      	ldr	r3, [pc, #20]	; (8013f20 <AckTimeoutRetriesFinalize+0x58>)
 8013f0c:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013f10:	4b03      	ldr	r3, [pc, #12]	; (8013f20 <AckTimeoutRetriesFinalize+0x58>)
 8013f12:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013f16:	bf00      	nop
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	200008ec 	.word	0x200008ec
 8013f24:	20001014 	.word	0x20001014
 8013f28:	200010a8 	.word	0x200010a8
 8013f2c:	20000df4 	.word	0x20000df4

08013f30 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013f30:	b480      	push	{r7}
 8013f32:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f34:	4b0b      	ldr	r3, [pc, #44]	; (8013f64 <IsRequestPending+0x34>)
 8013f36:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f3a:	f003 0304 	and.w	r3, r3, #4
 8013f3e:	b2db      	uxtb	r3, r3
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d107      	bne.n	8013f54 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013f44:	4b07      	ldr	r3, [pc, #28]	; (8013f64 <IsRequestPending+0x34>)
 8013f46:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f4a:	f003 0301 	and.w	r3, r3, #1
 8013f4e:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d001      	beq.n	8013f58 <IsRequestPending+0x28>
    {
        return 1;
 8013f54:	2301      	movs	r3, #1
 8013f56:	e000      	b.n	8013f5a <IsRequestPending+0x2a>
    }
    return 0;
 8013f58:	2300      	movs	r3, #0
}
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bc80      	pop	{r7}
 8013f60:	4770      	bx	lr
 8013f62:	bf00      	nop
 8013f64:	200008ec 	.word	0x200008ec

08013f68 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013f68:	b590      	push	{r4, r7, lr}
 8013f6a:	b08f      	sub	sp, #60	; 0x3c
 8013f6c:	af02      	add	r7, sp, #8
 8013f6e:	6178      	str	r0, [r7, #20]
 8013f70:	6139      	str	r1, [r7, #16]
 8013f72:	4613      	mov	r3, r2
 8013f74:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d002      	beq.n	8013f82 <LoRaMacInitialization+0x1a>
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d101      	bne.n	8013f86 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f82:	2303      	movs	r3, #3
 8013f84:	e273      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f86:	697b      	ldr	r3, [r7, #20]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d00b      	beq.n	8013fa6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d007      	beq.n	8013fa6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d003      	beq.n	8013fa6 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d101      	bne.n	8013faa <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fa6:	2303      	movs	r3, #3
 8013fa8:	e261      	b.n	801446e <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013faa:	7bfb      	ldrb	r3, [r7, #15]
 8013fac:	4618      	mov	r0, r3
 8013fae:	f003 fbfc 	bl	80177aa <RegionIsActive>
 8013fb2:	4603      	mov	r3, r0
 8013fb4:	f083 0301 	eor.w	r3, r3, #1
 8013fb8:	b2db      	uxtb	r3, r3
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d001      	beq.n	8013fc2 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013fbe:	2309      	movs	r3, #9
 8013fc0:	e255      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013fc2:	6978      	ldr	r0, [r7, #20]
 8013fc4:	f002 f852 	bl	801606c <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013fc8:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013fcc:	2100      	movs	r1, #0
 8013fce:	48c7      	ldr	r0, [pc, #796]	; (80142ec <LoRaMacInitialization+0x384>)
 8013fd0:	f005 ff50 	bl	8019e74 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013fd4:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013fd8:	2100      	movs	r1, #0
 8013fda:	48c5      	ldr	r0, [pc, #788]	; (80142f0 <LoRaMacInitialization+0x388>)
 8013fdc:	f005 ff4a 	bl	8019e74 <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013fe0:	4bc3      	ldr	r3, [pc, #780]	; (80142f0 <LoRaMacInitialization+0x388>)
 8013fe2:	2201      	movs	r2, #1
 8013fe4:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8013fe8:	4bc1      	ldr	r3, [pc, #772]	; (80142f0 <LoRaMacInitialization+0x388>)
 8013fea:	2201      	movs	r2, #1
 8013fec:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8013ff0:	4abe      	ldr	r2, [pc, #760]	; (80142ec <LoRaMacInitialization+0x384>)
 8013ff2:	7bfb      	ldrb	r3, [r7, #15]
 8013ff4:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8013ff8:	4bbc      	ldr	r3, [pc, #752]	; (80142ec <LoRaMacInitialization+0x384>)
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014000:	4bba      	ldr	r3, [pc, #744]	; (80142ec <LoRaMacInitialization+0x384>)
 8014002:	2200      	movs	r2, #0
 8014004:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014008:	4bb8      	ldr	r3, [pc, #736]	; (80142ec <LoRaMacInitialization+0x384>)
 801400a:	4aba      	ldr	r2, [pc, #744]	; (80142f4 <LoRaMacInitialization+0x38c>)
 801400c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014010:	230f      	movs	r3, #15
 8014012:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014016:	4bb5      	ldr	r3, [pc, #724]	; (80142ec <LoRaMacInitialization+0x384>)
 8014018:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801401c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014020:	4611      	mov	r1, r2
 8014022:	4618      	mov	r0, r3
 8014024:	f003 fbd1 	bl	80177ca <RegionGetPhyParam>
 8014028:	4603      	mov	r3, r0
 801402a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	2b00      	cmp	r3, #0
 8014030:	bf14      	ite	ne
 8014032:	2301      	movne	r3, #1
 8014034:	2300      	moveq	r3, #0
 8014036:	b2da      	uxtb	r2, r3
 8014038:	4bac      	ldr	r3, [pc, #688]	; (80142ec <LoRaMacInitialization+0x384>)
 801403a:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 801403e:	230a      	movs	r3, #10
 8014040:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014044:	4ba9      	ldr	r3, [pc, #676]	; (80142ec <LoRaMacInitialization+0x384>)
 8014046:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801404a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801404e:	4611      	mov	r1, r2
 8014050:	4618      	mov	r0, r3
 8014052:	f003 fbba 	bl	80177ca <RegionGetPhyParam>
 8014056:	4603      	mov	r3, r0
 8014058:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 801405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801405c:	b25a      	sxtb	r2, r3
 801405e:	4ba3      	ldr	r3, [pc, #652]	; (80142ec <LoRaMacInitialization+0x384>)
 8014060:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8014064:	2306      	movs	r3, #6
 8014066:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801406a:	4ba0      	ldr	r3, [pc, #640]	; (80142ec <LoRaMacInitialization+0x384>)
 801406c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014070:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014074:	4611      	mov	r1, r2
 8014076:	4618      	mov	r0, r3
 8014078:	f003 fba7 	bl	80177ca <RegionGetPhyParam>
 801407c:	4603      	mov	r3, r0
 801407e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014082:	b25a      	sxtb	r2, r3
 8014084:	4b99      	ldr	r3, [pc, #612]	; (80142ec <LoRaMacInitialization+0x384>)
 8014086:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 801408a:	2310      	movs	r3, #16
 801408c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014090:	4b96      	ldr	r3, [pc, #600]	; (80142ec <LoRaMacInitialization+0x384>)
 8014092:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014096:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801409a:	4611      	mov	r1, r2
 801409c:	4618      	mov	r0, r3
 801409e:	f003 fb94 	bl	80177ca <RegionGetPhyParam>
 80140a2:	4603      	mov	r3, r0
 80140a4:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80140a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a8:	4a90      	ldr	r2, [pc, #576]	; (80142ec <LoRaMacInitialization+0x384>)
 80140aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80140ae:	2311      	movs	r3, #17
 80140b0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140b4:	4b8d      	ldr	r3, [pc, #564]	; (80142ec <LoRaMacInitialization+0x384>)
 80140b6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140be:	4611      	mov	r1, r2
 80140c0:	4618      	mov	r0, r3
 80140c2:	f003 fb82 	bl	80177ca <RegionGetPhyParam>
 80140c6:	4603      	mov	r3, r0
 80140c8:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80140ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140cc:	4a87      	ldr	r2, [pc, #540]	; (80142ec <LoRaMacInitialization+0x384>)
 80140ce:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80140d2:	2312      	movs	r3, #18
 80140d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140d8:	4b84      	ldr	r3, [pc, #528]	; (80142ec <LoRaMacInitialization+0x384>)
 80140da:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140de:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140e2:	4611      	mov	r1, r2
 80140e4:	4618      	mov	r0, r3
 80140e6:	f003 fb70 	bl	80177ca <RegionGetPhyParam>
 80140ea:	4603      	mov	r3, r0
 80140ec:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80140ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140f0:	4a7e      	ldr	r2, [pc, #504]	; (80142ec <LoRaMacInitialization+0x384>)
 80140f2:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80140f6:	2313      	movs	r3, #19
 80140f8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140fc:	4b7b      	ldr	r3, [pc, #492]	; (80142ec <LoRaMacInitialization+0x384>)
 80140fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014106:	4611      	mov	r1, r2
 8014108:	4618      	mov	r0, r3
 801410a:	f003 fb5e 	bl	80177ca <RegionGetPhyParam>
 801410e:	4603      	mov	r3, r0
 8014110:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8014112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014114:	4a75      	ldr	r2, [pc, #468]	; (80142ec <LoRaMacInitialization+0x384>)
 8014116:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 801411a:	2314      	movs	r3, #20
 801411c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014120:	4b72      	ldr	r3, [pc, #456]	; (80142ec <LoRaMacInitialization+0x384>)
 8014122:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014126:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801412a:	4611      	mov	r1, r2
 801412c:	4618      	mov	r0, r3
 801412e:	f003 fb4c 	bl	80177ca <RegionGetPhyParam>
 8014132:	4603      	mov	r3, r0
 8014134:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8014136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014138:	4a6c      	ldr	r2, [pc, #432]	; (80142ec <LoRaMacInitialization+0x384>)
 801413a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 801413e:	2317      	movs	r3, #23
 8014140:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014144:	4b69      	ldr	r3, [pc, #420]	; (80142ec <LoRaMacInitialization+0x384>)
 8014146:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801414a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801414e:	4611      	mov	r1, r2
 8014150:	4618      	mov	r0, r3
 8014152:	f003 fb3a 	bl	80177ca <RegionGetPhyParam>
 8014156:	4603      	mov	r3, r0
 8014158:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	b2da      	uxtb	r2, r3
 801415e:	4b63      	ldr	r3, [pc, #396]	; (80142ec <LoRaMacInitialization+0x384>)
 8014160:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8014164:	2318      	movs	r3, #24
 8014166:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801416a:	4b60      	ldr	r3, [pc, #384]	; (80142ec <LoRaMacInitialization+0x384>)
 801416c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014170:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014174:	4611      	mov	r1, r2
 8014176:	4618      	mov	r0, r3
 8014178:	f003 fb27 	bl	80177ca <RegionGetPhyParam>
 801417c:	4603      	mov	r3, r0
 801417e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014182:	4a5a      	ldr	r2, [pc, #360]	; (80142ec <LoRaMacInitialization+0x384>)
 8014184:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8014188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801418a:	4a58      	ldr	r2, [pc, #352]	; (80142ec <LoRaMacInitialization+0x384>)
 801418c:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8014190:	2319      	movs	r3, #25
 8014192:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014196:	4b55      	ldr	r3, [pc, #340]	; (80142ec <LoRaMacInitialization+0x384>)
 8014198:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801419c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141a0:	4611      	mov	r1, r2
 80141a2:	4618      	mov	r0, r3
 80141a4:	f003 fb11 	bl	80177ca <RegionGetPhyParam>
 80141a8:	4603      	mov	r3, r0
 80141aa:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	b2da      	uxtb	r2, r3
 80141b0:	4b4e      	ldr	r3, [pc, #312]	; (80142ec <LoRaMacInitialization+0x384>)
 80141b2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80141b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b8:	b2da      	uxtb	r2, r3
 80141ba:	4b4c      	ldr	r3, [pc, #304]	; (80142ec <LoRaMacInitialization+0x384>)
 80141bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80141c0:	231e      	movs	r3, #30
 80141c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141c6:	4b49      	ldr	r3, [pc, #292]	; (80142ec <LoRaMacInitialization+0x384>)
 80141c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141cc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141d0:	4611      	mov	r1, r2
 80141d2:	4618      	mov	r0, r3
 80141d4:	f003 faf9 	bl	80177ca <RegionGetPhyParam>
 80141d8:	4603      	mov	r3, r0
 80141da:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80141dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141de:	b2da      	uxtb	r2, r3
 80141e0:	4b42      	ldr	r3, [pc, #264]	; (80142ec <LoRaMacInitialization+0x384>)
 80141e2:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80141e6:	231f      	movs	r3, #31
 80141e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ec:	4b3f      	ldr	r3, [pc, #252]	; (80142ec <LoRaMacInitialization+0x384>)
 80141ee:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141f2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141f6:	4611      	mov	r1, r2
 80141f8:	4618      	mov	r0, r3
 80141fa:	f003 fae6 	bl	80177ca <RegionGetPhyParam>
 80141fe:	4603      	mov	r3, r0
 8014200:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8014202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014204:	b2da      	uxtb	r2, r3
 8014206:	4b39      	ldr	r3, [pc, #228]	; (80142ec <LoRaMacInitialization+0x384>)
 8014208:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 801420c:	2320      	movs	r3, #32
 801420e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014212:	4b36      	ldr	r3, [pc, #216]	; (80142ec <LoRaMacInitialization+0x384>)
 8014214:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014218:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801421c:	4611      	mov	r1, r2
 801421e:	4618      	mov	r0, r3
 8014220:	f003 fad3 	bl	80177ca <RegionGetPhyParam>
 8014224:	4603      	mov	r3, r0
 8014226:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801422a:	4a30      	ldr	r2, [pc, #192]	; (80142ec <LoRaMacInitialization+0x384>)
 801422c:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014230:	2321      	movs	r3, #33	; 0x21
 8014232:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014236:	4b2d      	ldr	r3, [pc, #180]	; (80142ec <LoRaMacInitialization+0x384>)
 8014238:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801423c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014240:	4611      	mov	r1, r2
 8014242:	4618      	mov	r0, r3
 8014244:	f003 fac1 	bl	80177ca <RegionGetPhyParam>
 8014248:	4603      	mov	r3, r0
 801424a:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 801424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424e:	4a27      	ldr	r2, [pc, #156]	; (80142ec <LoRaMacInitialization+0x384>)
 8014250:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8014254:	230b      	movs	r3, #11
 8014256:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801425a:	4b24      	ldr	r3, [pc, #144]	; (80142ec <LoRaMacInitialization+0x384>)
 801425c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014260:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014264:	4611      	mov	r1, r2
 8014266:	4618      	mov	r0, r3
 8014268:	f003 faaf 	bl	80177ca <RegionGetPhyParam>
 801426c:	4603      	mov	r3, r0
 801426e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014272:	b29a      	uxth	r2, r3
 8014274:	4b1d      	ldr	r3, [pc, #116]	; (80142ec <LoRaMacInitialization+0x384>)
 8014276:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 801427a:	230c      	movs	r3, #12
 801427c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014280:	4b1a      	ldr	r3, [pc, #104]	; (80142ec <LoRaMacInitialization+0x384>)
 8014282:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014286:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801428a:	4611      	mov	r1, r2
 801428c:	4618      	mov	r0, r3
 801428e:	f003 fa9c 	bl	80177ca <RegionGetPhyParam>
 8014292:	4603      	mov	r3, r0
 8014294:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 8014296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014298:	b29a      	uxth	r2, r3
 801429a:	4b14      	ldr	r3, [pc, #80]	; (80142ec <LoRaMacInitialization+0x384>)
 801429c:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80142a0:	4b12      	ldr	r3, [pc, #72]	; (80142ec <LoRaMacInitialization+0x384>)
 80142a2:	2201      	movs	r2, #1
 80142a4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80142a8:	4b10      	ldr	r3, [pc, #64]	; (80142ec <LoRaMacInitialization+0x384>)
 80142aa:	220a      	movs	r2, #10
 80142ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80142b0:	4b0e      	ldr	r3, [pc, #56]	; (80142ec <LoRaMacInitialization+0x384>)
 80142b2:	2206      	movs	r2, #6
 80142b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80142b8:	4b0c      	ldr	r3, [pc, #48]	; (80142ec <LoRaMacInitialization+0x384>)
 80142ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80142be:	4a0b      	ldr	r2, [pc, #44]	; (80142ec <LoRaMacInitialization+0x384>)
 80142c0:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80142c2:	4b0a      	ldr	r3, [pc, #40]	; (80142ec <LoRaMacInitialization+0x384>)
 80142c4:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80142c8:	4b08      	ldr	r3, [pc, #32]	; (80142ec <LoRaMacInitialization+0x384>)
 80142ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80142ce:	4b07      	ldr	r3, [pc, #28]	; (80142ec <LoRaMacInitialization+0x384>)
 80142d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80142d4:	4a05      	ldr	r2, [pc, #20]	; (80142ec <LoRaMacInitialization+0x384>)
 80142d6:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80142d8:	4b04      	ldr	r3, [pc, #16]	; (80142ec <LoRaMacInitialization+0x384>)
 80142da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80142de:	4a03      	ldr	r2, [pc, #12]	; (80142ec <LoRaMacInitialization+0x384>)
 80142e0:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80142e2:	4b02      	ldr	r3, [pc, #8]	; (80142ec <LoRaMacInitialization+0x384>)
 80142e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80142e8:	e006      	b.n	80142f8 <LoRaMacInitialization+0x390>
 80142ea:	bf00      	nop
 80142ec:	20000df4 	.word	0x20000df4
 80142f0:	200008ec 	.word	0x200008ec
 80142f4:	01000300 	.word	0x01000300
 80142f8:	4a5f      	ldr	r2, [pc, #380]	; (8014478 <LoRaMacInitialization+0x510>)
 80142fa:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80142fc:	4b5e      	ldr	r3, [pc, #376]	; (8014478 <LoRaMacInitialization+0x510>)
 80142fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8014302:	4a5d      	ldr	r2, [pc, #372]	; (8014478 <LoRaMacInitialization+0x510>)
 8014304:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 8014306:	4b5c      	ldr	r3, [pc, #368]	; (8014478 <LoRaMacInitialization+0x510>)
 8014308:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801430c:	4a5a      	ldr	r2, [pc, #360]	; (8014478 <LoRaMacInitialization+0x510>)
 801430e:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014310:	4b59      	ldr	r3, [pc, #356]	; (8014478 <LoRaMacInitialization+0x510>)
 8014312:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 8014316:	4b58      	ldr	r3, [pc, #352]	; (8014478 <LoRaMacInitialization+0x510>)
 8014318:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 801431c:	2300      	movs	r3, #0
 801431e:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8014322:	4b56      	ldr	r3, [pc, #344]	; (801447c <LoRaMacInitialization+0x514>)
 8014324:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8014326:	4b56      	ldr	r3, [pc, #344]	; (8014480 <LoRaMacInitialization+0x518>)
 8014328:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801432a:	4b53      	ldr	r3, [pc, #332]	; (8014478 <LoRaMacInitialization+0x510>)
 801432c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014330:	f107 0218 	add.w	r2, r7, #24
 8014334:	4611      	mov	r1, r2
 8014336:	4618      	mov	r0, r3
 8014338:	f003 fa70 	bl	801781c <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801433c:	4a51      	ldr	r2, [pc, #324]	; (8014484 <LoRaMacInitialization+0x51c>)
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 8014344:	2000      	movs	r0, #0
 8014346:	f7ff f8b5 	bl	80134b4 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 801434a:	4b4b      	ldr	r3, [pc, #300]	; (8014478 <LoRaMacInitialization+0x510>)
 801434c:	2201      	movs	r2, #1
 801434e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8014352:	4a4c      	ldr	r2, [pc, #304]	; (8014484 <LoRaMacInitialization+0x51c>)
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801435a:	4b4a      	ldr	r3, [pc, #296]	; (8014484 <LoRaMacInitialization+0x51c>)
 801435c:	2200      	movs	r2, #0
 801435e:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 8014362:	4b48      	ldr	r3, [pc, #288]	; (8014484 <LoRaMacInitialization+0x51c>)
 8014364:	2201      	movs	r2, #1
 8014366:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 801436a:	4b43      	ldr	r3, [pc, #268]	; (8014478 <LoRaMacInitialization+0x510>)
 801436c:	2200      	movs	r2, #0
 801436e:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014370:	4b41      	ldr	r3, [pc, #260]	; (8014478 <LoRaMacInitialization+0x510>)
 8014372:	2200      	movs	r2, #0
 8014374:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8014376:	2300      	movs	r3, #0
 8014378:	9300      	str	r3, [sp, #0]
 801437a:	4b43      	ldr	r3, [pc, #268]	; (8014488 <LoRaMacInitialization+0x520>)
 801437c:	2200      	movs	r2, #0
 801437e:	f04f 31ff 	mov.w	r1, #4294967295
 8014382:	4842      	ldr	r0, [pc, #264]	; (801448c <LoRaMacInitialization+0x524>)
 8014384:	f009 fe32 	bl	801dfec <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8014388:	2300      	movs	r3, #0
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	4b40      	ldr	r3, [pc, #256]	; (8014490 <LoRaMacInitialization+0x528>)
 801438e:	2200      	movs	r2, #0
 8014390:	f04f 31ff 	mov.w	r1, #4294967295
 8014394:	483f      	ldr	r0, [pc, #252]	; (8014494 <LoRaMacInitialization+0x52c>)
 8014396:	f009 fe29 	bl	801dfec <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801439a:	2300      	movs	r3, #0
 801439c:	9300      	str	r3, [sp, #0]
 801439e:	4b3e      	ldr	r3, [pc, #248]	; (8014498 <LoRaMacInitialization+0x530>)
 80143a0:	2200      	movs	r2, #0
 80143a2:	f04f 31ff 	mov.w	r1, #4294967295
 80143a6:	483d      	ldr	r0, [pc, #244]	; (801449c <LoRaMacInitialization+0x534>)
 80143a8:	f009 fe20 	bl	801dfec <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80143ac:	2300      	movs	r3, #0
 80143ae:	9300      	str	r3, [sp, #0]
 80143b0:	4b3b      	ldr	r3, [pc, #236]	; (80144a0 <LoRaMacInitialization+0x538>)
 80143b2:	2200      	movs	r2, #0
 80143b4:	f04f 31ff 	mov.w	r1, #4294967295
 80143b8:	483a      	ldr	r0, [pc, #232]	; (80144a4 <LoRaMacInitialization+0x53c>)
 80143ba:	f009 fe17 	bl	801dfec <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80143be:	4c2e      	ldr	r4, [pc, #184]	; (8014478 <LoRaMacInitialization+0x510>)
 80143c0:	463b      	mov	r3, r7
 80143c2:	4618      	mov	r0, r3
 80143c4:	f009 f986 	bl	801d6d4 <SysTimeGetMcuTime>
 80143c8:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80143cc:	463a      	mov	r2, r7
 80143ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143d2:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80143d6:	4b2b      	ldr	r3, [pc, #172]	; (8014484 <LoRaMacInitialization+0x51c>)
 80143d8:	4a33      	ldr	r2, [pc, #204]	; (80144a8 <LoRaMacInitialization+0x540>)
 80143da:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80143de:	4b29      	ldr	r3, [pc, #164]	; (8014484 <LoRaMacInitialization+0x51c>)
 80143e0:	4a32      	ldr	r2, [pc, #200]	; (80144ac <LoRaMacInitialization+0x544>)
 80143e2:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80143e6:	4b27      	ldr	r3, [pc, #156]	; (8014484 <LoRaMacInitialization+0x51c>)
 80143e8:	4a31      	ldr	r2, [pc, #196]	; (80144b0 <LoRaMacInitialization+0x548>)
 80143ea:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80143ee:	4b25      	ldr	r3, [pc, #148]	; (8014484 <LoRaMacInitialization+0x51c>)
 80143f0:	4a30      	ldr	r2, [pc, #192]	; (80144b4 <LoRaMacInitialization+0x54c>)
 80143f2:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80143f6:	4b23      	ldr	r3, [pc, #140]	; (8014484 <LoRaMacInitialization+0x51c>)
 80143f8:	4a2f      	ldr	r2, [pc, #188]	; (80144b8 <LoRaMacInitialization+0x550>)
 80143fa:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80143fe:	4b2f      	ldr	r3, [pc, #188]	; (80144bc <LoRaMacInitialization+0x554>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	482f      	ldr	r0, [pc, #188]	; (80144c0 <LoRaMacInitialization+0x558>)
 8014404:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 8014406:	482f      	ldr	r0, [pc, #188]	; (80144c4 <LoRaMacInitialization+0x55c>)
 8014408:	f7fa fe10 	bl	800f02c <SecureElementInit>
 801440c:	4603      	mov	r3, r0
 801440e:	2b00      	cmp	r3, #0
 8014410:	d001      	beq.n	8014416 <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014412:	2311      	movs	r3, #17
 8014414:	e02b      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8014416:	4818      	ldr	r0, [pc, #96]	; (8014478 <LoRaMacInitialization+0x510>)
 8014418:	f002 fae8 	bl	80169ec <LoRaMacCryptoInit>
 801441c:	4603      	mov	r3, r0
 801441e:	2b00      	cmp	r3, #0
 8014420:	d001      	beq.n	8014426 <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014422:	2311      	movs	r3, #17
 8014424:	e023      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 8014426:	f001 fbe3 	bl	8015bf0 <LoRaMacCommandsInit>
 801442a:	4603      	mov	r3, r0
 801442c:	2b00      	cmp	r3, #0
 801442e:	d001      	beq.n	8014434 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014430:	2313      	movs	r3, #19
 8014432:	e01c      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 8014434:	4824      	ldr	r0, [pc, #144]	; (80144c8 <LoRaMacInitialization+0x560>)
 8014436:	f002 fba3 	bl	8016b80 <LoRaMacCryptoSetMulticastReference>
 801443a:	4603      	mov	r3, r0
 801443c:	2b00      	cmp	r3, #0
 801443e:	d001      	beq.n	8014444 <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014440:	2311      	movs	r3, #17
 8014442:	e014      	b.n	801446e <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 8014444:	4b1d      	ldr	r3, [pc, #116]	; (80144bc <LoRaMacInitialization+0x554>)
 8014446:	695b      	ldr	r3, [r3, #20]
 8014448:	4798      	blx	r3
 801444a:	4603      	mov	r3, r0
 801444c:	4618      	mov	r0, r3
 801444e:	f005 fcb1 	bl	8019db4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014452:	4b1a      	ldr	r3, [pc, #104]	; (80144bc <LoRaMacInitialization+0x554>)
 8014454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014456:	4a08      	ldr	r2, [pc, #32]	; (8014478 <LoRaMacInitialization+0x510>)
 8014458:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 801445c:	4610      	mov	r0, r2
 801445e:	4798      	blx	r3
    Radio.Sleep( );
 8014460:	4b16      	ldr	r3, [pc, #88]	; (80144bc <LoRaMacInitialization+0x554>)
 8014462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014464:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8014466:	2001      	movs	r0, #1
 8014468:	f7fd fb40 	bl	8011aec <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 801446c:	2300      	movs	r3, #0
}
 801446e:	4618      	mov	r0, r3
 8014470:	3734      	adds	r7, #52	; 0x34
 8014472:	46bd      	mov	sp, r7
 8014474:	bd90      	pop	{r4, r7, pc}
 8014476:	bf00      	nop
 8014478:	20000df4 	.word	0x20000df4
 801447c:	20001014 	.word	0x20001014
 8014480:	200010a8 	.word	0x200010a8
 8014484:	200008ec 	.word	0x200008ec
 8014488:	0801202d 	.word	0x0801202d
 801448c:	20000c54 	.word	0x20000c54
 8014490:	080120a1 	.word	0x080120a1
 8014494:	20000c6c 	.word	0x20000c6c
 8014498:	0801210d 	.word	0x0801210d
 801449c:	20000c84 	.word	0x20000c84
 80144a0:	08012181 	.word	0x08012181
 80144a4:	20000ce0 	.word	0x20000ce0
 80144a8:	08010bed 	.word	0x08010bed
 80144ac:	08010c49 	.word	0x08010c49
 80144b0:	08010ce1 	.word	0x08010ce1
 80144b4:	08010cb5 	.word	0x08010cb5
 80144b8:	08010cfd 	.word	0x08010cfd
 80144bc:	0801f9d8 	.word	0x0801f9d8
 80144c0:	20000c38 	.word	0x20000c38
 80144c4:	20000f3c 	.word	0x20000f3c
 80144c8:	20000edc 	.word	0x20000edc

080144cc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80144d0:	4b04      	ldr	r3, [pc, #16]	; (80144e4 <LoRaMacStart+0x18>)
 80144d2:	2200      	movs	r2, #0
 80144d4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80144d8:	f7fc fc26 	bl	8010d28 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80144dc:	2300      	movs	r3, #0
}
 80144de:	4618      	mov	r0, r3
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	200008ec 	.word	0x200008ec

080144e8 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 80144ec:	f7fd fad2 	bl	8011a94 <LoRaMacIsBusy>
 80144f0:	4603      	mov	r3, r0
 80144f2:	f083 0301 	eor.w	r3, r3, #1
 80144f6:	b2db      	uxtb	r3, r3
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d00d      	beq.n	8014518 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80144fc:	4b0b      	ldr	r3, [pc, #44]	; (801452c <LoRaMacStop+0x44>)
 80144fe:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014502:	2b02      	cmp	r3, #2
 8014504:	d102      	bne.n	801450c <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 8014506:	4b0a      	ldr	r3, [pc, #40]	; (8014530 <LoRaMacStop+0x48>)
 8014508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450a:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 801450c:	4b09      	ldr	r3, [pc, #36]	; (8014534 <LoRaMacStop+0x4c>)
 801450e:	2201      	movs	r2, #1
 8014510:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 8014514:	2300      	movs	r3, #0
 8014516:	e007      	b.n	8014528 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014518:	4b06      	ldr	r3, [pc, #24]	; (8014534 <LoRaMacStop+0x4c>)
 801451a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801451e:	2b01      	cmp	r3, #1
 8014520:	d101      	bne.n	8014526 <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 8014522:	2300      	movs	r3, #0
 8014524:	e000      	b.n	8014528 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 8014526:	2301      	movs	r3, #1
}
 8014528:	4618      	mov	r0, r3
 801452a:	bd80      	pop	{r7, pc}
 801452c:	20000df4 	.word	0x20000df4
 8014530:	0801f9d8 	.word	0x0801f9d8
 8014534:	200008ec 	.word	0x200008ec

08014538 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014538:	b580      	push	{r7, lr}
 801453a:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 801453c:	480d      	ldr	r0, [pc, #52]	; (8014574 <LoRaMacHalt+0x3c>)
 801453e:	f009 fdf9 	bl	801e134 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 8014542:	480d      	ldr	r0, [pc, #52]	; (8014578 <LoRaMacHalt+0x40>)
 8014544:	f009 fdf6 	bl	801e134 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014548:	480c      	ldr	r0, [pc, #48]	; (801457c <LoRaMacHalt+0x44>)
 801454a:	f009 fdf3 	bl	801e134 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 801454e:	480c      	ldr	r0, [pc, #48]	; (8014580 <LoRaMacHalt+0x48>)
 8014550:	f009 fdf0 	bl	801e134 <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8014554:	f001 f9cb 	bl	80158ee <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014558:	4b0a      	ldr	r3, [pc, #40]	; (8014584 <LoRaMacHalt+0x4c>)
 801455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801455c:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 801455e:	4b0a      	ldr	r3, [pc, #40]	; (8014588 <LoRaMacHalt+0x50>)
 8014560:	2200      	movs	r2, #0
 8014562:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 8014566:	4b08      	ldr	r3, [pc, #32]	; (8014588 <LoRaMacHalt+0x50>)
 8014568:	2201      	movs	r2, #1
 801456a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	bd80      	pop	{r7, pc}
 8014574:	20000c54 	.word	0x20000c54
 8014578:	20000c6c 	.word	0x20000c6c
 801457c:	20000c84 	.word	0x20000c84
 8014580:	20000ce0 	.word	0x20000ce0
 8014584:	0801f9d8 	.word	0x0801f9d8
 8014588:	200008ec 	.word	0x200008ec

0801458c <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b08a      	sub	sp, #40	; 0x28
 8014590:	af00      	add	r7, sp, #0
 8014592:	4603      	mov	r3, r0
 8014594:	6039      	str	r1, [r7, #0]
 8014596:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8014598:	4b3e      	ldr	r3, [pc, #248]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 801459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801459c:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801459e:	4b3d      	ldr	r3, [pc, #244]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145a0:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80145a4:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80145a6:	4b3b      	ldr	r3, [pc, #236]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145a8:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80145ac:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80145ae:	2300      	movs	r3, #0
 80145b0:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80145b2:	683b      	ldr	r3, [r7, #0]
 80145b4:	2b00      	cmp	r3, #0
 80145b6:	d101      	bne.n	80145bc <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145b8:	2303      	movs	r3, #3
 80145ba:	e066      	b.n	801468a <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80145bc:	4b35      	ldr	r3, [pc, #212]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145be:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80145c2:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80145c4:	2300      	movs	r3, #0
 80145c6:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80145c8:	4b32      	ldr	r3, [pc, #200]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145ca:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80145ce:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145d0:	4b30      	ldr	r3, [pc, #192]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145d4:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145d6:	4b2f      	ldr	r3, [pc, #188]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145d8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80145dc:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80145de:	4b2d      	ldr	r3, [pc, #180]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145e0:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80145e4:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80145e6:	4b2b      	ldr	r3, [pc, #172]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145e8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 80145ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80145f0:	4b28      	ldr	r3, [pc, #160]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145f2:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 80145f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80145fa:	4b26      	ldr	r3, [pc, #152]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 80145fc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014600:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8014604:	4b23      	ldr	r3, [pc, #140]	; (8014694 <LoRaMacQueryTxPossible+0x108>)
 8014606:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801460a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 801460e:	f107 0310 	add.w	r3, r7, #16
 8014612:	f107 020e 	add.w	r2, r7, #14
 8014616:	f107 010f 	add.w	r1, r7, #15
 801461a:	f107 0014 	add.w	r0, r7, #20
 801461e:	f001 f8d1 	bl	80157c4 <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8014622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014626:	4618      	mov	r0, r3
 8014628:	f7fd fefc 	bl	8012424 <GetMaxAppPayloadWithoutFOptsLength>
 801462c:	4603      	mov	r3, r0
 801462e:	461a      	mov	r2, r3
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8014634:	f107 0308 	add.w	r3, r7, #8
 8014638:	4618      	mov	r0, r3
 801463a:	f001 fbdf 	bl	8015dfc <LoRaMacCommandsGetSizeSerializedCmds>
 801463e:	4603      	mov	r3, r0
 8014640:	2b00      	cmp	r3, #0
 8014642:	d001      	beq.n	8014648 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014644:	2313      	movs	r3, #19
 8014646:	e020      	b.n	801468a <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014648:	68bb      	ldr	r3, [r7, #8]
 801464a:	2b0f      	cmp	r3, #15
 801464c:	d819      	bhi.n	8014682 <LoRaMacQueryTxPossible+0xf6>
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	785b      	ldrb	r3, [r3, #1]
 8014652:	461a      	mov	r2, r3
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	429a      	cmp	r2, r3
 8014658:	d313      	bcc.n	8014682 <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 801465a:	683b      	ldr	r3, [r7, #0]
 801465c:	785a      	ldrb	r2, [r3, #1]
 801465e:	68bb      	ldr	r3, [r7, #8]
 8014660:	b2db      	uxtb	r3, r3
 8014662:	1ad3      	subs	r3, r2, r3
 8014664:	b2da      	uxtb	r2, r3
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	785b      	ldrb	r3, [r3, #1]
 801466e:	4619      	mov	r1, r3
 8014670:	79fa      	ldrb	r2, [r7, #7]
 8014672:	68bb      	ldr	r3, [r7, #8]
 8014674:	4413      	add	r3, r2
 8014676:	4299      	cmp	r1, r3
 8014678:	d301      	bcc.n	801467e <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 801467a:	2300      	movs	r3, #0
 801467c:	e005      	b.n	801468a <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 801467e:	2308      	movs	r3, #8
 8014680:	e003      	b.n	801468a <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	2200      	movs	r2, #0
 8014686:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8014688:	2308      	movs	r3, #8
    }
}
 801468a:	4618      	mov	r0, r3
 801468c:	3728      	adds	r7, #40	; 0x28
 801468e:	46bd      	mov	sp, r7
 8014690:	bd80      	pop	{r7, pc}
 8014692:	bf00      	nop
 8014694:	20000df4 	.word	0x20000df4

08014698 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8014698:	b590      	push	{r4, r7, lr}
 801469a:	b087      	sub	sp, #28
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146a0:	2300      	movs	r3, #0
 80146a2:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d101      	bne.n	80146ae <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80146aa:	2303      	movs	r3, #3
 80146ac:	e1a4      	b.n	80149f8 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	781b      	ldrb	r3, [r3, #0]
 80146b2:	2b3f      	cmp	r3, #63	; 0x3f
 80146b4:	f200 8199 	bhi.w	80149ea <LoRaMacMibGetRequestConfirm+0x352>
 80146b8:	a201      	add	r2, pc, #4	; (adr r2, 80146c0 <LoRaMacMibGetRequestConfirm+0x28>)
 80146ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146be:	bf00      	nop
 80146c0:	080147c1 	.word	0x080147c1
 80146c4:	080147cd 	.word	0x080147cd
 80146c8:	080147d9 	.word	0x080147d9
 80146cc:	080147e5 	.word	0x080147e5
 80146d0:	080147f1 	.word	0x080147f1
 80146d4:	080147fd 	.word	0x080147fd
 80146d8:	08014809 	.word	0x08014809
 80146dc:	080149eb 	.word	0x080149eb
 80146e0:	080149eb 	.word	0x080149eb
 80146e4:	080149eb 	.word	0x080149eb
 80146e8:	080149eb 	.word	0x080149eb
 80146ec:	080149eb 	.word	0x080149eb
 80146f0:	080149eb 	.word	0x080149eb
 80146f4:	080149eb 	.word	0x080149eb
 80146f8:	080149eb 	.word	0x080149eb
 80146fc:	0801481d 	.word	0x0801481d
 8014700:	08014829 	.word	0x08014829
 8014704:	08014835 	.word	0x08014835
 8014708:	08014857 	.word	0x08014857
 801470c:	08014869 	.word	0x08014869
 8014710:	0801487b 	.word	0x0801487b
 8014714:	0801488d 	.word	0x0801488d
 8014718:	080148c1 	.word	0x080148c1
 801471c:	0801489f 	.word	0x0801489f
 8014720:	080148e3 	.word	0x080148e3
 8014724:	080148ef 	.word	0x080148ef
 8014728:	080148f9 	.word	0x080148f9
 801472c:	08014903 	.word	0x08014903
 8014730:	0801490d 	.word	0x0801490d
 8014734:	08014917 	.word	0x08014917
 8014738:	08014921 	.word	0x08014921
 801473c:	0801492d 	.word	0x0801492d
 8014740:	08014945 	.word	0x08014945
 8014744:	08014939 	.word	0x08014939
 8014748:	08014951 	.word	0x08014951
 801474c:	0801495b 	.word	0x0801495b
 8014750:	08014967 	.word	0x08014967
 8014754:	08014983 	.word	0x08014983
 8014758:	08014973 	.word	0x08014973
 801475c:	0801497b 	.word	0x0801497b
 8014760:	080149eb 	.word	0x080149eb
 8014764:	0801498f 	.word	0x0801498f
 8014768:	080149eb 	.word	0x080149eb
 801476c:	080149eb 	.word	0x080149eb
 8014770:	080149eb 	.word	0x080149eb
 8014774:	080149eb 	.word	0x080149eb
 8014778:	080149eb 	.word	0x080149eb
 801477c:	080149eb 	.word	0x080149eb
 8014780:	080149eb 	.word	0x080149eb
 8014784:	080149eb 	.word	0x080149eb
 8014788:	080149eb 	.word	0x080149eb
 801478c:	080149eb 	.word	0x080149eb
 8014790:	080149eb 	.word	0x080149eb
 8014794:	080149eb 	.word	0x080149eb
 8014798:	080149eb 	.word	0x080149eb
 801479c:	080149eb 	.word	0x080149eb
 80147a0:	080149eb 	.word	0x080149eb
 80147a4:	080149a3 	.word	0x080149a3
 80147a8:	080149af 	.word	0x080149af
 80147ac:	080149bb 	.word	0x080149bb
 80147b0:	080149c7 	.word	0x080149c7
 80147b4:	080149d3 	.word	0x080149d3
 80147b8:	080149df 	.word	0x080149df
 80147bc:	080149e5 	.word	0x080149e5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80147c0:	4b8f      	ldr	r3, [pc, #572]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80147c2:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	711a      	strb	r2, [r3, #4]
            break;
 80147ca:	e114      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80147cc:	4b8c      	ldr	r3, [pc, #560]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80147ce:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	711a      	strb	r2, [r3, #4]
            break;
 80147d6:	e10e      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	685b      	ldr	r3, [r3, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7fa fefb 	bl	800f5d8 <SecureElementGetDevEui>
            break;
 80147e2:	e108      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7fa ff25 	bl	800f638 <SecureElementGetJoinEui>
            break;
 80147ee:	e102      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80147f0:	4b83      	ldr	r3, [pc, #524]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80147f2:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	711a      	strb	r2, [r3, #4]
            break;
 80147fa:	e0fc      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80147fc:	4b80      	ldr	r3, [pc, #512]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80147fe:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	605a      	str	r2, [r3, #4]
            break;
 8014806:	e0f6      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014808:	4b7d      	ldr	r3, [pc, #500]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801480a:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	3304      	adds	r3, #4
 8014812:	4619      	mov	r1, r3
 8014814:	4610      	mov	r0, r2
 8014816:	f7fa ff41 	bl	800f69c <SecureElementGetDevAddr>
            break;
 801481a:	e0ec      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801481c:	4b78      	ldr	r3, [pc, #480]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801481e:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	711a      	strb	r2, [r3, #4]
            break;
 8014826:	e0e6      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014828:	4b75      	ldr	r3, [pc, #468]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801482a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	711a      	strb	r2, [r3, #4]
            break;
 8014832:	e0e0      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 8014834:	231d      	movs	r3, #29
 8014836:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014838:	4b71      	ldr	r3, [pc, #452]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801483a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801483e:	f107 0210 	add.w	r2, r7, #16
 8014842:	4611      	mov	r1, r2
 8014844:	4618      	mov	r0, r3
 8014846:	f002 ffc0 	bl	80177ca <RegionGetPhyParam>
 801484a:	4603      	mov	r3, r0
 801484c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 801484e:	68fa      	ldr	r2, [r7, #12]
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	605a      	str	r2, [r3, #4]
            break;
 8014854:	e0cf      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	4a69      	ldr	r2, [pc, #420]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801485a:	3304      	adds	r3, #4
 801485c:	326c      	adds	r2, #108	; 0x6c
 801485e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014862:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014866:	e0c6      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	4a65      	ldr	r2, [pc, #404]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801486c:	3304      	adds	r3, #4
 801486e:	32b4      	adds	r2, #180	; 0xb4
 8014870:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014874:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014878:	e0bd      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	4a60      	ldr	r2, [pc, #384]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801487e:	3304      	adds	r3, #4
 8014880:	3274      	adds	r2, #116	; 0x74
 8014882:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014886:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801488a:	e0b4      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801488c:	687b      	ldr	r3, [r7, #4]
 801488e:	4a5c      	ldr	r2, [pc, #368]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014890:	3304      	adds	r3, #4
 8014892:	32bc      	adds	r2, #188	; 0xbc
 8014894:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014898:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801489c:	e0ab      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801489e:	231b      	movs	r3, #27
 80148a0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148a2:	4b57      	ldr	r3, [pc, #348]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80148a4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148a8:	f107 0210 	add.w	r2, r7, #16
 80148ac:	4611      	mov	r1, r2
 80148ae:	4618      	mov	r0, r3
 80148b0:	f002 ff8b 	bl	80177ca <RegionGetPhyParam>
 80148b4:	4603      	mov	r3, r0
 80148b6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80148b8:	68fa      	ldr	r2, [r7, #12]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	605a      	str	r2, [r3, #4]
            break;
 80148be:	e09a      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80148c0:	231a      	movs	r3, #26
 80148c2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148c4:	4b4e      	ldr	r3, [pc, #312]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80148c6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148ca:	f107 0210 	add.w	r2, r7, #16
 80148ce:	4611      	mov	r1, r2
 80148d0:	4618      	mov	r0, r3
 80148d2:	f002 ff7a 	bl	80177ca <RegionGetPhyParam>
 80148d6:	4603      	mov	r3, r0
 80148d8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80148da:	68fa      	ldr	r2, [r7, #12]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	605a      	str	r2, [r3, #4]
            break;
 80148e0:	e089      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80148e2:	4b47      	ldr	r3, [pc, #284]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80148e4:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	711a      	strb	r2, [r3, #4]
            break;
 80148ec:	e083      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80148ee:	4b44      	ldr	r3, [pc, #272]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80148f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	605a      	str	r2, [r3, #4]
            break;
 80148f6:	e07e      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80148f8:	4b41      	ldr	r3, [pc, #260]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80148fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	605a      	str	r2, [r3, #4]
            break;
 8014900:	e079      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 8014902:	4b3f      	ldr	r3, [pc, #252]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014904:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	605a      	str	r2, [r3, #4]
            break;
 801490a:	e074      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 801490c:	4b3c      	ldr	r3, [pc, #240]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801490e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	605a      	str	r2, [r3, #4]
            break;
 8014914:	e06f      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8014916:	4b3a      	ldr	r3, [pc, #232]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014918:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	605a      	str	r2, [r3, #4]
            break;
 801491e:	e06a      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014920:	4b37      	ldr	r3, [pc, #220]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014922:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	711a      	strb	r2, [r3, #4]
            break;
 801492a:	e064      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801492c:	4b34      	ldr	r3, [pc, #208]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801492e:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	711a      	strb	r2, [r3, #4]
            break;
 8014936:	e05e      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014938:	4b31      	ldr	r3, [pc, #196]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801493a:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	711a      	strb	r2, [r3, #4]
            break;
 8014942:	e058      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014944:	4b2e      	ldr	r3, [pc, #184]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014946:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	711a      	strb	r2, [r3, #4]
            break;
 801494e:	e052      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014950:	4b2b      	ldr	r3, [pc, #172]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	605a      	str	r2, [r3, #4]
            break;
 8014958:	e04d      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801495a:	4b29      	ldr	r3, [pc, #164]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 801495c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	711a      	strb	r2, [r3, #4]
            break;
 8014964:	e047      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8014966:	4b26      	ldr	r3, [pc, #152]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014968:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	605a      	str	r2, [r3, #4]
            break;
 8014970:	e041      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	4a22      	ldr	r2, [pc, #136]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014976:	605a      	str	r2, [r3, #4]
            break;
 8014978:	e03d      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	2200      	movs	r2, #0
 801497e:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014980:	e039      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8014982:	4b1f      	ldr	r3, [pc, #124]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014984:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	605a      	str	r2, [r3, #4]
            break;
 801498c:	e033      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	4a1b      	ldr	r2, [pc, #108]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 8014992:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 8014996:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8014998:	687c      	ldr	r4, [r7, #4]
 801499a:	f003 f89f 	bl	8017adc <RegionGetVersion>
 801499e:	60a0      	str	r0, [r4, #8]
            break;
 80149a0:	e029      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80149a2:	4b17      	ldr	r3, [pc, #92]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80149a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	605a      	str	r2, [r3, #4]
            break;
 80149ac:	e023      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80149ae:	4b14      	ldr	r3, [pc, #80]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80149b0:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	809a      	strh	r2, [r3, #4]
            break;
 80149b8:	e01d      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80149ba:	4b11      	ldr	r3, [pc, #68]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80149bc:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	809a      	strh	r2, [r3, #4]
            break;
 80149c4:	e017      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80149c6:	4b0e      	ldr	r3, [pc, #56]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80149c8:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	809a      	strh	r2, [r3, #4]
            break;
 80149d0:	e011      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80149d2:	4b0b      	ldr	r3, [pc, #44]	; (8014a00 <LoRaMacMibGetRequestConfirm+0x368>)
 80149d4:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	809a      	strh	r2, [r3, #4]
            break;
 80149dc:	e00b      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149de:	2318      	movs	r3, #24
 80149e0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80149e2:	e008      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149e4:	2318      	movs	r3, #24
 80149e6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80149e8:	e005      	b.n	80149f6 <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 80149ea:	6878      	ldr	r0, [r7, #4]
 80149ec:	f000 ff96 	bl	801591c <LoRaMacClassBMibGetRequestConfirm>
 80149f0:	4603      	mov	r3, r0
 80149f2:	75fb      	strb	r3, [r7, #23]
            break;
 80149f4:	bf00      	nop
        }
    }
    return status;
 80149f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80149f8:	4618      	mov	r0, r3
 80149fa:	371c      	adds	r7, #28
 80149fc:	46bd      	mov	sp, r7
 80149fe:	bd90      	pop	{r4, r7, pc}
 8014a00:	20000df4 	.word	0x20000df4

08014a04 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014a0c:	2300      	movs	r3, #0
 8014a0e:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d101      	bne.n	8014a1a <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a16:	2303      	movs	r3, #3
 8014a18:	e382      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014a1a:	4bbb      	ldr	r3, [pc, #748]	; (8014d08 <LoRaMacMibSetRequestConfirm+0x304>)
 8014a1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a20:	f003 0302 	and.w	r3, r3, #2
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d001      	beq.n	8014a2c <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014a28:	2301      	movs	r3, #1
 8014a2a:	e379      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	781b      	ldrb	r3, [r3, #0]
 8014a30:	2b3f      	cmp	r3, #63	; 0x3f
 8014a32:	f200 8353 	bhi.w	80150dc <LoRaMacMibSetRequestConfirm+0x6d8>
 8014a36:	a201      	add	r2, pc, #4	; (adr r2, 8014a3c <LoRaMacMibSetRequestConfirm+0x38>)
 8014a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a3c:	08014b3d 	.word	0x08014b3d
 8014a40:	08014b4d 	.word	0x08014b4d
 8014a44:	08014b67 	.word	0x08014b67
 8014a48:	08014b7f 	.word	0x08014b7f
 8014a4c:	08014b97 	.word	0x08014b97
 8014a50:	08014ba3 	.word	0x08014ba3
 8014a54:	08014baf 	.word	0x08014baf
 8014a58:	08014bd9 	.word	0x08014bd9
 8014a5c:	08014bff 	.word	0x08014bff
 8014a60:	08014c25 	.word	0x08014c25
 8014a64:	08014c4b 	.word	0x08014c4b
 8014a68:	08014c71 	.word	0x08014c71
 8014a6c:	08014c97 	.word	0x08014c97
 8014a70:	08014cbd 	.word	0x08014cbd
 8014a74:	08014ce3 	.word	0x08014ce3
 8014a78:	08014d11 	.word	0x08014d11
 8014a7c:	08014d31 	.word	0x08014d31
 8014a80:	080150dd 	.word	0x080150dd
 8014a84:	08014d3d 	.word	0x08014d3d
 8014a88:	08014dad 	.word	0x08014dad
 8014a8c:	08014ded 	.word	0x08014ded
 8014a90:	08014e4f 	.word	0x08014e4f
 8014a94:	08014ebf 	.word	0x08014ebf
 8014a98:	08014e8f 	.word	0x08014e8f
 8014a9c:	08014eef 	.word	0x08014eef
 8014aa0:	08014f11 	.word	0x08014f11
 8014aa4:	08014f1b 	.word	0x08014f1b
 8014aa8:	08014f25 	.word	0x08014f25
 8014aac:	08014f2f 	.word	0x08014f2f
 8014ab0:	08014f39 	.word	0x08014f39
 8014ab4:	08014f43 	.word	0x08014f43
 8014ab8:	08014f75 	.word	0x08014f75
 8014abc:	08014fe9 	.word	0x08014fe9
 8014ac0:	08014faf 	.word	0x08014faf
 8014ac4:	0801501b 	.word	0x0801501b
 8014ac8:	08015031 	.word	0x08015031
 8014acc:	08015049 	.word	0x08015049
 8014ad0:	08015055 	.word	0x08015055
 8014ad4:	08015061 	.word	0x08015061
 8014ad8:	080150dd 	.word	0x080150dd
 8014adc:	0801506b 	.word	0x0801506b
 8014ae0:	080150dd 	.word	0x080150dd
 8014ae4:	080150dd 	.word	0x080150dd
 8014ae8:	080150dd 	.word	0x080150dd
 8014aec:	080150dd 	.word	0x080150dd
 8014af0:	080150dd 	.word	0x080150dd
 8014af4:	080150dd 	.word	0x080150dd
 8014af8:	080150dd 	.word	0x080150dd
 8014afc:	080150dd 	.word	0x080150dd
 8014b00:	080150dd 	.word	0x080150dd
 8014b04:	080150dd 	.word	0x080150dd
 8014b08:	080150dd 	.word	0x080150dd
 8014b0c:	080150dd 	.word	0x080150dd
 8014b10:	080150dd 	.word	0x080150dd
 8014b14:	080150dd 	.word	0x080150dd
 8014b18:	080150dd 	.word	0x080150dd
 8014b1c:	080150dd 	.word	0x080150dd
 8014b20:	08015095 	.word	0x08015095
 8014b24:	080150a1 	.word	0x080150a1
 8014b28:	080150ad 	.word	0x080150ad
 8014b2c:	080150b9 	.word	0x080150b9
 8014b30:	080150c5 	.word	0x080150c5
 8014b34:	080150d1 	.word	0x080150d1
 8014b38:	080150d7 	.word	0x080150d7
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	791b      	ldrb	r3, [r3, #4]
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fd fb87 	bl	8012254 <SwitchClass>
 8014b46:	4603      	mov	r3, r0
 8014b48:	75fb      	strb	r3, [r7, #23]
            break;
 8014b4a:	e2e8      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	791b      	ldrb	r3, [r3, #4]
 8014b50:	2b02      	cmp	r3, #2
 8014b52:	d005      	beq.n	8014b60 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	791a      	ldrb	r2, [r3, #4]
 8014b58:	4b6c      	ldr	r3, [pc, #432]	; (8014d0c <LoRaMacMibSetRequestConfirm+0x308>)
 8014b5a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b5e:	e2de      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b60:	2303      	movs	r3, #3
 8014b62:	75fb      	strb	r3, [r7, #23]
            break;
 8014b64:	e2db      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	685b      	ldr	r3, [r3, #4]
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fa fd1c 	bl	800f5a8 <SecureElementSetDevEui>
 8014b70:	4603      	mov	r3, r0
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	f000 82b8 	beq.w	80150e8 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b78:	2303      	movs	r3, #3
 8014b7a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b7c:	e2b4      	b.n	80150e8 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fa fd40 	bl	800f608 <SecureElementSetJoinEui>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f000 82ae 	beq.w	80150ec <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b90:	2303      	movs	r3, #3
 8014b92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b94:	e2aa      	b.n	80150ec <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	791a      	ldrb	r2, [r3, #4]
 8014b9a:	4b5c      	ldr	r3, [pc, #368]	; (8014d0c <LoRaMacMibSetRequestConfirm+0x308>)
 8014b9c:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014ba0:	e2bd      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	685b      	ldr	r3, [r3, #4]
 8014ba6:	4a59      	ldr	r2, [pc, #356]	; (8014d0c <LoRaMacMibSetRequestConfirm+0x308>)
 8014ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014bac:	e2b7      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014bae:	4b57      	ldr	r3, [pc, #348]	; (8014d0c <LoRaMacMibSetRequestConfirm+0x308>)
 8014bb0:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	685b      	ldr	r3, [r3, #4]
 8014bb8:	4619      	mov	r1, r3
 8014bba:	4610      	mov	r0, r2
 8014bbc:	f7fa fd54 	bl	800f668 <SecureElementSetDevAddr>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d002      	beq.n	8014bcc <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bc6:	2303      	movs	r3, #3
 8014bc8:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014bca:	e2a8      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	4a4e      	ldr	r2, [pc, #312]	; (8014d0c <LoRaMacMibSetRequestConfirm+0x308>)
 8014bd2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014bd6:	e2a2      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	685b      	ldr	r3, [r3, #4]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d00b      	beq.n	8014bf8 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	4619      	mov	r1, r3
 8014be6:	2000      	movs	r0, #0
 8014be8:	f001 fff4 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014bec:	4603      	mov	r3, r0
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	f000 827e 	beq.w	80150f0 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014bf4:	2311      	movs	r3, #17
 8014bf6:	e293      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bf8:	2303      	movs	r3, #3
 8014bfa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bfc:	e278      	b.n	80150f0 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d00b      	beq.n	8014c1e <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	4619      	mov	r1, r3
 8014c0c:	2001      	movs	r0, #1
 8014c0e:	f001 ffe1 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	f000 826d 	beq.w	80150f4 <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c1a:	2311      	movs	r3, #17
 8014c1c:	e280      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c1e:	2303      	movs	r3, #3
 8014c20:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c22:	e267      	b.n	80150f4 <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	685b      	ldr	r3, [r3, #4]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00b      	beq.n	8014c44 <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	685b      	ldr	r3, [r3, #4]
 8014c30:	4619      	mov	r1, r3
 8014c32:	2008      	movs	r0, #8
 8014c34:	f001 ffce 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	f000 825c 	beq.w	80150f8 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c40:	2311      	movs	r3, #17
 8014c42:	e26d      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c44:	2303      	movs	r3, #3
 8014c46:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c48:	e256      	b.n	80150f8 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d00b      	beq.n	8014c6a <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	4619      	mov	r1, r3
 8014c58:	2009      	movs	r0, #9
 8014c5a:	f001 ffbb 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 824b 	beq.w	80150fc <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c66:	2311      	movs	r3, #17
 8014c68:	e25a      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c6a:	2303      	movs	r3, #3
 8014c6c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c6e:	e245      	b.n	80150fc <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	685b      	ldr	r3, [r3, #4]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d00b      	beq.n	8014c90 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	685b      	ldr	r3, [r3, #4]
 8014c7c:	4619      	mov	r1, r3
 8014c7e:	200c      	movs	r0, #12
 8014c80:	f001 ffa8 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014c84:	4603      	mov	r3, r0
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f000 823a 	beq.w	8015100 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c8c:	2311      	movs	r3, #17
 8014c8e:	e247      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c90:	2303      	movs	r3, #3
 8014c92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c94:	e234      	b.n	8015100 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00b      	beq.n	8014cb6 <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	685b      	ldr	r3, [r3, #4]
 8014ca2:	4619      	mov	r1, r3
 8014ca4:	200d      	movs	r0, #13
 8014ca6:	f001 ff95 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014caa:	4603      	mov	r3, r0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	f000 8229 	beq.w	8015104 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cb2:	2311      	movs	r3, #17
 8014cb4:	e234      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cb6:	2303      	movs	r3, #3
 8014cb8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cba:	e223      	b.n	8015104 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d00b      	beq.n	8014cdc <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	685b      	ldr	r3, [r3, #4]
 8014cc8:	4619      	mov	r1, r3
 8014cca:	200e      	movs	r0, #14
 8014ccc:	f001 ff82 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014cd0:	4603      	mov	r3, r0
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f000 8218 	beq.w	8015108 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cd8:	2311      	movs	r3, #17
 8014cda:	e221      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ce0:	e212      	b.n	8015108 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	685b      	ldr	r3, [r3, #4]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d00b      	beq.n	8014d02 <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	4619      	mov	r1, r3
 8014cf0:	200f      	movs	r0, #15
 8014cf2:	f001 ff6f 	bl	8016bd4 <LoRaMacCryptoSetKey>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f000 8207 	beq.w	801510c <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cfe:	2311      	movs	r3, #17
 8014d00:	e20e      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d02:	2303      	movs	r3, #3
 8014d04:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d06:	e201      	b.n	801510c <LoRaMacMibSetRequestConfirm+0x708>
 8014d08:	200008ec 	.word	0x200008ec
 8014d0c:	20000df4 	.word	0x20000df4
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	791a      	ldrb	r2, [r3, #4]
 8014d14:	4bb2      	ldr	r3, [pc, #712]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d16:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d1a:	4bb2      	ldr	r3, [pc, #712]	; (8014fe4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d1e:	4ab0      	ldr	r2, [pc, #704]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d20:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014d24:	4610      	mov	r0, r2
 8014d26:	4798      	blx	r3
            Radio.Sleep( );
 8014d28:	4bae      	ldr	r3, [pc, #696]	; (8014fe4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d2c:	4798      	blx	r3
            break;
 8014d2e:	e1f6      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	791a      	ldrb	r2, [r3, #4]
 8014d34:	4baa      	ldr	r3, [pc, #680]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d36:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014d3a:	e1f0      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	7a1b      	ldrb	r3, [r3, #8]
 8014d40:	b25b      	sxtb	r3, r3
 8014d42:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d44:	4ba6      	ldr	r3, [pc, #664]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d46:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d4a:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d4c:	4ba4      	ldr	r3, [pc, #656]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d4e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d52:	f107 0108 	add.w	r1, r7, #8
 8014d56:	2207      	movs	r2, #7
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f002 fd71 	bl	8017840 <RegionVerify>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	f083 0301 	eor.w	r3, r3, #1
 8014d64:	b2db      	uxtb	r3, r3
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d002      	beq.n	8014d70 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d6a:	2303      	movs	r3, #3
 8014d6c:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d6e:	e1d6      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	685b      	ldr	r3, [r3, #4]
 8014d74:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d76:	4b9a      	ldr	r3, [pc, #616]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d7c:	f107 0108 	add.w	r1, r7, #8
 8014d80:	2200      	movs	r2, #0
 8014d82:	4618      	mov	r0, r3
 8014d84:	f002 fd5c 	bl	8017840 <RegionVerify>
 8014d88:	4603      	mov	r3, r0
 8014d8a:	f083 0301 	eor.w	r3, r3, #1
 8014d8e:	b2db      	uxtb	r3, r3
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d002      	beq.n	8014d9a <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d94:	2303      	movs	r3, #3
 8014d96:	75fb      	strb	r3, [r7, #23]
            break;
 8014d98:	e1c1      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014d9a:	4b91      	ldr	r3, [pc, #580]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	336c      	adds	r3, #108	; 0x6c
 8014da0:	3204      	adds	r2, #4
 8014da2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014da6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014daa:	e1b8      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	7a1b      	ldrb	r3, [r3, #8]
 8014db0:	b25b      	sxtb	r3, r3
 8014db2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014db4:	4b8a      	ldr	r3, [pc, #552]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014db6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dba:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014dbc:	4b88      	ldr	r3, [pc, #544]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dbe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dc2:	f107 0108 	add.w	r1, r7, #8
 8014dc6:	2207      	movs	r2, #7
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f002 fd39 	bl	8017840 <RegionVerify>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d008      	beq.n	8014de6 <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014dd4:	4b82      	ldr	r3, [pc, #520]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dd6:	687a      	ldr	r2, [r7, #4]
 8014dd8:	33b4      	adds	r3, #180	; 0xb4
 8014dda:	3204      	adds	r2, #4
 8014ddc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014de0:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014de4:	e19b      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014de6:	2303      	movs	r3, #3
 8014de8:	75fb      	strb	r3, [r7, #23]
            break;
 8014dea:	e198      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	7a1b      	ldrb	r3, [r3, #8]
 8014df0:	b25b      	sxtb	r3, r3
 8014df2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014df4:	4b7a      	ldr	r3, [pc, #488]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014df6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dfa:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014dfc:	4b78      	ldr	r3, [pc, #480]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dfe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e02:	f107 0108 	add.w	r1, r7, #8
 8014e06:	2207      	movs	r2, #7
 8014e08:	4618      	mov	r0, r3
 8014e0a:	f002 fd19 	bl	8017840 <RegionVerify>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d019      	beq.n	8014e48 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014e14:	4b72      	ldr	r3, [pc, #456]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	3374      	adds	r3, #116	; 0x74
 8014e1a:	3204      	adds	r2, #4
 8014e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e20:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014e24:	4b6e      	ldr	r3, [pc, #440]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e26:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e2a:	2b02      	cmp	r3, #2
 8014e2c:	f040 8170 	bne.w	8015110 <LoRaMacMibSetRequestConfirm+0x70c>
 8014e30:	4b6b      	ldr	r3, [pc, #428]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e32:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	f000 816a 	beq.w	8015110 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014e3c:	4b69      	ldr	r3, [pc, #420]	; (8014fe4 <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e40:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014e42:	f7fe fc91 	bl	8013768 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e46:	e163      	b.n	8015110 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e48:	2303      	movs	r3, #3
 8014e4a:	75fb      	strb	r3, [r7, #23]
            break;
 8014e4c:	e160      	b.n	8015110 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	7a1b      	ldrb	r3, [r3, #8]
 8014e52:	b25b      	sxtb	r3, r3
 8014e54:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e56:	4b62      	ldr	r3, [pc, #392]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e58:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e5c:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e5e:	4b60      	ldr	r3, [pc, #384]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e64:	f107 0108 	add.w	r1, r7, #8
 8014e68:	2207      	movs	r2, #7
 8014e6a:	4618      	mov	r0, r3
 8014e6c:	f002 fce8 	bl	8017840 <RegionVerify>
 8014e70:	4603      	mov	r3, r0
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d008      	beq.n	8014e88 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e76:	4b5a      	ldr	r3, [pc, #360]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e78:	687a      	ldr	r2, [r7, #4]
 8014e7a:	33bc      	adds	r3, #188	; 0xbc
 8014e7c:	3204      	adds	r2, #4
 8014e7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e82:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e86:	e14a      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e88:	2303      	movs	r3, #3
 8014e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8014e8c:	e147      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	685b      	ldr	r3, [r3, #4]
 8014e92:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014e94:	2301      	movs	r3, #1
 8014e96:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014e98:	4b51      	ldr	r3, [pc, #324]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e9a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e9e:	f107 020c 	add.w	r2, r7, #12
 8014ea2:	4611      	mov	r1, r2
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f002 fcf4 	bl	8017892 <RegionChanMaskSet>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	f083 0301 	eor.w	r3, r3, #1
 8014eb0:	b2db      	uxtb	r3, r3
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	f000 812e 	beq.w	8015114 <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014eb8:	2303      	movs	r3, #3
 8014eba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ebc:	e12a      	b.n	8015114 <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014ec8:	4b45      	ldr	r3, [pc, #276]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eca:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ece:	f107 020c 	add.w	r2, r7, #12
 8014ed2:	4611      	mov	r1, r2
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f002 fcdc 	bl	8017892 <RegionChanMaskSet>
 8014eda:	4603      	mov	r3, r0
 8014edc:	f083 0301 	eor.w	r3, r3, #1
 8014ee0:	b2db      	uxtb	r3, r3
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f000 8118 	beq.w	8015118 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ee8:	2303      	movs	r3, #3
 8014eea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014eec:	e114      	b.n	8015118 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	791b      	ldrb	r3, [r3, #4]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d009      	beq.n	8014f0a <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014efa:	2b0f      	cmp	r3, #15
 8014efc:	d805      	bhi.n	8014f0a <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	791a      	ldrb	r2, [r3, #4]
 8014f02:	4b37      	ldr	r3, [pc, #220]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f04:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f08:	e109      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f0a:	2303      	movs	r3, #3
 8014f0c:	75fb      	strb	r3, [r7, #23]
            break;
 8014f0e:	e106      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	685b      	ldr	r3, [r3, #4]
 8014f14:	4a32      	ldr	r2, [pc, #200]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f16:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014f18:	e101      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	685b      	ldr	r3, [r3, #4]
 8014f1e:	4a30      	ldr	r2, [pc, #192]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f20:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014f22:	e0fc      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	685b      	ldr	r3, [r3, #4]
 8014f28:	4a2d      	ldr	r2, [pc, #180]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f2a:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014f2c:	e0f7      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	685b      	ldr	r3, [r3, #4]
 8014f32:	4a2b      	ldr	r2, [pc, #172]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f34:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014f36:	e0f2      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	4a28      	ldr	r2, [pc, #160]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f3e:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014f40:	e0ed      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f48:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014f4a:	4b25      	ldr	r3, [pc, #148]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f4c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f50:	f107 0108 	add.w	r1, r7, #8
 8014f54:	2206      	movs	r2, #6
 8014f56:	4618      	mov	r0, r3
 8014f58:	f002 fc72 	bl	8017840 <RegionVerify>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d005      	beq.n	8014f6e <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014f62:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f66:	4b1e      	ldr	r3, [pc, #120]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f68:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f6c:	e0d7      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f6e:	2303      	movs	r3, #3
 8014f70:	75fb      	strb	r3, [r7, #23]
            break;
 8014f72:	e0d4      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f7a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f7c:	4b18      	ldr	r3, [pc, #96]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f7e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f82:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f84:	4b16      	ldr	r3, [pc, #88]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f86:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f8a:	f107 0108 	add.w	r1, r7, #8
 8014f8e:	2205      	movs	r2, #5
 8014f90:	4618      	mov	r0, r3
 8014f92:	f002 fc55 	bl	8017840 <RegionVerify>
 8014f96:	4603      	mov	r3, r0
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d005      	beq.n	8014fa8 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014f9c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fa0:	4b0f      	ldr	r3, [pc, #60]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fa2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fa6:	e0ba      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fa8:	2303      	movs	r3, #3
 8014faa:	75fb      	strb	r3, [r7, #23]
            break;
 8014fac:	e0b7      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fb4:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014fb6:	4b0a      	ldr	r3, [pc, #40]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fb8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fbc:	f107 0108 	add.w	r1, r7, #8
 8014fc0:	220a      	movs	r2, #10
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f002 fc3c 	bl	8017840 <RegionVerify>
 8014fc8:	4603      	mov	r3, r0
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d005      	beq.n	8014fda <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014fce:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fd2:	4b03      	ldr	r3, [pc, #12]	; (8014fe0 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fd4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fd8:	e0a1      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fda:	2303      	movs	r3, #3
 8014fdc:	75fb      	strb	r3, [r7, #23]
            break;
 8014fde:	e09e      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
 8014fe0:	20000df4 	.word	0x20000df4
 8014fe4:	0801f9d8 	.word	0x0801f9d8
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fee:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8014ff0:	4b4d      	ldr	r3, [pc, #308]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8014ff2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ff6:	f107 0108 	add.w	r1, r7, #8
 8014ffa:	2209      	movs	r2, #9
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f002 fc1f 	bl	8017840 <RegionVerify>
 8015002:	4603      	mov	r3, r0
 8015004:	2b00      	cmp	r3, #0
 8015006:	d005      	beq.n	8015014 <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8015008:	f997 2008 	ldrsb.w	r2, [r7, #8]
 801500c:	4b46      	ldr	r3, [pc, #280]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801500e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8015012:	e084      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8015014:	2303      	movs	r3, #3
 8015016:	75fb      	strb	r3, [r7, #23]
            break;
 8015018:	e081      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	685b      	ldr	r3, [r3, #4]
 801501e:	4a42      	ldr	r2, [pc, #264]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8015020:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8015024:	4b40      	ldr	r3, [pc, #256]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8015026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801502a:	4a3f      	ldr	r2, [pc, #252]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801502c:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 801502e:	e076      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	791a      	ldrb	r2, [r3, #4]
 8015034:	4b3c      	ldr	r3, [pc, #240]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8015036:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 801503a:	4b3b      	ldr	r3, [pc, #236]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801503c:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015040:	4b39      	ldr	r3, [pc, #228]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8015042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 8015046:	e06a      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	4a36      	ldr	r2, [pc, #216]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801504e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 8015052:	e064      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	4a33      	ldr	r2, [pc, #204]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801505a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 801505e:	e05e      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015060:	f7fe fde0 	bl	8013c24 <RestoreNvmData>
 8015064:	4603      	mov	r3, r0
 8015066:	75fb      	strb	r3, [r7, #23]
            break;
 8015068:	e059      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	799b      	ldrb	r3, [r3, #6]
 801506e:	2b01      	cmp	r3, #1
 8015070:	d80d      	bhi.n	801508e <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8015072:	4a2d      	ldr	r2, [pc, #180]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	685b      	ldr	r3, [r3, #4]
 8015078:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	6858      	ldr	r0, [r3, #4]
 8015080:	f001 fce0 	bl	8016a44 <LoRaMacCryptoSetLrWanVersion>
 8015084:	4603      	mov	r3, r0
 8015086:	2b00      	cmp	r3, #0
 8015088:	d048      	beq.n	801511c <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801508a:	2311      	movs	r3, #17
 801508c:	e048      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801508e:	2303      	movs	r3, #3
 8015090:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015092:	e043      	b.n	801511c <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	4a23      	ldr	r2, [pc, #140]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 801509a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 801509e:	e03e      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	889a      	ldrh	r2, [r3, #4]
 80150a4:	4b20      	ldr	r3, [pc, #128]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 80150a6:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80150aa:	e038      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	889a      	ldrh	r2, [r3, #4]
 80150b0:	4b1d      	ldr	r3, [pc, #116]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 80150b2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80150b6:	e032      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	889a      	ldrh	r2, [r3, #4]
 80150bc:	4b1a      	ldr	r3, [pc, #104]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 80150be:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80150c2:	e02c      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	889a      	ldrh	r2, [r3, #4]
 80150c8:	4b17      	ldr	r3, [pc, #92]	; (8015128 <LoRaMacMibSetRequestConfirm+0x724>)
 80150ca:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80150ce:	e026      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150d0:	2318      	movs	r3, #24
 80150d2:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150d4:	e023      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150d6:	2318      	movs	r3, #24
 80150d8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150da:	e020      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 fc27 	bl	8015930 <LoRaMacMibClassBSetRequestConfirm>
 80150e2:	4603      	mov	r3, r0
 80150e4:	75fb      	strb	r3, [r7, #23]
            break;
 80150e6:	e01a      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150e8:	bf00      	nop
 80150ea:	e018      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150ec:	bf00      	nop
 80150ee:	e016      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150f0:	bf00      	nop
 80150f2:	e014      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150f4:	bf00      	nop
 80150f6:	e012      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150f8:	bf00      	nop
 80150fa:	e010      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 80150fc:	bf00      	nop
 80150fe:	e00e      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015100:	bf00      	nop
 8015102:	e00c      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015104:	bf00      	nop
 8015106:	e00a      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015108:	bf00      	nop
 801510a:	e008      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801510c:	bf00      	nop
 801510e:	e006      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015110:	bf00      	nop
 8015112:	e004      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015114:	bf00      	nop
 8015116:	e002      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015118:	bf00      	nop
 801511a:	e000      	b.n	801511e <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801511c:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 801511e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015120:	4618      	mov	r0, r3
 8015122:	3718      	adds	r7, #24
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	20000df4 	.word	0x20000df4

0801512c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b086      	sub	sp, #24
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015134:	2302      	movs	r3, #2
 8015136:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8015138:	2300      	movs	r3, #0
 801513a:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d101      	bne.n	8015146 <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015142:	2303      	movs	r3, #3
 8015144:	e13a      	b.n	80153bc <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8015146:	f7fc fca5 	bl	8011a94 <LoRaMacIsBusy>
 801514a:	4603      	mov	r3, r0
 801514c:	2b00      	cmp	r3, #0
 801514e:	d001      	beq.n	8015154 <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015150:	2301      	movs	r3, #1
 8015152:	e133      	b.n	80153bc <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8015154:	f001 f90c 	bl	8016370 <LoRaMacConfirmQueueIsFull>
 8015158:	4603      	mov	r3, r0
 801515a:	2b00      	cmp	r3, #0
 801515c:	d001      	beq.n	8015162 <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 801515e:	2301      	movs	r3, #1
 8015160:	e12c      	b.n	80153bc <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8015162:	f001 f8f9 	bl	8016358 <LoRaMacConfirmQueueGetCnt>
 8015166:	4603      	mov	r3, r0
 8015168:	2b00      	cmp	r3, #0
 801516a:	d104      	bne.n	8015176 <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 801516c:	2214      	movs	r2, #20
 801516e:	2100      	movs	r1, #0
 8015170:	4894      	ldr	r0, [pc, #592]	; (80153c4 <LoRaMacMlmeRequest+0x298>)
 8015172:	f004 fe7f 	bl	8019e74 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015176:	4b94      	ldr	r3, [pc, #592]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 8015178:	2201      	movs	r2, #1
 801517a:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 801517e:	4a92      	ldr	r2, [pc, #584]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 8015180:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015184:	f043 0304 	orr.w	r3, r3, #4
 8015188:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015192:	2301      	movs	r3, #1
 8015194:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 8015196:	2300      	movs	r3, #0
 8015198:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	3b01      	subs	r3, #1
 80151a0:	2b0d      	cmp	r3, #13
 80151a2:	f200 80e1 	bhi.w	8015368 <LoRaMacMlmeRequest+0x23c>
 80151a6:	a201      	add	r2, pc, #4	; (adr r2, 80151ac <LoRaMacMlmeRequest+0x80>)
 80151a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ac:	080151e5 	.word	0x080151e5
 80151b0:	08015369 	.word	0x08015369
 80151b4:	08015369 	.word	0x08015369
 80151b8:	08015369 	.word	0x08015369
 80151bc:	0801525d 	.word	0x0801525d
 80151c0:	0801527b 	.word	0x0801527b
 80151c4:	0801528b 	.word	0x0801528b
 80151c8:	08015369 	.word	0x08015369
 80151cc:	08015369 	.word	0x08015369
 80151d0:	080152a7 	.word	0x080152a7
 80151d4:	08015369 	.word	0x08015369
 80151d8:	0801533d 	.word	0x0801533d
 80151dc:	080152dd 	.word	0x080152dd
 80151e0:	0801531f 	.word	0x0801531f
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80151e4:	4b78      	ldr	r3, [pc, #480]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 80151e6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80151ea:	f003 0320 	and.w	r3, r3, #32
 80151ee:	2b00      	cmp	r3, #0
 80151f0:	d001      	beq.n	80151f6 <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 80151f2:	2301      	movs	r3, #1
 80151f4:	e0e2      	b.n	80153bc <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 80151f6:	2000      	movs	r0, #0
 80151f8:	f7fe f95c 	bl	80134b4 <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 80151fc:	4b73      	ldr	r3, [pc, #460]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 80151fe:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	795b      	ldrb	r3, [r3, #5]
 8015206:	b25b      	sxtb	r3, r3
 8015208:	2200      	movs	r2, #0
 801520a:	4619      	mov	r1, r3
 801520c:	f002 fc00 	bl	8017a10 <RegionAlternateDr>
 8015210:	4603      	mov	r3, r0
 8015212:	461a      	mov	r2, r3
 8015214:	4b6d      	ldr	r3, [pc, #436]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 8015216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015220:	4b6a      	ldr	r3, [pc, #424]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 8015222:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8015226:	2307      	movs	r3, #7
 8015228:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 801522a:	20ff      	movs	r0, #255	; 0xff
 801522c:	f7fd fec0 	bl	8012fb0 <SendReJoinReq>
 8015230:	4603      	mov	r3, r0
 8015232:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 8015234:	7dfb      	ldrb	r3, [r7, #23]
 8015236:	2b00      	cmp	r3, #0
 8015238:	f000 8098 	beq.w	801536c <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 801523c:	4b63      	ldr	r3, [pc, #396]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 801523e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	795b      	ldrb	r3, [r3, #5]
 8015246:	b25b      	sxtb	r3, r3
 8015248:	2201      	movs	r2, #1
 801524a:	4619      	mov	r1, r3
 801524c:	f002 fbe0 	bl	8017a10 <RegionAlternateDr>
 8015250:	4603      	mov	r3, r0
 8015252:	461a      	mov	r2, r3
 8015254:	4b5d      	ldr	r3, [pc, #372]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 8015256:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 801525a:	e087      	b.n	801536c <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801525c:	2300      	movs	r3, #0
 801525e:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015260:	f107 030c 	add.w	r3, r7, #12
 8015264:	2200      	movs	r2, #0
 8015266:	4619      	mov	r1, r3
 8015268:	2002      	movs	r0, #2
 801526a:	f000 fcd1 	bl	8015c10 <LoRaMacCommandsAddCmd>
 801526e:	4603      	mov	r3, r0
 8015270:	2b00      	cmp	r3, #0
 8015272:	d07d      	beq.n	8015370 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015274:	2313      	movs	r3, #19
 8015276:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015278:	e07a      	b.n	8015370 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	889b      	ldrh	r3, [r3, #4]
 801527e:	4618      	mov	r0, r3
 8015280:	f7fe fc7a 	bl	8013b78 <SetTxContinuousWave>
 8015284:	4603      	mov	r3, r0
 8015286:	75fb      	strb	r3, [r7, #23]
            break;
 8015288:	e079      	b.n	801537e <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8898      	ldrh	r0, [r3, #4]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	6899      	ldr	r1, [r3, #8]
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8015298:	b2db      	uxtb	r3, r3
 801529a:	461a      	mov	r2, r3
 801529c:	f7fe fca2 	bl	8013be4 <SetTxContinuousWave1>
 80152a0:	4603      	mov	r3, r0
 80152a2:	75fb      	strb	r3, [r7, #23]
            break;
 80152a4:	e06b      	b.n	801537e <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152a6:	2300      	movs	r3, #0
 80152a8:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152aa:	f107 0308 	add.w	r3, r7, #8
 80152ae:	4619      	mov	r1, r3
 80152b0:	200d      	movs	r0, #13
 80152b2:	f000 fd2d 	bl	8015d10 <LoRaMacCommandsGetCmd>
 80152b6:	4603      	mov	r3, r0
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d102      	bne.n	80152c2 <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80152bc:	2300      	movs	r3, #0
 80152be:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80152c0:	e058      	b.n	8015374 <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152c2:	f107 030c 	add.w	r3, r7, #12
 80152c6:	2200      	movs	r2, #0
 80152c8:	4619      	mov	r1, r3
 80152ca:	200d      	movs	r0, #13
 80152cc:	f000 fca0 	bl	8015c10 <LoRaMacCommandsAddCmd>
 80152d0:	4603      	mov	r3, r0
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d04e      	beq.n	8015374 <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152d6:	2313      	movs	r3, #19
 80152d8:	75fb      	strb	r3, [r7, #23]
            break;
 80152da:	e04b      	b.n	8015374 <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80152dc:	4b3b      	ldr	r3, [pc, #236]	; (80153cc <LoRaMacMlmeRequest+0x2a0>)
 80152de:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d148      	bne.n	8015378 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	791b      	ldrb	r3, [r3, #4]
 80152ea:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	791b      	ldrb	r3, [r3, #4]
 80152f0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80152f4:	b2db      	uxtb	r3, r3
 80152f6:	4618      	mov	r0, r3
 80152f8:	f000 faef 	bl	80158da <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 80152fc:	7dbb      	ldrb	r3, [r7, #22]
 80152fe:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015300:	2300      	movs	r3, #0
 8015302:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8015304:	f107 030c 	add.w	r3, r7, #12
 8015308:	2201      	movs	r2, #1
 801530a:	4619      	mov	r1, r3
 801530c:	2010      	movs	r0, #16
 801530e:	f000 fc7f 	bl	8015c10 <LoRaMacCommandsAddCmd>
 8015312:	4603      	mov	r3, r0
 8015314:	2b00      	cmp	r3, #0
 8015316:	d02f      	beq.n	8015378 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015318:	2313      	movs	r3, #19
 801531a:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 801531c:	e02c      	b.n	8015378 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801531e:	2300      	movs	r3, #0
 8015320:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015322:	f107 030c 	add.w	r3, r7, #12
 8015326:	2200      	movs	r2, #0
 8015328:	4619      	mov	r1, r3
 801532a:	2012      	movs	r0, #18
 801532c:	f000 fc70 	bl	8015c10 <LoRaMacCommandsAddCmd>
 8015330:	4603      	mov	r3, r0
 8015332:	2b00      	cmp	r3, #0
 8015334:	d022      	beq.n	801537c <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015336:	2313      	movs	r3, #19
 8015338:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801533a:	e01f      	b.n	801537c <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 801533c:	2301      	movs	r3, #1
 801533e:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015340:	f000 fa81 	bl	8015846 <LoRaMacClassBIsAcquisitionInProgress>
 8015344:	4603      	mov	r3, r0
 8015346:	f083 0301 	eor.w	r3, r3, #1
 801534a:	b2db      	uxtb	r3, r3
 801534c:	2b00      	cmp	r3, #0
 801534e:	d008      	beq.n	8015362 <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015350:	2000      	movs	r0, #0
 8015352:	f000 fa5a 	bl	801580a <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8015356:	2000      	movs	r0, #0
 8015358:	f000 fa7c 	bl	8015854 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 801535c:	2300      	movs	r3, #0
 801535e:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015360:	e00d      	b.n	801537e <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 8015362:	2301      	movs	r3, #1
 8015364:	75fb      	strb	r3, [r7, #23]
            break;
 8015366:	e00a      	b.n	801537e <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8015368:	bf00      	nop
 801536a:	e008      	b.n	801537e <LoRaMacMlmeRequest+0x252>
            break;
 801536c:	bf00      	nop
 801536e:	e006      	b.n	801537e <LoRaMacMlmeRequest+0x252>
            break;
 8015370:	bf00      	nop
 8015372:	e004      	b.n	801537e <LoRaMacMlmeRequest+0x252>
            break;
 8015374:	bf00      	nop
 8015376:	e002      	b.n	801537e <LoRaMacMlmeRequest+0x252>
            break;
 8015378:	bf00      	nop
 801537a:	e000      	b.n	801537e <LoRaMacMlmeRequest+0x252>
            break;
 801537c:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801537e:	4b12      	ldr	r3, [pc, #72]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 8015380:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 8015388:	7dfb      	ldrb	r3, [r7, #23]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d010      	beq.n	80153b0 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801538e:	f000 ffe3 	bl	8016358 <LoRaMacConfirmQueueGetCnt>
 8015392:	4603      	mov	r3, r0
 8015394:	2b00      	cmp	r3, #0
 8015396:	d110      	bne.n	80153ba <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 8015398:	4b0b      	ldr	r3, [pc, #44]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 801539a:	2200      	movs	r2, #0
 801539c:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153a0:	4a09      	ldr	r2, [pc, #36]	; (80153c8 <LoRaMacMlmeRequest+0x29c>)
 80153a2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80153a6:	f36f 0382 	bfc	r3, #2, #1
 80153aa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80153ae:	e004      	b.n	80153ba <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153b0:	f107 0310 	add.w	r3, r7, #16
 80153b4:	4618      	mov	r0, r3
 80153b6:	f000 fe7b 	bl	80160b0 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3718      	adds	r7, #24
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	20000d34 	.word	0x20000d34
 80153c8:	200008ec 	.word	0x200008ec
 80153cc:	20000df4 	.word	0x20000df4

080153d0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b08c      	sub	sp, #48	; 0x30
 80153d4:	af02      	add	r7, sp, #8
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	460b      	mov	r3, r1
 80153da:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153dc:	2302      	movs	r3, #2
 80153de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80153e2:	2300      	movs	r3, #0
 80153e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 80153e8:	2300      	movs	r3, #0
 80153ea:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 80153ec:	2300      	movs	r3, #0
 80153ee:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 80153f0:	2300      	movs	r3, #0
 80153f2:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d101      	bne.n	80153fe <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80153fa:	2303      	movs	r3, #3
 80153fc:	e0d4      	b.n	80155a8 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 80153fe:	f7fc fb49 	bl	8011a94 <LoRaMacIsBusy>
 8015402:	4603      	mov	r3, r0
 8015404:	2b00      	cmp	r3, #0
 8015406:	d001      	beq.n	801540c <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015408:	2301      	movs	r3, #1
 801540a:	e0cd      	b.n	80155a8 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 801540c:	2300      	movs	r3, #0
 801540e:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015410:	2214      	movs	r2, #20
 8015412:	2100      	movs	r1, #0
 8015414:	4866      	ldr	r0, [pc, #408]	; (80155b0 <LoRaMacMcpsRequest+0x1e0>)
 8015416:	f004 fd2d 	bl	8019e74 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801541a:	4b66      	ldr	r3, [pc, #408]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 801541c:	2201      	movs	r2, #1
 801541e:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 8015422:	4b64      	ldr	r3, [pc, #400]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 8015424:	2201      	movs	r2, #1
 8015426:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	781b      	ldrb	r3, [r3, #0]
 801542e:	2b03      	cmp	r3, #3
 8015430:	d03d      	beq.n	80154ae <LoRaMacMcpsRequest+0xde>
 8015432:	2b03      	cmp	r3, #3
 8015434:	dc4f      	bgt.n	80154d6 <LoRaMacMcpsRequest+0x106>
 8015436:	2b00      	cmp	r3, #0
 8015438:	d002      	beq.n	8015440 <LoRaMacMcpsRequest+0x70>
 801543a:	2b01      	cmp	r3, #1
 801543c:	d019      	beq.n	8015472 <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 801543e:	e04a      	b.n	80154d6 <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015440:	2301      	movs	r3, #1
 8015442:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 8015444:	4b5b      	ldr	r3, [pc, #364]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 8015446:	2201      	movs	r2, #1
 8015448:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801544c:	7b3b      	ldrb	r3, [r7, #12]
 801544e:	2202      	movs	r2, #2
 8015450:	f362 1347 	bfi	r3, r2, #5, #3
 8015454:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	791b      	ldrb	r3, [r3, #4]
 801545a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	689b      	ldr	r3, [r3, #8]
 8015462:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	899b      	ldrh	r3, [r3, #12]
 8015468:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	7b9b      	ldrb	r3, [r3, #14]
 801546e:	777b      	strb	r3, [r7, #29]
            break;
 8015470:	e032      	b.n	80154d8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 8015472:	2301      	movs	r3, #1
 8015474:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	7bdb      	ldrb	r3, [r3, #15]
 801547a:	2b08      	cmp	r3, #8
 801547c:	bf28      	it	cs
 801547e:	2308      	movcs	r3, #8
 8015480:	b2da      	uxtb	r2, r3
 8015482:	4b4c      	ldr	r3, [pc, #304]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 8015484:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8015488:	7b3b      	ldrb	r3, [r7, #12]
 801548a:	2204      	movs	r2, #4
 801548c:	f362 1347 	bfi	r3, r2, #5, #3
 8015490:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	791b      	ldrb	r3, [r3, #4]
 8015496:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	689b      	ldr	r3, [r3, #8]
 801549e:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	899b      	ldrh	r3, [r3, #12]
 80154a4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	7b9b      	ldrb	r3, [r3, #14]
 80154aa:	777b      	strb	r3, [r7, #29]
            break;
 80154ac:	e014      	b.n	80154d8 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154ae:	2301      	movs	r3, #1
 80154b0:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80154b2:	4b40      	ldr	r3, [pc, #256]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 80154b4:	2201      	movs	r2, #1
 80154b6:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80154ba:	7b3b      	ldrb	r3, [r7, #12]
 80154bc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80154c0:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	685b      	ldr	r3, [r3, #4]
 80154c6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	891b      	ldrh	r3, [r3, #8]
 80154cc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	7a9b      	ldrb	r3, [r3, #10]
 80154d2:	777b      	strb	r3, [r7, #29]
            break;
 80154d4:	e000      	b.n	80154d8 <LoRaMacMcpsRequest+0x108>
            break;
 80154d6:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80154d8:	2302      	movs	r3, #2
 80154da:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80154dc:	4b36      	ldr	r3, [pc, #216]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 80154de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154e2:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80154e4:	4b34      	ldr	r3, [pc, #208]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 80154e6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80154ea:	f107 0214 	add.w	r2, r7, #20
 80154ee:	4611      	mov	r1, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f002 f96a 	bl	80177ca <RegionGetPhyParam>
 80154f6:	4603      	mov	r3, r0
 80154f8:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	b25b      	sxtb	r3, r3
 80154fe:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8015502:	4293      	cmp	r3, r2
 8015504:	bfb8      	it	lt
 8015506:	4613      	movlt	r3, r2
 8015508:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 801550a:	7f3b      	ldrb	r3, [r7, #28]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d044      	beq.n	801559a <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015510:	4b29      	ldr	r3, [pc, #164]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 8015512:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8015516:	f083 0301 	eor.w	r3, r3, #1
 801551a:	b2db      	uxtb	r3, r3
 801551c:	2b00      	cmp	r3, #0
 801551e:	d019      	beq.n	8015554 <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015520:	7f7b      	ldrb	r3, [r7, #29]
 8015522:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8015524:	4b24      	ldr	r3, [pc, #144]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 8015526:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801552a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 801552c:	4b22      	ldr	r3, [pc, #136]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 801552e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015532:	f107 0108 	add.w	r1, r7, #8
 8015536:	2205      	movs	r2, #5
 8015538:	4618      	mov	r0, r3
 801553a:	f002 f981 	bl	8017840 <RegionVerify>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d005      	beq.n	8015550 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8015544:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015548:	4b1b      	ldr	r3, [pc, #108]	; (80155b8 <LoRaMacMcpsRequest+0x1e8>)
 801554a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 801554e:	e001      	b.n	8015554 <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015550:	2303      	movs	r3, #3
 8015552:	e029      	b.n	80155a8 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8015554:	8bfa      	ldrh	r2, [r7, #30]
 8015556:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 801555a:	f107 000c 	add.w	r0, r7, #12
 801555e:	78fb      	ldrb	r3, [r7, #3]
 8015560:	9300      	str	r3, [sp, #0]
 8015562:	4613      	mov	r3, r2
 8015564:	6a3a      	ldr	r2, [r7, #32]
 8015566:	f7fd fc45 	bl	8012df4 <Send>
 801556a:	4603      	mov	r3, r0
 801556c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015574:	2b00      	cmp	r3, #0
 8015576:	d10c      	bne.n	8015592 <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	781a      	ldrb	r2, [r3, #0]
 801557c:	4b0d      	ldr	r3, [pc, #52]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 801557e:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8015582:	4a0c      	ldr	r2, [pc, #48]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 8015584:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015588:	f043 0301 	orr.w	r3, r3, #1
 801558c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 8015590:	e003      	b.n	801559a <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 8015592:	4b08      	ldr	r3, [pc, #32]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 8015594:	2200      	movs	r2, #0
 8015596:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 801559a:	4b06      	ldr	r3, [pc, #24]	; (80155b4 <LoRaMacMcpsRequest+0x1e4>)
 801559c:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	611a      	str	r2, [r3, #16]

    return status;
 80155a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3728      	adds	r7, #40	; 0x28
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	20000d20 	.word	0x20000d20
 80155b4:	200008ec 	.word	0x200008ec
 80155b8:	20000df4 	.word	0x20000df4

080155bc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80155bc:	b580      	push	{r7, lr}
 80155be:	b084      	sub	sp, #16
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	4603      	mov	r3, r0
 80155c4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80155c6:	79fb      	ldrb	r3, [r7, #7]
 80155c8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80155ca:	4b0d      	ldr	r3, [pc, #52]	; (8015600 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155cc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155d0:	f107 010c 	add.w	r1, r7, #12
 80155d4:	220f      	movs	r2, #15
 80155d6:	4618      	mov	r0, r3
 80155d8:	f002 f932 	bl	8017840 <RegionVerify>
 80155dc:	4603      	mov	r3, r0
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d00a      	beq.n	80155f8 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80155e2:	4a07      	ldr	r2, [pc, #28]	; (8015600 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155e4:	79fb      	ldrb	r3, [r7, #7]
 80155e6:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80155ea:	4a06      	ldr	r2, [pc, #24]	; (8015604 <LoRaMacTestSetDutyCycleOn+0x48>)
 80155ec:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80155f0:	f043 0320 	orr.w	r3, r3, #32
 80155f4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 80155f8:	bf00      	nop
 80155fa:	3710      	adds	r7, #16
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	20000df4 	.word	0x20000df4
 8015604:	200008ec 	.word	0x200008ec

08015608 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 801560c:	f7fe ff6c 	bl	80144e8 <LoRaMacStop>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d115      	bne.n	8015642 <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8015616:	480c      	ldr	r0, [pc, #48]	; (8015648 <LoRaMacDeInitialization+0x40>)
 8015618:	f008 fd8c 	bl	801e134 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 801561c:	480b      	ldr	r0, [pc, #44]	; (801564c <LoRaMacDeInitialization+0x44>)
 801561e:	f008 fd89 	bl	801e134 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 8015622:	480b      	ldr	r0, [pc, #44]	; (8015650 <LoRaMacDeInitialization+0x48>)
 8015624:	f008 fd86 	bl	801e134 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015628:	480a      	ldr	r0, [pc, #40]	; (8015654 <LoRaMacDeInitialization+0x4c>)
 801562a:	f008 fd83 	bl	801e134 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 801562e:	f000 f95e 	bl	80158ee <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 8015632:	2000      	movs	r0, #0
 8015634:	f7fd ff3e 	bl	80134b4 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015638:	4b07      	ldr	r3, [pc, #28]	; (8015658 <LoRaMacDeInitialization+0x50>)
 801563a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801563c:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 801563e:	2300      	movs	r3, #0
 8015640:	e000      	b.n	8015644 <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8015642:	2301      	movs	r3, #1
    }
}
 8015644:	4618      	mov	r0, r3
 8015646:	bd80      	pop	{r7, pc}
 8015648:	20000c54 	.word	0x20000c54
 801564c:	20000c6c 	.word	0x20000c6c
 8015650:	20000c84 	.word	0x20000c84
 8015654:	20000ce0 	.word	0x20000ce0
 8015658:	0801f9d8 	.word	0x0801f9d8

0801565c <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b08c      	sub	sp, #48	; 0x30
 8015660:	af00      	add	r7, sp, #0
 8015662:	60f8      	str	r0, [r7, #12]
 8015664:	60b9      	str	r1, [r7, #8]
 8015666:	607a      	str	r2, [r7, #4]
 8015668:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801566a:	2300      	movs	r3, #0
 801566c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	7c1b      	ldrb	r3, [r3, #16]
 8015674:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	7c5b      	ldrb	r3, [r3, #17]
 801567c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	689a      	ldr	r2, [r3, #8]
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	795b      	ldrb	r3, [r3, #5]
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 808b 	beq.w	80157a8 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 8015692:	2302      	movs	r3, #2
 8015694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	7c9b      	ldrb	r3, [r3, #18]
 801569c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	7cdb      	ldrb	r3, [r3, #19]
 80156a4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156a8:	4611      	mov	r1, r2
 80156aa:	4618      	mov	r0, r3
 80156ac:	f002 f88d 	bl	80177ca <RegionGetPhyParam>
 80156b0:	4603      	mov	r3, r0
 80156b2:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80156b4:	6a3b      	ldr	r3, [r7, #32]
 80156b6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80156ba:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80156be:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80156c2:	4293      	cmp	r3, r2
 80156c4:	bfb8      	it	lt
 80156c6:	4613      	movlt	r3, r2
 80156c8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80156cc:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80156d0:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d106      	bne.n	80156e6 <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	2200      	movs	r2, #0
 80156dc:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80156de:	2300      	movs	r3, #0
 80156e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80156e4:	e060      	b.n	80157a8 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	689b      	ldr	r3, [r3, #8]
 80156ea:	68fa      	ldr	r2, [r7, #12]
 80156ec:	8992      	ldrh	r2, [r2, #12]
 80156ee:	4293      	cmp	r3, r2
 80156f0:	d303      	bcc.n	80156fa <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 80156f2:	2301      	movs	r3, #1
 80156f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80156f8:	e002      	b.n	8015700 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 80156fa:	2300      	movs	r3, #0
 80156fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015700:	68fb      	ldr	r3, [r7, #12]
 8015702:	689b      	ldr	r3, [r3, #8]
 8015704:	68fa      	ldr	r2, [r7, #12]
 8015706:	8992      	ldrh	r2, [r2, #12]
 8015708:	4611      	mov	r1, r2
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	89d2      	ldrh	r2, [r2, #14]
 801570e:	440a      	add	r2, r1
 8015710:	4293      	cmp	r3, r2
 8015712:	d349      	bcc.n	80157a8 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 8015714:	2308      	movs	r3, #8
 8015716:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	7cdb      	ldrb	r3, [r3, #19]
 801571e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015722:	4611      	mov	r1, r2
 8015724:	4618      	mov	r0, r3
 8015726:	f002 f850 	bl	80177ca <RegionGetPhyParam>
 801572a:	4603      	mov	r3, r0
 801572c:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 801572e:	6a3b      	ldr	r3, [r7, #32]
 8015730:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	689b      	ldr	r3, [r3, #8]
 8015738:	68fa      	ldr	r2, [r7, #12]
 801573a:	89d2      	ldrh	r2, [r2, #14]
 801573c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015740:	fb01 f202 	mul.w	r2, r1, r2
 8015744:	1a9b      	subs	r3, r3, r2
 8015746:	2b01      	cmp	r3, #1
 8015748:	d12e      	bne.n	80157a8 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801574a:	2322      	movs	r3, #34	; 0x22
 801574c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015750:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8015754:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	7c9b      	ldrb	r3, [r3, #18]
 801575c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	7cdb      	ldrb	r3, [r3, #19]
 8015764:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015768:	4611      	mov	r1, r2
 801576a:	4618      	mov	r0, r3
 801576c:	f002 f82d 	bl	80177ca <RegionGetPhyParam>
 8015770:	4603      	mov	r3, r0
 8015772:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 8015774:	6a3b      	ldr	r3, [r7, #32]
 8015776:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 801577a:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 801577e:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8015782:	429a      	cmp	r2, r3
 8015784:	d110      	bne.n	80157a8 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 8015786:	2300      	movs	r3, #0
 8015788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	791b      	ldrb	r3, [r3, #4]
 8015790:	2b00      	cmp	r3, #0
 8015792:	d009      	beq.n	80157a8 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8015794:	2302      	movs	r3, #2
 8015796:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	7cdb      	ldrb	r3, [r3, #19]
 801579c:	f107 0214 	add.w	r2, r7, #20
 80157a0:	4611      	mov	r1, r2
 80157a2:	4618      	mov	r0, r3
 80157a4:	f002 f83a 	bl	801781c <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80157ae:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157b6:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80157b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80157bc:	4618      	mov	r0, r3
 80157be:	3730      	adds	r7, #48	; 0x30
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}

080157c4 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80157c4:	b580      	push	{r7, lr}
 80157c6:	b084      	sub	sp, #16
 80157c8:	af00      	add	r7, sp, #0
 80157ca:	60f8      	str	r0, [r7, #12]
 80157cc:	60b9      	str	r1, [r7, #8]
 80157ce:	607a      	str	r2, [r7, #4]
 80157d0:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	789b      	ldrb	r3, [r3, #2]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d107      	bne.n	80157ea <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	687a      	ldr	r2, [r7, #4]
 80157de:	68b9      	ldr	r1, [r7, #8]
 80157e0:	68f8      	ldr	r0, [r7, #12]
 80157e2:	f7ff ff3b 	bl	801565c <CalcNextV10X>
 80157e6:	4603      	mov	r3, r0
 80157e8:	e000      	b.n	80157ec <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 80157ea:	2300      	movs	r3, #0
}
 80157ec:	4618      	mov	r0, r3
 80157ee:	3710      	adds	r7, #16
 80157f0:	46bd      	mov	sp, r7
 80157f2:	bd80      	pop	{r7, pc}

080157f4 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80157f4:	b480      	push	{r7}
 80157f6:	b085      	sub	sp, #20
 80157f8:	af00      	add	r7, sp, #0
 80157fa:	60f8      	str	r0, [r7, #12]
 80157fc:	60b9      	str	r1, [r7, #8]
 80157fe:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015800:	bf00      	nop
 8015802:	3714      	adds	r7, #20
 8015804:	46bd      	mov	sp, r7
 8015806:	bc80      	pop	{r7}
 8015808:	4770      	bx	lr

0801580a <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 801580a:	b480      	push	{r7}
 801580c:	b083      	sub	sp, #12
 801580e:	af00      	add	r7, sp, #0
 8015810:	4603      	mov	r3, r0
 8015812:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015814:	bf00      	nop
 8015816:	370c      	adds	r7, #12
 8015818:	46bd      	mov	sp, r7
 801581a:	bc80      	pop	{r7}
 801581c:	4770      	bx	lr

0801581e <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 801581e:	b480      	push	{r7}
 8015820:	b083      	sub	sp, #12
 8015822:	af00      	add	r7, sp, #0
 8015824:	4603      	mov	r3, r0
 8015826:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015828:	bf00      	nop
 801582a:	370c      	adds	r7, #12
 801582c:	46bd      	mov	sp, r7
 801582e:	bc80      	pop	{r7}
 8015830:	4770      	bx	lr

08015832 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 8015832:	b480      	push	{r7}
 8015834:	b083      	sub	sp, #12
 8015836:	af00      	add	r7, sp, #0
 8015838:	4603      	mov	r3, r0
 801583a:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801583c:	bf00      	nop
 801583e:	370c      	adds	r7, #12
 8015840:	46bd      	mov	sp, r7
 8015842:	bc80      	pop	{r7}
 8015844:	4770      	bx	lr

08015846 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8015846:	b480      	push	{r7}
 8015848:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 801584a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801584c:	4618      	mov	r0, r3
 801584e:	46bd      	mov	sp, r7
 8015850:	bc80      	pop	{r7}
 8015852:	4770      	bx	lr

08015854 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 8015854:	b480      	push	{r7}
 8015856:	b083      	sub	sp, #12
 8015858:	af00      	add	r7, sp, #0
 801585a:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801585c:	bf00      	nop
 801585e:	370c      	adds	r7, #12
 8015860:	46bd      	mov	sp, r7
 8015862:	bc80      	pop	{r7}
 8015864:	4770      	bx	lr

08015866 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8015866:	b480      	push	{r7}
 8015868:	b083      	sub	sp, #12
 801586a:	af00      	add	r7, sp, #0
 801586c:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801586e:	bf00      	nop
 8015870:	370c      	adds	r7, #12
 8015872:	46bd      	mov	sp, r7
 8015874:	bc80      	pop	{r7}
 8015876:	4770      	bx	lr

08015878 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015878:	b480      	push	{r7}
 801587a:	b083      	sub	sp, #12
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015880:	bf00      	nop
 8015882:	370c      	adds	r7, #12
 8015884:	46bd      	mov	sp, r7
 8015886:	bc80      	pop	{r7}
 8015888:	4770      	bx	lr

0801588a <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 801588a:	b480      	push	{r7}
 801588c:	b083      	sub	sp, #12
 801588e:	af00      	add	r7, sp, #0
 8015890:	6078      	str	r0, [r7, #4]
 8015892:	460b      	mov	r3, r1
 8015894:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8015896:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015898:	4618      	mov	r0, r3
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	bc80      	pop	{r7}
 80158a0:	4770      	bx	lr

080158a2 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158a2:	b480      	push	{r7}
 80158a4:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158a6:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bc80      	pop	{r7}
 80158ae:	4770      	bx	lr

080158b0 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158b0:	b480      	push	{r7}
 80158b2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158b4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bc80      	pop	{r7}
 80158bc:	4770      	bx	lr

080158be <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80158be:	b480      	push	{r7}
 80158c0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158c4:	4618      	mov	r0, r3
 80158c6:	46bd      	mov	sp, r7
 80158c8:	bc80      	pop	{r7}
 80158ca:	4770      	bx	lr

080158cc <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80158cc:	b480      	push	{r7}
 80158ce:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158d0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	46bd      	mov	sp, r7
 80158d6:	bc80      	pop	{r7}
 80158d8:	4770      	bx	lr

080158da <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80158da:	b480      	push	{r7}
 80158dc:	b083      	sub	sp, #12
 80158de:	af00      	add	r7, sp, #0
 80158e0:	4603      	mov	r3, r0
 80158e2:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158e4:	bf00      	nop
 80158e6:	370c      	adds	r7, #12
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bc80      	pop	{r7}
 80158ec:	4770      	bx	lr

080158ee <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80158ee:	b480      	push	{r7}
 80158f0:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158f2:	bf00      	nop
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bc80      	pop	{r7}
 80158f8:	4770      	bx	lr

080158fa <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80158fa:	b480      	push	{r7}
 80158fc:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158fe:	bf00      	nop
 8015900:	46bd      	mov	sp, r7
 8015902:	bc80      	pop	{r7}
 8015904:	4770      	bx	lr

08015906 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 8015906:	b480      	push	{r7}
 8015908:	b083      	sub	sp, #12
 801590a:	af00      	add	r7, sp, #0
 801590c:	4603      	mov	r3, r0
 801590e:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015910:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015912:	4618      	mov	r0, r3
 8015914:	370c      	adds	r7, #12
 8015916:	46bd      	mov	sp, r7
 8015918:	bc80      	pop	{r7}
 801591a:	4770      	bx	lr

0801591c <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 801591c:	b480      	push	{r7}
 801591e:	b083      	sub	sp, #12
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015924:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015926:	4618      	mov	r0, r3
 8015928:	370c      	adds	r7, #12
 801592a:	46bd      	mov	sp, r7
 801592c:	bc80      	pop	{r7}
 801592e:	4770      	bx	lr

08015930 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015930:	b480      	push	{r7}
 8015932:	b083      	sub	sp, #12
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015938:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801593a:	4618      	mov	r0, r3
 801593c:	370c      	adds	r7, #12
 801593e:	46bd      	mov	sp, r7
 8015940:	bc80      	pop	{r7}
 8015942:	4770      	bx	lr

08015944 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 8015944:	b480      	push	{r7}
 8015946:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015948:	bf00      	nop
 801594a:	46bd      	mov	sp, r7
 801594c:	bc80      	pop	{r7}
 801594e:	4770      	bx	lr

08015950 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	6039      	str	r1, [r7, #0]
 801595a:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 801595c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801595e:	4618      	mov	r0, r3
 8015960:	370c      	adds	r7, #12
 8015962:	46bd      	mov	sp, r7
 8015964:	bc80      	pop	{r7}
 8015966:	4770      	bx	lr

08015968 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	603a      	str	r2, [r7, #0]
 8015972:	80fb      	strh	r3, [r7, #6]
 8015974:	460b      	mov	r3, r1
 8015976:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015978:	bf00      	nop
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	bc80      	pop	{r7}
 8015980:	4770      	bx	lr

08015982 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 8015982:	b480      	push	{r7}
 8015984:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015986:	bf00      	nop
 8015988:	46bd      	mov	sp, r7
 801598a:	bc80      	pop	{r7}
 801598c:	4770      	bx	lr

0801598e <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 801598e:	b480      	push	{r7}
 8015990:	b083      	sub	sp, #12
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8015996:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015998:	4618      	mov	r0, r3
 801599a:	370c      	adds	r7, #12
 801599c:	46bd      	mov	sp, r7
 801599e:	bc80      	pop	{r7}
 80159a0:	4770      	bx	lr

080159a2 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80159a2:	b480      	push	{r7}
 80159a4:	b083      	sub	sp, #12
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80159aa:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ac:	4618      	mov	r0, r3
 80159ae:	370c      	adds	r7, #12
 80159b0:	46bd      	mov	sp, r7
 80159b2:	bc80      	pop	{r7}
 80159b4:	4770      	bx	lr

080159b6 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80159b6:	b480      	push	{r7}
 80159b8:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159ba:	bf00      	nop
 80159bc:	46bd      	mov	sp, r7
 80159be:	bc80      	pop	{r7}
 80159c0:	4770      	bx	lr

080159c2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80159c2:	b480      	push	{r7}
 80159c4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159c6:	bf00      	nop
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bc80      	pop	{r7}
 80159cc:	4770      	bx	lr

080159ce <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80159ce:	b480      	push	{r7}
 80159d0:	b085      	sub	sp, #20
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80159da:	2300      	movs	r3, #0
 80159dc:	81fb      	strh	r3, [r7, #14]
 80159de:	e00a      	b.n	80159f6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80159e0:	89fb      	ldrh	r3, [r7, #14]
 80159e2:	68ba      	ldr	r2, [r7, #8]
 80159e4:	4413      	add	r3, r2
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d001      	beq.n	80159f0 <IsSlotFree+0x22>
        {
            return false;
 80159ec:	2300      	movs	r3, #0
 80159ee:	e006      	b.n	80159fe <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80159f0:	89fb      	ldrh	r3, [r7, #14]
 80159f2:	3301      	adds	r3, #1
 80159f4:	81fb      	strh	r3, [r7, #14]
 80159f6:	89fb      	ldrh	r3, [r7, #14]
 80159f8:	2b0f      	cmp	r3, #15
 80159fa:	d9f1      	bls.n	80159e0 <IsSlotFree+0x12>
        }
    }
    return true;
 80159fc:	2301      	movs	r3, #1
}
 80159fe:	4618      	mov	r0, r3
 8015a00:	3714      	adds	r7, #20
 8015a02:	46bd      	mov	sp, r7
 8015a04:	bc80      	pop	{r7}
 8015a06:	4770      	bx	lr

08015a08 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a0e:	2300      	movs	r3, #0
 8015a10:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a12:	e007      	b.n	8015a24 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a14:	79fb      	ldrb	r3, [r7, #7]
 8015a16:	3301      	adds	r3, #1
 8015a18:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a1a:	79fb      	ldrb	r3, [r7, #7]
 8015a1c:	2b0f      	cmp	r3, #15
 8015a1e:	d101      	bne.n	8015a24 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a20:	2300      	movs	r3, #0
 8015a22:	e012      	b.n	8015a4a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a24:	79fb      	ldrb	r3, [r7, #7]
 8015a26:	011b      	lsls	r3, r3, #4
 8015a28:	3308      	adds	r3, #8
 8015a2a:	4a0a      	ldr	r2, [pc, #40]	; (8015a54 <MallocNewMacCommandSlot+0x4c>)
 8015a2c:	4413      	add	r3, r2
 8015a2e:	4618      	mov	r0, r3
 8015a30:	f7ff ffcd 	bl	80159ce <IsSlotFree>
 8015a34:	4603      	mov	r3, r0
 8015a36:	f083 0301 	eor.w	r3, r3, #1
 8015a3a:	b2db      	uxtb	r3, r3
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1e9      	bne.n	8015a14 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015a40:	79fb      	ldrb	r3, [r7, #7]
 8015a42:	011b      	lsls	r3, r3, #4
 8015a44:	3308      	adds	r3, #8
 8015a46:	4a03      	ldr	r2, [pc, #12]	; (8015a54 <MallocNewMacCommandSlot+0x4c>)
 8015a48:	4413      	add	r3, r2
}
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	3708      	adds	r7, #8
 8015a4e:	46bd      	mov	sp, r7
 8015a50:	bd80      	pop	{r7, pc}
 8015a52:	bf00      	nop
 8015a54:	20001574 	.word	0x20001574

08015a58 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b082      	sub	sp, #8
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d101      	bne.n	8015a6a <FreeMacCommandSlot+0x12>
    {
        return false;
 8015a66:	2300      	movs	r3, #0
 8015a68:	e005      	b.n	8015a76 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015a6a:	2210      	movs	r2, #16
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f004 fa00 	bl	8019e74 <memset1>

    return true;
 8015a74:	2301      	movs	r3, #1
}
 8015a76:	4618      	mov	r0, r3
 8015a78:	3708      	adds	r7, #8
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}

08015a7e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015a7e:	b480      	push	{r7}
 8015a80:	b083      	sub	sp, #12
 8015a82:	af00      	add	r7, sp, #0
 8015a84:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d101      	bne.n	8015a90 <LinkedListInit+0x12>
    {
        return false;
 8015a8c:	2300      	movs	r3, #0
 8015a8e:	e006      	b.n	8015a9e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	2200      	movs	r2, #0
 8015a94:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	2200      	movs	r2, #0
 8015a9a:	605a      	str	r2, [r3, #4]

    return true;
 8015a9c:	2301      	movs	r3, #1
}
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	370c      	adds	r7, #12
 8015aa2:	46bd      	mov	sp, r7
 8015aa4:	bc80      	pop	{r7}
 8015aa6:	4770      	bx	lr

08015aa8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015aa8:	b480      	push	{r7}
 8015aaa:	b083      	sub	sp, #12
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
 8015ab0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d002      	beq.n	8015abe <LinkedListAdd+0x16>
 8015ab8:	683b      	ldr	r3, [r7, #0]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d101      	bne.n	8015ac2 <LinkedListAdd+0x1a>
    {
        return false;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e015      	b.n	8015aee <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d102      	bne.n	8015ad0 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	683a      	ldr	r2, [r7, #0]
 8015ace:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d003      	beq.n	8015ae0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	685b      	ldr	r3, [r3, #4]
 8015adc:	683a      	ldr	r2, [r7, #0]
 8015ade:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015ae0:	683b      	ldr	r3, [r7, #0]
 8015ae2:	2200      	movs	r2, #0
 8015ae4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	683a      	ldr	r2, [r7, #0]
 8015aea:	605a      	str	r2, [r3, #4]

    return true;
 8015aec:	2301      	movs	r3, #1
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	370c      	adds	r7, #12
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bc80      	pop	{r7}
 8015af6:	4770      	bx	lr

08015af8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015af8:	b480      	push	{r7}
 8015afa:	b085      	sub	sp, #20
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b02:	687b      	ldr	r3, [r7, #4]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d002      	beq.n	8015b0e <LinkedListGetPrevious+0x16>
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d101      	bne.n	8015b12 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b0e:	2300      	movs	r3, #0
 8015b10:	e016      	b.n	8015b40 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b18:	683a      	ldr	r2, [r7, #0]
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	429a      	cmp	r2, r3
 8015b1e:	d00c      	beq.n	8015b3a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b20:	e002      	b.n	8015b28 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b22:	68fb      	ldr	r3, [r7, #12]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2b00      	cmp	r3, #0
 8015b2c:	d007      	beq.n	8015b3e <LinkedListGetPrevious+0x46>
 8015b2e:	68fb      	ldr	r3, [r7, #12]
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	683a      	ldr	r2, [r7, #0]
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d1f4      	bne.n	8015b22 <LinkedListGetPrevious+0x2a>
 8015b38:	e001      	b.n	8015b3e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015b3e:	68fb      	ldr	r3, [r7, #12]
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3714      	adds	r7, #20
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bc80      	pop	{r7}
 8015b48:	4770      	bx	lr

08015b4a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b084      	sub	sp, #16
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	6078      	str	r0, [r7, #4]
 8015b52:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d002      	beq.n	8015b60 <LinkedListRemove+0x16>
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d101      	bne.n	8015b64 <LinkedListRemove+0x1a>
    {
        return false;
 8015b60:	2300      	movs	r3, #0
 8015b62:	e020      	b.n	8015ba6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015b64:	6839      	ldr	r1, [r7, #0]
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f7ff ffc6 	bl	8015af8 <LinkedListGetPrevious>
 8015b6c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	683a      	ldr	r2, [r7, #0]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	d103      	bne.n	8015b80 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	681a      	ldr	r2, [r3, #0]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	685b      	ldr	r3, [r3, #4]
 8015b84:	683a      	ldr	r2, [r7, #0]
 8015b86:	429a      	cmp	r2, r3
 8015b88:	d102      	bne.n	8015b90 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	68fa      	ldr	r2, [r7, #12]
 8015b8e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d003      	beq.n	8015b9e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015b96:	683b      	ldr	r3, [r7, #0]
 8015b98:	681a      	ldr	r2, [r3, #0]
 8015b9a:	68fb      	ldr	r3, [r7, #12]
 8015b9c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015b9e:	683b      	ldr	r3, [r7, #0]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	601a      	str	r2, [r3, #0]

    return true;
 8015ba4:	2301      	movs	r3, #1
}
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	3710      	adds	r7, #16
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}

08015bae <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015bae:	b480      	push	{r7}
 8015bb0:	b083      	sub	sp, #12
 8015bb2:	af00      	add	r7, sp, #0
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015bb8:	79fb      	ldrb	r3, [r7, #7]
 8015bba:	2b05      	cmp	r3, #5
 8015bbc:	d004      	beq.n	8015bc8 <IsSticky+0x1a>
 8015bbe:	2b05      	cmp	r3, #5
 8015bc0:	db04      	blt.n	8015bcc <IsSticky+0x1e>
 8015bc2:	3b08      	subs	r3, #8
 8015bc4:	2b02      	cmp	r3, #2
 8015bc6:	d801      	bhi.n	8015bcc <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015bc8:	2301      	movs	r3, #1
 8015bca:	e000      	b.n	8015bce <IsSticky+0x20>
        default:
            return false;
 8015bcc:	2300      	movs	r3, #0
    }
}
 8015bce:	4618      	mov	r0, r3
 8015bd0:	370c      	adds	r7, #12
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	bc80      	pop	{r7}
 8015bd6:	4770      	bx	lr

08015bd8 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	4603      	mov	r3, r0
 8015be0:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015be2:	2300      	movs	r3, #0
    }
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	370c      	adds	r7, #12
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bc80      	pop	{r7}
 8015bec:	4770      	bx	lr
	...

08015bf0 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015bf4:	22fc      	movs	r2, #252	; 0xfc
 8015bf6:	2100      	movs	r1, #0
 8015bf8:	4804      	ldr	r0, [pc, #16]	; (8015c0c <LoRaMacCommandsInit+0x1c>)
 8015bfa:	f004 f93b 	bl	8019e74 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015bfe:	4803      	ldr	r0, [pc, #12]	; (8015c0c <LoRaMacCommandsInit+0x1c>)
 8015c00:	f7ff ff3d 	bl	8015a7e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c04:	2300      	movs	r3, #0
}
 8015c06:	4618      	mov	r0, r3
 8015c08:	bd80      	pop	{r7, pc}
 8015c0a:	bf00      	nop
 8015c0c:	20001574 	.word	0x20001574

08015c10 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	b086      	sub	sp, #24
 8015c14:	af00      	add	r7, sp, #0
 8015c16:	4603      	mov	r3, r0
 8015c18:	60b9      	str	r1, [r7, #8]
 8015c1a:	607a      	str	r2, [r7, #4]
 8015c1c:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c1e:	68bb      	ldr	r3, [r7, #8]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d101      	bne.n	8015c28 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c24:	2301      	movs	r3, #1
 8015c26:	e03b      	b.n	8015ca0 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c28:	f7ff feee 	bl	8015a08 <MallocNewMacCommandSlot>
 8015c2c:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d101      	bne.n	8015c38 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c34:	2302      	movs	r3, #2
 8015c36:	e033      	b.n	8015ca0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c38:	6979      	ldr	r1, [r7, #20]
 8015c3a:	481b      	ldr	r0, [pc, #108]	; (8015ca8 <LoRaMacCommandsAddCmd+0x98>)
 8015c3c:	f7ff ff34 	bl	8015aa8 <LinkedListAdd>
 8015c40:	4603      	mov	r3, r0
 8015c42:	f083 0301 	eor.w	r3, r3, #1
 8015c46:	b2db      	uxtb	r3, r3
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c4c:	2305      	movs	r3, #5
 8015c4e:	e027      	b.n	8015ca0 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015c50:	697b      	ldr	r3, [r7, #20]
 8015c52:	7bfa      	ldrb	r2, [r7, #15]
 8015c54:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015c56:	697b      	ldr	r3, [r7, #20]
 8015c58:	687a      	ldr	r2, [r7, #4]
 8015c5a:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	3305      	adds	r3, #5
 8015c60:	687a      	ldr	r2, [r7, #4]
 8015c62:	b292      	uxth	r2, r2
 8015c64:	68b9      	ldr	r1, [r7, #8]
 8015c66:	4618      	mov	r0, r3
 8015c68:	f004 f8c9 	bl	8019dfe <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015c6c:	7bfb      	ldrb	r3, [r7, #15]
 8015c6e:	4618      	mov	r0, r3
 8015c70:	f7ff ff9d 	bl	8015bae <IsSticky>
 8015c74:	4603      	mov	r3, r0
 8015c76:	461a      	mov	r2, r3
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015c7c:	7bfb      	ldrb	r3, [r7, #15]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f7ff ffaa 	bl	8015bd8 <IsConfirmationRequired>
 8015c84:	4603      	mov	r3, r0
 8015c86:	461a      	mov	r2, r3
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015c8c:	4b06      	ldr	r3, [pc, #24]	; (8015ca8 <LoRaMacCommandsAddCmd+0x98>)
 8015c8e:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	4413      	add	r3, r2
 8015c96:	3301      	adds	r3, #1
 8015c98:	4a03      	ldr	r2, [pc, #12]	; (8015ca8 <LoRaMacCommandsAddCmd+0x98>)
 8015c9a:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015c9e:	2300      	movs	r3, #0
}
 8015ca0:	4618      	mov	r0, r3
 8015ca2:	3718      	adds	r7, #24
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}
 8015ca8:	20001574 	.word	0x20001574

08015cac <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d101      	bne.n	8015cbe <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cba:	2301      	movs	r3, #1
 8015cbc:	e021      	b.n	8015d02 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015cbe:	6879      	ldr	r1, [r7, #4]
 8015cc0:	4812      	ldr	r0, [pc, #72]	; (8015d0c <LoRaMacCommandsRemoveCmd+0x60>)
 8015cc2:	f7ff ff42 	bl	8015b4a <LinkedListRemove>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	f083 0301 	eor.w	r3, r3, #1
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d001      	beq.n	8015cd6 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015cd2:	2303      	movs	r3, #3
 8015cd4:	e015      	b.n	8015d02 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015cd6:	4b0d      	ldr	r3, [pc, #52]	; (8015d0c <LoRaMacCommandsRemoveCmd+0x60>)
 8015cd8:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	689b      	ldr	r3, [r3, #8]
 8015ce0:	1ad3      	subs	r3, r2, r3
 8015ce2:	3b01      	subs	r3, #1
 8015ce4:	4a09      	ldr	r2, [pc, #36]	; (8015d0c <LoRaMacCommandsRemoveCmd+0x60>)
 8015ce6:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f7ff feb4 	bl	8015a58 <FreeMacCommandSlot>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	f083 0301 	eor.w	r3, r3, #1
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d001      	beq.n	8015d00 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015cfc:	2305      	movs	r3, #5
 8015cfe:	e000      	b.n	8015d02 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d00:	2300      	movs	r3, #0
}
 8015d02:	4618      	mov	r0, r3
 8015d04:	3708      	adds	r7, #8
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}
 8015d0a:	bf00      	nop
 8015d0c:	20001574 	.word	0x20001574

08015d10 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015d10:	b480      	push	{r7}
 8015d12:	b085      	sub	sp, #20
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	4603      	mov	r3, r0
 8015d18:	6039      	str	r1, [r7, #0]
 8015d1a:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d1c:	4b0e      	ldr	r3, [pc, #56]	; (8015d58 <LoRaMacCommandsGetCmd+0x48>)
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d22:	e002      	b.n	8015d2a <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d004      	beq.n	8015d3a <LoRaMacCommandsGetCmd+0x2a>
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	791b      	ldrb	r3, [r3, #4]
 8015d34:	79fa      	ldrb	r2, [r7, #7]
 8015d36:	429a      	cmp	r2, r3
 8015d38:	d1f4      	bne.n	8015d24 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015d3a:	683b      	ldr	r3, [r7, #0]
 8015d3c:	68fa      	ldr	r2, [r7, #12]
 8015d3e:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d101      	bne.n	8015d4a <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d46:	2303      	movs	r3, #3
 8015d48:	e000      	b.n	8015d4c <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015d4a:	2300      	movs	r3, #0
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3714      	adds	r7, #20
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bc80      	pop	{r7}
 8015d54:	4770      	bx	lr
 8015d56:	bf00      	nop
 8015d58:	20001574 	.word	0x20001574

08015d5c <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b082      	sub	sp, #8
 8015d60:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d62:	4b0f      	ldr	r3, [pc, #60]	; (8015da0 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d68:	e012      	b.n	8015d90 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	7b1b      	ldrb	r3, [r3, #12]
 8015d6e:	f083 0301 	eor.w	r3, r3, #1
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d008      	beq.n	8015d8a <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015d7e:	6878      	ldr	r0, [r7, #4]
 8015d80:	f7ff ff94 	bl	8015cac <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015d84:	683b      	ldr	r3, [r7, #0]
 8015d86:	607b      	str	r3, [r7, #4]
 8015d88:	e002      	b.n	8015d90 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d1e9      	bne.n	8015d6a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d96:	2300      	movs	r3, #0
}
 8015d98:	4618      	mov	r0, r3
 8015d9a:	3708      	adds	r7, #8
 8015d9c:	46bd      	mov	sp, r7
 8015d9e:	bd80      	pop	{r7, pc}
 8015da0:	20001574 	.word	0x20001574

08015da4 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015daa:	4b13      	ldr	r3, [pc, #76]	; (8015df8 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015db0:	e01a      	b.n	8015de8 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	681b      	ldr	r3, [r3, #0]
 8015db6:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	791b      	ldrb	r3, [r3, #4]
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	f7ff fef6 	bl	8015bae <IsSticky>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d00d      	beq.n	8015de4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	791b      	ldrb	r3, [r3, #4]
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7ff ff03 	bl	8015bd8 <IsConfirmationRequired>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	f083 0301 	eor.w	r3, r3, #1
 8015dd8:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d002      	beq.n	8015de4 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015dde:	6878      	ldr	r0, [r7, #4]
 8015de0:	f7ff ff64 	bl	8015cac <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d1e1      	bne.n	8015db2 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dee:	2300      	movs	r3, #0
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3708      	adds	r7, #8
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd80      	pop	{r7, pc}
 8015df8:	20001574 	.word	0x20001574

08015dfc <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015dfc:	b480      	push	{r7}
 8015dfe:	b083      	sub	sp, #12
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d101      	bne.n	8015e0e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	e005      	b.n	8015e1a <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e0e:	4b05      	ldr	r3, [pc, #20]	; (8015e24 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e10:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	370c      	adds	r7, #12
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bc80      	pop	{r7}
 8015e22:	4770      	bx	lr
 8015e24:	20001574 	.word	0x20001574

08015e28 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b088      	sub	sp, #32
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	60f8      	str	r0, [r7, #12]
 8015e30:	60b9      	str	r1, [r7, #8]
 8015e32:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e34:	4b25      	ldr	r3, [pc, #148]	; (8015ecc <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d002      	beq.n	8015e4a <LoRaMacCommandsSerializeCmds+0x22>
 8015e44:	68bb      	ldr	r3, [r7, #8]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d126      	bne.n	8015e98 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	e039      	b.n	8015ec2 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e4e:	7efb      	ldrb	r3, [r7, #27]
 8015e50:	68fa      	ldr	r2, [r7, #12]
 8015e52:	1ad2      	subs	r2, r2, r3
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	689b      	ldr	r3, [r3, #8]
 8015e58:	3301      	adds	r3, #1
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d320      	bcc.n	8015ea0 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e5e:	7efb      	ldrb	r3, [r7, #27]
 8015e60:	1c5a      	adds	r2, r3, #1
 8015e62:	76fa      	strb	r2, [r7, #27]
 8015e64:	461a      	mov	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	4413      	add	r3, r2
 8015e6a:	69fa      	ldr	r2, [r7, #28]
 8015e6c:	7912      	ldrb	r2, [r2, #4]
 8015e6e:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e70:	7efb      	ldrb	r3, [r7, #27]
 8015e72:	687a      	ldr	r2, [r7, #4]
 8015e74:	18d0      	adds	r0, r2, r3
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	1d59      	adds	r1, r3, #5
 8015e7a:	69fb      	ldr	r3, [r7, #28]
 8015e7c:	689b      	ldr	r3, [r3, #8]
 8015e7e:	b29b      	uxth	r3, r3
 8015e80:	461a      	mov	r2, r3
 8015e82:	f003 ffbc 	bl	8019dfe <memcpy1>
            itr += curElement->PayloadSize;
 8015e86:	69fb      	ldr	r3, [r7, #28]
 8015e88:	689b      	ldr	r3, [r3, #8]
 8015e8a:	b2da      	uxtb	r2, r3
 8015e8c:	7efb      	ldrb	r3, [r7, #27]
 8015e8e:	4413      	add	r3, r2
 8015e90:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015e98:	69fb      	ldr	r3, [r7, #28]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d1d7      	bne.n	8015e4e <LoRaMacCommandsSerializeCmds+0x26>
 8015e9e:	e009      	b.n	8015eb4 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015ea0:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015ea2:	e007      	b.n	8015eb4 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015ea4:	69fb      	ldr	r3, [r7, #28]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015eaa:	69f8      	ldr	r0, [r7, #28]
 8015eac:	f7ff fefe 	bl	8015cac <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015eb0:	697b      	ldr	r3, [r7, #20]
 8015eb2:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015eb4:	69fb      	ldr	r3, [r7, #28]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1f4      	bne.n	8015ea4 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015eba:	68b8      	ldr	r0, [r7, #8]
 8015ebc:	f7ff ff9e 	bl	8015dfc <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ec0:	2300      	movs	r3, #0
}
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	3720      	adds	r7, #32
 8015ec6:	46bd      	mov	sp, r7
 8015ec8:	bd80      	pop	{r7, pc}
 8015eca:	bf00      	nop
 8015ecc:	20001574 	.word	0x20001574

08015ed0 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015ed0:	b480      	push	{r7}
 8015ed2:	b085      	sub	sp, #20
 8015ed4:	af00      	add	r7, sp, #0
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015eda:	2300      	movs	r3, #0
 8015edc:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015ede:	79fb      	ldrb	r3, [r7, #7]
 8015ee0:	3b02      	subs	r3, #2
 8015ee2:	2b11      	cmp	r3, #17
 8015ee4:	d850      	bhi.n	8015f88 <LoRaMacCommandsGetCmdSize+0xb8>
 8015ee6:	a201      	add	r2, pc, #4	; (adr r2, 8015eec <LoRaMacCommandsGetCmdSize+0x1c>)
 8015ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eec:	08015f35 	.word	0x08015f35
 8015ef0:	08015f3b 	.word	0x08015f3b
 8015ef4:	08015f41 	.word	0x08015f41
 8015ef8:	08015f47 	.word	0x08015f47
 8015efc:	08015f4d 	.word	0x08015f4d
 8015f00:	08015f53 	.word	0x08015f53
 8015f04:	08015f59 	.word	0x08015f59
 8015f08:	08015f5f 	.word	0x08015f5f
 8015f0c:	08015f65 	.word	0x08015f65
 8015f10:	08015f89 	.word	0x08015f89
 8015f14:	08015f89 	.word	0x08015f89
 8015f18:	08015f6b 	.word	0x08015f6b
 8015f1c:	08015f89 	.word	0x08015f89
 8015f20:	08015f89 	.word	0x08015f89
 8015f24:	08015f71 	.word	0x08015f71
 8015f28:	08015f77 	.word	0x08015f77
 8015f2c:	08015f7d 	.word	0x08015f7d
 8015f30:	08015f83 	.word	0x08015f83
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f34:	2303      	movs	r3, #3
 8015f36:	73fb      	strb	r3, [r7, #15]
            break;
 8015f38:	e027      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f3a:	2305      	movs	r3, #5
 8015f3c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f3e:	e024      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f40:	2302      	movs	r3, #2
 8015f42:	73fb      	strb	r3, [r7, #15]
            break;
 8015f44:	e021      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f46:	2305      	movs	r3, #5
 8015f48:	73fb      	strb	r3, [r7, #15]
            break;
 8015f4a:	e01e      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f4c:	2301      	movs	r3, #1
 8015f4e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f50:	e01b      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f52:	2306      	movs	r3, #6
 8015f54:	73fb      	strb	r3, [r7, #15]
            break;
 8015f56:	e018      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f58:	2302      	movs	r3, #2
 8015f5a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f5c:	e015      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015f5e:	2302      	movs	r3, #2
 8015f60:	73fb      	strb	r3, [r7, #15]
            break;
 8015f62:	e012      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015f64:	2305      	movs	r3, #5
 8015f66:	73fb      	strb	r3, [r7, #15]
            break;
 8015f68:	e00f      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015f6a:	2306      	movs	r3, #6
 8015f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f6e:	e00c      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015f70:	2301      	movs	r3, #1
 8015f72:	73fb      	strb	r3, [r7, #15]
            break;
 8015f74:	e009      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015f76:	2305      	movs	r3, #5
 8015f78:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7a:	e006      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015f7c:	2304      	movs	r3, #4
 8015f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f80:	e003      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015f82:	2304      	movs	r3, #4
 8015f84:	73fb      	strb	r3, [r7, #15]
            break;
 8015f86:	e000      	b.n	8015f8a <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015f88:	bf00      	nop
        }
    }
    return cidSize;
 8015f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	3714      	adds	r7, #20
 8015f90:	46bd      	mov	sp, r7
 8015f92:	bc80      	pop	{r7}
 8015f94:	4770      	bx	lr
 8015f96:	bf00      	nop

08015f98 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	4a07      	ldr	r2, [pc, #28]	; (8015fc0 <IncreaseBufferPointer+0x28>)
 8015fa4:	4293      	cmp	r3, r2
 8015fa6:	d102      	bne.n	8015fae <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fa8:	4b06      	ldr	r3, [pc, #24]	; (8015fc4 <IncreaseBufferPointer+0x2c>)
 8015faa:	607b      	str	r3, [r7, #4]
 8015fac:	e002      	b.n	8015fb4 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	3304      	adds	r3, #4
 8015fb2:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015fb4:	687b      	ldr	r3, [r7, #4]
}
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	370c      	adds	r7, #12
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bc80      	pop	{r7}
 8015fbe:	4770      	bx	lr
 8015fc0:	2000168c 	.word	0x2000168c
 8015fc4:	2000167c 	.word	0x2000167c

08015fc8 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015fc8:	b480      	push	{r7}
 8015fca:	b083      	sub	sp, #12
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	4603      	mov	r3, r0
 8015fd0:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015fd2:	79fb      	ldrb	r3, [r7, #7]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d101      	bne.n	8015fdc <IsListEmpty+0x14>
    {
        return true;
 8015fd8:	2301      	movs	r3, #1
 8015fda:	e000      	b.n	8015fde <IsListEmpty+0x16>
    }
    return false;
 8015fdc:	2300      	movs	r3, #0
}
 8015fde:	4618      	mov	r0, r3
 8015fe0:	370c      	adds	r7, #12
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bc80      	pop	{r7}
 8015fe6:	4770      	bx	lr

08015fe8 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b083      	sub	sp, #12
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	4603      	mov	r3, r0
 8015ff0:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8015ff2:	79fb      	ldrb	r3, [r7, #7]
 8015ff4:	2b04      	cmp	r3, #4
 8015ff6:	d901      	bls.n	8015ffc <IsListFull+0x14>
    {
        return true;
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	e000      	b.n	8015ffe <IsListFull+0x16>
    }
    return false;
 8015ffc:	2300      	movs	r3, #0
}
 8015ffe:	4618      	mov	r0, r3
 8016000:	370c      	adds	r7, #12
 8016002:	46bd      	mov	sp, r7
 8016004:	bc80      	pop	{r7}
 8016006:	4770      	bx	lr

08016008 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8016008:	b580      	push	{r7, lr}
 801600a:	b086      	sub	sp, #24
 801600c:	af00      	add	r7, sp, #0
 801600e:	4603      	mov	r3, r0
 8016010:	60b9      	str	r1, [r7, #8]
 8016012:	607a      	str	r2, [r7, #4]
 8016014:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801601a:	4b13      	ldr	r3, [pc, #76]	; (8016068 <GetElement+0x60>)
 801601c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016020:	4618      	mov	r0, r3
 8016022:	f7ff ffd1 	bl	8015fc8 <IsListEmpty>
 8016026:	4603      	mov	r3, r0
 8016028:	2b00      	cmp	r3, #0
 801602a:	d001      	beq.n	8016030 <GetElement+0x28>
    {
        return NULL;
 801602c:	2300      	movs	r3, #0
 801602e:	e017      	b.n	8016060 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016030:	2300      	movs	r3, #0
 8016032:	74fb      	strb	r3, [r7, #19]
 8016034:	e00d      	b.n	8016052 <GetElement+0x4a>
    {
        if( element->Request == request )
 8016036:	697b      	ldr	r3, [r7, #20]
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	7bfa      	ldrb	r2, [r7, #15]
 801603c:	429a      	cmp	r2, r3
 801603e:	d101      	bne.n	8016044 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016040:	697b      	ldr	r3, [r7, #20]
 8016042:	e00d      	b.n	8016060 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8016044:	6978      	ldr	r0, [r7, #20]
 8016046:	f7ff ffa7 	bl	8015f98 <IncreaseBufferPointer>
 801604a:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 801604c:	7cfb      	ldrb	r3, [r7, #19]
 801604e:	3301      	adds	r3, #1
 8016050:	74fb      	strb	r3, [r7, #19]
 8016052:	4b05      	ldr	r3, [pc, #20]	; (8016068 <GetElement+0x60>)
 8016054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016058:	7cfa      	ldrb	r2, [r7, #19]
 801605a:	429a      	cmp	r2, r3
 801605c:	d3eb      	bcc.n	8016036 <GetElement+0x2e>
    }

    return NULL;
 801605e:	2300      	movs	r3, #0
}
 8016060:	4618      	mov	r0, r3
 8016062:	3718      	adds	r7, #24
 8016064:	46bd      	mov	sp, r7
 8016066:	bd80      	pop	{r7, pc}
 8016068:	20001670 	.word	0x20001670

0801606c <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8016074:	4a0c      	ldr	r2, [pc, #48]	; (80160a8 <LoRaMacConfirmQueueInit+0x3c>)
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 801607a:	4b0b      	ldr	r3, [pc, #44]	; (80160a8 <LoRaMacConfirmQueueInit+0x3c>)
 801607c:	2200      	movs	r2, #0
 801607e:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016082:	4b09      	ldr	r3, [pc, #36]	; (80160a8 <LoRaMacConfirmQueueInit+0x3c>)
 8016084:	4a09      	ldr	r2, [pc, #36]	; (80160ac <LoRaMacConfirmQueueInit+0x40>)
 8016086:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8016088:	4b07      	ldr	r3, [pc, #28]	; (80160a8 <LoRaMacConfirmQueueInit+0x3c>)
 801608a:	4a08      	ldr	r2, [pc, #32]	; (80160ac <LoRaMacConfirmQueueInit+0x40>)
 801608c:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 801608e:	2214      	movs	r2, #20
 8016090:	21ff      	movs	r1, #255	; 0xff
 8016092:	4806      	ldr	r0, [pc, #24]	; (80160ac <LoRaMacConfirmQueueInit+0x40>)
 8016094:	f003 feee 	bl	8019e74 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016098:	4b03      	ldr	r3, [pc, #12]	; (80160a8 <LoRaMacConfirmQueueInit+0x3c>)
 801609a:	2201      	movs	r2, #1
 801609c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160a0:	bf00      	nop
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	20001670 	.word	0x20001670
 80160ac:	2000167c 	.word	0x2000167c

080160b0 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160b8:	4b19      	ldr	r3, [pc, #100]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160be:	4618      	mov	r0, r3
 80160c0:	f7ff ff92 	bl	8015fe8 <IsListFull>
 80160c4:	4603      	mov	r3, r0
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d001      	beq.n	80160ce <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80160ca:	2300      	movs	r3, #0
 80160cc:	e023      	b.n	8016116 <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80160ce:	4b14      	ldr	r3, [pc, #80]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160d0:	689b      	ldr	r3, [r3, #8]
 80160d2:	687a      	ldr	r2, [r7, #4]
 80160d4:	7812      	ldrb	r2, [r2, #0]
 80160d6:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80160d8:	4b11      	ldr	r3, [pc, #68]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160da:	689b      	ldr	r3, [r3, #8]
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	7852      	ldrb	r2, [r2, #1]
 80160e0:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80160e2:	4b0f      	ldr	r3, [pc, #60]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160e4:	689b      	ldr	r3, [r3, #8]
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	78d2      	ldrb	r2, [r2, #3]
 80160ea:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 80160ec:	4b0c      	ldr	r3, [pc, #48]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	2200      	movs	r2, #0
 80160f2:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 80160f4:	4b0a      	ldr	r3, [pc, #40]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 80160f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160fa:	3301      	adds	r3, #1
 80160fc:	b2da      	uxtb	r2, r3
 80160fe:	4b08      	ldr	r3, [pc, #32]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 8016100:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8016104:	4b06      	ldr	r3, [pc, #24]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 8016106:	689b      	ldr	r3, [r3, #8]
 8016108:	4618      	mov	r0, r3
 801610a:	f7ff ff45 	bl	8015f98 <IncreaseBufferPointer>
 801610e:	4603      	mov	r3, r0
 8016110:	4a03      	ldr	r2, [pc, #12]	; (8016120 <LoRaMacConfirmQueueAdd+0x70>)
 8016112:	6093      	str	r3, [r2, #8]

    return true;
 8016114:	2301      	movs	r3, #1
}
 8016116:	4618      	mov	r0, r3
 8016118:	3708      	adds	r7, #8
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	20001670 	.word	0x20001670

08016124 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8016124:	b580      	push	{r7, lr}
 8016126:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016128:	4b0e      	ldr	r3, [pc, #56]	; (8016164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801612a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801612e:	4618      	mov	r0, r3
 8016130:	f7ff ff4a 	bl	8015fc8 <IsListEmpty>
 8016134:	4603      	mov	r3, r0
 8016136:	2b00      	cmp	r3, #0
 8016138:	d001      	beq.n	801613e <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801613a:	2300      	movs	r3, #0
 801613c:	e010      	b.n	8016160 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 801613e:	4b09      	ldr	r3, [pc, #36]	; (8016164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016144:	3b01      	subs	r3, #1
 8016146:	b2da      	uxtb	r2, r3
 8016148:	4b06      	ldr	r3, [pc, #24]	; (8016164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801614a:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 801614e:	4b05      	ldr	r3, [pc, #20]	; (8016164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016150:	685b      	ldr	r3, [r3, #4]
 8016152:	4618      	mov	r0, r3
 8016154:	f7ff ff20 	bl	8015f98 <IncreaseBufferPointer>
 8016158:	4603      	mov	r3, r0
 801615a:	4a02      	ldr	r2, [pc, #8]	; (8016164 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801615c:	6053      	str	r3, [r2, #4]

    return true;
 801615e:	2301      	movs	r3, #1
}
 8016160:	4618      	mov	r0, r3
 8016162:	bd80      	pop	{r7, pc}
 8016164:	20001670 	.word	0x20001670

08016168 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b084      	sub	sp, #16
 801616c:	af00      	add	r7, sp, #0
 801616e:	4603      	mov	r3, r0
 8016170:	460a      	mov	r2, r1
 8016172:	71fb      	strb	r3, [r7, #7]
 8016174:	4613      	mov	r3, r2
 8016176:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8016178:	2300      	movs	r3, #0
 801617a:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 801617c:	4b10      	ldr	r3, [pc, #64]	; (80161c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801617e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016182:	4618      	mov	r0, r3
 8016184:	f7ff ff20 	bl	8015fc8 <IsListEmpty>
 8016188:	4603      	mov	r3, r0
 801618a:	f083 0301 	eor.w	r3, r3, #1
 801618e:	b2db      	uxtb	r3, r3
 8016190:	2b00      	cmp	r3, #0
 8016192:	d011      	beq.n	80161b8 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016194:	4b0a      	ldr	r3, [pc, #40]	; (80161c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016196:	6859      	ldr	r1, [r3, #4]
 8016198:	4b09      	ldr	r3, [pc, #36]	; (80161c0 <LoRaMacConfirmQueueSetStatus+0x58>)
 801619a:	689a      	ldr	r2, [r3, #8]
 801619c:	79bb      	ldrb	r3, [r7, #6]
 801619e:	4618      	mov	r0, r3
 80161a0:	f7ff ff32 	bl	8016008 <GetElement>
 80161a4:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d005      	beq.n	80161b8 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	79fa      	ldrb	r2, [r7, #7]
 80161b0:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2201      	movs	r2, #1
 80161b6:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161b8:	bf00      	nop
 80161ba:	3710      	adds	r7, #16
 80161bc:	46bd      	mov	sp, r7
 80161be:	bd80      	pop	{r7, pc}
 80161c0:	20001670 	.word	0x20001670

080161c4 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b084      	sub	sp, #16
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	4603      	mov	r3, r0
 80161cc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80161ce:	2300      	movs	r3, #0
 80161d0:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161d2:	4b10      	ldr	r3, [pc, #64]	; (8016214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80161d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161d8:	4618      	mov	r0, r3
 80161da:	f7ff fef5 	bl	8015fc8 <IsListEmpty>
 80161de:	4603      	mov	r3, r0
 80161e0:	f083 0301 	eor.w	r3, r3, #1
 80161e4:	b2db      	uxtb	r3, r3
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d00e      	beq.n	8016208 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161ea:	4b0a      	ldr	r3, [pc, #40]	; (8016214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80161ec:	6859      	ldr	r1, [r3, #4]
 80161ee:	4b09      	ldr	r3, [pc, #36]	; (8016214 <LoRaMacConfirmQueueGetStatus+0x50>)
 80161f0:	689a      	ldr	r2, [r3, #8]
 80161f2:	79fb      	ldrb	r3, [r7, #7]
 80161f4:	4618      	mov	r0, r3
 80161f6:	f7ff ff07 	bl	8016008 <GetElement>
 80161fa:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d002      	beq.n	8016208 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	785b      	ldrb	r3, [r3, #1]
 8016206:	e000      	b.n	801620a <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016208:	2301      	movs	r3, #1
}
 801620a:	4618      	mov	r0, r3
 801620c:	3710      	adds	r7, #16
 801620e:	46bd      	mov	sp, r7
 8016210:	bd80      	pop	{r7, pc}
 8016212:	bf00      	nop
 8016214:	20001670 	.word	0x20001670

08016218 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016218:	b580      	push	{r7, lr}
 801621a:	b084      	sub	sp, #16
 801621c:	af00      	add	r7, sp, #0
 801621e:	4603      	mov	r3, r0
 8016220:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8016222:	4b16      	ldr	r3, [pc, #88]	; (801627c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016228:	4a14      	ldr	r2, [pc, #80]	; (801627c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801622a:	79fb      	ldrb	r3, [r7, #7]
 801622c:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016230:	4b12      	ldr	r3, [pc, #72]	; (801627c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016232:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016236:	4618      	mov	r0, r3
 8016238:	f7ff fec6 	bl	8015fc8 <IsListEmpty>
 801623c:	4603      	mov	r3, r0
 801623e:	f083 0301 	eor.w	r3, r3, #1
 8016242:	b2db      	uxtb	r3, r3
 8016244:	2b00      	cmp	r3, #0
 8016246:	d015      	beq.n	8016274 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	79fa      	ldrb	r2, [r7, #7]
 801624c:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	78db      	ldrb	r3, [r3, #3]
 8016252:	f083 0301 	eor.w	r3, r3, #1
 8016256:	b2db      	uxtb	r3, r3
 8016258:	2b00      	cmp	r3, #0
 801625a:	d002      	beq.n	8016262 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	2201      	movs	r2, #1
 8016260:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 8016262:	68f8      	ldr	r0, [r7, #12]
 8016264:	f7ff fe98 	bl	8015f98 <IncreaseBufferPointer>
 8016268:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 801626a:	4b04      	ldr	r3, [pc, #16]	; (801627c <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801626c:	689b      	ldr	r3, [r3, #8]
 801626e:	68fa      	ldr	r2, [r7, #12]
 8016270:	429a      	cmp	r2, r3
 8016272:	d1e9      	bne.n	8016248 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8016274:	bf00      	nop
 8016276:	3710      	adds	r7, #16
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}
 801627c:	20001670 	.word	0x20001670

08016280 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
 8016286:	4603      	mov	r3, r0
 8016288:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 801628a:	4b09      	ldr	r3, [pc, #36]	; (80162b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801628c:	6859      	ldr	r1, [r3, #4]
 801628e:	4b08      	ldr	r3, [pc, #32]	; (80162b0 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8016290:	689a      	ldr	r2, [r3, #8]
 8016292:	79fb      	ldrb	r3, [r7, #7]
 8016294:	4618      	mov	r0, r3
 8016296:	f7ff feb7 	bl	8016008 <GetElement>
 801629a:	4603      	mov	r3, r0
 801629c:	2b00      	cmp	r3, #0
 801629e:	d001      	beq.n	80162a4 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162a0:	2301      	movs	r3, #1
 80162a2:	e000      	b.n	80162a6 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162a4:	2300      	movs	r3, #0
}
 80162a6:	4618      	mov	r0, r3
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}
 80162ae:	bf00      	nop
 80162b0:	20001670 	.word	0x20001670

080162b4 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162b4:	b580      	push	{r7, lr}
 80162b6:	b084      	sub	sp, #16
 80162b8:	af00      	add	r7, sp, #0
 80162ba:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162bc:	4b25      	ldr	r3, [pc, #148]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162c2:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80162c4:	2300      	movs	r3, #0
 80162c6:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80162c8:	f107 0308 	add.w	r3, r7, #8
 80162cc:	2204      	movs	r2, #4
 80162ce:	2100      	movs	r1, #0
 80162d0:	4618      	mov	r0, r3
 80162d2:	f003 fdcf 	bl	8019e74 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80162d6:	2300      	movs	r3, #0
 80162d8:	73fb      	strb	r3, [r7, #15]
 80162da:	e032      	b.n	8016342 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80162dc:	4b1d      	ldr	r3, [pc, #116]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162de:	685b      	ldr	r3, [r3, #4]
 80162e0:	781a      	ldrb	r2, [r3, #0]
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80162e6:	4b1b      	ldr	r3, [pc, #108]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	785a      	ldrb	r2, [r3, #1]
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80162f0:	4b18      	ldr	r3, [pc, #96]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162f2:	685b      	ldr	r3, [r3, #4]
 80162f4:	789b      	ldrb	r3, [r3, #2]
 80162f6:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80162f8:	7b7b      	ldrb	r3, [r7, #13]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d005      	beq.n	801630a <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80162fe:	4b15      	ldr	r3, [pc, #84]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	689b      	ldr	r3, [r3, #8]
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	4798      	blx	r3
 8016308:	e00b      	b.n	8016322 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801630a:	4b12      	ldr	r3, [pc, #72]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801630c:	685b      	ldr	r3, [r3, #4]
 801630e:	781b      	ldrb	r3, [r3, #0]
 8016310:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8016312:	4b10      	ldr	r3, [pc, #64]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	785b      	ldrb	r3, [r3, #1]
 8016318:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801631a:	4b0e      	ldr	r3, [pc, #56]	; (8016354 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801631c:	685b      	ldr	r3, [r3, #4]
 801631e:	78db      	ldrb	r3, [r3, #3]
 8016320:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8016322:	f7ff feff 	bl	8016124 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8016326:	7b7b      	ldrb	r3, [r7, #13]
 8016328:	f083 0301 	eor.w	r3, r3, #1
 801632c:	b2db      	uxtb	r3, r3
 801632e:	2b00      	cmp	r3, #0
 8016330:	d004      	beq.n	801633c <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8016332:	f107 0308 	add.w	r3, r7, #8
 8016336:	4618      	mov	r0, r3
 8016338:	f7ff feba 	bl	80160b0 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 801633c:	7bfb      	ldrb	r3, [r7, #15]
 801633e:	3301      	adds	r3, #1
 8016340:	73fb      	strb	r3, [r7, #15]
 8016342:	7bfa      	ldrb	r2, [r7, #15]
 8016344:	7bbb      	ldrb	r3, [r7, #14]
 8016346:	429a      	cmp	r2, r3
 8016348:	d3c8      	bcc.n	80162dc <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 801634a:	bf00      	nop
 801634c:	bf00      	nop
 801634e:	3710      	adds	r7, #16
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}
 8016354:	20001670 	.word	0x20001670

08016358 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016358:	b480      	push	{r7}
 801635a:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 801635c:	4b03      	ldr	r3, [pc, #12]	; (801636c <LoRaMacConfirmQueueGetCnt+0x14>)
 801635e:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 8016362:	4618      	mov	r0, r3
 8016364:	46bd      	mov	sp, r7
 8016366:	bc80      	pop	{r7}
 8016368:	4770      	bx	lr
 801636a:	bf00      	nop
 801636c:	20001670 	.word	0x20001670

08016370 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016374:	4b06      	ldr	r3, [pc, #24]	; (8016390 <LoRaMacConfirmQueueIsFull+0x20>)
 8016376:	f893 3020 	ldrb.w	r3, [r3, #32]
 801637a:	4618      	mov	r0, r3
 801637c:	f7ff fe34 	bl	8015fe8 <IsListFull>
 8016380:	4603      	mov	r3, r0
 8016382:	2b00      	cmp	r3, #0
 8016384:	d001      	beq.n	801638a <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8016386:	2301      	movs	r3, #1
 8016388:	e000      	b.n	801638c <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 801638a:	2300      	movs	r3, #0
    }
}
 801638c:	4618      	mov	r0, r3
 801638e:	bd80      	pop	{r7, pc}
 8016390:	20001670 	.word	0x20001670

08016394 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b08e      	sub	sp, #56	; 0x38
 8016398:	af00      	add	r7, sp, #0
 801639a:	60f8      	str	r0, [r7, #12]
 801639c:	607b      	str	r3, [r7, #4]
 801639e:	460b      	mov	r3, r1
 80163a0:	817b      	strh	r3, [r7, #10]
 80163a2:	4613      	mov	r3, r2
 80163a4:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d101      	bne.n	80163b0 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163ac:	230a      	movs	r3, #10
 80163ae:	e086      	b.n	80164be <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163b0:	2300      	movs	r3, #0
 80163b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163b6:	2301      	movs	r3, #1
 80163b8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163ba:	2300      	movs	r3, #0
 80163bc:	623b      	str	r3, [r7, #32]
 80163be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163c2:	2200      	movs	r2, #0
 80163c4:	601a      	str	r2, [r3, #0]
 80163c6:	605a      	str	r2, [r3, #4]
 80163c8:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80163ca:	2300      	movs	r3, #0
 80163cc:	613b      	str	r3, [r7, #16]
 80163ce:	f107 0314 	add.w	r3, r7, #20
 80163d2:	2200      	movs	r2, #0
 80163d4:	601a      	str	r2, [r3, #0]
 80163d6:	605a      	str	r2, [r3, #4]
 80163d8:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80163da:	2301      	movs	r3, #1
 80163dc:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80163de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80163e2:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	b2db      	uxtb	r3, r3
 80163e8:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	0a1b      	lsrs	r3, r3, #8
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	0c1b      	lsrs	r3, r3, #16
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	0e1b      	lsrs	r3, r3, #24
 80163fe:	b2db      	uxtb	r3, r3
 8016400:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8016402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016404:	b2db      	uxtb	r3, r3
 8016406:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801640a:	0a1b      	lsrs	r3, r3, #8
 801640c:	b2db      	uxtb	r3, r3
 801640e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016410:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016412:	0c1b      	lsrs	r3, r3, #16
 8016414:	b2db      	uxtb	r3, r3
 8016416:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016418:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641a:	0e1b      	lsrs	r3, r3, #24
 801641c:	b2db      	uxtb	r3, r3
 801641e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016420:	e048      	b.n	80164b4 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 8016422:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016424:	b2db      	uxtb	r3, r3
 8016426:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016428:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801642a:	3301      	adds	r3, #1
 801642c:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801642e:	f107 0320 	add.w	r3, r7, #32
 8016432:	7a7a      	ldrb	r2, [r7, #9]
 8016434:	f107 0010 	add.w	r0, r7, #16
 8016438:	2110      	movs	r1, #16
 801643a:	f7f8 ff69 	bl	800f310 <SecureElementAesEncrypt>
 801643e:	4603      	mov	r3, r0
 8016440:	2b00      	cmp	r3, #0
 8016442:	d001      	beq.n	8016448 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016444:	230f      	movs	r3, #15
 8016446:	e03a      	b.n	80164be <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016448:	2300      	movs	r3, #0
 801644a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801644e:	e01e      	b.n	801648e <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016450:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8016454:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016458:	4413      	add	r3, r2
 801645a:	461a      	mov	r2, r3
 801645c:	68fb      	ldr	r3, [r7, #12]
 801645e:	4413      	add	r3, r2
 8016460:	7819      	ldrb	r1, [r3, #0]
 8016462:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016466:	3338      	adds	r3, #56	; 0x38
 8016468:	443b      	add	r3, r7
 801646a:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801646e:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8016472:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016476:	4403      	add	r3, r0
 8016478:	4618      	mov	r0, r3
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	4403      	add	r3, r0
 801647e:	404a      	eors	r2, r1
 8016480:	b2d2      	uxtb	r2, r2
 8016482:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016484:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016488:	3301      	adds	r3, #1
 801648a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801648e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016492:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8016496:	2a10      	cmp	r2, #16
 8016498:	bfa8      	it	ge
 801649a:	2210      	movge	r2, #16
 801649c:	b212      	sxth	r2, r2
 801649e:	4293      	cmp	r3, r2
 80164a0:	dbd6      	blt.n	8016450 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164a2:	897b      	ldrh	r3, [r7, #10]
 80164a4:	3b10      	subs	r3, #16
 80164a6:	b29b      	uxth	r3, r3
 80164a8:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164ae:	3310      	adds	r3, #16
 80164b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	dcb2      	bgt.n	8016422 <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164bc:	2300      	movs	r3, #0
}
 80164be:	4618      	mov	r0, r3
 80164c0:	3738      	adds	r7, #56	; 0x38
 80164c2:	46bd      	mov	sp, r7
 80164c4:	bd80      	pop	{r7, pc}

080164c6 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80164c6:	b490      	push	{r4, r7}
 80164c8:	b082      	sub	sp, #8
 80164ca:	af00      	add	r7, sp, #0
 80164cc:	4604      	mov	r4, r0
 80164ce:	4608      	mov	r0, r1
 80164d0:	4611      	mov	r1, r2
 80164d2:	461a      	mov	r2, r3
 80164d4:	4623      	mov	r3, r4
 80164d6:	80fb      	strh	r3, [r7, #6]
 80164d8:	4603      	mov	r3, r0
 80164da:	717b      	strb	r3, [r7, #5]
 80164dc:	460b      	mov	r3, r1
 80164de:	713b      	strb	r3, [r7, #4]
 80164e0:	4613      	mov	r3, r2
 80164e2:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d101      	bne.n	80164ee <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80164ea:	230a      	movs	r3, #10
 80164ec:	e04e      	b.n	801658c <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80164ee:	69bb      	ldr	r3, [r7, #24]
 80164f0:	2249      	movs	r2, #73	; 0x49
 80164f2:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	3301      	adds	r3, #1
 80164f8:	2200      	movs	r2, #0
 80164fa:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	3302      	adds	r3, #2
 8016500:	2200      	movs	r2, #0
 8016502:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8016504:	69bb      	ldr	r3, [r7, #24]
 8016506:	3303      	adds	r3, #3
 8016508:	2200      	movs	r2, #0
 801650a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801650c:	69bb      	ldr	r3, [r7, #24]
 801650e:	3304      	adds	r3, #4
 8016510:	2200      	movs	r2, #0
 8016512:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	3305      	adds	r3, #5
 8016518:	78fa      	ldrb	r2, [r7, #3]
 801651a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	3306      	adds	r3, #6
 8016520:	693a      	ldr	r2, [r7, #16]
 8016522:	b2d2      	uxtb	r2, r2
 8016524:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8016526:	693b      	ldr	r3, [r7, #16]
 8016528:	0a1a      	lsrs	r2, r3, #8
 801652a:	69bb      	ldr	r3, [r7, #24]
 801652c:	3307      	adds	r3, #7
 801652e:	b2d2      	uxtb	r2, r2
 8016530:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8016532:	693b      	ldr	r3, [r7, #16]
 8016534:	0c1a      	lsrs	r2, r3, #16
 8016536:	69bb      	ldr	r3, [r7, #24]
 8016538:	3308      	adds	r3, #8
 801653a:	b2d2      	uxtb	r2, r2
 801653c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	0e1a      	lsrs	r2, r3, #24
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	3309      	adds	r3, #9
 8016546:	b2d2      	uxtb	r2, r2
 8016548:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 801654a:	69bb      	ldr	r3, [r7, #24]
 801654c:	330a      	adds	r3, #10
 801654e:	697a      	ldr	r2, [r7, #20]
 8016550:	b2d2      	uxtb	r2, r2
 8016552:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8016554:	697b      	ldr	r3, [r7, #20]
 8016556:	0a1a      	lsrs	r2, r3, #8
 8016558:	69bb      	ldr	r3, [r7, #24]
 801655a:	330b      	adds	r3, #11
 801655c:	b2d2      	uxtb	r2, r2
 801655e:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016560:	697b      	ldr	r3, [r7, #20]
 8016562:	0c1a      	lsrs	r2, r3, #16
 8016564:	69bb      	ldr	r3, [r7, #24]
 8016566:	330c      	adds	r3, #12
 8016568:	b2d2      	uxtb	r2, r2
 801656a:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	0e1a      	lsrs	r2, r3, #24
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	330d      	adds	r3, #13
 8016574:	b2d2      	uxtb	r2, r2
 8016576:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016578:	69bb      	ldr	r3, [r7, #24]
 801657a:	330e      	adds	r3, #14
 801657c:	2200      	movs	r2, #0
 801657e:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016580:	69bb      	ldr	r3, [r7, #24]
 8016582:	330f      	adds	r3, #15
 8016584:	88fa      	ldrh	r2, [r7, #6]
 8016586:	b2d2      	uxtb	r2, r2
 8016588:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 801658a:	2300      	movs	r3, #0
}
 801658c:	4618      	mov	r0, r3
 801658e:	3708      	adds	r7, #8
 8016590:	46bd      	mov	sp, r7
 8016592:	bc90      	pop	{r4, r7}
 8016594:	4770      	bx	lr

08016596 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8016596:	b590      	push	{r4, r7, lr}
 8016598:	b08b      	sub	sp, #44	; 0x2c
 801659a:	af04      	add	r7, sp, #16
 801659c:	6078      	str	r0, [r7, #4]
 801659e:	4608      	mov	r0, r1
 80165a0:	4611      	mov	r1, r2
 80165a2:	461a      	mov	r2, r3
 80165a4:	4603      	mov	r3, r0
 80165a6:	807b      	strh	r3, [r7, #2]
 80165a8:	460b      	mov	r3, r1
 80165aa:	707b      	strb	r3, [r7, #1]
 80165ac:	4613      	mov	r3, r2
 80165ae:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d002      	beq.n	80165bc <ComputeCmacB0+0x26>
 80165b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d101      	bne.n	80165c0 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165bc:	230a      	movs	r3, #10
 80165be:	e024      	b.n	801660a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165c0:	887b      	ldrh	r3, [r7, #2]
 80165c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165c6:	d901      	bls.n	80165cc <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80165c8:	230e      	movs	r3, #14
 80165ca:	e01e      	b.n	801660a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80165cc:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80165d0:	783a      	ldrb	r2, [r7, #0]
 80165d2:	7879      	ldrb	r1, [r7, #1]
 80165d4:	8878      	ldrh	r0, [r7, #2]
 80165d6:	f107 0308 	add.w	r3, r7, #8
 80165da:	9302      	str	r3, [sp, #8]
 80165dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165de:	9301      	str	r3, [sp, #4]
 80165e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165e2:	9300      	str	r3, [sp, #0]
 80165e4:	4623      	mov	r3, r4
 80165e6:	f7ff ff6e 	bl	80164c6 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80165ea:	887a      	ldrh	r2, [r7, #2]
 80165ec:	7879      	ldrb	r1, [r7, #1]
 80165ee:	f107 0008 	add.w	r0, r7, #8
 80165f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165f4:	9300      	str	r3, [sp, #0]
 80165f6:	460b      	mov	r3, r1
 80165f8:	6879      	ldr	r1, [r7, #4]
 80165fa:	f7f8 fe43 	bl	800f284 <SecureElementComputeAesCmac>
 80165fe:	4603      	mov	r3, r0
 8016600:	2b00      	cmp	r3, #0
 8016602:	d001      	beq.n	8016608 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016604:	230f      	movs	r3, #15
 8016606:	e000      	b.n	801660a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016608:	2300      	movs	r3, #0
}
 801660a:	4618      	mov	r0, r3
 801660c:	371c      	adds	r7, #28
 801660e:	46bd      	mov	sp, r7
 8016610:	bd90      	pop	{r4, r7, pc}

08016612 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8016612:	b590      	push	{r4, r7, lr}
 8016614:	b0cd      	sub	sp, #308	; 0x134
 8016616:	af04      	add	r7, sp, #16
 8016618:	f507 7490 	add.w	r4, r7, #288	; 0x120
 801661c:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016620:	6020      	str	r0, [r4, #0]
 8016622:	460c      	mov	r4, r1
 8016624:	4610      	mov	r0, r2
 8016626:	4619      	mov	r1, r3
 8016628:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801662c:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016630:	4622      	mov	r2, r4
 8016632:	801a      	strh	r2, [r3, #0]
 8016634:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016638:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 801663c:	4602      	mov	r2, r0
 801663e:	701a      	strb	r2, [r3, #0]
 8016640:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016644:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016648:	460a      	mov	r2, r1
 801664a:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 801664c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016650:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801665a:	230a      	movs	r3, #10
 801665c:	e063      	b.n	8016726 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801665e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016662:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016666:	881b      	ldrh	r3, [r3, #0]
 8016668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801666c:	d901      	bls.n	8016672 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801666e:	230e      	movs	r3, #14
 8016670:	e059      	b.n	8016726 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 8016672:	f107 030c 	add.w	r3, r7, #12
 8016676:	f44f 7288 	mov.w	r2, #272	; 0x110
 801667a:	2100      	movs	r1, #0
 801667c:	4618      	mov	r0, r3
 801667e:	f003 fbf9 	bl	8019e74 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8016682:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 8016686:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801668a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801668e:	781a      	ldrb	r2, [r3, #0]
 8016690:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016694:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016698:	7819      	ldrb	r1, [r3, #0]
 801669a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801669e:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166a2:	8818      	ldrh	r0, [r3, #0]
 80166a4:	f107 030c 	add.w	r3, r7, #12
 80166a8:	9302      	str	r3, [sp, #8]
 80166aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166ae:	9301      	str	r3, [sp, #4]
 80166b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166b4:	9300      	str	r3, [sp, #0]
 80166b6:	4623      	mov	r3, r4
 80166b8:	f7ff ff05 	bl	80164c6 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80166bc:	f107 030c 	add.w	r3, r7, #12
 80166c0:	3310      	adds	r3, #16
 80166c2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80166c6:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80166ca:	8812      	ldrh	r2, [r2, #0]
 80166cc:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80166d0:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80166d4:	6809      	ldr	r1, [r1, #0]
 80166d6:	4618      	mov	r0, r3
 80166d8:	f003 fb91 	bl	8019dfe <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80166dc:	2306      	movs	r3, #6
 80166de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80166e2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166e6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166ea:	881b      	ldrh	r3, [r3, #0]
 80166ec:	3310      	adds	r3, #16
 80166ee:	4619      	mov	r1, r3
 80166f0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166f4:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	f107 000c 	add.w	r0, r7, #12
 80166fe:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016702:	f7f8 fdd9 	bl	800f2b8 <SecureElementVerifyAesCmac>
 8016706:	4603      	mov	r3, r0
 8016708:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801670c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016710:	2b00      	cmp	r3, #0
 8016712:	d101      	bne.n	8016718 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8016714:	2300      	movs	r3, #0
 8016716:	e006      	b.n	8016726 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016718:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 801671c:	2b01      	cmp	r3, #1
 801671e:	d101      	bne.n	8016724 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016720:	2301      	movs	r3, #1
 8016722:	e000      	b.n	8016726 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016724:	230f      	movs	r3, #15
}
 8016726:	4618      	mov	r0, r3
 8016728:	f507 7792 	add.w	r7, r7, #292	; 0x124
 801672c:	46bd      	mov	sp, r7
 801672e:	bd90      	pop	{r4, r7, pc}

08016730 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016730:	b480      	push	{r7}
 8016732:	b085      	sub	sp, #20
 8016734:	af00      	add	r7, sp, #0
 8016736:	4603      	mov	r3, r0
 8016738:	6039      	str	r1, [r7, #0]
 801673a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801673c:	2300      	movs	r3, #0
 801673e:	73fb      	strb	r3, [r7, #15]
 8016740:	e011      	b.n	8016766 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 8016742:	7bfb      	ldrb	r3, [r7, #15]
 8016744:	4a0c      	ldr	r2, [pc, #48]	; (8016778 <GetKeyAddrItem+0x48>)
 8016746:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801674a:	79fa      	ldrb	r2, [r7, #7]
 801674c:	429a      	cmp	r2, r3
 801674e:	d107      	bne.n	8016760 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016750:	7bfb      	ldrb	r3, [r7, #15]
 8016752:	009b      	lsls	r3, r3, #2
 8016754:	4a08      	ldr	r2, [pc, #32]	; (8016778 <GetKeyAddrItem+0x48>)
 8016756:	441a      	add	r2, r3
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 801675c:	2300      	movs	r3, #0
 801675e:	e006      	b.n	801676e <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016760:	7bfb      	ldrb	r3, [r7, #15]
 8016762:	3301      	adds	r3, #1
 8016764:	73fb      	strb	r3, [r7, #15]
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	2b01      	cmp	r3, #1
 801676a:	d9ea      	bls.n	8016742 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 801676c:	230c      	movs	r3, #12
}
 801676e:	4618      	mov	r0, r3
 8016770:	3714      	adds	r7, #20
 8016772:	46bd      	mov	sp, r7
 8016774:	bc80      	pop	{r7}
 8016776:	4770      	bx	lr
 8016778:	20000128 	.word	0x20000128

0801677c <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b088      	sub	sp, #32
 8016780:	af00      	add	r7, sp, #0
 8016782:	60b9      	str	r1, [r7, #8]
 8016784:	607a      	str	r2, [r7, #4]
 8016786:	461a      	mov	r2, r3
 8016788:	4603      	mov	r3, r0
 801678a:	73fb      	strb	r3, [r7, #15]
 801678c:	4613      	mov	r3, r2
 801678e:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8016790:	2300      	movs	r3, #0
 8016792:	613b      	str	r3, [r7, #16]
 8016794:	f107 0314 	add.w	r3, r7, #20
 8016798:	2200      	movs	r2, #0
 801679a:	601a      	str	r2, [r3, #0]
 801679c:	605a      	str	r2, [r3, #4]
 801679e:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	2b08      	cmp	r3, #8
 80167a4:	d002      	beq.n	80167ac <DeriveSessionKey10x+0x30>
 80167a6:	2b09      	cmp	r3, #9
 80167a8:	d003      	beq.n	80167b2 <DeriveSessionKey10x+0x36>
 80167aa:	e005      	b.n	80167b8 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80167ac:	2301      	movs	r3, #1
 80167ae:	743b      	strb	r3, [r7, #16]
            break;
 80167b0:	e004      	b.n	80167bc <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167b2:	2302      	movs	r3, #2
 80167b4:	743b      	strb	r3, [r7, #16]
            break;
 80167b6:	e001      	b.n	80167bc <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167b8:	230b      	movs	r3, #11
 80167ba:	e02a      	b.n	8016812 <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	b2db      	uxtb	r3, r3
 80167c0:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80167c2:	68bb      	ldr	r3, [r7, #8]
 80167c4:	0a1b      	lsrs	r3, r3, #8
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	0c1b      	lsrs	r3, r3, #16
 80167ce:	b2db      	uxtb	r3, r3
 80167d0:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	0a1b      	lsrs	r3, r3, #8
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	0c1b      	lsrs	r3, r3, #16
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80167e8:	89bb      	ldrh	r3, [r7, #12]
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80167ee:	89bb      	ldrh	r3, [r7, #12]
 80167f0:	0a1b      	lsrs	r3, r3, #8
 80167f2:	b29b      	uxth	r3, r3
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80167f8:	7bfa      	ldrb	r2, [r7, #15]
 80167fa:	f107 0310 	add.w	r3, r7, #16
 80167fe:	2101      	movs	r1, #1
 8016800:	4618      	mov	r0, r3
 8016802:	f7f8 fe05 	bl	800f410 <SecureElementDeriveAndStoreKey>
 8016806:	4603      	mov	r3, r0
 8016808:	2b00      	cmp	r3, #0
 801680a:	d001      	beq.n	8016810 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801680c:	230f      	movs	r3, #15
 801680e:	e000      	b.n	8016812 <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016810:	2300      	movs	r3, #0
}
 8016812:	4618      	mov	r0, r3
 8016814:	3720      	adds	r7, #32
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
	...

0801681c <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	4603      	mov	r3, r0
 8016824:	6039      	str	r1, [r7, #0]
 8016826:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d101      	bne.n	8016832 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801682e:	230a      	movs	r3, #10
 8016830:	e029      	b.n	8016886 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 8016832:	79fb      	ldrb	r3, [r7, #7]
 8016834:	3b01      	subs	r3, #1
 8016836:	2b03      	cmp	r3, #3
 8016838:	d822      	bhi.n	8016880 <GetLastFcntDown+0x64>
 801683a:	a201      	add	r2, pc, #4	; (adr r2, 8016840 <GetLastFcntDown+0x24>)
 801683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016840:	08016851 	.word	0x08016851
 8016844:	0801685d 	.word	0x0801685d
 8016848:	08016869 	.word	0x08016869
 801684c:	08016875 	.word	0x08016875
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016850:	4b0f      	ldr	r3, [pc, #60]	; (8016890 <GetLastFcntDown+0x74>)
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	691a      	ldr	r2, [r3, #16]
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	601a      	str	r2, [r3, #0]
            break;
 801685a:	e013      	b.n	8016884 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801685c:	4b0c      	ldr	r3, [pc, #48]	; (8016890 <GetLastFcntDown+0x74>)
 801685e:	681b      	ldr	r3, [r3, #0]
 8016860:	695a      	ldr	r2, [r3, #20]
 8016862:	683b      	ldr	r3, [r7, #0]
 8016864:	601a      	str	r2, [r3, #0]
            break;
 8016866:	e00d      	b.n	8016884 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016868:	4b09      	ldr	r3, [pc, #36]	; (8016890 <GetLastFcntDown+0x74>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	699a      	ldr	r2, [r3, #24]
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	601a      	str	r2, [r3, #0]
            break;
 8016872:	e007      	b.n	8016884 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8016874:	4b06      	ldr	r3, [pc, #24]	; (8016890 <GetLastFcntDown+0x74>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	69da      	ldr	r2, [r3, #28]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	601a      	str	r2, [r3, #0]
            break;
 801687e:	e001      	b.n	8016884 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016880:	2305      	movs	r3, #5
 8016882:	e000      	b.n	8016886 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	370c      	adds	r7, #12
 801688a:	46bd      	mov	sp, r7
 801688c:	bc80      	pop	{r7}
 801688e:	4770      	bx	lr
 8016890:	20001694 	.word	0x20001694

08016894 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b084      	sub	sp, #16
 8016898:	af00      	add	r7, sp, #0
 801689a:	4603      	mov	r3, r0
 801689c:	6039      	str	r1, [r7, #0]
 801689e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168a0:	2300      	movs	r3, #0
 80168a2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168a4:	f107 020c 	add.w	r2, r7, #12
 80168a8:	79fb      	ldrb	r3, [r7, #7]
 80168aa:	4611      	mov	r1, r2
 80168ac:	4618      	mov	r0, r3
 80168ae:	f7ff ffb5 	bl	801681c <GetLastFcntDown>
 80168b2:	4603      	mov	r3, r0
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d001      	beq.n	80168bc <CheckFCntDown+0x28>
    {
        return false;
 80168b8:	2300      	movs	r3, #0
 80168ba:	e00a      	b.n	80168d2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	683a      	ldr	r2, [r7, #0]
 80168c0:	429a      	cmp	r2, r3
 80168c2:	d803      	bhi.n	80168cc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80168c4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80168c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168ca:	d101      	bne.n	80168d0 <CheckFCntDown+0x3c>
    {
        return true;
 80168cc:	2301      	movs	r3, #1
 80168ce:	e000      	b.n	80168d2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80168d0:	2300      	movs	r3, #0
    }
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3710      	adds	r7, #16
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
	...

080168dc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168dc:	b480      	push	{r7}
 80168de:	b083      	sub	sp, #12
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	4603      	mov	r3, r0
 80168e4:	6039      	str	r1, [r7, #0]
 80168e6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80168e8:	79fb      	ldrb	r3, [r7, #7]
 80168ea:	3b01      	subs	r3, #1
 80168ec:	2b03      	cmp	r3, #3
 80168ee:	d82b      	bhi.n	8016948 <UpdateFCntDown+0x6c>
 80168f0:	a201      	add	r2, pc, #4	; (adr r2, 80168f8 <UpdateFCntDown+0x1c>)
 80168f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80168f6:	bf00      	nop
 80168f8:	08016909 	.word	0x08016909
 80168fc:	0801691b 	.word	0x0801691b
 8016900:	0801692d 	.word	0x0801692d
 8016904:	0801693f 	.word	0x0801693f
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016908:	4b12      	ldr	r3, [pc, #72]	; (8016954 <UpdateFCntDown+0x78>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	683a      	ldr	r2, [r7, #0]
 801690e:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016910:	4b10      	ldr	r3, [pc, #64]	; (8016954 <UpdateFCntDown+0x78>)
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	683a      	ldr	r2, [r7, #0]
 8016916:	621a      	str	r2, [r3, #32]
            break;
 8016918:	e017      	b.n	801694a <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 801691a:	4b0e      	ldr	r3, [pc, #56]	; (8016954 <UpdateFCntDown+0x78>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	683a      	ldr	r2, [r7, #0]
 8016920:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8016922:	4b0c      	ldr	r3, [pc, #48]	; (8016954 <UpdateFCntDown+0x78>)
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	683a      	ldr	r2, [r7, #0]
 8016928:	621a      	str	r2, [r3, #32]
            break;
 801692a:	e00e      	b.n	801694a <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801692c:	4b09      	ldr	r3, [pc, #36]	; (8016954 <UpdateFCntDown+0x78>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	683a      	ldr	r2, [r7, #0]
 8016932:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8016934:	4b07      	ldr	r3, [pc, #28]	; (8016954 <UpdateFCntDown+0x78>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	683a      	ldr	r2, [r7, #0]
 801693a:	621a      	str	r2, [r3, #32]
            break;
 801693c:	e005      	b.n	801694a <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 801693e:	4b05      	ldr	r3, [pc, #20]	; (8016954 <UpdateFCntDown+0x78>)
 8016940:	681b      	ldr	r3, [r3, #0]
 8016942:	683a      	ldr	r2, [r7, #0]
 8016944:	61da      	str	r2, [r3, #28]
            break;
 8016946:	e000      	b.n	801694a <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016948:	bf00      	nop
    }
}
 801694a:	bf00      	nop
 801694c:	370c      	adds	r7, #12
 801694e:	46bd      	mov	sp, r7
 8016950:	bc80      	pop	{r7}
 8016952:	4770      	bx	lr
 8016954:	20001694 	.word	0x20001694

08016958 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016958:	b480      	push	{r7}
 801695a:	b083      	sub	sp, #12
 801695c:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 801695e:	4b18      	ldr	r3, [pc, #96]	; (80169c0 <ResetFCnts+0x68>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	2200      	movs	r2, #0
 8016964:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016966:	4b16      	ldr	r3, [pc, #88]	; (80169c0 <ResetFCnts+0x68>)
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	f04f 32ff 	mov.w	r2, #4294967295
 801696e:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016970:	4b13      	ldr	r3, [pc, #76]	; (80169c0 <ResetFCnts+0x68>)
 8016972:	681b      	ldr	r3, [r3, #0]
 8016974:	f04f 32ff 	mov.w	r2, #4294967295
 8016978:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801697a:	4b11      	ldr	r3, [pc, #68]	; (80169c0 <ResetFCnts+0x68>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f04f 32ff 	mov.w	r2, #4294967295
 8016982:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8016984:	4b0e      	ldr	r3, [pc, #56]	; (80169c0 <ResetFCnts+0x68>)
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	4b0d      	ldr	r3, [pc, #52]	; (80169c0 <ResetFCnts+0x68>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	6992      	ldr	r2, [r2, #24]
 801698e:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016990:	2300      	movs	r3, #0
 8016992:	607b      	str	r3, [r7, #4]
 8016994:	e00b      	b.n	80169ae <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8016996:	4b0a      	ldr	r3, [pc, #40]	; (80169c0 <ResetFCnts+0x68>)
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	3306      	adds	r3, #6
 801699e:	009b      	lsls	r3, r3, #2
 80169a0:	4413      	add	r3, r2
 80169a2:	f04f 32ff 	mov.w	r2, #4294967295
 80169a6:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	3301      	adds	r3, #1
 80169ac:	607b      	str	r3, [r7, #4]
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	ddf0      	ble.n	8016996 <ResetFCnts+0x3e>
    }
}
 80169b4:	bf00      	nop
 80169b6:	bf00      	nop
 80169b8:	370c      	adds	r7, #12
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bc80      	pop	{r7}
 80169be:	4770      	bx	lr
 80169c0:	20001694 	.word	0x20001694

080169c4 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80169cc:	4b06      	ldr	r3, [pc, #24]	; (80169e8 <IsJoinNonce10xOk+0x24>)
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	689b      	ldr	r3, [r3, #8]
 80169d2:	687a      	ldr	r2, [r7, #4]
 80169d4:	429a      	cmp	r2, r3
 80169d6:	bf8c      	ite	hi
 80169d8:	2301      	movhi	r3, #1
 80169da:	2300      	movls	r3, #0
 80169dc:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80169de:	4618      	mov	r0, r3
 80169e0:	370c      	adds	r7, #12
 80169e2:	46bd      	mov	sp, r7
 80169e4:	bc80      	pop	{r7}
 80169e6:	4770      	bx	lr
 80169e8:	20001694 	.word	0x20001694

080169ec <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b082      	sub	sp, #8
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d101      	bne.n	80169fe <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80169fa:	2309      	movs	r3, #9
 80169fc:	e01c      	b.n	8016a38 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80169fe:	4a10      	ldr	r2, [pc, #64]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a04:	4b0e      	ldr	r3, [pc, #56]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	2228      	movs	r2, #40	; 0x28
 8016a0a:	2100      	movs	r1, #0
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	f003 fa31 	bl	8019e74 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a12:	4b0b      	ldr	r3, [pc, #44]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2201      	movs	r2, #1
 8016a18:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a1a:	4b09      	ldr	r3, [pc, #36]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	2201      	movs	r2, #1
 8016a20:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a22:	4b07      	ldr	r3, [pc, #28]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a24:	681b      	ldr	r3, [r3, #0]
 8016a26:	2201      	movs	r2, #1
 8016a28:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a2a:	4b05      	ldr	r3, [pc, #20]	; (8016a40 <LoRaMacCryptoInit+0x54>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2200      	movs	r2, #0
 8016a30:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a32:	f7ff ff91 	bl	8016958 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a36:	2300      	movs	r3, #0
}
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3708      	adds	r7, #8
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	20001694 	.word	0x20001694

08016a44 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a44:	b480      	push	{r7}
 8016a46:	b083      	sub	sp, #12
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a4c:	4b04      	ldr	r3, [pc, #16]	; (8016a60 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	687a      	ldr	r2, [r7, #4]
 8016a52:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a54:	2300      	movs	r3, #0
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	370c      	adds	r7, #12
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bc80      	pop	{r7}
 8016a5e:	4770      	bx	lr
 8016a60:	20001694 	.word	0x20001694

08016a64 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016a64:	b480      	push	{r7}
 8016a66:	b083      	sub	sp, #12
 8016a68:	af00      	add	r7, sp, #0
 8016a6a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d101      	bne.n	8016a76 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a72:	230a      	movs	r3, #10
 8016a74:	e006      	b.n	8016a84 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a76:	4b06      	ldr	r3, [pc, #24]	; (8016a90 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a78:	681b      	ldr	r3, [r3, #0]
 8016a7a:	68db      	ldr	r3, [r3, #12]
 8016a7c:	1c5a      	adds	r2, r3, #1
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a82:	2300      	movs	r3, #0
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	370c      	adds	r7, #12
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bc80      	pop	{r7}
 8016a8c:	4770      	bx	lr
 8016a8e:	bf00      	nop
 8016a90:	20001694 	.word	0x20001694

08016a94 <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016a98:	b08a      	sub	sp, #40	; 0x28
 8016a9a:	af00      	add	r7, sp, #0
 8016a9c:	613a      	str	r2, [r7, #16]
 8016a9e:	60fb      	str	r3, [r7, #12]
 8016aa0:	4603      	mov	r3, r0
 8016aa2:	75fb      	strb	r3, [r7, #23]
 8016aa4:	460b      	mov	r3, r1
 8016aa6:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016aac:	2300      	movs	r3, #0
 8016aae:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ab0:	2313      	movs	r3, #19
 8016ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016abc:	230a      	movs	r3, #10
 8016abe:	e057      	b.n	8016b70 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ac0:	f107 021c 	add.w	r2, r7, #28
 8016ac4:	7dfb      	ldrb	r3, [r7, #23]
 8016ac6:	4611      	mov	r1, r2
 8016ac8:	4618      	mov	r0, r3
 8016aca:	f7ff fea7 	bl	801681c <GetLastFcntDown>
 8016ace:	4603      	mov	r3, r0
 8016ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016ad4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d002      	beq.n	8016ae2 <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016adc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016ae0:	e046      	b.n	8016b70 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016ae2:	69fb      	ldr	r3, [r7, #28]
 8016ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ae8:	d103      	bne.n	8016af2 <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016aea:	68fb      	ldr	r3, [r7, #12]
 8016aec:	693a      	ldr	r2, [r7, #16]
 8016aee:	601a      	str	r2, [r3, #0]
 8016af0:	e01e      	b.n	8016b30 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016af2:	69fb      	ldr	r3, [r7, #28]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	693a      	ldr	r2, [r7, #16]
 8016af8:	1ad3      	subs	r3, r2, r3
 8016afa:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	dd05      	ble.n	8016b0e <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b02:	69fa      	ldr	r2, [r7, #28]
 8016b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b06:	441a      	add	r2, r3
 8016b08:	68fb      	ldr	r3, [r7, #12]
 8016b0a:	601a      	str	r2, [r3, #0]
 8016b0c:	e010      	b.n	8016b30 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d104      	bne.n	8016b1e <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b14:	69fa      	ldr	r2, [r7, #28]
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b1a:	2307      	movs	r3, #7
 8016b1c:	e028      	b.n	8016b70 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b1e:	69fb      	ldr	r3, [r7, #28]
 8016b20:	0c1b      	lsrs	r3, r3, #16
 8016b22:	041b      	lsls	r3, r3, #16
 8016b24:	693a      	ldr	r2, [r7, #16]
 8016b26:	4413      	add	r3, r2
 8016b28:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b30:	4b12      	ldr	r3, [pc, #72]	; (8016b7c <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	789b      	ldrb	r3, [r3, #2]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d119      	bne.n	8016b6e <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b3a:	68fb      	ldr	r3, [r7, #12]
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2200      	movs	r2, #0
 8016b40:	603b      	str	r3, [r7, #0]
 8016b42:	607a      	str	r2, [r7, #4]
 8016b44:	69fb      	ldr	r3, [r7, #28]
 8016b46:	2200      	movs	r2, #0
 8016b48:	469a      	mov	sl, r3
 8016b4a:	4693      	mov	fp, r2
 8016b4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b50:	4611      	mov	r1, r2
 8016b52:	ebb1 040a 	subs.w	r4, r1, sl
 8016b56:	eb63 050b 	sbc.w	r5, r3, fp
 8016b5a:	8abb      	ldrh	r3, [r7, #20]
 8016b5c:	2200      	movs	r2, #0
 8016b5e:	4698      	mov	r8, r3
 8016b60:	4691      	mov	r9, r2
 8016b62:	4544      	cmp	r4, r8
 8016b64:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b68:	db01      	blt.n	8016b6e <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b6a:	2308      	movs	r3, #8
 8016b6c:	e000      	b.n	8016b70 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b6e:	2300      	movs	r3, #0
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	3728      	adds	r7, #40	; 0x28
 8016b74:	46bd      	mov	sp, r7
 8016b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b7a:	bf00      	nop
 8016b7c:	20001694 	.word	0x20001694

08016b80 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016b80:	b480      	push	{r7}
 8016b82:	b085      	sub	sp, #20
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d101      	bne.n	8016b92 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016b8e:	230a      	movs	r3, #10
 8016b90:	e019      	b.n	8016bc6 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016b92:	2300      	movs	r3, #0
 8016b94:	60fb      	str	r3, [r7, #12]
 8016b96:	e012      	b.n	8016bbe <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016b98:	4b0d      	ldr	r3, [pc, #52]	; (8016bd0 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016b9a:	6819      	ldr	r1, [r3, #0]
 8016b9c:	68fa      	ldr	r2, [r7, #12]
 8016b9e:	4613      	mov	r3, r2
 8016ba0:	005b      	lsls	r3, r3, #1
 8016ba2:	4413      	add	r3, r2
 8016ba4:	011b      	lsls	r3, r3, #4
 8016ba6:	461a      	mov	r2, r3
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	4413      	add	r3, r2
 8016bac:	68fa      	ldr	r2, [r7, #12]
 8016bae:	3206      	adds	r2, #6
 8016bb0:	0092      	lsls	r2, r2, #2
 8016bb2:	440a      	add	r2, r1
 8016bb4:	3204      	adds	r2, #4
 8016bb6:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	3301      	adds	r3, #1
 8016bbc:	60fb      	str	r3, [r7, #12]
 8016bbe:	68fb      	ldr	r3, [r7, #12]
 8016bc0:	2b00      	cmp	r3, #0
 8016bc2:	dde9      	ble.n	8016b98 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bc4:	2300      	movs	r3, #0
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	3714      	adds	r7, #20
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bc80      	pop	{r7}
 8016bce:	4770      	bx	lr
 8016bd0:	20001694 	.word	0x20001694

08016bd4 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b082      	sub	sp, #8
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	4603      	mov	r3, r0
 8016bdc:	6039      	str	r1, [r7, #0]
 8016bde:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016be0:	79fb      	ldrb	r3, [r7, #7]
 8016be2:	6839      	ldr	r1, [r7, #0]
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f8 faef 	bl	800f1c8 <SecureElementSetKey>
 8016bea:	4603      	mov	r3, r0
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d001      	beq.n	8016bf4 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016bf0:	230f      	movs	r3, #15
 8016bf2:	e021      	b.n	8016c38 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016bf4:	79fb      	ldrb	r3, [r7, #7]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d11d      	bne.n	8016c36 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016bfa:	4b11      	ldr	r3, [pc, #68]	; (8016c40 <LoRaMacCryptoSetKey+0x6c>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	789b      	ldrb	r3, [r3, #2]
 8016c00:	210b      	movs	r1, #11
 8016c02:	4618      	mov	r0, r3
 8016c04:	f000 fa5e 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c08:	4603      	mov	r3, r0
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d001      	beq.n	8016c12 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c0e:	230f      	movs	r3, #15
 8016c10:	e012      	b.n	8016c38 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c12:	210c      	movs	r1, #12
 8016c14:	2000      	movs	r0, #0
 8016c16:	f000 fa55 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c1a:	4603      	mov	r3, r0
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	d001      	beq.n	8016c24 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c20:	230f      	movs	r3, #15
 8016c22:	e009      	b.n	8016c38 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c24:	210a      	movs	r1, #10
 8016c26:	2000      	movs	r0, #0
 8016c28:	f000 fa4c 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	2b00      	cmp	r3, #0
 8016c30:	d001      	beq.n	8016c36 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c32:	230f      	movs	r3, #15
 8016c34:	e000      	b.n	8016c38 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c36:	2300      	movs	r3, #0
}
 8016c38:	4618      	mov	r0, r3
 8016c3a:	3708      	adds	r7, #8
 8016c3c:	46bd      	mov	sp, r7
 8016c3e:	bd80      	pop	{r7, pc}
 8016c40:	20001694 	.word	0x20001694

08016c44 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b086      	sub	sp, #24
 8016c48:	af02      	add	r7, sp, #8
 8016c4a:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	2b00      	cmp	r3, #0
 8016c50:	d101      	bne.n	8016c56 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c52:	230a      	movs	r3, #10
 8016c54:	e033      	b.n	8016cbe <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c56:	2301      	movs	r3, #1
 8016c58:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c5a:	2300      	movs	r3, #0
 8016c5c:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c5e:	f107 0308 	add.w	r3, r7, #8
 8016c62:	4618      	mov	r0, r3
 8016c64:	f7f8 fc8a 	bl	800f57c <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c68:	68ba      	ldr	r2, [r7, #8]
 8016c6a:	4b17      	ldr	r3, [pc, #92]	; (8016cc8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	b292      	uxth	r2, r2
 8016c70:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c72:	4b15      	ldr	r3, [pc, #84]	; (8016cc8 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	889a      	ldrh	r2, [r3, #4]
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c7c:	6878      	ldr	r0, [r7, #4]
 8016c7e:	f000 fc1b 	bl	80174b8 <LoRaMacSerializerJoinRequest>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d001      	beq.n	8016c8c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016c88:	2311      	movs	r3, #17
 8016c8a:	e018      	b.n	8016cbe <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	6819      	ldr	r1, [r3, #0]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	3318      	adds	r3, #24
 8016c94:	7bfa      	ldrb	r2, [r7, #15]
 8016c96:	9300      	str	r3, [sp, #0]
 8016c98:	4613      	mov	r3, r2
 8016c9a:	2213      	movs	r2, #19
 8016c9c:	2000      	movs	r0, #0
 8016c9e:	f7f8 faf1 	bl	800f284 <SecureElementComputeAesCmac>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d001      	beq.n	8016cac <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016ca8:	230f      	movs	r3, #15
 8016caa:	e008      	b.n	8016cbe <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cac:	6878      	ldr	r0, [r7, #4]
 8016cae:	f000 fc03 	bl	80174b8 <LoRaMacSerializerJoinRequest>
 8016cb2:	4603      	mov	r3, r0
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d001      	beq.n	8016cbc <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cb8:	2311      	movs	r3, #17
 8016cba:	e000      	b.n	8016cbe <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cbc:	2300      	movs	r3, #0
}
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	3710      	adds	r7, #16
 8016cc2:	46bd      	mov	sp, r7
 8016cc4:	bd80      	pop	{r7, pc}
 8016cc6:	bf00      	nop
 8016cc8:	20001694 	.word	0x20001694

08016ccc <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016ccc:	b590      	push	{r4, r7, lr}
 8016cce:	b097      	sub	sp, #92	; 0x5c
 8016cd0:	af04      	add	r7, sp, #16
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	607a      	str	r2, [r7, #4]
 8016cd8:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d002      	beq.n	8016ce6 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d101      	bne.n	8016cea <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ce6:	230a      	movs	r3, #10
 8016ce8:	e0d3      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016cea:	2313      	movs	r3, #19
 8016cec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016cf0:	2300      	movs	r3, #0
 8016cf2:	617b      	str	r3, [r7, #20]
 8016cf4:	f107 0318 	add.w	r3, r7, #24
 8016cf8:	221d      	movs	r2, #29
 8016cfa:	2100      	movs	r1, #0
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f007 fe9b 	bl	801ea38 <memset>
    uint8_t versionMinor         = 0;
 8016d02:	2300      	movs	r3, #0
 8016d04:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d06:	4b65      	ldr	r3, [pc, #404]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	889b      	ldrh	r3, [r3, #4]
 8016d0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d10:	687b      	ldr	r3, [r7, #4]
 8016d12:	681c      	ldr	r4, [r3, #0]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	791b      	ldrb	r3, [r3, #4]
 8016d18:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d1c:	7bf8      	ldrb	r0, [r7, #15]
 8016d1e:	f107 0213 	add.w	r2, r7, #19
 8016d22:	9202      	str	r2, [sp, #8]
 8016d24:	f107 0214 	add.w	r2, r7, #20
 8016d28:	9201      	str	r2, [sp, #4]
 8016d2a:	9300      	str	r3, [sp, #0]
 8016d2c:	4623      	mov	r3, r4
 8016d2e:	460a      	mov	r2, r1
 8016d30:	68b9      	ldr	r1, [r7, #8]
 8016d32:	f7f8 fbad 	bl	800f490 <SecureElementProcessJoinAccept>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d001      	beq.n	8016d40 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d3c:	230f      	movs	r3, #15
 8016d3e:	e0a8      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6818      	ldr	r0, [r3, #0]
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	791b      	ldrb	r3, [r3, #4]
 8016d48:	b29a      	uxth	r2, r3
 8016d4a:	f107 0314 	add.w	r3, r7, #20
 8016d4e:	4619      	mov	r1, r3
 8016d50:	f003 f855 	bl	8019dfe <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d54:	6878      	ldr	r0, [r7, #4]
 8016d56:	f000 f9f0 	bl	801713a <LoRaMacParserJoinAccept>
 8016d5a:	4603      	mov	r3, r0
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d001      	beq.n	8016d64 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d60:	2310      	movs	r3, #16
 8016d62:	e096      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016d64:	2300      	movs	r3, #0
 8016d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	799b      	ldrb	r3, [r3, #6]
 8016d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	79db      	ldrb	r3, [r3, #7]
 8016d74:	021b      	lsls	r3, r3, #8
 8016d76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d78:	4313      	orrs	r3, r2
 8016d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	7a1b      	ldrb	r3, [r3, #8]
 8016d80:	041b      	lsls	r3, r3, #16
 8016d82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d84:	4313      	orrs	r3, r2
 8016d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016d88:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016d8a:	f7ff fe1b 	bl	80169c4 <IsJoinNonce10xOk>
 8016d8e:	4603      	mov	r3, r0
 8016d90:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016d94:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016d98:	2b00      	cmp	r3, #0
 8016d9a:	d010      	beq.n	8016dbe <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016d9c:	4b3f      	ldr	r3, [pc, #252]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016da2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016da4:	7cfb      	ldrb	r3, [r7, #19]
 8016da6:	210b      	movs	r1, #11
 8016da8:	4618      	mov	r0, r3
 8016daa:	f000 f98b 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016dae:	4603      	mov	r3, r0
 8016db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d005      	beq.n	8016dc8 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016dbc:	e001      	b.n	8016dc2 <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016dbe:	2303      	movs	r3, #3
 8016dc0:	e067      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016dc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dc6:	e064      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016dc8:	210c      	movs	r1, #12
 8016dca:	2000      	movs	r0, #0
 8016dcc:	f000 f97a 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dd6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d002      	beq.n	8016de4 <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016dde:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016de2:	e056      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016de4:	210a      	movs	r1, #10
 8016de6:	2000      	movs	r0, #0
 8016de8:	f000 f96c 	bl	80170c4 <LoRaMacCryptoDeriveLifeTimeKey>
 8016dec:	4603      	mov	r3, r0
 8016dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016df2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d002      	beq.n	8016e00 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016dfa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dfe:	e048      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	7a5b      	ldrb	r3, [r3, #9]
 8016e04:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	7a9b      	ldrb	r3, [r3, #10]
 8016e0a:	021b      	lsls	r3, r3, #8
 8016e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e0e:	4313      	orrs	r3, r2
 8016e10:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	7adb      	ldrb	r3, [r3, #11]
 8016e16:	041b      	lsls	r3, r3, #16
 8016e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e1a:	4313      	orrs	r3, r2
 8016e1c:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e1e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e26:	2009      	movs	r0, #9
 8016e28:	f7ff fca8 	bl	801677c <DeriveSessionKey10x>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d002      	beq.n	8016e40 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016e3a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e3e:	e028      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e48:	2008      	movs	r0, #8
 8016e4a:	f7ff fc97 	bl	801677c <DeriveSessionKey10x>
 8016e4e:	4603      	mov	r3, r0
 8016e50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d002      	beq.n	8016e62 <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016e5c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e60:	e017      	b.n	8016e92 <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e62:	4b0e      	ldr	r3, [pc, #56]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	7cfa      	ldrb	r2, [r7, #19]
 8016e68:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e6a:	4b0c      	ldr	r3, [pc, #48]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2200      	movs	r2, #0
 8016e70:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e72:	4b0a      	ldr	r3, [pc, #40]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	f04f 32ff 	mov.w	r2, #4294967295
 8016e7a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e7c:	4b07      	ldr	r3, [pc, #28]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f04f 32ff 	mov.w	r2, #4294967295
 8016e84:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e86:	4b05      	ldr	r3, [pc, #20]	; (8016e9c <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e8e:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016e90:	2300      	movs	r3, #0
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	374c      	adds	r7, #76	; 0x4c
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd90      	pop	{r4, r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	20001694 	.word	0x20001694

08016ea0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016ea0:	b590      	push	{r4, r7, lr}
 8016ea2:	b08b      	sub	sp, #44	; 0x2c
 8016ea4:	af04      	add	r7, sp, #16
 8016ea6:	60f8      	str	r0, [r7, #12]
 8016ea8:	607b      	str	r3, [r7, #4]
 8016eaa:	460b      	mov	r3, r1
 8016eac:	72fb      	strb	r3, [r7, #11]
 8016eae:	4613      	mov	r3, r2
 8016eb0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016eb2:	2313      	movs	r3, #19
 8016eb4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016eb6:	2309      	movs	r3, #9
 8016eb8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d101      	bne.n	8016ec4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ec0:	230a      	movs	r3, #10
 8016ec2:	e05f      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016ec4:	4b31      	ldr	r3, [pc, #196]	; (8016f8c <LoRaMacCryptoSecureMessage+0xec>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	68db      	ldr	r3, [r3, #12]
 8016eca:	68fa      	ldr	r2, [r7, #12]
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d201      	bcs.n	8016ed4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016ed0:	2306      	movs	r3, #6
 8016ed2:	e057      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d101      	bne.n	8016ee2 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016ede:	2308      	movs	r3, #8
 8016ee0:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016ee2:	4b2a      	ldr	r3, [pc, #168]	; (8016f8c <LoRaMacCryptoSecureMessage+0xec>)
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	68db      	ldr	r3, [r3, #12]
 8016ee8:	68fa      	ldr	r2, [r7, #12]
 8016eea:	429a      	cmp	r2, r3
 8016eec:	d916      	bls.n	8016f1c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016ef8:	b219      	sxth	r1, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	689c      	ldr	r4, [r3, #8]
 8016efe:	7dfa      	ldrb	r2, [r7, #23]
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	9301      	str	r3, [sp, #4]
 8016f04:	2300      	movs	r3, #0
 8016f06:	9300      	str	r3, [sp, #0]
 8016f08:	4623      	mov	r3, r4
 8016f0a:	f7ff fa43 	bl	8016394 <PayloadEncrypt>
 8016f0e:	4603      	mov	r3, r0
 8016f10:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f12:	7dbb      	ldrb	r3, [r7, #22]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d001      	beq.n	8016f1c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f18:	7dbb      	ldrb	r3, [r7, #22]
 8016f1a:	e033      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f1c:	6878      	ldr	r0, [r7, #4]
 8016f1e:	f000 fb4d 	bl	80175bc <LoRaMacSerializerData>
 8016f22:	4603      	mov	r3, r0
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d001      	beq.n	8016f2c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f28:	2311      	movs	r3, #17
 8016f2a:	e02b      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f2c:	2308      	movs	r3, #8
 8016f2e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	6818      	ldr	r0, [r3, #0]
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	791b      	ldrb	r3, [r3, #4]
 8016f38:	b29b      	uxth	r3, r3
 8016f3a:	3b04      	subs	r3, #4
 8016f3c:	b299      	uxth	r1, r3
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	689b      	ldr	r3, [r3, #8]
 8016f42:	687a      	ldr	r2, [r7, #4]
 8016f44:	322c      	adds	r2, #44	; 0x2c
 8016f46:	7dfc      	ldrb	r4, [r7, #23]
 8016f48:	9203      	str	r2, [sp, #12]
 8016f4a:	68fa      	ldr	r2, [r7, #12]
 8016f4c:	9202      	str	r2, [sp, #8]
 8016f4e:	9301      	str	r3, [sp, #4]
 8016f50:	2300      	movs	r3, #0
 8016f52:	9300      	str	r3, [sp, #0]
 8016f54:	2300      	movs	r3, #0
 8016f56:	4622      	mov	r2, r4
 8016f58:	f7ff fb1d 	bl	8016596 <ComputeCmacB0>
 8016f5c:	4603      	mov	r3, r0
 8016f5e:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f60:	7dbb      	ldrb	r3, [r7, #22]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d001      	beq.n	8016f6a <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f66:	7dbb      	ldrb	r3, [r7, #22]
 8016f68:	e00c      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f6a:	6878      	ldr	r0, [r7, #4]
 8016f6c:	f000 fb26 	bl	80175bc <LoRaMacSerializerData>
 8016f70:	4603      	mov	r3, r0
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d001      	beq.n	8016f7a <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f76:	2311      	movs	r3, #17
 8016f78:	e004      	b.n	8016f84 <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f7a:	4b04      	ldr	r3, [pc, #16]	; (8016f8c <LoRaMacCryptoSecureMessage+0xec>)
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	68fa      	ldr	r2, [r7, #12]
 8016f80:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f82:	2300      	movs	r3, #0
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	371c      	adds	r7, #28
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	bd90      	pop	{r4, r7, pc}
 8016f8c:	20001694 	.word	0x20001694

08016f90 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016f90:	b590      	push	{r4, r7, lr}
 8016f92:	b08b      	sub	sp, #44	; 0x2c
 8016f94:	af04      	add	r7, sp, #16
 8016f96:	60b9      	str	r1, [r7, #8]
 8016f98:	607b      	str	r3, [r7, #4]
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	73fb      	strb	r3, [r7, #15]
 8016f9e:	4613      	mov	r3, r2
 8016fa0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d101      	bne.n	8016fac <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fa8:	230a      	movs	r3, #10
 8016faa:	e084      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016fac:	7bbb      	ldrb	r3, [r7, #14]
 8016fae:	6879      	ldr	r1, [r7, #4]
 8016fb0:	4618      	mov	r0, r3
 8016fb2:	f7ff fc6f 	bl	8016894 <CheckFCntDown>
 8016fb6:	4603      	mov	r3, r0
 8016fb8:	f083 0301 	eor.w	r3, r3, #1
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d001      	beq.n	8016fc6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016fc2:	2306      	movs	r3, #6
 8016fc4:	e077      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016fc6:	2313      	movs	r3, #19
 8016fc8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016fca:	2309      	movs	r3, #9
 8016fcc:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016fce:	2308      	movs	r3, #8
 8016fd0:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fd4:	f000 f97c 	bl	80172d0 <LoRaMacParserData>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d001      	beq.n	8016fe2 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016fde:	2310      	movs	r3, #16
 8016fe0:	e069      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016fe2:	f107 0210 	add.w	r2, r7, #16
 8016fe6:	7bfb      	ldrb	r3, [r7, #15]
 8016fe8:	4611      	mov	r1, r2
 8016fea:	4618      	mov	r0, r3
 8016fec:	f7ff fba0 	bl	8016730 <GetKeyAddrItem>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016ff4:	7d7b      	ldrb	r3, [r7, #21]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d001      	beq.n	8016ffe <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8016ffa:	7d7b      	ldrb	r3, [r7, #21]
 8016ffc:	e05b      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8016ffe:	693b      	ldr	r3, [r7, #16]
 8017000:	785b      	ldrb	r3, [r3, #1]
 8017002:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8017004:	693b      	ldr	r3, [r7, #16]
 8017006:	789b      	ldrb	r3, [r3, #2]
 8017008:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 801700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801700c:	689b      	ldr	r3, [r3, #8]
 801700e:	68ba      	ldr	r2, [r7, #8]
 8017010:	429a      	cmp	r2, r3
 8017012:	d001      	beq.n	8017018 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8017014:	2302      	movs	r3, #2
 8017016:	e04e      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8017018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701a:	7b1b      	ldrb	r3, [r3, #12]
 801701c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017020:	b2db      	uxtb	r3, r3
 8017022:	2b00      	cmp	r3, #0
 8017024:	bf14      	ite	ne
 8017026:	2301      	movne	r3, #1
 8017028:	2300      	moveq	r3, #0
 801702a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 801702c:	4b24      	ldr	r3, [pc, #144]	; (80170c0 <LoRaMacCryptoUnsecureMessage+0x130>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	789b      	ldrb	r3, [r3, #2]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d101      	bne.n	801703a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8017036:	2300      	movs	r3, #0
 8017038:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 801703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801703c:	6818      	ldr	r0, [r3, #0]
 801703e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017040:	791b      	ldrb	r3, [r3, #4]
 8017042:	b29b      	uxth	r3, r3
 8017044:	3b04      	subs	r3, #4
 8017046:	b299      	uxth	r1, r3
 8017048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801704c:	7dbc      	ldrb	r4, [r7, #22]
 801704e:	7d3a      	ldrb	r2, [r7, #20]
 8017050:	9303      	str	r3, [sp, #12]
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	9302      	str	r3, [sp, #8]
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	9301      	str	r3, [sp, #4]
 801705a:	2301      	movs	r3, #1
 801705c:	9300      	str	r3, [sp, #0]
 801705e:	4623      	mov	r3, r4
 8017060:	f7ff fad7 	bl	8016612 <VerifyCmacB0>
 8017064:	4603      	mov	r3, r0
 8017066:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017068:	7d7b      	ldrb	r3, [r7, #21]
 801706a:	2b00      	cmp	r3, #0
 801706c:	d001      	beq.n	8017072 <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 801706e:	7d7b      	ldrb	r3, [r7, #21]
 8017070:	e021      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8017072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017074:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d101      	bne.n	8017080 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 801707c:	2308      	movs	r3, #8
 801707e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017082:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017086:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801708a:	b219      	sxth	r1, r3
 801708c:	7dfa      	ldrb	r2, [r7, #23]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	9301      	str	r3, [sp, #4]
 8017092:	2301      	movs	r3, #1
 8017094:	9300      	str	r3, [sp, #0]
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	f7ff f97c 	bl	8016394 <PayloadEncrypt>
 801709c:	4603      	mov	r3, r0
 801709e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170a0:	7d7b      	ldrb	r3, [r7, #21]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d001      	beq.n	80170aa <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170a6:	7d7b      	ldrb	r3, [r7, #21]
 80170a8:	e005      	b.n	80170b6 <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80170aa:	7bbb      	ldrb	r3, [r7, #14]
 80170ac:	6879      	ldr	r1, [r7, #4]
 80170ae:	4618      	mov	r0, r3
 80170b0:	f7ff fc14 	bl	80168dc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170b4:	2300      	movs	r3, #0
}
 80170b6:	4618      	mov	r0, r3
 80170b8:	371c      	adds	r7, #28
 80170ba:	46bd      	mov	sp, r7
 80170bc:	bd90      	pop	{r4, r7, pc}
 80170be:	bf00      	nop
 80170c0:	20001694 	.word	0x20001694

080170c4 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b088      	sub	sp, #32
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	4603      	mov	r3, r0
 80170cc:	460a      	mov	r2, r1
 80170ce:	71fb      	strb	r3, [r7, #7]
 80170d0:	4613      	mov	r3, r2
 80170d2:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80170d4:	2300      	movs	r3, #0
 80170d6:	60fb      	str	r3, [r7, #12]
 80170d8:	f107 0310 	add.w	r3, r7, #16
 80170dc:	2200      	movs	r2, #0
 80170de:	601a      	str	r2, [r3, #0]
 80170e0:	605a      	str	r2, [r3, #4]
 80170e2:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80170e4:	2300      	movs	r3, #0
 80170e6:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80170e8:	79bb      	ldrb	r3, [r7, #6]
 80170ea:	2b0c      	cmp	r3, #12
 80170ec:	d00b      	beq.n	8017106 <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 80170ee:	2b0c      	cmp	r3, #12
 80170f0:	dc0f      	bgt.n	8017112 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 80170f2:	2b0a      	cmp	r3, #10
 80170f4:	d00a      	beq.n	801710c <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 80170f6:	2b0b      	cmp	r3, #11
 80170f8:	d10b      	bne.n	8017112 <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80170fa:	79fb      	ldrb	r3, [r7, #7]
 80170fc:	2b01      	cmp	r3, #1
 80170fe:	d10a      	bne.n	8017116 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017100:	2320      	movs	r3, #32
 8017102:	733b      	strb	r3, [r7, #12]
            }
            break;
 8017104:	e007      	b.n	8017116 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8017106:	230b      	movs	r3, #11
 8017108:	77fb      	strb	r3, [r7, #31]
            break;
 801710a:	e005      	b.n	8017118 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 801710c:	2330      	movs	r3, #48	; 0x30
 801710e:	733b      	strb	r3, [r7, #12]
            break;
 8017110:	e002      	b.n	8017118 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8017112:	230b      	movs	r3, #11
 8017114:	e00d      	b.n	8017132 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 8017116:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8017118:	79ba      	ldrb	r2, [r7, #6]
 801711a:	7ff9      	ldrb	r1, [r7, #31]
 801711c:	f107 030c 	add.w	r3, r7, #12
 8017120:	4618      	mov	r0, r3
 8017122:	f7f8 f975 	bl	800f410 <SecureElementDeriveAndStoreKey>
 8017126:	4603      	mov	r3, r0
 8017128:	2b00      	cmp	r3, #0
 801712a:	d001      	beq.n	8017130 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801712c:	230f      	movs	r3, #15
 801712e:	e000      	b.n	8017132 <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017130:	2300      	movs	r3, #0
}
 8017132:	4618      	mov	r0, r3
 8017134:	3720      	adds	r7, #32
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}

0801713a <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801713a:	b580      	push	{r7, lr}
 801713c:	b084      	sub	sp, #16
 801713e:	af00      	add	r7, sp, #0
 8017140:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d003      	beq.n	8017150 <LoRaMacParserJoinAccept+0x16>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d101      	bne.n	8017154 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017150:	2302      	movs	r3, #2
 8017152:	e0b9      	b.n	80172c8 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8017154:	2300      	movs	r3, #0
 8017156:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	681a      	ldr	r2, [r3, #0]
 801715c:	89fb      	ldrh	r3, [r7, #14]
 801715e:	1c59      	adds	r1, r3, #1
 8017160:	81f9      	strh	r1, [r7, #14]
 8017162:	4413      	add	r3, r2
 8017164:	781a      	ldrb	r2, [r3, #0]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	1d98      	adds	r0, r3, #6
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	89fb      	ldrh	r3, [r7, #14]
 8017174:	4413      	add	r3, r2
 8017176:	2203      	movs	r2, #3
 8017178:	4619      	mov	r1, r3
 801717a:	f002 fe40 	bl	8019dfe <memcpy1>
    bufItr = bufItr + 3;
 801717e:	89fb      	ldrh	r3, [r7, #14]
 8017180:	3303      	adds	r3, #3
 8017182:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	f103 0009 	add.w	r0, r3, #9
 801718a:	687b      	ldr	r3, [r7, #4]
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	89fb      	ldrh	r3, [r7, #14]
 8017190:	4413      	add	r3, r2
 8017192:	2203      	movs	r2, #3
 8017194:	4619      	mov	r1, r3
 8017196:	f002 fe32 	bl	8019dfe <memcpy1>
    bufItr = bufItr + 3;
 801719a:	89fb      	ldrh	r3, [r7, #14]
 801719c:	3303      	adds	r3, #3
 801719e:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681a      	ldr	r2, [r3, #0]
 80171a4:	89fb      	ldrh	r3, [r7, #14]
 80171a6:	1c59      	adds	r1, r3, #1
 80171a8:	81f9      	strh	r1, [r7, #14]
 80171aa:	4413      	add	r3, r2
 80171ac:	781b      	ldrb	r3, [r3, #0]
 80171ae:	461a      	mov	r2, r3
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	89fb      	ldrh	r3, [r7, #14]
 80171ba:	1c59      	adds	r1, r3, #1
 80171bc:	81f9      	strh	r1, [r7, #14]
 80171be:	4413      	add	r3, r2
 80171c0:	781b      	ldrb	r3, [r3, #0]
 80171c2:	021a      	lsls	r2, r3, #8
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	431a      	orrs	r2, r3
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80171ce:	687b      	ldr	r3, [r7, #4]
 80171d0:	681a      	ldr	r2, [r3, #0]
 80171d2:	89fb      	ldrh	r3, [r7, #14]
 80171d4:	1c59      	adds	r1, r3, #1
 80171d6:	81f9      	strh	r1, [r7, #14]
 80171d8:	4413      	add	r3, r2
 80171da:	781b      	ldrb	r3, [r3, #0]
 80171dc:	041a      	lsls	r2, r3, #16
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	68db      	ldr	r3, [r3, #12]
 80171e2:	431a      	orrs	r2, r3
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681a      	ldr	r2, [r3, #0]
 80171ec:	89fb      	ldrh	r3, [r7, #14]
 80171ee:	1c59      	adds	r1, r3, #1
 80171f0:	81f9      	strh	r1, [r7, #14]
 80171f2:	4413      	add	r3, r2
 80171f4:	781b      	ldrb	r3, [r3, #0]
 80171f6:	061a      	lsls	r2, r3, #24
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	68db      	ldr	r3, [r3, #12]
 80171fc:	431a      	orrs	r2, r3
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	681a      	ldr	r2, [r3, #0]
 8017206:	89fb      	ldrh	r3, [r7, #14]
 8017208:	1c59      	adds	r1, r3, #1
 801720a:	81f9      	strh	r1, [r7, #14]
 801720c:	4413      	add	r3, r2
 801720e:	781a      	ldrb	r2, [r3, #0]
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681a      	ldr	r2, [r3, #0]
 8017218:	89fb      	ldrh	r3, [r7, #14]
 801721a:	1c59      	adds	r1, r3, #1
 801721c:	81f9      	strh	r1, [r7, #14]
 801721e:	4413      	add	r3, r2
 8017220:	781a      	ldrb	r2, [r3, #0]
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	791b      	ldrb	r3, [r3, #4]
 801722a:	1f1a      	subs	r2, r3, #4
 801722c:	89fb      	ldrh	r3, [r7, #14]
 801722e:	1ad3      	subs	r3, r2, r3
 8017230:	2b10      	cmp	r3, #16
 8017232:	d10e      	bne.n	8017252 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f103 0012 	add.w	r0, r3, #18
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681a      	ldr	r2, [r3, #0]
 801723e:	89fb      	ldrh	r3, [r7, #14]
 8017240:	4413      	add	r3, r2
 8017242:	2210      	movs	r2, #16
 8017244:	4619      	mov	r1, r3
 8017246:	f002 fdda 	bl	8019dfe <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801724a:	89fb      	ldrh	r3, [r7, #14]
 801724c:	3310      	adds	r3, #16
 801724e:	81fb      	strh	r3, [r7, #14]
 8017250:	e008      	b.n	8017264 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	791b      	ldrb	r3, [r3, #4]
 8017256:	1f1a      	subs	r2, r3, #4
 8017258:	89fb      	ldrh	r3, [r7, #14]
 801725a:	1ad3      	subs	r3, r2, r3
 801725c:	2b00      	cmp	r3, #0
 801725e:	dd01      	ble.n	8017264 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017260:	2301      	movs	r3, #1
 8017262:	e031      	b.n	80172c8 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	681a      	ldr	r2, [r3, #0]
 8017268:	89fb      	ldrh	r3, [r7, #14]
 801726a:	1c59      	adds	r1, r3, #1
 801726c:	81f9      	strh	r1, [r7, #14]
 801726e:	4413      	add	r3, r2
 8017270:	781b      	ldrb	r3, [r3, #0]
 8017272:	461a      	mov	r2, r3
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	681a      	ldr	r2, [r3, #0]
 801727c:	89fb      	ldrh	r3, [r7, #14]
 801727e:	1c59      	adds	r1, r3, #1
 8017280:	81f9      	strh	r1, [r7, #14]
 8017282:	4413      	add	r3, r2
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	021a      	lsls	r2, r3, #8
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801728c:	431a      	orrs	r2, r3
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	681a      	ldr	r2, [r3, #0]
 8017296:	89fb      	ldrh	r3, [r7, #14]
 8017298:	1c59      	adds	r1, r3, #1
 801729a:	81f9      	strh	r1, [r7, #14]
 801729c:	4413      	add	r3, r2
 801729e:	781b      	ldrb	r3, [r3, #0]
 80172a0:	041a      	lsls	r2, r3, #16
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172a6:	431a      	orrs	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	681a      	ldr	r2, [r3, #0]
 80172b0:	89fb      	ldrh	r3, [r7, #14]
 80172b2:	1c59      	adds	r1, r3, #1
 80172b4:	81f9      	strh	r1, [r7, #14]
 80172b6:	4413      	add	r3, r2
 80172b8:	781b      	ldrb	r3, [r3, #0]
 80172ba:	061a      	lsls	r2, r3, #24
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172c0:	431a      	orrs	r2, r3
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172c6:	2300      	movs	r3, #0
}
 80172c8:	4618      	mov	r0, r3
 80172ca:	3710      	adds	r7, #16
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}

080172d0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80172d0:	b580      	push	{r7, lr}
 80172d2:	b084      	sub	sp, #16
 80172d4:	af00      	add	r7, sp, #0
 80172d6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d003      	beq.n	80172e6 <LoRaMacParserData+0x16>
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d101      	bne.n	80172ea <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80172e6:	2302      	movs	r3, #2
 80172e8:	e0e2      	b.n	80174b0 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 80172ea:	2300      	movs	r3, #0
 80172ec:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	681a      	ldr	r2, [r3, #0]
 80172f2:	89fb      	ldrh	r3, [r7, #14]
 80172f4:	1c59      	adds	r1, r3, #1
 80172f6:	81f9      	strh	r1, [r7, #14]
 80172f8:	4413      	add	r3, r2
 80172fa:	781a      	ldrb	r2, [r3, #0]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	681a      	ldr	r2, [r3, #0]
 8017304:	89fb      	ldrh	r3, [r7, #14]
 8017306:	1c59      	adds	r1, r3, #1
 8017308:	81f9      	strh	r1, [r7, #14]
 801730a:	4413      	add	r3, r2
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	461a      	mov	r2, r3
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	89fb      	ldrh	r3, [r7, #14]
 801731a:	1c59      	adds	r1, r3, #1
 801731c:	81f9      	strh	r1, [r7, #14]
 801731e:	4413      	add	r3, r2
 8017320:	781b      	ldrb	r3, [r3, #0]
 8017322:	021a      	lsls	r2, r3, #8
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	689b      	ldr	r3, [r3, #8]
 8017328:	431a      	orrs	r2, r3
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 801732e:	687b      	ldr	r3, [r7, #4]
 8017330:	681a      	ldr	r2, [r3, #0]
 8017332:	89fb      	ldrh	r3, [r7, #14]
 8017334:	1c59      	adds	r1, r3, #1
 8017336:	81f9      	strh	r1, [r7, #14]
 8017338:	4413      	add	r3, r2
 801733a:	781b      	ldrb	r3, [r3, #0]
 801733c:	041a      	lsls	r2, r3, #16
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	689b      	ldr	r3, [r3, #8]
 8017342:	431a      	orrs	r2, r3
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	681a      	ldr	r2, [r3, #0]
 801734c:	89fb      	ldrh	r3, [r7, #14]
 801734e:	1c59      	adds	r1, r3, #1
 8017350:	81f9      	strh	r1, [r7, #14]
 8017352:	4413      	add	r3, r2
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	061a      	lsls	r2, r3, #24
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	689b      	ldr	r3, [r3, #8]
 801735c:	431a      	orrs	r2, r3
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	89fb      	ldrh	r3, [r7, #14]
 8017368:	1c59      	adds	r1, r3, #1
 801736a:	81f9      	strh	r1, [r7, #14]
 801736c:	4413      	add	r3, r2
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	681a      	ldr	r2, [r3, #0]
 8017378:	89fb      	ldrh	r3, [r7, #14]
 801737a:	1c59      	adds	r1, r3, #1
 801737c:	81f9      	strh	r1, [r7, #14]
 801737e:	4413      	add	r3, r2
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	b29a      	uxth	r2, r3
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	681a      	ldr	r2, [r3, #0]
 801738c:	89fb      	ldrh	r3, [r7, #14]
 801738e:	1c59      	adds	r1, r3, #1
 8017390:	81f9      	strh	r1, [r7, #14]
 8017392:	4413      	add	r3, r2
 8017394:	781b      	ldrb	r3, [r3, #0]
 8017396:	0219      	lsls	r1, r3, #8
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	89db      	ldrh	r3, [r3, #14]
 801739c:	b21a      	sxth	r2, r3
 801739e:	b20b      	sxth	r3, r1
 80173a0:	4313      	orrs	r3, r2
 80173a2:	b21b      	sxth	r3, r3
 80173a4:	b29a      	uxth	r2, r3
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	f103 0010 	add.w	r0, r3, #16
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681a      	ldr	r2, [r3, #0]
 80173b4:	89fb      	ldrh	r3, [r7, #14]
 80173b6:	18d1      	adds	r1, r2, r3
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	7b1b      	ldrb	r3, [r3, #12]
 80173bc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173c0:	b2db      	uxtb	r3, r3
 80173c2:	b29b      	uxth	r3, r3
 80173c4:	461a      	mov	r2, r3
 80173c6:	f002 fd1a 	bl	8019dfe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	7b1b      	ldrb	r3, [r3, #12]
 80173ce:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173d2:	b2db      	uxtb	r3, r3
 80173d4:	b29a      	uxth	r2, r3
 80173d6:	89fb      	ldrh	r3, [r7, #14]
 80173d8:	4413      	add	r3, r2
 80173da:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2200      	movs	r2, #0
 80173e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	791b      	ldrb	r3, [r3, #4]
 80173f0:	461a      	mov	r2, r3
 80173f2:	89fb      	ldrh	r3, [r7, #14]
 80173f4:	1ad3      	subs	r3, r2, r3
 80173f6:	2b04      	cmp	r3, #4
 80173f8:	dd28      	ble.n	801744c <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	681a      	ldr	r2, [r3, #0]
 80173fe:	89fb      	ldrh	r3, [r7, #14]
 8017400:	1c59      	adds	r1, r3, #1
 8017402:	81f9      	strh	r1, [r7, #14]
 8017404:	4413      	add	r3, r2
 8017406:	781a      	ldrb	r2, [r3, #0]
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	791a      	ldrb	r2, [r3, #4]
 8017412:	89fb      	ldrh	r3, [r7, #14]
 8017414:	b2db      	uxtb	r3, r3
 8017416:	1ad3      	subs	r3, r2, r3
 8017418:	b2db      	uxtb	r3, r3
 801741a:	3b04      	subs	r3, #4
 801741c:	b2da      	uxtb	r2, r3
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8017424:	687b      	ldr	r3, [r7, #4]
 8017426:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681a      	ldr	r2, [r3, #0]
 801742c:	89fb      	ldrh	r3, [r7, #14]
 801742e:	18d1      	adds	r1, r2, r3
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017436:	b29b      	uxth	r3, r3
 8017438:	461a      	mov	r2, r3
 801743a:	f002 fce0 	bl	8019dfe <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017444:	b29a      	uxth	r2, r3
 8017446:	89fb      	ldrh	r3, [r7, #14]
 8017448:	4413      	add	r3, r2
 801744a:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	681a      	ldr	r2, [r3, #0]
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	791b      	ldrb	r3, [r3, #4]
 8017454:	3b04      	subs	r3, #4
 8017456:	4413      	add	r3, r2
 8017458:	781b      	ldrb	r3, [r3, #0]
 801745a:	461a      	mov	r2, r3
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	6819      	ldr	r1, [r3, #0]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	791b      	ldrb	r3, [r3, #4]
 801746c:	3b03      	subs	r3, #3
 801746e:	440b      	add	r3, r1
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	021b      	lsls	r3, r3, #8
 8017474:	431a      	orrs	r2, r3
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	6819      	ldr	r1, [r3, #0]
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	791b      	ldrb	r3, [r3, #4]
 8017486:	3b02      	subs	r3, #2
 8017488:	440b      	add	r3, r1
 801748a:	781b      	ldrb	r3, [r3, #0]
 801748c:	041b      	lsls	r3, r3, #16
 801748e:	431a      	orrs	r2, r3
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	6819      	ldr	r1, [r3, #0]
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	791b      	ldrb	r3, [r3, #4]
 80174a0:	3b01      	subs	r3, #1
 80174a2:	440b      	add	r3, r1
 80174a4:	781b      	ldrb	r3, [r3, #0]
 80174a6:	061b      	lsls	r3, r3, #24
 80174a8:	431a      	orrs	r2, r3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174ae:	2300      	movs	r3, #0
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3710      	adds	r7, #16
 80174b4:	46bd      	mov	sp, r7
 80174b6:	bd80      	pop	{r7, pc}

080174b8 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d003      	beq.n	80174ce <LoRaMacSerializerJoinRequest+0x16>
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	681b      	ldr	r3, [r3, #0]
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d101      	bne.n	80174d2 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80174ce:	2301      	movs	r3, #1
 80174d0:	e070      	b.n	80175b4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80174d2:	2300      	movs	r3, #0
 80174d4:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	791b      	ldrb	r3, [r3, #4]
 80174da:	2b16      	cmp	r3, #22
 80174dc:	d801      	bhi.n	80174e2 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80174de:	2302      	movs	r3, #2
 80174e0:	e068      	b.n	80175b4 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681a      	ldr	r2, [r3, #0]
 80174e6:	89fb      	ldrh	r3, [r7, #14]
 80174e8:	1c59      	adds	r1, r3, #1
 80174ea:	81f9      	strh	r1, [r7, #14]
 80174ec:	4413      	add	r3, r2
 80174ee:	687a      	ldr	r2, [r7, #4]
 80174f0:	7952      	ldrb	r2, [r2, #5]
 80174f2:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681a      	ldr	r2, [r3, #0]
 80174f8:	89fb      	ldrh	r3, [r7, #14]
 80174fa:	18d0      	adds	r0, r2, r3
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	3306      	adds	r3, #6
 8017500:	2208      	movs	r2, #8
 8017502:	4619      	mov	r1, r3
 8017504:	f002 fc96 	bl	8019e34 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017508:	89fb      	ldrh	r3, [r7, #14]
 801750a:	3308      	adds	r3, #8
 801750c:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681a      	ldr	r2, [r3, #0]
 8017512:	89fb      	ldrh	r3, [r7, #14]
 8017514:	18d0      	adds	r0, r2, r3
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	330e      	adds	r3, #14
 801751a:	2208      	movs	r2, #8
 801751c:	4619      	mov	r1, r3
 801751e:	f002 fc89 	bl	8019e34 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8017522:	89fb      	ldrh	r3, [r7, #14]
 8017524:	3308      	adds	r3, #8
 8017526:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	8ad9      	ldrh	r1, [r3, #22]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	681a      	ldr	r2, [r3, #0]
 8017530:	89fb      	ldrh	r3, [r7, #14]
 8017532:	1c58      	adds	r0, r3, #1
 8017534:	81f8      	strh	r0, [r7, #14]
 8017536:	4413      	add	r3, r2
 8017538:	b2ca      	uxtb	r2, r1
 801753a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	8adb      	ldrh	r3, [r3, #22]
 8017540:	0a1b      	lsrs	r3, r3, #8
 8017542:	b299      	uxth	r1, r3
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681a      	ldr	r2, [r3, #0]
 8017548:	89fb      	ldrh	r3, [r7, #14]
 801754a:	1c58      	adds	r0, r3, #1
 801754c:	81f8      	strh	r0, [r7, #14]
 801754e:	4413      	add	r3, r2
 8017550:	b2ca      	uxtb	r2, r1
 8017552:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	6999      	ldr	r1, [r3, #24]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681a      	ldr	r2, [r3, #0]
 801755c:	89fb      	ldrh	r3, [r7, #14]
 801755e:	1c58      	adds	r0, r3, #1
 8017560:	81f8      	strh	r0, [r7, #14]
 8017562:	4413      	add	r3, r2
 8017564:	b2ca      	uxtb	r2, r1
 8017566:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	699b      	ldr	r3, [r3, #24]
 801756c:	0a19      	lsrs	r1, r3, #8
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	681a      	ldr	r2, [r3, #0]
 8017572:	89fb      	ldrh	r3, [r7, #14]
 8017574:	1c58      	adds	r0, r3, #1
 8017576:	81f8      	strh	r0, [r7, #14]
 8017578:	4413      	add	r3, r2
 801757a:	b2ca      	uxtb	r2, r1
 801757c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	699b      	ldr	r3, [r3, #24]
 8017582:	0c19      	lsrs	r1, r3, #16
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681a      	ldr	r2, [r3, #0]
 8017588:	89fb      	ldrh	r3, [r7, #14]
 801758a:	1c58      	adds	r0, r3, #1
 801758c:	81f8      	strh	r0, [r7, #14]
 801758e:	4413      	add	r3, r2
 8017590:	b2ca      	uxtb	r2, r1
 8017592:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	699b      	ldr	r3, [r3, #24]
 8017598:	0e19      	lsrs	r1, r3, #24
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	681a      	ldr	r2, [r3, #0]
 801759e:	89fb      	ldrh	r3, [r7, #14]
 80175a0:	1c58      	adds	r0, r3, #1
 80175a2:	81f8      	strh	r0, [r7, #14]
 80175a4:	4413      	add	r3, r2
 80175a6:	b2ca      	uxtb	r2, r1
 80175a8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175aa:	89fb      	ldrh	r3, [r7, #14]
 80175ac:	b2da      	uxtb	r2, r3
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175b2:	2300      	movs	r3, #0
}
 80175b4:	4618      	mov	r0, r3
 80175b6:	3710      	adds	r7, #16
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d003      	beq.n	80175d2 <LoRaMacSerializerData+0x16>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d101      	bne.n	80175d6 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175d2:	2301      	movs	r3, #1
 80175d4:	e0e5      	b.n	80177a2 <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80175d6:	2300      	movs	r3, #0
 80175d8:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80175da:	2308      	movs	r3, #8
 80175dc:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	7b1b      	ldrb	r3, [r3, #12]
 80175e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80175e6:	b2db      	uxtb	r3, r3
 80175e8:	b29a      	uxth	r2, r3
 80175ea:	89bb      	ldrh	r3, [r7, #12]
 80175ec:	4413      	add	r3, r2
 80175ee:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d002      	beq.n	8017600 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80175fa:	89bb      	ldrh	r3, [r7, #12]
 80175fc:	3301      	adds	r3, #1
 80175fe:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017606:	b29a      	uxth	r2, r3
 8017608:	89bb      	ldrh	r3, [r7, #12]
 801760a:	4413      	add	r3, r2
 801760c:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801760e:	89bb      	ldrh	r3, [r7, #12]
 8017610:	3304      	adds	r3, #4
 8017612:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8017614:	687b      	ldr	r3, [r7, #4]
 8017616:	791b      	ldrb	r3, [r3, #4]
 8017618:	b29b      	uxth	r3, r3
 801761a:	89ba      	ldrh	r2, [r7, #12]
 801761c:	429a      	cmp	r2, r3
 801761e:	d901      	bls.n	8017624 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017620:	2302      	movs	r3, #2
 8017622:	e0be      	b.n	80177a2 <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8017624:	687b      	ldr	r3, [r7, #4]
 8017626:	681a      	ldr	r2, [r3, #0]
 8017628:	89fb      	ldrh	r3, [r7, #14]
 801762a:	1c59      	adds	r1, r3, #1
 801762c:	81f9      	strh	r1, [r7, #14]
 801762e:	4413      	add	r3, r2
 8017630:	687a      	ldr	r2, [r7, #4]
 8017632:	7952      	ldrb	r2, [r2, #5]
 8017634:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	6899      	ldr	r1, [r3, #8]
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	681a      	ldr	r2, [r3, #0]
 801763e:	89fb      	ldrh	r3, [r7, #14]
 8017640:	1c58      	adds	r0, r3, #1
 8017642:	81f8      	strh	r0, [r7, #14]
 8017644:	4413      	add	r3, r2
 8017646:	b2ca      	uxtb	r2, r1
 8017648:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	689b      	ldr	r3, [r3, #8]
 801764e:	0a19      	lsrs	r1, r3, #8
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	681a      	ldr	r2, [r3, #0]
 8017654:	89fb      	ldrh	r3, [r7, #14]
 8017656:	1c58      	adds	r0, r3, #1
 8017658:	81f8      	strh	r0, [r7, #14]
 801765a:	4413      	add	r3, r2
 801765c:	b2ca      	uxtb	r2, r1
 801765e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	689b      	ldr	r3, [r3, #8]
 8017664:	0c19      	lsrs	r1, r3, #16
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	681a      	ldr	r2, [r3, #0]
 801766a:	89fb      	ldrh	r3, [r7, #14]
 801766c:	1c58      	adds	r0, r3, #1
 801766e:	81f8      	strh	r0, [r7, #14]
 8017670:	4413      	add	r3, r2
 8017672:	b2ca      	uxtb	r2, r1
 8017674:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	689b      	ldr	r3, [r3, #8]
 801767a:	0e19      	lsrs	r1, r3, #24
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681a      	ldr	r2, [r3, #0]
 8017680:	89fb      	ldrh	r3, [r7, #14]
 8017682:	1c58      	adds	r0, r3, #1
 8017684:	81f8      	strh	r0, [r7, #14]
 8017686:	4413      	add	r3, r2
 8017688:	b2ca      	uxtb	r2, r1
 801768a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	681a      	ldr	r2, [r3, #0]
 8017690:	89fb      	ldrh	r3, [r7, #14]
 8017692:	1c59      	adds	r1, r3, #1
 8017694:	81f9      	strh	r1, [r7, #14]
 8017696:	4413      	add	r3, r2
 8017698:	687a      	ldr	r2, [r7, #4]
 801769a:	7b12      	ldrb	r2, [r2, #12]
 801769c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	89d9      	ldrh	r1, [r3, #14]
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681a      	ldr	r2, [r3, #0]
 80176a6:	89fb      	ldrh	r3, [r7, #14]
 80176a8:	1c58      	adds	r0, r3, #1
 80176aa:	81f8      	strh	r0, [r7, #14]
 80176ac:	4413      	add	r3, r2
 80176ae:	b2ca      	uxtb	r2, r1
 80176b0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	89db      	ldrh	r3, [r3, #14]
 80176b6:	0a1b      	lsrs	r3, r3, #8
 80176b8:	b299      	uxth	r1, r3
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	89fb      	ldrh	r3, [r7, #14]
 80176c0:	1c58      	adds	r0, r3, #1
 80176c2:	81f8      	strh	r0, [r7, #14]
 80176c4:	4413      	add	r3, r2
 80176c6:	b2ca      	uxtb	r2, r1
 80176c8:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	89fb      	ldrh	r3, [r7, #14]
 80176d0:	18d0      	adds	r0, r2, r3
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	f103 0110 	add.w	r1, r3, #16
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	7b1b      	ldrb	r3, [r3, #12]
 80176dc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176e0:	b2db      	uxtb	r3, r3
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	461a      	mov	r2, r3
 80176e6:	f002 fb8a 	bl	8019dfe <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	7b1b      	ldrb	r3, [r3, #12]
 80176ee:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176f2:	b2db      	uxtb	r3, r3
 80176f4:	b29a      	uxth	r2, r3
 80176f6:	89fb      	ldrh	r3, [r7, #14]
 80176f8:	4413      	add	r3, r2
 80176fa:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017702:	2b00      	cmp	r3, #0
 8017704:	d009      	beq.n	801771a <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	89fb      	ldrh	r3, [r7, #14]
 801770c:	1c59      	adds	r1, r3, #1
 801770e:	81f9      	strh	r1, [r7, #14]
 8017710:	4413      	add	r3, r2
 8017712:	687a      	ldr	r2, [r7, #4]
 8017714:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017718:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801771a:	687b      	ldr	r3, [r7, #4]
 801771c:	681a      	ldr	r2, [r3, #0]
 801771e:	89fb      	ldrh	r3, [r7, #14]
 8017720:	18d0      	adds	r0, r2, r3
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801772c:	b29b      	uxth	r3, r3
 801772e:	461a      	mov	r2, r3
 8017730:	f002 fb65 	bl	8019dfe <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801773a:	b29a      	uxth	r2, r3
 801773c:	89fb      	ldrh	r3, [r7, #14]
 801773e:	4413      	add	r3, r2
 8017740:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681a      	ldr	r2, [r3, #0]
 801774a:	89fb      	ldrh	r3, [r7, #14]
 801774c:	1c58      	adds	r0, r3, #1
 801774e:	81f8      	strh	r0, [r7, #14]
 8017750:	4413      	add	r3, r2
 8017752:	b2ca      	uxtb	r2, r1
 8017754:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801775a:	0a19      	lsrs	r1, r3, #8
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	681a      	ldr	r2, [r3, #0]
 8017760:	89fb      	ldrh	r3, [r7, #14]
 8017762:	1c58      	adds	r0, r3, #1
 8017764:	81f8      	strh	r0, [r7, #14]
 8017766:	4413      	add	r3, r2
 8017768:	b2ca      	uxtb	r2, r1
 801776a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017770:	0c19      	lsrs	r1, r3, #16
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681a      	ldr	r2, [r3, #0]
 8017776:	89fb      	ldrh	r3, [r7, #14]
 8017778:	1c58      	adds	r0, r3, #1
 801777a:	81f8      	strh	r0, [r7, #14]
 801777c:	4413      	add	r3, r2
 801777e:	b2ca      	uxtb	r2, r1
 8017780:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017786:	0e19      	lsrs	r1, r3, #24
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	681a      	ldr	r2, [r3, #0]
 801778c:	89fb      	ldrh	r3, [r7, #14]
 801778e:	1c58      	adds	r0, r3, #1
 8017790:	81f8      	strh	r0, [r7, #14]
 8017792:	4413      	add	r3, r2
 8017794:	b2ca      	uxtb	r2, r1
 8017796:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8017798:	89fb      	ldrh	r3, [r7, #14]
 801779a:	b2da      	uxtb	r2, r3
 801779c:	687b      	ldr	r3, [r7, #4]
 801779e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177a0:	2300      	movs	r3, #0
}
 80177a2:	4618      	mov	r0, r3
 80177a4:	3710      	adds	r7, #16
 80177a6:	46bd      	mov	sp, r7
 80177a8:	bd80      	pop	{r7, pc}

080177aa <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177aa:	b480      	push	{r7}
 80177ac:	b083      	sub	sp, #12
 80177ae:	af00      	add	r7, sp, #0
 80177b0:	4603      	mov	r3, r0
 80177b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177b4:	79fb      	ldrb	r3, [r7, #7]
 80177b6:	2b05      	cmp	r3, #5
 80177b8:	d101      	bne.n	80177be <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177ba:	2301      	movs	r3, #1
 80177bc:	e000      	b.n	80177c0 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177be:	2300      	movs	r3, #0
        }
    }
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	370c      	adds	r7, #12
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bc80      	pop	{r7}
 80177c8:	4770      	bx	lr

080177ca <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80177ca:	b580      	push	{r7, lr}
 80177cc:	b084      	sub	sp, #16
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	4603      	mov	r3, r0
 80177d2:	6039      	str	r1, [r7, #0]
 80177d4:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80177d6:	2300      	movs	r3, #0
 80177d8:	60bb      	str	r3, [r7, #8]
    switch( region )
 80177da:	79fb      	ldrb	r3, [r7, #7]
 80177dc:	2b05      	cmp	r3, #5
 80177de:	d105      	bne.n	80177ec <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80177e0:	6838      	ldr	r0, [r7, #0]
 80177e2:	f001 f995 	bl	8018b10 <RegionEU868GetPhyParam>
 80177e6:	4603      	mov	r3, r0
 80177e8:	60fb      	str	r3, [r7, #12]
 80177ea:	e001      	b.n	80177f0 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80177ec:	68bb      	ldr	r3, [r7, #8]
 80177ee:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	4618      	mov	r0, r3
 80177f4:	3710      	adds	r7, #16
 80177f6:	46bd      	mov	sp, r7
 80177f8:	bd80      	pop	{r7, pc}

080177fa <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b082      	sub	sp, #8
 80177fe:	af00      	add	r7, sp, #0
 8017800:	4603      	mov	r3, r0
 8017802:	6039      	str	r1, [r7, #0]
 8017804:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017806:	79fb      	ldrb	r3, [r7, #7]
 8017808:	2b05      	cmp	r3, #5
 801780a:	d103      	bne.n	8017814 <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 801780c:	6838      	ldr	r0, [r7, #0]
 801780e:	f001 facb 	bl	8018da8 <RegionEU868SetBandTxDone>
 8017812:	e000      	b.n	8017816 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8017814:	bf00      	nop
        }
    }
}
 8017816:	3708      	adds	r7, #8
 8017818:	46bd      	mov	sp, r7
 801781a:	bd80      	pop	{r7, pc}

0801781c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801781c:	b580      	push	{r7, lr}
 801781e:	b082      	sub	sp, #8
 8017820:	af00      	add	r7, sp, #0
 8017822:	4603      	mov	r3, r0
 8017824:	6039      	str	r1, [r7, #0]
 8017826:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017828:	79fb      	ldrb	r3, [r7, #7]
 801782a:	2b05      	cmp	r3, #5
 801782c:	d103      	bne.n	8017836 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 801782e:	6838      	ldr	r0, [r7, #0]
 8017830:	f001 fae6 	bl	8018e00 <RegionEU868InitDefaults>
 8017834:	e000      	b.n	8017838 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8017836:	bf00      	nop
        }
    }
}
 8017838:	bf00      	nop
 801783a:	3708      	adds	r7, #8
 801783c:	46bd      	mov	sp, r7
 801783e:	bd80      	pop	{r7, pc}

08017840 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b082      	sub	sp, #8
 8017844:	af00      	add	r7, sp, #0
 8017846:	4603      	mov	r3, r0
 8017848:	6039      	str	r1, [r7, #0]
 801784a:	71fb      	strb	r3, [r7, #7]
 801784c:	4613      	mov	r3, r2
 801784e:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017850:	79fb      	ldrb	r3, [r7, #7]
 8017852:	2b05      	cmp	r3, #5
 8017854:	d106      	bne.n	8017864 <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8017856:	79bb      	ldrb	r3, [r7, #6]
 8017858:	4619      	mov	r1, r3
 801785a:	6838      	ldr	r0, [r7, #0]
 801785c:	f001 fb6e 	bl	8018f3c <RegionEU868Verify>
 8017860:	4603      	mov	r3, r0
 8017862:	e000      	b.n	8017866 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8017864:	2300      	movs	r3, #0
        }
    }
}
 8017866:	4618      	mov	r0, r3
 8017868:	3708      	adds	r7, #8
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}

0801786e <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801786e:	b580      	push	{r7, lr}
 8017870:	b082      	sub	sp, #8
 8017872:	af00      	add	r7, sp, #0
 8017874:	4603      	mov	r3, r0
 8017876:	6039      	str	r1, [r7, #0]
 8017878:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801787a:	79fb      	ldrb	r3, [r7, #7]
 801787c:	2b05      	cmp	r3, #5
 801787e:	d103      	bne.n	8017888 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	f001 fbd7 	bl	8019034 <RegionEU868ApplyCFList>
 8017886:	e000      	b.n	801788a <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 8017888:	bf00      	nop
        }
    }
}
 801788a:	bf00      	nop
 801788c:	3708      	adds	r7, #8
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}

08017892 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8017892:	b580      	push	{r7, lr}
 8017894:	b082      	sub	sp, #8
 8017896:	af00      	add	r7, sp, #0
 8017898:	4603      	mov	r3, r0
 801789a:	6039      	str	r1, [r7, #0]
 801789c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801789e:	79fb      	ldrb	r3, [r7, #7]
 80178a0:	2b05      	cmp	r3, #5
 80178a2:	d104      	bne.n	80178ae <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178a4:	6838      	ldr	r0, [r7, #0]
 80178a6:	f001 fc39 	bl	801911c <RegionEU868ChanMaskSet>
 80178aa:	4603      	mov	r3, r0
 80178ac:	e000      	b.n	80178b0 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80178ae:	2300      	movs	r3, #0
        }
    }
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	3708      	adds	r7, #8
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}

080178b8 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80178b8:	b580      	push	{r7, lr}
 80178ba:	b082      	sub	sp, #8
 80178bc:	af00      	add	r7, sp, #0
 80178be:	603b      	str	r3, [r7, #0]
 80178c0:	4603      	mov	r3, r0
 80178c2:	71fb      	strb	r3, [r7, #7]
 80178c4:	460b      	mov	r3, r1
 80178c6:	71bb      	strb	r3, [r7, #6]
 80178c8:	4613      	mov	r3, r2
 80178ca:	717b      	strb	r3, [r7, #5]
    switch( region )
 80178cc:	79fb      	ldrb	r3, [r7, #7]
 80178ce:	2b05      	cmp	r3, #5
 80178d0:	d107      	bne.n	80178e2 <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80178d2:	7979      	ldrb	r1, [r7, #5]
 80178d4:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80178d8:	693b      	ldr	r3, [r7, #16]
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	f001 fc48 	bl	8019170 <RegionEU868ComputeRxWindowParameters>
 80178e0:	e000      	b.n	80178e4 <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80178e2:	bf00      	nop
        }
    }
}
 80178e4:	bf00      	nop
 80178e6:	3708      	adds	r7, #8
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}

080178ec <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	4603      	mov	r3, r0
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	607a      	str	r2, [r7, #4]
 80178f8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80178fa:	7bfb      	ldrb	r3, [r7, #15]
 80178fc:	2b05      	cmp	r3, #5
 80178fe:	d105      	bne.n	801790c <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017900:	6879      	ldr	r1, [r7, #4]
 8017902:	68b8      	ldr	r0, [r7, #8]
 8017904:	f001 fc8e 	bl	8019224 <RegionEU868RxConfig>
 8017908:	4603      	mov	r3, r0
 801790a:	e000      	b.n	801790e <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 801790c:	2300      	movs	r3, #0
        }
    }
}
 801790e:	4618      	mov	r0, r3
 8017910:	3710      	adds	r7, #16
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}

08017916 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8017916:	b580      	push	{r7, lr}
 8017918:	b084      	sub	sp, #16
 801791a:	af00      	add	r7, sp, #0
 801791c:	60b9      	str	r1, [r7, #8]
 801791e:	607a      	str	r2, [r7, #4]
 8017920:	603b      	str	r3, [r7, #0]
 8017922:	4603      	mov	r3, r0
 8017924:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017926:	7bfb      	ldrb	r3, [r7, #15]
 8017928:	2b05      	cmp	r3, #5
 801792a:	d106      	bne.n	801793a <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 801792c:	683a      	ldr	r2, [r7, #0]
 801792e:	6879      	ldr	r1, [r7, #4]
 8017930:	68b8      	ldr	r0, [r7, #8]
 8017932:	f001 fd47 	bl	80193c4 <RegionEU868TxConfig>
 8017936:	4603      	mov	r3, r0
 8017938:	e000      	b.n	801793c <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 801793a:	2300      	movs	r3, #0
        }
    }
}
 801793c:	4618      	mov	r0, r3
 801793e:	3710      	adds	r7, #16
 8017940:	46bd      	mov	sp, r7
 8017942:	bd80      	pop	{r7, pc}

08017944 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8017944:	b580      	push	{r7, lr}
 8017946:	b086      	sub	sp, #24
 8017948:	af02      	add	r7, sp, #8
 801794a:	60b9      	str	r1, [r7, #8]
 801794c:	607a      	str	r2, [r7, #4]
 801794e:	603b      	str	r3, [r7, #0]
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	2b05      	cmp	r3, #5
 8017958:	d109      	bne.n	801796e <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 801795a:	69fb      	ldr	r3, [r7, #28]
 801795c:	9300      	str	r3, [sp, #0]
 801795e:	69bb      	ldr	r3, [r7, #24]
 8017960:	683a      	ldr	r2, [r7, #0]
 8017962:	6879      	ldr	r1, [r7, #4]
 8017964:	68b8      	ldr	r0, [r7, #8]
 8017966:	f001 fdfd 	bl	8019564 <RegionEU868LinkAdrReq>
 801796a:	4603      	mov	r3, r0
 801796c:	e000      	b.n	8017970 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 801796e:	2300      	movs	r3, #0
        }
    }
}
 8017970:	4618      	mov	r0, r3
 8017972:	3710      	adds	r7, #16
 8017974:	46bd      	mov	sp, r7
 8017976:	bd80      	pop	{r7, pc}

08017978 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017978:	b580      	push	{r7, lr}
 801797a:	b082      	sub	sp, #8
 801797c:	af00      	add	r7, sp, #0
 801797e:	4603      	mov	r3, r0
 8017980:	6039      	str	r1, [r7, #0]
 8017982:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017984:	79fb      	ldrb	r3, [r7, #7]
 8017986:	2b05      	cmp	r3, #5
 8017988:	d104      	bne.n	8017994 <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 801798a:	6838      	ldr	r0, [r7, #0]
 801798c:	f001 ff0c 	bl	80197a8 <RegionEU868RxParamSetupReq>
 8017990:	4603      	mov	r3, r0
 8017992:	e000      	b.n	8017996 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8017994:	2300      	movs	r3, #0
        }
    }
}
 8017996:	4618      	mov	r0, r3
 8017998:	3708      	adds	r7, #8
 801799a:	46bd      	mov	sp, r7
 801799c:	bd80      	pop	{r7, pc}

0801799e <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 801799e:	b580      	push	{r7, lr}
 80179a0:	b082      	sub	sp, #8
 80179a2:	af00      	add	r7, sp, #0
 80179a4:	4603      	mov	r3, r0
 80179a6:	6039      	str	r1, [r7, #0]
 80179a8:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179aa:	79fb      	ldrb	r3, [r7, #7]
 80179ac:	2b05      	cmp	r3, #5
 80179ae:	d104      	bne.n	80179ba <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80179b0:	6838      	ldr	r0, [r7, #0]
 80179b2:	f001 ff37 	bl	8019824 <RegionEU868NewChannelReq>
 80179b6:	4603      	mov	r3, r0
 80179b8:	e000      	b.n	80179bc <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80179ba:	2300      	movs	r3, #0
        }
    }
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}

080179c4 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80179c4:	b580      	push	{r7, lr}
 80179c6:	b082      	sub	sp, #8
 80179c8:	af00      	add	r7, sp, #0
 80179ca:	4603      	mov	r3, r0
 80179cc:	6039      	str	r1, [r7, #0]
 80179ce:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179d0:	79fb      	ldrb	r3, [r7, #7]
 80179d2:	2b05      	cmp	r3, #5
 80179d4:	d104      	bne.n	80179e0 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80179d6:	6838      	ldr	r0, [r7, #0]
 80179d8:	f001 ff82 	bl	80198e0 <RegionEU868TxParamSetupReq>
 80179dc:	4603      	mov	r3, r0
 80179de:	e000      	b.n	80179e2 <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179e0:	2300      	movs	r3, #0
        }
    }
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3708      	adds	r7, #8
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}

080179ea <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b082      	sub	sp, #8
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	4603      	mov	r3, r0
 80179f2:	6039      	str	r1, [r7, #0]
 80179f4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179f6:	79fb      	ldrb	r3, [r7, #7]
 80179f8:	2b05      	cmp	r3, #5
 80179fa:	d104      	bne.n	8017a06 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 80179fc:	6838      	ldr	r0, [r7, #0]
 80179fe:	f001 ff7b 	bl	80198f8 <RegionEU868DlChannelReq>
 8017a02:	4603      	mov	r3, r0
 8017a04:	e000      	b.n	8017a08 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a06:	2300      	movs	r3, #0
        }
    }
}
 8017a08:	4618      	mov	r0, r3
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b082      	sub	sp, #8
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	4603      	mov	r3, r0
 8017a18:	71fb      	strb	r3, [r7, #7]
 8017a1a:	460b      	mov	r3, r1
 8017a1c:	71bb      	strb	r3, [r7, #6]
 8017a1e:	4613      	mov	r3, r2
 8017a20:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017a22:	79fb      	ldrb	r3, [r7, #7]
 8017a24:	2b05      	cmp	r3, #5
 8017a26:	d108      	bne.n	8017a3a <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017a28:	797a      	ldrb	r2, [r7, #5]
 8017a2a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a2e:	4611      	mov	r1, r2
 8017a30:	4618      	mov	r0, r3
 8017a32:	f001 ffab 	bl	801998c <RegionEU868AlternateDr>
 8017a36:	4603      	mov	r3, r0
 8017a38:	e000      	b.n	8017a3c <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017a3a:	2300      	movs	r3, #0
        }
    }
}
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	3708      	adds	r7, #8
 8017a40:	46bd      	mov	sp, r7
 8017a42:	bd80      	pop	{r7, pc}

08017a44 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017a44:	b580      	push	{r7, lr}
 8017a46:	b084      	sub	sp, #16
 8017a48:	af00      	add	r7, sp, #0
 8017a4a:	60b9      	str	r1, [r7, #8]
 8017a4c:	607a      	str	r2, [r7, #4]
 8017a4e:	603b      	str	r3, [r7, #0]
 8017a50:	4603      	mov	r3, r0
 8017a52:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a54:	7bfb      	ldrb	r3, [r7, #15]
 8017a56:	2b05      	cmp	r3, #5
 8017a58:	d107      	bne.n	8017a6a <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	683a      	ldr	r2, [r7, #0]
 8017a5e:	6879      	ldr	r1, [r7, #4]
 8017a60:	68b8      	ldr	r0, [r7, #8]
 8017a62:	f001 ffa3 	bl	80199ac <RegionEU868NextChannel>
 8017a66:	4603      	mov	r3, r0
 8017a68:	e000      	b.n	8017a6c <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017a6a:	2309      	movs	r3, #9
        }
    }
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3710      	adds	r7, #16
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	4603      	mov	r3, r0
 8017a7c:	6039      	str	r1, [r7, #0]
 8017a7e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a80:	79fb      	ldrb	r3, [r7, #7]
 8017a82:	2b05      	cmp	r3, #5
 8017a84:	d103      	bne.n	8017a8e <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017a86:	6838      	ldr	r0, [r7, #0]
 8017a88:	f002 f90a 	bl	8019ca0 <RegionEU868SetContinuousWave>
 8017a8c:	e000      	b.n	8017a90 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017a8e:	bf00      	nop
        }
    }
}
 8017a90:	bf00      	nop
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017a98:	b590      	push	{r4, r7, lr}
 8017a9a:	b083      	sub	sp, #12
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	4604      	mov	r4, r0
 8017aa0:	4608      	mov	r0, r1
 8017aa2:	4611      	mov	r1, r2
 8017aa4:	461a      	mov	r2, r3
 8017aa6:	4623      	mov	r3, r4
 8017aa8:	71fb      	strb	r3, [r7, #7]
 8017aaa:	4603      	mov	r3, r0
 8017aac:	71bb      	strb	r3, [r7, #6]
 8017aae:	460b      	mov	r3, r1
 8017ab0:	717b      	strb	r3, [r7, #5]
 8017ab2:	4613      	mov	r3, r2
 8017ab4:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017ab6:	79fb      	ldrb	r3, [r7, #7]
 8017ab8:	2b05      	cmp	r3, #5
 8017aba:	d109      	bne.n	8017ad0 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017abc:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017ac0:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017ac4:	79bb      	ldrb	r3, [r7, #6]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	f002 f938 	bl	8019d3c <RegionEU868ApplyDrOffset>
 8017acc:	4603      	mov	r3, r0
 8017ace:	e000      	b.n	8017ad2 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017ad0:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	370c      	adds	r7, #12
 8017ad6:	46bd      	mov	sp, r7
 8017ad8:	bd90      	pop	{r4, r7, pc}
	...

08017adc <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017adc:	b480      	push	{r7}
 8017ade:	b083      	sub	sp, #12
 8017ae0:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017ae2:	4b04      	ldr	r3, [pc, #16]	; (8017af4 <RegionGetVersion+0x18>)
 8017ae4:	607b      	str	r3, [r7, #4]

    return version;
 8017ae6:	687b      	ldr	r3, [r7, #4]
}
 8017ae8:	4618      	mov	r0, r3
 8017aea:	370c      	adds	r7, #12
 8017aec:	46bd      	mov	sp, r7
 8017aee:	bc80      	pop	{r7}
 8017af0:	4770      	bx	lr
 8017af2:	bf00      	nop
 8017af4:	01010003 	.word	0x01010003

08017af8 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017af8:	b480      	push	{r7}
 8017afa:	b087      	sub	sp, #28
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	60f8      	str	r0, [r7, #12]
 8017b00:	4608      	mov	r0, r1
 8017b02:	4639      	mov	r1, r7
 8017b04:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b08:	4603      	mov	r3, r0
 8017b0a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b0c:	68fb      	ldr	r3, [r7, #12]
 8017b0e:	881b      	ldrh	r3, [r3, #0]
 8017b10:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017b12:	7afb      	ldrb	r3, [r7, #11]
 8017b14:	f083 0301 	eor.w	r3, r3, #1
 8017b18:	b2db      	uxtb	r3, r3
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d01b      	beq.n	8017b56 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b22:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017b2a:	d202      	bcs.n	8017b32 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017b2c:	2364      	movs	r3, #100	; 0x64
 8017b2e:	82bb      	strh	r3, [r7, #20]
 8017b30:	e00b      	b.n	8017b4a <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017b32:	683b      	ldr	r3, [r7, #0]
 8017b34:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017b38:	4293      	cmp	r3, r2
 8017b3a:	d803      	bhi.n	8017b44 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017b3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b40:	82bb      	strh	r3, [r7, #20]
 8017b42:	e002      	b.n	8017b4a <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b44:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b48:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017b4a:	8aba      	ldrh	r2, [r7, #20]
 8017b4c:	8afb      	ldrh	r3, [r7, #22]
 8017b4e:	4293      	cmp	r3, r2
 8017b50:	bf38      	it	cc
 8017b52:	4613      	movcc	r3, r2
 8017b54:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017b56:	8afb      	ldrh	r3, [r7, #22]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d101      	bne.n	8017b60 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017b5c:	2301      	movs	r3, #1
 8017b5e:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017b60:	8afb      	ldrh	r3, [r7, #22]
}
 8017b62:	4618      	mov	r0, r3
 8017b64:	371c      	adds	r7, #28
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bc80      	pop	{r7}
 8017b6a:	4770      	bx	lr

08017b6c <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b08e      	sub	sp, #56	; 0x38
 8017b70:	af02      	add	r7, sp, #8
 8017b72:	60f8      	str	r0, [r7, #12]
 8017b74:	4608      	mov	r0, r1
 8017b76:	4639      	mov	r1, r7
 8017b78:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	881b      	ldrh	r3, [r3, #0]
 8017b84:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017b86:	4b4b      	ldr	r3, [pc, #300]	; (8017cb4 <SetMaxTimeCredits+0x148>)
 8017b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017b8a:	463b      	mov	r3, r7
 8017b8c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017b90:	f005 fdc0 	bl	801d714 <SysTimeToMs>
 8017b94:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017b96:	f107 0314 	add.w	r3, r7, #20
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	601a      	str	r2, [r3, #0]
 8017b9e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017ba0:	7af9      	ldrb	r1, [r7, #11]
 8017ba2:	463b      	mov	r3, r7
 8017ba4:	cb0c      	ldmia	r3, {r2, r3}
 8017ba6:	68f8      	ldr	r0, [r7, #12]
 8017ba8:	f7ff ffa6 	bl	8017af8 <GetDutyCycle>
 8017bac:	4603      	mov	r3, r0
 8017bae:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017bb0:	7afb      	ldrb	r3, [r7, #11]
 8017bb2:	f083 0301 	eor.w	r3, r3, #1
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d062      	beq.n	8017c82 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017bbc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bbe:	2b64      	cmp	r3, #100	; 0x64
 8017bc0:	d105      	bne.n	8017bce <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017bc2:	4b3c      	ldr	r3, [pc, #240]	; (8017cb4 <SetMaxTimeCredits+0x148>)
 8017bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bca:	609a      	str	r2, [r3, #8]
 8017bcc:	e00b      	b.n	8017be6 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017bce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bd4:	d105      	bne.n	8017be2 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017bd6:	4b38      	ldr	r3, [pc, #224]	; (8017cb8 <SetMaxTimeCredits+0x14c>)
 8017bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bde:	609a      	str	r2, [r3, #8]
 8017be0:	e001      	b.n	8017be6 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017be2:	4b36      	ldr	r3, [pc, #216]	; (8017cbc <SetMaxTimeCredits+0x150>)
 8017be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017be6:	68fb      	ldr	r3, [r7, #12]
 8017be8:	689a      	ldr	r2, [r3, #8]
 8017bea:	f107 031c 	add.w	r3, r7, #28
 8017bee:	4611      	mov	r1, r2
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f005 fdb7 	bl	801d764 <SysTimeFromMs>
 8017bf6:	f107 0014 	add.w	r0, r7, #20
 8017bfa:	6a3b      	ldr	r3, [r7, #32]
 8017bfc:	9300      	str	r3, [sp, #0]
 8017bfe:	69fb      	ldr	r3, [r7, #28]
 8017c00:	463a      	mov	r2, r7
 8017c02:	ca06      	ldmia	r2, {r1, r2}
 8017c04:	f005 fcc7 	bl	801d596 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c08:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c0c:	f083 0301 	eor.w	r3, r3, #1
 8017c10:	b2db      	uxtb	r3, r3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d006      	beq.n	8017c24 <SetMaxTimeCredits+0xb8>
 8017c16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017c1a:	f083 0301 	eor.w	r3, r3, #1
 8017c1e:	b2db      	uxtb	r3, r3
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d108      	bne.n	8017c36 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c24:	68fb      	ldr	r3, [r7, #12]
 8017c26:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c2a:	429a      	cmp	r2, r3
 8017c2c:	d103      	bne.n	8017c36 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017c2e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c30:	4a23      	ldr	r2, [pc, #140]	; (8017cc0 <SetMaxTimeCredits+0x154>)
 8017c32:	4293      	cmp	r3, r2
 8017c34:	d92f      	bls.n	8017c96 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c3a:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	4a21      	ldr	r2, [pc, #132]	; (8017cc4 <SetMaxTimeCredits+0x158>)
 8017c40:	4293      	cmp	r3, r2
 8017c42:	d928      	bls.n	8017c96 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c4a:	3b30      	subs	r3, #48	; 0x30
 8017c4c:	4a1e      	ldr	r2, [pc, #120]	; (8017cc8 <SetMaxTimeCredits+0x15c>)
 8017c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8017c52:	0c1b      	lsrs	r3, r3, #16
 8017c54:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	4a1c      	ldr	r2, [pc, #112]	; (8017ccc <SetMaxTimeCredits+0x160>)
 8017c5a:	fb02 f303 	mul.w	r3, r2, r3
 8017c5e:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c60:	697b      	ldr	r3, [r7, #20]
 8017c62:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017c66:	3330      	adds	r3, #48	; 0x30
 8017c68:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017c6e:	f107 0314 	add.w	r3, r7, #20
 8017c72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c76:	f005 fd4d 	bl	801d714 <SysTimeToMs>
 8017c7a:	4602      	mov	r2, r0
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	609a      	str	r2, [r3, #8]
 8017c80:	e009      	b.n	8017c96 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017c82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c86:	f083 0301 	eor.w	r3, r3, #1
 8017c8a:	b2db      	uxtb	r3, r3
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d002      	beq.n	8017c96 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017c90:	68fb      	ldr	r3, [r7, #12]
 8017c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c94:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d102      	bne.n	8017ca4 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ca2:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017ca4:	68fb      	ldr	r3, [r7, #12]
 8017ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017ca8:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017caa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017cac:	4618      	mov	r0, r3
 8017cae:	3730      	adds	r7, #48	; 0x30
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}
 8017cb4:	001b7740 	.word	0x001b7740
 8017cb8:	0112a880 	.word	0x0112a880
 8017cbc:	02932e00 	.word	0x02932e00
 8017cc0:	0001517f 	.word	0x0001517f
 8017cc4:	0001ec2f 	.word	0x0001ec2f
 8017cc8:	c22e4507 	.word	0xc22e4507
 8017ccc:	00015180 	.word	0x00015180

08017cd0 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b086      	sub	sp, #24
 8017cd4:	af02      	add	r7, sp, #8
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	4608      	mov	r0, r1
 8017cda:	4611      	mov	r1, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	4603      	mov	r3, r0
 8017ce0:	70fb      	strb	r3, [r7, #3]
 8017ce2:	460b      	mov	r3, r1
 8017ce4:	70bb      	strb	r3, [r7, #2]
 8017ce6:	4613      	mov	r3, r2
 8017ce8:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017cea:	78f9      	ldrb	r1, [r7, #3]
 8017cec:	787b      	ldrb	r3, [r7, #1]
 8017cee:	9301      	str	r3, [sp, #4]
 8017cf0:	78bb      	ldrb	r3, [r7, #2]
 8017cf2:	9300      	str	r3, [sp, #0]
 8017cf4:	f107 0318 	add.w	r3, r7, #24
 8017cf8:	cb0c      	ldmia	r3, {r2, r3}
 8017cfa:	6878      	ldr	r0, [r7, #4]
 8017cfc:	f7ff ff36 	bl	8017b6c <SetMaxTimeCredits>
 8017d00:	4603      	mov	r3, r0
 8017d02:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017d04:	78fb      	ldrb	r3, [r7, #3]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d00a      	beq.n	8017d20 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f006 fb3c 	bl	801e38c <UTIL_TIMER_GetElapsedTime>
 8017d14:	4602      	mov	r2, r0
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	68db      	ldr	r3, [r3, #12]
 8017d1a:	441a      	add	r2, r3
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	68da      	ldr	r2, [r3, #12]
 8017d24:	687b      	ldr	r3, [r7, #4]
 8017d26:	691b      	ldr	r3, [r3, #16]
 8017d28:	429a      	cmp	r2, r3
 8017d2a:	d903      	bls.n	8017d34 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	691a      	ldr	r2, [r3, #16]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	6a3a      	ldr	r2, [r7, #32]
 8017d38:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017d3a:	89fb      	ldrh	r3, [r7, #14]
}
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	3710      	adds	r7, #16
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}

08017d44 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017d44:	b480      	push	{r7}
 8017d46:	b085      	sub	sp, #20
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	460a      	mov	r2, r1
 8017d4e:	80fb      	strh	r3, [r7, #6]
 8017d50:	4613      	mov	r3, r2
 8017d52:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017d54:	2300      	movs	r3, #0
 8017d56:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017d58:	2300      	movs	r3, #0
 8017d5a:	73bb      	strb	r3, [r7, #14]
 8017d5c:	e011      	b.n	8017d82 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017d5e:	88fa      	ldrh	r2, [r7, #6]
 8017d60:	7bbb      	ldrb	r3, [r7, #14]
 8017d62:	2101      	movs	r1, #1
 8017d64:	fa01 f303 	lsl.w	r3, r1, r3
 8017d68:	401a      	ands	r2, r3
 8017d6a:	7bbb      	ldrb	r3, [r7, #14]
 8017d6c:	2101      	movs	r1, #1
 8017d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8017d72:	429a      	cmp	r2, r3
 8017d74:	d102      	bne.n	8017d7c <CountChannels+0x38>
        {
            nbActiveBits++;
 8017d76:	7bfb      	ldrb	r3, [r7, #15]
 8017d78:	3301      	adds	r3, #1
 8017d7a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017d7c:	7bbb      	ldrb	r3, [r7, #14]
 8017d7e:	3301      	adds	r3, #1
 8017d80:	73bb      	strb	r3, [r7, #14]
 8017d82:	7bba      	ldrb	r2, [r7, #14]
 8017d84:	797b      	ldrb	r3, [r7, #5]
 8017d86:	429a      	cmp	r2, r3
 8017d88:	d3e9      	bcc.n	8017d5e <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	3714      	adds	r7, #20
 8017d90:	46bd      	mov	sp, r7
 8017d92:	bc80      	pop	{r7}
 8017d94:	4770      	bx	lr

08017d96 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017d96:	b580      	push	{r7, lr}
 8017d98:	b084      	sub	sp, #16
 8017d9a:	af00      	add	r7, sp, #0
 8017d9c:	6039      	str	r1, [r7, #0]
 8017d9e:	4611      	mov	r1, r2
 8017da0:	461a      	mov	r2, r3
 8017da2:	4603      	mov	r3, r0
 8017da4:	71fb      	strb	r3, [r7, #7]
 8017da6:	460b      	mov	r3, r1
 8017da8:	71bb      	strb	r3, [r7, #6]
 8017daa:	4613      	mov	r3, r2
 8017dac:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017dae:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017db2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017db6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	f000 f85d 	bl	8017e7a <RegionCommonValueInRange>
 8017dc0:	4603      	mov	r3, r0
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d101      	bne.n	8017dca <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	e053      	b.n	8017e72 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017dca:	2300      	movs	r3, #0
 8017dcc:	73fb      	strb	r3, [r7, #15]
 8017dce:	2300      	movs	r3, #0
 8017dd0:	73bb      	strb	r3, [r7, #14]
 8017dd2:	e049      	b.n	8017e68 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	737b      	strb	r3, [r7, #13]
 8017dd8:	e03d      	b.n	8017e56 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017dda:	7bbb      	ldrb	r3, [r7, #14]
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	683a      	ldr	r2, [r7, #0]
 8017de0:	4413      	add	r3, r2
 8017de2:	881b      	ldrh	r3, [r3, #0]
 8017de4:	461a      	mov	r2, r3
 8017de6:	7b7b      	ldrb	r3, [r7, #13]
 8017de8:	fa42 f303 	asr.w	r3, r2, r3
 8017dec:	f003 0301 	and.w	r3, r3, #1
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d02d      	beq.n	8017e50 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017df4:	7bfa      	ldrb	r2, [r7, #15]
 8017df6:	7b7b      	ldrb	r3, [r7, #13]
 8017df8:	4413      	add	r3, r2
 8017dfa:	461a      	mov	r2, r3
 8017dfc:	4613      	mov	r3, r2
 8017dfe:	005b      	lsls	r3, r3, #1
 8017e00:	4413      	add	r3, r2
 8017e02:	009b      	lsls	r3, r3, #2
 8017e04:	461a      	mov	r2, r3
 8017e06:	69fb      	ldr	r3, [r7, #28]
 8017e08:	4413      	add	r3, r2
 8017e0a:	7a1b      	ldrb	r3, [r3, #8]
 8017e0c:	f343 0303 	sbfx	r3, r3, #0, #4
 8017e10:	b25b      	sxtb	r3, r3
 8017e12:	f003 030f 	and.w	r3, r3, #15
 8017e16:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017e18:	7bfa      	ldrb	r2, [r7, #15]
 8017e1a:	7b7b      	ldrb	r3, [r7, #13]
 8017e1c:	4413      	add	r3, r2
 8017e1e:	461a      	mov	r2, r3
 8017e20:	4613      	mov	r3, r2
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	4413      	add	r3, r2
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	461a      	mov	r2, r3
 8017e2a:	69fb      	ldr	r3, [r7, #28]
 8017e2c:	4413      	add	r3, r2
 8017e2e:	7a1b      	ldrb	r3, [r3, #8]
 8017e30:	f343 1303 	sbfx	r3, r3, #4, #4
 8017e34:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e36:	f003 030f 	and.w	r3, r3, #15
 8017e3a:	b25a      	sxtb	r2, r3
 8017e3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e40:	4618      	mov	r0, r3
 8017e42:	f000 f81a 	bl	8017e7a <RegionCommonValueInRange>
 8017e46:	4603      	mov	r3, r0
 8017e48:	2b01      	cmp	r3, #1
 8017e4a:	d101      	bne.n	8017e50 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017e4c:	2301      	movs	r3, #1
 8017e4e:	e010      	b.n	8017e72 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017e50:	7b7b      	ldrb	r3, [r7, #13]
 8017e52:	3301      	adds	r3, #1
 8017e54:	737b      	strb	r3, [r7, #13]
 8017e56:	7b7b      	ldrb	r3, [r7, #13]
 8017e58:	2b0f      	cmp	r3, #15
 8017e5a:	d9be      	bls.n	8017dda <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017e5c:	7bfb      	ldrb	r3, [r7, #15]
 8017e5e:	3310      	adds	r3, #16
 8017e60:	73fb      	strb	r3, [r7, #15]
 8017e62:	7bbb      	ldrb	r3, [r7, #14]
 8017e64:	3301      	adds	r3, #1
 8017e66:	73bb      	strb	r3, [r7, #14]
 8017e68:	7bfa      	ldrb	r2, [r7, #15]
 8017e6a:	79fb      	ldrb	r3, [r7, #7]
 8017e6c:	429a      	cmp	r2, r3
 8017e6e:	d3b1      	bcc.n	8017dd4 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017e70:	2300      	movs	r3, #0
}
 8017e72:	4618      	mov	r0, r3
 8017e74:	3710      	adds	r7, #16
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}

08017e7a <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017e7a:	b480      	push	{r7}
 8017e7c:	b083      	sub	sp, #12
 8017e7e:	af00      	add	r7, sp, #0
 8017e80:	4603      	mov	r3, r0
 8017e82:	71fb      	strb	r3, [r7, #7]
 8017e84:	460b      	mov	r3, r1
 8017e86:	71bb      	strb	r3, [r7, #6]
 8017e88:	4613      	mov	r3, r2
 8017e8a:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017e8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017e90:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e94:	429a      	cmp	r2, r3
 8017e96:	db07      	blt.n	8017ea8 <RegionCommonValueInRange+0x2e>
 8017e98:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017e9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017ea0:	429a      	cmp	r2, r3
 8017ea2:	dc01      	bgt.n	8017ea8 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017ea4:	2301      	movs	r3, #1
 8017ea6:	e000      	b.n	8017eaa <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017ea8:	2300      	movs	r3, #0
}
 8017eaa:	4618      	mov	r0, r3
 8017eac:	370c      	adds	r7, #12
 8017eae:	46bd      	mov	sp, r7
 8017eb0:	bc80      	pop	{r7}
 8017eb2:	4770      	bx	lr

08017eb4 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b085      	sub	sp, #20
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	6078      	str	r0, [r7, #4]
 8017ebc:	460b      	mov	r3, r1
 8017ebe:	70fb      	strb	r3, [r7, #3]
 8017ec0:	4613      	mov	r3, r2
 8017ec2:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017ec4:	78fb      	ldrb	r3, [r7, #3]
 8017ec6:	091b      	lsrs	r3, r3, #4
 8017ec8:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017eca:	78bb      	ldrb	r3, [r7, #2]
 8017ecc:	091b      	lsrs	r3, r3, #4
 8017ece:	b2db      	uxtb	r3, r3
 8017ed0:	7bfa      	ldrb	r2, [r7, #15]
 8017ed2:	429a      	cmp	r2, r3
 8017ed4:	d803      	bhi.n	8017ede <RegionCommonChanDisable+0x2a>
 8017ed6:	78fa      	ldrb	r2, [r7, #3]
 8017ed8:	78bb      	ldrb	r3, [r7, #2]
 8017eda:	429a      	cmp	r2, r3
 8017edc:	d301      	bcc.n	8017ee2 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	e017      	b.n	8017f12 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017ee2:	7bfb      	ldrb	r3, [r7, #15]
 8017ee4:	005b      	lsls	r3, r3, #1
 8017ee6:	687a      	ldr	r2, [r7, #4]
 8017ee8:	4413      	add	r3, r2
 8017eea:	881b      	ldrh	r3, [r3, #0]
 8017eec:	b21a      	sxth	r2, r3
 8017eee:	78fb      	ldrb	r3, [r7, #3]
 8017ef0:	f003 030f 	and.w	r3, r3, #15
 8017ef4:	2101      	movs	r1, #1
 8017ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8017efa:	b21b      	sxth	r3, r3
 8017efc:	43db      	mvns	r3, r3
 8017efe:	b21b      	sxth	r3, r3
 8017f00:	4013      	ands	r3, r2
 8017f02:	b219      	sxth	r1, r3
 8017f04:	7bfb      	ldrb	r3, [r7, #15]
 8017f06:	005b      	lsls	r3, r3, #1
 8017f08:	687a      	ldr	r2, [r7, #4]
 8017f0a:	4413      	add	r3, r2
 8017f0c:	b28a      	uxth	r2, r1
 8017f0e:	801a      	strh	r2, [r3, #0]

    return true;
 8017f10:	2301      	movs	r3, #1
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3714      	adds	r7, #20
 8017f16:	46bd      	mov	sp, r7
 8017f18:	bc80      	pop	{r7}
 8017f1a:	4770      	bx	lr

08017f1c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017f1c:	b580      	push	{r7, lr}
 8017f1e:	b084      	sub	sp, #16
 8017f20:	af00      	add	r7, sp, #0
 8017f22:	6078      	str	r0, [r7, #4]
 8017f24:	460b      	mov	r3, r1
 8017f26:	70fb      	strb	r3, [r7, #3]
 8017f28:	4613      	mov	r3, r2
 8017f2a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d101      	bne.n	8017f3a <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017f36:	2300      	movs	r3, #0
 8017f38:	e018      	b.n	8017f6c <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f3a:	78fb      	ldrb	r3, [r7, #3]
 8017f3c:	73bb      	strb	r3, [r7, #14]
 8017f3e:	e010      	b.n	8017f62 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017f40:	7bbb      	ldrb	r3, [r7, #14]
 8017f42:	005b      	lsls	r3, r3, #1
 8017f44:	687a      	ldr	r2, [r7, #4]
 8017f46:	4413      	add	r3, r2
 8017f48:	881b      	ldrh	r3, [r3, #0]
 8017f4a:	2110      	movs	r1, #16
 8017f4c:	4618      	mov	r0, r3
 8017f4e:	f7ff fef9 	bl	8017d44 <CountChannels>
 8017f52:	4603      	mov	r3, r0
 8017f54:	461a      	mov	r2, r3
 8017f56:	7bfb      	ldrb	r3, [r7, #15]
 8017f58:	4413      	add	r3, r2
 8017f5a:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f5c:	7bbb      	ldrb	r3, [r7, #14]
 8017f5e:	3301      	adds	r3, #1
 8017f60:	73bb      	strb	r3, [r7, #14]
 8017f62:	7bba      	ldrb	r2, [r7, #14]
 8017f64:	78bb      	ldrb	r3, [r7, #2]
 8017f66:	429a      	cmp	r2, r3
 8017f68:	d3ea      	bcc.n	8017f40 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f6c:	4618      	mov	r0, r3
 8017f6e:	3710      	adds	r7, #16
 8017f70:	46bd      	mov	sp, r7
 8017f72:	bd80      	pop	{r7, pc}

08017f74 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017f74:	b480      	push	{r7}
 8017f76:	b087      	sub	sp, #28
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	60f8      	str	r0, [r7, #12]
 8017f7c:	60b9      	str	r1, [r7, #8]
 8017f7e:	4613      	mov	r3, r2
 8017f80:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d016      	beq.n	8017fb6 <RegionCommonChanMaskCopy+0x42>
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d013      	beq.n	8017fb6 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017f8e:	2300      	movs	r3, #0
 8017f90:	75fb      	strb	r3, [r7, #23]
 8017f92:	e00c      	b.n	8017fae <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017f94:	7dfb      	ldrb	r3, [r7, #23]
 8017f96:	005b      	lsls	r3, r3, #1
 8017f98:	68ba      	ldr	r2, [r7, #8]
 8017f9a:	441a      	add	r2, r3
 8017f9c:	7dfb      	ldrb	r3, [r7, #23]
 8017f9e:	005b      	lsls	r3, r3, #1
 8017fa0:	68f9      	ldr	r1, [r7, #12]
 8017fa2:	440b      	add	r3, r1
 8017fa4:	8812      	ldrh	r2, [r2, #0]
 8017fa6:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017fa8:	7dfb      	ldrb	r3, [r7, #23]
 8017faa:	3301      	adds	r3, #1
 8017fac:	75fb      	strb	r3, [r7, #23]
 8017fae:	7dfa      	ldrb	r2, [r7, #23]
 8017fb0:	79fb      	ldrb	r3, [r7, #7]
 8017fb2:	429a      	cmp	r2, r3
 8017fb4:	d3ee      	bcc.n	8017f94 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017fb6:	bf00      	nop
 8017fb8:	371c      	adds	r7, #28
 8017fba:	46bd      	mov	sp, r7
 8017fbc:	bc80      	pop	{r7}
 8017fbe:	4770      	bx	lr

08017fc0 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017fc0:	b082      	sub	sp, #8
 8017fc2:	b580      	push	{r7, lr}
 8017fc4:	b086      	sub	sp, #24
 8017fc6:	af00      	add	r7, sp, #0
 8017fc8:	60f8      	str	r0, [r7, #12]
 8017fca:	60b9      	str	r1, [r7, #8]
 8017fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8017fce:	4613      	mov	r3, r2
 8017fd0:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017fd2:	79f9      	ldrb	r1, [r7, #7]
 8017fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017fd8:	cb0c      	ldmia	r3, {r2, r3}
 8017fda:	68f8      	ldr	r0, [r7, #12]
 8017fdc:	f7ff fd8c 	bl	8017af8 <GetDutyCycle>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017fe4:	68fb      	ldr	r3, [r7, #12]
 8017fe6:	68da      	ldr	r2, [r3, #12]
 8017fe8:	8afb      	ldrh	r3, [r7, #22]
 8017fea:	68b9      	ldr	r1, [r7, #8]
 8017fec:	fb01 f303 	mul.w	r3, r1, r3
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d909      	bls.n	8018008 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	68da      	ldr	r2, [r3, #12]
 8017ff8:	8afb      	ldrh	r3, [r7, #22]
 8017ffa:	68b9      	ldr	r1, [r7, #8]
 8017ffc:	fb01 f303 	mul.w	r3, r1, r3
 8018000:	1ad2      	subs	r2, r2, r3
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8018006:	e002      	b.n	801800e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	2200      	movs	r2, #0
 801800c:	60da      	str	r2, [r3, #12]
}
 801800e:	bf00      	nop
 8018010:	3718      	adds	r7, #24
 8018012:	46bd      	mov	sp, r7
 8018014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018018:	b002      	add	sp, #8
 801801a:	4770      	bx	lr

0801801c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801801c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801801e:	b08f      	sub	sp, #60	; 0x3c
 8018020:	af04      	add	r7, sp, #16
 8018022:	6039      	str	r1, [r7, #0]
 8018024:	4611      	mov	r1, r2
 8018026:	461a      	mov	r2, r3
 8018028:	4603      	mov	r3, r0
 801802a:	71fb      	strb	r3, [r7, #7]
 801802c:	460b      	mov	r3, r1
 801802e:	71bb      	strb	r3, [r7, #6]
 8018030:	4613      	mov	r3, r2
 8018032:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8018034:	f04f 33ff 	mov.w	r3, #4294967295
 8018038:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801803a:	f006 f995 	bl	801e368 <UTIL_TIMER_GetCurrentTime>
 801803e:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018040:	2300      	movs	r3, #0
 8018042:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8018044:	2301      	movs	r3, #1
 8018046:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018048:	2300      	movs	r3, #0
 801804a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 801804e:	2300      	movs	r3, #0
 8018050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8018054:	e0ba      	b.n	80181cc <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8018056:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801805a:	4613      	mov	r3, r2
 801805c:	005b      	lsls	r3, r3, #1
 801805e:	4413      	add	r3, r2
 8018060:	00db      	lsls	r3, r3, #3
 8018062:	461a      	mov	r2, r3
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	189c      	adds	r4, r3, r2
 8018068:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 801806c:	797a      	ldrb	r2, [r7, #5]
 801806e:	79fd      	ldrb	r5, [r7, #7]
 8018070:	69fb      	ldr	r3, [r7, #28]
 8018072:	9302      	str	r3, [sp, #8]
 8018074:	46ec      	mov	ip, sp
 8018076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801807a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801807e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8018082:	4633      	mov	r3, r6
 8018084:	4629      	mov	r1, r5
 8018086:	4620      	mov	r0, r4
 8018088:	f7ff fe22 	bl	8017cd0 <UpdateTimeCredits>
 801808c:	4603      	mov	r3, r0
 801808e:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8018090:	8afa      	ldrh	r2, [r7, #22]
 8018092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018094:	fb02 f303 	mul.w	r3, r2, r3
 8018098:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801809a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801809e:	4613      	mov	r3, r2
 80180a0:	005b      	lsls	r3, r3, #1
 80180a2:	4413      	add	r3, r2
 80180a4:	00db      	lsls	r3, r3, #3
 80180a6:	461a      	mov	r2, r3
 80180a8:	683b      	ldr	r3, [r7, #0]
 80180aa:	4413      	add	r3, r2
 80180ac:	68db      	ldr	r3, [r3, #12]
 80180ae:	69ba      	ldr	r2, [r7, #24]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	d908      	bls.n	80180c6 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180b4:	797b      	ldrb	r3, [r7, #5]
 80180b6:	f083 0301 	eor.w	r3, r3, #1
 80180ba:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180bc:	2b00      	cmp	r3, #0
 80180be:	d013      	beq.n	80180e8 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180c0:	79fb      	ldrb	r3, [r7, #7]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d010      	beq.n	80180e8 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80180c6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180ca:	4613      	mov	r3, r2
 80180cc:	005b      	lsls	r3, r3, #1
 80180ce:	4413      	add	r3, r2
 80180d0:	00db      	lsls	r3, r3, #3
 80180d2:	461a      	mov	r2, r3
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	4413      	add	r3, r2
 80180d8:	2201      	movs	r2, #1
 80180da:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80180dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180e0:	3301      	adds	r3, #1
 80180e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80180e6:	e06c      	b.n	80181c2 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80180e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180ec:	4613      	mov	r3, r2
 80180ee:	005b      	lsls	r3, r3, #1
 80180f0:	4413      	add	r3, r2
 80180f2:	00db      	lsls	r3, r3, #3
 80180f4:	461a      	mov	r2, r3
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	4413      	add	r3, r2
 80180fa:	2200      	movs	r2, #0
 80180fc:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80180fe:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018102:	4613      	mov	r3, r2
 8018104:	005b      	lsls	r3, r3, #1
 8018106:	4413      	add	r3, r2
 8018108:	00db      	lsls	r3, r3, #3
 801810a:	461a      	mov	r2, r3
 801810c:	683b      	ldr	r3, [r7, #0]
 801810e:	4413      	add	r3, r2
 8018110:	691b      	ldr	r3, [r3, #16]
 8018112:	69ba      	ldr	r2, [r7, #24]
 8018114:	429a      	cmp	r2, r3
 8018116:	d815      	bhi.n	8018144 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018118:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801811c:	4613      	mov	r3, r2
 801811e:	005b      	lsls	r3, r3, #1
 8018120:	4413      	add	r3, r2
 8018122:	00db      	lsls	r3, r3, #3
 8018124:	461a      	mov	r2, r3
 8018126:	683b      	ldr	r3, [r7, #0]
 8018128:	4413      	add	r3, r2
 801812a:	68db      	ldr	r3, [r3, #12]
 801812c:	69ba      	ldr	r2, [r7, #24]
 801812e:	1ad3      	subs	r3, r2, r3
 8018130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018132:	4293      	cmp	r3, r2
 8018134:	bf28      	it	cs
 8018136:	4613      	movcs	r3, r2
 8018138:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 801813a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801813e:	3301      	adds	r3, #1
 8018140:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8018144:	79fb      	ldrb	r3, [r7, #7]
 8018146:	f083 0301 	eor.w	r3, r3, #1
 801814a:	b2db      	uxtb	r3, r3
 801814c:	2b00      	cmp	r3, #0
 801814e:	d038      	beq.n	80181c2 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018150:	2300      	movs	r3, #0
 8018152:	60fb      	str	r3, [r7, #12]
 8018154:	2300      	movs	r3, #0
 8018156:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018158:	8afb      	ldrh	r3, [r7, #22]
 801815a:	2b64      	cmp	r3, #100	; 0x64
 801815c:	d103      	bne.n	8018166 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801815e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8018162:	60fb      	str	r3, [r7, #12]
 8018164:	e009      	b.n	801817a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8018166:	8afb      	ldrh	r3, [r7, #22]
 8018168:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801816c:	d103      	bne.n	8018176 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 801816e:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8018172:	60fb      	str	r3, [r7, #12]
 8018174:	e001      	b.n	801817a <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8018176:	4b1e      	ldr	r3, [pc, #120]	; (80181f0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018178:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801817a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801817c:	4a1c      	ldr	r2, [pc, #112]	; (80181f0 <RegionCommonUpdateBandTimeOff+0x1d4>)
 801817e:	4293      	cmp	r3, r2
 8018180:	d90e      	bls.n	80181a0 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8018182:	68fa      	ldr	r2, [r7, #12]
 8018184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018186:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 801818a:	3b30      	subs	r3, #48	; 0x30
 801818c:	4919      	ldr	r1, [pc, #100]	; (80181f4 <RegionCommonUpdateBandTimeOff+0x1d8>)
 801818e:	fba1 1303 	umull	r1, r3, r1, r3
 8018192:	0c1b      	lsrs	r3, r3, #16
 8018194:	3301      	adds	r3, #1
 8018196:	4918      	ldr	r1, [pc, #96]	; (80181f8 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8018198:	fb01 f303 	mul.w	r3, r1, r3
 801819c:	4413      	add	r3, r2
 801819e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80181a0:	f107 000c 	add.w	r0, r7, #12
 80181a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181a6:	9300      	str	r3, [sp, #0]
 80181a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181aa:	f107 020c 	add.w	r2, r7, #12
 80181ae:	ca06      	ldmia	r2, {r1, r2}
 80181b0:	f005 f9f1 	bl	801d596 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80181b4:	f107 030c 	add.w	r3, r7, #12
 80181b8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181bc:	f005 faaa 	bl	801d714 <SysTimeToMs>
 80181c0:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80181c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80181c6:	3301      	adds	r3, #1
 80181c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80181cc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181d0:	79bb      	ldrb	r3, [r7, #6]
 80181d2:	429a      	cmp	r2, r3
 80181d4:	f4ff af3f 	bcc.w	8018056 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80181d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d102      	bne.n	80181e6 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80181e0:	f04f 33ff 	mov.w	r3, #4294967295
 80181e4:	e000      	b.n	80181e8 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80181e8:	4618      	mov	r0, r3
 80181ea:	372c      	adds	r7, #44	; 0x2c
 80181ec:	46bd      	mov	sp, r7
 80181ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181f0:	0001ec30 	.word	0x0001ec30
 80181f4:	c22e4507 	.word	0xc22e4507
 80181f8:	00015180 	.word	0x00015180

080181fc <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80181fc:	b480      	push	{r7}
 80181fe:	b085      	sub	sp, #20
 8018200:	af00      	add	r7, sp, #0
 8018202:	6078      	str	r0, [r7, #4]
 8018204:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8018206:	2300      	movs	r3, #0
 8018208:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	781b      	ldrb	r3, [r3, #0]
 801820e:	2b03      	cmp	r3, #3
 8018210:	d13f      	bne.n	8018292 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	3301      	adds	r3, #1
 8018216:	781b      	ldrb	r3, [r3, #0]
 8018218:	b25a      	sxtb	r2, r3
 801821a:	683b      	ldr	r3, [r7, #0]
 801821c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801821e:	683b      	ldr	r3, [r7, #0]
 8018220:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018224:	f003 030f 	and.w	r3, r3, #15
 8018228:	b25a      	sxtb	r2, r3
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801822e:	683b      	ldr	r3, [r7, #0]
 8018230:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018234:	b2db      	uxtb	r3, r3
 8018236:	091b      	lsrs	r3, r3, #4
 8018238:	b2db      	uxtb	r3, r3
 801823a:	b25a      	sxtb	r2, r3
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	3302      	adds	r3, #2
 8018244:	781b      	ldrb	r3, [r3, #0]
 8018246:	b29a      	uxth	r2, r3
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 801824c:	683b      	ldr	r3, [r7, #0]
 801824e:	889b      	ldrh	r3, [r3, #4]
 8018250:	b21a      	sxth	r2, r3
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	3303      	adds	r3, #3
 8018256:	781b      	ldrb	r3, [r3, #0]
 8018258:	021b      	lsls	r3, r3, #8
 801825a:	b21b      	sxth	r3, r3
 801825c:	4313      	orrs	r3, r2
 801825e:	b21b      	sxth	r3, r3
 8018260:	b29a      	uxth	r2, r3
 8018262:	683b      	ldr	r3, [r7, #0]
 8018264:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	791a      	ldrb	r2, [r3, #4]
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 801826e:	683b      	ldr	r3, [r7, #0]
 8018270:	781b      	ldrb	r3, [r3, #0]
 8018272:	091b      	lsrs	r3, r3, #4
 8018274:	b2db      	uxtb	r3, r3
 8018276:	f003 0307 	and.w	r3, r3, #7
 801827a:	b2da      	uxtb	r2, r3
 801827c:	683b      	ldr	r3, [r7, #0]
 801827e:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018280:	683b      	ldr	r3, [r7, #0]
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	f003 030f 	and.w	r3, r3, #15
 8018288:	b2da      	uxtb	r2, r3
 801828a:	683b      	ldr	r3, [r7, #0]
 801828c:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 801828e:	2305      	movs	r3, #5
 8018290:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8018292:	7bfb      	ldrb	r3, [r7, #15]
}
 8018294:	4618      	mov	r0, r3
 8018296:	3714      	adds	r7, #20
 8018298:	46bd      	mov	sp, r7
 801829a:	bc80      	pop	{r7}
 801829c:	4770      	bx	lr

0801829e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 801829e:	b5b0      	push	{r4, r5, r7, lr}
 80182a0:	b088      	sub	sp, #32
 80182a2:	af02      	add	r7, sp, #8
 80182a4:	60f8      	str	r0, [r7, #12]
 80182a6:	60b9      	str	r1, [r7, #8]
 80182a8:	607a      	str	r2, [r7, #4]
 80182aa:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	791b      	ldrb	r3, [r3, #4]
 80182b0:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	799b      	ldrb	r3, [r3, #6]
 80182b6:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	79db      	ldrb	r3, [r3, #7]
 80182bc:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80182be:	68fb      	ldr	r3, [r7, #12]
 80182c0:	7a1b      	ldrb	r3, [r3, #8]
 80182c2:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	795b      	ldrb	r3, [r3, #5]
 80182c8:	f083 0301 	eor.w	r3, r3, #1
 80182cc:	b2db      	uxtb	r3, r3
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d008      	beq.n	80182e4 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	7adb      	ldrb	r3, [r3, #11]
 80182d6:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	7a5b      	ldrb	r3, [r3, #9]
 80182dc:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	7a9b      	ldrb	r3, [r3, #10]
 80182e2:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80182e4:	7dfb      	ldrb	r3, [r7, #23]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d04a      	beq.n	8018380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80182ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80182ee:	2b0f      	cmp	r3, #15
 80182f0:	d103      	bne.n	80182fa <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80182f2:	68fb      	ldr	r3, [r7, #12]
 80182f4:	7a5b      	ldrb	r3, [r3, #9]
 80182f6:	75bb      	strb	r3, [r7, #22]
 80182f8:	e01d      	b.n	8018336 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	7b18      	ldrb	r0, [r3, #12]
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	6919      	ldr	r1, [r3, #16]
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	f993 3015 	ldrsb.w	r3, [r3, #21]
 801830e:	68fa      	ldr	r2, [r7, #12]
 8018310:	6992      	ldr	r2, [r2, #24]
 8018312:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8018316:	9201      	str	r2, [sp, #4]
 8018318:	9300      	str	r3, [sp, #0]
 801831a:	462b      	mov	r3, r5
 801831c:	4622      	mov	r2, r4
 801831e:	f7ff fd3a 	bl	8017d96 <RegionCommonChanVerifyDr>
 8018322:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8018324:	f083 0301 	eor.w	r3, r3, #1
 8018328:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801832a:	2b00      	cmp	r3, #0
 801832c:	d003      	beq.n	8018336 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 801832e:	7dfb      	ldrb	r3, [r7, #23]
 8018330:	f023 0302 	bic.w	r3, r3, #2
 8018334:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8018336:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801833a:	2b0f      	cmp	r3, #15
 801833c:	d103      	bne.n	8018346 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	7a9b      	ldrb	r3, [r3, #10]
 8018342:	757b      	strb	r3, [r7, #21]
 8018344:	e01c      	b.n	8018380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8018346:	68fb      	ldr	r3, [r7, #12]
 8018348:	f993 101d 	ldrsb.w	r1, [r3, #29]
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8018352:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018356:	4618      	mov	r0, r3
 8018358:	f7ff fd8f 	bl	8017e7a <RegionCommonValueInRange>
 801835c:	4603      	mov	r3, r0
 801835e:	2b00      	cmp	r3, #0
 8018360:	d10e      	bne.n	8018380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8018362:	68fb      	ldr	r3, [r7, #12]
 8018364:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018368:	f997 2015 	ldrsb.w	r2, [r7, #21]
 801836c:	429a      	cmp	r2, r3
 801836e:	da03      	bge.n	8018378 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	7f5b      	ldrb	r3, [r3, #29]
 8018374:	757b      	strb	r3, [r7, #21]
 8018376:	e003      	b.n	8018380 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018378:	7dfb      	ldrb	r3, [r7, #23]
 801837a:	f023 0304 	bic.w	r3, r3, #4
 801837e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018380:	7dfb      	ldrb	r3, [r7, #23]
 8018382:	2b07      	cmp	r3, #7
 8018384:	d105      	bne.n	8018392 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8018386:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d101      	bne.n	8018392 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 801838e:	2301      	movs	r3, #1
 8018390:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	7dba      	ldrb	r2, [r7, #22]
 8018396:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	7d7a      	ldrb	r2, [r7, #21]
 801839c:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 801839e:	7d3a      	ldrb	r2, [r7, #20]
 80183a0:	683b      	ldr	r3, [r7, #0]
 80183a2:	701a      	strb	r2, [r3, #0]

    return status;
 80183a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3718      	adds	r7, #24
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080183b0 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80183b0:	b480      	push	{r7}
 80183b2:	b083      	sub	sp, #12
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	4603      	mov	r3, r0
 80183b8:	6039      	str	r1, [r7, #0]
 80183ba:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80183bc:	79fb      	ldrb	r3, [r7, #7]
 80183be:	4a06      	ldr	r2, [pc, #24]	; (80183d8 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80183c0:	fa02 f303 	lsl.w	r3, r2, r3
 80183c4:	461a      	mov	r2, r3
 80183c6:	683b      	ldr	r3, [r7, #0]
 80183c8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80183cc:	4618      	mov	r0, r3
 80183ce:	370c      	adds	r7, #12
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bc80      	pop	{r7}
 80183d4:	4770      	bx	lr
 80183d6:	bf00      	nop
 80183d8:	000f4240 	.word	0x000f4240

080183dc <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80183dc:	b480      	push	{r7}
 80183de:	b083      	sub	sp, #12
 80183e0:	af00      	add	r7, sp, #0
 80183e2:	4603      	mov	r3, r0
 80183e4:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80183e6:	79fb      	ldrb	r3, [r7, #7]
 80183e8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80183ec:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80183f0:	4618      	mov	r0, r3
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	bc80      	pop	{r7}
 80183f8:	4770      	bx	lr
	...

080183fc <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80183fc:	b480      	push	{r7}
 80183fe:	b085      	sub	sp, #20
 8018400:	af00      	add	r7, sp, #0
 8018402:	60f8      	str	r0, [r7, #12]
 8018404:	607a      	str	r2, [r7, #4]
 8018406:	603b      	str	r3, [r7, #0]
 8018408:	460b      	mov	r3, r1
 801840a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801840c:	7afa      	ldrb	r2, [r7, #11]
 801840e:	7afb      	ldrb	r3, [r7, #11]
 8018410:	3b04      	subs	r3, #4
 8018412:	4619      	mov	r1, r3
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	fb03 f101 	mul.w	r1, r3, r1
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018420:	fb00 f303 	mul.w	r3, r0, r3
 8018424:	440b      	add	r3, r1
 8018426:	005b      	lsls	r3, r3, #1
 8018428:	2b00      	cmp	r3, #0
 801842a:	d013      	beq.n	8018454 <RegionCommonComputeRxWindowParameters+0x58>
 801842c:	7afb      	ldrb	r3, [r7, #11]
 801842e:	3b04      	subs	r3, #4
 8018430:	4619      	mov	r1, r3
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	fb03 f101 	mul.w	r1, r3, r1
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801843e:	fb00 f303 	mul.w	r3, r0, r3
 8018442:	440b      	add	r3, r1
 8018444:	0059      	lsls	r1, r3, #1
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	440b      	add	r3, r1
 801844a:	1e59      	subs	r1, r3, #1
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	fbb1 f3f3 	udiv	r3, r1, r3
 8018452:	e00f      	b.n	8018474 <RegionCommonComputeRxWindowParameters+0x78>
 8018454:	7afb      	ldrb	r3, [r7, #11]
 8018456:	3b04      	subs	r3, #4
 8018458:	4619      	mov	r1, r3
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	fb03 f101 	mul.w	r1, r3, r1
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018466:	fb00 f303 	mul.w	r3, r0, r3
 801846a:	440b      	add	r3, r1
 801846c:	0059      	lsls	r1, r3, #1
 801846e:	68fb      	ldr	r3, [r7, #12]
 8018470:	fbb1 f3f3 	udiv	r3, r1, r3
 8018474:	429a      	cmp	r2, r3
 8018476:	bf38      	it	cc
 8018478:	461a      	movcc	r2, r3
 801847a:	69bb      	ldr	r3, [r7, #24]
 801847c:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	009b      	lsls	r3, r3, #2
 8018482:	4619      	mov	r1, r3
 8018484:	69bb      	ldr	r3, [r7, #24]
 8018486:	681b      	ldr	r3, [r3, #0]
 8018488:	68fa      	ldr	r2, [r7, #12]
 801848a:	fb02 f303 	mul.w	r3, r2, r3
 801848e:	2b00      	cmp	r3, #0
 8018490:	d007      	beq.n	80184a2 <RegionCommonComputeRxWindowParameters+0xa6>
 8018492:	69bb      	ldr	r3, [r7, #24]
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	68fa      	ldr	r2, [r7, #12]
 8018498:	fb02 f303 	mul.w	r3, r2, r3
 801849c:	3301      	adds	r3, #1
 801849e:	085b      	lsrs	r3, r3, #1
 80184a0:	e005      	b.n	80184ae <RegionCommonComputeRxWindowParameters+0xb2>
 80184a2:	69bb      	ldr	r3, [r7, #24]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	68fa      	ldr	r2, [r7, #12]
 80184a8:	fb02 f303 	mul.w	r3, r2, r3
 80184ac:	085b      	lsrs	r3, r3, #1
 80184ae:	1acb      	subs	r3, r1, r3
 80184b0:	683a      	ldr	r2, [r7, #0]
 80184b2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184b6:	fb01 f202 	mul.w	r2, r1, r2
 80184ba:	1a9b      	subs	r3, r3, r2
 80184bc:	2b00      	cmp	r3, #0
 80184be:	dd27      	ble.n	8018510 <RegionCommonComputeRxWindowParameters+0x114>
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	009b      	lsls	r3, r3, #2
 80184c4:	4619      	mov	r1, r3
 80184c6:	69bb      	ldr	r3, [r7, #24]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	68fa      	ldr	r2, [r7, #12]
 80184cc:	fb02 f303 	mul.w	r3, r2, r3
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d007      	beq.n	80184e4 <RegionCommonComputeRxWindowParameters+0xe8>
 80184d4:	69bb      	ldr	r3, [r7, #24]
 80184d6:	681b      	ldr	r3, [r3, #0]
 80184d8:	68fa      	ldr	r2, [r7, #12]
 80184da:	fb02 f303 	mul.w	r3, r2, r3
 80184de:	3301      	adds	r3, #1
 80184e0:	085b      	lsrs	r3, r3, #1
 80184e2:	e005      	b.n	80184f0 <RegionCommonComputeRxWindowParameters+0xf4>
 80184e4:	69bb      	ldr	r3, [r7, #24]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	68fa      	ldr	r2, [r7, #12]
 80184ea:	fb02 f303 	mul.w	r3, r2, r3
 80184ee:	085b      	lsrs	r3, r3, #1
 80184f0:	1acb      	subs	r3, r1, r3
 80184f2:	683a      	ldr	r2, [r7, #0]
 80184f4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184f8:	fb01 f202 	mul.w	r2, r1, r2
 80184fc:	1a9b      	subs	r3, r3, r2
 80184fe:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 8018502:	4a19      	ldr	r2, [pc, #100]	; (8018568 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018504:	fb82 1203 	smull	r1, r2, r2, r3
 8018508:	1192      	asrs	r2, r2, #6
 801850a:	17db      	asrs	r3, r3, #31
 801850c:	1ad3      	subs	r3, r2, r3
 801850e:	e024      	b.n	801855a <RegionCommonComputeRxWindowParameters+0x15e>
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	009b      	lsls	r3, r3, #2
 8018514:	4619      	mov	r1, r3
 8018516:	69bb      	ldr	r3, [r7, #24]
 8018518:	681b      	ldr	r3, [r3, #0]
 801851a:	68fa      	ldr	r2, [r7, #12]
 801851c:	fb02 f303 	mul.w	r3, r2, r3
 8018520:	2b00      	cmp	r3, #0
 8018522:	d007      	beq.n	8018534 <RegionCommonComputeRxWindowParameters+0x138>
 8018524:	69bb      	ldr	r3, [r7, #24]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	68fa      	ldr	r2, [r7, #12]
 801852a:	fb02 f303 	mul.w	r3, r2, r3
 801852e:	3301      	adds	r3, #1
 8018530:	085b      	lsrs	r3, r3, #1
 8018532:	e005      	b.n	8018540 <RegionCommonComputeRxWindowParameters+0x144>
 8018534:	69bb      	ldr	r3, [r7, #24]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	68fa      	ldr	r2, [r7, #12]
 801853a:	fb02 f303 	mul.w	r3, r2, r3
 801853e:	085b      	lsrs	r3, r3, #1
 8018540:	1acb      	subs	r3, r1, r3
 8018542:	683a      	ldr	r2, [r7, #0]
 8018544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018548:	fb01 f202 	mul.w	r2, r1, r2
 801854c:	1a9b      	subs	r3, r3, r2
 801854e:	4a06      	ldr	r2, [pc, #24]	; (8018568 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018550:	fb82 1203 	smull	r1, r2, r2, r3
 8018554:	1192      	asrs	r2, r2, #6
 8018556:	17db      	asrs	r3, r3, #31
 8018558:	1ad3      	subs	r3, r2, r3
 801855a:	69fa      	ldr	r2, [r7, #28]
 801855c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 801855e:	bf00      	nop
 8018560:	3714      	adds	r7, #20
 8018562:	46bd      	mov	sp, r7
 8018564:	bc80      	pop	{r7}
 8018566:	4770      	bx	lr
 8018568:	10624dd3 	.word	0x10624dd3

0801856c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b086      	sub	sp, #24
 8018570:	af00      	add	r7, sp, #0
 8018572:	4603      	mov	r3, r0
 8018574:	60b9      	str	r1, [r7, #8]
 8018576:	607a      	str	r2, [r7, #4]
 8018578:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801857a:	2300      	movs	r3, #0
 801857c:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 801857e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018582:	005b      	lsls	r3, r3, #1
 8018584:	4618      	mov	r0, r3
 8018586:	f7e8 fb33 	bl	8000bf0 <__aeabi_ui2f>
 801858a:	4603      	mov	r3, r0
 801858c:	4619      	mov	r1, r3
 801858e:	68b8      	ldr	r0, [r7, #8]
 8018590:	f7e8 fa7c 	bl	8000a8c <__aeabi_fsub>
 8018594:	4603      	mov	r3, r0
 8018596:	6879      	ldr	r1, [r7, #4]
 8018598:	4618      	mov	r0, r3
 801859a:	f7e8 fa77 	bl	8000a8c <__aeabi_fsub>
 801859e:	4603      	mov	r3, r0
 80185a0:	4618      	mov	r0, r3
 80185a2:	f7e7 ff55 	bl	8000450 <__aeabi_f2d>
 80185a6:	4602      	mov	r2, r0
 80185a8:	460b      	mov	r3, r1
 80185aa:	4610      	mov	r0, r2
 80185ac:	4619      	mov	r1, r3
 80185ae:	f006 fad7 	bl	801eb60 <floor>
 80185b2:	4602      	mov	r2, r0
 80185b4:	460b      	mov	r3, r1
 80185b6:	4610      	mov	r0, r2
 80185b8:	4619      	mov	r1, r3
 80185ba:	f7e8 fa3b 	bl	8000a34 <__aeabi_d2iz>
 80185be:	4603      	mov	r3, r0
 80185c0:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80185c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3718      	adds	r7, #24
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}

080185ce <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80185ce:	b590      	push	{r4, r7, lr}
 80185d0:	b087      	sub	sp, #28
 80185d2:	af00      	add	r7, sp, #0
 80185d4:	60f8      	str	r0, [r7, #12]
 80185d6:	60b9      	str	r1, [r7, #8]
 80185d8:	607a      	str	r2, [r7, #4]
 80185da:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80185dc:	2300      	movs	r3, #0
 80185de:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80185e0:	2300      	movs	r3, #0
 80185e2:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80185e4:	2300      	movs	r3, #0
 80185e6:	757b      	strb	r3, [r7, #21]
 80185e8:	2300      	movs	r3, #0
 80185ea:	753b      	strb	r3, [r7, #20]
 80185ec:	e09c      	b.n	8018728 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80185ee:	2300      	movs	r3, #0
 80185f0:	74fb      	strb	r3, [r7, #19]
 80185f2:	e08f      	b.n	8018714 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	685a      	ldr	r2, [r3, #4]
 80185f8:	7d3b      	ldrb	r3, [r7, #20]
 80185fa:	005b      	lsls	r3, r3, #1
 80185fc:	4413      	add	r3, r2
 80185fe:	881b      	ldrh	r3, [r3, #0]
 8018600:	461a      	mov	r2, r3
 8018602:	7cfb      	ldrb	r3, [r7, #19]
 8018604:	fa42 f303 	asr.w	r3, r2, r3
 8018608:	f003 0301 	and.w	r3, r3, #1
 801860c:	2b00      	cmp	r3, #0
 801860e:	d07e      	beq.n	801870e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	689a      	ldr	r2, [r3, #8]
 8018614:	7d79      	ldrb	r1, [r7, #21]
 8018616:	7cfb      	ldrb	r3, [r7, #19]
 8018618:	440b      	add	r3, r1
 801861a:	4619      	mov	r1, r3
 801861c:	460b      	mov	r3, r1
 801861e:	005b      	lsls	r3, r3, #1
 8018620:	440b      	add	r3, r1
 8018622:	009b      	lsls	r3, r3, #2
 8018624:	4413      	add	r3, r2
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d06b      	beq.n	8018704 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801862c:	68fb      	ldr	r3, [r7, #12]
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	f083 0301 	eor.w	r3, r3, #1
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d011      	beq.n	801865e <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801863e:	2b00      	cmp	r3, #0
 8018640:	d00d      	beq.n	801865e <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8018642:	68fb      	ldr	r3, [r7, #12]
 8018644:	695a      	ldr	r2, [r3, #20]
 8018646:	7d3b      	ldrb	r3, [r7, #20]
 8018648:	005b      	lsls	r3, r3, #1
 801864a:	4413      	add	r3, r2
 801864c:	881b      	ldrh	r3, [r3, #0]
 801864e:	461a      	mov	r2, r3
 8018650:	7cfb      	ldrb	r3, [r7, #19]
 8018652:	fa42 f303 	asr.w	r3, r2, r3
 8018656:	f003 0301 	and.w	r3, r3, #1
 801865a:	2b00      	cmp	r3, #0
 801865c:	d054      	beq.n	8018708 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801865e:	68fb      	ldr	r3, [r7, #12]
 8018660:	785b      	ldrb	r3, [r3, #1]
 8018662:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8018664:	68fb      	ldr	r3, [r7, #12]
 8018666:	689a      	ldr	r2, [r3, #8]
 8018668:	7d79      	ldrb	r1, [r7, #21]
 801866a:	7cfb      	ldrb	r3, [r7, #19]
 801866c:	440b      	add	r3, r1
 801866e:	4619      	mov	r1, r3
 8018670:	460b      	mov	r3, r1
 8018672:	005b      	lsls	r3, r3, #1
 8018674:	440b      	add	r3, r1
 8018676:	009b      	lsls	r3, r3, #2
 8018678:	4413      	add	r3, r2
 801867a:	7a1b      	ldrb	r3, [r3, #8]
 801867c:	f343 0303 	sbfx	r3, r3, #0, #4
 8018680:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018682:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	689a      	ldr	r2, [r3, #8]
 8018688:	7d79      	ldrb	r1, [r7, #21]
 801868a:	7cfb      	ldrb	r3, [r7, #19]
 801868c:	440b      	add	r3, r1
 801868e:	4619      	mov	r1, r3
 8018690:	460b      	mov	r3, r1
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	440b      	add	r3, r1
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	4413      	add	r3, r2
 801869a:	7a1b      	ldrb	r3, [r3, #8]
 801869c:	f343 1303 	sbfx	r3, r3, #4, #4
 80186a0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186a2:	461a      	mov	r2, r3
 80186a4:	4621      	mov	r1, r4
 80186a6:	f7ff fbe8 	bl	8017e7a <RegionCommonValueInRange>
 80186aa:	4603      	mov	r3, r0
 80186ac:	2b00      	cmp	r3, #0
 80186ae:	d02d      	beq.n	801870c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80186b0:	68fb      	ldr	r3, [r7, #12]
 80186b2:	68da      	ldr	r2, [r3, #12]
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	6899      	ldr	r1, [r3, #8]
 80186b8:	7d78      	ldrb	r0, [r7, #21]
 80186ba:	7cfb      	ldrb	r3, [r7, #19]
 80186bc:	4403      	add	r3, r0
 80186be:	4618      	mov	r0, r3
 80186c0:	4603      	mov	r3, r0
 80186c2:	005b      	lsls	r3, r3, #1
 80186c4:	4403      	add	r3, r0
 80186c6:	009b      	lsls	r3, r3, #2
 80186c8:	440b      	add	r3, r1
 80186ca:	7a5b      	ldrb	r3, [r3, #9]
 80186cc:	4619      	mov	r1, r3
 80186ce:	460b      	mov	r3, r1
 80186d0:	005b      	lsls	r3, r3, #1
 80186d2:	440b      	add	r3, r1
 80186d4:	00db      	lsls	r3, r3, #3
 80186d6:	4413      	add	r3, r2
 80186d8:	7d1b      	ldrb	r3, [r3, #20]
 80186da:	f083 0301 	eor.w	r3, r3, #1
 80186de:	b2db      	uxtb	r3, r3
 80186e0:	2b00      	cmp	r3, #0
 80186e2:	d003      	beq.n	80186ec <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80186e4:	7dbb      	ldrb	r3, [r7, #22]
 80186e6:	3301      	adds	r3, #1
 80186e8:	75bb      	strb	r3, [r7, #22]
                    continue;
 80186ea:	e010      	b.n	801870e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80186ec:	7dfb      	ldrb	r3, [r7, #23]
 80186ee:	1c5a      	adds	r2, r3, #1
 80186f0:	75fa      	strb	r2, [r7, #23]
 80186f2:	461a      	mov	r2, r3
 80186f4:	68bb      	ldr	r3, [r7, #8]
 80186f6:	4413      	add	r3, r2
 80186f8:	7d79      	ldrb	r1, [r7, #21]
 80186fa:	7cfa      	ldrb	r2, [r7, #19]
 80186fc:	440a      	add	r2, r1
 80186fe:	b2d2      	uxtb	r2, r2
 8018700:	701a      	strb	r2, [r3, #0]
 8018702:	e004      	b.n	801870e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018704:	bf00      	nop
 8018706:	e002      	b.n	801870e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018708:	bf00      	nop
 801870a:	e000      	b.n	801870e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801870c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 801870e:	7cfb      	ldrb	r3, [r7, #19]
 8018710:	3301      	adds	r3, #1
 8018712:	74fb      	strb	r3, [r7, #19]
 8018714:	7cfb      	ldrb	r3, [r7, #19]
 8018716:	2b0f      	cmp	r3, #15
 8018718:	f67f af6c 	bls.w	80185f4 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801871c:	7d7b      	ldrb	r3, [r7, #21]
 801871e:	3310      	adds	r3, #16
 8018720:	757b      	strb	r3, [r7, #21]
 8018722:	7d3b      	ldrb	r3, [r7, #20]
 8018724:	3301      	adds	r3, #1
 8018726:	753b      	strb	r3, [r7, #20]
 8018728:	7d7b      	ldrb	r3, [r7, #21]
 801872a:	b29a      	uxth	r2, r3
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	8a1b      	ldrh	r3, [r3, #16]
 8018730:	429a      	cmp	r2, r3
 8018732:	f4ff af5c 	bcc.w	80185ee <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	7dfa      	ldrb	r2, [r7, #23]
 801873a:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 801873c:	683b      	ldr	r3, [r7, #0]
 801873e:	7dba      	ldrb	r2, [r7, #22]
 8018740:	701a      	strb	r2, [r3, #0]
}
 8018742:	bf00      	nop
 8018744:	371c      	adds	r7, #28
 8018746:	46bd      	mov	sp, r7
 8018748:	bd90      	pop	{r4, r7, pc}

0801874a <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801874a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801874c:	b08b      	sub	sp, #44	; 0x2c
 801874e:	af04      	add	r7, sp, #16
 8018750:	60f8      	str	r0, [r7, #12]
 8018752:	60b9      	str	r1, [r7, #8]
 8018754:	607a      	str	r2, [r7, #4]
 8018756:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	685b      	ldr	r3, [r3, #4]
 801875c:	4618      	mov	r0, r3
 801875e:	f005 fe15 	bl	801e38c <UTIL_TIMER_GetElapsedTime>
 8018762:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681a      	ldr	r2, [r3, #0]
 8018768:	697b      	ldr	r3, [r7, #20]
 801876a:	1ad2      	subs	r2, r2, r3
 801876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801876e:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018772:	2201      	movs	r2, #1
 8018774:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	2200      	movs	r2, #0
 801877a:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	685b      	ldr	r3, [r3, #4]
 8018780:	2b00      	cmp	r3, #0
 8018782:	d004      	beq.n	801878e <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018788:	697a      	ldr	r2, [r7, #20]
 801878a:	429a      	cmp	r2, r3
 801878c:	d32b      	bcc.n	80187e6 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801878e:	68bb      	ldr	r3, [r7, #8]
 8018790:	2200      	movs	r2, #0
 8018792:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	69db      	ldr	r3, [r3, #28]
 8018798:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801879e:	68dd      	ldr	r5, [r3, #12]
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	7a5e      	ldrb	r6, [r3, #9]
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	f893 c008 	ldrb.w	ip, [r3, #8]
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	7d1b      	ldrb	r3, [r3, #20]
 80187ae:	68fa      	ldr	r2, [r7, #12]
 80187b0:	6992      	ldr	r2, [r2, #24]
 80187b2:	9203      	str	r2, [sp, #12]
 80187b4:	68fa      	ldr	r2, [r7, #12]
 80187b6:	f10d 0e04 	add.w	lr, sp, #4
 80187ba:	320c      	adds	r2, #12
 80187bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187c0:	e88e 0003 	stmia.w	lr, {r0, r1}
 80187c4:	9300      	str	r3, [sp, #0]
 80187c6:	4663      	mov	r3, ip
 80187c8:	4632      	mov	r2, r6
 80187ca:	4629      	mov	r1, r5
 80187cc:	4620      	mov	r0, r4
 80187ce:	f7ff fc25 	bl	801801c <RegionCommonUpdateBandTimeOff>
 80187d2:	4602      	mov	r2, r0
 80187d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187d6:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	69d8      	ldr	r0, [r3, #28]
 80187dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187de:	683a      	ldr	r2, [r7, #0]
 80187e0:	6879      	ldr	r1, [r7, #4]
 80187e2:	f7ff fef4 	bl	80185ce <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80187e6:	683b      	ldr	r3, [r7, #0]
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d004      	beq.n	80187f8 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80187ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187f0:	2200      	movs	r2, #0
 80187f2:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80187f4:	2300      	movs	r3, #0
 80187f6:	e006      	b.n	8018806 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80187f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fa:	781b      	ldrb	r3, [r3, #0]
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d001      	beq.n	8018804 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018800:	230b      	movs	r3, #11
 8018802:	e000      	b.n	8018806 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8018804:	230c      	movs	r3, #12
    }
}
 8018806:	4618      	mov	r0, r3
 8018808:	371c      	adds	r7, #28
 801880a:	46bd      	mov	sp, r7
 801880c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801880e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 801880e:	b5b0      	push	{r4, r5, r7, lr}
 8018810:	b086      	sub	sp, #24
 8018812:	af02      	add	r7, sp, #8
 8018814:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	f993 2000 	ldrsb.w	r2, [r3]
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018828:	429a      	cmp	r2, r3
 801882a:	d103      	bne.n	8018834 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018832:	e026      	b.n	8018882 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8018834:	7bfb      	ldrb	r3, [r7, #15]
 8018836:	3b01      	subs	r3, #1
 8018838:	b2db      	uxtb	r3, r3
 801883a:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018842:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8018846:	429a      	cmp	r2, r3
 8018848:	d019      	beq.n	801887e <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	78d8      	ldrb	r0, [r3, #3]
 801884e:	687b      	ldr	r3, [r7, #4]
 8018850:	6859      	ldr	r1, [r3, #4]
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801885e:	687a      	ldr	r2, [r7, #4]
 8018860:	6892      	ldr	r2, [r2, #8]
 8018862:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8018866:	9201      	str	r2, [sp, #4]
 8018868:	9300      	str	r3, [sp, #0]
 801886a:	462b      	mov	r3, r5
 801886c:	4622      	mov	r2, r4
 801886e:	f7ff fa92 	bl	8017d96 <RegionCommonChanVerifyDr>
 8018872:	4603      	mov	r3, r0
 8018874:	f083 0301 	eor.w	r3, r3, #1
 8018878:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801887a:	2b00      	cmp	r3, #0
 801887c:	d1da      	bne.n	8018834 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 801887e:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8018882:	4618      	mov	r0, r3
 8018884:	3710      	adds	r7, #16
 8018886:	46bd      	mov	sp, r7
 8018888:	bdb0      	pop	{r4, r5, r7, pc}

0801888a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801888a:	b480      	push	{r7}
 801888c:	b083      	sub	sp, #12
 801888e:	af00      	add	r7, sp, #0
 8018890:	4603      	mov	r3, r0
 8018892:	460a      	mov	r2, r1
 8018894:	71fb      	strb	r3, [r7, #7]
 8018896:	4613      	mov	r3, r2
 8018898:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 801889a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801889e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188a2:	4293      	cmp	r3, r2
 80188a4:	bfb8      	it	lt
 80188a6:	4613      	movlt	r3, r2
 80188a8:	b25b      	sxtb	r3, r3
}
 80188aa:	4618      	mov	r0, r3
 80188ac:	370c      	adds	r7, #12
 80188ae:	46bd      	mov	sp, r7
 80188b0:	bc80      	pop	{r7}
 80188b2:	4770      	bx	lr

080188b4 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80188b4:	b480      	push	{r7}
 80188b6:	b083      	sub	sp, #12
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	009b      	lsls	r3, r3, #2
 80188c2:	683a      	ldr	r2, [r7, #0]
 80188c4:	4413      	add	r3, r2
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	4a07      	ldr	r2, [pc, #28]	; (80188e8 <RegionCommonGetBandwidth+0x34>)
 80188ca:	4293      	cmp	r3, r2
 80188cc:	d004      	beq.n	80188d8 <RegionCommonGetBandwidth+0x24>
 80188ce:	4a07      	ldr	r2, [pc, #28]	; (80188ec <RegionCommonGetBandwidth+0x38>)
 80188d0:	4293      	cmp	r3, r2
 80188d2:	d003      	beq.n	80188dc <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80188d4:	2300      	movs	r3, #0
 80188d6:	e002      	b.n	80188de <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80188d8:	2301      	movs	r3, #1
 80188da:	e000      	b.n	80188de <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80188dc:	2302      	movs	r3, #2
    }
}
 80188de:	4618      	mov	r0, r3
 80188e0:	370c      	adds	r7, #12
 80188e2:	46bd      	mov	sp, r7
 80188e4:	bc80      	pop	{r7}
 80188e6:	4770      	bx	lr
 80188e8:	0003d090 	.word	0x0003d090
 80188ec:	0007a120 	.word	0x0007a120

080188f0 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80188f0:	b580      	push	{r7, lr}
 80188f2:	b086      	sub	sp, #24
 80188f4:	af04      	add	r7, sp, #16
 80188f6:	4603      	mov	r3, r0
 80188f8:	6039      	str	r1, [r7, #0]
 80188fa:	71fb      	strb	r3, [r7, #7]
 80188fc:	4613      	mov	r3, r2
 80188fe:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018900:	79fb      	ldrb	r3, [r7, #7]
 8018902:	2b05      	cmp	r3, #5
 8018904:	d810      	bhi.n	8018928 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8018906:	79fb      	ldrb	r3, [r7, #7]
 8018908:	4a0f      	ldr	r2, [pc, #60]	; (8018948 <RegionCommonRxConfigPrint+0x58>)
 801890a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801890e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8018912:	9202      	str	r2, [sp, #8]
 8018914:	683a      	ldr	r2, [r7, #0]
 8018916:	9201      	str	r2, [sp, #4]
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	4b0c      	ldr	r3, [pc, #48]	; (801894c <RegionCommonRxConfigPrint+0x5c>)
 801891c:	2201      	movs	r2, #1
 801891e:	2100      	movs	r1, #0
 8018920:	2002      	movs	r0, #2
 8018922:	f005 fe11 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8018926:	e00a      	b.n	801893e <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018928:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801892c:	9301      	str	r3, [sp, #4]
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	4b07      	ldr	r3, [pc, #28]	; (8018950 <RegionCommonRxConfigPrint+0x60>)
 8018934:	2201      	movs	r2, #1
 8018936:	2100      	movs	r1, #0
 8018938:	2002      	movs	r0, #2
 801893a:	f005 fe05 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 801893e:	bf00      	nop
 8018940:	3708      	adds	r7, #8
 8018942:	46bd      	mov	sp, r7
 8018944:	bd80      	pop	{r7, pc}
 8018946:	bf00      	nop
 8018948:	20000130 	.word	0x20000130
 801894c:	0801f378 	.word	0x0801f378
 8018950:	0801f398 	.word	0x0801f398

08018954 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b084      	sub	sp, #16
 8018958:	af02      	add	r7, sp, #8
 801895a:	6078      	str	r0, [r7, #4]
 801895c:	460b      	mov	r3, r1
 801895e:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018964:	9301      	str	r3, [sp, #4]
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	9300      	str	r3, [sp, #0]
 801896a:	4b05      	ldr	r3, [pc, #20]	; (8018980 <RegionCommonTxConfigPrint+0x2c>)
 801896c:	2201      	movs	r2, #1
 801896e:	2100      	movs	r1, #0
 8018970:	2002      	movs	r0, #2
 8018972:	f005 fde9 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
}
 8018976:	bf00      	nop
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	0801f3b4 	.word	0x0801f3b4

08018984 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b082      	sub	sp, #8
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
 801898c:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 801898e:	4b2d      	ldr	r3, [pc, #180]	; (8018a44 <VerifyRfFreq+0xc0>)
 8018990:	6a1b      	ldr	r3, [r3, #32]
 8018992:	6878      	ldr	r0, [r7, #4]
 8018994:	4798      	blx	r3
 8018996:	4603      	mov	r3, r0
 8018998:	f083 0301 	eor.w	r3, r3, #1
 801899c:	b2db      	uxtb	r3, r3
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d001      	beq.n	80189a6 <VerifyRfFreq+0x22>
    {
        return false;
 80189a2:	2300      	movs	r3, #0
 80189a4:	e04a      	b.n	8018a3c <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80189a6:	687b      	ldr	r3, [r7, #4]
 80189a8:	4a27      	ldr	r2, [pc, #156]	; (8018a48 <VerifyRfFreq+0xc4>)
 80189aa:	4293      	cmp	r3, r2
 80189ac:	d307      	bcc.n	80189be <VerifyRfFreq+0x3a>
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	4a26      	ldr	r2, [pc, #152]	; (8018a4c <VerifyRfFreq+0xc8>)
 80189b2:	4293      	cmp	r3, r2
 80189b4:	d803      	bhi.n	80189be <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80189b6:	683b      	ldr	r3, [r7, #0]
 80189b8:	2202      	movs	r2, #2
 80189ba:	701a      	strb	r2, [r3, #0]
 80189bc:	e03d      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4a22      	ldr	r2, [pc, #136]	; (8018a4c <VerifyRfFreq+0xc8>)
 80189c2:	4293      	cmp	r3, r2
 80189c4:	d907      	bls.n	80189d6 <VerifyRfFreq+0x52>
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4a21      	ldr	r2, [pc, #132]	; (8018a50 <VerifyRfFreq+0xcc>)
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d803      	bhi.n	80189d6 <VerifyRfFreq+0x52>
    {
        *band = 0;
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	2200      	movs	r2, #0
 80189d2:	701a      	strb	r2, [r3, #0]
 80189d4:	e031      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4a1d      	ldr	r2, [pc, #116]	; (8018a50 <VerifyRfFreq+0xcc>)
 80189da:	4293      	cmp	r3, r2
 80189dc:	d907      	bls.n	80189ee <VerifyRfFreq+0x6a>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4a1c      	ldr	r2, [pc, #112]	; (8018a54 <VerifyRfFreq+0xd0>)
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d803      	bhi.n	80189ee <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	2201      	movs	r2, #1
 80189ea:	701a      	strb	r2, [r3, #0]
 80189ec:	e025      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	4a19      	ldr	r2, [pc, #100]	; (8018a58 <VerifyRfFreq+0xd4>)
 80189f2:	4293      	cmp	r3, r2
 80189f4:	d907      	bls.n	8018a06 <VerifyRfFreq+0x82>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	4a18      	ldr	r2, [pc, #96]	; (8018a5c <VerifyRfFreq+0xd8>)
 80189fa:	4293      	cmp	r3, r2
 80189fc:	d803      	bhi.n	8018a06 <VerifyRfFreq+0x82>
    {
        *band = 5;
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	2205      	movs	r2, #5
 8018a02:	701a      	strb	r2, [r3, #0]
 8018a04:	e019      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	4a15      	ldr	r2, [pc, #84]	; (8018a60 <VerifyRfFreq+0xdc>)
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d907      	bls.n	8018a1e <VerifyRfFreq+0x9a>
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4a14      	ldr	r2, [pc, #80]	; (8018a64 <VerifyRfFreq+0xe0>)
 8018a12:	4293      	cmp	r3, r2
 8018a14:	d803      	bhi.n	8018a1e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	2203      	movs	r2, #3
 8018a1a:	701a      	strb	r2, [r3, #0]
 8018a1c:	e00d      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	4a11      	ldr	r2, [pc, #68]	; (8018a68 <VerifyRfFreq+0xe4>)
 8018a22:	4293      	cmp	r3, r2
 8018a24:	d307      	bcc.n	8018a36 <VerifyRfFreq+0xb2>
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	4a10      	ldr	r2, [pc, #64]	; (8018a6c <VerifyRfFreq+0xe8>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d803      	bhi.n	8018a36 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	2204      	movs	r2, #4
 8018a32:	701a      	strb	r2, [r3, #0]
 8018a34:	e001      	b.n	8018a3a <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018a36:	2300      	movs	r3, #0
 8018a38:	e000      	b.n	8018a3c <VerifyRfFreq+0xb8>
    }
    return true;
 8018a3a:	2301      	movs	r3, #1
}
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	3708      	adds	r7, #8
 8018a40:	46bd      	mov	sp, r7
 8018a42:	bd80      	pop	{r7, pc}
 8018a44:	0801f9d8 	.word	0x0801f9d8
 8018a48:	337055c0 	.word	0x337055c0
 8018a4c:	338eda3f 	.word	0x338eda3f
 8018a50:	33bca100 	.word	0x33bca100
 8018a54:	33c5c8c0 	.word	0x33c5c8c0
 8018a58:	33c74f5f 	.word	0x33c74f5f
 8018a5c:	33cef080 	.word	0x33cef080
 8018a60:	33d1fdbf 	.word	0x33d1fdbf
 8018a64:	33d5ce50 	.word	0x33d5ce50
 8018a68:	33d691a0 	.word	0x33d691a0
 8018a6c:	33db2580 	.word	0x33db2580

08018a70 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018a70:	b590      	push	{r4, r7, lr}
 8018a72:	b08b      	sub	sp, #44	; 0x2c
 8018a74:	af04      	add	r7, sp, #16
 8018a76:	4603      	mov	r3, r0
 8018a78:	460a      	mov	r2, r1
 8018a7a:	71fb      	strb	r3, [r7, #7]
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a84:	4a1f      	ldr	r2, [pc, #124]	; (8018b04 <GetTimeOnAir+0x94>)
 8018a86:	5cd3      	ldrb	r3, [r2, r3]
 8018a88:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a8e:	491e      	ldr	r1, [pc, #120]	; (8018b08 <GetTimeOnAir+0x98>)
 8018a90:	4618      	mov	r0, r3
 8018a92:	f7ff ff0f 	bl	80188b4 <RegionCommonGetBandwidth>
 8018a96:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018aa0:	2b07      	cmp	r3, #7
 8018aa2:	d118      	bne.n	8018ad6 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018aa4:	4b19      	ldr	r3, [pc, #100]	; (8018b0c <GetTimeOnAir+0x9c>)
 8018aa6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018aa8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ab0:	fb02 f303 	mul.w	r3, r2, r3
 8018ab4:	4619      	mov	r1, r3
 8018ab6:	88bb      	ldrh	r3, [r7, #4]
 8018ab8:	b2db      	uxtb	r3, r3
 8018aba:	2201      	movs	r2, #1
 8018abc:	9203      	str	r2, [sp, #12]
 8018abe:	9302      	str	r3, [sp, #8]
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	9301      	str	r3, [sp, #4]
 8018ac4:	2305      	movs	r3, #5
 8018ac6:	9300      	str	r3, [sp, #0]
 8018ac8:	2300      	movs	r3, #0
 8018aca:	460a      	mov	r2, r1
 8018acc:	68f9      	ldr	r1, [r7, #12]
 8018ace:	2000      	movs	r0, #0
 8018ad0:	47a0      	blx	r4
 8018ad2:	6178      	str	r0, [r7, #20]
 8018ad4:	e011      	b.n	8018afa <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018ad6:	4b0d      	ldr	r3, [pc, #52]	; (8018b0c <GetTimeOnAir+0x9c>)
 8018ad8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018ada:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018ade:	88bb      	ldrh	r3, [r7, #4]
 8018ae0:	b2db      	uxtb	r3, r3
 8018ae2:	2101      	movs	r1, #1
 8018ae4:	9103      	str	r1, [sp, #12]
 8018ae6:	9302      	str	r3, [sp, #8]
 8018ae8:	2300      	movs	r3, #0
 8018aea:	9301      	str	r3, [sp, #4]
 8018aec:	2308      	movs	r3, #8
 8018aee:	9300      	str	r3, [sp, #0]
 8018af0:	2301      	movs	r3, #1
 8018af2:	68f9      	ldr	r1, [r7, #12]
 8018af4:	2001      	movs	r0, #1
 8018af6:	47a0      	blx	r4
 8018af8:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018afa:	697b      	ldr	r3, [r7, #20]
}
 8018afc:	4618      	mov	r0, r3
 8018afe:	371c      	adds	r7, #28
 8018b00:	46bd      	mov	sp, r7
 8018b02:	bd90      	pop	{r4, r7, pc}
 8018b04:	0801f9a0 	.word	0x0801f9a0
 8018b08:	0801f9a8 	.word	0x0801f9a8
 8018b0c:	0801f9d8 	.word	0x0801f9d8

08018b10 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b088      	sub	sp, #32
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018b18:	2300      	movs	r3, #0
 8018b1a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	781b      	ldrb	r3, [r3, #0]
 8018b20:	3b01      	subs	r3, #1
 8018b22:	2b38      	cmp	r3, #56	; 0x38
 8018b24:	f200 8128 	bhi.w	8018d78 <RegionEU868GetPhyParam+0x268>
 8018b28:	a201      	add	r2, pc, #4	; (adr r2, 8018b30 <RegionEU868GetPhyParam+0x20>)
 8018b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b2e:	bf00      	nop
 8018b30:	08018c15 	.word	0x08018c15
 8018b34:	08018c1b 	.word	0x08018c1b
 8018b38:	08018d79 	.word	0x08018d79
 8018b3c:	08018d79 	.word	0x08018d79
 8018b40:	08018d79 	.word	0x08018d79
 8018b44:	08018c21 	.word	0x08018c21
 8018b48:	08018d79 	.word	0x08018d79
 8018b4c:	08018c5b 	.word	0x08018c5b
 8018b50:	08018d79 	.word	0x08018d79
 8018b54:	08018c61 	.word	0x08018c61
 8018b58:	08018c67 	.word	0x08018c67
 8018b5c:	08018c6d 	.word	0x08018c6d
 8018b60:	08018c73 	.word	0x08018c73
 8018b64:	08018c83 	.word	0x08018c83
 8018b68:	08018c93 	.word	0x08018c93
 8018b6c:	08018c99 	.word	0x08018c99
 8018b70:	08018ca1 	.word	0x08018ca1
 8018b74:	08018ca9 	.word	0x08018ca9
 8018b78:	08018cb1 	.word	0x08018cb1
 8018b7c:	08018cb9 	.word	0x08018cb9
 8018b80:	08018cc1 	.word	0x08018cc1
 8018b84:	08018cc9 	.word	0x08018cc9
 8018b88:	08018cdd 	.word	0x08018cdd
 8018b8c:	08018ce3 	.word	0x08018ce3
 8018b90:	08018ce9 	.word	0x08018ce9
 8018b94:	08018cef 	.word	0x08018cef
 8018b98:	08018cfb 	.word	0x08018cfb
 8018b9c:	08018d07 	.word	0x08018d07
 8018ba0:	08018d0d 	.word	0x08018d0d
 8018ba4:	08018d15 	.word	0x08018d15
 8018ba8:	08018d1b 	.word	0x08018d1b
 8018bac:	08018d21 	.word	0x08018d21
 8018bb0:	08018d29 	.word	0x08018d29
 8018bb4:	08018c27 	.word	0x08018c27
 8018bb8:	08018d79 	.word	0x08018d79
 8018bbc:	08018d79 	.word	0x08018d79
 8018bc0:	08018d79 	.word	0x08018d79
 8018bc4:	08018d79 	.word	0x08018d79
 8018bc8:	08018d79 	.word	0x08018d79
 8018bcc:	08018d79 	.word	0x08018d79
 8018bd0:	08018d79 	.word	0x08018d79
 8018bd4:	08018d79 	.word	0x08018d79
 8018bd8:	08018d79 	.word	0x08018d79
 8018bdc:	08018d79 	.word	0x08018d79
 8018be0:	08018d79 	.word	0x08018d79
 8018be4:	08018d79 	.word	0x08018d79
 8018be8:	08018d79 	.word	0x08018d79
 8018bec:	08018d2f 	.word	0x08018d2f
 8018bf0:	08018d35 	.word	0x08018d35
 8018bf4:	08018d43 	.word	0x08018d43
 8018bf8:	08018d79 	.word	0x08018d79
 8018bfc:	08018d79 	.word	0x08018d79
 8018c00:	08018d49 	.word	0x08018d49
 8018c04:	08018d4f 	.word	0x08018d4f
 8018c08:	08018d79 	.word	0x08018d79
 8018c0c:	08018d55 	.word	0x08018d55
 8018c10:	08018d65 	.word	0x08018d65
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018c14:	2300      	movs	r3, #0
 8018c16:	61bb      	str	r3, [r7, #24]
            break;
 8018c18:	e0af      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018c1a:	2300      	movs	r3, #0
 8018c1c:	61bb      	str	r3, [r7, #24]
            break;
 8018c1e:	e0ac      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018c20:	2300      	movs	r3, #0
 8018c22:	61bb      	str	r3, [r7, #24]
            break;
 8018c24:	e0a9      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c2c:	733b      	strb	r3, [r7, #12]
 8018c2e:	2307      	movs	r3, #7
 8018c30:	737b      	strb	r3, [r7, #13]
 8018c32:	2300      	movs	r3, #0
 8018c34:	73bb      	strb	r3, [r7, #14]
 8018c36:	2310      	movs	r3, #16
 8018c38:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018c3a:	4b53      	ldr	r3, [pc, #332]	; (8018d88 <RegionEU868GetPhyParam+0x278>)
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c42:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018c44:	4b50      	ldr	r3, [pc, #320]	; (8018d88 <RegionEU868GetPhyParam+0x278>)
 8018c46:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c48:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018c4a:	f107 030c 	add.w	r3, r7, #12
 8018c4e:	4618      	mov	r0, r3
 8018c50:	f7ff fddd 	bl	801880e <RegionCommonGetNextLowerTxDr>
 8018c54:	4603      	mov	r3, r0
 8018c56:	61bb      	str	r3, [r7, #24]
            break;
 8018c58:	e08f      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018c5a:	2300      	movs	r3, #0
 8018c5c:	61bb      	str	r3, [r7, #24]
            break;
 8018c5e:	e08c      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018c60:	2300      	movs	r3, #0
 8018c62:	61bb      	str	r3, [r7, #24]
            break;
 8018c64:	e089      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018c66:	2340      	movs	r3, #64	; 0x40
 8018c68:	61bb      	str	r3, [r7, #24]
            break;
 8018c6a:	e086      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018c6c:	2320      	movs	r3, #32
 8018c6e:	61bb      	str	r3, [r7, #24]
            break;
 8018c70:	e083      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c78:	461a      	mov	r2, r3
 8018c7a:	4b44      	ldr	r3, [pc, #272]	; (8018d8c <RegionEU868GetPhyParam+0x27c>)
 8018c7c:	5c9b      	ldrb	r3, [r3, r2]
 8018c7e:	61bb      	str	r3, [r7, #24]
            break;
 8018c80:	e07b      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c88:	461a      	mov	r2, r3
 8018c8a:	4b41      	ldr	r3, [pc, #260]	; (8018d90 <RegionEU868GetPhyParam+0x280>)
 8018c8c:	5c9b      	ldrb	r3, [r3, r2]
 8018c8e:	61bb      	str	r3, [r7, #24]
            break;
 8018c90:	e073      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018c92:	2301      	movs	r3, #1
 8018c94:	61bb      	str	r3, [r7, #24]
            break;
 8018c96:	e070      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018c98:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018c9c:	61bb      	str	r3, [r7, #24]
            break;
 8018c9e:	e06c      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018ca0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018ca4:	61bb      	str	r3, [r7, #24]
            break;
 8018ca6:	e068      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018ca8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018cac:	61bb      	str	r3, [r7, #24]
            break;
 8018cae:	e064      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018cb0:	f241 3388 	movw	r3, #5000	; 0x1388
 8018cb4:	61bb      	str	r3, [r7, #24]
            break;
 8018cb6:	e060      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018cb8:	f241 7370 	movw	r3, #6000	; 0x1770
 8018cbc:	61bb      	str	r3, [r7, #24]
            break;
 8018cbe:	e05c      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018cc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018cc4:	61bb      	str	r3, [r7, #24]
            break;
 8018cc6:	e058      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018cc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018ccc:	4831      	ldr	r0, [pc, #196]	; (8018d94 <RegionEU868GetPhyParam+0x284>)
 8018cce:	f001 f87f 	bl	8019dd0 <randr>
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018cd8:	61bb      	str	r3, [r7, #24]
            break;
 8018cda:	e04e      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	61bb      	str	r3, [r7, #24]
            break;
 8018ce0:	e04b      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018ce2:	4b2d      	ldr	r3, [pc, #180]	; (8018d98 <RegionEU868GetPhyParam+0x288>)
 8018ce4:	61bb      	str	r3, [r7, #24]
            break;
 8018ce6:	e048      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	61bb      	str	r3, [r7, #24]
            break;
 8018cec:	e045      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018cee:	4b26      	ldr	r3, [pc, #152]	; (8018d88 <RegionEU868GetPhyParam+0x278>)
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018cf6:	61bb      	str	r3, [r7, #24]
            break;
 8018cf8:	e03f      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018cfa:	4b23      	ldr	r3, [pc, #140]	; (8018d88 <RegionEU868GetPhyParam+0x278>)
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018d02:	61bb      	str	r3, [r7, #24]
            break;
 8018d04:	e039      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018d06:	2310      	movs	r3, #16
 8018d08:	61bb      	str	r3, [r7, #24]
            break;
 8018d0a:	e036      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018d0c:	4b1e      	ldr	r3, [pc, #120]	; (8018d88 <RegionEU868GetPhyParam+0x278>)
 8018d0e:	681b      	ldr	r3, [r3, #0]
 8018d10:	61bb      	str	r3, [r7, #24]
            break;
 8018d12:	e032      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018d14:	2300      	movs	r3, #0
 8018d16:	61bb      	str	r3, [r7, #24]
            break;
 8018d18:	e02f      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018d1a:	2300      	movs	r3, #0
 8018d1c:	61bb      	str	r3, [r7, #24]
            break;
 8018d1e:	e02c      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018d20:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018d24:	61bb      	str	r3, [r7, #24]
            break;
 8018d26:	e028      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018d28:	4b1c      	ldr	r3, [pc, #112]	; (8018d9c <RegionEU868GetPhyParam+0x28c>)
 8018d2a:	61bb      	str	r3, [r7, #24]
            break;
 8018d2c:	e025      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018d2e:	4b1a      	ldr	r3, [pc, #104]	; (8018d98 <RegionEU868GetPhyParam+0x288>)
 8018d30:	61bb      	str	r3, [r7, #24]
            break;
 8018d32:	e022      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018d34:	2311      	movs	r3, #17
 8018d36:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018d38:	2302      	movs	r3, #2
 8018d3a:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018d3c:	2300      	movs	r3, #0
 8018d3e:	76bb      	strb	r3, [r7, #26]
            break;
 8018d40:	e01b      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018d42:	2303      	movs	r3, #3
 8018d44:	61bb      	str	r3, [r7, #24]
            break;
 8018d46:	e018      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018d48:	4b13      	ldr	r3, [pc, #76]	; (8018d98 <RegionEU868GetPhyParam+0x288>)
 8018d4a:	61bb      	str	r3, [r7, #24]
            break;
 8018d4c:	e015      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018d4e:	2303      	movs	r3, #3
 8018d50:	61bb      	str	r3, [r7, #24]
            break;
 8018d52:	e012      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d5a:	461a      	mov	r2, r3
 8018d5c:	4b10      	ldr	r3, [pc, #64]	; (8018da0 <RegionEU868GetPhyParam+0x290>)
 8018d5e:	5c9b      	ldrb	r3, [r3, r2]
 8018d60:	61bb      	str	r3, [r7, #24]
            break;
 8018d62:	e00a      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d6a:	490e      	ldr	r1, [pc, #56]	; (8018da4 <RegionEU868GetPhyParam+0x294>)
 8018d6c:	4618      	mov	r0, r3
 8018d6e:	f7ff fda1 	bl	80188b4 <RegionCommonGetBandwidth>
 8018d72:	4603      	mov	r3, r0
 8018d74:	61bb      	str	r3, [r7, #24]
            break;
 8018d76:	e000      	b.n	8018d7a <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018d78:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018d7a:	69bb      	ldr	r3, [r7, #24]
 8018d7c:	61fb      	str	r3, [r7, #28]
 8018d7e:	69fb      	ldr	r3, [r7, #28]
}
 8018d80:	4618      	mov	r0, r3
 8018d82:	3720      	adds	r7, #32
 8018d84:	46bd      	mov	sp, r7
 8018d86:	bd80      	pop	{r7, pc}
 8018d88:	2000169c 	.word	0x2000169c
 8018d8c:	0801f9c8 	.word	0x0801f9c8
 8018d90:	0801f9d0 	.word	0x0801f9d0
 8018d94:	fffffc18 	.word	0xfffffc18
 8018d98:	33d3e608 	.word	0x33d3e608
 8018d9c:	4009999a 	.word	0x4009999a
 8018da0:	0801f9a0 	.word	0x0801f9a0
 8018da4:	0801f9a8 	.word	0x0801f9a8

08018da8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018da8:	b590      	push	{r4, r7, lr}
 8018daa:	b085      	sub	sp, #20
 8018dac:	af02      	add	r7, sp, #8
 8018dae:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018db0:	4b11      	ldr	r3, [pc, #68]	; (8018df8 <RegionEU868SetBandTxDone+0x50>)
 8018db2:	681a      	ldr	r2, [r3, #0]
 8018db4:	4b11      	ldr	r3, [pc, #68]	; (8018dfc <RegionEU868SetBandTxDone+0x54>)
 8018db6:	6819      	ldr	r1, [r3, #0]
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	781b      	ldrb	r3, [r3, #0]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	005b      	lsls	r3, r3, #1
 8018dc2:	4403      	add	r3, r0
 8018dc4:	009b      	lsls	r3, r3, #2
 8018dc6:	440b      	add	r3, r1
 8018dc8:	3309      	adds	r3, #9
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	4619      	mov	r1, r3
 8018dce:	460b      	mov	r3, r1
 8018dd0:	005b      	lsls	r3, r3, #1
 8018dd2:	440b      	add	r3, r1
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	18d0      	adds	r0, r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6899      	ldr	r1, [r3, #8]
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	785c      	ldrb	r4, [r3, #1]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	691a      	ldr	r2, [r3, #16]
 8018de4:	9200      	str	r2, [sp, #0]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	4622      	mov	r2, r4
 8018dea:	f7ff f8e9 	bl	8017fc0 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018dee:	bf00      	nop
 8018df0:	370c      	adds	r7, #12
 8018df2:	46bd      	mov	sp, r7
 8018df4:	bd90      	pop	{r4, r7, pc}
 8018df6:	bf00      	nop
 8018df8:	20001698 	.word	0x20001698
 8018dfc:	2000169c 	.word	0x2000169c

08018e00 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018e00:	b580      	push	{r7, lr}
 8018e02:	b0b0      	sub	sp, #192	; 0xc0
 8018e04:	af00      	add	r7, sp, #0
 8018e06:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018e08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e0c:	2290      	movs	r2, #144	; 0x90
 8018e0e:	2100      	movs	r1, #0
 8018e10:	4618      	mov	r0, r3
 8018e12:	f005 fe11 	bl	801ea38 <memset>
 8018e16:	2364      	movs	r3, #100	; 0x64
 8018e18:	863b      	strh	r3, [r7, #48]	; 0x30
 8018e1a:	2364      	movs	r3, #100	; 0x64
 8018e1c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e24:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018e28:	230a      	movs	r3, #10
 8018e2a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018e2e:	2364      	movs	r3, #100	; 0x64
 8018e30:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018e34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e38:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	7a1b      	ldrb	r3, [r3, #8]
 8018e40:	2b02      	cmp	r3, #2
 8018e42:	d05e      	beq.n	8018f02 <RegionEU868InitDefaults+0x102>
 8018e44:	2b02      	cmp	r3, #2
 8018e46:	dc6b      	bgt.n	8018f20 <RegionEU868InitDefaults+0x120>
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d002      	beq.n	8018e52 <RegionEU868InitDefaults+0x52>
 8018e4c:	2b01      	cmp	r3, #1
 8018e4e:	d03f      	beq.n	8018ed0 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018e50:	e066      	b.n	8018f20 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d063      	beq.n	8018f22 <RegionEU868InitDefaults+0x122>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	685b      	ldr	r3, [r3, #4]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d05f      	beq.n	8018f22 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	4a30      	ldr	r2, [pc, #192]	; (8018f28 <RegionEU868InitDefaults+0x128>)
 8018e68:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	685b      	ldr	r3, [r3, #4]
 8018e6e:	4a2f      	ldr	r2, [pc, #188]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018e70:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018e72:	4b2d      	ldr	r3, [pc, #180]	; (8018f28 <RegionEU868InitDefaults+0x128>)
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	4618      	mov	r0, r3
 8018e78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e7c:	2290      	movs	r2, #144	; 0x90
 8018e7e:	4619      	mov	r1, r3
 8018e80:	f000 ffbd 	bl	8019dfe <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018e84:	4b29      	ldr	r3, [pc, #164]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	4a29      	ldr	r2, [pc, #164]	; (8018f30 <RegionEU868InitDefaults+0x130>)
 8018e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e8c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018e90:	4b26      	ldr	r3, [pc, #152]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	4a27      	ldr	r2, [pc, #156]	; (8018f34 <RegionEU868InitDefaults+0x134>)
 8018e96:	330c      	adds	r3, #12
 8018e98:	ca07      	ldmia	r2, {r0, r1, r2}
 8018e9a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018e9e:	4b23      	ldr	r3, [pc, #140]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	4a25      	ldr	r2, [pc, #148]	; (8018f38 <RegionEU868InitDefaults+0x138>)
 8018ea4:	3318      	adds	r3, #24
 8018ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ea8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018eac:	4b1f      	ldr	r3, [pc, #124]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018eae:	681b      	ldr	r3, [r3, #0]
 8018eb0:	2207      	movs	r2, #7
 8018eb2:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018eb6:	4b1d      	ldr	r3, [pc, #116]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018ebe:	4b1b      	ldr	r3, [pc, #108]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018ec6:	2201      	movs	r2, #1
 8018ec8:	4619      	mov	r1, r3
 8018eca:	f7ff f853 	bl	8017f74 <RegionCommonChanMaskCopy>
 8018ece:	e028      	b.n	8018f22 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018ed0:	4b16      	ldr	r3, [pc, #88]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018ed8:	4b14      	ldr	r3, [pc, #80]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2200      	movs	r2, #0
 8018ede:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018ee0:	4b12      	ldr	r3, [pc, #72]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018ee8:	4b10      	ldr	r3, [pc, #64]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018ef0:	4b0e      	ldr	r3, [pc, #56]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018ef8:	2201      	movs	r2, #1
 8018efa:	4619      	mov	r1, r3
 8018efc:	f7ff f83a 	bl	8017f74 <RegionCommonChanMaskCopy>
            break;
 8018f00:	e00f      	b.n	8018f22 <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018f02:	4b0a      	ldr	r3, [pc, #40]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018f0a:	4b08      	ldr	r3, [pc, #32]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018f12:	4b06      	ldr	r3, [pc, #24]	; (8018f2c <RegionEU868InitDefaults+0x12c>)
 8018f14:	681b      	ldr	r3, [r3, #0]
 8018f16:	430a      	orrs	r2, r1
 8018f18:	b292      	uxth	r2, r2
 8018f1a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018f1e:	e000      	b.n	8018f22 <RegionEU868InitDefaults+0x122>
            break;
 8018f20:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018f22:	37c0      	adds	r7, #192	; 0xc0
 8018f24:	46bd      	mov	sp, r7
 8018f26:	bd80      	pop	{r7, pc}
 8018f28:	20001698 	.word	0x20001698
 8018f2c:	2000169c 	.word	0x2000169c
 8018f30:	0801f3d0 	.word	0x0801f3d0
 8018f34:	0801f3dc 	.word	0x0801f3dc
 8018f38:	0801f3e8 	.word	0x0801f3e8

08018f3c <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018f3c:	b580      	push	{r7, lr}
 8018f3e:	b084      	sub	sp, #16
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
 8018f44:	460b      	mov	r3, r1
 8018f46:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018f48:	78fb      	ldrb	r3, [r7, #3]
 8018f4a:	2b0f      	cmp	r3, #15
 8018f4c:	d86c      	bhi.n	8019028 <RegionEU868Verify+0xec>
 8018f4e:	a201      	add	r2, pc, #4	; (adr r2, 8018f54 <RegionEU868Verify+0x18>)
 8018f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f54:	08018f95 	.word	0x08018f95
 8018f58:	08019029 	.word	0x08019029
 8018f5c:	08019029 	.word	0x08019029
 8018f60:	08019029 	.word	0x08019029
 8018f64:	08019029 	.word	0x08019029
 8018f68:	08018fad 	.word	0x08018fad
 8018f6c:	08018fcb 	.word	0x08018fcb
 8018f70:	08018fe9 	.word	0x08018fe9
 8018f74:	08019029 	.word	0x08019029
 8018f78:	08019007 	.word	0x08019007
 8018f7c:	08019007 	.word	0x08019007
 8018f80:	08019029 	.word	0x08019029
 8018f84:	08019029 	.word	0x08019029
 8018f88:	08019029 	.word	0x08019029
 8018f8c:	08019029 	.word	0x08019029
 8018f90:	08019025 	.word	0x08019025
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018f94:	2300      	movs	r3, #0
 8018f96:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	f107 020f 	add.w	r2, r7, #15
 8018fa0:	4611      	mov	r1, r2
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7ff fcee 	bl	8018984 <VerifyRfFreq>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	e03e      	b.n	801902a <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	f993 3000 	ldrsb.w	r3, [r3]
 8018fb2:	2207      	movs	r2, #7
 8018fb4:	2100      	movs	r1, #0
 8018fb6:	4618      	mov	r0, r3
 8018fb8:	f7fe ff5f 	bl	8017e7a <RegionCommonValueInRange>
 8018fbc:	4603      	mov	r3, r0
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	bf14      	ite	ne
 8018fc2:	2301      	movne	r3, #1
 8018fc4:	2300      	moveq	r3, #0
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	e02f      	b.n	801902a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	f993 3000 	ldrsb.w	r3, [r3]
 8018fd0:	2205      	movs	r2, #5
 8018fd2:	2100      	movs	r1, #0
 8018fd4:	4618      	mov	r0, r3
 8018fd6:	f7fe ff50 	bl	8017e7a <RegionCommonValueInRange>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	bf14      	ite	ne
 8018fe0:	2301      	movne	r3, #1
 8018fe2:	2300      	moveq	r3, #0
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	e020      	b.n	801902a <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	f993 3000 	ldrsb.w	r3, [r3]
 8018fee:	2207      	movs	r2, #7
 8018ff0:	2100      	movs	r1, #0
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7fe ff41 	bl	8017e7a <RegionCommonValueInRange>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	2b00      	cmp	r3, #0
 8018ffc:	bf14      	ite	ne
 8018ffe:	2301      	movne	r3, #1
 8019000:	2300      	moveq	r3, #0
 8019002:	b2db      	uxtb	r3, r3
 8019004:	e011      	b.n	801902a <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	f993 3000 	ldrsb.w	r3, [r3]
 801900c:	2207      	movs	r2, #7
 801900e:	2100      	movs	r1, #0
 8019010:	4618      	mov	r0, r3
 8019012:	f7fe ff32 	bl	8017e7a <RegionCommonValueInRange>
 8019016:	4603      	mov	r3, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	bf14      	ite	ne
 801901c:	2301      	movne	r3, #1
 801901e:	2300      	moveq	r3, #0
 8019020:	b2db      	uxtb	r3, r3
 8019022:	e002      	b.n	801902a <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8019024:	2301      	movs	r3, #1
 8019026:	e000      	b.n	801902a <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019028:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801902a:	4618      	mov	r0, r3
 801902c:	3710      	adds	r7, #16
 801902e:	46bd      	mov	sp, r7
 8019030:	bd80      	pop	{r7, pc}
 8019032:	bf00      	nop

08019034 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b08a      	sub	sp, #40	; 0x28
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 801903c:	2350      	movs	r3, #80	; 0x50
 801903e:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	791b      	ldrb	r3, [r3, #4]
 8019046:	2b10      	cmp	r3, #16
 8019048:	d162      	bne.n	8019110 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 801904a:	687b      	ldr	r3, [r7, #4]
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	330f      	adds	r3, #15
 8019050:	781b      	ldrb	r3, [r3, #0]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d15e      	bne.n	8019114 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8019056:	2300      	movs	r3, #0
 8019058:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801905c:	2303      	movs	r3, #3
 801905e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019062:	e050      	b.n	8019106 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8019064:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019068:	2b07      	cmp	r3, #7
 801906a:	d824      	bhi.n	80190b6 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	681a      	ldr	r2, [r3, #0]
 8019070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019074:	4413      	add	r3, r2
 8019076:	781b      	ldrb	r3, [r3, #0]
 8019078:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 801907a:	69ba      	ldr	r2, [r7, #24]
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6819      	ldr	r1, [r3, #0]
 8019080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019084:	3301      	adds	r3, #1
 8019086:	440b      	add	r3, r1
 8019088:	781b      	ldrb	r3, [r3, #0]
 801908a:	021b      	lsls	r3, r3, #8
 801908c:	4313      	orrs	r3, r2
 801908e:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8019090:	69ba      	ldr	r2, [r7, #24]
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	6819      	ldr	r1, [r3, #0]
 8019096:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801909a:	3302      	adds	r3, #2
 801909c:	440b      	add	r3, r1
 801909e:	781b      	ldrb	r3, [r3, #0]
 80190a0:	041b      	lsls	r3, r3, #16
 80190a2:	4313      	orrs	r3, r2
 80190a4:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80190a6:	69bb      	ldr	r3, [r7, #24]
 80190a8:	2264      	movs	r2, #100	; 0x64
 80190aa:	fb02 f303 	mul.w	r3, r2, r3
 80190ae:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80190b0:	2300      	movs	r3, #0
 80190b2:	61fb      	str	r3, [r7, #28]
 80190b4:	e006      	b.n	80190c4 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80190b6:	2300      	movs	r3, #0
 80190b8:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80190c4:	69bb      	ldr	r3, [r7, #24]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d00b      	beq.n	80190e2 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80190ca:	f107 0318 	add.w	r3, r7, #24
 80190ce:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80190d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190d4:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80190d6:	f107 0310 	add.w	r3, r7, #16
 80190da:	4618      	mov	r0, r3
 80190dc:	f000 fd14 	bl	8019b08 <RegionEU868ChannelAdd>
 80190e0:	e007      	b.n	80190f2 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80190e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190e6:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80190e8:	f107 030c 	add.w	r3, r7, #12
 80190ec:	4618      	mov	r0, r3
 80190ee:	f000 fdad 	bl	8019c4c <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80190f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190f6:	3303      	adds	r3, #3
 80190f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80190fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019100:	3301      	adds	r3, #1
 8019102:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019106:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801910a:	2b0f      	cmp	r3, #15
 801910c:	d9aa      	bls.n	8019064 <RegionEU868ApplyCFList+0x30>
 801910e:	e002      	b.n	8019116 <RegionEU868ApplyCFList+0xe2>
        return;
 8019110:	bf00      	nop
 8019112:	e000      	b.n	8019116 <RegionEU868ApplyCFList+0xe2>
        return;
 8019114:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8019116:	3728      	adds	r7, #40	; 0x28
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b082      	sub	sp, #8
 8019120:	af00      	add	r7, sp, #0
 8019122:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8019124:	687b      	ldr	r3, [r7, #4]
 8019126:	791b      	ldrb	r3, [r3, #4]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d002      	beq.n	8019132 <RegionEU868ChanMaskSet+0x16>
 801912c:	2b01      	cmp	r3, #1
 801912e:	d00b      	beq.n	8019148 <RegionEU868ChanMaskSet+0x2c>
 8019130:	e015      	b.n	801915e <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019132:	4b0e      	ldr	r3, [pc, #56]	; (801916c <RegionEU868ChanMaskSet+0x50>)
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	2201      	movs	r2, #1
 8019140:	4619      	mov	r1, r3
 8019142:	f7fe ff17 	bl	8017f74 <RegionCommonChanMaskCopy>
            break;
 8019146:	e00c      	b.n	8019162 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019148:	4b08      	ldr	r3, [pc, #32]	; (801916c <RegionEU868ChanMaskSet+0x50>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	681b      	ldr	r3, [r3, #0]
 8019154:	2201      	movs	r2, #1
 8019156:	4619      	mov	r1, r3
 8019158:	f7fe ff0c 	bl	8017f74 <RegionCommonChanMaskCopy>
            break;
 801915c:	e001      	b.n	8019162 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801915e:	2300      	movs	r3, #0
 8019160:	e000      	b.n	8019164 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8019162:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019164:	4618      	mov	r0, r3
 8019166:	3708      	adds	r7, #8
 8019168:	46bd      	mov	sp, r7
 801916a:	bd80      	pop	{r7, pc}
 801916c:	2000169c 	.word	0x2000169c

08019170 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019170:	b580      	push	{r7, lr}
 8019172:	b088      	sub	sp, #32
 8019174:	af02      	add	r7, sp, #8
 8019176:	60ba      	str	r2, [r7, #8]
 8019178:	607b      	str	r3, [r7, #4]
 801917a:	4603      	mov	r3, r0
 801917c:	73fb      	strb	r3, [r7, #15]
 801917e:	460b      	mov	r3, r1
 8019180:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8019182:	2300      	movs	r3, #0
 8019184:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8019186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801918a:	2b07      	cmp	r3, #7
 801918c:	bfa8      	it	ge
 801918e:	2307      	movge	r3, #7
 8019190:	b25a      	sxtb	r2, r3
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801919c:	491e      	ldr	r1, [pc, #120]	; (8019218 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801919e:	4618      	mov	r0, r3
 80191a0:	f7ff fb88 	bl	80188b4 <RegionCommonGetBandwidth>
 80191a4:	4603      	mov	r3, r0
 80191a6:	b2da      	uxtb	r2, r3
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191b2:	2b07      	cmp	r3, #7
 80191b4:	d10a      	bne.n	80191cc <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191bc:	461a      	mov	r2, r3
 80191be:	4b17      	ldr	r3, [pc, #92]	; (801921c <RegionEU868ComputeRxWindowParameters+0xac>)
 80191c0:	5c9b      	ldrb	r3, [r3, r2]
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7ff f90a 	bl	80183dc <RegionCommonComputeSymbolTimeFsk>
 80191c8:	6178      	str	r0, [r7, #20]
 80191ca:	e011      	b.n	80191f0 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80191cc:	687b      	ldr	r3, [r7, #4]
 80191ce:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191d2:	461a      	mov	r2, r3
 80191d4:	4b11      	ldr	r3, [pc, #68]	; (801921c <RegionEU868ComputeRxWindowParameters+0xac>)
 80191d6:	5c9a      	ldrb	r2, [r3, r2]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191de:	4619      	mov	r1, r3
 80191e0:	4b0d      	ldr	r3, [pc, #52]	; (8019218 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80191e6:	4619      	mov	r1, r3
 80191e8:	4610      	mov	r0, r2
 80191ea:	f7ff f8e1 	bl	80183b0 <RegionCommonComputeSymbolTimeLoRa>
 80191ee:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80191f0:	4b0b      	ldr	r3, [pc, #44]	; (8019220 <RegionEU868ComputeRxWindowParameters+0xb0>)
 80191f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191f4:	4798      	blx	r3
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	3308      	adds	r3, #8
 80191fa:	687a      	ldr	r2, [r7, #4]
 80191fc:	320c      	adds	r2, #12
 80191fe:	7bb9      	ldrb	r1, [r7, #14]
 8019200:	9201      	str	r2, [sp, #4]
 8019202:	9300      	str	r3, [sp, #0]
 8019204:	4603      	mov	r3, r0
 8019206:	68ba      	ldr	r2, [r7, #8]
 8019208:	6978      	ldr	r0, [r7, #20]
 801920a:	f7ff f8f7 	bl	80183fc <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 801920e:	bf00      	nop
 8019210:	3718      	adds	r7, #24
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	0801f9a8 	.word	0x0801f9a8
 801921c:	0801f9a0 	.word	0x0801f9a0
 8019220:	0801f9d8 	.word	0x0801f9d8

08019224 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8019224:	b5b0      	push	{r4, r5, r7, lr}
 8019226:	b090      	sub	sp, #64	; 0x40
 8019228:	af0a      	add	r7, sp, #40	; 0x28
 801922a:	6078      	str	r0, [r7, #4]
 801922c:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	785b      	ldrb	r3, [r3, #1]
 8019232:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8019234:	2300      	movs	r3, #0
 8019236:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019238:	2300      	movs	r3, #0
 801923a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	685b      	ldr	r3, [r3, #4]
 8019240:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8019242:	4b5a      	ldr	r3, [pc, #360]	; (80193ac <RegionEU868RxConfig+0x188>)
 8019244:	685b      	ldr	r3, [r3, #4]
 8019246:	4798      	blx	r3
 8019248:	4603      	mov	r3, r0
 801924a:	2b00      	cmp	r3, #0
 801924c:	d001      	beq.n	8019252 <RegionEU868RxConfig+0x2e>
    {
        return false;
 801924e:	2300      	movs	r3, #0
 8019250:	e0a8      	b.n	80193a4 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	7cdb      	ldrb	r3, [r3, #19]
 8019256:	2b00      	cmp	r3, #0
 8019258:	d126      	bne.n	80192a8 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 801925a:	4b55      	ldr	r3, [pc, #340]	; (80193b0 <RegionEU868RxConfig+0x18c>)
 801925c:	681a      	ldr	r2, [r3, #0]
 801925e:	687b      	ldr	r3, [r7, #4]
 8019260:	781b      	ldrb	r3, [r3, #0]
 8019262:	4619      	mov	r1, r3
 8019264:	460b      	mov	r3, r1
 8019266:	005b      	lsls	r3, r3, #1
 8019268:	440b      	add	r3, r1
 801926a:	009b      	lsls	r3, r3, #2
 801926c:	4413      	add	r3, r2
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8019272:	4b4f      	ldr	r3, [pc, #316]	; (80193b0 <RegionEU868RxConfig+0x18c>)
 8019274:	681a      	ldr	r2, [r3, #0]
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	4619      	mov	r1, r3
 801927c:	460b      	mov	r3, r1
 801927e:	005b      	lsls	r3, r3, #1
 8019280:	440b      	add	r3, r1
 8019282:	009b      	lsls	r3, r3, #2
 8019284:	4413      	add	r3, r2
 8019286:	3304      	adds	r3, #4
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d00c      	beq.n	80192a8 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801928e:	4b48      	ldr	r3, [pc, #288]	; (80193b0 <RegionEU868RxConfig+0x18c>)
 8019290:	681a      	ldr	r2, [r3, #0]
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	781b      	ldrb	r3, [r3, #0]
 8019296:	4619      	mov	r1, r3
 8019298:	460b      	mov	r3, r1
 801929a:	005b      	lsls	r3, r3, #1
 801929c:	440b      	add	r3, r1
 801929e:	009b      	lsls	r3, r3, #2
 80192a0:	4413      	add	r3, r2
 80192a2:	3304      	adds	r3, #4
 80192a4:	681b      	ldr	r3, [r3, #0]
 80192a6:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80192a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192ac:	4a41      	ldr	r2, [pc, #260]	; (80193b4 <RegionEU868RxConfig+0x190>)
 80192ae:	5cd3      	ldrb	r3, [r2, r3]
 80192b0:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80192b2:	4b3e      	ldr	r3, [pc, #248]	; (80193ac <RegionEU868RxConfig+0x188>)
 80192b4:	68db      	ldr	r3, [r3, #12]
 80192b6:	6938      	ldr	r0, [r7, #16]
 80192b8:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80192ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192be:	2b07      	cmp	r3, #7
 80192c0:	d128      	bne.n	8019314 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80192c2:	2300      	movs	r3, #0
 80192c4:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80192c6:	4b39      	ldr	r3, [pc, #228]	; (80193ac <RegionEU868RxConfig+0x188>)
 80192c8:	699c      	ldr	r4, [r3, #24]
 80192ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80192d2:	fb02 f303 	mul.w	r3, r2, r3
 80192d6:	4619      	mov	r1, r3
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	689b      	ldr	r3, [r3, #8]
 80192dc:	b29b      	uxth	r3, r3
 80192de:	687a      	ldr	r2, [r7, #4]
 80192e0:	7c92      	ldrb	r2, [r2, #18]
 80192e2:	7df8      	ldrb	r0, [r7, #23]
 80192e4:	9209      	str	r2, [sp, #36]	; 0x24
 80192e6:	2200      	movs	r2, #0
 80192e8:	9208      	str	r2, [sp, #32]
 80192ea:	2200      	movs	r2, #0
 80192ec:	9207      	str	r2, [sp, #28]
 80192ee:	2200      	movs	r2, #0
 80192f0:	9206      	str	r2, [sp, #24]
 80192f2:	2201      	movs	r2, #1
 80192f4:	9205      	str	r2, [sp, #20]
 80192f6:	2200      	movs	r2, #0
 80192f8:	9204      	str	r2, [sp, #16]
 80192fa:	2200      	movs	r2, #0
 80192fc:	9203      	str	r2, [sp, #12]
 80192fe:	9302      	str	r3, [sp, #8]
 8019300:	2305      	movs	r3, #5
 8019302:	9301      	str	r3, [sp, #4]
 8019304:	4b2c      	ldr	r3, [pc, #176]	; (80193b8 <RegionEU868RxConfig+0x194>)
 8019306:	9300      	str	r3, [sp, #0]
 8019308:	2300      	movs	r3, #0
 801930a:	460a      	mov	r2, r1
 801930c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019310:	47a0      	blx	r4
 8019312:	e024      	b.n	801935e <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8019314:	2301      	movs	r3, #1
 8019316:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019318:	4b24      	ldr	r3, [pc, #144]	; (80193ac <RegionEU868RxConfig+0x188>)
 801931a:	699c      	ldr	r4, [r3, #24]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	789b      	ldrb	r3, [r3, #2]
 8019320:	461d      	mov	r5, r3
 8019322:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019326:	687b      	ldr	r3, [r7, #4]
 8019328:	689b      	ldr	r3, [r3, #8]
 801932a:	b29b      	uxth	r3, r3
 801932c:	687a      	ldr	r2, [r7, #4]
 801932e:	7c92      	ldrb	r2, [r2, #18]
 8019330:	7df8      	ldrb	r0, [r7, #23]
 8019332:	9209      	str	r2, [sp, #36]	; 0x24
 8019334:	2201      	movs	r2, #1
 8019336:	9208      	str	r2, [sp, #32]
 8019338:	2200      	movs	r2, #0
 801933a:	9207      	str	r2, [sp, #28]
 801933c:	2200      	movs	r2, #0
 801933e:	9206      	str	r2, [sp, #24]
 8019340:	2200      	movs	r2, #0
 8019342:	9205      	str	r2, [sp, #20]
 8019344:	2200      	movs	r2, #0
 8019346:	9204      	str	r2, [sp, #16]
 8019348:	2200      	movs	r2, #0
 801934a:	9203      	str	r2, [sp, #12]
 801934c:	9302      	str	r3, [sp, #8]
 801934e:	2308      	movs	r3, #8
 8019350:	9301      	str	r3, [sp, #4]
 8019352:	2300      	movs	r3, #0
 8019354:	9300      	str	r3, [sp, #0]
 8019356:	2301      	movs	r3, #1
 8019358:	460a      	mov	r2, r1
 801935a:	4629      	mov	r1, r5
 801935c:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	7c5b      	ldrb	r3, [r3, #17]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d005      	beq.n	8019372 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8019366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801936a:	4a14      	ldr	r2, [pc, #80]	; (80193bc <RegionEU868RxConfig+0x198>)
 801936c:	5cd3      	ldrb	r3, [r2, r3]
 801936e:	75bb      	strb	r3, [r7, #22]
 8019370:	e004      	b.n	801937c <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 8019372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019376:	4a12      	ldr	r2, [pc, #72]	; (80193c0 <RegionEU868RxConfig+0x19c>)
 8019378:	5cd3      	ldrb	r3, [r2, r3]
 801937a:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801937c:	4b0b      	ldr	r3, [pc, #44]	; (80193ac <RegionEU868RxConfig+0x188>)
 801937e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019380:	7dba      	ldrb	r2, [r7, #22]
 8019382:	320d      	adds	r2, #13
 8019384:	b2d1      	uxtb	r1, r2
 8019386:	7dfa      	ldrb	r2, [r7, #23]
 8019388:	4610      	mov	r0, r2
 801938a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	7cdb      	ldrb	r3, [r3, #19]
 8019390:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8019394:	6939      	ldr	r1, [r7, #16]
 8019396:	4618      	mov	r0, r3
 8019398:	f7ff faaa 	bl	80188f0 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801939c:	683b      	ldr	r3, [r7, #0]
 801939e:	7bfa      	ldrb	r2, [r7, #15]
 80193a0:	701a      	strb	r2, [r3, #0]
    return true;
 80193a2:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80193a4:	4618      	mov	r0, r3
 80193a6:	3718      	adds	r7, #24
 80193a8:	46bd      	mov	sp, r7
 80193aa:	bdb0      	pop	{r4, r5, r7, pc}
 80193ac:	0801f9d8 	.word	0x0801f9d8
 80193b0:	2000169c 	.word	0x2000169c
 80193b4:	0801f9a0 	.word	0x0801f9a0
 80193b8:	00014585 	.word	0x00014585
 80193bc:	0801f9d0 	.word	0x0801f9d0
 80193c0:	0801f9c8 	.word	0x0801f9c8

080193c4 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80193c4:	b590      	push	{r4, r7, lr}
 80193c6:	b093      	sub	sp, #76	; 0x4c
 80193c8:	af0a      	add	r7, sp, #40	; 0x28
 80193ca:	60f8      	str	r0, [r7, #12]
 80193cc:	60b9      	str	r1, [r7, #8]
 80193ce:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193d6:	461a      	mov	r2, r3
 80193d8:	4b5d      	ldr	r3, [pc, #372]	; (8019550 <RegionEU868TxConfig+0x18c>)
 80193da:	5c9b      	ldrb	r3, [r3, r2]
 80193dc:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80193e4:	4b5b      	ldr	r3, [pc, #364]	; (8019554 <RegionEU868TxConfig+0x190>)
 80193e6:	681a      	ldr	r2, [r3, #0]
 80193e8:	4b5b      	ldr	r3, [pc, #364]	; (8019558 <RegionEU868TxConfig+0x194>)
 80193ea:	6819      	ldr	r1, [r3, #0]
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	781b      	ldrb	r3, [r3, #0]
 80193f0:	461c      	mov	r4, r3
 80193f2:	4623      	mov	r3, r4
 80193f4:	005b      	lsls	r3, r3, #1
 80193f6:	4423      	add	r3, r4
 80193f8:	009b      	lsls	r3, r3, #2
 80193fa:	440b      	add	r3, r1
 80193fc:	3309      	adds	r3, #9
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	4619      	mov	r1, r3
 8019402:	460b      	mov	r3, r1
 8019404:	005b      	lsls	r3, r3, #1
 8019406:	440b      	add	r3, r1
 8019408:	00db      	lsls	r3, r3, #3
 801940a:	4413      	add	r3, r2
 801940c:	3302      	adds	r3, #2
 801940e:	f993 3000 	ldrsb.w	r3, [r3]
 8019412:	4619      	mov	r1, r3
 8019414:	f7ff fa39 	bl	801888a <RegionCommonLimitTxPower>
 8019418:	4603      	mov	r3, r0
 801941a:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801941c:	68fb      	ldr	r3, [r7, #12]
 801941e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019422:	494e      	ldr	r1, [pc, #312]	; (801955c <RegionEU868TxConfig+0x198>)
 8019424:	4618      	mov	r0, r3
 8019426:	f7ff fa45 	bl	80188b4 <RegionCommonGetBandwidth>
 801942a:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801942c:	2300      	movs	r3, #0
 801942e:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	6859      	ldr	r1, [r3, #4]
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	689a      	ldr	r2, [r3, #8]
 8019438:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801943c:	4618      	mov	r0, r3
 801943e:	f7ff f895 	bl	801856c <RegionCommonComputeTxPower>
 8019442:	4603      	mov	r3, r0
 8019444:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8019446:	4b46      	ldr	r3, [pc, #280]	; (8019560 <RegionEU868TxConfig+0x19c>)
 8019448:	68da      	ldr	r2, [r3, #12]
 801944a:	4b43      	ldr	r3, [pc, #268]	; (8019558 <RegionEU868TxConfig+0x194>)
 801944c:	6819      	ldr	r1, [r3, #0]
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	781b      	ldrb	r3, [r3, #0]
 8019452:	4618      	mov	r0, r3
 8019454:	4603      	mov	r3, r0
 8019456:	005b      	lsls	r3, r3, #1
 8019458:	4403      	add	r3, r0
 801945a:	009b      	lsls	r3, r3, #2
 801945c:	440b      	add	r3, r1
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	4618      	mov	r0, r3
 8019462:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 8019464:	68fb      	ldr	r3, [r7, #12]
 8019466:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801946a:	2b07      	cmp	r3, #7
 801946c:	d124      	bne.n	80194b8 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 801946e:	2300      	movs	r3, #0
 8019470:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8019472:	4b3b      	ldr	r3, [pc, #236]	; (8019560 <RegionEU868TxConfig+0x19c>)
 8019474:	69dc      	ldr	r4, [r3, #28]
 8019476:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801947a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801947e:	fb02 f303 	mul.w	r3, r2, r3
 8019482:	461a      	mov	r2, r3
 8019484:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8019488:	7ff8      	ldrb	r0, [r7, #31]
 801948a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801948e:	9308      	str	r3, [sp, #32]
 8019490:	2300      	movs	r3, #0
 8019492:	9307      	str	r3, [sp, #28]
 8019494:	2300      	movs	r3, #0
 8019496:	9306      	str	r3, [sp, #24]
 8019498:	2300      	movs	r3, #0
 801949a:	9305      	str	r3, [sp, #20]
 801949c:	2301      	movs	r3, #1
 801949e:	9304      	str	r3, [sp, #16]
 80194a0:	2300      	movs	r3, #0
 80194a2:	9303      	str	r3, [sp, #12]
 80194a4:	2305      	movs	r3, #5
 80194a6:	9302      	str	r3, [sp, #8]
 80194a8:	2300      	movs	r3, #0
 80194aa:	9301      	str	r3, [sp, #4]
 80194ac:	9200      	str	r2, [sp, #0]
 80194ae:	69bb      	ldr	r3, [r7, #24]
 80194b0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80194b4:	47a0      	blx	r4
 80194b6:	e01d      	b.n	80194f4 <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80194b8:	2301      	movs	r3, #1
 80194ba:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80194bc:	4b28      	ldr	r3, [pc, #160]	; (8019560 <RegionEU868TxConfig+0x19c>)
 80194be:	69dc      	ldr	r4, [r3, #28]
 80194c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80194c4:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194c8:	7ff8      	ldrb	r0, [r7, #31]
 80194ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80194ce:	9208      	str	r2, [sp, #32]
 80194d0:	2200      	movs	r2, #0
 80194d2:	9207      	str	r2, [sp, #28]
 80194d4:	2200      	movs	r2, #0
 80194d6:	9206      	str	r2, [sp, #24]
 80194d8:	2200      	movs	r2, #0
 80194da:	9205      	str	r2, [sp, #20]
 80194dc:	2201      	movs	r2, #1
 80194de:	9204      	str	r2, [sp, #16]
 80194e0:	2200      	movs	r2, #0
 80194e2:	9203      	str	r2, [sp, #12]
 80194e4:	2208      	movs	r2, #8
 80194e6:	9202      	str	r2, [sp, #8]
 80194e8:	2201      	movs	r2, #1
 80194ea:	9201      	str	r2, [sp, #4]
 80194ec:	9300      	str	r3, [sp, #0]
 80194ee:	69bb      	ldr	r3, [r7, #24]
 80194f0:	2200      	movs	r2, #0
 80194f2:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80194f4:	4b18      	ldr	r3, [pc, #96]	; (8019558 <RegionEU868TxConfig+0x194>)
 80194f6:	681a      	ldr	r2, [r3, #0]
 80194f8:	68fb      	ldr	r3, [r7, #12]
 80194fa:	781b      	ldrb	r3, [r3, #0]
 80194fc:	4619      	mov	r1, r3
 80194fe:	460b      	mov	r3, r1
 8019500:	005b      	lsls	r3, r3, #1
 8019502:	440b      	add	r3, r1
 8019504:	009b      	lsls	r3, r3, #2
 8019506:	4413      	add	r3, r2
 8019508:	681a      	ldr	r2, [r3, #0]
 801950a:	68fb      	ldr	r3, [r7, #12]
 801950c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019510:	4619      	mov	r1, r3
 8019512:	4610      	mov	r0, r2
 8019514:	f7ff fa1e 	bl	8018954 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019518:	68fb      	ldr	r3, [r7, #12]
 801951a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801951e:	68fb      	ldr	r3, [r7, #12]
 8019520:	899b      	ldrh	r3, [r3, #12]
 8019522:	4619      	mov	r1, r3
 8019524:	4610      	mov	r0, r2
 8019526:	f7ff faa3 	bl	8018a70 <GetTimeOnAir>
 801952a:	4602      	mov	r2, r0
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019530:	4b0b      	ldr	r3, [pc, #44]	; (8019560 <RegionEU868TxConfig+0x19c>)
 8019532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019534:	68fa      	ldr	r2, [r7, #12]
 8019536:	8992      	ldrh	r2, [r2, #12]
 8019538:	b2d1      	uxtb	r1, r2
 801953a:	7ffa      	ldrb	r2, [r7, #31]
 801953c:	4610      	mov	r0, r2
 801953e:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019540:	68bb      	ldr	r3, [r7, #8]
 8019542:	7f7a      	ldrb	r2, [r7, #29]
 8019544:	701a      	strb	r2, [r3, #0]
    return true;
 8019546:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019548:	4618      	mov	r0, r3
 801954a:	3724      	adds	r7, #36	; 0x24
 801954c:	46bd      	mov	sp, r7
 801954e:	bd90      	pop	{r4, r7, pc}
 8019550:	0801f9a0 	.word	0x0801f9a0
 8019554:	20001698 	.word	0x20001698
 8019558:	2000169c 	.word	0x2000169c
 801955c:	0801f9a8 	.word	0x0801f9a8
 8019560:	0801f9d8 	.word	0x0801f9d8

08019564 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8019564:	b590      	push	{r4, r7, lr}
 8019566:	b093      	sub	sp, #76	; 0x4c
 8019568:	af00      	add	r7, sp, #0
 801956a:	60f8      	str	r0, [r7, #12]
 801956c:	60b9      	str	r1, [r7, #8]
 801956e:	607a      	str	r2, [r7, #4]
 8019570:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8019572:	2307      	movs	r3, #7
 8019574:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019578:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801957c:	2200      	movs	r2, #0
 801957e:	601a      	str	r2, [r3, #0]
 8019580:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8019582:	2300      	movs	r3, #0
 8019584:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 8019588:	2300      	movs	r3, #0
 801958a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 801958e:	2300      	movs	r3, #0
 8019590:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8019592:	e085      	b.n	80196a0 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	685a      	ldr	r2, [r3, #4]
 8019598:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801959c:	4413      	add	r3, r2
 801959e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80195a2:	4611      	mov	r1, r2
 80195a4:	4618      	mov	r0, r3
 80195a6:	f7fe fe29 	bl	80181fc <RegionCommonParseLinkAdrReq>
 80195aa:	4603      	mov	r3, r0
 80195ac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80195b0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d07b      	beq.n	80196b0 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80195b8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80195bc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195c0:	4413      	add	r3, r2
 80195c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80195c6:	2307      	movs	r3, #7
 80195c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80195cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195d0:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80195d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d109      	bne.n	80195ee <RegionEU868LinkAdrReq+0x8a>
 80195da:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d106      	bne.n	80195ee <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80195e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80195e4:	f023 0301 	bic.w	r3, r3, #1
 80195e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80195ec:	e058      	b.n	80196a0 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80195ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d003      	beq.n	80195fe <RegionEU868LinkAdrReq+0x9a>
 80195f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195fa:	2b05      	cmp	r3, #5
 80195fc:	d903      	bls.n	8019606 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80195fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019602:	2b06      	cmp	r3, #6
 8019604:	d906      	bls.n	8019614 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 8019606:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801960a:	f023 0301 	bic.w	r3, r3, #1
 801960e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019612:	e045      	b.n	80196a0 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8019614:	2300      	movs	r3, #0
 8019616:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 801961a:	e03d      	b.n	8019698 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 801961c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019620:	2b06      	cmp	r3, #6
 8019622:	d118      	bne.n	8019656 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8019624:	4b5f      	ldr	r3, [pc, #380]	; (80197a4 <RegionEU868LinkAdrReq+0x240>)
 8019626:	6819      	ldr	r1, [r3, #0]
 8019628:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801962c:	4613      	mov	r3, r2
 801962e:	005b      	lsls	r3, r3, #1
 8019630:	4413      	add	r3, r2
 8019632:	009b      	lsls	r3, r3, #2
 8019634:	440b      	add	r3, r1
 8019636:	681b      	ldr	r3, [r3, #0]
 8019638:	2b00      	cmp	r3, #0
 801963a:	d028      	beq.n	801968e <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 801963c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019640:	2201      	movs	r2, #1
 8019642:	fa02 f303 	lsl.w	r3, r2, r3
 8019646:	b21a      	sxth	r2, r3
 8019648:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801964a:	b21b      	sxth	r3, r3
 801964c:	4313      	orrs	r3, r2
 801964e:	b21b      	sxth	r3, r3
 8019650:	b29b      	uxth	r3, r3
 8019652:	877b      	strh	r3, [r7, #58]	; 0x3a
 8019654:	e01b      	b.n	801968e <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019656:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019658:	461a      	mov	r2, r3
 801965a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801965e:	fa42 f303 	asr.w	r3, r2, r3
 8019662:	f003 0301 	and.w	r3, r3, #1
 8019666:	2b00      	cmp	r3, #0
 8019668:	d011      	beq.n	801968e <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 801966a:	4b4e      	ldr	r3, [pc, #312]	; (80197a4 <RegionEU868LinkAdrReq+0x240>)
 801966c:	6819      	ldr	r1, [r3, #0]
 801966e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019672:	4613      	mov	r3, r2
 8019674:	005b      	lsls	r3, r3, #1
 8019676:	4413      	add	r3, r2
 8019678:	009b      	lsls	r3, r3, #2
 801967a:	440b      	add	r3, r1
 801967c:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801967e:	2b00      	cmp	r3, #0
 8019680:	d105      	bne.n	801968e <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8019682:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019686:	f023 0301 	bic.w	r3, r3, #1
 801968a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801968e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019692:	3301      	adds	r3, #1
 8019694:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019698:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 801969c:	2b0f      	cmp	r3, #15
 801969e:	d9bd      	bls.n	801961c <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80196a0:	68fb      	ldr	r3, [r7, #12]
 80196a2:	7a1b      	ldrb	r3, [r3, #8]
 80196a4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196a8:	429a      	cmp	r2, r3
 80196aa:	f4ff af73 	bcc.w	8019594 <RegionEU868LinkAdrReq+0x30>
 80196ae:	e000      	b.n	80196b2 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80196b0:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80196b2:	2302      	movs	r3, #2
 80196b4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	7a5b      	ldrb	r3, [r3, #9]
 80196bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80196c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196c4:	4618      	mov	r0, r3
 80196c6:	f7ff fa23 	bl	8018b10 <RegionEU868GetPhyParam>
 80196ca:	4603      	mov	r3, r0
 80196cc:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80196ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196d2:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80196d4:	68fb      	ldr	r3, [r7, #12]
 80196d6:	7a9b      	ldrb	r3, [r3, #10]
 80196d8:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80196da:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80196de:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80196e0:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80196e4:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80196e6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80196ea:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80196f2:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80196fa:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	7b5b      	ldrb	r3, [r3, #13]
 8019700:	b25b      	sxtb	r3, r3
 8019702:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8019704:	2310      	movs	r3, #16
 8019706:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019708:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801970c:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 801970e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019710:	b25b      	sxtb	r3, r3
 8019712:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8019716:	2307      	movs	r3, #7
 8019718:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 801971c:	4b21      	ldr	r3, [pc, #132]	; (80197a4 <RegionEU868LinkAdrReq+0x240>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8019722:	2307      	movs	r3, #7
 8019724:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019728:	2300      	movs	r3, #0
 801972a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 801972e:	68fb      	ldr	r3, [r7, #12]
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8019734:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801973c:	1c9a      	adds	r2, r3, #2
 801973e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019742:	1c59      	adds	r1, r3, #1
 8019744:	f107 0010 	add.w	r0, r7, #16
 8019748:	4623      	mov	r3, r4
 801974a:	f7fe fda8 	bl	801829e <RegionCommonLinkAdrReqVerifyParams>
 801974e:	4603      	mov	r3, r0
 8019750:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8019754:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019758:	2b07      	cmp	r3, #7
 801975a:	d10d      	bne.n	8019778 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 801975c:	4b11      	ldr	r3, [pc, #68]	; (80197a4 <RegionEU868LinkAdrReq+0x240>)
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019764:	220c      	movs	r2, #12
 8019766:	2100      	movs	r1, #0
 8019768:	4618      	mov	r0, r3
 801976a:	f000 fb83 	bl	8019e74 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801976e:	4b0d      	ldr	r3, [pc, #52]	; (80197a4 <RegionEU868LinkAdrReq+0x240>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019774:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019778:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019780:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8019788:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8019790:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8019792:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8019796:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8019798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801979c:	4618      	mov	r0, r3
 801979e:	374c      	adds	r7, #76	; 0x4c
 80197a0:	46bd      	mov	sp, r7
 80197a2:	bd90      	pop	{r4, r7, pc}
 80197a4:	2000169c 	.word	0x2000169c

080197a8 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80197a8:	b580      	push	{r7, lr}
 80197aa:	b084      	sub	sp, #16
 80197ac:	af00      	add	r7, sp, #0
 80197ae:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80197b0:	2307      	movs	r3, #7
 80197b2:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	685b      	ldr	r3, [r3, #4]
 80197bc:	f107 020e 	add.w	r2, r7, #14
 80197c0:	4611      	mov	r1, r2
 80197c2:	4618      	mov	r0, r3
 80197c4:	f7ff f8de 	bl	8018984 <VerifyRfFreq>
 80197c8:	4603      	mov	r3, r0
 80197ca:	f083 0301 	eor.w	r3, r3, #1
 80197ce:	b2db      	uxtb	r3, r3
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d003      	beq.n	80197dc <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80197d4:	7bfb      	ldrb	r3, [r7, #15]
 80197d6:	f023 0301 	bic.w	r3, r3, #1
 80197da:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	f993 3000 	ldrsb.w	r3, [r3]
 80197e2:	2207      	movs	r2, #7
 80197e4:	2100      	movs	r1, #0
 80197e6:	4618      	mov	r0, r3
 80197e8:	f7fe fb47 	bl	8017e7a <RegionCommonValueInRange>
 80197ec:	4603      	mov	r3, r0
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d103      	bne.n	80197fa <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80197f2:	7bfb      	ldrb	r3, [r7, #15]
 80197f4:	f023 0302 	bic.w	r3, r3, #2
 80197f8:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019800:	2205      	movs	r2, #5
 8019802:	2100      	movs	r1, #0
 8019804:	4618      	mov	r0, r3
 8019806:	f7fe fb38 	bl	8017e7a <RegionCommonValueInRange>
 801980a:	4603      	mov	r3, r0
 801980c:	2b00      	cmp	r3, #0
 801980e:	d103      	bne.n	8019818 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019810:	7bfb      	ldrb	r3, [r7, #15]
 8019812:	f023 0304 	bic.w	r3, r3, #4
 8019816:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019818:	7bfb      	ldrb	r3, [r7, #15]
}
 801981a:	4618      	mov	r0, r3
 801981c:	3710      	adds	r7, #16
 801981e:	46bd      	mov	sp, r7
 8019820:	bd80      	pop	{r7, pc}
	...

08019824 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8019824:	b580      	push	{r7, lr}
 8019826:	b086      	sub	sp, #24
 8019828:	af00      	add	r7, sp, #0
 801982a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 801982c:	2303      	movs	r3, #3
 801982e:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	681b      	ldr	r3, [r3, #0]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d114      	bne.n	8019864 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019840:	b2db      	uxtb	r3, r3
 8019842:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8019844:	f107 0308 	add.w	r3, r7, #8
 8019848:	4618      	mov	r0, r3
 801984a:	f000 f9ff 	bl	8019c4c <RegionEU868ChannelsRemove>
 801984e:	4603      	mov	r3, r0
 8019850:	f083 0301 	eor.w	r3, r3, #1
 8019854:	b2db      	uxtb	r3, r3
 8019856:	2b00      	cmp	r3, #0
 8019858:	d03b      	beq.n	80198d2 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 801985a:	7dfb      	ldrb	r3, [r7, #23]
 801985c:	f023 0303 	bic.w	r3, r3, #3
 8019860:	75fb      	strb	r3, [r7, #23]
 8019862:	e036      	b.n	80198d2 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019870:	b2db      	uxtb	r3, r3
 8019872:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8019874:	f107 030c 	add.w	r3, r7, #12
 8019878:	4618      	mov	r0, r3
 801987a:	f000 f945 	bl	8019b08 <RegionEU868ChannelAdd>
 801987e:	4603      	mov	r3, r0
 8019880:	2b06      	cmp	r3, #6
 8019882:	d820      	bhi.n	80198c6 <RegionEU868NewChannelReq+0xa2>
 8019884:	a201      	add	r2, pc, #4	; (adr r2, 801988c <RegionEU868NewChannelReq+0x68>)
 8019886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801988a:	bf00      	nop
 801988c:	080198d1 	.word	0x080198d1
 8019890:	080198c7 	.word	0x080198c7
 8019894:	080198c7 	.word	0x080198c7
 8019898:	080198c7 	.word	0x080198c7
 801989c:	080198a9 	.word	0x080198a9
 80198a0:	080198b3 	.word	0x080198b3
 80198a4:	080198bd 	.word	0x080198bd
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80198a8:	7dfb      	ldrb	r3, [r7, #23]
 80198aa:	f023 0301 	bic.w	r3, r3, #1
 80198ae:	75fb      	strb	r3, [r7, #23]
                break;
 80198b0:	e00f      	b.n	80198d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80198b2:	7dfb      	ldrb	r3, [r7, #23]
 80198b4:	f023 0302 	bic.w	r3, r3, #2
 80198b8:	75fb      	strb	r3, [r7, #23]
                break;
 80198ba:	e00a      	b.n	80198d2 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80198bc:	7dfb      	ldrb	r3, [r7, #23]
 80198be:	f023 0303 	bic.w	r3, r3, #3
 80198c2:	75fb      	strb	r3, [r7, #23]
                break;
 80198c4:	e005      	b.n	80198d2 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80198c6:	7dfb      	ldrb	r3, [r7, #23]
 80198c8:	f023 0303 	bic.w	r3, r3, #3
 80198cc:	75fb      	strb	r3, [r7, #23]
                break;
 80198ce:	e000      	b.n	80198d2 <RegionEU868NewChannelReq+0xae>
                break;
 80198d0:	bf00      	nop
            }
        }
    }

    return status;
 80198d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80198d6:	4618      	mov	r0, r3
 80198d8:	3718      	adds	r7, #24
 80198da:	46bd      	mov	sp, r7
 80198dc:	bd80      	pop	{r7, pc}
 80198de:	bf00      	nop

080198e0 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80198e0:	b480      	push	{r7}
 80198e2:	b083      	sub	sp, #12
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80198e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80198ec:	4618      	mov	r0, r3
 80198ee:	370c      	adds	r7, #12
 80198f0:	46bd      	mov	sp, r7
 80198f2:	bc80      	pop	{r7}
 80198f4:	4770      	bx	lr
	...

080198f8 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b084      	sub	sp, #16
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019900:	2303      	movs	r3, #3
 8019902:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019904:	2300      	movs	r3, #0
 8019906:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	781b      	ldrb	r3, [r3, #0]
 801990c:	2b0f      	cmp	r3, #15
 801990e:	d901      	bls.n	8019914 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019910:	2300      	movs	r3, #0
 8019912:	e035      	b.n	8019980 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	685b      	ldr	r3, [r3, #4]
 8019918:	f107 020e 	add.w	r2, r7, #14
 801991c:	4611      	mov	r1, r2
 801991e:	4618      	mov	r0, r3
 8019920:	f7ff f830 	bl	8018984 <VerifyRfFreq>
 8019924:	4603      	mov	r3, r0
 8019926:	f083 0301 	eor.w	r3, r3, #1
 801992a:	b2db      	uxtb	r3, r3
 801992c:	2b00      	cmp	r3, #0
 801992e:	d003      	beq.n	8019938 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019930:	7bfb      	ldrb	r3, [r7, #15]
 8019932:	f023 0301 	bic.w	r3, r3, #1
 8019936:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019938:	4b13      	ldr	r3, [pc, #76]	; (8019988 <RegionEU868DlChannelReq+0x90>)
 801993a:	681a      	ldr	r2, [r3, #0]
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	781b      	ldrb	r3, [r3, #0]
 8019940:	4619      	mov	r1, r3
 8019942:	460b      	mov	r3, r1
 8019944:	005b      	lsls	r3, r3, #1
 8019946:	440b      	add	r3, r1
 8019948:	009b      	lsls	r3, r3, #2
 801994a:	4413      	add	r3, r2
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	2b00      	cmp	r3, #0
 8019950:	d103      	bne.n	801995a <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8019952:	7bfb      	ldrb	r3, [r7, #15]
 8019954:	f023 0302 	bic.w	r3, r3, #2
 8019958:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 801995a:	7bfb      	ldrb	r3, [r7, #15]
 801995c:	2b03      	cmp	r3, #3
 801995e:	d10d      	bne.n	801997c <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019960:	4b09      	ldr	r3, [pc, #36]	; (8019988 <RegionEU868DlChannelReq+0x90>)
 8019962:	6819      	ldr	r1, [r3, #0]
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	781b      	ldrb	r3, [r3, #0]
 8019968:	4618      	mov	r0, r3
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	685a      	ldr	r2, [r3, #4]
 801996e:	4603      	mov	r3, r0
 8019970:	005b      	lsls	r3, r3, #1
 8019972:	4403      	add	r3, r0
 8019974:	009b      	lsls	r3, r3, #2
 8019976:	440b      	add	r3, r1
 8019978:	3304      	adds	r3, #4
 801997a:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 801997c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019980:	4618      	mov	r0, r3
 8019982:	3710      	adds	r7, #16
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}
 8019988:	2000169c 	.word	0x2000169c

0801998c <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 801998c:	b480      	push	{r7}
 801998e:	b083      	sub	sp, #12
 8019990:	af00      	add	r7, sp, #0
 8019992:	4603      	mov	r3, r0
 8019994:	460a      	mov	r2, r1
 8019996:	71fb      	strb	r3, [r7, #7]
 8019998:	4613      	mov	r3, r2
 801999a:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 801999c:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80199a0:	4618      	mov	r0, r3
 80199a2:	370c      	adds	r7, #12
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bc80      	pop	{r7}
 80199a8:	4770      	bx	lr
	...

080199ac <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b09a      	sub	sp, #104	; 0x68
 80199b0:	af02      	add	r7, sp, #8
 80199b2:	60f8      	str	r0, [r7, #12]
 80199b4:	60b9      	str	r1, [r7, #8]
 80199b6:	607a      	str	r2, [r7, #4]
 80199b8:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80199ba:	2300      	movs	r3, #0
 80199bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80199c0:	2300      	movs	r3, #0
 80199c2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80199c6:	2300      	movs	r3, #0
 80199c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80199ca:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80199ce:	2200      	movs	r2, #0
 80199d0:	601a      	str	r2, [r3, #0]
 80199d2:	605a      	str	r2, [r3, #4]
 80199d4:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80199d6:	230c      	movs	r3, #12
 80199d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80199dc:	2307      	movs	r3, #7
 80199de:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80199e0:	4b47      	ldr	r3, [pc, #284]	; (8019b00 <RegionEU868NextChannel+0x154>)
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80199e8:	2201      	movs	r2, #1
 80199ea:	2100      	movs	r1, #0
 80199ec:	4618      	mov	r0, r3
 80199ee:	f7fe fa95 	bl	8017f1c <RegionCommonCountChannels>
 80199f2:	4603      	mov	r3, r0
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d10a      	bne.n	8019a0e <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80199f8:	4b41      	ldr	r3, [pc, #260]	; (8019b00 <RegionEU868NextChannel+0x154>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a00:	4b3f      	ldr	r3, [pc, #252]	; (8019b00 <RegionEU868NextChannel+0x154>)
 8019a02:	681b      	ldr	r3, [r3, #0]
 8019a04:	f042 0207 	orr.w	r2, r2, #7
 8019a08:	b292      	uxth	r2, r2
 8019a0a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019a0e:	68fb      	ldr	r3, [r7, #12]
 8019a10:	7a5b      	ldrb	r3, [r3, #9]
 8019a12:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019a14:	68fb      	ldr	r3, [r7, #12]
 8019a16:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019a1a:	b2db      	uxtb	r3, r3
 8019a1c:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019a1e:	4b38      	ldr	r3, [pc, #224]	; (8019b00 <RegionEU868NextChannel+0x154>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a26:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019a28:	4b35      	ldr	r3, [pc, #212]	; (8019b00 <RegionEU868NextChannel+0x154>)
 8019a2a:	681b      	ldr	r3, [r3, #0]
 8019a2c:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019a2e:	4b35      	ldr	r3, [pc, #212]	; (8019b04 <RegionEU868NextChannel+0x158>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019a34:	2310      	movs	r3, #16
 8019a36:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019a38:	f107 0312 	add.w	r3, r7, #18
 8019a3c:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	7a9b      	ldrb	r3, [r3, #10]
 8019a4e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019a52:	2306      	movs	r3, #6
 8019a54:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019a58:	68fa      	ldr	r2, [r7, #12]
 8019a5a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a5e:	320c      	adds	r2, #12
 8019a60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a64:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019a68:	68fb      	ldr	r3, [r7, #12]
 8019a6a:	7d1b      	ldrb	r3, [r3, #20]
 8019a6c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	8adb      	ldrh	r3, [r3, #22]
 8019a7a:	4619      	mov	r1, r3
 8019a7c:	4610      	mov	r0, r2
 8019a7e:	f7fe fff7 	bl	8018a70 <GetTimeOnAir>
 8019a82:	4603      	mov	r3, r0
 8019a84:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019a86:	f107 0314 	add.w	r3, r7, #20
 8019a8a:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019a8c:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019a90:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019a94:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	9301      	str	r3, [sp, #4]
 8019a9c:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019aa0:	9300      	str	r3, [sp, #0]
 8019aa2:	460b      	mov	r3, r1
 8019aa4:	6839      	ldr	r1, [r7, #0]
 8019aa6:	f7fe fe50 	bl	801874a <RegionCommonIdentifyChannels>
 8019aaa:	4603      	mov	r3, r0
 8019aac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d10e      	bne.n	8019ad6 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019ab8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019abc:	3b01      	subs	r3, #1
 8019abe:	4619      	mov	r1, r3
 8019ac0:	2000      	movs	r0, #0
 8019ac2:	f000 f985 	bl	8019dd0 <randr>
 8019ac6:	4603      	mov	r3, r0
 8019ac8:	3360      	adds	r3, #96	; 0x60
 8019aca:	443b      	add	r3, r7
 8019acc:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	701a      	strb	r2, [r3, #0]
 8019ad4:	e00e      	b.n	8019af4 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019ad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019ada:	2b0c      	cmp	r3, #12
 8019adc:	d10a      	bne.n	8019af4 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019ade:	4b08      	ldr	r3, [pc, #32]	; (8019b00 <RegionEU868NextChannel+0x154>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019ae6:	4b06      	ldr	r3, [pc, #24]	; (8019b00 <RegionEU868NextChannel+0x154>)
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	f042 0207 	orr.w	r2, r2, #7
 8019aee:	b292      	uxth	r2, r2
 8019af0:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019af4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019af8:	4618      	mov	r0, r3
 8019afa:	3760      	adds	r7, #96	; 0x60
 8019afc:	46bd      	mov	sp, r7
 8019afe:	bd80      	pop	{r7, pc}
 8019b00:	2000169c 	.word	0x2000169c
 8019b04:	20001698 	.word	0x20001698

08019b08 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019b10:	2300      	movs	r3, #0
 8019b12:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019b14:	2300      	movs	r3, #0
 8019b16:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019b18:	2300      	movs	r3, #0
 8019b1a:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	791b      	ldrb	r3, [r3, #4]
 8019b20:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019b22:	7b7b      	ldrb	r3, [r7, #13]
 8019b24:	2b02      	cmp	r3, #2
 8019b26:	d801      	bhi.n	8019b2c <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b28:	2306      	movs	r3, #6
 8019b2a:	e089      	b.n	8019c40 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019b2c:	7b7b      	ldrb	r3, [r7, #13]
 8019b2e:	2b0f      	cmp	r3, #15
 8019b30:	d901      	bls.n	8019b36 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b32:	2303      	movs	r3, #3
 8019b34:	e084      	b.n	8019c40 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	681b      	ldr	r3, [r3, #0]
 8019b3a:	7a1b      	ldrb	r3, [r3, #8]
 8019b3c:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b40:	b25b      	sxtb	r3, r3
 8019b42:	2207      	movs	r2, #7
 8019b44:	2100      	movs	r1, #0
 8019b46:	4618      	mov	r0, r3
 8019b48:	f7fe f997 	bl	8017e7a <RegionCommonValueInRange>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d101      	bne.n	8019b56 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019b52:	2301      	movs	r3, #1
 8019b54:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	7a1b      	ldrb	r3, [r3, #8]
 8019b5c:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b60:	b25b      	sxtb	r3, r3
 8019b62:	2207      	movs	r2, #7
 8019b64:	2100      	movs	r1, #0
 8019b66:	4618      	mov	r0, r3
 8019b68:	f7fe f987 	bl	8017e7a <RegionCommonValueInRange>
 8019b6c:	4603      	mov	r3, r0
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d101      	bne.n	8019b76 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019b72:	2301      	movs	r3, #1
 8019b74:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	7a1b      	ldrb	r3, [r3, #8]
 8019b7c:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b80:	b25a      	sxtb	r2, r3
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	7a1b      	ldrb	r3, [r3, #8]
 8019b88:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b8c:	b25b      	sxtb	r3, r3
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	dd01      	ble.n	8019b96 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019b92:	2301      	movs	r3, #1
 8019b94:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019b96:	7bbb      	ldrb	r3, [r7, #14]
 8019b98:	f083 0301 	eor.w	r3, r3, #1
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d010      	beq.n	8019bc4 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	f107 020c 	add.w	r2, r7, #12
 8019bac:	4611      	mov	r1, r2
 8019bae:	4618      	mov	r0, r3
 8019bb0:	f7fe fee8 	bl	8018984 <VerifyRfFreq>
 8019bb4:	4603      	mov	r3, r0
 8019bb6:	f083 0301 	eor.w	r3, r3, #1
 8019bba:	b2db      	uxtb	r3, r3
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d001      	beq.n	8019bc4 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019bc4:	7bfb      	ldrb	r3, [r7, #15]
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d004      	beq.n	8019bd4 <RegionEU868ChannelAdd+0xcc>
 8019bca:	7bbb      	ldrb	r3, [r7, #14]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	d001      	beq.n	8019bd4 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019bd0:	2306      	movs	r3, #6
 8019bd2:	e035      	b.n	8019c40 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019bd4:	7bfb      	ldrb	r3, [r7, #15]
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	d001      	beq.n	8019bde <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019bda:	2305      	movs	r3, #5
 8019bdc:	e030      	b.n	8019c40 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019bde:	7bbb      	ldrb	r3, [r7, #14]
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d001      	beq.n	8019be8 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019be4:	2304      	movs	r3, #4
 8019be6:	e02b      	b.n	8019c40 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019be8:	4b17      	ldr	r3, [pc, #92]	; (8019c48 <RegionEU868ChannelAdd+0x140>)
 8019bea:	6819      	ldr	r1, [r3, #0]
 8019bec:	7b7a      	ldrb	r2, [r7, #13]
 8019bee:	4613      	mov	r3, r2
 8019bf0:	005b      	lsls	r3, r3, #1
 8019bf2:	4413      	add	r3, r2
 8019bf4:	009b      	lsls	r3, r3, #2
 8019bf6:	18c8      	adds	r0, r1, r3
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	220c      	movs	r2, #12
 8019bfe:	4619      	mov	r1, r3
 8019c00:	f000 f8fd 	bl	8019dfe <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019c04:	4b10      	ldr	r3, [pc, #64]	; (8019c48 <RegionEU868ChannelAdd+0x140>)
 8019c06:	6819      	ldr	r1, [r3, #0]
 8019c08:	7b7a      	ldrb	r2, [r7, #13]
 8019c0a:	7b38      	ldrb	r0, [r7, #12]
 8019c0c:	4613      	mov	r3, r2
 8019c0e:	005b      	lsls	r3, r3, #1
 8019c10:	4413      	add	r3, r2
 8019c12:	009b      	lsls	r3, r3, #2
 8019c14:	440b      	add	r3, r1
 8019c16:	3309      	adds	r3, #9
 8019c18:	4602      	mov	r2, r0
 8019c1a:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019c1c:	4b0a      	ldr	r3, [pc, #40]	; (8019c48 <RegionEU868ChannelAdd+0x140>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019c24:	b21a      	sxth	r2, r3
 8019c26:	7b7b      	ldrb	r3, [r7, #13]
 8019c28:	2101      	movs	r1, #1
 8019c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8019c2e:	b21b      	sxth	r3, r3
 8019c30:	4313      	orrs	r3, r2
 8019c32:	b21a      	sxth	r2, r3
 8019c34:	4b04      	ldr	r3, [pc, #16]	; (8019c48 <RegionEU868ChannelAdd+0x140>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	b292      	uxth	r2, r2
 8019c3a:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019c3e:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019c40:	4618      	mov	r0, r3
 8019c42:	3710      	adds	r7, #16
 8019c44:	46bd      	mov	sp, r7
 8019c46:	bd80      	pop	{r7, pc}
 8019c48:	2000169c 	.word	0x2000169c

08019c4c <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c4c:	b580      	push	{r7, lr}
 8019c4e:	b086      	sub	sp, #24
 8019c50:	af00      	add	r7, sp, #0
 8019c52:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	781b      	ldrb	r3, [r3, #0]
 8019c58:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c5a:	7dfb      	ldrb	r3, [r7, #23]
 8019c5c:	2b02      	cmp	r3, #2
 8019c5e:	d801      	bhi.n	8019c64 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019c60:	2300      	movs	r3, #0
 8019c62:	e016      	b.n	8019c92 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019c64:	4b0d      	ldr	r3, [pc, #52]	; (8019c9c <RegionEU868ChannelsRemove+0x50>)
 8019c66:	6819      	ldr	r1, [r3, #0]
 8019c68:	7dfa      	ldrb	r2, [r7, #23]
 8019c6a:	4613      	mov	r3, r2
 8019c6c:	005b      	lsls	r3, r3, #1
 8019c6e:	4413      	add	r3, r2
 8019c70:	009b      	lsls	r3, r3, #2
 8019c72:	440b      	add	r3, r1
 8019c74:	461a      	mov	r2, r3
 8019c76:	2300      	movs	r3, #0
 8019c78:	6013      	str	r3, [r2, #0]
 8019c7a:	6053      	str	r3, [r2, #4]
 8019c7c:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019c7e:	4b07      	ldr	r3, [pc, #28]	; (8019c9c <RegionEU868ChannelsRemove+0x50>)
 8019c80:	681b      	ldr	r3, [r3, #0]
 8019c82:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019c86:	7df9      	ldrb	r1, [r7, #23]
 8019c88:	2210      	movs	r2, #16
 8019c8a:	4618      	mov	r0, r3
 8019c8c:	f7fe f912 	bl	8017eb4 <RegionCommonChanDisable>
 8019c90:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019c92:	4618      	mov	r0, r3
 8019c94:	3718      	adds	r7, #24
 8019c96:	46bd      	mov	sp, r7
 8019c98:	bd80      	pop	{r7, pc}
 8019c9a:	bf00      	nop
 8019c9c:	2000169c 	.word	0x2000169c

08019ca0 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019ca0:	b590      	push	{r4, r7, lr}
 8019ca2:	b085      	sub	sp, #20
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019ca8:	687b      	ldr	r3, [r7, #4]
 8019caa:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019cae:	4b20      	ldr	r3, [pc, #128]	; (8019d30 <RegionEU868SetContinuousWave+0x90>)
 8019cb0:	681a      	ldr	r2, [r3, #0]
 8019cb2:	4b20      	ldr	r3, [pc, #128]	; (8019d34 <RegionEU868SetContinuousWave+0x94>)
 8019cb4:	6819      	ldr	r1, [r3, #0]
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	781b      	ldrb	r3, [r3, #0]
 8019cba:	461c      	mov	r4, r3
 8019cbc:	4623      	mov	r3, r4
 8019cbe:	005b      	lsls	r3, r3, #1
 8019cc0:	4423      	add	r3, r4
 8019cc2:	009b      	lsls	r3, r3, #2
 8019cc4:	440b      	add	r3, r1
 8019cc6:	3309      	adds	r3, #9
 8019cc8:	781b      	ldrb	r3, [r3, #0]
 8019cca:	4619      	mov	r1, r3
 8019ccc:	460b      	mov	r3, r1
 8019cce:	005b      	lsls	r3, r3, #1
 8019cd0:	440b      	add	r3, r1
 8019cd2:	00db      	lsls	r3, r3, #3
 8019cd4:	4413      	add	r3, r2
 8019cd6:	3302      	adds	r3, #2
 8019cd8:	f993 3000 	ldrsb.w	r3, [r3]
 8019cdc:	4619      	mov	r1, r3
 8019cde:	f7fe fdd4 	bl	801888a <RegionCommonLimitTxPower>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019ce6:	2300      	movs	r3, #0
 8019ce8:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019cea:	4b12      	ldr	r3, [pc, #72]	; (8019d34 <RegionEU868SetContinuousWave+0x94>)
 8019cec:	681a      	ldr	r2, [r3, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	781b      	ldrb	r3, [r3, #0]
 8019cf2:	4619      	mov	r1, r3
 8019cf4:	460b      	mov	r3, r1
 8019cf6:	005b      	lsls	r3, r3, #1
 8019cf8:	440b      	add	r3, r1
 8019cfa:	009b      	lsls	r3, r3, #2
 8019cfc:	4413      	add	r3, r2
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	6859      	ldr	r1, [r3, #4]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	689a      	ldr	r2, [r3, #8]
 8019d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d0e:	4618      	mov	r0, r3
 8019d10:	f7fe fc2c 	bl	801856c <RegionCommonComputeTxPower>
 8019d14:	4603      	mov	r3, r0
 8019d16:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019d18:	4b07      	ldr	r3, [pc, #28]	; (8019d38 <RegionEU868SetContinuousWave+0x98>)
 8019d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d1c:	687a      	ldr	r2, [r7, #4]
 8019d1e:	8992      	ldrh	r2, [r2, #12]
 8019d20:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d24:	68b8      	ldr	r0, [r7, #8]
 8019d26:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019d28:	bf00      	nop
 8019d2a:	3714      	adds	r7, #20
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	bd90      	pop	{r4, r7, pc}
 8019d30:	20001698 	.word	0x20001698
 8019d34:	2000169c 	.word	0x2000169c
 8019d38:	0801f9d8 	.word	0x0801f9d8

08019d3c <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d3c:	b480      	push	{r7}
 8019d3e:	b085      	sub	sp, #20
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	4603      	mov	r3, r0
 8019d44:	71fb      	strb	r3, [r7, #7]
 8019d46:	460b      	mov	r3, r1
 8019d48:	71bb      	strb	r3, [r7, #6]
 8019d4a:	4613      	mov	r3, r2
 8019d4c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019d4e:	79ba      	ldrb	r2, [r7, #6]
 8019d50:	797b      	ldrb	r3, [r7, #5]
 8019d52:	1ad3      	subs	r3, r2, r3
 8019d54:	b2db      	uxtb	r3, r3
 8019d56:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019d58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d5c:	2b00      	cmp	r3, #0
 8019d5e:	da01      	bge.n	8019d64 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019d60:	2300      	movs	r3, #0
 8019d62:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019d64:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019d66:	4618      	mov	r0, r3
 8019d68:	3714      	adds	r7, #20
 8019d6a:	46bd      	mov	sp, r7
 8019d6c:	bc80      	pop	{r7}
 8019d6e:	4770      	bx	lr

08019d70 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d70:	b480      	push	{r7}
 8019d72:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d74:	4b0d      	ldr	r3, [pc, #52]	; (8019dac <rand1+0x3c>)
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	4a0d      	ldr	r2, [pc, #52]	; (8019db0 <rand1+0x40>)
 8019d7a:	fb02 f303 	mul.w	r3, r2, r3
 8019d7e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d82:	3339      	adds	r3, #57	; 0x39
 8019d84:	4a09      	ldr	r2, [pc, #36]	; (8019dac <rand1+0x3c>)
 8019d86:	6013      	str	r3, [r2, #0]
 8019d88:	4b08      	ldr	r3, [pc, #32]	; (8019dac <rand1+0x3c>)
 8019d8a:	681a      	ldr	r2, [r3, #0]
 8019d8c:	2303      	movs	r3, #3
 8019d8e:	fba3 1302 	umull	r1, r3, r3, r2
 8019d92:	1ad1      	subs	r1, r2, r3
 8019d94:	0849      	lsrs	r1, r1, #1
 8019d96:	440b      	add	r3, r1
 8019d98:	0f99      	lsrs	r1, r3, #30
 8019d9a:	460b      	mov	r3, r1
 8019d9c:	07db      	lsls	r3, r3, #31
 8019d9e:	1a5b      	subs	r3, r3, r1
 8019da0:	1ad1      	subs	r1, r2, r3
 8019da2:	460b      	mov	r3, r1
}
 8019da4:	4618      	mov	r0, r3
 8019da6:	46bd      	mov	sp, r7
 8019da8:	bc80      	pop	{r7}
 8019daa:	4770      	bx	lr
 8019dac:	20000148 	.word	0x20000148
 8019db0:	41c64e6d 	.word	0x41c64e6d

08019db4 <srand1>:

void srand1( uint32_t seed )
{
 8019db4:	b480      	push	{r7}
 8019db6:	b083      	sub	sp, #12
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	6078      	str	r0, [r7, #4]
    next = seed;
 8019dbc:	4a03      	ldr	r2, [pc, #12]	; (8019dcc <srand1+0x18>)
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	6013      	str	r3, [r2, #0]
}
 8019dc2:	bf00      	nop
 8019dc4:	370c      	adds	r7, #12
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bc80      	pop	{r7}
 8019dca:	4770      	bx	lr
 8019dcc:	20000148 	.word	0x20000148

08019dd0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b082      	sub	sp, #8
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	6078      	str	r0, [r7, #4]
 8019dd8:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019dda:	f7ff ffc9 	bl	8019d70 <rand1>
 8019dde:	4602      	mov	r2, r0
 8019de0:	6839      	ldr	r1, [r7, #0]
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	1acb      	subs	r3, r1, r3
 8019de6:	3301      	adds	r3, #1
 8019de8:	fb92 f1f3 	sdiv	r1, r2, r3
 8019dec:	fb01 f303 	mul.w	r3, r1, r3
 8019df0:	1ad2      	subs	r2, r2, r3
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	4413      	add	r3, r2
}
 8019df6:	4618      	mov	r0, r3
 8019df8:	3708      	adds	r7, #8
 8019dfa:	46bd      	mov	sp, r7
 8019dfc:	bd80      	pop	{r7, pc}

08019dfe <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019dfe:	b480      	push	{r7}
 8019e00:	b085      	sub	sp, #20
 8019e02:	af00      	add	r7, sp, #0
 8019e04:	60f8      	str	r0, [r7, #12]
 8019e06:	60b9      	str	r1, [r7, #8]
 8019e08:	4613      	mov	r3, r2
 8019e0a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019e0c:	e007      	b.n	8019e1e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e0e:	68ba      	ldr	r2, [r7, #8]
 8019e10:	1c53      	adds	r3, r2, #1
 8019e12:	60bb      	str	r3, [r7, #8]
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	1c59      	adds	r1, r3, #1
 8019e18:	60f9      	str	r1, [r7, #12]
 8019e1a:	7812      	ldrb	r2, [r2, #0]
 8019e1c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e1e:	88fb      	ldrh	r3, [r7, #6]
 8019e20:	1e5a      	subs	r2, r3, #1
 8019e22:	80fa      	strh	r2, [r7, #6]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	d1f2      	bne.n	8019e0e <memcpy1+0x10>
    }
}
 8019e28:	bf00      	nop
 8019e2a:	bf00      	nop
 8019e2c:	3714      	adds	r7, #20
 8019e2e:	46bd      	mov	sp, r7
 8019e30:	bc80      	pop	{r7}
 8019e32:	4770      	bx	lr

08019e34 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e34:	b480      	push	{r7}
 8019e36:	b085      	sub	sp, #20
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	60f8      	str	r0, [r7, #12]
 8019e3c:	60b9      	str	r1, [r7, #8]
 8019e3e:	4613      	mov	r3, r2
 8019e40:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019e42:	88fb      	ldrh	r3, [r7, #6]
 8019e44:	3b01      	subs	r3, #1
 8019e46:	68fa      	ldr	r2, [r7, #12]
 8019e48:	4413      	add	r3, r2
 8019e4a:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e4c:	e007      	b.n	8019e5e <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019e4e:	68ba      	ldr	r2, [r7, #8]
 8019e50:	1c53      	adds	r3, r2, #1
 8019e52:	60bb      	str	r3, [r7, #8]
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	1e59      	subs	r1, r3, #1
 8019e58:	60f9      	str	r1, [r7, #12]
 8019e5a:	7812      	ldrb	r2, [r2, #0]
 8019e5c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e5e:	88fb      	ldrh	r3, [r7, #6]
 8019e60:	1e5a      	subs	r2, r3, #1
 8019e62:	80fa      	strh	r2, [r7, #6]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	d1f2      	bne.n	8019e4e <memcpyr+0x1a>
    }
}
 8019e68:	bf00      	nop
 8019e6a:	bf00      	nop
 8019e6c:	3714      	adds	r7, #20
 8019e6e:	46bd      	mov	sp, r7
 8019e70:	bc80      	pop	{r7}
 8019e72:	4770      	bx	lr

08019e74 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e74:	b480      	push	{r7}
 8019e76:	b083      	sub	sp, #12
 8019e78:	af00      	add	r7, sp, #0
 8019e7a:	6078      	str	r0, [r7, #4]
 8019e7c:	460b      	mov	r3, r1
 8019e7e:	70fb      	strb	r3, [r7, #3]
 8019e80:	4613      	mov	r3, r2
 8019e82:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019e84:	e004      	b.n	8019e90 <memset1+0x1c>
    {
        *dst++ = value;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	1c5a      	adds	r2, r3, #1
 8019e8a:	607a      	str	r2, [r7, #4]
 8019e8c:	78fa      	ldrb	r2, [r7, #3]
 8019e8e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e90:	883b      	ldrh	r3, [r7, #0]
 8019e92:	1e5a      	subs	r2, r3, #1
 8019e94:	803a      	strh	r2, [r7, #0]
 8019e96:	2b00      	cmp	r3, #0
 8019e98:	d1f5      	bne.n	8019e86 <memset1+0x12>
    }
}
 8019e9a:	bf00      	nop
 8019e9c:	bf00      	nop
 8019e9e:	370c      	adds	r7, #12
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bc80      	pop	{r7}
 8019ea4:	4770      	bx	lr
	...

08019ea8 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019ea8:	b480      	push	{r7}
 8019eaa:	b085      	sub	sp, #20
 8019eac:	af00      	add	r7, sp, #0
 8019eae:	6078      	str	r0, [r7, #4]
 8019eb0:	460b      	mov	r3, r1
 8019eb2:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8019eb8:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	2b00      	cmp	r3, #0
 8019ebe:	d101      	bne.n	8019ec4 <Crc32+0x1c>
    {
        return 0;
 8019ec0:	2300      	movs	r3, #0
 8019ec2:	e026      	b.n	8019f12 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	817b      	strh	r3, [r7, #10]
 8019ec8:	e01d      	b.n	8019f06 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019eca:	897b      	ldrh	r3, [r7, #10]
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	4413      	add	r3, r2
 8019ed0:	781b      	ldrb	r3, [r3, #0]
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	4053      	eors	r3, r2
 8019ed8:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019eda:	2300      	movs	r3, #0
 8019edc:	813b      	strh	r3, [r7, #8]
 8019ede:	e00c      	b.n	8019efa <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	085a      	lsrs	r2, r3, #1
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	f003 0301 	and.w	r3, r3, #1
 8019eea:	425b      	negs	r3, r3
 8019eec:	490b      	ldr	r1, [pc, #44]	; (8019f1c <Crc32+0x74>)
 8019eee:	400b      	ands	r3, r1
 8019ef0:	4053      	eors	r3, r2
 8019ef2:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019ef4:	893b      	ldrh	r3, [r7, #8]
 8019ef6:	3301      	adds	r3, #1
 8019ef8:	813b      	strh	r3, [r7, #8]
 8019efa:	893b      	ldrh	r3, [r7, #8]
 8019efc:	2b07      	cmp	r3, #7
 8019efe:	d9ef      	bls.n	8019ee0 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019f00:	897b      	ldrh	r3, [r7, #10]
 8019f02:	3301      	adds	r3, #1
 8019f04:	817b      	strh	r3, [r7, #10]
 8019f06:	897a      	ldrh	r2, [r7, #10]
 8019f08:	887b      	ldrh	r3, [r7, #2]
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d3dd      	bcc.n	8019eca <Crc32+0x22>
        }
    }

    return ~crc;
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	43db      	mvns	r3, r3
}
 8019f12:	4618      	mov	r0, r3
 8019f14:	3714      	adds	r7, #20
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bc80      	pop	{r7}
 8019f1a:	4770      	bx	lr
 8019f1c:	edb88320 	.word	0xedb88320

08019f20 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019f20:	b580      	push	{r7, lr}
 8019f22:	b084      	sub	sp, #16
 8019f24:	af02      	add	r7, sp, #8
 8019f26:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019f28:	4a24      	ldr	r2, [pc, #144]	; (8019fbc <RadioInit+0x9c>)
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019f2e:	4b24      	ldr	r3, [pc, #144]	; (8019fc0 <RadioInit+0xa0>)
 8019f30:	2200      	movs	r2, #0
 8019f32:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019f34:	4b22      	ldr	r3, [pc, #136]	; (8019fc0 <RadioInit+0xa0>)
 8019f36:	2200      	movs	r2, #0
 8019f38:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019f3a:	4b21      	ldr	r3, [pc, #132]	; (8019fc0 <RadioInit+0xa0>)
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f40:	4b1f      	ldr	r3, [pc, #124]	; (8019fc0 <RadioInit+0xa0>)
 8019f42:	2200      	movs	r2, #0
 8019f44:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019f46:	481f      	ldr	r0, [pc, #124]	; (8019fc4 <RadioInit+0xa4>)
 8019f48:	f001 ffc2 	bl	801bed0 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019f4c:	4b1c      	ldr	r3, [pc, #112]	; (8019fc0 <RadioInit+0xa0>)
 8019f4e:	2200      	movs	r2, #0
 8019f50:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019f52:	4b1b      	ldr	r3, [pc, #108]	; (8019fc0 <RadioInit+0xa0>)
 8019f54:	2200      	movs	r2, #0
 8019f56:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019f58:	f002 fa56 	bl	801c408 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019f5c:	2100      	movs	r1, #0
 8019f5e:	2000      	movs	r0, #0
 8019f60:	f002 fe22 	bl	801cba8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019f64:	2204      	movs	r2, #4
 8019f66:	2100      	movs	r1, #0
 8019f68:	2001      	movs	r0, #1
 8019f6a:	f002 fbdf 	bl	801c72c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f6e:	2300      	movs	r3, #0
 8019f70:	2200      	movs	r2, #0
 8019f72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f7a:	f002 fb0f 	bl	801c59c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019f7e:	f000 fe99 	bl	801acb4 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019f82:	2300      	movs	r3, #0
 8019f84:	9300      	str	r3, [sp, #0]
 8019f86:	4b10      	ldr	r3, [pc, #64]	; (8019fc8 <RadioInit+0xa8>)
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8019f8e:	480f      	ldr	r0, [pc, #60]	; (8019fcc <RadioInit+0xac>)
 8019f90:	f004 f82c 	bl	801dfec <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019f94:	2300      	movs	r3, #0
 8019f96:	9300      	str	r3, [sp, #0]
 8019f98:	4b0d      	ldr	r3, [pc, #52]	; (8019fd0 <RadioInit+0xb0>)
 8019f9a:	2200      	movs	r2, #0
 8019f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8019fa0:	480c      	ldr	r0, [pc, #48]	; (8019fd4 <RadioInit+0xb4>)
 8019fa2:	f004 f823 	bl	801dfec <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019fa6:	4809      	ldr	r0, [pc, #36]	; (8019fcc <RadioInit+0xac>)
 8019fa8:	f004 f8c4 	bl	801e134 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019fac:	4809      	ldr	r0, [pc, #36]	; (8019fd4 <RadioInit+0xb4>)
 8019fae:	f004 f8c1 	bl	801e134 <UTIL_TIMER_Stop>
}
 8019fb2:	bf00      	nop
 8019fb4:	3708      	adds	r7, #8
 8019fb6:	46bd      	mov	sp, r7
 8019fb8:	bd80      	pop	{r7, pc}
 8019fba:	bf00      	nop
 8019fbc:	200017a0 	.word	0x200017a0
 8019fc0:	200017a4 	.word	0x200017a4
 8019fc4:	0801b0ad 	.word	0x0801b0ad
 8019fc8:	0801b035 	.word	0x0801b035
 8019fcc:	20001800 	.word	0x20001800
 8019fd0:	0801b049 	.word	0x0801b049
 8019fd4:	20001818 	.word	0x20001818

08019fd8 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019fdc:	f001 ffc0 	bl	801bf60 <SUBGRF_GetOperatingMode>
 8019fe0:	4603      	mov	r3, r0
 8019fe2:	2b07      	cmp	r3, #7
 8019fe4:	d00a      	beq.n	8019ffc <RadioGetStatus+0x24>
 8019fe6:	2b07      	cmp	r3, #7
 8019fe8:	dc0a      	bgt.n	801a000 <RadioGetStatus+0x28>
 8019fea:	2b04      	cmp	r3, #4
 8019fec:	d002      	beq.n	8019ff4 <RadioGetStatus+0x1c>
 8019fee:	2b05      	cmp	r3, #5
 8019ff0:	d002      	beq.n	8019ff8 <RadioGetStatus+0x20>
 8019ff2:	e005      	b.n	801a000 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8019ff4:	2302      	movs	r3, #2
 8019ff6:	e004      	b.n	801a002 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8019ff8:	2301      	movs	r3, #1
 8019ffa:	e002      	b.n	801a002 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8019ffc:	2303      	movs	r3, #3
 8019ffe:	e000      	b.n	801a002 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a000:	2300      	movs	r3, #0
    }
}
 801a002:	4618      	mov	r0, r3
 801a004:	bd80      	pop	{r7, pc}
	...

0801a008 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	4603      	mov	r3, r0
 801a010:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a012:	4a2a      	ldr	r2, [pc, #168]	; (801a0bc <RadioSetModem+0xb4>)
 801a014:	79fb      	ldrb	r3, [r7, #7]
 801a016:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a018:	79fb      	ldrb	r3, [r7, #7]
 801a01a:	4618      	mov	r0, r3
 801a01c:	f003 f997 	bl	801d34e <RFW_SetRadioModem>
    switch( modem )
 801a020:	79fb      	ldrb	r3, [r7, #7]
 801a022:	2b05      	cmp	r3, #5
 801a024:	d80e      	bhi.n	801a044 <RadioSetModem+0x3c>
 801a026:	a201      	add	r2, pc, #4	; (adr r2, 801a02c <RadioSetModem+0x24>)
 801a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a02c:	0801a053 	.word	0x0801a053
 801a030:	0801a061 	.word	0x0801a061
 801a034:	0801a045 	.word	0x0801a045
 801a038:	0801a087 	.word	0x0801a087
 801a03c:	0801a095 	.word	0x0801a095
 801a040:	0801a0a3 	.word	0x0801a0a3
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a044:	2003      	movs	r0, #3
 801a046:	f002 fb4b 	bl	801c6e0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a04a:	4b1c      	ldr	r3, [pc, #112]	; (801a0bc <RadioSetModem+0xb4>)
 801a04c:	2200      	movs	r2, #0
 801a04e:	735a      	strb	r2, [r3, #13]
        break;
 801a050:	e02f      	b.n	801a0b2 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a052:	2000      	movs	r0, #0
 801a054:	f002 fb44 	bl	801c6e0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a058:	4b18      	ldr	r3, [pc, #96]	; (801a0bc <RadioSetModem+0xb4>)
 801a05a:	2200      	movs	r2, #0
 801a05c:	735a      	strb	r2, [r3, #13]
        break;
 801a05e:	e028      	b.n	801a0b2 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a060:	2001      	movs	r0, #1
 801a062:	f002 fb3d 	bl	801c6e0 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a066:	4b15      	ldr	r3, [pc, #84]	; (801a0bc <RadioSetModem+0xb4>)
 801a068:	7b5a      	ldrb	r2, [r3, #13]
 801a06a:	4b14      	ldr	r3, [pc, #80]	; (801a0bc <RadioSetModem+0xb4>)
 801a06c:	7b1b      	ldrb	r3, [r3, #12]
 801a06e:	429a      	cmp	r2, r3
 801a070:	d01e      	beq.n	801a0b0 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a072:	4b12      	ldr	r3, [pc, #72]	; (801a0bc <RadioSetModem+0xb4>)
 801a074:	7b1a      	ldrb	r2, [r3, #12]
 801a076:	4b11      	ldr	r3, [pc, #68]	; (801a0bc <RadioSetModem+0xb4>)
 801a078:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a07a:	4b10      	ldr	r3, [pc, #64]	; (801a0bc <RadioSetModem+0xb4>)
 801a07c:	7b5b      	ldrb	r3, [r3, #13]
 801a07e:	4618      	mov	r0, r3
 801a080:	f000 ffa2 	bl	801afc8 <RadioSetPublicNetwork>
        }
        break;
 801a084:	e014      	b.n	801a0b0 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a086:	2002      	movs	r0, #2
 801a088:	f002 fb2a 	bl	801c6e0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a08c:	4b0b      	ldr	r3, [pc, #44]	; (801a0bc <RadioSetModem+0xb4>)
 801a08e:	2200      	movs	r2, #0
 801a090:	735a      	strb	r2, [r3, #13]
        break;
 801a092:	e00e      	b.n	801a0b2 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a094:	2002      	movs	r0, #2
 801a096:	f002 fb23 	bl	801c6e0 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a09a:	4b08      	ldr	r3, [pc, #32]	; (801a0bc <RadioSetModem+0xb4>)
 801a09c:	2200      	movs	r2, #0
 801a09e:	735a      	strb	r2, [r3, #13]
        break;
 801a0a0:	e007      	b.n	801a0b2 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	f002 fb1c 	bl	801c6e0 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0a8:	4b04      	ldr	r3, [pc, #16]	; (801a0bc <RadioSetModem+0xb4>)
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	735a      	strb	r2, [r3, #13]
        break;
 801a0ae:	e000      	b.n	801a0b2 <RadioSetModem+0xaa>
        break;
 801a0b0:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a0b2:	bf00      	nop
 801a0b4:	3708      	adds	r7, #8
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}
 801a0ba:	bf00      	nop
 801a0bc:	200017a4 	.word	0x200017a4

0801a0c0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a0c0:	b580      	push	{r7, lr}
 801a0c2:	b082      	sub	sp, #8
 801a0c4:	af00      	add	r7, sp, #0
 801a0c6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a0c8:	6878      	ldr	r0, [r7, #4]
 801a0ca:	f002 fac3 	bl	801c654 <SUBGRF_SetRfFrequency>
}
 801a0ce:	bf00      	nop
 801a0d0:	3708      	adds	r7, #8
 801a0d2:	46bd      	mov	sp, r7
 801a0d4:	bd80      	pop	{r7, pc}

0801a0d6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a0d6:	b580      	push	{r7, lr}
 801a0d8:	b090      	sub	sp, #64	; 0x40
 801a0da:	af0a      	add	r7, sp, #40	; 0x28
 801a0dc:	60f8      	str	r0, [r7, #12]
 801a0de:	60b9      	str	r1, [r7, #8]
 801a0e0:	603b      	str	r3, [r7, #0]
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a0ea:	2300      	movs	r3, #0
 801a0ec:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a0f2:	f000 fdf2 	bl	801acda <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a0f6:	2000      	movs	r0, #0
 801a0f8:	f7ff ff86 	bl	801a008 <RadioSetModem>

    RadioSetChannel( freq );
 801a0fc:	68f8      	ldr	r0, [r7, #12]
 801a0fe:	f7ff ffdf 	bl	801a0c0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a102:	2301      	movs	r3, #1
 801a104:	9309      	str	r3, [sp, #36]	; 0x24
 801a106:	2300      	movs	r3, #0
 801a108:	9308      	str	r3, [sp, #32]
 801a10a:	2300      	movs	r3, #0
 801a10c:	9307      	str	r3, [sp, #28]
 801a10e:	2300      	movs	r3, #0
 801a110:	9306      	str	r3, [sp, #24]
 801a112:	2300      	movs	r3, #0
 801a114:	9305      	str	r3, [sp, #20]
 801a116:	2300      	movs	r3, #0
 801a118:	9304      	str	r3, [sp, #16]
 801a11a:	2300      	movs	r3, #0
 801a11c:	9303      	str	r3, [sp, #12]
 801a11e:	2300      	movs	r3, #0
 801a120:	9302      	str	r3, [sp, #8]
 801a122:	2303      	movs	r3, #3
 801a124:	9301      	str	r3, [sp, #4]
 801a126:	68bb      	ldr	r3, [r7, #8]
 801a128:	9300      	str	r3, [sp, #0]
 801a12a:	2300      	movs	r3, #0
 801a12c:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a130:	68b9      	ldr	r1, [r7, #8]
 801a132:	2000      	movs	r0, #0
 801a134:	f000 f83c 	bl	801a1b0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a138:	2000      	movs	r0, #0
 801a13a:	f000 fdd5 	bl	801ace8 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a13e:	f000 ff71 	bl	801b024 <RadioGetWakeupTime>
 801a142:	4603      	mov	r3, r0
 801a144:	4618      	mov	r0, r3
 801a146:	f7e8 fcab 	bl	8002aa0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a14a:	f004 f90d 	bl	801e368 <UTIL_TIMER_GetCurrentTime>
 801a14e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a150:	e00d      	b.n	801a16e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a152:	2000      	movs	r0, #0
 801a154:	f000 feb6 	bl	801aec4 <RadioRssi>
 801a158:	4603      	mov	r3, r0
 801a15a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a15c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a164:	429a      	cmp	r2, r3
 801a166:	dd02      	ble.n	801a16e <RadioIsChannelFree+0x98>
        {
            status = false;
 801a168:	2300      	movs	r3, #0
 801a16a:	75fb      	strb	r3, [r7, #23]
            break;
 801a16c:	e006      	b.n	801a17c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a16e:	6938      	ldr	r0, [r7, #16]
 801a170:	f004 f90c 	bl	801e38c <UTIL_TIMER_GetElapsedTime>
 801a174:	4602      	mov	r2, r0
 801a176:	683b      	ldr	r3, [r7, #0]
 801a178:	4293      	cmp	r3, r2
 801a17a:	d8ea      	bhi.n	801a152 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a17c:	f000 fdad 	bl	801acda <RadioStandby>

    return status;
 801a180:	7dfb      	ldrb	r3, [r7, #23]
}
 801a182:	4618      	mov	r0, r3
 801a184:	3718      	adds	r7, #24
 801a186:	46bd      	mov	sp, r7
 801a188:	bd80      	pop	{r7, pc}

0801a18a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a18a:	b580      	push	{r7, lr}
 801a18c:	b082      	sub	sp, #8
 801a18e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a190:	2300      	movs	r3, #0
 801a192:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a194:	2300      	movs	r3, #0
 801a196:	2200      	movs	r2, #0
 801a198:	2100      	movs	r1, #0
 801a19a:	2000      	movs	r0, #0
 801a19c:	f002 f9fe 	bl	801c59c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a1a0:	f001 ffaf 	bl	801c102 <SUBGRF_GetRandom>
 801a1a4:	6078      	str	r0, [r7, #4]

    return rnd;
 801a1a6:	687b      	ldr	r3, [r7, #4]
}
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	3708      	adds	r7, #8
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b08a      	sub	sp, #40	; 0x28
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	60b9      	str	r1, [r7, #8]
 801a1b8:	607a      	str	r2, [r7, #4]
 801a1ba:	461a      	mov	r2, r3
 801a1bc:	4603      	mov	r3, r0
 801a1be:	73fb      	strb	r3, [r7, #15]
 801a1c0:	4613      	mov	r3, r2
 801a1c2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a1c4:	4ab9      	ldr	r2, [pc, #740]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a1c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1ca:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a1cc:	f003 f87d 	bl	801d2ca <RFW_DeInit>
    if( rxContinuous == true )
 801a1d0:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	d001      	beq.n	801a1dc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a1d8:	2300      	movs	r3, #0
 801a1da:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a1dc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d004      	beq.n	801a1ee <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a1e4:	4ab2      	ldr	r2, [pc, #712]	; (801a4b0 <RadioSetRxConfig+0x300>)
 801a1e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a1ea:	7013      	strb	r3, [r2, #0]
 801a1ec:	e002      	b.n	801a1f4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a1ee:	4bb0      	ldr	r3, [pc, #704]	; (801a4b0 <RadioSetRxConfig+0x300>)
 801a1f0:	22ff      	movs	r2, #255	; 0xff
 801a1f2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a1f4:	7bfb      	ldrb	r3, [r7, #15]
 801a1f6:	2b05      	cmp	r3, #5
 801a1f8:	d009      	beq.n	801a20e <RadioSetRxConfig+0x5e>
 801a1fa:	2b05      	cmp	r3, #5
 801a1fc:	f300 81d7 	bgt.w	801a5ae <RadioSetRxConfig+0x3fe>
 801a200:	2b00      	cmp	r3, #0
 801a202:	f000 80bf 	beq.w	801a384 <RadioSetRxConfig+0x1d4>
 801a206:	2b01      	cmp	r3, #1
 801a208:	f000 8124 	beq.w	801a454 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a20c:	e1cf      	b.n	801a5ae <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a20e:	2001      	movs	r0, #1
 801a210:	f002 f8bc 	bl	801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a214:	4ba5      	ldr	r3, [pc, #660]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a216:	2200      	movs	r2, #0
 801a218:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a21c:	4aa3      	ldr	r2, [pc, #652]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a222:	4ba2      	ldr	r3, [pc, #648]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a224:	2209      	movs	r2, #9
 801a226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a22a:	4ba0      	ldr	r3, [pc, #640]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a22c:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a230:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a232:	68b8      	ldr	r0, [r7, #8]
 801a234:	f002 ff7c 	bl	801d130 <SUBGRF_GetFskBandwidthRegValue>
 801a238:	4603      	mov	r3, r0
 801a23a:	461a      	mov	r2, r3
 801a23c:	4b9b      	ldr	r3, [pc, #620]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a23e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a242:	4b9a      	ldr	r3, [pc, #616]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a244:	2200      	movs	r2, #0
 801a246:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a248:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a24a:	00db      	lsls	r3, r3, #3
 801a24c:	b29a      	uxth	r2, r3
 801a24e:	4b97      	ldr	r3, [pc, #604]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a250:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a252:	4b96      	ldr	r3, [pc, #600]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a254:	2200      	movs	r2, #0
 801a256:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a258:	4b94      	ldr	r3, [pc, #592]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a25a:	2210      	movs	r2, #16
 801a25c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a25e:	4b93      	ldr	r3, [pc, #588]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a260:	2200      	movs	r2, #0
 801a262:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a264:	4b91      	ldr	r3, [pc, #580]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a266:	2200      	movs	r2, #0
 801a268:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a26a:	4b91      	ldr	r3, [pc, #580]	; (801a4b0 <RadioSetRxConfig+0x300>)
 801a26c:	781a      	ldrb	r2, [r3, #0]
 801a26e:	4b8f      	ldr	r3, [pc, #572]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a270:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a272:	4b8e      	ldr	r3, [pc, #568]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a274:	2201      	movs	r2, #1
 801a276:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a278:	4b8c      	ldr	r3, [pc, #560]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a27a:	2200      	movs	r2, #0
 801a27c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a27e:	2005      	movs	r0, #5
 801a280:	f7ff fec2 	bl	801a008 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a284:	488b      	ldr	r0, [pc, #556]	; (801a4b4 <RadioSetRxConfig+0x304>)
 801a286:	f002 fb1f 	bl	801c8c8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a28a:	488b      	ldr	r0, [pc, #556]	; (801a4b8 <RadioSetRxConfig+0x308>)
 801a28c:	f002 fbee 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a290:	4a8a      	ldr	r2, [pc, #552]	; (801a4bc <RadioSetRxConfig+0x30c>)
 801a292:	f107 031c 	add.w	r3, r7, #28
 801a296:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a29a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a29e:	f107 031c 	add.w	r3, r7, #28
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f001 feab 	bl	801bffe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a2a8:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a2ac:	f001 fef6 	bl	801c09c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a2b0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2b4:	f000 fe25 	bl	801af02 <RadioRead>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a2be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2c2:	f023 0310 	bic.w	r3, r3, #16
 801a2c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a2ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2ce:	4619      	mov	r1, r3
 801a2d0:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2d4:	f000 fe03 	bl	801aede <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a2d8:	2104      	movs	r1, #4
 801a2da:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a2de:	f000 fdfe 	bl	801aede <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a2e2:	f640 009b 	movw	r0, #2203	; 0x89b
 801a2e6:	f000 fe0c 	bl	801af02 <RadioRead>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2f4:	f023 031c 	bic.w	r3, r3, #28
 801a2f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a300:	f043 0308 	orr.w	r3, r3, #8
 801a304:	b2db      	uxtb	r3, r3
 801a306:	4619      	mov	r1, r3
 801a308:	f640 009b 	movw	r0, #2203	; 0x89b
 801a30c:	f000 fde7 	bl	801aede <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a310:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a314:	f000 fdf5 	bl	801af02 <RadioRead>
 801a318:	4603      	mov	r3, r0
 801a31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a31e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a322:	f023 0318 	bic.w	r3, r3, #24
 801a326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a32a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a32e:	f043 0318 	orr.w	r3, r3, #24
 801a332:	b2db      	uxtb	r3, r3
 801a334:	4619      	mov	r1, r3
 801a336:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a33a:	f000 fdd0 	bl	801aede <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a33e:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a342:	f000 fdde 	bl	801af02 <RadioRead>
 801a346:	4603      	mov	r3, r0
 801a348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a35c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a360:	b2db      	uxtb	r3, r3
 801a362:	4619      	mov	r1, r3
 801a364:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a368:	f000 fdb9 	bl	801aede <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a36c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a36e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a372:	fb02 f303 	mul.w	r3, r2, r3
 801a376:	461a      	mov	r2, r3
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a37e:	4a4b      	ldr	r2, [pc, #300]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a380:	6093      	str	r3, [r2, #8]
            break;
 801a382:	e115      	b.n	801a5b0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a384:	2000      	movs	r0, #0
 801a386:	f002 f801 	bl	801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a38a:	4b48      	ldr	r3, [pc, #288]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a38c:	2200      	movs	r2, #0
 801a38e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a392:	4a46      	ldr	r2, [pc, #280]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a398:	4b44      	ldr	r3, [pc, #272]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a39a:	220b      	movs	r2, #11
 801a39c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a3a0:	68b8      	ldr	r0, [r7, #8]
 801a3a2:	f002 fec5 	bl	801d130 <SUBGRF_GetFskBandwidthRegValue>
 801a3a6:	4603      	mov	r3, r0
 801a3a8:	461a      	mov	r2, r3
 801a3aa:	4b40      	ldr	r3, [pc, #256]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3b0:	4b3e      	ldr	r3, [pc, #248]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a3b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a3b8:	00db      	lsls	r3, r3, #3
 801a3ba:	b29a      	uxth	r2, r3
 801a3bc:	4b3b      	ldr	r3, [pc, #236]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3be:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a3c0:	4b3a      	ldr	r3, [pc, #232]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3c2:	2204      	movs	r2, #4
 801a3c4:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a3c6:	4b39      	ldr	r3, [pc, #228]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3c8:	2218      	movs	r2, #24
 801a3ca:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a3cc:	4b37      	ldr	r3, [pc, #220]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3ce:	2200      	movs	r2, #0
 801a3d0:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a3d2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a3d6:	f083 0301 	eor.w	r3, r3, #1
 801a3da:	b2db      	uxtb	r3, r3
 801a3dc:	461a      	mov	r2, r3
 801a3de:	4b33      	ldr	r3, [pc, #204]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3e0:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a3e2:	4b33      	ldr	r3, [pc, #204]	; (801a4b0 <RadioSetRxConfig+0x300>)
 801a3e4:	781a      	ldrb	r2, [r3, #0]
 801a3e6:	4b31      	ldr	r3, [pc, #196]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3e8:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a3ea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d003      	beq.n	801a3fa <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a3f2:	4b2e      	ldr	r3, [pc, #184]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3f4:	22f2      	movs	r2, #242	; 0xf2
 801a3f6:	75da      	strb	r2, [r3, #23]
 801a3f8:	e002      	b.n	801a400 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a3fa:	4b2c      	ldr	r3, [pc, #176]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a3fc:	2201      	movs	r2, #1
 801a3fe:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a400:	4b2a      	ldr	r3, [pc, #168]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a402:	2201      	movs	r2, #1
 801a404:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a406:	f000 fc68 	bl	801acda <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a40a:	2000      	movs	r0, #0
 801a40c:	f7ff fdfc 	bl	801a008 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a410:	4828      	ldr	r0, [pc, #160]	; (801a4b4 <RadioSetRxConfig+0x304>)
 801a412:	f002 fa59 	bl	801c8c8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a416:	4828      	ldr	r0, [pc, #160]	; (801a4b8 <RadioSetRxConfig+0x308>)
 801a418:	f002 fb28 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a41c:	4a28      	ldr	r2, [pc, #160]	; (801a4c0 <RadioSetRxConfig+0x310>)
 801a41e:	f107 0314 	add.w	r3, r7, #20
 801a422:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a426:	e883 0003 	stmia.w	r3, {r0, r1}
 801a42a:	f107 0314 	add.w	r3, r7, #20
 801a42e:	4618      	mov	r0, r3
 801a430:	f001 fde5 	bl	801bffe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a434:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a438:	f001 fe30 	bl	801c09c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a43c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a43e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a442:	fb02 f303 	mul.w	r3, r2, r3
 801a446:	461a      	mov	r2, r3
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a44e:	4a17      	ldr	r2, [pc, #92]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a450:	6093      	str	r3, [r2, #8]
            break;
 801a452:	e0ad      	b.n	801a5b0 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a454:	2000      	movs	r0, #0
 801a456:	f001 ff99 	bl	801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a45a:	4b14      	ldr	r3, [pc, #80]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a45c:	2201      	movs	r2, #1
 801a45e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	b2da      	uxtb	r2, r3
 801a466:	4b11      	ldr	r3, [pc, #68]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a46c:	4a15      	ldr	r2, [pc, #84]	; (801a4c4 <RadioSetRxConfig+0x314>)
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	4413      	add	r3, r2
 801a472:	781a      	ldrb	r2, [r3, #0]
 801a474:	4b0d      	ldr	r3, [pc, #52]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a47a:	4a0c      	ldr	r2, [pc, #48]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a47c:	7bbb      	ldrb	r3, [r7, #14]
 801a47e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a482:	68bb      	ldr	r3, [r7, #8]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d105      	bne.n	801a494 <RadioSetRxConfig+0x2e4>
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	2b0b      	cmp	r3, #11
 801a48c:	d008      	beq.n	801a4a0 <RadioSetRxConfig+0x2f0>
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	2b0c      	cmp	r3, #12
 801a492:	d005      	beq.n	801a4a0 <RadioSetRxConfig+0x2f0>
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	2b01      	cmp	r3, #1
 801a498:	d116      	bne.n	801a4c8 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a49a:	687b      	ldr	r3, [r7, #4]
 801a49c:	2b0c      	cmp	r3, #12
 801a49e:	d113      	bne.n	801a4c8 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a4a0:	4b02      	ldr	r3, [pc, #8]	; (801a4ac <RadioSetRxConfig+0x2fc>)
 801a4a2:	2201      	movs	r2, #1
 801a4a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a4a8:	e012      	b.n	801a4d0 <RadioSetRxConfig+0x320>
 801a4aa:	bf00      	nop
 801a4ac:	200017a4 	.word	0x200017a4
 801a4b0:	2000014c 	.word	0x2000014c
 801a4b4:	200017dc 	.word	0x200017dc
 801a4b8:	200017b2 	.word	0x200017b2
 801a4bc:	0801f3f4 	.word	0x0801f3f4
 801a4c0:	0801f3fc 	.word	0x0801f3fc
 801a4c4:	0801fa64 	.word	0x0801fa64
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a4c8:	4b3b      	ldr	r3, [pc, #236]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4d0:	4b39      	ldr	r3, [pc, #228]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4d2:	2201      	movs	r2, #1
 801a4d4:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4d6:	4b38      	ldr	r3, [pc, #224]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a4dc:	2b05      	cmp	r3, #5
 801a4de:	d004      	beq.n	801a4ea <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a4e0:	4b35      	ldr	r3, [pc, #212]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4e6:	2b06      	cmp	r3, #6
 801a4e8:	d10a      	bne.n	801a500 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a4ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a4ec:	2b0b      	cmp	r3, #11
 801a4ee:	d803      	bhi.n	801a4f8 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a4f0:	4b31      	ldr	r3, [pc, #196]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4f2:	220c      	movs	r2, #12
 801a4f4:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a4f6:	e006      	b.n	801a506 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a4f8:	4a2f      	ldr	r2, [pc, #188]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a4fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a4fc:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a4fe:	e002      	b.n	801a506 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a500:	4a2d      	ldr	r2, [pc, #180]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a502:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a504:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a506:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a50a:	4b2b      	ldr	r3, [pc, #172]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a50c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a50e:	4b2b      	ldr	r3, [pc, #172]	; (801a5bc <RadioSetRxConfig+0x40c>)
 801a510:	781a      	ldrb	r2, [r3, #0]
 801a512:	4b29      	ldr	r3, [pc, #164]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a514:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a516:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a51a:	4b27      	ldr	r3, [pc, #156]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a51c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a520:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a524:	4b24      	ldr	r3, [pc, #144]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a526:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a52a:	f000 fbd6 	bl	801acda <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a52e:	2001      	movs	r0, #1
 801a530:	f7ff fd6a 	bl	801a008 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a534:	4822      	ldr	r0, [pc, #136]	; (801a5c0 <RadioSetRxConfig+0x410>)
 801a536:	f002 f9c7 	bl	801c8c8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a53a:	4822      	ldr	r0, [pc, #136]	; (801a5c4 <RadioSetRxConfig+0x414>)
 801a53c:	f002 fa96 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a540:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a542:	b2db      	uxtb	r3, r3
 801a544:	4618      	mov	r0, r3
 801a546:	f001 ff30 	bl	801c3aa <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a54a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a54e:	f002 fbe9 	bl	801cd24 <SUBGRF_ReadRegister>
 801a552:	4603      	mov	r3, r0
 801a554:	f003 0301 	and.w	r3, r3, #1
 801a558:	b2db      	uxtb	r3, r3
 801a55a:	4619      	mov	r1, r3
 801a55c:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a560:	f002 fbcc 	bl	801ccfc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a564:	4b14      	ldr	r3, [pc, #80]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a566:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a56a:	2b01      	cmp	r3, #1
 801a56c:	d10d      	bne.n	801a58a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a56e:	f240 7036 	movw	r0, #1846	; 0x736
 801a572:	f002 fbd7 	bl	801cd24 <SUBGRF_ReadRegister>
 801a576:	4603      	mov	r3, r0
 801a578:	f023 0304 	bic.w	r3, r3, #4
 801a57c:	b2db      	uxtb	r3, r3
 801a57e:	4619      	mov	r1, r3
 801a580:	f240 7036 	movw	r0, #1846	; 0x736
 801a584:	f002 fbba 	bl	801ccfc <SUBGRF_WriteRegister>
 801a588:	e00c      	b.n	801a5a4 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a58a:	f240 7036 	movw	r0, #1846	; 0x736
 801a58e:	f002 fbc9 	bl	801cd24 <SUBGRF_ReadRegister>
 801a592:	4603      	mov	r3, r0
 801a594:	f043 0304 	orr.w	r3, r3, #4
 801a598:	b2db      	uxtb	r3, r3
 801a59a:	4619      	mov	r1, r3
 801a59c:	f240 7036 	movw	r0, #1846	; 0x736
 801a5a0:	f002 fbac 	bl	801ccfc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a5a4:	4b04      	ldr	r3, [pc, #16]	; (801a5b8 <RadioSetRxConfig+0x408>)
 801a5a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5aa:	609a      	str	r2, [r3, #8]
            break;
 801a5ac:	e000      	b.n	801a5b0 <RadioSetRxConfig+0x400>
            break;
 801a5ae:	bf00      	nop
    }
}
 801a5b0:	bf00      	nop
 801a5b2:	3728      	adds	r7, #40	; 0x28
 801a5b4:	46bd      	mov	sp, r7
 801a5b6:	bd80      	pop	{r7, pc}
 801a5b8:	200017a4 	.word	0x200017a4
 801a5bc:	2000014c 	.word	0x2000014c
 801a5c0:	200017dc 	.word	0x200017dc
 801a5c4:	200017b2 	.word	0x200017b2

0801a5c8 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a5c8:	b580      	push	{r7, lr}
 801a5ca:	b086      	sub	sp, #24
 801a5cc:	af00      	add	r7, sp, #0
 801a5ce:	60ba      	str	r2, [r7, #8]
 801a5d0:	607b      	str	r3, [r7, #4]
 801a5d2:	4603      	mov	r3, r0
 801a5d4:	73fb      	strb	r3, [r7, #15]
 801a5d6:	460b      	mov	r3, r1
 801a5d8:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a5da:	f002 fe76 	bl	801d2ca <RFW_DeInit>
    switch( modem )
 801a5de:	7bfb      	ldrb	r3, [r7, #15]
 801a5e0:	2b04      	cmp	r3, #4
 801a5e2:	f000 80c7 	beq.w	801a774 <RadioSetTxConfig+0x1ac>
 801a5e6:	2b04      	cmp	r3, #4
 801a5e8:	f300 80d6 	bgt.w	801a798 <RadioSetTxConfig+0x1d0>
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d002      	beq.n	801a5f6 <RadioSetTxConfig+0x2e>
 801a5f0:	2b01      	cmp	r3, #1
 801a5f2:	d059      	beq.n	801a6a8 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a5f4:	e0d0      	b.n	801a798 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a5f6:	4b77      	ldr	r3, [pc, #476]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a5f8:	2200      	movs	r2, #0
 801a5fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a5fe:	4a75      	ldr	r2, [pc, #468]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a600:	6a3b      	ldr	r3, [r7, #32]
 801a602:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a604:	4b73      	ldr	r3, [pc, #460]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a606:	220b      	movs	r2, #11
 801a608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a60c:	6878      	ldr	r0, [r7, #4]
 801a60e:	f002 fd8f 	bl	801d130 <SUBGRF_GetFskBandwidthRegValue>
 801a612:	4603      	mov	r3, r0
 801a614:	461a      	mov	r2, r3
 801a616:	4b6f      	ldr	r3, [pc, #444]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a61c:	4a6d      	ldr	r2, [pc, #436]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a61e:	68bb      	ldr	r3, [r7, #8]
 801a620:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a622:	4b6c      	ldr	r3, [pc, #432]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a624:	2200      	movs	r2, #0
 801a626:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a628:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a62a:	00db      	lsls	r3, r3, #3
 801a62c:	b29a      	uxth	r2, r3
 801a62e:	4b69      	ldr	r3, [pc, #420]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a630:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a632:	4b68      	ldr	r3, [pc, #416]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a634:	2204      	movs	r2, #4
 801a636:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a638:	4b66      	ldr	r3, [pc, #408]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a63a:	2218      	movs	r2, #24
 801a63c:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a63e:	4b65      	ldr	r3, [pc, #404]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a640:	2200      	movs	r2, #0
 801a642:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a644:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a648:	f083 0301 	eor.w	r3, r3, #1
 801a64c:	b2db      	uxtb	r3, r3
 801a64e:	461a      	mov	r2, r3
 801a650:	4b60      	ldr	r3, [pc, #384]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a652:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a654:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d003      	beq.n	801a664 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a65c:	4b5d      	ldr	r3, [pc, #372]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a65e:	22f2      	movs	r2, #242	; 0xf2
 801a660:	75da      	strb	r2, [r3, #23]
 801a662:	e002      	b.n	801a66a <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a664:	4b5b      	ldr	r3, [pc, #364]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a666:	2201      	movs	r2, #1
 801a668:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a66a:	4b5a      	ldr	r3, [pc, #360]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a66c:	2201      	movs	r2, #1
 801a66e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a670:	f000 fb33 	bl	801acda <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a674:	2000      	movs	r0, #0
 801a676:	f7ff fcc7 	bl	801a008 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a67a:	4857      	ldr	r0, [pc, #348]	; (801a7d8 <RadioSetTxConfig+0x210>)
 801a67c:	f002 f924 	bl	801c8c8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a680:	4856      	ldr	r0, [pc, #344]	; (801a7dc <RadioSetTxConfig+0x214>)
 801a682:	f002 f9f3 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a686:	4a56      	ldr	r2, [pc, #344]	; (801a7e0 <RadioSetTxConfig+0x218>)
 801a688:	f107 0310 	add.w	r3, r7, #16
 801a68c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a690:	e883 0003 	stmia.w	r3, {r0, r1}
 801a694:	f107 0310 	add.w	r3, r7, #16
 801a698:	4618      	mov	r0, r3
 801a69a:	f001 fcb0 	bl	801bffe <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a69e:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6a2:	f001 fcfb 	bl	801c09c <SUBGRF_SetWhiteningSeed>
            break;
 801a6a6:	e078      	b.n	801a79a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a6a8:	4b4a      	ldr	r3, [pc, #296]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6aa:	2201      	movs	r2, #1
 801a6ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a6b0:	6a3b      	ldr	r3, [r7, #32]
 801a6b2:	b2da      	uxtb	r2, r3
 801a6b4:	4b47      	ldr	r3, [pc, #284]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a6ba:	4a4a      	ldr	r2, [pc, #296]	; (801a7e4 <RadioSetTxConfig+0x21c>)
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	4413      	add	r3, r2
 801a6c0:	781a      	ldrb	r2, [r3, #0]
 801a6c2:	4b44      	ldr	r3, [pc, #272]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a6c8:	4a42      	ldr	r2, [pc, #264]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a6ce:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a6d2:	687b      	ldr	r3, [r7, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d105      	bne.n	801a6e4 <RadioSetTxConfig+0x11c>
 801a6d8:	6a3b      	ldr	r3, [r7, #32]
 801a6da:	2b0b      	cmp	r3, #11
 801a6dc:	d008      	beq.n	801a6f0 <RadioSetTxConfig+0x128>
 801a6de:	6a3b      	ldr	r3, [r7, #32]
 801a6e0:	2b0c      	cmp	r3, #12
 801a6e2:	d005      	beq.n	801a6f0 <RadioSetTxConfig+0x128>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	2b01      	cmp	r3, #1
 801a6e8:	d107      	bne.n	801a6fa <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a6ea:	6a3b      	ldr	r3, [r7, #32]
 801a6ec:	2b0c      	cmp	r3, #12
 801a6ee:	d104      	bne.n	801a6fa <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a6f0:	4b38      	ldr	r3, [pc, #224]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6f2:	2201      	movs	r2, #1
 801a6f4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a6f8:	e003      	b.n	801a702 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a6fa:	4b36      	ldr	r3, [pc, #216]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a702:	4b34      	ldr	r3, [pc, #208]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a704:	2201      	movs	r2, #1
 801a706:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a708:	4b32      	ldr	r3, [pc, #200]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a70a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a70e:	2b05      	cmp	r3, #5
 801a710:	d004      	beq.n	801a71c <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a712:	4b30      	ldr	r3, [pc, #192]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a714:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a718:	2b06      	cmp	r3, #6
 801a71a:	d10a      	bne.n	801a732 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a71c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a71e:	2b0b      	cmp	r3, #11
 801a720:	d803      	bhi.n	801a72a <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a722:	4b2c      	ldr	r3, [pc, #176]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a724:	220c      	movs	r2, #12
 801a726:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a728:	e006      	b.n	801a738 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a72a:	4a2a      	ldr	r2, [pc, #168]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a72c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a72e:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a730:	e002      	b.n	801a738 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a732:	4a28      	ldr	r2, [pc, #160]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a736:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a738:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a73c:	4b25      	ldr	r3, [pc, #148]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a73e:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a740:	4b29      	ldr	r3, [pc, #164]	; (801a7e8 <RadioSetTxConfig+0x220>)
 801a742:	781a      	ldrb	r2, [r3, #0]
 801a744:	4b23      	ldr	r3, [pc, #140]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a746:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a748:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a74c:	4b21      	ldr	r3, [pc, #132]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a74e:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a752:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a756:	4b1f      	ldr	r3, [pc, #124]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a75c:	f000 fabd 	bl	801acda <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a760:	2001      	movs	r0, #1
 801a762:	f7ff fc51 	bl	801a008 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a766:	481c      	ldr	r0, [pc, #112]	; (801a7d8 <RadioSetTxConfig+0x210>)
 801a768:	f002 f8ae 	bl	801c8c8 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a76c:	481b      	ldr	r0, [pc, #108]	; (801a7dc <RadioSetTxConfig+0x214>)
 801a76e:	f002 f97d 	bl	801ca6c <SUBGRF_SetPacketParams>
            break;
 801a772:	e012      	b.n	801a79a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a774:	2004      	movs	r0, #4
 801a776:	f7ff fc47 	bl	801a008 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a77a:	4b16      	ldr	r3, [pc, #88]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a77c:	2202      	movs	r2, #2
 801a77e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a782:	4a14      	ldr	r2, [pc, #80]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a784:	6a3b      	ldr	r3, [r7, #32]
 801a786:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a788:	4b12      	ldr	r3, [pc, #72]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a78a:	2216      	movs	r2, #22
 801a78c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a790:	4811      	ldr	r0, [pc, #68]	; (801a7d8 <RadioSetTxConfig+0x210>)
 801a792:	f002 f899 	bl	801c8c8 <SUBGRF_SetModulationParams>
            break;
 801a796:	e000      	b.n	801a79a <RadioSetTxConfig+0x1d2>
            break;
 801a798:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a79a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a79e:	4618      	mov	r0, r3
 801a7a0:	f002 fbc8 	bl	801cf34 <SUBGRF_SetRfTxPower>
 801a7a4:	4603      	mov	r3, r0
 801a7a6:	461a      	mov	r2, r3
 801a7a8:	4b0a      	ldr	r3, [pc, #40]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a7aa:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a7ae:	210e      	movs	r1, #14
 801a7b0:	f640 101f 	movw	r0, #2335	; 0x91f
 801a7b4:	f002 faa2 	bl	801ccfc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7b8:	4b06      	ldr	r3, [pc, #24]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a7ba:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f002 fd97 	bl	801d2f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a7c4:	4a03      	ldr	r2, [pc, #12]	; (801a7d4 <RadioSetTxConfig+0x20c>)
 801a7c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7c8:	6053      	str	r3, [r2, #4]
}
 801a7ca:	bf00      	nop
 801a7cc:	3718      	adds	r7, #24
 801a7ce:	46bd      	mov	sp, r7
 801a7d0:	bd80      	pop	{r7, pc}
 801a7d2:	bf00      	nop
 801a7d4:	200017a4 	.word	0x200017a4
 801a7d8:	200017dc 	.word	0x200017dc
 801a7dc:	200017b2 	.word	0x200017b2
 801a7e0:	0801f3fc 	.word	0x0801f3fc
 801a7e4:	0801fa64 	.word	0x0801fa64
 801a7e8:	2000014c 	.word	0x2000014c

0801a7ec <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a7ec:	b480      	push	{r7}
 801a7ee:	b083      	sub	sp, #12
 801a7f0:	af00      	add	r7, sp, #0
 801a7f2:	6078      	str	r0, [r7, #4]
    return true;
 801a7f4:	2301      	movs	r3, #1
}
 801a7f6:	4618      	mov	r0, r3
 801a7f8:	370c      	adds	r7, #12
 801a7fa:	46bd      	mov	sp, r7
 801a7fc:	bc80      	pop	{r7}
 801a7fe:	4770      	bx	lr

0801a800 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a800:	b480      	push	{r7}
 801a802:	b085      	sub	sp, #20
 801a804:	af00      	add	r7, sp, #0
 801a806:	4603      	mov	r3, r0
 801a808:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a80a:	2300      	movs	r3, #0
 801a80c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a80e:	79fb      	ldrb	r3, [r7, #7]
 801a810:	2b0a      	cmp	r3, #10
 801a812:	d83e      	bhi.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
 801a814:	a201      	add	r2, pc, #4	; (adr r2, 801a81c <RadioGetLoRaBandwidthInHz+0x1c>)
 801a816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a81a:	bf00      	nop
 801a81c:	0801a849 	.word	0x0801a849
 801a820:	0801a859 	.word	0x0801a859
 801a824:	0801a869 	.word	0x0801a869
 801a828:	0801a879 	.word	0x0801a879
 801a82c:	0801a881 	.word	0x0801a881
 801a830:	0801a887 	.word	0x0801a887
 801a834:	0801a88d 	.word	0x0801a88d
 801a838:	0801a893 	.word	0x0801a893
 801a83c:	0801a851 	.word	0x0801a851
 801a840:	0801a861 	.word	0x0801a861
 801a844:	0801a871 	.word	0x0801a871
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a848:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a84c:	60fb      	str	r3, [r7, #12]
        break;
 801a84e:	e020      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a850:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a854:	60fb      	str	r3, [r7, #12]
        break;
 801a856:	e01c      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a858:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a85c:	60fb      	str	r3, [r7, #12]
        break;
 801a85e:	e018      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a860:	f245 1361 	movw	r3, #20833	; 0x5161
 801a864:	60fb      	str	r3, [r7, #12]
        break;
 801a866:	e014      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a868:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a86c:	60fb      	str	r3, [r7, #12]
        break;
 801a86e:	e010      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a870:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a874:	60fb      	str	r3, [r7, #12]
        break;
 801a876:	e00c      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a878:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a87c:	60fb      	str	r3, [r7, #12]
        break;
 801a87e:	e008      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a880:	4b07      	ldr	r3, [pc, #28]	; (801a8a0 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a882:	60fb      	str	r3, [r7, #12]
        break;
 801a884:	e005      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a886:	4b07      	ldr	r3, [pc, #28]	; (801a8a4 <RadioGetLoRaBandwidthInHz+0xa4>)
 801a888:	60fb      	str	r3, [r7, #12]
        break;
 801a88a:	e002      	b.n	801a892 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a88c:	4b06      	ldr	r3, [pc, #24]	; (801a8a8 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a88e:	60fb      	str	r3, [r7, #12]
        break;
 801a890:	bf00      	nop
    }

    return bandwidthInHz;
 801a892:	68fb      	ldr	r3, [r7, #12]
}
 801a894:	4618      	mov	r0, r3
 801a896:	3714      	adds	r7, #20
 801a898:	46bd      	mov	sp, r7
 801a89a:	bc80      	pop	{r7}
 801a89c:	4770      	bx	lr
 801a89e:	bf00      	nop
 801a8a0:	0001e848 	.word	0x0001e848
 801a8a4:	0003d090 	.word	0x0003d090
 801a8a8:	0007a120 	.word	0x0007a120

0801a8ac <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a8ac:	b480      	push	{r7}
 801a8ae:	b083      	sub	sp, #12
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
 801a8b4:	4608      	mov	r0, r1
 801a8b6:	4611      	mov	r1, r2
 801a8b8:	461a      	mov	r2, r3
 801a8ba:	4603      	mov	r3, r0
 801a8bc:	70fb      	strb	r3, [r7, #3]
 801a8be:	460b      	mov	r3, r1
 801a8c0:	803b      	strh	r3, [r7, #0]
 801a8c2:	4613      	mov	r3, r2
 801a8c4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a8c6:	883b      	ldrh	r3, [r7, #0]
 801a8c8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8ca:	78ba      	ldrb	r2, [r7, #2]
 801a8cc:	f082 0201 	eor.w	r2, r2, #1
 801a8d0:	b2d2      	uxtb	r2, r2
 801a8d2:	2a00      	cmp	r2, #0
 801a8d4:	d001      	beq.n	801a8da <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a8d6:	2208      	movs	r2, #8
 801a8d8:	e000      	b.n	801a8dc <RadioGetGfskTimeOnAirNumerator+0x30>
 801a8da:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a8dc:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8de:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a8e2:	7c3b      	ldrb	r3, [r7, #16]
 801a8e4:	7d39      	ldrb	r1, [r7, #20]
 801a8e6:	2900      	cmp	r1, #0
 801a8e8:	d001      	beq.n	801a8ee <RadioGetGfskTimeOnAirNumerator+0x42>
 801a8ea:	2102      	movs	r1, #2
 801a8ec:	e000      	b.n	801a8f0 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a8ee:	2100      	movs	r1, #0
 801a8f0:	440b      	add	r3, r1
 801a8f2:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8f4:	4413      	add	r3, r2
}
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	370c      	adds	r7, #12
 801a8fa:	46bd      	mov	sp, r7
 801a8fc:	bc80      	pop	{r7}
 801a8fe:	4770      	bx	lr

0801a900 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a900:	b480      	push	{r7}
 801a902:	b08b      	sub	sp, #44	; 0x2c
 801a904:	af00      	add	r7, sp, #0
 801a906:	60f8      	str	r0, [r7, #12]
 801a908:	60b9      	str	r1, [r7, #8]
 801a90a:	4611      	mov	r1, r2
 801a90c:	461a      	mov	r2, r3
 801a90e:	460b      	mov	r3, r1
 801a910:	71fb      	strb	r3, [r7, #7]
 801a912:	4613      	mov	r3, r2
 801a914:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a916:	79fb      	ldrb	r3, [r7, #7]
 801a918:	3304      	adds	r3, #4
 801a91a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a91c:	2300      	movs	r3, #0
 801a91e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a922:	68bb      	ldr	r3, [r7, #8]
 801a924:	2b05      	cmp	r3, #5
 801a926:	d002      	beq.n	801a92e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a928:	68bb      	ldr	r3, [r7, #8]
 801a92a:	2b06      	cmp	r3, #6
 801a92c:	d104      	bne.n	801a938 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a92e:	88bb      	ldrh	r3, [r7, #4]
 801a930:	2b0b      	cmp	r3, #11
 801a932:	d801      	bhi.n	801a938 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a934:	230c      	movs	r3, #12
 801a936:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a938:	68fb      	ldr	r3, [r7, #12]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d105      	bne.n	801a94a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a93e:	68bb      	ldr	r3, [r7, #8]
 801a940:	2b0b      	cmp	r3, #11
 801a942:	d008      	beq.n	801a956 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a944:	68bb      	ldr	r3, [r7, #8]
 801a946:	2b0c      	cmp	r3, #12
 801a948:	d005      	beq.n	801a956 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a94a:	68fb      	ldr	r3, [r7, #12]
 801a94c:	2b01      	cmp	r3, #1
 801a94e:	d105      	bne.n	801a95c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a950:	68bb      	ldr	r3, [r7, #8]
 801a952:	2b0c      	cmp	r3, #12
 801a954:	d102      	bne.n	801a95c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a956:	2301      	movs	r3, #1
 801a958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a95c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a960:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a962:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a966:	2a00      	cmp	r2, #0
 801a968:	d001      	beq.n	801a96e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a96a:	2210      	movs	r2, #16
 801a96c:	e000      	b.n	801a970 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a96e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a970:	4413      	add	r3, r2
 801a972:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a974:	68bb      	ldr	r3, [r7, #8]
 801a976:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a978:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a97a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a97e:	2a00      	cmp	r2, #0
 801a980:	d001      	beq.n	801a986 <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a982:	2200      	movs	r2, #0
 801a984:	e000      	b.n	801a988 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a986:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a988:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a98a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	2b06      	cmp	r3, #6
 801a990:	d803      	bhi.n	801a99a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	009b      	lsls	r3, r3, #2
 801a996:	623b      	str	r3, [r7, #32]
 801a998:	e00e      	b.n	801a9b8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a99a:	69fb      	ldr	r3, [r7, #28]
 801a99c:	3308      	adds	r3, #8
 801a99e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a9a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9a4:	2b00      	cmp	r3, #0
 801a9a6:	d004      	beq.n	801a9b2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a9a8:	68bb      	ldr	r3, [r7, #8]
 801a9aa:	3b02      	subs	r3, #2
 801a9ac:	009b      	lsls	r3, r3, #2
 801a9ae:	623b      	str	r3, [r7, #32]
 801a9b0:	e002      	b.n	801a9b8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a9b2:	68bb      	ldr	r3, [r7, #8]
 801a9b4:	009b      	lsls	r3, r3, #2
 801a9b6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a9b8:	69fb      	ldr	r3, [r7, #28]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	da01      	bge.n	801a9c2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a9be:	2300      	movs	r3, #0
 801a9c0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a9c2:	69fa      	ldr	r2, [r7, #28]
 801a9c4:	6a3b      	ldr	r3, [r7, #32]
 801a9c6:	4413      	add	r3, r2
 801a9c8:	1e5a      	subs	r2, r3, #1
 801a9ca:	6a3b      	ldr	r3, [r7, #32]
 801a9cc:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9d0:	697a      	ldr	r2, [r7, #20]
 801a9d2:	fb03 f202 	mul.w	r2, r3, r2
 801a9d6:	88bb      	ldrh	r3, [r7, #4]
 801a9d8:	4413      	add	r3, r2
    int32_t intermediate =
 801a9da:	330c      	adds	r3, #12
 801a9dc:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	2b06      	cmp	r3, #6
 801a9e2:	d802      	bhi.n	801a9ea <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a9e4:	69bb      	ldr	r3, [r7, #24]
 801a9e6:	3302      	adds	r3, #2
 801a9e8:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801a9ea:	69bb      	ldr	r3, [r7, #24]
 801a9ec:	009b      	lsls	r3, r3, #2
 801a9ee:	1c5a      	adds	r2, r3, #1
 801a9f0:	68bb      	ldr	r3, [r7, #8]
 801a9f2:	3b02      	subs	r3, #2
 801a9f4:	fa02 f303 	lsl.w	r3, r2, r3
}
 801a9f8:	4618      	mov	r0, r3
 801a9fa:	372c      	adds	r7, #44	; 0x2c
 801a9fc:	46bd      	mov	sp, r7
 801a9fe:	bc80      	pop	{r7}
 801aa00:	4770      	bx	lr
	...

0801aa04 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b08a      	sub	sp, #40	; 0x28
 801aa08:	af04      	add	r7, sp, #16
 801aa0a:	60b9      	str	r1, [r7, #8]
 801aa0c:	607a      	str	r2, [r7, #4]
 801aa0e:	461a      	mov	r2, r3
 801aa10:	4603      	mov	r3, r0
 801aa12:	73fb      	strb	r3, [r7, #15]
 801aa14:	4613      	mov	r3, r2
 801aa16:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aa18:	2300      	movs	r3, #0
 801aa1a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aa1c:	2301      	movs	r3, #1
 801aa1e:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aa20:	7bfb      	ldrb	r3, [r7, #15]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d002      	beq.n	801aa2c <RadioTimeOnAir+0x28>
 801aa26:	2b01      	cmp	r3, #1
 801aa28:	d017      	beq.n	801aa5a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aa2a:	e035      	b.n	801aa98 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aa2c:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aa30:	8c3a      	ldrh	r2, [r7, #32]
 801aa32:	7bb9      	ldrb	r1, [r7, #14]
 801aa34:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa38:	9301      	str	r3, [sp, #4]
 801aa3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa3e:	9300      	str	r3, [sp, #0]
 801aa40:	4603      	mov	r3, r0
 801aa42:	6878      	ldr	r0, [r7, #4]
 801aa44:	f7ff ff32 	bl	801a8ac <RadioGetGfskTimeOnAirNumerator>
 801aa48:	4603      	mov	r3, r0
 801aa4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa4e:	fb02 f303 	mul.w	r3, r2, r3
 801aa52:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	613b      	str	r3, [r7, #16]
        break;
 801aa58:	e01e      	b.n	801aa98 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801aa5a:	8c39      	ldrh	r1, [r7, #32]
 801aa5c:	7bba      	ldrb	r2, [r7, #14]
 801aa5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa62:	9302      	str	r3, [sp, #8]
 801aa64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa68:	9301      	str	r3, [sp, #4]
 801aa6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa6e:	9300      	str	r3, [sp, #0]
 801aa70:	460b      	mov	r3, r1
 801aa72:	6879      	ldr	r1, [r7, #4]
 801aa74:	68b8      	ldr	r0, [r7, #8]
 801aa76:	f7ff ff43 	bl	801a900 <RadioGetLoRaTimeOnAirNumerator>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa80:	fb02 f303 	mul.w	r3, r2, r3
 801aa84:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aa86:	4a0a      	ldr	r2, [pc, #40]	; (801aab0 <RadioTimeOnAir+0xac>)
 801aa88:	68bb      	ldr	r3, [r7, #8]
 801aa8a:	4413      	add	r3, r2
 801aa8c:	781b      	ldrb	r3, [r3, #0]
 801aa8e:	4618      	mov	r0, r3
 801aa90:	f7ff feb6 	bl	801a800 <RadioGetLoRaBandwidthInHz>
 801aa94:	6138      	str	r0, [r7, #16]
        break;
 801aa96:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aa98:	697a      	ldr	r2, [r7, #20]
 801aa9a:	693b      	ldr	r3, [r7, #16]
 801aa9c:	4413      	add	r3, r2
 801aa9e:	1e5a      	subs	r2, r3, #1
 801aaa0:	693b      	ldr	r3, [r7, #16]
 801aaa2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	3718      	adds	r7, #24
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	bd80      	pop	{r7, pc}
 801aaae:	bf00      	nop
 801aab0:	0801fa64 	.word	0x0801fa64

0801aab4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aab4:	b580      	push	{r7, lr}
 801aab6:	b084      	sub	sp, #16
 801aab8:	af00      	add	r7, sp, #0
 801aaba:	6078      	str	r0, [r7, #4]
 801aabc:	460b      	mov	r3, r1
 801aabe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801aac0:	2300      	movs	r3, #0
 801aac2:	2200      	movs	r2, #0
 801aac4:	f240 2101 	movw	r1, #513	; 0x201
 801aac8:	f240 2001 	movw	r0, #513	; 0x201
 801aacc:	f001 fd66 	bl	801c59c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801aad0:	4b73      	ldr	r3, [pc, #460]	; (801aca0 <RadioSend+0x1ec>)
 801aad2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aad6:	2101      	movs	r1, #1
 801aad8:	4618      	mov	r0, r3
 801aada:	f002 fa03 	bl	801cee4 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801aade:	4b70      	ldr	r3, [pc, #448]	; (801aca0 <RadioSend+0x1ec>)
 801aae0:	781b      	ldrb	r3, [r3, #0]
 801aae2:	2b01      	cmp	r3, #1
 801aae4:	d112      	bne.n	801ab0c <RadioSend+0x58>
 801aae6:	4b6e      	ldr	r3, [pc, #440]	; (801aca0 <RadioSend+0x1ec>)
 801aae8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aaec:	2b06      	cmp	r3, #6
 801aaee:	d10d      	bne.n	801ab0c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801aaf0:	f640 0089 	movw	r0, #2185	; 0x889
 801aaf4:	f002 f916 	bl	801cd24 <SUBGRF_ReadRegister>
 801aaf8:	4603      	mov	r3, r0
 801aafa:	f023 0304 	bic.w	r3, r3, #4
 801aafe:	b2db      	uxtb	r3, r3
 801ab00:	4619      	mov	r1, r3
 801ab02:	f640 0089 	movw	r0, #2185	; 0x889
 801ab06:	f002 f8f9 	bl	801ccfc <SUBGRF_WriteRegister>
 801ab0a:	e00c      	b.n	801ab26 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab0c:	f640 0089 	movw	r0, #2185	; 0x889
 801ab10:	f002 f908 	bl	801cd24 <SUBGRF_ReadRegister>
 801ab14:	4603      	mov	r3, r0
 801ab16:	f043 0304 	orr.w	r3, r3, #4
 801ab1a:	b2db      	uxtb	r3, r3
 801ab1c:	4619      	mov	r1, r3
 801ab1e:	f640 0089 	movw	r0, #2185	; 0x889
 801ab22:	f002 f8eb 	bl	801ccfc <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801ab26:	4b5e      	ldr	r3, [pc, #376]	; (801aca0 <RadioSend+0x1ec>)
 801ab28:	781b      	ldrb	r3, [r3, #0]
 801ab2a:	2b04      	cmp	r3, #4
 801ab2c:	f200 80a8 	bhi.w	801ac80 <RadioSend+0x1cc>
 801ab30:	a201      	add	r2, pc, #4	; (adr r2, 801ab38 <RadioSend+0x84>)
 801ab32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab36:	bf00      	nop
 801ab38:	0801ab67 	.word	0x0801ab67
 801ab3c:	0801ab4d 	.word	0x0801ab4d
 801ab40:	0801ab67 	.word	0x0801ab67
 801ab44:	0801abc9 	.word	0x0801abc9
 801ab48:	0801abe9 	.word	0x0801abe9
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ab4c:	4a54      	ldr	r2, [pc, #336]	; (801aca0 <RadioSend+0x1ec>)
 801ab4e:	78fb      	ldrb	r3, [r7, #3]
 801ab50:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab52:	4854      	ldr	r0, [pc, #336]	; (801aca4 <RadioSend+0x1f0>)
 801ab54:	f001 ff8a 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab58:	78fb      	ldrb	r3, [r7, #3]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	4619      	mov	r1, r3
 801ab5e:	6878      	ldr	r0, [r7, #4]
 801ab60:	f001 fa3a 	bl	801bfd8 <SUBGRF_SendPayload>
            break;
 801ab64:	e08d      	b.n	801ac82 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ab66:	f002 fbb6 	bl	801d2d6 <RFW_Is_Init>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	2b01      	cmp	r3, #1
 801ab6e:	d11e      	bne.n	801abae <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ab70:	f107 020d 	add.w	r2, r7, #13
 801ab74:	78fb      	ldrb	r3, [r7, #3]
 801ab76:	4619      	mov	r1, r3
 801ab78:	6878      	ldr	r0, [r7, #4]
 801ab7a:	f002 fbc4 	bl	801d306 <RFW_TransmitInit>
 801ab7e:	4603      	mov	r3, r0
 801ab80:	2b00      	cmp	r3, #0
 801ab82:	d10c      	bne.n	801ab9e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ab84:	7b7a      	ldrb	r2, [r7, #13]
 801ab86:	4b46      	ldr	r3, [pc, #280]	; (801aca0 <RadioSend+0x1ec>)
 801ab88:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab8a:	4846      	ldr	r0, [pc, #280]	; (801aca4 <RadioSend+0x1f0>)
 801ab8c:	f001 ff6e 	bl	801ca6c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801ab90:	7b7b      	ldrb	r3, [r7, #13]
 801ab92:	2200      	movs	r2, #0
 801ab94:	4619      	mov	r1, r3
 801ab96:	6878      	ldr	r0, [r7, #4]
 801ab98:	f001 fa1e 	bl	801bfd8 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801ab9c:	e071      	b.n	801ac82 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801ab9e:	4b42      	ldr	r3, [pc, #264]	; (801aca8 <RadioSend+0x1f4>)
 801aba0:	2201      	movs	r2, #1
 801aba2:	2100      	movs	r1, #0
 801aba4:	2002      	movs	r0, #2
 801aba6:	f003 fccf 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801abaa:	2303      	movs	r3, #3
 801abac:	e073      	b.n	801ac96 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801abae:	4a3c      	ldr	r2, [pc, #240]	; (801aca0 <RadioSend+0x1ec>)
 801abb0:	78fb      	ldrb	r3, [r7, #3]
 801abb2:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abb4:	483b      	ldr	r0, [pc, #236]	; (801aca4 <RadioSend+0x1f0>)
 801abb6:	f001 ff59 	bl	801ca6c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801abba:	78fb      	ldrb	r3, [r7, #3]
 801abbc:	2200      	movs	r2, #0
 801abbe:	4619      	mov	r1, r3
 801abc0:	6878      	ldr	r0, [r7, #4]
 801abc2:	f001 fa09 	bl	801bfd8 <SUBGRF_SendPayload>
            break;
 801abc6:	e05c      	b.n	801ac82 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801abc8:	4b35      	ldr	r3, [pc, #212]	; (801aca0 <RadioSend+0x1ec>)
 801abca:	2202      	movs	r2, #2
 801abcc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801abce:	4a34      	ldr	r2, [pc, #208]	; (801aca0 <RadioSend+0x1ec>)
 801abd0:	78fb      	ldrb	r3, [r7, #3]
 801abd2:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abd4:	4833      	ldr	r0, [pc, #204]	; (801aca4 <RadioSend+0x1f0>)
 801abd6:	f001 ff49 	bl	801ca6c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801abda:	78fb      	ldrb	r3, [r7, #3]
 801abdc:	2200      	movs	r2, #0
 801abde:	4619      	mov	r1, r3
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	f001 f9f9 	bl	801bfd8 <SUBGRF_SendPayload>
            break;
 801abe6:	e04c      	b.n	801ac82 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801abe8:	78fb      	ldrb	r3, [r7, #3]
 801abea:	461a      	mov	r2, r3
 801abec:	6879      	ldr	r1, [r7, #4]
 801abee:	482f      	ldr	r0, [pc, #188]	; (801acac <RadioSend+0x1f8>)
 801abf0:	f000 fccc 	bl	801b58c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801abf4:	4b2a      	ldr	r3, [pc, #168]	; (801aca0 <RadioSend+0x1ec>)
 801abf6:	2202      	movs	r2, #2
 801abf8:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801abfa:	78fb      	ldrb	r3, [r7, #3]
 801abfc:	3301      	adds	r3, #1
 801abfe:	b2da      	uxtb	r2, r3
 801ac00:	4b27      	ldr	r3, [pc, #156]	; (801aca0 <RadioSend+0x1ec>)
 801ac02:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac04:	4827      	ldr	r0, [pc, #156]	; (801aca4 <RadioSend+0x1f0>)
 801ac06:	f001 ff31 	bl	801ca6c <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801ac0a:	2100      	movs	r1, #0
 801ac0c:	20f1      	movs	r0, #241	; 0xf1
 801ac0e:	f000 f966 	bl	801aede <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801ac12:	2100      	movs	r1, #0
 801ac14:	20f0      	movs	r0, #240	; 0xf0
 801ac16:	f000 f962 	bl	801aede <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801ac1a:	4b21      	ldr	r3, [pc, #132]	; (801aca0 <RadioSend+0x1ec>)
 801ac1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac1e:	2b64      	cmp	r3, #100	; 0x64
 801ac20:	d108      	bne.n	801ac34 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ac22:	2170      	movs	r1, #112	; 0x70
 801ac24:	20f3      	movs	r0, #243	; 0xf3
 801ac26:	f000 f95a 	bl	801aede <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ac2a:	211d      	movs	r1, #29
 801ac2c:	20f2      	movs	r0, #242	; 0xf2
 801ac2e:	f000 f956 	bl	801aede <RadioWrite>
 801ac32:	e007      	b.n	801ac44 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801ac34:	21e1      	movs	r1, #225	; 0xe1
 801ac36:	20f3      	movs	r0, #243	; 0xf3
 801ac38:	f000 f951 	bl	801aede <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801ac3c:	2104      	movs	r1, #4
 801ac3e:	20f2      	movs	r0, #242	; 0xf2
 801ac40:	f000 f94d 	bl	801aede <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ac44:	78fb      	ldrb	r3, [r7, #3]
 801ac46:	b29b      	uxth	r3, r3
 801ac48:	00db      	lsls	r3, r3, #3
 801ac4a:	b29b      	uxth	r3, r3
 801ac4c:	3302      	adds	r3, #2
 801ac4e:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ac50:	89fb      	ldrh	r3, [r7, #14]
 801ac52:	0a1b      	lsrs	r3, r3, #8
 801ac54:	b29b      	uxth	r3, r3
 801ac56:	b2db      	uxtb	r3, r3
 801ac58:	4619      	mov	r1, r3
 801ac5a:	20f4      	movs	r0, #244	; 0xf4
 801ac5c:	f000 f93f 	bl	801aede <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801ac60:	89fb      	ldrh	r3, [r7, #14]
 801ac62:	b2db      	uxtb	r3, r3
 801ac64:	4619      	mov	r1, r3
 801ac66:	20f5      	movs	r0, #245	; 0xf5
 801ac68:	f000 f939 	bl	801aede <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801ac6c:	78fb      	ldrb	r3, [r7, #3]
 801ac6e:	3301      	adds	r3, #1
 801ac70:	b2db      	uxtb	r3, r3
 801ac72:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ac76:	4619      	mov	r1, r3
 801ac78:	480c      	ldr	r0, [pc, #48]	; (801acac <RadioSend+0x1f8>)
 801ac7a:	f001 f9ad 	bl	801bfd8 <SUBGRF_SendPayload>
            break;
 801ac7e:	e000      	b.n	801ac82 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ac80:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801ac82:	4b07      	ldr	r3, [pc, #28]	; (801aca0 <RadioSend+0x1ec>)
 801ac84:	685b      	ldr	r3, [r3, #4]
 801ac86:	4619      	mov	r1, r3
 801ac88:	4809      	ldr	r0, [pc, #36]	; (801acb0 <RadioSend+0x1fc>)
 801ac8a:	f003 fac3 	bl	801e214 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801ac8e:	4808      	ldr	r0, [pc, #32]	; (801acb0 <RadioSend+0x1fc>)
 801ac90:	f003 f9e2 	bl	801e058 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801ac94:	2300      	movs	r3, #0
}
 801ac96:	4618      	mov	r0, r3
 801ac98:	3710      	adds	r7, #16
 801ac9a:	46bd      	mov	sp, r7
 801ac9c:	bd80      	pop	{r7, pc}
 801ac9e:	bf00      	nop
 801aca0:	200017a4 	.word	0x200017a4
 801aca4:	200017b2 	.word	0x200017b2
 801aca8:	0801f404 	.word	0x0801f404
 801acac:	200016a0 	.word	0x200016a0
 801acb0:	20001800 	.word	0x20001800

0801acb4 <RadioSleep>:

static void RadioSleep( void )
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b082      	sub	sp, #8
 801acb8:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801acba:	2300      	movs	r3, #0
 801acbc:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801acbe:	793b      	ldrb	r3, [r7, #4]
 801acc0:	f043 0304 	orr.w	r3, r3, #4
 801acc4:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801acc6:	7938      	ldrb	r0, [r7, #4]
 801acc8:	f001 fa62 	bl	801c190 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801accc:	2002      	movs	r0, #2
 801acce:	f7e7 fee7 	bl	8002aa0 <HAL_Delay>
}
 801acd2:	bf00      	nop
 801acd4:	3708      	adds	r7, #8
 801acd6:	46bd      	mov	sp, r7
 801acd8:	bd80      	pop	{r7, pc}

0801acda <RadioStandby>:

static void RadioStandby( void )
{
 801acda:	b580      	push	{r7, lr}
 801acdc:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801acde:	2000      	movs	r0, #0
 801ace0:	f001 fa88 	bl	801c1f4 <SUBGRF_SetStandby>
}
 801ace4:	bf00      	nop
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b082      	sub	sp, #8
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801acf0:	f002 faf1 	bl	801d2d6 <RFW_Is_Init>
 801acf4:	4603      	mov	r3, r0
 801acf6:	2b01      	cmp	r3, #1
 801acf8:	d102      	bne.n	801ad00 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801acfa:	f002 fb14 	bl	801d326 <RFW_ReceiveInit>
 801acfe:	e007      	b.n	801ad10 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad00:	2300      	movs	r3, #0
 801ad02:	2200      	movs	r2, #0
 801ad04:	f240 2162 	movw	r1, #610	; 0x262
 801ad08:	f240 2062 	movw	r0, #610	; 0x262
 801ad0c:	f001 fc46 	bl	801c59c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d006      	beq.n	801ad24 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad16:	6879      	ldr	r1, [r7, #4]
 801ad18:	4811      	ldr	r0, [pc, #68]	; (801ad60 <RadioRx+0x78>)
 801ad1a:	f003 fa7b 	bl	801e214 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad1e:	4810      	ldr	r0, [pc, #64]	; (801ad60 <RadioRx+0x78>)
 801ad20:	f003 f99a 	bl	801e058 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad24:	4b0f      	ldr	r3, [pc, #60]	; (801ad64 <RadioRx+0x7c>)
 801ad26:	2200      	movs	r2, #0
 801ad28:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad2a:	4b0e      	ldr	r3, [pc, #56]	; (801ad64 <RadioRx+0x7c>)
 801ad2c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad30:	2100      	movs	r1, #0
 801ad32:	4618      	mov	r0, r3
 801ad34:	f002 f8d6 	bl	801cee4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad38:	4b0a      	ldr	r3, [pc, #40]	; (801ad64 <RadioRx+0x7c>)
 801ad3a:	785b      	ldrb	r3, [r3, #1]
 801ad3c:	2b00      	cmp	r3, #0
 801ad3e:	d004      	beq.n	801ad4a <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad40:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad44:	f001 fa92 	bl	801c26c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ad48:	e005      	b.n	801ad56 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ad4a:	4b06      	ldr	r3, [pc, #24]	; (801ad64 <RadioRx+0x7c>)
 801ad4c:	689b      	ldr	r3, [r3, #8]
 801ad4e:	019b      	lsls	r3, r3, #6
 801ad50:	4618      	mov	r0, r3
 801ad52:	f001 fa8b 	bl	801c26c <SUBGRF_SetRx>
}
 801ad56:	bf00      	nop
 801ad58:	3708      	adds	r7, #8
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	bd80      	pop	{r7, pc}
 801ad5e:	bf00      	nop
 801ad60:	20001818 	.word	0x20001818
 801ad64:	200017a4 	.word	0x200017a4

0801ad68 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b082      	sub	sp, #8
 801ad6c:	af00      	add	r7, sp, #0
 801ad6e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801ad70:	f002 fab1 	bl	801d2d6 <RFW_Is_Init>
 801ad74:	4603      	mov	r3, r0
 801ad76:	2b01      	cmp	r3, #1
 801ad78:	d102      	bne.n	801ad80 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ad7a:	f002 fad4 	bl	801d326 <RFW_ReceiveInit>
 801ad7e:	e007      	b.n	801ad90 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad80:	2300      	movs	r3, #0
 801ad82:	2200      	movs	r2, #0
 801ad84:	f240 2162 	movw	r1, #610	; 0x262
 801ad88:	f240 2062 	movw	r0, #610	; 0x262
 801ad8c:	f001 fc06 	bl	801c59c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	2b00      	cmp	r3, #0
 801ad94:	d006      	beq.n	801ada4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad96:	6879      	ldr	r1, [r7, #4]
 801ad98:	4811      	ldr	r0, [pc, #68]	; (801ade0 <RadioRxBoosted+0x78>)
 801ad9a:	f003 fa3b 	bl	801e214 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad9e:	4810      	ldr	r0, [pc, #64]	; (801ade0 <RadioRxBoosted+0x78>)
 801ada0:	f003 f95a 	bl	801e058 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ada4:	4b0f      	ldr	r3, [pc, #60]	; (801ade4 <RadioRxBoosted+0x7c>)
 801ada6:	2200      	movs	r2, #0
 801ada8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adaa:	4b0e      	ldr	r3, [pc, #56]	; (801ade4 <RadioRxBoosted+0x7c>)
 801adac:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801adb0:	2100      	movs	r1, #0
 801adb2:	4618      	mov	r0, r3
 801adb4:	f002 f896 	bl	801cee4 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801adb8:	4b0a      	ldr	r3, [pc, #40]	; (801ade4 <RadioRxBoosted+0x7c>)
 801adba:	785b      	ldrb	r3, [r3, #1]
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d004      	beq.n	801adca <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801adc0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801adc4:	f001 fa72 	bl	801c2ac <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801adc8:	e005      	b.n	801add6 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801adca:	4b06      	ldr	r3, [pc, #24]	; (801ade4 <RadioRxBoosted+0x7c>)
 801adcc:	689b      	ldr	r3, [r3, #8]
 801adce:	019b      	lsls	r3, r3, #6
 801add0:	4618      	mov	r0, r3
 801add2:	f001 fa6b 	bl	801c2ac <SUBGRF_SetRxBoosted>
}
 801add6:	bf00      	nop
 801add8:	3708      	adds	r7, #8
 801adda:	46bd      	mov	sp, r7
 801addc:	bd80      	pop	{r7, pc}
 801adde:	bf00      	nop
 801ade0:	20001818 	.word	0x20001818
 801ade4:	200017a4 	.word	0x200017a4

0801ade8 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801ade8:	b580      	push	{r7, lr}
 801adea:	b082      	sub	sp, #8
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
 801adf0:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	005a      	lsls	r2, r3, #1
 801adf6:	683b      	ldr	r3, [r7, #0]
 801adf8:	4413      	add	r3, r2
 801adfa:	4a0c      	ldr	r2, [pc, #48]	; (801ae2c <RadioSetRxDutyCycle+0x44>)
 801adfc:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801adfe:	2300      	movs	r3, #0
 801ae00:	2200      	movs	r2, #0
 801ae02:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae0a:	f001 fbc7 	bl	801c59c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae0e:	4b07      	ldr	r3, [pc, #28]	; (801ae2c <RadioSetRxDutyCycle+0x44>)
 801ae10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae14:	2100      	movs	r1, #0
 801ae16:	4618      	mov	r0, r3
 801ae18:	f002 f864 	bl	801cee4 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801ae1c:	6839      	ldr	r1, [r7, #0]
 801ae1e:	6878      	ldr	r0, [r7, #4]
 801ae20:	f001 fa68 	bl	801c2f4 <SUBGRF_SetRxDutyCycle>
}
 801ae24:	bf00      	nop
 801ae26:	3708      	adds	r7, #8
 801ae28:	46bd      	mov	sp, r7
 801ae2a:	bd80      	pop	{r7, pc}
 801ae2c:	200017a4 	.word	0x200017a4

0801ae30 <RadioStartCad>:

static void RadioStartCad( void )
{
 801ae30:	b580      	push	{r7, lr}
 801ae32:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae34:	4b09      	ldr	r3, [pc, #36]	; (801ae5c <RadioStartCad+0x2c>)
 801ae36:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae3a:	2100      	movs	r1, #0
 801ae3c:	4618      	mov	r0, r3
 801ae3e:	f002 f851 	bl	801cee4 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801ae42:	2300      	movs	r3, #0
 801ae44:	2200      	movs	r2, #0
 801ae46:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ae4a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ae4e:	f001 fba5 	bl	801c59c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801ae52:	f001 fa7b 	bl	801c34c <SUBGRF_SetCad>
}
 801ae56:	bf00      	nop
 801ae58:	bd80      	pop	{r7, pc}
 801ae5a:	bf00      	nop
 801ae5c:	200017a4 	.word	0x200017a4

0801ae60 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ae60:	b580      	push	{r7, lr}
 801ae62:	b084      	sub	sp, #16
 801ae64:	af00      	add	r7, sp, #0
 801ae66:	6078      	str	r0, [r7, #4]
 801ae68:	460b      	mov	r3, r1
 801ae6a:	70fb      	strb	r3, [r7, #3]
 801ae6c:	4613      	mov	r3, r2
 801ae6e:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801ae70:	883b      	ldrh	r3, [r7, #0]
 801ae72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae76:	fb02 f303 	mul.w	r3, r2, r3
 801ae7a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801ae7c:	6878      	ldr	r0, [r7, #4]
 801ae7e:	f001 fbe9 	bl	801c654 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801ae82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae86:	4618      	mov	r0, r3
 801ae88:	f002 f854 	bl	801cf34 <SUBGRF_SetRfTxPower>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801ae90:	210e      	movs	r1, #14
 801ae92:	f640 101f 	movw	r0, #2335	; 0x91f
 801ae96:	f001 ff31 	bl	801ccfc <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801ae9a:	7afb      	ldrb	r3, [r7, #11]
 801ae9c:	2101      	movs	r1, #1
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f002 f820 	bl	801cee4 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aea4:	f001 fa60 	bl	801c368 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aea8:	68f9      	ldr	r1, [r7, #12]
 801aeaa:	4805      	ldr	r0, [pc, #20]	; (801aec0 <RadioSetTxContinuousWave+0x60>)
 801aeac:	f003 f9b2 	bl	801e214 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aeb0:	4803      	ldr	r0, [pc, #12]	; (801aec0 <RadioSetTxContinuousWave+0x60>)
 801aeb2:	f003 f8d1 	bl	801e058 <UTIL_TIMER_Start>
}
 801aeb6:	bf00      	nop
 801aeb8:	3710      	adds	r7, #16
 801aeba:	46bd      	mov	sp, r7
 801aebc:	bd80      	pop	{r7, pc}
 801aebe:	bf00      	nop
 801aec0:	20001800 	.word	0x20001800

0801aec4 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801aec4:	b580      	push	{r7, lr}
 801aec6:	b082      	sub	sp, #8
 801aec8:	af00      	add	r7, sp, #0
 801aeca:	4603      	mov	r3, r0
 801aecc:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801aece:	f001 fe82 	bl	801cbd6 <SUBGRF_GetRssiInst>
 801aed2:	4603      	mov	r3, r0
 801aed4:	b21b      	sxth	r3, r3
}
 801aed6:	4618      	mov	r0, r3
 801aed8:	3708      	adds	r7, #8
 801aeda:	46bd      	mov	sp, r7
 801aedc:	bd80      	pop	{r7, pc}

0801aede <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801aede:	b580      	push	{r7, lr}
 801aee0:	b082      	sub	sp, #8
 801aee2:	af00      	add	r7, sp, #0
 801aee4:	4603      	mov	r3, r0
 801aee6:	460a      	mov	r2, r1
 801aee8:	80fb      	strh	r3, [r7, #6]
 801aeea:	4613      	mov	r3, r2
 801aeec:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801aeee:	797a      	ldrb	r2, [r7, #5]
 801aef0:	88fb      	ldrh	r3, [r7, #6]
 801aef2:	4611      	mov	r1, r2
 801aef4:	4618      	mov	r0, r3
 801aef6:	f001 ff01 	bl	801ccfc <SUBGRF_WriteRegister>
}
 801aefa:	bf00      	nop
 801aefc:	3708      	adds	r7, #8
 801aefe:	46bd      	mov	sp, r7
 801af00:	bd80      	pop	{r7, pc}

0801af02 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801af02:	b580      	push	{r7, lr}
 801af04:	b082      	sub	sp, #8
 801af06:	af00      	add	r7, sp, #0
 801af08:	4603      	mov	r3, r0
 801af0a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801af0c:	88fb      	ldrh	r3, [r7, #6]
 801af0e:	4618      	mov	r0, r3
 801af10:	f001 ff08 	bl	801cd24 <SUBGRF_ReadRegister>
 801af14:	4603      	mov	r3, r0
}
 801af16:	4618      	mov	r0, r3
 801af18:	3708      	adds	r7, #8
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}

0801af1e <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af1e:	b580      	push	{r7, lr}
 801af20:	b082      	sub	sp, #8
 801af22:	af00      	add	r7, sp, #0
 801af24:	4603      	mov	r3, r0
 801af26:	6039      	str	r1, [r7, #0]
 801af28:	80fb      	strh	r3, [r7, #6]
 801af2a:	4613      	mov	r3, r2
 801af2c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801af2e:	797b      	ldrb	r3, [r7, #5]
 801af30:	b29a      	uxth	r2, r3
 801af32:	88fb      	ldrh	r3, [r7, #6]
 801af34:	6839      	ldr	r1, [r7, #0]
 801af36:	4618      	mov	r0, r3
 801af38:	f001 ff08 	bl	801cd4c <SUBGRF_WriteRegisters>
}
 801af3c:	bf00      	nop
 801af3e:	3708      	adds	r7, #8
 801af40:	46bd      	mov	sp, r7
 801af42:	bd80      	pop	{r7, pc}

0801af44 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af44:	b580      	push	{r7, lr}
 801af46:	b082      	sub	sp, #8
 801af48:	af00      	add	r7, sp, #0
 801af4a:	4603      	mov	r3, r0
 801af4c:	6039      	str	r1, [r7, #0]
 801af4e:	80fb      	strh	r3, [r7, #6]
 801af50:	4613      	mov	r3, r2
 801af52:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801af54:	797b      	ldrb	r3, [r7, #5]
 801af56:	b29a      	uxth	r2, r3
 801af58:	88fb      	ldrh	r3, [r7, #6]
 801af5a:	6839      	ldr	r1, [r7, #0]
 801af5c:	4618      	mov	r0, r3
 801af5e:	f001 ff17 	bl	801cd90 <SUBGRF_ReadRegisters>
}
 801af62:	bf00      	nop
 801af64:	3708      	adds	r7, #8
 801af66:	46bd      	mov	sp, r7
 801af68:	bd80      	pop	{r7, pc}
	...

0801af6c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af6c:	b580      	push	{r7, lr}
 801af6e:	b082      	sub	sp, #8
 801af70:	af00      	add	r7, sp, #0
 801af72:	4603      	mov	r3, r0
 801af74:	460a      	mov	r2, r1
 801af76:	71fb      	strb	r3, [r7, #7]
 801af78:	4613      	mov	r3, r2
 801af7a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801af7c:	79fb      	ldrb	r3, [r7, #7]
 801af7e:	2b01      	cmp	r3, #1
 801af80:	d10a      	bne.n	801af98 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801af82:	4a0e      	ldr	r2, [pc, #56]	; (801afbc <RadioSetMaxPayloadLength+0x50>)
 801af84:	79bb      	ldrb	r3, [r7, #6]
 801af86:	7013      	strb	r3, [r2, #0]
 801af88:	4b0c      	ldr	r3, [pc, #48]	; (801afbc <RadioSetMaxPayloadLength+0x50>)
 801af8a:	781a      	ldrb	r2, [r3, #0]
 801af8c:	4b0c      	ldr	r3, [pc, #48]	; (801afc0 <RadioSetMaxPayloadLength+0x54>)
 801af8e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801af90:	480c      	ldr	r0, [pc, #48]	; (801afc4 <RadioSetMaxPayloadLength+0x58>)
 801af92:	f001 fd6b 	bl	801ca6c <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801af96:	e00d      	b.n	801afb4 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801af98:	4b09      	ldr	r3, [pc, #36]	; (801afc0 <RadioSetMaxPayloadLength+0x54>)
 801af9a:	7d5b      	ldrb	r3, [r3, #21]
 801af9c:	2b01      	cmp	r3, #1
 801af9e:	d109      	bne.n	801afb4 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801afa0:	4a06      	ldr	r2, [pc, #24]	; (801afbc <RadioSetMaxPayloadLength+0x50>)
 801afa2:	79bb      	ldrb	r3, [r7, #6]
 801afa4:	7013      	strb	r3, [r2, #0]
 801afa6:	4b05      	ldr	r3, [pc, #20]	; (801afbc <RadioSetMaxPayloadLength+0x50>)
 801afa8:	781a      	ldrb	r2, [r3, #0]
 801afaa:	4b05      	ldr	r3, [pc, #20]	; (801afc0 <RadioSetMaxPayloadLength+0x54>)
 801afac:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afae:	4805      	ldr	r0, [pc, #20]	; (801afc4 <RadioSetMaxPayloadLength+0x58>)
 801afb0:	f001 fd5c 	bl	801ca6c <SUBGRF_SetPacketParams>
}
 801afb4:	bf00      	nop
 801afb6:	3708      	adds	r7, #8
 801afb8:	46bd      	mov	sp, r7
 801afba:	bd80      	pop	{r7, pc}
 801afbc:	2000014c 	.word	0x2000014c
 801afc0:	200017a4 	.word	0x200017a4
 801afc4:	200017b2 	.word	0x200017b2

0801afc8 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801afc8:	b580      	push	{r7, lr}
 801afca:	b082      	sub	sp, #8
 801afcc:	af00      	add	r7, sp, #0
 801afce:	4603      	mov	r3, r0
 801afd0:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801afd2:	4a13      	ldr	r2, [pc, #76]	; (801b020 <RadioSetPublicNetwork+0x58>)
 801afd4:	79fb      	ldrb	r3, [r7, #7]
 801afd6:	7313      	strb	r3, [r2, #12]
 801afd8:	4b11      	ldr	r3, [pc, #68]	; (801b020 <RadioSetPublicNetwork+0x58>)
 801afda:	7b1a      	ldrb	r2, [r3, #12]
 801afdc:	4b10      	ldr	r3, [pc, #64]	; (801b020 <RadioSetPublicNetwork+0x58>)
 801afde:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801afe0:	2001      	movs	r0, #1
 801afe2:	f7ff f811 	bl	801a008 <RadioSetModem>
    if( enable == true )
 801afe6:	79fb      	ldrb	r3, [r7, #7]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d00a      	beq.n	801b002 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801afec:	2134      	movs	r1, #52	; 0x34
 801afee:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801aff2:	f001 fe83 	bl	801ccfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801aff6:	2144      	movs	r1, #68	; 0x44
 801aff8:	f240 7041 	movw	r0, #1857	; 0x741
 801affc:	f001 fe7e 	bl	801ccfc <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b000:	e009      	b.n	801b016 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b002:	2114      	movs	r1, #20
 801b004:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b008:	f001 fe78 	bl	801ccfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b00c:	2124      	movs	r1, #36	; 0x24
 801b00e:	f240 7041 	movw	r0, #1857	; 0x741
 801b012:	f001 fe73 	bl	801ccfc <SUBGRF_WriteRegister>
}
 801b016:	bf00      	nop
 801b018:	3708      	adds	r7, #8
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}
 801b01e:	bf00      	nop
 801b020:	200017a4 	.word	0x200017a4

0801b024 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b024:	b580      	push	{r7, lr}
 801b026:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b028:	f001 ffb8 	bl	801cf9c <SUBGRF_GetRadioWakeUpTime>
 801b02c:	4603      	mov	r3, r0
 801b02e:	3303      	adds	r3, #3
}
 801b030:	4618      	mov	r0, r3
 801b032:	bd80      	pop	{r7, pc}

0801b034 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b082      	sub	sp, #8
 801b038:	af00      	add	r7, sp, #0
 801b03a:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b03c:	f000 f80e 	bl	801b05c <RadioOnTxTimeoutProcess>
}
 801b040:	bf00      	nop
 801b042:	3708      	adds	r7, #8
 801b044:	46bd      	mov	sp, r7
 801b046:	bd80      	pop	{r7, pc}

0801b048 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b048:	b580      	push	{r7, lr}
 801b04a:	b082      	sub	sp, #8
 801b04c:	af00      	add	r7, sp, #0
 801b04e:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b050:	f000 f818 	bl	801b084 <RadioOnRxTimeoutProcess>
}
 801b054:	bf00      	nop
 801b056:	3708      	adds	r7, #8
 801b058:	46bd      	mov	sp, r7
 801b05a:	bd80      	pop	{r7, pc}

0801b05c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b05c:	b580      	push	{r7, lr}
 801b05e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b060:	4b07      	ldr	r3, [pc, #28]	; (801b080 <RadioOnTxTimeoutProcess+0x24>)
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d008      	beq.n	801b07a <RadioOnTxTimeoutProcess+0x1e>
 801b068:	4b05      	ldr	r3, [pc, #20]	; (801b080 <RadioOnTxTimeoutProcess+0x24>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	685b      	ldr	r3, [r3, #4]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	d003      	beq.n	801b07a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b072:	4b03      	ldr	r3, [pc, #12]	; (801b080 <RadioOnTxTimeoutProcess+0x24>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	4798      	blx	r3
    }
}
 801b07a:	bf00      	nop
 801b07c:	bd80      	pop	{r7, pc}
 801b07e:	bf00      	nop
 801b080:	200017a0 	.word	0x200017a0

0801b084 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b084:	b580      	push	{r7, lr}
 801b086:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b088:	4b07      	ldr	r3, [pc, #28]	; (801b0a8 <RadioOnRxTimeoutProcess+0x24>)
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d008      	beq.n	801b0a2 <RadioOnRxTimeoutProcess+0x1e>
 801b090:	4b05      	ldr	r3, [pc, #20]	; (801b0a8 <RadioOnRxTimeoutProcess+0x24>)
 801b092:	681b      	ldr	r3, [r3, #0]
 801b094:	68db      	ldr	r3, [r3, #12]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d003      	beq.n	801b0a2 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b09a:	4b03      	ldr	r3, [pc, #12]	; (801b0a8 <RadioOnRxTimeoutProcess+0x24>)
 801b09c:	681b      	ldr	r3, [r3, #0]
 801b09e:	68db      	ldr	r3, [r3, #12]
 801b0a0:	4798      	blx	r3
    }
}
 801b0a2:	bf00      	nop
 801b0a4:	bd80      	pop	{r7, pc}
 801b0a6:	bf00      	nop
 801b0a8:	200017a0 	.word	0x200017a0

0801b0ac <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b082      	sub	sp, #8
 801b0b0:	af00      	add	r7, sp, #0
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b0b6:	4a05      	ldr	r2, [pc, #20]	; (801b0cc <RadioOnDioIrq+0x20>)
 801b0b8:	88fb      	ldrh	r3, [r7, #6]
 801b0ba:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b0be:	f000 f807 	bl	801b0d0 <RadioIrqProcess>
}
 801b0c2:	bf00      	nop
 801b0c4:	3708      	adds	r7, #8
 801b0c6:	46bd      	mov	sp, r7
 801b0c8:	bd80      	pop	{r7, pc}
 801b0ca:	bf00      	nop
 801b0cc:	200017a4 	.word	0x200017a4

0801b0d0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b0d0:	b5b0      	push	{r4, r5, r7, lr}
 801b0d2:	b082      	sub	sp, #8
 801b0d4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b0da:	2300      	movs	r3, #0
 801b0dc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b0de:	4ba8      	ldr	r3, [pc, #672]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b0e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b0e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0e8:	f000 810d 	beq.w	801b306 <RadioIrqProcess+0x236>
 801b0ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b0f0:	f300 81e8 	bgt.w	801b4c4 <RadioIrqProcess+0x3f4>
 801b0f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b0f8:	f000 80f1 	beq.w	801b2de <RadioIrqProcess+0x20e>
 801b0fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b100:	f300 81e0 	bgt.w	801b4c4 <RadioIrqProcess+0x3f4>
 801b104:	2b80      	cmp	r3, #128	; 0x80
 801b106:	f000 80d6 	beq.w	801b2b6 <RadioIrqProcess+0x1e6>
 801b10a:	2b80      	cmp	r3, #128	; 0x80
 801b10c:	f300 81da 	bgt.w	801b4c4 <RadioIrqProcess+0x3f4>
 801b110:	2b20      	cmp	r3, #32
 801b112:	dc49      	bgt.n	801b1a8 <RadioIrqProcess+0xd8>
 801b114:	2b00      	cmp	r3, #0
 801b116:	f340 81d5 	ble.w	801b4c4 <RadioIrqProcess+0x3f4>
 801b11a:	3b01      	subs	r3, #1
 801b11c:	2b1f      	cmp	r3, #31
 801b11e:	f200 81d1 	bhi.w	801b4c4 <RadioIrqProcess+0x3f4>
 801b122:	a201      	add	r2, pc, #4	; (adr r2, 801b128 <RadioIrqProcess+0x58>)
 801b124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b128:	0801b1b1 	.word	0x0801b1b1
 801b12c:	0801b1eb 	.word	0x0801b1eb
 801b130:	0801b4c5 	.word	0x0801b4c5
 801b134:	0801b3a1 	.word	0x0801b3a1
 801b138:	0801b4c5 	.word	0x0801b4c5
 801b13c:	0801b4c5 	.word	0x0801b4c5
 801b140:	0801b4c5 	.word	0x0801b4c5
 801b144:	0801b41d 	.word	0x0801b41d
 801b148:	0801b4c5 	.word	0x0801b4c5
 801b14c:	0801b4c5 	.word	0x0801b4c5
 801b150:	0801b4c5 	.word	0x0801b4c5
 801b154:	0801b4c5 	.word	0x0801b4c5
 801b158:	0801b4c5 	.word	0x0801b4c5
 801b15c:	0801b4c5 	.word	0x0801b4c5
 801b160:	0801b4c5 	.word	0x0801b4c5
 801b164:	0801b439 	.word	0x0801b439
 801b168:	0801b4c5 	.word	0x0801b4c5
 801b16c:	0801b4c5 	.word	0x0801b4c5
 801b170:	0801b4c5 	.word	0x0801b4c5
 801b174:	0801b4c5 	.word	0x0801b4c5
 801b178:	0801b4c5 	.word	0x0801b4c5
 801b17c:	0801b4c5 	.word	0x0801b4c5
 801b180:	0801b4c5 	.word	0x0801b4c5
 801b184:	0801b4c5 	.word	0x0801b4c5
 801b188:	0801b4c5 	.word	0x0801b4c5
 801b18c:	0801b4c5 	.word	0x0801b4c5
 801b190:	0801b4c5 	.word	0x0801b4c5
 801b194:	0801b4c5 	.word	0x0801b4c5
 801b198:	0801b4c5 	.word	0x0801b4c5
 801b19c:	0801b4c5 	.word	0x0801b4c5
 801b1a0:	0801b4c5 	.word	0x0801b4c5
 801b1a4:	0801b447 	.word	0x0801b447
 801b1a8:	2b40      	cmp	r3, #64	; 0x40
 801b1aa:	f000 816d 	beq.w	801b488 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b1ae:	e189      	b.n	801b4c4 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b1b0:	4874      	ldr	r0, [pc, #464]	; (801b384 <RadioIrqProcess+0x2b4>)
 801b1b2:	f002 ffbf 	bl	801e134 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b1b6:	2000      	movs	r0, #0
 801b1b8:	f001 f81c 	bl	801c1f4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b1bc:	f002 f892 	bl	801d2e4 <RFW_Is_LongPacketModeEnabled>
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	2b01      	cmp	r3, #1
 801b1c4:	d101      	bne.n	801b1ca <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b1c6:	f002 f8b6 	bl	801d336 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b1ca:	4b6f      	ldr	r3, [pc, #444]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	2b00      	cmp	r3, #0
 801b1d0:	f000 817a 	beq.w	801b4c8 <RadioIrqProcess+0x3f8>
 801b1d4:	4b6c      	ldr	r3, [pc, #432]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	681b      	ldr	r3, [r3, #0]
 801b1da:	2b00      	cmp	r3, #0
 801b1dc:	f000 8174 	beq.w	801b4c8 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b1e0:	4b69      	ldr	r3, [pc, #420]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	4798      	blx	r3
        break;
 801b1e8:	e16e      	b.n	801b4c8 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b1ea:	4868      	ldr	r0, [pc, #416]	; (801b38c <RadioIrqProcess+0x2bc>)
 801b1ec:	f002 ffa2 	bl	801e134 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b1f0:	4b63      	ldr	r3, [pc, #396]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b1f2:	785b      	ldrb	r3, [r3, #1]
 801b1f4:	f083 0301 	eor.w	r3, r3, #1
 801b1f8:	b2db      	uxtb	r3, r3
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d014      	beq.n	801b228 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b1fe:	2000      	movs	r0, #0
 801b200:	f000 fff8 	bl	801c1f4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b204:	2100      	movs	r1, #0
 801b206:	f640 1002 	movw	r0, #2306	; 0x902
 801b20a:	f001 fd77 	bl	801ccfc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b20e:	f640 1044 	movw	r0, #2372	; 0x944
 801b212:	f001 fd87 	bl	801cd24 <SUBGRF_ReadRegister>
 801b216:	4603      	mov	r3, r0
 801b218:	f043 0302 	orr.w	r3, r3, #2
 801b21c:	b2db      	uxtb	r3, r3
 801b21e:	4619      	mov	r1, r3
 801b220:	f640 1044 	movw	r0, #2372	; 0x944
 801b224:	f001 fd6a 	bl	801ccfc <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b228:	1dfb      	adds	r3, r7, #7
 801b22a:	22ff      	movs	r2, #255	; 0xff
 801b22c:	4619      	mov	r1, r3
 801b22e:	4858      	ldr	r0, [pc, #352]	; (801b390 <RadioIrqProcess+0x2c0>)
 801b230:	f000 feb0 	bl	801bf94 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b234:	4857      	ldr	r0, [pc, #348]	; (801b394 <RadioIrqProcess+0x2c4>)
 801b236:	f001 fd0f 	bl	801cc58 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b23a:	4b53      	ldr	r3, [pc, #332]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	f000 8144 	beq.w	801b4cc <RadioIrqProcess+0x3fc>
 801b244:	4b50      	ldr	r3, [pc, #320]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b246:	681b      	ldr	r3, [r3, #0]
 801b248:	689b      	ldr	r3, [r3, #8]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	f000 813e 	beq.w	801b4cc <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b250:	4b4b      	ldr	r3, [pc, #300]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b252:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b256:	2b01      	cmp	r3, #1
 801b258:	d10e      	bne.n	801b278 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b25a:	4b4b      	ldr	r3, [pc, #300]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	689c      	ldr	r4, [r3, #8]
 801b260:	79fb      	ldrb	r3, [r7, #7]
 801b262:	b299      	uxth	r1, r3
 801b264:	4b46      	ldr	r3, [pc, #280]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b266:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b26a:	b21a      	sxth	r2, r3
 801b26c:	4b44      	ldr	r3, [pc, #272]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b26e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b272:	4847      	ldr	r0, [pc, #284]	; (801b390 <RadioIrqProcess+0x2c0>)
 801b274:	47a0      	blx	r4
                break;
 801b276:	e01d      	b.n	801b2b4 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b278:	4b41      	ldr	r3, [pc, #260]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b27a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b27c:	463a      	mov	r2, r7
 801b27e:	4611      	mov	r1, r2
 801b280:	4618      	mov	r0, r3
 801b282:	f001 ff7d 	bl	801d180 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b286:	4b40      	ldr	r3, [pc, #256]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	689c      	ldr	r4, [r3, #8]
 801b28c:	79fb      	ldrb	r3, [r7, #7]
 801b28e:	b299      	uxth	r1, r3
 801b290:	4b3b      	ldr	r3, [pc, #236]	; (801b380 <RadioIrqProcess+0x2b0>)
 801b292:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b296:	b218      	sxth	r0, r3
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b29e:	4a3e      	ldr	r2, [pc, #248]	; (801b398 <RadioIrqProcess+0x2c8>)
 801b2a0:	fb82 5203 	smull	r5, r2, r2, r3
 801b2a4:	1192      	asrs	r2, r2, #6
 801b2a6:	17db      	asrs	r3, r3, #31
 801b2a8:	1ad3      	subs	r3, r2, r3
 801b2aa:	b25b      	sxtb	r3, r3
 801b2ac:	4602      	mov	r2, r0
 801b2ae:	4838      	ldr	r0, [pc, #224]	; (801b390 <RadioIrqProcess+0x2c0>)
 801b2b0:	47a0      	blx	r4
                break;
 801b2b2:	bf00      	nop
        break;
 801b2b4:	e10a      	b.n	801b4cc <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b2b6:	2000      	movs	r0, #0
 801b2b8:	f000 ff9c 	bl	801c1f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2bc:	4b32      	ldr	r3, [pc, #200]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	f000 8105 	beq.w	801b4d0 <RadioIrqProcess+0x400>
 801b2c6:	4b30      	ldr	r3, [pc, #192]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	699b      	ldr	r3, [r3, #24]
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	f000 80ff 	beq.w	801b4d0 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b2d2:	4b2d      	ldr	r3, [pc, #180]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	699b      	ldr	r3, [r3, #24]
 801b2d8:	2000      	movs	r0, #0
 801b2da:	4798      	blx	r3
        break;
 801b2dc:	e0f8      	b.n	801b4d0 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b2de:	2000      	movs	r0, #0
 801b2e0:	f000 ff88 	bl	801c1f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2e4:	4b28      	ldr	r3, [pc, #160]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	f000 80f3 	beq.w	801b4d4 <RadioIrqProcess+0x404>
 801b2ee:	4b26      	ldr	r3, [pc, #152]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2f0:	681b      	ldr	r3, [r3, #0]
 801b2f2:	699b      	ldr	r3, [r3, #24]
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	f000 80ed 	beq.w	801b4d4 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b2fa:	4b23      	ldr	r3, [pc, #140]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	699b      	ldr	r3, [r3, #24]
 801b300:	2001      	movs	r0, #1
 801b302:	4798      	blx	r3
        break;
 801b304:	e0e6      	b.n	801b4d4 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b306:	4b25      	ldr	r3, [pc, #148]	; (801b39c <RadioIrqProcess+0x2cc>)
 801b308:	2201      	movs	r2, #1
 801b30a:	2100      	movs	r1, #0
 801b30c:	2002      	movs	r0, #2
 801b30e:	f003 f91b 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b312:	f000 fe25 	bl	801bf60 <SUBGRF_GetOperatingMode>
 801b316:	4603      	mov	r3, r0
 801b318:	2b04      	cmp	r3, #4
 801b31a:	d115      	bne.n	801b348 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b31c:	4819      	ldr	r0, [pc, #100]	; (801b384 <RadioIrqProcess+0x2b4>)
 801b31e:	f002 ff09 	bl	801e134 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b322:	2000      	movs	r0, #0
 801b324:	f000 ff66 	bl	801c1f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b328:	4b17      	ldr	r3, [pc, #92]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	2b00      	cmp	r3, #0
 801b32e:	f000 80d3 	beq.w	801b4d8 <RadioIrqProcess+0x408>
 801b332:	4b15      	ldr	r3, [pc, #84]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	685b      	ldr	r3, [r3, #4]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	f000 80cd 	beq.w	801b4d8 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b33e:	4b12      	ldr	r3, [pc, #72]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	685b      	ldr	r3, [r3, #4]
 801b344:	4798      	blx	r3
        break;
 801b346:	e0c7      	b.n	801b4d8 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b348:	f000 fe0a 	bl	801bf60 <SUBGRF_GetOperatingMode>
 801b34c:	4603      	mov	r3, r0
 801b34e:	2b05      	cmp	r3, #5
 801b350:	f040 80c2 	bne.w	801b4d8 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b354:	480d      	ldr	r0, [pc, #52]	; (801b38c <RadioIrqProcess+0x2bc>)
 801b356:	f002 feed 	bl	801e134 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b35a:	2000      	movs	r0, #0
 801b35c:	f000 ff4a 	bl	801c1f4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b360:	4b09      	ldr	r3, [pc, #36]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	2b00      	cmp	r3, #0
 801b366:	f000 80b7 	beq.w	801b4d8 <RadioIrqProcess+0x408>
 801b36a:	4b07      	ldr	r3, [pc, #28]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b36c:	681b      	ldr	r3, [r3, #0]
 801b36e:	68db      	ldr	r3, [r3, #12]
 801b370:	2b00      	cmp	r3, #0
 801b372:	f000 80b1 	beq.w	801b4d8 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b376:	4b04      	ldr	r3, [pc, #16]	; (801b388 <RadioIrqProcess+0x2b8>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	68db      	ldr	r3, [r3, #12]
 801b37c:	4798      	blx	r3
        break;
 801b37e:	e0ab      	b.n	801b4d8 <RadioIrqProcess+0x408>
 801b380:	200017a4 	.word	0x200017a4
 801b384:	20001800 	.word	0x20001800
 801b388:	200017a0 	.word	0x200017a0
 801b38c:	20001818 	.word	0x20001818
 801b390:	200016a0 	.word	0x200016a0
 801b394:	200017c8 	.word	0x200017c8
 801b398:	10624dd3 	.word	0x10624dd3
 801b39c:	0801f41c 	.word	0x0801f41c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b3a0:	4b54      	ldr	r3, [pc, #336]	; (801b4f4 <RadioIrqProcess+0x424>)
 801b3a2:	2201      	movs	r2, #1
 801b3a4:	2100      	movs	r1, #0
 801b3a6:	2002      	movs	r0, #2
 801b3a8:	f003 f8ce 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b3ac:	4b52      	ldr	r3, [pc, #328]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b3ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	f000 8093 	beq.w	801b4dc <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b3b6:	4a51      	ldr	r2, [pc, #324]	; (801b4fc <RadioIrqProcess+0x42c>)
 801b3b8:	4b4f      	ldr	r3, [pc, #316]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b3ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3bc:	0c1b      	lsrs	r3, r3, #16
 801b3be:	b2db      	uxtb	r3, r3
 801b3c0:	4619      	mov	r1, r3
 801b3c2:	f640 1003 	movw	r0, #2307	; 0x903
 801b3c6:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b3c8:	4a4c      	ldr	r2, [pc, #304]	; (801b4fc <RadioIrqProcess+0x42c>)
 801b3ca:	4b4b      	ldr	r3, [pc, #300]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b3cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3ce:	0a1b      	lsrs	r3, r3, #8
 801b3d0:	b2db      	uxtb	r3, r3
 801b3d2:	4619      	mov	r1, r3
 801b3d4:	f640 1004 	movw	r0, #2308	; 0x904
 801b3d8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b3da:	4a48      	ldr	r2, [pc, #288]	; (801b4fc <RadioIrqProcess+0x42c>)
 801b3dc:	4b46      	ldr	r3, [pc, #280]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3e0:	b2db      	uxtb	r3, r3
 801b3e2:	4619      	mov	r1, r3
 801b3e4:	f640 1005 	movw	r0, #2309	; 0x905
 801b3e8:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b3ea:	4c44      	ldr	r4, [pc, #272]	; (801b4fc <RadioIrqProcess+0x42c>)
 801b3ec:	4b44      	ldr	r3, [pc, #272]	; (801b500 <RadioIrqProcess+0x430>)
 801b3ee:	f640 1002 	movw	r0, #2306	; 0x902
 801b3f2:	4798      	blx	r3
 801b3f4:	4603      	mov	r3, r0
 801b3f6:	f043 0301 	orr.w	r3, r3, #1
 801b3fa:	b2db      	uxtb	r3, r3
 801b3fc:	4619      	mov	r1, r3
 801b3fe:	f640 1002 	movw	r0, #2306	; 0x902
 801b402:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b404:	4b3c      	ldr	r3, [pc, #240]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b406:	2200      	movs	r2, #0
 801b408:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b40a:	2300      	movs	r3, #0
 801b40c:	2200      	movs	r2, #0
 801b40e:	f240 2162 	movw	r1, #610	; 0x262
 801b412:	f240 2062 	movw	r0, #610	; 0x262
 801b416:	f001 f8c1 	bl	801c59c <SUBGRF_SetDioIrqParams>
        break;
 801b41a:	e05f      	b.n	801b4dc <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b41c:	4b39      	ldr	r3, [pc, #228]	; (801b504 <RadioIrqProcess+0x434>)
 801b41e:	2201      	movs	r2, #1
 801b420:	2100      	movs	r1, #0
 801b422:	2002      	movs	r0, #2
 801b424:	f003 f890 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b428:	f001 ff55 	bl	801d2d6 <RFW_Is_Init>
 801b42c:	4603      	mov	r3, r0
 801b42e:	2b01      	cmp	r3, #1
 801b430:	d156      	bne.n	801b4e0 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b432:	f001 ff86 	bl	801d342 <RFW_ReceivePayload>
        break;
 801b436:	e053      	b.n	801b4e0 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b438:	4b33      	ldr	r3, [pc, #204]	; (801b508 <RadioIrqProcess+0x438>)
 801b43a:	2201      	movs	r2, #1
 801b43c:	2100      	movs	r1, #0
 801b43e:	2002      	movs	r0, #2
 801b440:	f003 f882 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b444:	e051      	b.n	801b4ea <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b446:	4831      	ldr	r0, [pc, #196]	; (801b50c <RadioIrqProcess+0x43c>)
 801b448:	f002 fe74 	bl	801e134 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b44c:	4b2a      	ldr	r3, [pc, #168]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b44e:	785b      	ldrb	r3, [r3, #1]
 801b450:	f083 0301 	eor.w	r3, r3, #1
 801b454:	b2db      	uxtb	r3, r3
 801b456:	2b00      	cmp	r3, #0
 801b458:	d002      	beq.n	801b460 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b45a:	2000      	movs	r0, #0
 801b45c:	f000 feca 	bl	801c1f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b460:	4b2b      	ldr	r3, [pc, #172]	; (801b510 <RadioIrqProcess+0x440>)
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	2b00      	cmp	r3, #0
 801b466:	d03d      	beq.n	801b4e4 <RadioIrqProcess+0x414>
 801b468:	4b29      	ldr	r3, [pc, #164]	; (801b510 <RadioIrqProcess+0x440>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	68db      	ldr	r3, [r3, #12]
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d038      	beq.n	801b4e4 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b472:	4b27      	ldr	r3, [pc, #156]	; (801b510 <RadioIrqProcess+0x440>)
 801b474:	681b      	ldr	r3, [r3, #0]
 801b476:	68db      	ldr	r3, [r3, #12]
 801b478:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b47a:	4b26      	ldr	r3, [pc, #152]	; (801b514 <RadioIrqProcess+0x444>)
 801b47c:	2201      	movs	r2, #1
 801b47e:	2100      	movs	r1, #0
 801b480:	2002      	movs	r0, #2
 801b482:	f003 f861 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b486:	e02d      	b.n	801b4e4 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b488:	4b23      	ldr	r3, [pc, #140]	; (801b518 <RadioIrqProcess+0x448>)
 801b48a:	2201      	movs	r2, #1
 801b48c:	2100      	movs	r1, #0
 801b48e:	2002      	movs	r0, #2
 801b490:	f003 f85a 	bl	801e548 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b494:	4b18      	ldr	r3, [pc, #96]	; (801b4f8 <RadioIrqProcess+0x428>)
 801b496:	785b      	ldrb	r3, [r3, #1]
 801b498:	f083 0301 	eor.w	r3, r3, #1
 801b49c:	b2db      	uxtb	r3, r3
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d002      	beq.n	801b4a8 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b4a2:	2000      	movs	r0, #0
 801b4a4:	f000 fea6 	bl	801c1f4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b4a8:	4b19      	ldr	r3, [pc, #100]	; (801b510 <RadioIrqProcess+0x440>)
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d01b      	beq.n	801b4e8 <RadioIrqProcess+0x418>
 801b4b0:	4b17      	ldr	r3, [pc, #92]	; (801b510 <RadioIrqProcess+0x440>)
 801b4b2:	681b      	ldr	r3, [r3, #0]
 801b4b4:	691b      	ldr	r3, [r3, #16]
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d016      	beq.n	801b4e8 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b4ba:	4b15      	ldr	r3, [pc, #84]	; (801b510 <RadioIrqProcess+0x440>)
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	691b      	ldr	r3, [r3, #16]
 801b4c0:	4798      	blx	r3
        break;
 801b4c2:	e011      	b.n	801b4e8 <RadioIrqProcess+0x418>
        break;
 801b4c4:	bf00      	nop
 801b4c6:	e010      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4c8:	bf00      	nop
 801b4ca:	e00e      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4cc:	bf00      	nop
 801b4ce:	e00c      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4d0:	bf00      	nop
 801b4d2:	e00a      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4d4:	bf00      	nop
 801b4d6:	e008      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4d8:	bf00      	nop
 801b4da:	e006      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4dc:	bf00      	nop
 801b4de:	e004      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4e0:	bf00      	nop
 801b4e2:	e002      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4e4:	bf00      	nop
 801b4e6:	e000      	b.n	801b4ea <RadioIrqProcess+0x41a>
        break;
 801b4e8:	bf00      	nop
    }
}
 801b4ea:	bf00      	nop
 801b4ec:	3708      	adds	r7, #8
 801b4ee:	46bd      	mov	sp, r7
 801b4f0:	bdb0      	pop	{r4, r5, r7, pc}
 801b4f2:	bf00      	nop
 801b4f4:	0801f430 	.word	0x0801f430
 801b4f8:	200017a4 	.word	0x200017a4
 801b4fc:	0801aedf 	.word	0x0801aedf
 801b500:	0801af03 	.word	0x0801af03
 801b504:	0801f43c 	.word	0x0801f43c
 801b508:	0801f448 	.word	0x0801f448
 801b50c:	20001818 	.word	0x20001818
 801b510:	200017a0 	.word	0x200017a0
 801b514:	0801f454 	.word	0x0801f454
 801b518:	0801f460 	.word	0x0801f460

0801b51c <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b520:	4b09      	ldr	r3, [pc, #36]	; (801b548 <RadioTxPrbs+0x2c>)
 801b522:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b526:	2101      	movs	r1, #1
 801b528:	4618      	mov	r0, r3
 801b52a:	f001 fcdb 	bl	801cee4 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b52e:	4b07      	ldr	r3, [pc, #28]	; (801b54c <RadioTxPrbs+0x30>)
 801b530:	212d      	movs	r1, #45	; 0x2d
 801b532:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b536:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b538:	f000 ff1f 	bl	801c37a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b53c:	4804      	ldr	r0, [pc, #16]	; (801b550 <RadioTxPrbs+0x34>)
 801b53e:	f000 fe75 	bl	801c22c <SUBGRF_SetTx>
}
 801b542:	bf00      	nop
 801b544:	bd80      	pop	{r7, pc}
 801b546:	bf00      	nop
 801b548:	200017a4 	.word	0x200017a4
 801b54c:	0801aedf 	.word	0x0801aedf
 801b550:	000fffff 	.word	0x000fffff

0801b554 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b554:	b580      	push	{r7, lr}
 801b556:	b084      	sub	sp, #16
 801b558:	af00      	add	r7, sp, #0
 801b55a:	4603      	mov	r3, r0
 801b55c:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b55e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b562:	4618      	mov	r0, r3
 801b564:	f001 fce6 	bl	801cf34 <SUBGRF_SetRfTxPower>
 801b568:	4603      	mov	r3, r0
 801b56a:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b56c:	210e      	movs	r1, #14
 801b56e:	f640 101f 	movw	r0, #2335	; 0x91f
 801b572:	f001 fbc3 	bl	801ccfc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b576:	7bfb      	ldrb	r3, [r7, #15]
 801b578:	2101      	movs	r1, #1
 801b57a:	4618      	mov	r0, r3
 801b57c:	f001 fcb2 	bl	801cee4 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b580:	f000 fef2 	bl	801c368 <SUBGRF_SetTxContinuousWave>
}
 801b584:	bf00      	nop
 801b586:	3710      	adds	r7, #16
 801b588:	46bd      	mov	sp, r7
 801b58a:	bd80      	pop	{r7, pc}

0801b58c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b58c:	b480      	push	{r7}
 801b58e:	b089      	sub	sp, #36	; 0x24
 801b590:	af00      	add	r7, sp, #0
 801b592:	60f8      	str	r0, [r7, #12]
 801b594:	60b9      	str	r1, [r7, #8]
 801b596:	4613      	mov	r3, r2
 801b598:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b59a:	2300      	movs	r3, #0
 801b59c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b59e:	2300      	movs	r3, #0
 801b5a0:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b5a2:	2300      	movs	r3, #0
 801b5a4:	61bb      	str	r3, [r7, #24]
 801b5a6:	e011      	b.n	801b5cc <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b5a8:	69bb      	ldr	r3, [r7, #24]
 801b5aa:	68ba      	ldr	r2, [r7, #8]
 801b5ac:	4413      	add	r3, r2
 801b5ae:	781a      	ldrb	r2, [r3, #0]
 801b5b0:	69bb      	ldr	r3, [r7, #24]
 801b5b2:	68b9      	ldr	r1, [r7, #8]
 801b5b4:	440b      	add	r3, r1
 801b5b6:	43d2      	mvns	r2, r2
 801b5b8:	b2d2      	uxtb	r2, r2
 801b5ba:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b5bc:	69bb      	ldr	r3, [r7, #24]
 801b5be:	68fa      	ldr	r2, [r7, #12]
 801b5c0:	4413      	add	r3, r2
 801b5c2:	2200      	movs	r2, #0
 801b5c4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b5c6:	69bb      	ldr	r3, [r7, #24]
 801b5c8:	3301      	adds	r3, #1
 801b5ca:	61bb      	str	r3, [r7, #24]
 801b5cc:	79fb      	ldrb	r3, [r7, #7]
 801b5ce:	69ba      	ldr	r2, [r7, #24]
 801b5d0:	429a      	cmp	r2, r3
 801b5d2:	dbe9      	blt.n	801b5a8 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b5d4:	2300      	movs	r3, #0
 801b5d6:	61bb      	str	r3, [r7, #24]
 801b5d8:	e049      	b.n	801b66e <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b5da:	69bb      	ldr	r3, [r7, #24]
 801b5dc:	425a      	negs	r2, r3
 801b5de:	f003 0307 	and.w	r3, r3, #7
 801b5e2:	f002 0207 	and.w	r2, r2, #7
 801b5e6:	bf58      	it	pl
 801b5e8:	4253      	negpl	r3, r2
 801b5ea:	b2db      	uxtb	r3, r3
 801b5ec:	f1c3 0307 	rsb	r3, r3, #7
 801b5f0:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	2b00      	cmp	r3, #0
 801b5f6:	da00      	bge.n	801b5fa <payload_integration+0x6e>
 801b5f8:	3307      	adds	r3, #7
 801b5fa:	10db      	asrs	r3, r3, #3
 801b5fc:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b5fe:	69bb      	ldr	r3, [r7, #24]
 801b600:	3301      	adds	r3, #1
 801b602:	425a      	negs	r2, r3
 801b604:	f003 0307 	and.w	r3, r3, #7
 801b608:	f002 0207 	and.w	r2, r2, #7
 801b60c:	bf58      	it	pl
 801b60e:	4253      	negpl	r3, r2
 801b610:	b2db      	uxtb	r3, r3
 801b612:	f1c3 0307 	rsb	r3, r3, #7
 801b616:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b618:	69bb      	ldr	r3, [r7, #24]
 801b61a:	3301      	adds	r3, #1
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	da00      	bge.n	801b622 <payload_integration+0x96>
 801b620:	3307      	adds	r3, #7
 801b622:	10db      	asrs	r3, r3, #3
 801b624:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b626:	7dbb      	ldrb	r3, [r7, #22]
 801b628:	68ba      	ldr	r2, [r7, #8]
 801b62a:	4413      	add	r3, r2
 801b62c:	781b      	ldrb	r3, [r3, #0]
 801b62e:	461a      	mov	r2, r3
 801b630:	7dfb      	ldrb	r3, [r7, #23]
 801b632:	fa42 f303 	asr.w	r3, r2, r3
 801b636:	b2db      	uxtb	r3, r3
 801b638:	f003 0301 	and.w	r3, r3, #1
 801b63c:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b63e:	7ffa      	ldrb	r2, [r7, #31]
 801b640:	7cfb      	ldrb	r3, [r7, #19]
 801b642:	4053      	eors	r3, r2
 801b644:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b646:	7d3b      	ldrb	r3, [r7, #20]
 801b648:	68fa      	ldr	r2, [r7, #12]
 801b64a:	4413      	add	r3, r2
 801b64c:	781b      	ldrb	r3, [r3, #0]
 801b64e:	b25a      	sxtb	r2, r3
 801b650:	7ff9      	ldrb	r1, [r7, #31]
 801b652:	7d7b      	ldrb	r3, [r7, #21]
 801b654:	fa01 f303 	lsl.w	r3, r1, r3
 801b658:	b25b      	sxtb	r3, r3
 801b65a:	4313      	orrs	r3, r2
 801b65c:	b259      	sxtb	r1, r3
 801b65e:	7d3b      	ldrb	r3, [r7, #20]
 801b660:	68fa      	ldr	r2, [r7, #12]
 801b662:	4413      	add	r3, r2
 801b664:	b2ca      	uxtb	r2, r1
 801b666:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b668:	69bb      	ldr	r3, [r7, #24]
 801b66a:	3301      	adds	r3, #1
 801b66c:	61bb      	str	r3, [r7, #24]
 801b66e:	79fb      	ldrb	r3, [r7, #7]
 801b670:	00db      	lsls	r3, r3, #3
 801b672:	69ba      	ldr	r2, [r7, #24]
 801b674:	429a      	cmp	r2, r3
 801b676:	dbb0      	blt.n	801b5da <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b678:	7ffb      	ldrb	r3, [r7, #31]
 801b67a:	01db      	lsls	r3, r3, #7
 801b67c:	b25a      	sxtb	r2, r3
 801b67e:	7ffb      	ldrb	r3, [r7, #31]
 801b680:	019b      	lsls	r3, r3, #6
 801b682:	b25b      	sxtb	r3, r3
 801b684:	4313      	orrs	r3, r2
 801b686:	b25b      	sxtb	r3, r3
 801b688:	7ffa      	ldrb	r2, [r7, #31]
 801b68a:	2a00      	cmp	r2, #0
 801b68c:	d101      	bne.n	801b692 <payload_integration+0x106>
 801b68e:	2220      	movs	r2, #32
 801b690:	e000      	b.n	801b694 <payload_integration+0x108>
 801b692:	2200      	movs	r2, #0
 801b694:	4313      	orrs	r3, r2
 801b696:	b259      	sxtb	r1, r3
 801b698:	79fb      	ldrb	r3, [r7, #7]
 801b69a:	68fa      	ldr	r2, [r7, #12]
 801b69c:	4413      	add	r3, r2
 801b69e:	b2ca      	uxtb	r2, r1
 801b6a0:	701a      	strb	r2, [r3, #0]
}
 801b6a2:	bf00      	nop
 801b6a4:	3724      	adds	r7, #36	; 0x24
 801b6a6:	46bd      	mov	sp, r7
 801b6a8:	bc80      	pop	{r7}
 801b6aa:	4770      	bx	lr

0801b6ac <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b08c      	sub	sp, #48	; 0x30
 801b6b0:	af00      	add	r7, sp, #0
 801b6b2:	60b9      	str	r1, [r7, #8]
 801b6b4:	607a      	str	r2, [r7, #4]
 801b6b6:	603b      	str	r3, [r7, #0]
 801b6b8:	4603      	mov	r3, r0
 801b6ba:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b6bc:	2300      	movs	r3, #0
 801b6be:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	623b      	str	r3, [r7, #32]
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b6c8:	f001 fdff 	bl	801d2ca <RFW_DeInit>

    if( rxContinuous != 0 )
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d001      	beq.n	801b6d6 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	bf14      	ite	ne
 801b6dc:	2301      	movne	r3, #1
 801b6de:	2300      	moveq	r3, #0
 801b6e0:	b2da      	uxtb	r2, r3
 801b6e2:	4ba3      	ldr	r3, [pc, #652]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b6e4:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b6e6:	7bfb      	ldrb	r3, [r7, #15]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d003      	beq.n	801b6f4 <RadioSetRxGenericConfig+0x48>
 801b6ec:	2b01      	cmp	r3, #1
 801b6ee:	f000 80dc 	beq.w	801b8aa <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b6f2:	e194      	b.n	801ba1e <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	689b      	ldr	r3, [r3, #8]
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d003      	beq.n	801b704 <RadioSetRxGenericConfig+0x58>
 801b6fc:	68bb      	ldr	r3, [r7, #8]
 801b6fe:	68db      	ldr	r3, [r3, #12]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d102      	bne.n	801b70a <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b704:	f04f 33ff 	mov.w	r3, #4294967295
 801b708:	e18a      	b.n	801ba20 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b70a:	68bb      	ldr	r3, [r7, #8]
 801b70c:	7f9b      	ldrb	r3, [r3, #30]
 801b70e:	2b08      	cmp	r3, #8
 801b710:	d902      	bls.n	801b718 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b712:	f04f 33ff 	mov.w	r3, #4294967295
 801b716:	e183      	b.n	801ba20 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b718:	68bb      	ldr	r3, [r7, #8]
 801b71a:	6919      	ldr	r1, [r3, #16]
 801b71c:	68bb      	ldr	r3, [r7, #8]
 801b71e:	7f9b      	ldrb	r3, [r3, #30]
 801b720:	b29a      	uxth	r2, r3
 801b722:	f107 0320 	add.w	r3, r7, #32
 801b726:	4618      	mov	r0, r3
 801b728:	f001 fec2 	bl	801d4b0 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b72c:	68bb      	ldr	r3, [r7, #8]
 801b72e:	681b      	ldr	r3, [r3, #0]
 801b730:	2b00      	cmp	r3, #0
 801b732:	bf14      	ite	ne
 801b734:	2301      	movne	r3, #1
 801b736:	2300      	moveq	r3, #0
 801b738:	b2db      	uxtb	r3, r3
 801b73a:	4618      	mov	r0, r3
 801b73c:	f000 fe26 	bl	801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b740:	4b8b      	ldr	r3, [pc, #556]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b742:	2200      	movs	r2, #0
 801b744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b748:	68bb      	ldr	r3, [r7, #8]
 801b74a:	689b      	ldr	r3, [r3, #8]
 801b74c:	4a88      	ldr	r2, [pc, #544]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b74e:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b750:	68bb      	ldr	r3, [r7, #8]
 801b752:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b756:	4b86      	ldr	r3, [pc, #536]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b75c:	68bb      	ldr	r3, [r7, #8]
 801b75e:	685b      	ldr	r3, [r3, #4]
 801b760:	4618      	mov	r0, r3
 801b762:	f001 fce5 	bl	801d130 <SUBGRF_GetFskBandwidthRegValue>
 801b766:	4603      	mov	r3, r0
 801b768:	461a      	mov	r2, r3
 801b76a:	4b81      	ldr	r3, [pc, #516]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b76c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b770:	4b7f      	ldr	r3, [pc, #508]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b772:	2200      	movs	r2, #0
 801b774:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b776:	68bb      	ldr	r3, [r7, #8]
 801b778:	68db      	ldr	r3, [r3, #12]
 801b77a:	b29b      	uxth	r3, r3
 801b77c:	00db      	lsls	r3, r3, #3
 801b77e:	b29a      	uxth	r2, r3
 801b780:	4b7b      	ldr	r3, [pc, #492]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b782:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b784:	68bb      	ldr	r3, [r7, #8]
 801b786:	7fda      	ldrb	r2, [r3, #31]
 801b788:	4b79      	ldr	r3, [pc, #484]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b78a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b78c:	68bb      	ldr	r3, [r7, #8]
 801b78e:	7f9b      	ldrb	r3, [r3, #30]
 801b790:	00db      	lsls	r3, r3, #3
 801b792:	b2da      	uxtb	r2, r3
 801b794:	4b76      	ldr	r3, [pc, #472]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b796:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b798:	68bb      	ldr	r3, [r7, #8]
 801b79a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b79e:	4b74      	ldr	r3, [pc, #464]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b7a0:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b7a2:	68bb      	ldr	r3, [r7, #8]
 801b7a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7a8:	2b00      	cmp	r3, #0
 801b7aa:	d105      	bne.n	801b7b8 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	695b      	ldr	r3, [r3, #20]
 801b7b0:	b2da      	uxtb	r2, r3
 801b7b2:	4b6f      	ldr	r3, [pc, #444]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b7b4:	759a      	strb	r2, [r3, #22]
 801b7b6:	e00b      	b.n	801b7d0 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7be:	2b02      	cmp	r3, #2
 801b7c0:	d103      	bne.n	801b7ca <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7c2:	4b6b      	ldr	r3, [pc, #428]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b7c4:	22ff      	movs	r2, #255	; 0xff
 801b7c6:	759a      	strb	r2, [r3, #22]
 801b7c8:	e002      	b.n	801b7d0 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7ca:	4b69      	ldr	r3, [pc, #420]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b7cc:	22ff      	movs	r2, #255	; 0xff
 801b7ce:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b7d6:	2b02      	cmp	r3, #2
 801b7d8:	d004      	beq.n	801b7e4 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b7da:	68bb      	ldr	r3, [r7, #8]
 801b7dc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7e0:	2b02      	cmp	r3, #2
 801b7e2:	d12d      	bne.n	801b840 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b7e4:	68bb      	ldr	r3, [r7, #8]
 801b7e6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b7ea:	2bf1      	cmp	r3, #241	; 0xf1
 801b7ec:	d00c      	beq.n	801b808 <RadioSetRxGenericConfig+0x15c>
 801b7ee:	68bb      	ldr	r3, [r7, #8]
 801b7f0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b7f4:	2bf2      	cmp	r3, #242	; 0xf2
 801b7f6:	d007      	beq.n	801b808 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b7f8:	68bb      	ldr	r3, [r7, #8]
 801b7fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b7fe:	2b01      	cmp	r3, #1
 801b800:	d002      	beq.n	801b808 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b802:	f04f 33ff 	mov.w	r3, #4294967295
 801b806:	e10b      	b.n	801ba20 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b808:	2300      	movs	r3, #0
 801b80a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b80c:	68bb      	ldr	r3, [r7, #8]
 801b80e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b810:	4b58      	ldr	r3, [pc, #352]	; (801b974 <RadioSetRxGenericConfig+0x2c8>)
 801b812:	6819      	ldr	r1, [r3, #0]
 801b814:	f107 0314 	add.w	r3, r7, #20
 801b818:	4a57      	ldr	r2, [pc, #348]	; (801b978 <RadioSetRxGenericConfig+0x2cc>)
 801b81a:	4618      	mov	r0, r3
 801b81c:	f001 fd48 	bl	801d2b0 <RFW_Init>
 801b820:	4603      	mov	r3, r0
 801b822:	2b00      	cmp	r3, #0
 801b824:	d002      	beq.n	801b82c <RadioSetRxGenericConfig+0x180>
                return -1;
 801b826:	f04f 33ff 	mov.w	r3, #4294967295
 801b82a:	e0f9      	b.n	801ba20 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b82c:	4b50      	ldr	r3, [pc, #320]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b82e:	2200      	movs	r2, #0
 801b830:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b832:	4b4f      	ldr	r3, [pc, #316]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b834:	2201      	movs	r2, #1
 801b836:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b838:	4b4d      	ldr	r3, [pc, #308]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b83a:	2200      	movs	r2, #0
 801b83c:	755a      	strb	r2, [r3, #21]
        {
 801b83e:	e00e      	b.n	801b85e <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b840:	68bb      	ldr	r3, [r7, #8]
 801b842:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b846:	4b4a      	ldr	r3, [pc, #296]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b848:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b84a:	68bb      	ldr	r3, [r7, #8]
 801b84c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b850:	4b47      	ldr	r3, [pc, #284]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b852:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b854:	68bb      	ldr	r3, [r7, #8]
 801b856:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b85a:	4b45      	ldr	r3, [pc, #276]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b85c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b85e:	f7ff fa3c 	bl	801acda <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b862:	2000      	movs	r0, #0
 801b864:	f7fe fbd0 	bl	801a008 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b868:	4844      	ldr	r0, [pc, #272]	; (801b97c <RadioSetRxGenericConfig+0x2d0>)
 801b86a:	f001 f82d 	bl	801c8c8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b86e:	4844      	ldr	r0, [pc, #272]	; (801b980 <RadioSetRxGenericConfig+0x2d4>)
 801b870:	f001 f8fc 	bl	801ca6c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b874:	f107 0320 	add.w	r3, r7, #32
 801b878:	4618      	mov	r0, r3
 801b87a:	f000 fbc0 	bl	801bffe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b87e:	68bb      	ldr	r3, [r7, #8]
 801b880:	8b9b      	ldrh	r3, [r3, #28]
 801b882:	4618      	mov	r0, r3
 801b884:	f000 fc0a 	bl	801c09c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b888:	68bb      	ldr	r3, [r7, #8]
 801b88a:	8b1b      	ldrh	r3, [r3, #24]
 801b88c:	4618      	mov	r0, r3
 801b88e:	f000 fbe5 	bl	801c05c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b892:	683b      	ldr	r3, [r7, #0]
 801b894:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b898:	fb03 f202 	mul.w	r2, r3, r2
 801b89c:	68bb      	ldr	r3, [r7, #8]
 801b89e:	689b      	ldr	r3, [r3, #8]
 801b8a0:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8a4:	4a32      	ldr	r2, [pc, #200]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b8a6:	6093      	str	r3, [r2, #8]
        break;
 801b8a8:	e0b9      	b.n	801ba1e <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b8aa:	68bb      	ldr	r3, [r7, #8]
 801b8ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b8ae:	2b00      	cmp	r3, #0
 801b8b0:	d102      	bne.n	801b8b8 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b8b2:	f04f 33ff 	mov.w	r3, #4294967295
 801b8b6:	e0b3      	b.n	801ba20 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b8b8:	68bb      	ldr	r3, [r7, #8]
 801b8ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b8be:	2b01      	cmp	r3, #1
 801b8c0:	d104      	bne.n	801b8cc <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	695b      	ldr	r3, [r3, #20]
 801b8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b8ca:	e002      	b.n	801b8d2 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b8cc:	23ff      	movs	r3, #255	; 0xff
 801b8ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b8d2:	68bb      	ldr	r3, [r7, #8]
 801b8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	bf14      	ite	ne
 801b8da:	2301      	movne	r3, #1
 801b8dc:	2300      	moveq	r3, #0
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	f000 fd53 	bl	801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b8e6:	683b      	ldr	r3, [r7, #0]
 801b8e8:	b2db      	uxtb	r3, r3
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f000 fd5d 	bl	801c3aa <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b8f0:	4b1f      	ldr	r3, [pc, #124]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b8f2:	2201      	movs	r2, #1
 801b8f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b8f8:	68bb      	ldr	r3, [r7, #8]
 801b8fa:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b8fe:	4b1c      	ldr	r3, [pc, #112]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b904:	68bb      	ldr	r3, [r7, #8]
 801b906:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b90a:	4b19      	ldr	r3, [pc, #100]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b90c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b916:	4b16      	ldr	r3, [pc, #88]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b918:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b922:	2b02      	cmp	r3, #2
 801b924:	d010      	beq.n	801b948 <RadioSetRxGenericConfig+0x29c>
 801b926:	2b02      	cmp	r3, #2
 801b928:	dc2c      	bgt.n	801b984 <RadioSetRxGenericConfig+0x2d8>
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d002      	beq.n	801b934 <RadioSetRxGenericConfig+0x288>
 801b92e:	2b01      	cmp	r3, #1
 801b930:	d005      	beq.n	801b93e <RadioSetRxGenericConfig+0x292>
            break;
 801b932:	e027      	b.n	801b984 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b934:	4b0e      	ldr	r3, [pc, #56]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b936:	2200      	movs	r2, #0
 801b938:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b93c:	e023      	b.n	801b986 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b93e:	4b0c      	ldr	r3, [pc, #48]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b940:	2201      	movs	r2, #1
 801b942:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b946:	e01e      	b.n	801b986 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b948:	68bb      	ldr	r3, [r7, #8]
 801b94a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b94e:	2b0b      	cmp	r3, #11
 801b950:	d004      	beq.n	801b95c <RadioSetRxGenericConfig+0x2b0>
 801b952:	68bb      	ldr	r3, [r7, #8]
 801b954:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b958:	2b0c      	cmp	r3, #12
 801b95a:	d104      	bne.n	801b966 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b95c:	4b04      	ldr	r3, [pc, #16]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b95e:	2201      	movs	r2, #1
 801b960:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b964:	e00f      	b.n	801b986 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b966:	4b02      	ldr	r3, [pc, #8]	; (801b970 <RadioSetRxGenericConfig+0x2c4>)
 801b968:	2200      	movs	r2, #0
 801b96a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b96e:	e00a      	b.n	801b986 <RadioSetRxGenericConfig+0x2da>
 801b970:	200017a4 	.word	0x200017a4
 801b974:	200017a0 	.word	0x200017a0
 801b978:	20001818 	.word	0x20001818
 801b97c:	200017dc 	.word	0x200017dc
 801b980:	200017b2 	.word	0x200017b2
            break;
 801b984:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b986:	4b28      	ldr	r3, [pc, #160]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b988:	2201      	movs	r2, #1
 801b98a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b98c:	68bb      	ldr	r3, [r7, #8]
 801b98e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b990:	4b25      	ldr	r3, [pc, #148]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b992:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b99a:	4b23      	ldr	r3, [pc, #140]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b99c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b99e:	4a22      	ldr	r2, [pc, #136]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b9a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9a4:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b9a6:	68bb      	ldr	r3, [r7, #8]
 801b9a8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b9ac:	4b1e      	ldr	r3, [pc, #120]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b9ae:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b9b2:	68bb      	ldr	r3, [r7, #8]
 801b9b4:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b9b8:	4b1b      	ldr	r3, [pc, #108]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b9ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b9be:	f7ff f98c 	bl	801acda <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b9c2:	2001      	movs	r0, #1
 801b9c4:	f7fe fb20 	bl	801a008 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9c8:	4818      	ldr	r0, [pc, #96]	; (801ba2c <RadioSetRxGenericConfig+0x380>)
 801b9ca:	f000 ff7d 	bl	801c8c8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b9ce:	4818      	ldr	r0, [pc, #96]	; (801ba30 <RadioSetRxGenericConfig+0x384>)
 801b9d0:	f001 f84c 	bl	801ca6c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b9d4:	4b14      	ldr	r3, [pc, #80]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801b9d6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b9da:	2b01      	cmp	r3, #1
 801b9dc:	d10d      	bne.n	801b9fa <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b9de:	f240 7036 	movw	r0, #1846	; 0x736
 801b9e2:	f001 f99f 	bl	801cd24 <SUBGRF_ReadRegister>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	f023 0304 	bic.w	r3, r3, #4
 801b9ec:	b2db      	uxtb	r3, r3
 801b9ee:	4619      	mov	r1, r3
 801b9f0:	f240 7036 	movw	r0, #1846	; 0x736
 801b9f4:	f001 f982 	bl	801ccfc <SUBGRF_WriteRegister>
 801b9f8:	e00c      	b.n	801ba14 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801b9fa:	f240 7036 	movw	r0, #1846	; 0x736
 801b9fe:	f001 f991 	bl	801cd24 <SUBGRF_ReadRegister>
 801ba02:	4603      	mov	r3, r0
 801ba04:	f043 0304 	orr.w	r3, r3, #4
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	4619      	mov	r1, r3
 801ba0c:	f240 7036 	movw	r0, #1846	; 0x736
 801ba10:	f001 f974 	bl	801ccfc <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ba14:	4b04      	ldr	r3, [pc, #16]	; (801ba28 <RadioSetRxGenericConfig+0x37c>)
 801ba16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba1a:	609a      	str	r2, [r3, #8]
        break;
 801ba1c:	bf00      	nop
    }
    return status;
 801ba1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba20:	4618      	mov	r0, r3
 801ba22:	3730      	adds	r7, #48	; 0x30
 801ba24:	46bd      	mov	sp, r7
 801ba26:	bd80      	pop	{r7, pc}
 801ba28:	200017a4 	.word	0x200017a4
 801ba2c:	200017dc 	.word	0x200017dc
 801ba30:	200017b2 	.word	0x200017b2

0801ba34 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ba34:	b580      	push	{r7, lr}
 801ba36:	b08e      	sub	sp, #56	; 0x38
 801ba38:	af00      	add	r7, sp, #0
 801ba3a:	60b9      	str	r1, [r7, #8]
 801ba3c:	607b      	str	r3, [r7, #4]
 801ba3e:	4603      	mov	r3, r0
 801ba40:	73fb      	strb	r3, [r7, #15]
 801ba42:	4613      	mov	r3, r2
 801ba44:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ba46:	2300      	movs	r3, #0
 801ba48:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ba4e:	f001 fc3c 	bl	801d2ca <RFW_DeInit>
    switch( modem )
 801ba52:	7bfb      	ldrb	r3, [r7, #15]
 801ba54:	2b03      	cmp	r3, #3
 801ba56:	f200 8204 	bhi.w	801be62 <RadioSetTxGenericConfig+0x42e>
 801ba5a:	a201      	add	r2, pc, #4	; (adr r2, 801ba60 <RadioSetTxGenericConfig+0x2c>)
 801ba5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba60:	0801bbe5 	.word	0x0801bbe5
 801ba64:	0801bd2d 	.word	0x0801bd2d
 801ba68:	0801be25 	.word	0x0801be25
 801ba6c:	0801ba71 	.word	0x0801ba71
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ba70:	68bb      	ldr	r3, [r7, #8]
 801ba72:	7c9b      	ldrb	r3, [r3, #18]
 801ba74:	2b08      	cmp	r3, #8
 801ba76:	d902      	bls.n	801ba7e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ba78:	f04f 33ff 	mov.w	r3, #4294967295
 801ba7c:	e206      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ba7e:	68bb      	ldr	r3, [r7, #8]
 801ba80:	6899      	ldr	r1, [r3, #8]
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	7c9b      	ldrb	r3, [r3, #18]
 801ba86:	b29a      	uxth	r2, r3
 801ba88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801ba8c:	4618      	mov	r0, r3
 801ba8e:	f001 fd0f 	bl	801d4b0 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801ba92:	68bb      	ldr	r3, [r7, #8]
 801ba94:	681b      	ldr	r3, [r3, #0]
 801ba96:	2b00      	cmp	r3, #0
 801ba98:	d102      	bne.n	801baa0 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801ba9a:	f04f 33ff 	mov.w	r3, #4294967295
 801ba9e:	e1f5      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801baa0:	68bb      	ldr	r3, [r7, #8]
 801baa2:	681b      	ldr	r3, [r3, #0]
 801baa4:	f242 7210 	movw	r2, #10000	; 0x2710
 801baa8:	4293      	cmp	r3, r2
 801baaa:	d813      	bhi.n	801bad4 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801baac:	2302      	movs	r3, #2
 801baae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801bab2:	4b99      	ldr	r3, [pc, #612]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bab4:	2203      	movs	r2, #3
 801bab6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bab8:	4b97      	ldr	r3, [pc, #604]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801baba:	2203      	movs	r2, #3
 801babc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bac0:	68bb      	ldr	r3, [r7, #8]
 801bac2:	681b      	ldr	r3, [r3, #0]
 801bac4:	4a94      	ldr	r2, [pc, #592]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bac6:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bac8:	68bb      	ldr	r3, [r7, #8]
 801baca:	7cda      	ldrb	r2, [r3, #19]
 801bacc:	4b92      	ldr	r3, [pc, #584]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bace:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801bad2:	e017      	b.n	801bb04 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801bad4:	2300      	movs	r3, #0
 801bad6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bada:	4b8f      	ldr	r3, [pc, #572]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801badc:	2200      	movs	r2, #0
 801bade:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bae0:	4b8d      	ldr	r3, [pc, #564]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bae2:	2200      	movs	r2, #0
 801bae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bae8:	68bb      	ldr	r3, [r7, #8]
 801baea:	681b      	ldr	r3, [r3, #0]
 801baec:	4a8a      	ldr	r2, [pc, #552]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801baee:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801baf0:	68bb      	ldr	r3, [r7, #8]
 801baf2:	7cda      	ldrb	r2, [r3, #19]
 801baf4:	4b88      	ldr	r3, [pc, #544]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801baf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bafa:	68bb      	ldr	r3, [r7, #8]
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	089b      	lsrs	r3, r3, #2
 801bb00:	4a85      	ldr	r2, [pc, #532]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb02:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bb04:	68bb      	ldr	r3, [r7, #8]
 801bb06:	685b      	ldr	r3, [r3, #4]
 801bb08:	b29b      	uxth	r3, r3
 801bb0a:	00db      	lsls	r3, r3, #3
 801bb0c:	b29a      	uxth	r2, r3
 801bb0e:	4b82      	ldr	r3, [pc, #520]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb10:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bb12:	4b81      	ldr	r3, [pc, #516]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb14:	2204      	movs	r2, #4
 801bb16:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	7c9b      	ldrb	r3, [r3, #18]
 801bb1c:	00db      	lsls	r3, r3, #3
 801bb1e:	b2da      	uxtb	r2, r3
 801bb20:	4b7d      	ldr	r3, [pc, #500]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb22:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bb24:	4b7c      	ldr	r3, [pc, #496]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb26:	2200      	movs	r2, #0
 801bb28:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bb2a:	68bb      	ldr	r3, [r7, #8]
 801bb2c:	7d9b      	ldrb	r3, [r3, #22]
 801bb2e:	2b02      	cmp	r3, #2
 801bb30:	d003      	beq.n	801bb3a <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bb32:	68bb      	ldr	r3, [r7, #8]
 801bb34:	7d1b      	ldrb	r3, [r3, #20]
 801bb36:	2b02      	cmp	r3, #2
 801bb38:	d12b      	bne.n	801bb92 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bb3a:	68bb      	ldr	r3, [r7, #8]
 801bb3c:	7d5b      	ldrb	r3, [r3, #21]
 801bb3e:	2bf1      	cmp	r3, #241	; 0xf1
 801bb40:	d00a      	beq.n	801bb58 <RadioSetTxGenericConfig+0x124>
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	7d5b      	ldrb	r3, [r3, #21]
 801bb46:	2bf2      	cmp	r3, #242	; 0xf2
 801bb48:	d006      	beq.n	801bb58 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bb4a:	68bb      	ldr	r3, [r7, #8]
 801bb4c:	7d5b      	ldrb	r3, [r3, #21]
 801bb4e:	2b01      	cmp	r3, #1
 801bb50:	d002      	beq.n	801bb58 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bb52:	f04f 33ff 	mov.w	r3, #4294967295
 801bb56:	e199      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801bb58:	68bb      	ldr	r3, [r7, #8]
 801bb5a:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bb5c:	2301      	movs	r3, #1
 801bb5e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bb62:	4b6e      	ldr	r3, [pc, #440]	; (801bd1c <RadioSetTxGenericConfig+0x2e8>)
 801bb64:	6819      	ldr	r1, [r3, #0]
 801bb66:	f107 0320 	add.w	r3, r7, #32
 801bb6a:	4a6d      	ldr	r2, [pc, #436]	; (801bd20 <RadioSetTxGenericConfig+0x2ec>)
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	f001 fb9f 	bl	801d2b0 <RFW_Init>
 801bb72:	4603      	mov	r3, r0
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d002      	beq.n	801bb7e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bb78:	f04f 33ff 	mov.w	r3, #4294967295
 801bb7c:	e186      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bb7e:	4b66      	ldr	r3, [pc, #408]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb80:	2200      	movs	r2, #0
 801bb82:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bb84:	4b64      	ldr	r3, [pc, #400]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb86:	2201      	movs	r2, #1
 801bb88:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bb8a:	4b63      	ldr	r3, [pc, #396]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb8c:	2200      	movs	r2, #0
 801bb8e:	755a      	strb	r2, [r3, #21]
        {
 801bb90:	e00b      	b.n	801bbaa <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bb92:	68bb      	ldr	r3, [r7, #8]
 801bb94:	7d5a      	ldrb	r2, [r3, #21]
 801bb96:	4b60      	ldr	r3, [pc, #384]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bb98:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bb9a:	68bb      	ldr	r3, [r7, #8]
 801bb9c:	7d9a      	ldrb	r2, [r3, #22]
 801bb9e:	4b5e      	ldr	r3, [pc, #376]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bba0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bba2:	68bb      	ldr	r3, [r7, #8]
 801bba4:	7d1a      	ldrb	r2, [r3, #20]
 801bba6:	4b5c      	ldr	r3, [pc, #368]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bba8:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bbaa:	f7ff f896 	bl	801acda <RadioStandby>
        RadioSetModem( radio_modem );
 801bbae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f7fe fa28 	bl	801a008 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbb8:	485a      	ldr	r0, [pc, #360]	; (801bd24 <RadioSetTxGenericConfig+0x2f0>)
 801bbba:	f000 fe85 	bl	801c8c8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bbbe:	485a      	ldr	r0, [pc, #360]	; (801bd28 <RadioSetTxGenericConfig+0x2f4>)
 801bbc0:	f000 ff54 	bl	801ca6c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bbc4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bbc8:	4618      	mov	r0, r3
 801bbca:	f000 fa18 	bl	801bffe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bbce:	68bb      	ldr	r3, [r7, #8]
 801bbd0:	8a1b      	ldrh	r3, [r3, #16]
 801bbd2:	4618      	mov	r0, r3
 801bbd4:	f000 fa62 	bl	801c09c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	899b      	ldrh	r3, [r3, #12]
 801bbdc:	4618      	mov	r0, r3
 801bbde:	f000 fa3d 	bl	801c05c <SUBGRF_SetCrcPolynomial>
        break;
 801bbe2:	e13f      	b.n	801be64 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bbe4:	68bb      	ldr	r3, [r7, #8]
 801bbe6:	681b      	ldr	r3, [r3, #0]
 801bbe8:	2b00      	cmp	r3, #0
 801bbea:	d102      	bne.n	801bbf2 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bbec:	f04f 33ff 	mov.w	r3, #4294967295
 801bbf0:	e14c      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bbf2:	68bb      	ldr	r3, [r7, #8]
 801bbf4:	7c9b      	ldrb	r3, [r3, #18]
 801bbf6:	2b08      	cmp	r3, #8
 801bbf8:	d902      	bls.n	801bc00 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bbfa:	f04f 33ff 	mov.w	r3, #4294967295
 801bbfe:	e145      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bc00:	68bb      	ldr	r3, [r7, #8]
 801bc02:	6899      	ldr	r1, [r3, #8]
 801bc04:	68bb      	ldr	r3, [r7, #8]
 801bc06:	7c9b      	ldrb	r3, [r3, #18]
 801bc08:	b29a      	uxth	r2, r3
 801bc0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc0e:	4618      	mov	r0, r3
 801bc10:	f001 fc4e 	bl	801d4b0 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc14:	4b40      	ldr	r3, [pc, #256]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc16:	2200      	movs	r2, #0
 801bc18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bc1c:	68bb      	ldr	r3, [r7, #8]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	4a3d      	ldr	r2, [pc, #244]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc22:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bc24:	68bb      	ldr	r3, [r7, #8]
 801bc26:	7cda      	ldrb	r2, [r3, #19]
 801bc28:	4b3b      	ldr	r3, [pc, #236]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bc2e:	68bb      	ldr	r3, [r7, #8]
 801bc30:	699b      	ldr	r3, [r3, #24]
 801bc32:	4a39      	ldr	r2, [pc, #228]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc34:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc36:	4b38      	ldr	r3, [pc, #224]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc38:	2200      	movs	r2, #0
 801bc3a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	685b      	ldr	r3, [r3, #4]
 801bc40:	b29b      	uxth	r3, r3
 801bc42:	00db      	lsls	r3, r3, #3
 801bc44:	b29a      	uxth	r2, r3
 801bc46:	4b34      	ldr	r3, [pc, #208]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc48:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bc4a:	4b33      	ldr	r3, [pc, #204]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc4c:	2204      	movs	r2, #4
 801bc4e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	7c9b      	ldrb	r3, [r3, #18]
 801bc54:	00db      	lsls	r3, r3, #3
 801bc56:	b2da      	uxtb	r2, r3
 801bc58:	4b2f      	ldr	r3, [pc, #188]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc5a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bc5c:	4b2e      	ldr	r3, [pc, #184]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bc5e:	2200      	movs	r2, #0
 801bc60:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bc62:	68bb      	ldr	r3, [r7, #8]
 801bc64:	7d9b      	ldrb	r3, [r3, #22]
 801bc66:	2b02      	cmp	r3, #2
 801bc68:	d003      	beq.n	801bc72 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	7d1b      	ldrb	r3, [r3, #20]
 801bc6e:	2b02      	cmp	r3, #2
 801bc70:	d12a      	bne.n	801bcc8 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bc72:	68bb      	ldr	r3, [r7, #8]
 801bc74:	7d5b      	ldrb	r3, [r3, #21]
 801bc76:	2bf1      	cmp	r3, #241	; 0xf1
 801bc78:	d00a      	beq.n	801bc90 <RadioSetTxGenericConfig+0x25c>
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	7d5b      	ldrb	r3, [r3, #21]
 801bc7e:	2bf2      	cmp	r3, #242	; 0xf2
 801bc80:	d006      	beq.n	801bc90 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	7d5b      	ldrb	r3, [r3, #21]
 801bc86:	2b01      	cmp	r3, #1
 801bc88:	d002      	beq.n	801bc90 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bc8a:	f04f 33ff 	mov.w	r3, #4294967295
 801bc8e:	e0fd      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bc90:	2301      	movs	r3, #1
 801bc92:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bc94:	68bb      	ldr	r3, [r7, #8]
 801bc96:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bc98:	4b20      	ldr	r3, [pc, #128]	; (801bd1c <RadioSetTxGenericConfig+0x2e8>)
 801bc9a:	6819      	ldr	r1, [r3, #0]
 801bc9c:	f107 0314 	add.w	r3, r7, #20
 801bca0:	4a1f      	ldr	r2, [pc, #124]	; (801bd20 <RadioSetTxGenericConfig+0x2ec>)
 801bca2:	4618      	mov	r0, r3
 801bca4:	f001 fb04 	bl	801d2b0 <RFW_Init>
 801bca8:	4603      	mov	r3, r0
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d002      	beq.n	801bcb4 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bcae:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb2:	e0eb      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bcb4:	4b18      	ldr	r3, [pc, #96]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bcba:	4b17      	ldr	r3, [pc, #92]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcbc:	2201      	movs	r2, #1
 801bcbe:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bcc0:	4b15      	ldr	r3, [pc, #84]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcc2:	2200      	movs	r2, #0
 801bcc4:	755a      	strb	r2, [r3, #21]
        {
 801bcc6:	e00b      	b.n	801bce0 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bcc8:	68bb      	ldr	r3, [r7, #8]
 801bcca:	7d5a      	ldrb	r2, [r3, #21]
 801bccc:	4b12      	ldr	r3, [pc, #72]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcce:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bcd0:	68bb      	ldr	r3, [r7, #8]
 801bcd2:	7d9a      	ldrb	r2, [r3, #22]
 801bcd4:	4b10      	ldr	r3, [pc, #64]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcd6:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bcd8:	68bb      	ldr	r3, [r7, #8]
 801bcda:	7d1a      	ldrb	r2, [r3, #20]
 801bcdc:	4b0e      	ldr	r3, [pc, #56]	; (801bd18 <RadioSetTxGenericConfig+0x2e4>)
 801bcde:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bce0:	f7fe fffb 	bl	801acda <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bce4:	2000      	movs	r0, #0
 801bce6:	f7fe f98f 	bl	801a008 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bcea:	480e      	ldr	r0, [pc, #56]	; (801bd24 <RadioSetTxGenericConfig+0x2f0>)
 801bcec:	f000 fdec 	bl	801c8c8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bcf0:	480d      	ldr	r0, [pc, #52]	; (801bd28 <RadioSetTxGenericConfig+0x2f4>)
 801bcf2:	f000 febb 	bl	801ca6c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bcf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bcfa:	4618      	mov	r0, r3
 801bcfc:	f000 f97f 	bl	801bffe <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bd00:	68bb      	ldr	r3, [r7, #8]
 801bd02:	8a1b      	ldrh	r3, [r3, #16]
 801bd04:	4618      	mov	r0, r3
 801bd06:	f000 f9c9 	bl	801c09c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bd0a:	68bb      	ldr	r3, [r7, #8]
 801bd0c:	899b      	ldrh	r3, [r3, #12]
 801bd0e:	4618      	mov	r0, r3
 801bd10:	f000 f9a4 	bl	801c05c <SUBGRF_SetCrcPolynomial>
        break;
 801bd14:	e0a6      	b.n	801be64 <RadioSetTxGenericConfig+0x430>
 801bd16:	bf00      	nop
 801bd18:	200017a4 	.word	0x200017a4
 801bd1c:	200017a0 	.word	0x200017a0
 801bd20:	20001800 	.word	0x20001800
 801bd24:	200017dc 	.word	0x200017dc
 801bd28:	200017b2 	.word	0x200017b2
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd2c:	4b59      	ldr	r3, [pc, #356]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd2e:	2201      	movs	r2, #1
 801bd30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bd34:	68bb      	ldr	r3, [r7, #8]
 801bd36:	781a      	ldrb	r2, [r3, #0]
 801bd38:	4b56      	ldr	r3, [pc, #344]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bd3e:	68bb      	ldr	r3, [r7, #8]
 801bd40:	785a      	ldrb	r2, [r3, #1]
 801bd42:	4b54      	ldr	r3, [pc, #336]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bd48:	68bb      	ldr	r3, [r7, #8]
 801bd4a:	789a      	ldrb	r2, [r3, #2]
 801bd4c:	4b51      	ldr	r3, [pc, #324]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd4e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bd52:	68bb      	ldr	r3, [r7, #8]
 801bd54:	78db      	ldrb	r3, [r3, #3]
 801bd56:	2b02      	cmp	r3, #2
 801bd58:	d010      	beq.n	801bd7c <RadioSetTxGenericConfig+0x348>
 801bd5a:	2b02      	cmp	r3, #2
 801bd5c:	dc20      	bgt.n	801bda0 <RadioSetTxGenericConfig+0x36c>
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d002      	beq.n	801bd68 <RadioSetTxGenericConfig+0x334>
 801bd62:	2b01      	cmp	r3, #1
 801bd64:	d005      	beq.n	801bd72 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bd66:	e01b      	b.n	801bda0 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd68:	4b4a      	ldr	r3, [pc, #296]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd6a:	2200      	movs	r2, #0
 801bd6c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd70:	e017      	b.n	801bda2 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd72:	4b48      	ldr	r3, [pc, #288]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd74:	2201      	movs	r2, #1
 801bd76:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd7a:	e012      	b.n	801bda2 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bd7c:	68bb      	ldr	r3, [r7, #8]
 801bd7e:	781b      	ldrb	r3, [r3, #0]
 801bd80:	2b0b      	cmp	r3, #11
 801bd82:	d003      	beq.n	801bd8c <RadioSetTxGenericConfig+0x358>
 801bd84:	68bb      	ldr	r3, [r7, #8]
 801bd86:	781b      	ldrb	r3, [r3, #0]
 801bd88:	2b0c      	cmp	r3, #12
 801bd8a:	d104      	bne.n	801bd96 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd8c:	4b41      	ldr	r3, [pc, #260]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd8e:	2201      	movs	r2, #1
 801bd90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd94:	e005      	b.n	801bda2 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd96:	4b3f      	ldr	r3, [pc, #252]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bd98:	2200      	movs	r2, #0
 801bd9a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd9e:	e000      	b.n	801bda2 <RadioSetTxGenericConfig+0x36e>
            break;
 801bda0:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bda2:	4b3c      	ldr	r3, [pc, #240]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bda4:	2201      	movs	r2, #1
 801bda6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bda8:	68bb      	ldr	r3, [r7, #8]
 801bdaa:	889a      	ldrh	r2, [r3, #4]
 801bdac:	4b39      	ldr	r3, [pc, #228]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bdae:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bdb0:	68bb      	ldr	r3, [r7, #8]
 801bdb2:	799a      	ldrb	r2, [r3, #6]
 801bdb4:	4b37      	ldr	r3, [pc, #220]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bdb6:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bdb8:	68bb      	ldr	r3, [r7, #8]
 801bdba:	79da      	ldrb	r2, [r3, #7]
 801bdbc:	4b35      	ldr	r3, [pc, #212]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bdbe:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	7a1a      	ldrb	r2, [r3, #8]
 801bdc6:	4b33      	ldr	r3, [pc, #204]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bdc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801bdcc:	f7fe ff85 	bl	801acda <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bdd0:	2001      	movs	r0, #1
 801bdd2:	f7fe f919 	bl	801a008 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdd6:	4830      	ldr	r0, [pc, #192]	; (801be98 <RadioSetTxGenericConfig+0x464>)
 801bdd8:	f000 fd76 	bl	801c8c8 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bddc:	482f      	ldr	r0, [pc, #188]	; (801be9c <RadioSetTxGenericConfig+0x468>)
 801bdde:	f000 fe45 	bl	801ca6c <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801bde2:	4b2c      	ldr	r3, [pc, #176]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801bde4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801bde8:	2b06      	cmp	r3, #6
 801bdea:	d10d      	bne.n	801be08 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801bdec:	f640 0089 	movw	r0, #2185	; 0x889
 801bdf0:	f000 ff98 	bl	801cd24 <SUBGRF_ReadRegister>
 801bdf4:	4603      	mov	r3, r0
 801bdf6:	f023 0304 	bic.w	r3, r3, #4
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	4619      	mov	r1, r3
 801bdfe:	f640 0089 	movw	r0, #2185	; 0x889
 801be02:	f000 ff7b 	bl	801ccfc <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801be06:	e02d      	b.n	801be64 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801be08:	f640 0089 	movw	r0, #2185	; 0x889
 801be0c:	f000 ff8a 	bl	801cd24 <SUBGRF_ReadRegister>
 801be10:	4603      	mov	r3, r0
 801be12:	f043 0304 	orr.w	r3, r3, #4
 801be16:	b2db      	uxtb	r3, r3
 801be18:	4619      	mov	r1, r3
 801be1a:	f640 0089 	movw	r0, #2185	; 0x889
 801be1e:	f000 ff6d 	bl	801ccfc <SUBGRF_WriteRegister>
        break;
 801be22:	e01f      	b.n	801be64 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	681b      	ldr	r3, [r3, #0]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	d004      	beq.n	801be36 <RadioSetTxGenericConfig+0x402>
 801be2c:	68bb      	ldr	r3, [r7, #8]
 801be2e:	681b      	ldr	r3, [r3, #0]
 801be30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801be34:	d902      	bls.n	801be3c <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801be36:	f04f 33ff 	mov.w	r3, #4294967295
 801be3a:	e027      	b.n	801be8c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801be3c:	2003      	movs	r0, #3
 801be3e:	f7fe f8e3 	bl	801a008 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801be42:	4b14      	ldr	r3, [pc, #80]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be44:	2202      	movs	r2, #2
 801be46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801be4a:	68bb      	ldr	r3, [r7, #8]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	4a11      	ldr	r2, [pc, #68]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be50:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801be52:	4b10      	ldr	r3, [pc, #64]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be54:	2216      	movs	r2, #22
 801be56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be5a:	480f      	ldr	r0, [pc, #60]	; (801be98 <RadioSetTxGenericConfig+0x464>)
 801be5c:	f000 fd34 	bl	801c8c8 <SUBGRF_SetModulationParams>
        break;
 801be60:	e000      	b.n	801be64 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801be62:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801be64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be68:	4618      	mov	r0, r3
 801be6a:	f001 f863 	bl	801cf34 <SUBGRF_SetRfTxPower>
 801be6e:	4603      	mov	r3, r0
 801be70:	461a      	mov	r2, r3
 801be72:	4b08      	ldr	r3, [pc, #32]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be74:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be78:	4b06      	ldr	r3, [pc, #24]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be7a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be7e:	4618      	mov	r0, r3
 801be80:	f001 fa37 	bl	801d2f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be84:	4a03      	ldr	r2, [pc, #12]	; (801be94 <RadioSetTxGenericConfig+0x460>)
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	6053      	str	r3, [r2, #4]
    return 0;
 801be8a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801be8c:	4618      	mov	r0, r3
 801be8e:	3738      	adds	r7, #56	; 0x38
 801be90:	46bd      	mov	sp, r7
 801be92:	bd80      	pop	{r7, pc}
 801be94:	200017a4 	.word	0x200017a4
 801be98:	200017dc 	.word	0x200017dc
 801be9c:	200017b2 	.word	0x200017b2

0801bea0 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801bea0:	b480      	push	{r7}
 801bea2:	b085      	sub	sp, #20
 801bea4:	af00      	add	r7, sp, #0
 801bea6:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bea8:	2301      	movs	r3, #1
 801beaa:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801beac:	7bfb      	ldrb	r3, [r7, #15]
}
 801beae:	4618      	mov	r0, r3
 801beb0:	3714      	adds	r7, #20
 801beb2:	46bd      	mov	sp, r7
 801beb4:	bc80      	pop	{r7}
 801beb6:	4770      	bx	lr

0801beb8 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801beb8:	b480      	push	{r7}
 801beba:	b083      	sub	sp, #12
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
 801bec0:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bec2:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801bec4:	4618      	mov	r0, r3
 801bec6:	370c      	adds	r7, #12
 801bec8:	46bd      	mov	sp, r7
 801beca:	bc80      	pop	{r7}
 801becc:	4770      	bx	lr
	...

0801bed0 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bed0:	b580      	push	{r7, lr}
 801bed2:	b084      	sub	sp, #16
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d002      	beq.n	801bee4 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bede:	4a1d      	ldr	r2, [pc, #116]	; (801bf54 <SUBGRF_Init+0x84>)
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801bee4:	f7e6 fbe0 	bl	80026a8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bee8:	2002      	movs	r0, #2
 801beea:	f001 f8ff 	bl	801d0ec <Radio_SMPS_Set>

    ImageCalibrated = false;
 801beee:	4b1a      	ldr	r3, [pc, #104]	; (801bf58 <SUBGRF_Init+0x88>)
 801bef0:	2200      	movs	r2, #0
 801bef2:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bef4:	2000      	movs	r0, #0
 801bef6:	f000 f97d 	bl	801c1f4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801befa:	f7f1 ff1f 	bl	800dd3c <RBI_IsTCXO>
 801befe:	4603      	mov	r3, r0
 801bf00:	2b01      	cmp	r3, #1
 801bf02:	d10e      	bne.n	801bf22 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf04:	2140      	movs	r1, #64	; 0x40
 801bf06:	2001      	movs	r0, #1
 801bf08:	f000 fb82 	bl	801c610 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf0c:	2100      	movs	r1, #0
 801bf0e:	f640 1011 	movw	r0, #2321	; 0x911
 801bf12:	f000 fef3 	bl	801ccfc <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf16:	237f      	movs	r3, #127	; 0x7f
 801bf18:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf1a:	7b38      	ldrb	r0, [r7, #12]
 801bf1c:	f000 fa8b 	bl	801c436 <SUBGRF_Calibrate>
 801bf20:	e009      	b.n	801bf36 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf22:	2120      	movs	r1, #32
 801bf24:	f640 1011 	movw	r0, #2321	; 0x911
 801bf28:	f000 fee8 	bl	801ccfc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf2c:	2120      	movs	r1, #32
 801bf2e:	f640 1012 	movw	r0, #2322	; 0x912
 801bf32:	f000 fee3 	bl	801ccfc <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bf36:	210e      	movs	r1, #14
 801bf38:	f640 101f 	movw	r0, #2335	; 0x91f
 801bf3c:	f000 fede 	bl	801ccfc <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bf40:	f7f1 fee0 	bl	800dd04 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bf44:	4b05      	ldr	r3, [pc, #20]	; (801bf5c <SUBGRF_Init+0x8c>)
 801bf46:	2201      	movs	r2, #1
 801bf48:	701a      	strb	r2, [r3, #0]
}
 801bf4a:	bf00      	nop
 801bf4c:	3710      	adds	r7, #16
 801bf4e:	46bd      	mov	sp, r7
 801bf50:	bd80      	pop	{r7, pc}
 801bf52:	bf00      	nop
 801bf54:	2000183c 	.word	0x2000183c
 801bf58:	20001838 	.word	0x20001838
 801bf5c:	20001830 	.word	0x20001830

0801bf60 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bf60:	b480      	push	{r7}
 801bf62:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bf64:	4b02      	ldr	r3, [pc, #8]	; (801bf70 <SUBGRF_GetOperatingMode+0x10>)
 801bf66:	781b      	ldrb	r3, [r3, #0]
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	bc80      	pop	{r7}
 801bf6e:	4770      	bx	lr
 801bf70:	20001830 	.word	0x20001830

0801bf74 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b082      	sub	sp, #8
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	460b      	mov	r3, r1
 801bf7e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bf80:	78fb      	ldrb	r3, [r7, #3]
 801bf82:	461a      	mov	r2, r3
 801bf84:	6879      	ldr	r1, [r7, #4]
 801bf86:	2000      	movs	r0, #0
 801bf88:	f000 ff24 	bl	801cdd4 <SUBGRF_WriteBuffer>
}
 801bf8c:	bf00      	nop
 801bf8e:	3708      	adds	r7, #8
 801bf90:	46bd      	mov	sp, r7
 801bf92:	bd80      	pop	{r7, pc}

0801bf94 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bf94:	b580      	push	{r7, lr}
 801bf96:	b086      	sub	sp, #24
 801bf98:	af00      	add	r7, sp, #0
 801bf9a:	60f8      	str	r0, [r7, #12]
 801bf9c:	60b9      	str	r1, [r7, #8]
 801bf9e:	4613      	mov	r3, r2
 801bfa0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bfa2:	2300      	movs	r3, #0
 801bfa4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bfa6:	f107 0317 	add.w	r3, r7, #23
 801bfaa:	4619      	mov	r1, r3
 801bfac:	68b8      	ldr	r0, [r7, #8]
 801bfae:	f000 fe27 	bl	801cc00 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bfb2:	68bb      	ldr	r3, [r7, #8]
 801bfb4:	781b      	ldrb	r3, [r3, #0]
 801bfb6:	79fa      	ldrb	r2, [r7, #7]
 801bfb8:	429a      	cmp	r2, r3
 801bfba:	d201      	bcs.n	801bfc0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	e007      	b.n	801bfd0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bfc0:	7df8      	ldrb	r0, [r7, #23]
 801bfc2:	68bb      	ldr	r3, [r7, #8]
 801bfc4:	781b      	ldrb	r3, [r3, #0]
 801bfc6:	461a      	mov	r2, r3
 801bfc8:	68f9      	ldr	r1, [r7, #12]
 801bfca:	f000 ff25 	bl	801ce18 <SUBGRF_ReadBuffer>

    return 0;
 801bfce:	2300      	movs	r3, #0
}
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	3718      	adds	r7, #24
 801bfd4:	46bd      	mov	sp, r7
 801bfd6:	bd80      	pop	{r7, pc}

0801bfd8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bfd8:	b580      	push	{r7, lr}
 801bfda:	b084      	sub	sp, #16
 801bfdc:	af00      	add	r7, sp, #0
 801bfde:	60f8      	str	r0, [r7, #12]
 801bfe0:	460b      	mov	r3, r1
 801bfe2:	607a      	str	r2, [r7, #4]
 801bfe4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801bfe6:	7afb      	ldrb	r3, [r7, #11]
 801bfe8:	4619      	mov	r1, r3
 801bfea:	68f8      	ldr	r0, [r7, #12]
 801bfec:	f7ff ffc2 	bl	801bf74 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801bff0:	6878      	ldr	r0, [r7, #4]
 801bff2:	f000 f91b 	bl	801c22c <SUBGRF_SetTx>
}
 801bff6:	bf00      	nop
 801bff8:	3710      	adds	r7, #16
 801bffa:	46bd      	mov	sp, r7
 801bffc:	bd80      	pop	{r7, pc}

0801bffe <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801bffe:	b580      	push	{r7, lr}
 801c000:	b082      	sub	sp, #8
 801c002:	af00      	add	r7, sp, #0
 801c004:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c006:	2208      	movs	r2, #8
 801c008:	6879      	ldr	r1, [r7, #4]
 801c00a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c00e:	f000 fe9d 	bl	801cd4c <SUBGRF_WriteRegisters>
    return 0;
 801c012:	2300      	movs	r3, #0
}
 801c014:	4618      	mov	r0, r3
 801c016:	3708      	adds	r7, #8
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}

0801c01c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c01c:	b580      	push	{r7, lr}
 801c01e:	b084      	sub	sp, #16
 801c020:	af00      	add	r7, sp, #0
 801c022:	4603      	mov	r3, r0
 801c024:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c026:	88fb      	ldrh	r3, [r7, #6]
 801c028:	0a1b      	lsrs	r3, r3, #8
 801c02a:	b29b      	uxth	r3, r3
 801c02c:	b2db      	uxtb	r3, r3
 801c02e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c030:	88fb      	ldrh	r3, [r7, #6]
 801c032:	b2db      	uxtb	r3, r3
 801c034:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c036:	f000 fb6f 	bl	801c718 <SUBGRF_GetPacketType>
 801c03a:	4603      	mov	r3, r0
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d108      	bne.n	801c052 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c040:	f107 030c 	add.w	r3, r7, #12
 801c044:	2202      	movs	r2, #2
 801c046:	4619      	mov	r1, r3
 801c048:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c04c:	f000 fe7e 	bl	801cd4c <SUBGRF_WriteRegisters>
            break;
 801c050:	e000      	b.n	801c054 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c052:	bf00      	nop
    }
}
 801c054:	bf00      	nop
 801c056:	3710      	adds	r7, #16
 801c058:	46bd      	mov	sp, r7
 801c05a:	bd80      	pop	{r7, pc}

0801c05c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c05c:	b580      	push	{r7, lr}
 801c05e:	b084      	sub	sp, #16
 801c060:	af00      	add	r7, sp, #0
 801c062:	4603      	mov	r3, r0
 801c064:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c066:	88fb      	ldrh	r3, [r7, #6]
 801c068:	0a1b      	lsrs	r3, r3, #8
 801c06a:	b29b      	uxth	r3, r3
 801c06c:	b2db      	uxtb	r3, r3
 801c06e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c070:	88fb      	ldrh	r3, [r7, #6]
 801c072:	b2db      	uxtb	r3, r3
 801c074:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c076:	f000 fb4f 	bl	801c718 <SUBGRF_GetPacketType>
 801c07a:	4603      	mov	r3, r0
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	d108      	bne.n	801c092 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c080:	f107 030c 	add.w	r3, r7, #12
 801c084:	2202      	movs	r2, #2
 801c086:	4619      	mov	r1, r3
 801c088:	f240 60be 	movw	r0, #1726	; 0x6be
 801c08c:	f000 fe5e 	bl	801cd4c <SUBGRF_WriteRegisters>
            break;
 801c090:	e000      	b.n	801c094 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c092:	bf00      	nop
    }
}
 801c094:	bf00      	nop
 801c096:	3710      	adds	r7, #16
 801c098:	46bd      	mov	sp, r7
 801c09a:	bd80      	pop	{r7, pc}

0801c09c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c09c:	b580      	push	{r7, lr}
 801c09e:	b084      	sub	sp, #16
 801c0a0:	af00      	add	r7, sp, #0
 801c0a2:	4603      	mov	r3, r0
 801c0a4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c0a6:	2300      	movs	r3, #0
 801c0a8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c0aa:	f000 fb35 	bl	801c718 <SUBGRF_GetPacketType>
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d121      	bne.n	801c0f8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c0b4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0b8:	f000 fe34 	bl	801cd24 <SUBGRF_ReadRegister>
 801c0bc:	4603      	mov	r3, r0
 801c0be:	f023 0301 	bic.w	r3, r3, #1
 801c0c2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c0c4:	88fb      	ldrh	r3, [r7, #6]
 801c0c6:	0a1b      	lsrs	r3, r3, #8
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	b25b      	sxtb	r3, r3
 801c0cc:	f003 0301 	and.w	r3, r3, #1
 801c0d0:	b25a      	sxtb	r2, r3
 801c0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0d6:	4313      	orrs	r3, r2
 801c0d8:	b25b      	sxtb	r3, r3
 801c0da:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c0dc:	7bfb      	ldrb	r3, [r7, #15]
 801c0de:	4619      	mov	r1, r3
 801c0e0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0e4:	f000 fe0a 	bl	801ccfc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c0e8:	88fb      	ldrh	r3, [r7, #6]
 801c0ea:	b2db      	uxtb	r3, r3
 801c0ec:	4619      	mov	r1, r3
 801c0ee:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c0f2:	f000 fe03 	bl	801ccfc <SUBGRF_WriteRegister>
            break;
 801c0f6:	e000      	b.n	801c0fa <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c0f8:	bf00      	nop
    }
}
 801c0fa:	bf00      	nop
 801c0fc:	3710      	adds	r7, #16
 801c0fe:	46bd      	mov	sp, r7
 801c100:	bd80      	pop	{r7, pc}

0801c102 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c102:	b580      	push	{r7, lr}
 801c104:	b082      	sub	sp, #8
 801c106:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c108:	2300      	movs	r3, #0
 801c10a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c10c:	2300      	movs	r3, #0
 801c10e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c110:	2300      	movs	r3, #0
 801c112:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c114:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c118:	f000 fe04 	bl	801cd24 <SUBGRF_ReadRegister>
 801c11c:	4603      	mov	r3, r0
 801c11e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c120:	79fb      	ldrb	r3, [r7, #7]
 801c122:	f023 0301 	bic.w	r3, r3, #1
 801c126:	b2db      	uxtb	r3, r3
 801c128:	4619      	mov	r1, r3
 801c12a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c12e:	f000 fde5 	bl	801ccfc <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c132:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c136:	f000 fdf5 	bl	801cd24 <SUBGRF_ReadRegister>
 801c13a:	4603      	mov	r3, r0
 801c13c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c13e:	79bb      	ldrb	r3, [r7, #6]
 801c140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c144:	b2db      	uxtb	r3, r3
 801c146:	4619      	mov	r1, r3
 801c148:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c14c:	f000 fdd6 	bl	801ccfc <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c150:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c154:	f000 f88a 	bl	801c26c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c158:	463b      	mov	r3, r7
 801c15a:	2204      	movs	r2, #4
 801c15c:	4619      	mov	r1, r3
 801c15e:	f640 0019 	movw	r0, #2073	; 0x819
 801c162:	f000 fe15 	bl	801cd90 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c166:	2000      	movs	r0, #0
 801c168:	f000 f844 	bl	801c1f4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c16c:	79fb      	ldrb	r3, [r7, #7]
 801c16e:	4619      	mov	r1, r3
 801c170:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c174:	f000 fdc2 	bl	801ccfc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c178:	79bb      	ldrb	r3, [r7, #6]
 801c17a:	4619      	mov	r1, r3
 801c17c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c180:	f000 fdbc 	bl	801ccfc <SUBGRF_WriteRegister>

    return number;
 801c184:	683b      	ldr	r3, [r7, #0]
}
 801c186:	4618      	mov	r0, r3
 801c188:	3708      	adds	r7, #8
 801c18a:	46bd      	mov	sp, r7
 801c18c:	bd80      	pop	{r7, pc}
	...

0801c190 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b084      	sub	sp, #16
 801c194:	af00      	add	r7, sp, #0
 801c196:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c198:	2000      	movs	r0, #0
 801c19a:	f7f1 fdba 	bl	800dd12 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c19e:	2002      	movs	r0, #2
 801c1a0:	f000 ffa4 	bl	801d0ec <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1a4:	793b      	ldrb	r3, [r7, #4]
 801c1a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1aa:	b2db      	uxtb	r3, r3
 801c1ac:	009b      	lsls	r3, r3, #2
 801c1ae:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1b0:	793b      	ldrb	r3, [r7, #4]
 801c1b2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c1b6:	b2db      	uxtb	r3, r3
 801c1b8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1ba:	b25b      	sxtb	r3, r3
 801c1bc:	4313      	orrs	r3, r2
 801c1be:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c1c0:	793b      	ldrb	r3, [r7, #4]
 801c1c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1c6:	b2db      	uxtb	r3, r3
 801c1c8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1ca:	4313      	orrs	r3, r2
 801c1cc:	b25b      	sxtb	r3, r3
 801c1ce:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1d0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c1d2:	f107 030f 	add.w	r3, r7, #15
 801c1d6:	2201      	movs	r2, #1
 801c1d8:	4619      	mov	r1, r3
 801c1da:	2084      	movs	r0, #132	; 0x84
 801c1dc:	f000 fe3e 	bl	801ce5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c1e0:	4b03      	ldr	r3, [pc, #12]	; (801c1f0 <SUBGRF_SetSleep+0x60>)
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	701a      	strb	r2, [r3, #0]
}
 801c1e6:	bf00      	nop
 801c1e8:	3710      	adds	r7, #16
 801c1ea:	46bd      	mov	sp, r7
 801c1ec:	bd80      	pop	{r7, pc}
 801c1ee:	bf00      	nop
 801c1f0:	20001830 	.word	0x20001830

0801c1f4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c1f4:	b580      	push	{r7, lr}
 801c1f6:	b082      	sub	sp, #8
 801c1f8:	af00      	add	r7, sp, #0
 801c1fa:	4603      	mov	r3, r0
 801c1fc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c1fe:	1dfb      	adds	r3, r7, #7
 801c200:	2201      	movs	r2, #1
 801c202:	4619      	mov	r1, r3
 801c204:	2080      	movs	r0, #128	; 0x80
 801c206:	f000 fe29 	bl	801ce5c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c20a:	79fb      	ldrb	r3, [r7, #7]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d103      	bne.n	801c218 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c210:	4b05      	ldr	r3, [pc, #20]	; (801c228 <SUBGRF_SetStandby+0x34>)
 801c212:	2201      	movs	r2, #1
 801c214:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c216:	e002      	b.n	801c21e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c218:	4b03      	ldr	r3, [pc, #12]	; (801c228 <SUBGRF_SetStandby+0x34>)
 801c21a:	2202      	movs	r2, #2
 801c21c:	701a      	strb	r2, [r3, #0]
}
 801c21e:	bf00      	nop
 801c220:	3708      	adds	r7, #8
 801c222:	46bd      	mov	sp, r7
 801c224:	bd80      	pop	{r7, pc}
 801c226:	bf00      	nop
 801c228:	20001830 	.word	0x20001830

0801c22c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c22c:	b580      	push	{r7, lr}
 801c22e:	b084      	sub	sp, #16
 801c230:	af00      	add	r7, sp, #0
 801c232:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c234:	4b0c      	ldr	r3, [pc, #48]	; (801c268 <SUBGRF_SetTx+0x3c>)
 801c236:	2204      	movs	r2, #4
 801c238:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	0c1b      	lsrs	r3, r3, #16
 801c23e:	b2db      	uxtb	r3, r3
 801c240:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	0a1b      	lsrs	r3, r3, #8
 801c246:	b2db      	uxtb	r3, r3
 801c248:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c24a:	687b      	ldr	r3, [r7, #4]
 801c24c:	b2db      	uxtb	r3, r3
 801c24e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c250:	f107 030c 	add.w	r3, r7, #12
 801c254:	2203      	movs	r2, #3
 801c256:	4619      	mov	r1, r3
 801c258:	2083      	movs	r0, #131	; 0x83
 801c25a:	f000 fdff 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c25e:	bf00      	nop
 801c260:	3710      	adds	r7, #16
 801c262:	46bd      	mov	sp, r7
 801c264:	bd80      	pop	{r7, pc}
 801c266:	bf00      	nop
 801c268:	20001830 	.word	0x20001830

0801c26c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b084      	sub	sp, #16
 801c270:	af00      	add	r7, sp, #0
 801c272:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c274:	4b0c      	ldr	r3, [pc, #48]	; (801c2a8 <SUBGRF_SetRx+0x3c>)
 801c276:	2205      	movs	r2, #5
 801c278:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	0c1b      	lsrs	r3, r3, #16
 801c27e:	b2db      	uxtb	r3, r3
 801c280:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	0a1b      	lsrs	r3, r3, #8
 801c286:	b2db      	uxtb	r3, r3
 801c288:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c290:	f107 030c 	add.w	r3, r7, #12
 801c294:	2203      	movs	r2, #3
 801c296:	4619      	mov	r1, r3
 801c298:	2082      	movs	r0, #130	; 0x82
 801c29a:	f000 fddf 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c29e:	bf00      	nop
 801c2a0:	3710      	adds	r7, #16
 801c2a2:	46bd      	mov	sp, r7
 801c2a4:	bd80      	pop	{r7, pc}
 801c2a6:	bf00      	nop
 801c2a8:	20001830 	.word	0x20001830

0801c2ac <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c2ac:	b580      	push	{r7, lr}
 801c2ae:	b084      	sub	sp, #16
 801c2b0:	af00      	add	r7, sp, #0
 801c2b2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2b4:	4b0e      	ldr	r3, [pc, #56]	; (801c2f0 <SUBGRF_SetRxBoosted+0x44>)
 801c2b6:	2205      	movs	r2, #5
 801c2b8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c2ba:	2197      	movs	r1, #151	; 0x97
 801c2bc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c2c0:	f000 fd1c 	bl	801ccfc <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	0c1b      	lsrs	r3, r3, #16
 801c2c8:	b2db      	uxtb	r3, r3
 801c2ca:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2cc:	687b      	ldr	r3, [r7, #4]
 801c2ce:	0a1b      	lsrs	r3, r3, #8
 801c2d0:	b2db      	uxtb	r3, r3
 801c2d2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2d4:	687b      	ldr	r3, [r7, #4]
 801c2d6:	b2db      	uxtb	r3, r3
 801c2d8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2da:	f107 030c 	add.w	r3, r7, #12
 801c2de:	2203      	movs	r2, #3
 801c2e0:	4619      	mov	r1, r3
 801c2e2:	2082      	movs	r0, #130	; 0x82
 801c2e4:	f000 fdba 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c2e8:	bf00      	nop
 801c2ea:	3710      	adds	r7, #16
 801c2ec:	46bd      	mov	sp, r7
 801c2ee:	bd80      	pop	{r7, pc}
 801c2f0:	20001830 	.word	0x20001830

0801c2f4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c2f4:	b580      	push	{r7, lr}
 801c2f6:	b084      	sub	sp, #16
 801c2f8:	af00      	add	r7, sp, #0
 801c2fa:	6078      	str	r0, [r7, #4]
 801c2fc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	0c1b      	lsrs	r3, r3, #16
 801c302:	b2db      	uxtb	r3, r3
 801c304:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	0a1b      	lsrs	r3, r3, #8
 801c30a:	b2db      	uxtb	r3, r3
 801c30c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	b2db      	uxtb	r3, r3
 801c312:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c314:	683b      	ldr	r3, [r7, #0]
 801c316:	0c1b      	lsrs	r3, r3, #16
 801c318:	b2db      	uxtb	r3, r3
 801c31a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c31c:	683b      	ldr	r3, [r7, #0]
 801c31e:	0a1b      	lsrs	r3, r3, #8
 801c320:	b2db      	uxtb	r3, r3
 801c322:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c324:	683b      	ldr	r3, [r7, #0]
 801c326:	b2db      	uxtb	r3, r3
 801c328:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c32a:	f107 0308 	add.w	r3, r7, #8
 801c32e:	2206      	movs	r2, #6
 801c330:	4619      	mov	r1, r3
 801c332:	2094      	movs	r0, #148	; 0x94
 801c334:	f000 fd92 	bl	801ce5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c338:	4b03      	ldr	r3, [pc, #12]	; (801c348 <SUBGRF_SetRxDutyCycle+0x54>)
 801c33a:	2206      	movs	r2, #6
 801c33c:	701a      	strb	r2, [r3, #0]
}
 801c33e:	bf00      	nop
 801c340:	3710      	adds	r7, #16
 801c342:	46bd      	mov	sp, r7
 801c344:	bd80      	pop	{r7, pc}
 801c346:	bf00      	nop
 801c348:	20001830 	.word	0x20001830

0801c34c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c34c:	b580      	push	{r7, lr}
 801c34e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c350:	2200      	movs	r2, #0
 801c352:	2100      	movs	r1, #0
 801c354:	20c5      	movs	r0, #197	; 0xc5
 801c356:	f000 fd81 	bl	801ce5c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c35a:	4b02      	ldr	r3, [pc, #8]	; (801c364 <SUBGRF_SetCad+0x18>)
 801c35c:	2207      	movs	r2, #7
 801c35e:	701a      	strb	r2, [r3, #0]
}
 801c360:	bf00      	nop
 801c362:	bd80      	pop	{r7, pc}
 801c364:	20001830 	.word	0x20001830

0801c368 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c36c:	2200      	movs	r2, #0
 801c36e:	2100      	movs	r1, #0
 801c370:	20d1      	movs	r0, #209	; 0xd1
 801c372:	f000 fd73 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c376:	bf00      	nop
 801c378:	bd80      	pop	{r7, pc}

0801c37a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c37a:	b580      	push	{r7, lr}
 801c37c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c37e:	2200      	movs	r2, #0
 801c380:	2100      	movs	r1, #0
 801c382:	20d2      	movs	r0, #210	; 0xd2
 801c384:	f000 fd6a 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c388:	bf00      	nop
 801c38a:	bd80      	pop	{r7, pc}

0801c38c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c38c:	b580      	push	{r7, lr}
 801c38e:	b082      	sub	sp, #8
 801c390:	af00      	add	r7, sp, #0
 801c392:	4603      	mov	r3, r0
 801c394:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c396:	1dfb      	adds	r3, r7, #7
 801c398:	2201      	movs	r2, #1
 801c39a:	4619      	mov	r1, r3
 801c39c:	209f      	movs	r0, #159	; 0x9f
 801c39e:	f000 fd5d 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c3a2:	bf00      	nop
 801c3a4:	3708      	adds	r7, #8
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	bd80      	pop	{r7, pc}

0801c3aa <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c3aa:	b580      	push	{r7, lr}
 801c3ac:	b084      	sub	sp, #16
 801c3ae:	af00      	add	r7, sp, #0
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c3b4:	1dfb      	adds	r3, r7, #7
 801c3b6:	2201      	movs	r2, #1
 801c3b8:	4619      	mov	r1, r3
 801c3ba:	20a0      	movs	r0, #160	; 0xa0
 801c3bc:	f000 fd4e 	bl	801ce5c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c3c0:	79fb      	ldrb	r3, [r7, #7]
 801c3c2:	2b3f      	cmp	r3, #63	; 0x3f
 801c3c4:	d91c      	bls.n	801c400 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c3c6:	79fb      	ldrb	r3, [r7, #7]
 801c3c8:	085b      	lsrs	r3, r3, #1
 801c3ca:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c3cc:	2300      	movs	r3, #0
 801c3ce:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c3d0:	2300      	movs	r3, #0
 801c3d2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c3d4:	e005      	b.n	801c3e2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c3d6:	7bfb      	ldrb	r3, [r7, #15]
 801c3d8:	089b      	lsrs	r3, r3, #2
 801c3da:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c3dc:	7bbb      	ldrb	r3, [r7, #14]
 801c3de:	3301      	adds	r3, #1
 801c3e0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c3e2:	7bfb      	ldrb	r3, [r7, #15]
 801c3e4:	2b1f      	cmp	r3, #31
 801c3e6:	d8f6      	bhi.n	801c3d6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c3e8:	7bfb      	ldrb	r3, [r7, #15]
 801c3ea:	00db      	lsls	r3, r3, #3
 801c3ec:	b2da      	uxtb	r2, r3
 801c3ee:	7bbb      	ldrb	r3, [r7, #14]
 801c3f0:	4413      	add	r3, r2
 801c3f2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c3f4:	7b7b      	ldrb	r3, [r7, #13]
 801c3f6:	4619      	mov	r1, r3
 801c3f8:	f240 7006 	movw	r0, #1798	; 0x706
 801c3fc:	f000 fc7e 	bl	801ccfc <SUBGRF_WriteRegister>
    }
}
 801c400:	bf00      	nop
 801c402:	3710      	adds	r7, #16
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}

0801c408 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b082      	sub	sp, #8
 801c40c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c40e:	f7f1 fc9c 	bl	800dd4a <RBI_IsDCDC>
 801c412:	4603      	mov	r3, r0
 801c414:	2b01      	cmp	r3, #1
 801c416:	d102      	bne.n	801c41e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c418:	2301      	movs	r3, #1
 801c41a:	71fb      	strb	r3, [r7, #7]
 801c41c:	e001      	b.n	801c422 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c41e:	2300      	movs	r3, #0
 801c420:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c422:	1dfb      	adds	r3, r7, #7
 801c424:	2201      	movs	r2, #1
 801c426:	4619      	mov	r1, r3
 801c428:	2096      	movs	r0, #150	; 0x96
 801c42a:	f000 fd17 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c42e:	bf00      	nop
 801c430:	3708      	adds	r7, #8
 801c432:	46bd      	mov	sp, r7
 801c434:	bd80      	pop	{r7, pc}

0801c436 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c436:	b580      	push	{r7, lr}
 801c438:	b084      	sub	sp, #16
 801c43a:	af00      	add	r7, sp, #0
 801c43c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c43e:	793b      	ldrb	r3, [r7, #4]
 801c440:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c444:	b2db      	uxtb	r3, r3
 801c446:	019b      	lsls	r3, r3, #6
 801c448:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c44a:	793b      	ldrb	r3, [r7, #4]
 801c44c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c450:	b2db      	uxtb	r3, r3
 801c452:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c454:	b25b      	sxtb	r3, r3
 801c456:	4313      	orrs	r3, r2
 801c458:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c45a:	793b      	ldrb	r3, [r7, #4]
 801c45c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c460:	b2db      	uxtb	r3, r3
 801c462:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c464:	b25b      	sxtb	r3, r3
 801c466:	4313      	orrs	r3, r2
 801c468:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c46a:	793b      	ldrb	r3, [r7, #4]
 801c46c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c470:	b2db      	uxtb	r3, r3
 801c472:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c474:	b25b      	sxtb	r3, r3
 801c476:	4313      	orrs	r3, r2
 801c478:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c47a:	793b      	ldrb	r3, [r7, #4]
 801c47c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c480:	b2db      	uxtb	r3, r3
 801c482:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c484:	b25b      	sxtb	r3, r3
 801c486:	4313      	orrs	r3, r2
 801c488:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c48a:	793b      	ldrb	r3, [r7, #4]
 801c48c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c490:	b2db      	uxtb	r3, r3
 801c492:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c494:	b25b      	sxtb	r3, r3
 801c496:	4313      	orrs	r3, r2
 801c498:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c49a:	793b      	ldrb	r3, [r7, #4]
 801c49c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c4a0:	b2db      	uxtb	r3, r3
 801c4a2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4a4:	4313      	orrs	r3, r2
 801c4a6:	b25b      	sxtb	r3, r3
 801c4a8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4aa:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c4ac:	f107 030f 	add.w	r3, r7, #15
 801c4b0:	2201      	movs	r2, #1
 801c4b2:	4619      	mov	r1, r3
 801c4b4:	2089      	movs	r0, #137	; 0x89
 801c4b6:	f000 fcd1 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c4ba:	bf00      	nop
 801c4bc:	3710      	adds	r7, #16
 801c4be:	46bd      	mov	sp, r7
 801c4c0:	bd80      	pop	{r7, pc}
	...

0801c4c4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	4a1d      	ldr	r2, [pc, #116]	; (801c544 <SUBGRF_CalibrateImage+0x80>)
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	d904      	bls.n	801c4de <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c4d4:	23e1      	movs	r3, #225	; 0xe1
 801c4d6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c4d8:	23e9      	movs	r3, #233	; 0xe9
 801c4da:	737b      	strb	r3, [r7, #13]
 801c4dc:	e027      	b.n	801c52e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	4a19      	ldr	r2, [pc, #100]	; (801c548 <SUBGRF_CalibrateImage+0x84>)
 801c4e2:	4293      	cmp	r3, r2
 801c4e4:	d904      	bls.n	801c4f0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c4e6:	23d7      	movs	r3, #215	; 0xd7
 801c4e8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c4ea:	23db      	movs	r3, #219	; 0xdb
 801c4ec:	737b      	strb	r3, [r7, #13]
 801c4ee:	e01e      	b.n	801c52e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	4a16      	ldr	r2, [pc, #88]	; (801c54c <SUBGRF_CalibrateImage+0x88>)
 801c4f4:	4293      	cmp	r3, r2
 801c4f6:	d904      	bls.n	801c502 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c4f8:	23c1      	movs	r3, #193	; 0xc1
 801c4fa:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c4fc:	23c5      	movs	r3, #197	; 0xc5
 801c4fe:	737b      	strb	r3, [r7, #13]
 801c500:	e015      	b.n	801c52e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	4a12      	ldr	r2, [pc, #72]	; (801c550 <SUBGRF_CalibrateImage+0x8c>)
 801c506:	4293      	cmp	r3, r2
 801c508:	d904      	bls.n	801c514 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c50a:	2375      	movs	r3, #117	; 0x75
 801c50c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c50e:	2381      	movs	r3, #129	; 0x81
 801c510:	737b      	strb	r3, [r7, #13]
 801c512:	e00c      	b.n	801c52e <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	4a0f      	ldr	r2, [pc, #60]	; (801c554 <SUBGRF_CalibrateImage+0x90>)
 801c518:	4293      	cmp	r3, r2
 801c51a:	d904      	bls.n	801c526 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c51c:	236b      	movs	r3, #107	; 0x6b
 801c51e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c520:	236f      	movs	r3, #111	; 0x6f
 801c522:	737b      	strb	r3, [r7, #13]
 801c524:	e003      	b.n	801c52e <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c526:	2329      	movs	r3, #41	; 0x29
 801c528:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c52a:	232b      	movs	r3, #43	; 0x2b
 801c52c:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c52e:	f107 030c 	add.w	r3, r7, #12
 801c532:	2202      	movs	r2, #2
 801c534:	4619      	mov	r1, r3
 801c536:	2098      	movs	r0, #152	; 0x98
 801c538:	f000 fc90 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c53c:	bf00      	nop
 801c53e:	3710      	adds	r7, #16
 801c540:	46bd      	mov	sp, r7
 801c542:	bd80      	pop	{r7, pc}
 801c544:	35a4e900 	.word	0x35a4e900
 801c548:	32a9f880 	.word	0x32a9f880
 801c54c:	2de54480 	.word	0x2de54480
 801c550:	1b6b0b00 	.word	0x1b6b0b00
 801c554:	1954fc40 	.word	0x1954fc40

0801c558 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c558:	b590      	push	{r4, r7, lr}
 801c55a:	b085      	sub	sp, #20
 801c55c:	af00      	add	r7, sp, #0
 801c55e:	4604      	mov	r4, r0
 801c560:	4608      	mov	r0, r1
 801c562:	4611      	mov	r1, r2
 801c564:	461a      	mov	r2, r3
 801c566:	4623      	mov	r3, r4
 801c568:	71fb      	strb	r3, [r7, #7]
 801c56a:	4603      	mov	r3, r0
 801c56c:	71bb      	strb	r3, [r7, #6]
 801c56e:	460b      	mov	r3, r1
 801c570:	717b      	strb	r3, [r7, #5]
 801c572:	4613      	mov	r3, r2
 801c574:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c576:	79fb      	ldrb	r3, [r7, #7]
 801c578:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c57a:	79bb      	ldrb	r3, [r7, #6]
 801c57c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c57e:	797b      	ldrb	r3, [r7, #5]
 801c580:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c582:	793b      	ldrb	r3, [r7, #4]
 801c584:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c586:	f107 030c 	add.w	r3, r7, #12
 801c58a:	2204      	movs	r2, #4
 801c58c:	4619      	mov	r1, r3
 801c58e:	2095      	movs	r0, #149	; 0x95
 801c590:	f000 fc64 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c594:	bf00      	nop
 801c596:	3714      	adds	r7, #20
 801c598:	46bd      	mov	sp, r7
 801c59a:	bd90      	pop	{r4, r7, pc}

0801c59c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c59c:	b590      	push	{r4, r7, lr}
 801c59e:	b085      	sub	sp, #20
 801c5a0:	af00      	add	r7, sp, #0
 801c5a2:	4604      	mov	r4, r0
 801c5a4:	4608      	mov	r0, r1
 801c5a6:	4611      	mov	r1, r2
 801c5a8:	461a      	mov	r2, r3
 801c5aa:	4623      	mov	r3, r4
 801c5ac:	80fb      	strh	r3, [r7, #6]
 801c5ae:	4603      	mov	r3, r0
 801c5b0:	80bb      	strh	r3, [r7, #4]
 801c5b2:	460b      	mov	r3, r1
 801c5b4:	807b      	strh	r3, [r7, #2]
 801c5b6:	4613      	mov	r3, r2
 801c5b8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c5ba:	88fb      	ldrh	r3, [r7, #6]
 801c5bc:	0a1b      	lsrs	r3, r3, #8
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	b2db      	uxtb	r3, r3
 801c5c2:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c5c4:	88fb      	ldrh	r3, [r7, #6]
 801c5c6:	b2db      	uxtb	r3, r3
 801c5c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c5ca:	88bb      	ldrh	r3, [r7, #4]
 801c5cc:	0a1b      	lsrs	r3, r3, #8
 801c5ce:	b29b      	uxth	r3, r3
 801c5d0:	b2db      	uxtb	r3, r3
 801c5d2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c5d4:	88bb      	ldrh	r3, [r7, #4]
 801c5d6:	b2db      	uxtb	r3, r3
 801c5d8:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c5da:	887b      	ldrh	r3, [r7, #2]
 801c5dc:	0a1b      	lsrs	r3, r3, #8
 801c5de:	b29b      	uxth	r3, r3
 801c5e0:	b2db      	uxtb	r3, r3
 801c5e2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c5e4:	887b      	ldrh	r3, [r7, #2]
 801c5e6:	b2db      	uxtb	r3, r3
 801c5e8:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c5ea:	883b      	ldrh	r3, [r7, #0]
 801c5ec:	0a1b      	lsrs	r3, r3, #8
 801c5ee:	b29b      	uxth	r3, r3
 801c5f0:	b2db      	uxtb	r3, r3
 801c5f2:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c5f4:	883b      	ldrh	r3, [r7, #0]
 801c5f6:	b2db      	uxtb	r3, r3
 801c5f8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c5fa:	f107 0308 	add.w	r3, r7, #8
 801c5fe:	2208      	movs	r2, #8
 801c600:	4619      	mov	r1, r3
 801c602:	2008      	movs	r0, #8
 801c604:	f000 fc2a 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c608:	bf00      	nop
 801c60a:	3714      	adds	r7, #20
 801c60c:	46bd      	mov	sp, r7
 801c60e:	bd90      	pop	{r4, r7, pc}

0801c610 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c610:	b580      	push	{r7, lr}
 801c612:	b084      	sub	sp, #16
 801c614:	af00      	add	r7, sp, #0
 801c616:	4603      	mov	r3, r0
 801c618:	6039      	str	r1, [r7, #0]
 801c61a:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c61c:	79fb      	ldrb	r3, [r7, #7]
 801c61e:	f003 0307 	and.w	r3, r3, #7
 801c622:	b2db      	uxtb	r3, r3
 801c624:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c626:	683b      	ldr	r3, [r7, #0]
 801c628:	0c1b      	lsrs	r3, r3, #16
 801c62a:	b2db      	uxtb	r3, r3
 801c62c:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c62e:	683b      	ldr	r3, [r7, #0]
 801c630:	0a1b      	lsrs	r3, r3, #8
 801c632:	b2db      	uxtb	r3, r3
 801c634:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	b2db      	uxtb	r3, r3
 801c63a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c63c:	f107 030c 	add.w	r3, r7, #12
 801c640:	2204      	movs	r2, #4
 801c642:	4619      	mov	r1, r3
 801c644:	2097      	movs	r0, #151	; 0x97
 801c646:	f000 fc09 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c64a:	bf00      	nop
 801c64c:	3710      	adds	r7, #16
 801c64e:	46bd      	mov	sp, r7
 801c650:	bd80      	pop	{r7, pc}
	...

0801c654 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c654:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c658:	b084      	sub	sp, #16
 801c65a:	af00      	add	r7, sp, #0
 801c65c:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c65e:	2300      	movs	r3, #0
 801c660:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c662:	4b1d      	ldr	r3, [pc, #116]	; (801c6d8 <SUBGRF_SetRfFrequency+0x84>)
 801c664:	781b      	ldrb	r3, [r3, #0]
 801c666:	f083 0301 	eor.w	r3, r3, #1
 801c66a:	b2db      	uxtb	r3, r3
 801c66c:	2b00      	cmp	r3, #0
 801c66e:	d005      	beq.n	801c67c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c670:	6878      	ldr	r0, [r7, #4]
 801c672:	f7ff ff27 	bl	801c4c4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c676:	4b18      	ldr	r3, [pc, #96]	; (801c6d8 <SUBGRF_SetRfFrequency+0x84>)
 801c678:	2201      	movs	r2, #1
 801c67a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	2200      	movs	r2, #0
 801c680:	461c      	mov	r4, r3
 801c682:	4615      	mov	r5, r2
 801c684:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c688:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c68c:	4a13      	ldr	r2, [pc, #76]	; (801c6dc <SUBGRF_SetRfFrequency+0x88>)
 801c68e:	f04f 0300 	mov.w	r3, #0
 801c692:	4640      	mov	r0, r8
 801c694:	4649      	mov	r1, r9
 801c696:	f7e4 fc79 	bl	8000f8c <__aeabi_uldivmod>
 801c69a:	4602      	mov	r2, r0
 801c69c:	460b      	mov	r3, r1
 801c69e:	4613      	mov	r3, r2
 801c6a0:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	0e1b      	lsrs	r3, r3, #24
 801c6a6:	b2db      	uxtb	r3, r3
 801c6a8:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	0c1b      	lsrs	r3, r3, #16
 801c6ae:	b2db      	uxtb	r3, r3
 801c6b0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c6b2:	68fb      	ldr	r3, [r7, #12]
 801c6b4:	0a1b      	lsrs	r3, r3, #8
 801c6b6:	b2db      	uxtb	r3, r3
 801c6b8:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	b2db      	uxtb	r3, r3
 801c6be:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c6c0:	f107 0308 	add.w	r3, r7, #8
 801c6c4:	2204      	movs	r2, #4
 801c6c6:	4619      	mov	r1, r3
 801c6c8:	2086      	movs	r0, #134	; 0x86
 801c6ca:	f000 fbc7 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c6ce:	bf00      	nop
 801c6d0:	3710      	adds	r7, #16
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c6d8:	20001838 	.word	0x20001838
 801c6dc:	01e84800 	.word	0x01e84800

0801c6e0 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c6e0:	b580      	push	{r7, lr}
 801c6e2:	b082      	sub	sp, #8
 801c6e4:	af00      	add	r7, sp, #0
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c6ea:	79fa      	ldrb	r2, [r7, #7]
 801c6ec:	4b09      	ldr	r3, [pc, #36]	; (801c714 <SUBGRF_SetPacketType+0x34>)
 801c6ee:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c6f0:	79fb      	ldrb	r3, [r7, #7]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d104      	bne.n	801c700 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c6f6:	2100      	movs	r1, #0
 801c6f8:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c6fc:	f000 fafe 	bl	801ccfc <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c700:	1dfb      	adds	r3, r7, #7
 801c702:	2201      	movs	r2, #1
 801c704:	4619      	mov	r1, r3
 801c706:	208a      	movs	r0, #138	; 0x8a
 801c708:	f000 fba8 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c70c:	bf00      	nop
 801c70e:	3708      	adds	r7, #8
 801c710:	46bd      	mov	sp, r7
 801c712:	bd80      	pop	{r7, pc}
 801c714:	20001831 	.word	0x20001831

0801c718 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c718:	b480      	push	{r7}
 801c71a:	af00      	add	r7, sp, #0
    return PacketType;
 801c71c:	4b02      	ldr	r3, [pc, #8]	; (801c728 <SUBGRF_GetPacketType+0x10>)
 801c71e:	781b      	ldrb	r3, [r3, #0]
}
 801c720:	4618      	mov	r0, r3
 801c722:	46bd      	mov	sp, r7
 801c724:	bc80      	pop	{r7}
 801c726:	4770      	bx	lr
 801c728:	20001831 	.word	0x20001831

0801c72c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c72c:	b580      	push	{r7, lr}
 801c72e:	b084      	sub	sp, #16
 801c730:	af00      	add	r7, sp, #0
 801c732:	4603      	mov	r3, r0
 801c734:	71fb      	strb	r3, [r7, #7]
 801c736:	460b      	mov	r3, r1
 801c738:	71bb      	strb	r3, [r7, #6]
 801c73a:	4613      	mov	r3, r2
 801c73c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c73e:	79fb      	ldrb	r3, [r7, #7]
 801c740:	2b01      	cmp	r3, #1
 801c742:	d149      	bne.n	801c7d8 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c744:	2000      	movs	r0, #0
 801c746:	f7f1 fb07 	bl	800dd58 <RBI_GetRFOMaxPowerConfig>
 801c74a:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c74c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c750:	68fa      	ldr	r2, [r7, #12]
 801c752:	429a      	cmp	r2, r3
 801c754:	da01      	bge.n	801c75a <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	2b0e      	cmp	r3, #14
 801c75e:	d10e      	bne.n	801c77e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c760:	2301      	movs	r3, #1
 801c762:	2201      	movs	r2, #1
 801c764:	2100      	movs	r1, #0
 801c766:	2004      	movs	r0, #4
 801c768:	f7ff fef6 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c76c:	79ba      	ldrb	r2, [r7, #6]
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	b2db      	uxtb	r3, r3
 801c772:	1ad3      	subs	r3, r2, r3
 801c774:	b2db      	uxtb	r3, r3
 801c776:	330e      	adds	r3, #14
 801c778:	b2db      	uxtb	r3, r3
 801c77a:	71bb      	strb	r3, [r7, #6]
 801c77c:	e01f      	b.n	801c7be <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2b0a      	cmp	r3, #10
 801c782:	d10e      	bne.n	801c7a2 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c784:	2301      	movs	r3, #1
 801c786:	2201      	movs	r2, #1
 801c788:	2100      	movs	r1, #0
 801c78a:	2001      	movs	r0, #1
 801c78c:	f7ff fee4 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c790:	79ba      	ldrb	r2, [r7, #6]
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	b2db      	uxtb	r3, r3
 801c796:	1ad3      	subs	r3, r2, r3
 801c798:	b2db      	uxtb	r3, r3
 801c79a:	330d      	adds	r3, #13
 801c79c:	b2db      	uxtb	r3, r3
 801c79e:	71bb      	strb	r3, [r7, #6]
 801c7a0:	e00d      	b.n	801c7be <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c7a2:	2301      	movs	r3, #1
 801c7a4:	2201      	movs	r2, #1
 801c7a6:	2100      	movs	r1, #0
 801c7a8:	2007      	movs	r0, #7
 801c7aa:	f7ff fed5 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7ae:	79ba      	ldrb	r2, [r7, #6]
 801c7b0:	68fb      	ldr	r3, [r7, #12]
 801c7b2:	b2db      	uxtb	r3, r3
 801c7b4:	1ad3      	subs	r3, r2, r3
 801c7b6:	b2db      	uxtb	r3, r3
 801c7b8:	330e      	adds	r3, #14
 801c7ba:	b2db      	uxtb	r3, r3
 801c7bc:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c7be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7c2:	f113 0f11 	cmn.w	r3, #17
 801c7c6:	da01      	bge.n	801c7cc <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c7c8:	23ef      	movs	r3, #239	; 0xef
 801c7ca:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c7cc:	2118      	movs	r1, #24
 801c7ce:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c7d2:	f000 fa93 	bl	801ccfc <SUBGRF_WriteRegister>
 801c7d6:	e067      	b.n	801c8a8 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c7d8:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c7dc:	f000 faa2 	bl	801cd24 <SUBGRF_ReadRegister>
 801c7e0:	4603      	mov	r3, r0
 801c7e2:	f043 031e 	orr.w	r3, r3, #30
 801c7e6:	b2db      	uxtb	r3, r3
 801c7e8:	4619      	mov	r1, r3
 801c7ea:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c7ee:	f000 fa85 	bl	801ccfc <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c7f2:	2001      	movs	r0, #1
 801c7f4:	f7f1 fab0 	bl	800dd58 <RBI_GetRFOMaxPowerConfig>
 801c7f8:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c7fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7fe:	68fa      	ldr	r2, [r7, #12]
 801c800:	429a      	cmp	r2, r3
 801c802:	da01      	bge.n	801c808 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c804:	68fb      	ldr	r3, [r7, #12]
 801c806:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c808:	68fb      	ldr	r3, [r7, #12]
 801c80a:	2b14      	cmp	r3, #20
 801c80c:	d10e      	bne.n	801c82c <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c80e:	2301      	movs	r3, #1
 801c810:	2200      	movs	r2, #0
 801c812:	2105      	movs	r1, #5
 801c814:	2003      	movs	r0, #3
 801c816:	f7ff fe9f 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c81a:	79ba      	ldrb	r2, [r7, #6]
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	b2db      	uxtb	r3, r3
 801c820:	1ad3      	subs	r3, r2, r3
 801c822:	b2db      	uxtb	r3, r3
 801c824:	3316      	adds	r3, #22
 801c826:	b2db      	uxtb	r3, r3
 801c828:	71bb      	strb	r3, [r7, #6]
 801c82a:	e031      	b.n	801c890 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c82c:	68fb      	ldr	r3, [r7, #12]
 801c82e:	2b11      	cmp	r3, #17
 801c830:	d10e      	bne.n	801c850 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c832:	2301      	movs	r3, #1
 801c834:	2200      	movs	r2, #0
 801c836:	2103      	movs	r1, #3
 801c838:	2002      	movs	r0, #2
 801c83a:	f7ff fe8d 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c83e:	79ba      	ldrb	r2, [r7, #6]
 801c840:	68fb      	ldr	r3, [r7, #12]
 801c842:	b2db      	uxtb	r3, r3
 801c844:	1ad3      	subs	r3, r2, r3
 801c846:	b2db      	uxtb	r3, r3
 801c848:	3316      	adds	r3, #22
 801c84a:	b2db      	uxtb	r3, r3
 801c84c:	71bb      	strb	r3, [r7, #6]
 801c84e:	e01f      	b.n	801c890 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c850:	68fb      	ldr	r3, [r7, #12]
 801c852:	2b0e      	cmp	r3, #14
 801c854:	d10e      	bne.n	801c874 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c856:	2301      	movs	r3, #1
 801c858:	2200      	movs	r2, #0
 801c85a:	2102      	movs	r1, #2
 801c85c:	2002      	movs	r0, #2
 801c85e:	f7ff fe7b 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c862:	79ba      	ldrb	r2, [r7, #6]
 801c864:	68fb      	ldr	r3, [r7, #12]
 801c866:	b2db      	uxtb	r3, r3
 801c868:	1ad3      	subs	r3, r2, r3
 801c86a:	b2db      	uxtb	r3, r3
 801c86c:	330e      	adds	r3, #14
 801c86e:	b2db      	uxtb	r3, r3
 801c870:	71bb      	strb	r3, [r7, #6]
 801c872:	e00d      	b.n	801c890 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c874:	2301      	movs	r3, #1
 801c876:	2200      	movs	r2, #0
 801c878:	2107      	movs	r1, #7
 801c87a:	2004      	movs	r0, #4
 801c87c:	f7ff fe6c 	bl	801c558 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c880:	79ba      	ldrb	r2, [r7, #6]
 801c882:	68fb      	ldr	r3, [r7, #12]
 801c884:	b2db      	uxtb	r3, r3
 801c886:	1ad3      	subs	r3, r2, r3
 801c888:	b2db      	uxtb	r3, r3
 801c88a:	3316      	adds	r3, #22
 801c88c:	b2db      	uxtb	r3, r3
 801c88e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c890:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c894:	f113 0f09 	cmn.w	r3, #9
 801c898:	da01      	bge.n	801c89e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c89a:	23f7      	movs	r3, #247	; 0xf7
 801c89c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c89e:	2138      	movs	r1, #56	; 0x38
 801c8a0:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c8a4:	f000 fa2a 	bl	801ccfc <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c8a8:	79bb      	ldrb	r3, [r7, #6]
 801c8aa:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c8ac:	797b      	ldrb	r3, [r7, #5]
 801c8ae:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c8b0:	f107 0308 	add.w	r3, r7, #8
 801c8b4:	2202      	movs	r2, #2
 801c8b6:	4619      	mov	r1, r3
 801c8b8:	208e      	movs	r0, #142	; 0x8e
 801c8ba:	f000 facf 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801c8be:	bf00      	nop
 801c8c0:	3710      	adds	r7, #16
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bd80      	pop	{r7, pc}
	...

0801c8c8 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c8c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c8cc:	b086      	sub	sp, #24
 801c8ce:	af00      	add	r7, sp, #0
 801c8d0:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c8d2:	2300      	movs	r3, #0
 801c8d4:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c8d6:	4a61      	ldr	r2, [pc, #388]	; (801ca5c <SUBGRF_SetModulationParams+0x194>)
 801c8d8:	f107 0308 	add.w	r3, r7, #8
 801c8dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c8e0:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c8e4:	687b      	ldr	r3, [r7, #4]
 801c8e6:	781a      	ldrb	r2, [r3, #0]
 801c8e8:	4b5d      	ldr	r3, [pc, #372]	; (801ca60 <SUBGRF_SetModulationParams+0x198>)
 801c8ea:	781b      	ldrb	r3, [r3, #0]
 801c8ec:	429a      	cmp	r2, r3
 801c8ee:	d004      	beq.n	801c8fa <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c8f0:	687b      	ldr	r3, [r7, #4]
 801c8f2:	781b      	ldrb	r3, [r3, #0]
 801c8f4:	4618      	mov	r0, r3
 801c8f6:	f7ff fef3 	bl	801c6e0 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	781b      	ldrb	r3, [r3, #0]
 801c8fe:	2b03      	cmp	r3, #3
 801c900:	f200 80a5 	bhi.w	801ca4e <SUBGRF_SetModulationParams+0x186>
 801c904:	a201      	add	r2, pc, #4	; (adr r2, 801c90c <SUBGRF_SetModulationParams+0x44>)
 801c906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c90a:	bf00      	nop
 801c90c:	0801c91d 	.word	0x0801c91d
 801c910:	0801c9dd 	.word	0x0801c9dd
 801c914:	0801c99f 	.word	0x0801c99f
 801c918:	0801ca0b 	.word	0x0801ca0b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c91c:	2308      	movs	r3, #8
 801c91e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	4a4f      	ldr	r2, [pc, #316]	; (801ca64 <SUBGRF_SetModulationParams+0x19c>)
 801c926:	fbb2 f3f3 	udiv	r3, r2, r3
 801c92a:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c92c:	697b      	ldr	r3, [r7, #20]
 801c92e:	0c1b      	lsrs	r3, r3, #16
 801c930:	b2db      	uxtb	r3, r3
 801c932:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	0a1b      	lsrs	r3, r3, #8
 801c938:	b2db      	uxtb	r3, r3
 801c93a:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c93c:	697b      	ldr	r3, [r7, #20]
 801c93e:	b2db      	uxtb	r3, r3
 801c940:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	7b1b      	ldrb	r3, [r3, #12]
 801c946:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c948:	687b      	ldr	r3, [r7, #4]
 801c94a:	7b5b      	ldrb	r3, [r3, #13]
 801c94c:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c94e:	687b      	ldr	r3, [r7, #4]
 801c950:	689b      	ldr	r3, [r3, #8]
 801c952:	2200      	movs	r2, #0
 801c954:	461c      	mov	r4, r3
 801c956:	4615      	mov	r5, r2
 801c958:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c95c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c960:	4a41      	ldr	r2, [pc, #260]	; (801ca68 <SUBGRF_SetModulationParams+0x1a0>)
 801c962:	f04f 0300 	mov.w	r3, #0
 801c966:	4640      	mov	r0, r8
 801c968:	4649      	mov	r1, r9
 801c96a:	f7e4 fb0f 	bl	8000f8c <__aeabi_uldivmod>
 801c96e:	4602      	mov	r2, r0
 801c970:	460b      	mov	r3, r1
 801c972:	4613      	mov	r3, r2
 801c974:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c976:	697b      	ldr	r3, [r7, #20]
 801c978:	0c1b      	lsrs	r3, r3, #16
 801c97a:	b2db      	uxtb	r3, r3
 801c97c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c97e:	697b      	ldr	r3, [r7, #20]
 801c980:	0a1b      	lsrs	r3, r3, #8
 801c982:	b2db      	uxtb	r3, r3
 801c984:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c986:	697b      	ldr	r3, [r7, #20]
 801c988:	b2db      	uxtb	r3, r3
 801c98a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c98c:	7cfb      	ldrb	r3, [r7, #19]
 801c98e:	b29a      	uxth	r2, r3
 801c990:	f107 0308 	add.w	r3, r7, #8
 801c994:	4619      	mov	r1, r3
 801c996:	208b      	movs	r0, #139	; 0x8b
 801c998:	f000 fa60 	bl	801ce5c <SUBGRF_WriteCommand>
        break;
 801c99c:	e058      	b.n	801ca50 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c99e:	2304      	movs	r3, #4
 801c9a0:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	691b      	ldr	r3, [r3, #16]
 801c9a6:	4a2f      	ldr	r2, [pc, #188]	; (801ca64 <SUBGRF_SetModulationParams+0x19c>)
 801c9a8:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9ac:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	0c1b      	lsrs	r3, r3, #16
 801c9b2:	b2db      	uxtb	r3, r3
 801c9b4:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9b6:	697b      	ldr	r3, [r7, #20]
 801c9b8:	0a1b      	lsrs	r3, r3, #8
 801c9ba:	b2db      	uxtb	r3, r3
 801c9bc:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c9be:	697b      	ldr	r3, [r7, #20]
 801c9c0:	b2db      	uxtb	r3, r3
 801c9c2:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c9c4:	687b      	ldr	r3, [r7, #4]
 801c9c6:	7d1b      	ldrb	r3, [r3, #20]
 801c9c8:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9ca:	7cfb      	ldrb	r3, [r7, #19]
 801c9cc:	b29a      	uxth	r2, r3
 801c9ce:	f107 0308 	add.w	r3, r7, #8
 801c9d2:	4619      	mov	r1, r3
 801c9d4:	208b      	movs	r0, #139	; 0x8b
 801c9d6:	f000 fa41 	bl	801ce5c <SUBGRF_WriteCommand>
        break;
 801c9da:	e039      	b.n	801ca50 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c9dc:	2304      	movs	r3, #4
 801c9de:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	7e1b      	ldrb	r3, [r3, #24]
 801c9e4:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	7e5b      	ldrb	r3, [r3, #25]
 801c9ea:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	7e9b      	ldrb	r3, [r3, #26]
 801c9f0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	7edb      	ldrb	r3, [r3, #27]
 801c9f6:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9f8:	7cfb      	ldrb	r3, [r7, #19]
 801c9fa:	b29a      	uxth	r2, r3
 801c9fc:	f107 0308 	add.w	r3, r7, #8
 801ca00:	4619      	mov	r1, r3
 801ca02:	208b      	movs	r0, #139	; 0x8b
 801ca04:	f000 fa2a 	bl	801ce5c <SUBGRF_WriteCommand>

        break;
 801ca08:	e022      	b.n	801ca50 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca0a:	2305      	movs	r3, #5
 801ca0c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	685b      	ldr	r3, [r3, #4]
 801ca12:	4a14      	ldr	r2, [pc, #80]	; (801ca64 <SUBGRF_SetModulationParams+0x19c>)
 801ca14:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca18:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca1a:	697b      	ldr	r3, [r7, #20]
 801ca1c:	0c1b      	lsrs	r3, r3, #16
 801ca1e:	b2db      	uxtb	r3, r3
 801ca20:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca22:	697b      	ldr	r3, [r7, #20]
 801ca24:	0a1b      	lsrs	r3, r3, #8
 801ca26:	b2db      	uxtb	r3, r3
 801ca28:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca2a:	697b      	ldr	r3, [r7, #20]
 801ca2c:	b2db      	uxtb	r3, r3
 801ca2e:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca30:	687b      	ldr	r3, [r7, #4]
 801ca32:	7b1b      	ldrb	r3, [r3, #12]
 801ca34:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	7b5b      	ldrb	r3, [r3, #13]
 801ca3a:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca3c:	7cfb      	ldrb	r3, [r7, #19]
 801ca3e:	b29a      	uxth	r2, r3
 801ca40:	f107 0308 	add.w	r3, r7, #8
 801ca44:	4619      	mov	r1, r3
 801ca46:	208b      	movs	r0, #139	; 0x8b
 801ca48:	f000 fa08 	bl	801ce5c <SUBGRF_WriteCommand>
        break;
 801ca4c:	e000      	b.n	801ca50 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ca4e:	bf00      	nop
    }
}
 801ca50:	bf00      	nop
 801ca52:	3718      	adds	r7, #24
 801ca54:	46bd      	mov	sp, r7
 801ca56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ca5a:	bf00      	nop
 801ca5c:	0801f470 	.word	0x0801f470
 801ca60:	20001831 	.word	0x20001831
 801ca64:	3d090000 	.word	0x3d090000
 801ca68:	01e84800 	.word	0x01e84800

0801ca6c <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	b086      	sub	sp, #24
 801ca70:	af00      	add	r7, sp, #0
 801ca72:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ca74:	2300      	movs	r3, #0
 801ca76:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ca78:	4a48      	ldr	r2, [pc, #288]	; (801cb9c <SUBGRF_SetPacketParams+0x130>)
 801ca7a:	f107 030c 	add.w	r3, r7, #12
 801ca7e:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca80:	c303      	stmia	r3!, {r0, r1}
 801ca82:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ca84:	687b      	ldr	r3, [r7, #4]
 801ca86:	781a      	ldrb	r2, [r3, #0]
 801ca88:	4b45      	ldr	r3, [pc, #276]	; (801cba0 <SUBGRF_SetPacketParams+0x134>)
 801ca8a:	781b      	ldrb	r3, [r3, #0]
 801ca8c:	429a      	cmp	r2, r3
 801ca8e:	d004      	beq.n	801ca9a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801ca90:	687b      	ldr	r3, [r7, #4]
 801ca92:	781b      	ldrb	r3, [r3, #0]
 801ca94:	4618      	mov	r0, r3
 801ca96:	f7ff fe23 	bl	801c6e0 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801ca9a:	687b      	ldr	r3, [r7, #4]
 801ca9c:	781b      	ldrb	r3, [r3, #0]
 801ca9e:	2b03      	cmp	r3, #3
 801caa0:	d878      	bhi.n	801cb94 <SUBGRF_SetPacketParams+0x128>
 801caa2:	a201      	add	r2, pc, #4	; (adr r2, 801caa8 <SUBGRF_SetPacketParams+0x3c>)
 801caa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801caa8:	0801cab9 	.word	0x0801cab9
 801caac:	0801cb49 	.word	0x0801cb49
 801cab0:	0801cb3d 	.word	0x0801cb3d
 801cab4:	0801cab9 	.word	0x0801cab9
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	7a5b      	ldrb	r3, [r3, #9]
 801cabc:	2bf1      	cmp	r3, #241	; 0xf1
 801cabe:	d10a      	bne.n	801cad6 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cac0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cac4:	f7ff faaa 	bl	801c01c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cac8:	f248 0005 	movw	r0, #32773	; 0x8005
 801cacc:	f7ff fac6 	bl	801c05c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cad0:	2302      	movs	r3, #2
 801cad2:	75bb      	strb	r3, [r7, #22]
 801cad4:	e011      	b.n	801cafa <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	7a5b      	ldrb	r3, [r3, #9]
 801cada:	2bf2      	cmp	r3, #242	; 0xf2
 801cadc:	d10a      	bne.n	801caf4 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801cade:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cae2:	f7ff fa9b 	bl	801c01c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cae6:	f241 0021 	movw	r0, #4129	; 0x1021
 801caea:	f7ff fab7 	bl	801c05c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801caee:	2306      	movs	r3, #6
 801caf0:	75bb      	strb	r3, [r7, #22]
 801caf2:	e002      	b.n	801cafa <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	7a5b      	ldrb	r3, [r3, #9]
 801caf8:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cafa:	2309      	movs	r3, #9
 801cafc:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cafe:	687b      	ldr	r3, [r7, #4]
 801cb00:	885b      	ldrh	r3, [r3, #2]
 801cb02:	0a1b      	lsrs	r3, r3, #8
 801cb04:	b29b      	uxth	r3, r3
 801cb06:	b2db      	uxtb	r3, r3
 801cb08:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	885b      	ldrh	r3, [r3, #2]
 801cb0e:	b2db      	uxtb	r3, r3
 801cb10:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	791b      	ldrb	r3, [r3, #4]
 801cb16:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	795b      	ldrb	r3, [r3, #5]
 801cb1c:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	799b      	ldrb	r3, [r3, #6]
 801cb22:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb24:	687b      	ldr	r3, [r7, #4]
 801cb26:	79db      	ldrb	r3, [r3, #7]
 801cb28:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	7a1b      	ldrb	r3, [r3, #8]
 801cb2e:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb30:	7dbb      	ldrb	r3, [r7, #22]
 801cb32:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	7a9b      	ldrb	r3, [r3, #10]
 801cb38:	753b      	strb	r3, [r7, #20]
        break;
 801cb3a:	e022      	b.n	801cb82 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	7b1b      	ldrb	r3, [r3, #12]
 801cb44:	733b      	strb	r3, [r7, #12]
        break;
 801cb46:	e01c      	b.n	801cb82 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cb48:	2306      	movs	r3, #6
 801cb4a:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	89db      	ldrh	r3, [r3, #14]
 801cb50:	0a1b      	lsrs	r3, r3, #8
 801cb52:	b29b      	uxth	r3, r3
 801cb54:	b2db      	uxtb	r3, r3
 801cb56:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	89db      	ldrh	r3, [r3, #14]
 801cb5c:	b2db      	uxtb	r3, r3
 801cb5e:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	7c1a      	ldrb	r2, [r3, #16]
 801cb64:	4b0f      	ldr	r3, [pc, #60]	; (801cba4 <SUBGRF_SetPacketParams+0x138>)
 801cb66:	4611      	mov	r1, r2
 801cb68:	7019      	strb	r1, [r3, #0]
 801cb6a:	4613      	mov	r3, r2
 801cb6c:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	7c5b      	ldrb	r3, [r3, #17]
 801cb72:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	7c9b      	ldrb	r3, [r3, #18]
 801cb78:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cb7a:	687b      	ldr	r3, [r7, #4]
 801cb7c:	7cdb      	ldrb	r3, [r3, #19]
 801cb7e:	747b      	strb	r3, [r7, #17]
        break;
 801cb80:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cb82:	7dfb      	ldrb	r3, [r7, #23]
 801cb84:	b29a      	uxth	r2, r3
 801cb86:	f107 030c 	add.w	r3, r7, #12
 801cb8a:	4619      	mov	r1, r3
 801cb8c:	208c      	movs	r0, #140	; 0x8c
 801cb8e:	f000 f965 	bl	801ce5c <SUBGRF_WriteCommand>
 801cb92:	e000      	b.n	801cb96 <SUBGRF_SetPacketParams+0x12a>
        return;
 801cb94:	bf00      	nop
}
 801cb96:	3718      	adds	r7, #24
 801cb98:	46bd      	mov	sp, r7
 801cb9a:	bd80      	pop	{r7, pc}
 801cb9c:	0801f478 	.word	0x0801f478
 801cba0:	20001831 	.word	0x20001831
 801cba4:	20001832 	.word	0x20001832

0801cba8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b084      	sub	sp, #16
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	4603      	mov	r3, r0
 801cbb0:	460a      	mov	r2, r1
 801cbb2:	71fb      	strb	r3, [r7, #7]
 801cbb4:	4613      	mov	r3, r2
 801cbb6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cbb8:	79fb      	ldrb	r3, [r7, #7]
 801cbba:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cbbc:	79bb      	ldrb	r3, [r7, #6]
 801cbbe:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cbc0:	f107 030c 	add.w	r3, r7, #12
 801cbc4:	2202      	movs	r2, #2
 801cbc6:	4619      	mov	r1, r3
 801cbc8:	208f      	movs	r0, #143	; 0x8f
 801cbca:	f000 f947 	bl	801ce5c <SUBGRF_WriteCommand>
}
 801cbce:	bf00      	nop
 801cbd0:	3710      	adds	r7, #16
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}

0801cbd6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cbd6:	b580      	push	{r7, lr}
 801cbd8:	b082      	sub	sp, #8
 801cbda:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cbdc:	2300      	movs	r3, #0
 801cbde:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cbe0:	1d3b      	adds	r3, r7, #4
 801cbe2:	2201      	movs	r2, #1
 801cbe4:	4619      	mov	r1, r3
 801cbe6:	2015      	movs	r0, #21
 801cbe8:	f000 f95a 	bl	801cea0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cbec:	793b      	ldrb	r3, [r7, #4]
 801cbee:	425b      	negs	r3, r3
 801cbf0:	105b      	asrs	r3, r3, #1
 801cbf2:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cbf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cbf8:	4618      	mov	r0, r3
 801cbfa:	3708      	adds	r7, #8
 801cbfc:	46bd      	mov	sp, r7
 801cbfe:	bd80      	pop	{r7, pc}

0801cc00 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b084      	sub	sp, #16
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	6078      	str	r0, [r7, #4]
 801cc08:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc0a:	f107 030c 	add.w	r3, r7, #12
 801cc0e:	2202      	movs	r2, #2
 801cc10:	4619      	mov	r1, r3
 801cc12:	2013      	movs	r0, #19
 801cc14:	f000 f944 	bl	801cea0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc18:	f7ff fd7e 	bl	801c718 <SUBGRF_GetPacketType>
 801cc1c:	4603      	mov	r3, r0
 801cc1e:	2b01      	cmp	r3, #1
 801cc20:	d10d      	bne.n	801cc3e <SUBGRF_GetRxBufferStatus+0x3e>
 801cc22:	4b0c      	ldr	r3, [pc, #48]	; (801cc54 <SUBGRF_GetRxBufferStatus+0x54>)
 801cc24:	781b      	ldrb	r3, [r3, #0]
 801cc26:	b2db      	uxtb	r3, r3
 801cc28:	2b01      	cmp	r3, #1
 801cc2a:	d108      	bne.n	801cc3e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc2c:	f240 7002 	movw	r0, #1794	; 0x702
 801cc30:	f000 f878 	bl	801cd24 <SUBGRF_ReadRegister>
 801cc34:	4603      	mov	r3, r0
 801cc36:	461a      	mov	r2, r3
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	701a      	strb	r2, [r3, #0]
 801cc3c:	e002      	b.n	801cc44 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc3e:	7b3a      	ldrb	r2, [r7, #12]
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cc44:	7b7a      	ldrb	r2, [r7, #13]
 801cc46:	683b      	ldr	r3, [r7, #0]
 801cc48:	701a      	strb	r2, [r3, #0]
}
 801cc4a:	bf00      	nop
 801cc4c:	3710      	adds	r7, #16
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd80      	pop	{r7, pc}
 801cc52:	bf00      	nop
 801cc54:	20001832 	.word	0x20001832

0801cc58 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cc58:	b580      	push	{r7, lr}
 801cc5a:	b084      	sub	sp, #16
 801cc5c:	af00      	add	r7, sp, #0
 801cc5e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cc60:	f107 030c 	add.w	r3, r7, #12
 801cc64:	2203      	movs	r2, #3
 801cc66:	4619      	mov	r1, r3
 801cc68:	2014      	movs	r0, #20
 801cc6a:	f000 f919 	bl	801cea0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cc6e:	f7ff fd53 	bl	801c718 <SUBGRF_GetPacketType>
 801cc72:	4603      	mov	r3, r0
 801cc74:	461a      	mov	r2, r3
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	781b      	ldrb	r3, [r3, #0]
 801cc7e:	2b00      	cmp	r3, #0
 801cc80:	d002      	beq.n	801cc88 <SUBGRF_GetPacketStatus+0x30>
 801cc82:	2b01      	cmp	r3, #1
 801cc84:	d013      	beq.n	801ccae <SUBGRF_GetPacketStatus+0x56>
 801cc86:	e02a      	b.n	801ccde <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cc88:	7b3a      	ldrb	r2, [r7, #12]
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cc8e:	7b7b      	ldrb	r3, [r7, #13]
 801cc90:	425b      	negs	r3, r3
 801cc92:	105b      	asrs	r3, r3, #1
 801cc94:	b25a      	sxtb	r2, r3
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801cc9a:	7bbb      	ldrb	r3, [r7, #14]
 801cc9c:	425b      	negs	r3, r3
 801cc9e:	105b      	asrs	r3, r3, #1
 801cca0:	b25a      	sxtb	r2, r3
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	2200      	movs	r2, #0
 801ccaa:	609a      	str	r2, [r3, #8]
            break;
 801ccac:	e020      	b.n	801ccf0 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ccae:	7b3b      	ldrb	r3, [r7, #12]
 801ccb0:	425b      	negs	r3, r3
 801ccb2:	105b      	asrs	r3, r3, #1
 801ccb4:	b25a      	sxtb	r2, r3
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ccba:	7b7b      	ldrb	r3, [r7, #13]
 801ccbc:	b25b      	sxtb	r3, r3
 801ccbe:	3302      	adds	r3, #2
 801ccc0:	109b      	asrs	r3, r3, #2
 801ccc2:	b25a      	sxtb	r2, r3
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801ccc8:	7bbb      	ldrb	r3, [r7, #14]
 801ccca:	425b      	negs	r3, r3
 801cccc:	105b      	asrs	r3, r3, #1
 801ccce:	b25a      	sxtb	r2, r3
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801ccd4:	4b08      	ldr	r3, [pc, #32]	; (801ccf8 <SUBGRF_GetPacketStatus+0xa0>)
 801ccd6:	681a      	ldr	r2, [r3, #0]
 801ccd8:	687b      	ldr	r3, [r7, #4]
 801ccda:	611a      	str	r2, [r3, #16]
            break;
 801ccdc:	e008      	b.n	801ccf0 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801ccde:	2214      	movs	r2, #20
 801cce0:	2100      	movs	r1, #0
 801cce2:	6878      	ldr	r0, [r7, #4]
 801cce4:	f000 fc03 	bl	801d4ee <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	220f      	movs	r2, #15
 801ccec:	701a      	strb	r2, [r3, #0]
            break;
 801ccee:	bf00      	nop
    }
}
 801ccf0:	bf00      	nop
 801ccf2:	3710      	adds	r7, #16
 801ccf4:	46bd      	mov	sp, r7
 801ccf6:	bd80      	pop	{r7, pc}
 801ccf8:	20001834 	.word	0x20001834

0801ccfc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801ccfc:	b580      	push	{r7, lr}
 801ccfe:	b082      	sub	sp, #8
 801cd00:	af00      	add	r7, sp, #0
 801cd02:	4603      	mov	r3, r0
 801cd04:	460a      	mov	r2, r1
 801cd06:	80fb      	strh	r3, [r7, #6]
 801cd08:	4613      	mov	r3, r2
 801cd0a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd0c:	1d7a      	adds	r2, r7, #5
 801cd0e:	88f9      	ldrh	r1, [r7, #6]
 801cd10:	2301      	movs	r3, #1
 801cd12:	4803      	ldr	r0, [pc, #12]	; (801cd20 <SUBGRF_WriteRegister+0x24>)
 801cd14:	f7ed fbda 	bl	800a4cc <HAL_SUBGHZ_WriteRegisters>
}
 801cd18:	bf00      	nop
 801cd1a:	3708      	adds	r7, #8
 801cd1c:	46bd      	mov	sp, r7
 801cd1e:	bd80      	pop	{r7, pc}
 801cd20:	2000038c 	.word	0x2000038c

0801cd24 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd24:	b580      	push	{r7, lr}
 801cd26:	b084      	sub	sp, #16
 801cd28:	af00      	add	r7, sp, #0
 801cd2a:	4603      	mov	r3, r0
 801cd2c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd2e:	f107 020f 	add.w	r2, r7, #15
 801cd32:	88f9      	ldrh	r1, [r7, #6]
 801cd34:	2301      	movs	r3, #1
 801cd36:	4804      	ldr	r0, [pc, #16]	; (801cd48 <SUBGRF_ReadRegister+0x24>)
 801cd38:	f7ed fc27 	bl	800a58a <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd3e:	4618      	mov	r0, r3
 801cd40:	3710      	adds	r7, #16
 801cd42:	46bd      	mov	sp, r7
 801cd44:	bd80      	pop	{r7, pc}
 801cd46:	bf00      	nop
 801cd48:	2000038c 	.word	0x2000038c

0801cd4c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b086      	sub	sp, #24
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	4603      	mov	r3, r0
 801cd54:	6039      	str	r1, [r7, #0]
 801cd56:	80fb      	strh	r3, [r7, #6]
 801cd58:	4613      	mov	r3, r2
 801cd5a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd5c:	f3ef 8310 	mrs	r3, PRIMASK
 801cd60:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd66:	b672      	cpsid	i
}
 801cd68:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cd6a:	88bb      	ldrh	r3, [r7, #4]
 801cd6c:	88f9      	ldrh	r1, [r7, #6]
 801cd6e:	683a      	ldr	r2, [r7, #0]
 801cd70:	4806      	ldr	r0, [pc, #24]	; (801cd8c <SUBGRF_WriteRegisters+0x40>)
 801cd72:	f7ed fbab 	bl	800a4cc <HAL_SUBGHZ_WriteRegisters>
 801cd76:	697b      	ldr	r3, [r7, #20]
 801cd78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd7a:	693b      	ldr	r3, [r7, #16]
 801cd7c:	f383 8810 	msr	PRIMASK, r3
}
 801cd80:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cd82:	bf00      	nop
 801cd84:	3718      	adds	r7, #24
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}
 801cd8a:	bf00      	nop
 801cd8c:	2000038c 	.word	0x2000038c

0801cd90 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b086      	sub	sp, #24
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	4603      	mov	r3, r0
 801cd98:	6039      	str	r1, [r7, #0]
 801cd9a:	80fb      	strh	r3, [r7, #6]
 801cd9c:	4613      	mov	r3, r2
 801cd9e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cda0:	f3ef 8310 	mrs	r3, PRIMASK
 801cda4:	60fb      	str	r3, [r7, #12]
  return(result);
 801cda6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cda8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdaa:	b672      	cpsid	i
}
 801cdac:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cdae:	88bb      	ldrh	r3, [r7, #4]
 801cdb0:	88f9      	ldrh	r1, [r7, #6]
 801cdb2:	683a      	ldr	r2, [r7, #0]
 801cdb4:	4806      	ldr	r0, [pc, #24]	; (801cdd0 <SUBGRF_ReadRegisters+0x40>)
 801cdb6:	f7ed fbe8 	bl	800a58a <HAL_SUBGHZ_ReadRegisters>
 801cdba:	697b      	ldr	r3, [r7, #20]
 801cdbc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	f383 8810 	msr	PRIMASK, r3
}
 801cdc4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdc6:	bf00      	nop
 801cdc8:	3718      	adds	r7, #24
 801cdca:	46bd      	mov	sp, r7
 801cdcc:	bd80      	pop	{r7, pc}
 801cdce:	bf00      	nop
 801cdd0:	2000038c 	.word	0x2000038c

0801cdd4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cdd4:	b580      	push	{r7, lr}
 801cdd6:	b086      	sub	sp, #24
 801cdd8:	af00      	add	r7, sp, #0
 801cdda:	4603      	mov	r3, r0
 801cddc:	6039      	str	r1, [r7, #0]
 801cdde:	71fb      	strb	r3, [r7, #7]
 801cde0:	4613      	mov	r3, r2
 801cde2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cde4:	f3ef 8310 	mrs	r3, PRIMASK
 801cde8:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdee:	b672      	cpsid	i
}
 801cdf0:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801cdf2:	79bb      	ldrb	r3, [r7, #6]
 801cdf4:	b29b      	uxth	r3, r3
 801cdf6:	79f9      	ldrb	r1, [r7, #7]
 801cdf8:	683a      	ldr	r2, [r7, #0]
 801cdfa:	4806      	ldr	r0, [pc, #24]	; (801ce14 <SUBGRF_WriteBuffer+0x40>)
 801cdfc:	f7ed fcd9 	bl	800a7b2 <HAL_SUBGHZ_WriteBuffer>
 801ce00:	697b      	ldr	r3, [r7, #20]
 801ce02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce04:	693b      	ldr	r3, [r7, #16]
 801ce06:	f383 8810 	msr	PRIMASK, r3
}
 801ce0a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce0c:	bf00      	nop
 801ce0e:	3718      	adds	r7, #24
 801ce10:	46bd      	mov	sp, r7
 801ce12:	bd80      	pop	{r7, pc}
 801ce14:	2000038c 	.word	0x2000038c

0801ce18 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce18:	b580      	push	{r7, lr}
 801ce1a:	b086      	sub	sp, #24
 801ce1c:	af00      	add	r7, sp, #0
 801ce1e:	4603      	mov	r3, r0
 801ce20:	6039      	str	r1, [r7, #0]
 801ce22:	71fb      	strb	r3, [r7, #7]
 801ce24:	4613      	mov	r3, r2
 801ce26:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce28:	f3ef 8310 	mrs	r3, PRIMASK
 801ce2c:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce2e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce32:	b672      	cpsid	i
}
 801ce34:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce36:	79bb      	ldrb	r3, [r7, #6]
 801ce38:	b29b      	uxth	r3, r3
 801ce3a:	79f9      	ldrb	r1, [r7, #7]
 801ce3c:	683a      	ldr	r2, [r7, #0]
 801ce3e:	4806      	ldr	r0, [pc, #24]	; (801ce58 <SUBGRF_ReadBuffer+0x40>)
 801ce40:	f7ed fd0a 	bl	800a858 <HAL_SUBGHZ_ReadBuffer>
 801ce44:	697b      	ldr	r3, [r7, #20]
 801ce46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce48:	693b      	ldr	r3, [r7, #16]
 801ce4a:	f383 8810 	msr	PRIMASK, r3
}
 801ce4e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce50:	bf00      	nop
 801ce52:	3718      	adds	r7, #24
 801ce54:	46bd      	mov	sp, r7
 801ce56:	bd80      	pop	{r7, pc}
 801ce58:	2000038c 	.word	0x2000038c

0801ce5c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b086      	sub	sp, #24
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	4603      	mov	r3, r0
 801ce64:	6039      	str	r1, [r7, #0]
 801ce66:	71fb      	strb	r3, [r7, #7]
 801ce68:	4613      	mov	r3, r2
 801ce6a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce6c:	f3ef 8310 	mrs	r3, PRIMASK
 801ce70:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce72:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce76:	b672      	cpsid	i
}
 801ce78:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ce7a:	88bb      	ldrh	r3, [r7, #4]
 801ce7c:	79f9      	ldrb	r1, [r7, #7]
 801ce7e:	683a      	ldr	r2, [r7, #0]
 801ce80:	4806      	ldr	r0, [pc, #24]	; (801ce9c <SUBGRF_WriteCommand+0x40>)
 801ce82:	f7ed fbe3 	bl	800a64c <HAL_SUBGHZ_ExecSetCmd>
 801ce86:	697b      	ldr	r3, [r7, #20]
 801ce88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce8a:	693b      	ldr	r3, [r7, #16]
 801ce8c:	f383 8810 	msr	PRIMASK, r3
}
 801ce90:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce92:	bf00      	nop
 801ce94:	3718      	adds	r7, #24
 801ce96:	46bd      	mov	sp, r7
 801ce98:	bd80      	pop	{r7, pc}
 801ce9a:	bf00      	nop
 801ce9c:	2000038c 	.word	0x2000038c

0801cea0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801cea0:	b580      	push	{r7, lr}
 801cea2:	b086      	sub	sp, #24
 801cea4:	af00      	add	r7, sp, #0
 801cea6:	4603      	mov	r3, r0
 801cea8:	6039      	str	r1, [r7, #0]
 801ceaa:	71fb      	strb	r3, [r7, #7]
 801ceac:	4613      	mov	r3, r2
 801ceae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ceb0:	f3ef 8310 	mrs	r3, PRIMASK
 801ceb4:	60fb      	str	r3, [r7, #12]
  return(result);
 801ceb6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ceb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ceba:	b672      	cpsid	i
}
 801cebc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801cebe:	88bb      	ldrh	r3, [r7, #4]
 801cec0:	79f9      	ldrb	r1, [r7, #7]
 801cec2:	683a      	ldr	r2, [r7, #0]
 801cec4:	4806      	ldr	r0, [pc, #24]	; (801cee0 <SUBGRF_ReadCommand+0x40>)
 801cec6:	f7ed fc20 	bl	800a70a <HAL_SUBGHZ_ExecGetCmd>
 801ceca:	697b      	ldr	r3, [r7, #20]
 801cecc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cece:	693b      	ldr	r3, [r7, #16]
 801ced0:	f383 8810 	msr	PRIMASK, r3
}
 801ced4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ced6:	bf00      	nop
 801ced8:	3718      	adds	r7, #24
 801ceda:	46bd      	mov	sp, r7
 801cedc:	bd80      	pop	{r7, pc}
 801cede:	bf00      	nop
 801cee0:	2000038c 	.word	0x2000038c

0801cee4 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b084      	sub	sp, #16
 801cee8:	af00      	add	r7, sp, #0
 801ceea:	4603      	mov	r3, r0
 801ceec:	460a      	mov	r2, r1
 801ceee:	71fb      	strb	r3, [r7, #7]
 801cef0:	4613      	mov	r3, r2
 801cef2:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cef4:	2301      	movs	r3, #1
 801cef6:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cef8:	79bb      	ldrb	r3, [r7, #6]
 801cefa:	2b01      	cmp	r3, #1
 801cefc:	d10d      	bne.n	801cf1a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cefe:	79fb      	ldrb	r3, [r7, #7]
 801cf00:	2b01      	cmp	r3, #1
 801cf02:	d104      	bne.n	801cf0e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf04:	2302      	movs	r3, #2
 801cf06:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf08:	2004      	movs	r0, #4
 801cf0a:	f000 f8ef 	bl	801d0ec <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf0e:	79fb      	ldrb	r3, [r7, #7]
 801cf10:	2b02      	cmp	r3, #2
 801cf12:	d107      	bne.n	801cf24 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf14:	2303      	movs	r3, #3
 801cf16:	73fb      	strb	r3, [r7, #15]
 801cf18:	e004      	b.n	801cf24 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf1a:	79bb      	ldrb	r3, [r7, #6]
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d101      	bne.n	801cf24 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf20:	2301      	movs	r3, #1
 801cf22:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf24:	7bfb      	ldrb	r3, [r7, #15]
 801cf26:	4618      	mov	r0, r3
 801cf28:	f7f0 fef3 	bl	800dd12 <RBI_ConfigRFSwitch>
}
 801cf2c:	bf00      	nop
 801cf2e:	3710      	adds	r7, #16
 801cf30:	46bd      	mov	sp, r7
 801cf32:	bd80      	pop	{r7, pc}

0801cf34 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf34:	b580      	push	{r7, lr}
 801cf36:	b084      	sub	sp, #16
 801cf38:	af00      	add	r7, sp, #0
 801cf3a:	4603      	mov	r3, r0
 801cf3c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf3e:	2301      	movs	r3, #1
 801cf40:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf42:	f7f0 fef4 	bl	800dd2e <RBI_GetTxConfig>
 801cf46:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cf48:	68bb      	ldr	r3, [r7, #8]
 801cf4a:	2b02      	cmp	r3, #2
 801cf4c:	d016      	beq.n	801cf7c <SUBGRF_SetRfTxPower+0x48>
 801cf4e:	68bb      	ldr	r3, [r7, #8]
 801cf50:	2b02      	cmp	r3, #2
 801cf52:	dc16      	bgt.n	801cf82 <SUBGRF_SetRfTxPower+0x4e>
 801cf54:	68bb      	ldr	r3, [r7, #8]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d003      	beq.n	801cf62 <SUBGRF_SetRfTxPower+0x2e>
 801cf5a:	68bb      	ldr	r3, [r7, #8]
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d00a      	beq.n	801cf76 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cf60:	e00f      	b.n	801cf82 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cf62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf66:	2b0f      	cmp	r3, #15
 801cf68:	dd02      	ble.n	801cf70 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cf6a:	2302      	movs	r3, #2
 801cf6c:	73fb      	strb	r3, [r7, #15]
            break;
 801cf6e:	e009      	b.n	801cf84 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cf70:	2301      	movs	r3, #1
 801cf72:	73fb      	strb	r3, [r7, #15]
            break;
 801cf74:	e006      	b.n	801cf84 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cf76:	2301      	movs	r3, #1
 801cf78:	73fb      	strb	r3, [r7, #15]
            break;
 801cf7a:	e003      	b.n	801cf84 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cf7c:	2302      	movs	r3, #2
 801cf7e:	73fb      	strb	r3, [r7, #15]
            break;
 801cf80:	e000      	b.n	801cf84 <SUBGRF_SetRfTxPower+0x50>
            break;
 801cf82:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cf84:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cf88:	7bfb      	ldrb	r3, [r7, #15]
 801cf8a:	2202      	movs	r2, #2
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	f7ff fbcd 	bl	801c72c <SUBGRF_SetTxParams>

    return paSelect;
 801cf92:	7bfb      	ldrb	r3, [r7, #15]
}
 801cf94:	4618      	mov	r0, r3
 801cf96:	3710      	adds	r7, #16
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	bd80      	pop	{r7, pc}

0801cf9c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cf9c:	b480      	push	{r7}
 801cf9e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cfa0:	2301      	movs	r3, #1
}
 801cfa2:	4618      	mov	r0, r3
 801cfa4:	46bd      	mov	sp, r7
 801cfa6:	bc80      	pop	{r7}
 801cfa8:	4770      	bx	lr
	...

0801cfac <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfac:	b580      	push	{r7, lr}
 801cfae:	b082      	sub	sp, #8
 801cfb0:	af00      	add	r7, sp, #0
 801cfb2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cfb4:	4b03      	ldr	r3, [pc, #12]	; (801cfc4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cfb6:	681b      	ldr	r3, [r3, #0]
 801cfb8:	2001      	movs	r0, #1
 801cfba:	4798      	blx	r3
}
 801cfbc:	bf00      	nop
 801cfbe:	3708      	adds	r7, #8
 801cfc0:	46bd      	mov	sp, r7
 801cfc2:	bd80      	pop	{r7, pc}
 801cfc4:	2000183c 	.word	0x2000183c

0801cfc8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfc8:	b580      	push	{r7, lr}
 801cfca:	b082      	sub	sp, #8
 801cfcc:	af00      	add	r7, sp, #0
 801cfce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cfd0:	4b03      	ldr	r3, [pc, #12]	; (801cfe0 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	2002      	movs	r0, #2
 801cfd6:	4798      	blx	r3
}
 801cfd8:	bf00      	nop
 801cfda:	3708      	adds	r7, #8
 801cfdc:	46bd      	mov	sp, r7
 801cfde:	bd80      	pop	{r7, pc}
 801cfe0:	2000183c 	.word	0x2000183c

0801cfe4 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfe4:	b580      	push	{r7, lr}
 801cfe6:	b082      	sub	sp, #8
 801cfe8:	af00      	add	r7, sp, #0
 801cfea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801cfec:	4b03      	ldr	r3, [pc, #12]	; (801cffc <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	2040      	movs	r0, #64	; 0x40
 801cff2:	4798      	blx	r3
}
 801cff4:	bf00      	nop
 801cff6:	3708      	adds	r7, #8
 801cff8:	46bd      	mov	sp, r7
 801cffa:	bd80      	pop	{r7, pc}
 801cffc:	2000183c 	.word	0x2000183c

0801d000 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b082      	sub	sp, #8
 801d004:	af00      	add	r7, sp, #0
 801d006:	6078      	str	r0, [r7, #4]
 801d008:	460b      	mov	r3, r1
 801d00a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d00c:	78fb      	ldrb	r3, [r7, #3]
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d002      	beq.n	801d018 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d012:	2b01      	cmp	r3, #1
 801d014:	d005      	beq.n	801d022 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d016:	e00a      	b.n	801d02e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d018:	4b07      	ldr	r3, [pc, #28]	; (801d038 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d01a:	681b      	ldr	r3, [r3, #0]
 801d01c:	2080      	movs	r0, #128	; 0x80
 801d01e:	4798      	blx	r3
            break;
 801d020:	e005      	b.n	801d02e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d022:	4b05      	ldr	r3, [pc, #20]	; (801d038 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d024:	681b      	ldr	r3, [r3, #0]
 801d026:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d02a:	4798      	blx	r3
            break;
 801d02c:	bf00      	nop
    }
}
 801d02e:	bf00      	nop
 801d030:	3708      	adds	r7, #8
 801d032:	46bd      	mov	sp, r7
 801d034:	bd80      	pop	{r7, pc}
 801d036:	bf00      	nop
 801d038:	2000183c 	.word	0x2000183c

0801d03c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d03c:	b580      	push	{r7, lr}
 801d03e:	b082      	sub	sp, #8
 801d040:	af00      	add	r7, sp, #0
 801d042:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d044:	4b04      	ldr	r3, [pc, #16]	; (801d058 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d04c:	4798      	blx	r3
}
 801d04e:	bf00      	nop
 801d050:	3708      	adds	r7, #8
 801d052:	46bd      	mov	sp, r7
 801d054:	bd80      	pop	{r7, pc}
 801d056:	bf00      	nop
 801d058:	2000183c 	.word	0x2000183c

0801d05c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d05c:	b580      	push	{r7, lr}
 801d05e:	b082      	sub	sp, #8
 801d060:	af00      	add	r7, sp, #0
 801d062:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d064:	4b03      	ldr	r3, [pc, #12]	; (801d074 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d066:	681b      	ldr	r3, [r3, #0]
 801d068:	2020      	movs	r0, #32
 801d06a:	4798      	blx	r3
}
 801d06c:	bf00      	nop
 801d06e:	3708      	adds	r7, #8
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}
 801d074:	2000183c 	.word	0x2000183c

0801d078 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d078:	b580      	push	{r7, lr}
 801d07a:	b082      	sub	sp, #8
 801d07c:	af00      	add	r7, sp, #0
 801d07e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d080:	4b03      	ldr	r3, [pc, #12]	; (801d090 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d082:	681b      	ldr	r3, [r3, #0]
 801d084:	2004      	movs	r0, #4
 801d086:	4798      	blx	r3
}
 801d088:	bf00      	nop
 801d08a:	3708      	adds	r7, #8
 801d08c:	46bd      	mov	sp, r7
 801d08e:	bd80      	pop	{r7, pc}
 801d090:	2000183c 	.word	0x2000183c

0801d094 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d094:	b580      	push	{r7, lr}
 801d096:	b082      	sub	sp, #8
 801d098:	af00      	add	r7, sp, #0
 801d09a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d09c:	4b03      	ldr	r3, [pc, #12]	; (801d0ac <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d09e:	681b      	ldr	r3, [r3, #0]
 801d0a0:	2008      	movs	r0, #8
 801d0a2:	4798      	blx	r3
}
 801d0a4:	bf00      	nop
 801d0a6:	3708      	adds	r7, #8
 801d0a8:	46bd      	mov	sp, r7
 801d0aa:	bd80      	pop	{r7, pc}
 801d0ac:	2000183c 	.word	0x2000183c

0801d0b0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	b082      	sub	sp, #8
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d0b8:	4b03      	ldr	r3, [pc, #12]	; (801d0c8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	2010      	movs	r0, #16
 801d0be:	4798      	blx	r3
}
 801d0c0:	bf00      	nop
 801d0c2:	3708      	adds	r7, #8
 801d0c4:	46bd      	mov	sp, r7
 801d0c6:	bd80      	pop	{r7, pc}
 801d0c8:	2000183c 	.word	0x2000183c

0801d0cc <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0cc:	b580      	push	{r7, lr}
 801d0ce:	b082      	sub	sp, #8
 801d0d0:	af00      	add	r7, sp, #0
 801d0d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d0d4:	4b04      	ldr	r3, [pc, #16]	; (801d0e8 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d0d6:	681b      	ldr	r3, [r3, #0]
 801d0d8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d0dc:	4798      	blx	r3
}
 801d0de:	bf00      	nop
 801d0e0:	3708      	adds	r7, #8
 801d0e2:	46bd      	mov	sp, r7
 801d0e4:	bd80      	pop	{r7, pc}
 801d0e6:	bf00      	nop
 801d0e8:	2000183c 	.word	0x2000183c

0801d0ec <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b084      	sub	sp, #16
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	4603      	mov	r3, r0
 801d0f4:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d0f6:	f7f0 fe28 	bl	800dd4a <RBI_IsDCDC>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	2b01      	cmp	r3, #1
 801d0fe:	d112      	bne.n	801d126 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d100:	f640 1023 	movw	r0, #2339	; 0x923
 801d104:	f7ff fe0e 	bl	801cd24 <SUBGRF_ReadRegister>
 801d108:	4603      	mov	r3, r0
 801d10a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d10c:	7bfb      	ldrb	r3, [r7, #15]
 801d10e:	f023 0306 	bic.w	r3, r3, #6
 801d112:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d114:	7bfa      	ldrb	r2, [r7, #15]
 801d116:	79fb      	ldrb	r3, [r7, #7]
 801d118:	4313      	orrs	r3, r2
 801d11a:	b2db      	uxtb	r3, r3
 801d11c:	4619      	mov	r1, r3
 801d11e:	f640 1023 	movw	r0, #2339	; 0x923
 801d122:	f7ff fdeb 	bl	801ccfc <SUBGRF_WriteRegister>
  }
}
 801d126:	bf00      	nop
 801d128:	3710      	adds	r7, #16
 801d12a:	46bd      	mov	sp, r7
 801d12c:	bd80      	pop	{r7, pc}
	...

0801d130 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d130:	b480      	push	{r7}
 801d132:	b085      	sub	sp, #20
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	2b00      	cmp	r3, #0
 801d13c:	d101      	bne.n	801d142 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d13e:	231f      	movs	r3, #31
 801d140:	e016      	b.n	801d170 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d142:	2300      	movs	r3, #0
 801d144:	73fb      	strb	r3, [r7, #15]
 801d146:	e00f      	b.n	801d168 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d148:	7bfb      	ldrb	r3, [r7, #15]
 801d14a:	4a0c      	ldr	r2, [pc, #48]	; (801d17c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d14c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d150:	687a      	ldr	r2, [r7, #4]
 801d152:	429a      	cmp	r2, r3
 801d154:	d205      	bcs.n	801d162 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d156:	7bfb      	ldrb	r3, [r7, #15]
 801d158:	4a08      	ldr	r2, [pc, #32]	; (801d17c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d15a:	00db      	lsls	r3, r3, #3
 801d15c:	4413      	add	r3, r2
 801d15e:	791b      	ldrb	r3, [r3, #4]
 801d160:	e006      	b.n	801d170 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d162:	7bfb      	ldrb	r3, [r7, #15]
 801d164:	3301      	adds	r3, #1
 801d166:	73fb      	strb	r3, [r7, #15]
 801d168:	7bfb      	ldrb	r3, [r7, #15]
 801d16a:	2b15      	cmp	r3, #21
 801d16c:	d9ec      	bls.n	801d148 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d16e:	e7fe      	b.n	801d16e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d170:	4618      	mov	r0, r3
 801d172:	3714      	adds	r7, #20
 801d174:	46bd      	mov	sp, r7
 801d176:	bc80      	pop	{r7}
 801d178:	4770      	bx	lr
 801d17a:	bf00      	nop
 801d17c:	0801fa68 	.word	0x0801fa68

0801d180 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d180:	b580      	push	{r7, lr}
 801d182:	b08a      	sub	sp, #40	; 0x28
 801d184:	af00      	add	r7, sp, #0
 801d186:	6078      	str	r0, [r7, #4]
 801d188:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d18a:	4b35      	ldr	r3, [pc, #212]	; (801d260 <SUBGRF_GetCFO+0xe0>)
 801d18c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d18e:	f640 0007 	movw	r0, #2055	; 0x807
 801d192:	f7ff fdc7 	bl	801cd24 <SUBGRF_ReadRegister>
 801d196:	4603      	mov	r3, r0
 801d198:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d19a:	7ffb      	ldrb	r3, [r7, #31]
 801d19c:	08db      	lsrs	r3, r3, #3
 801d19e:	b2db      	uxtb	r3, r3
 801d1a0:	f003 0303 	and.w	r3, r3, #3
 801d1a4:	3328      	adds	r3, #40	; 0x28
 801d1a6:	443b      	add	r3, r7
 801d1a8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1ac:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1ae:	7ffb      	ldrb	r3, [r7, #31]
 801d1b0:	f003 0307 	and.w	r3, r3, #7
 801d1b4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d1b6:	7fba      	ldrb	r2, [r7, #30]
 801d1b8:	7f7b      	ldrb	r3, [r7, #29]
 801d1ba:	3301      	adds	r3, #1
 801d1bc:	fa02 f303 	lsl.w	r3, r2, r3
 801d1c0:	461a      	mov	r2, r3
 801d1c2:	4b28      	ldr	r3, [pc, #160]	; (801d264 <SUBGRF_GetCFO+0xe4>)
 801d1c4:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1c8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d1ca:	69ba      	ldr	r2, [r7, #24]
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1d2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d1d4:	2301      	movs	r3, #1
 801d1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d1da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1de:	697a      	ldr	r2, [r7, #20]
 801d1e0:	fb02 f303 	mul.w	r3, r2, r3
 801d1e4:	2b07      	cmp	r3, #7
 801d1e6:	d802      	bhi.n	801d1ee <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d1e8:	2302      	movs	r3, #2
 801d1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d1ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1f2:	697a      	ldr	r2, [r7, #20]
 801d1f4:	fb02 f303 	mul.w	r3, r2, r3
 801d1f8:	2b03      	cmp	r3, #3
 801d1fa:	d802      	bhi.n	801d202 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d1fc:	2304      	movs	r3, #4
 801d1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d202:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d206:	69bb      	ldr	r3, [r7, #24]
 801d208:	fb02 f303 	mul.w	r3, r2, r3
 801d20c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d20e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d212:	f7ff fd87 	bl	801cd24 <SUBGRF_ReadRegister>
 801d216:	4603      	mov	r3, r0
 801d218:	021b      	lsls	r3, r3, #8
 801d21a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d21e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d220:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d224:	f7ff fd7e 	bl	801cd24 <SUBGRF_ReadRegister>
 801d228:	4603      	mov	r3, r0
 801d22a:	461a      	mov	r2, r3
 801d22c:	6a3b      	ldr	r3, [r7, #32]
 801d22e:	4313      	orrs	r3, r2
 801d230:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d232:	6a3b      	ldr	r3, [r7, #32]
 801d234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d238:	2b00      	cmp	r3, #0
 801d23a:	d005      	beq.n	801d248 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d23c:	6a3b      	ldr	r3, [r7, #32]
 801d23e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d242:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d246:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d248:	693b      	ldr	r3, [r7, #16]
 801d24a:	095b      	lsrs	r3, r3, #5
 801d24c:	6a3a      	ldr	r2, [r7, #32]
 801d24e:	fb02 f303 	mul.w	r3, r2, r3
 801d252:	11da      	asrs	r2, r3, #7
 801d254:	683b      	ldr	r3, [r7, #0]
 801d256:	601a      	str	r2, [r3, #0]
}
 801d258:	bf00      	nop
 801d25a:	3728      	adds	r7, #40	; 0x28
 801d25c:	46bd      	mov	sp, r7
 801d25e:	bd80      	pop	{r7, pc}
 801d260:	0c0a0804 	.word	0x0c0a0804
 801d264:	01e84800 	.word	0x01e84800

0801d268 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d268:	b480      	push	{r7}
 801d26a:	b087      	sub	sp, #28
 801d26c:	af00      	add	r7, sp, #0
 801d26e:	4603      	mov	r3, r0
 801d270:	60b9      	str	r1, [r7, #8]
 801d272:	607a      	str	r2, [r7, #4]
 801d274:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d276:	2300      	movs	r3, #0
 801d278:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d27a:	f04f 33ff 	mov.w	r3, #4294967295
 801d27e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d280:	697b      	ldr	r3, [r7, #20]
}
 801d282:	4618      	mov	r0, r3
 801d284:	371c      	adds	r7, #28
 801d286:	46bd      	mov	sp, r7
 801d288:	bc80      	pop	{r7}
 801d28a:	4770      	bx	lr

0801d28c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d28c:	b480      	push	{r7}
 801d28e:	b087      	sub	sp, #28
 801d290:	af00      	add	r7, sp, #0
 801d292:	4603      	mov	r3, r0
 801d294:	60b9      	str	r1, [r7, #8]
 801d296:	607a      	str	r2, [r7, #4]
 801d298:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d29a:	2300      	movs	r3, #0
 801d29c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d29e:	f04f 33ff 	mov.w	r3, #4294967295
 801d2a2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2a4:	697b      	ldr	r3, [r7, #20]
}
 801d2a6:	4618      	mov	r0, r3
 801d2a8:	371c      	adds	r7, #28
 801d2aa:	46bd      	mov	sp, r7
 801d2ac:	bc80      	pop	{r7}
 801d2ae:	4770      	bx	lr

0801d2b0 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d2b0:	b480      	push	{r7}
 801d2b2:	b085      	sub	sp, #20
 801d2b4:	af00      	add	r7, sp, #0
 801d2b6:	60f8      	str	r0, [r7, #12]
 801d2b8:	60b9      	str	r1, [r7, #8]
 801d2ba:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d2bc:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d2c0:	4618      	mov	r0, r3
 801d2c2:	3714      	adds	r7, #20
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	bc80      	pop	{r7}
 801d2c8:	4770      	bx	lr

0801d2ca <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d2ca:	b480      	push	{r7}
 801d2cc:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d2ce:	bf00      	nop
 801d2d0:	46bd      	mov	sp, r7
 801d2d2:	bc80      	pop	{r7}
 801d2d4:	4770      	bx	lr

0801d2d6 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d2d6:	b480      	push	{r7}
 801d2d8:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d2da:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d2dc:	4618      	mov	r0, r3
 801d2de:	46bd      	mov	sp, r7
 801d2e0:	bc80      	pop	{r7}
 801d2e2:	4770      	bx	lr

0801d2e4 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d2e4:	b480      	push	{r7}
 801d2e6:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d2e8:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d2ea:	4618      	mov	r0, r3
 801d2ec:	46bd      	mov	sp, r7
 801d2ee:	bc80      	pop	{r7}
 801d2f0:	4770      	bx	lr

0801d2f2 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d2f2:	b480      	push	{r7}
 801d2f4:	b083      	sub	sp, #12
 801d2f6:	af00      	add	r7, sp, #0
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d2fc:	bf00      	nop
 801d2fe:	370c      	adds	r7, #12
 801d300:	46bd      	mov	sp, r7
 801d302:	bc80      	pop	{r7}
 801d304:	4770      	bx	lr

0801d306 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d306:	b480      	push	{r7}
 801d308:	b087      	sub	sp, #28
 801d30a:	af00      	add	r7, sp, #0
 801d30c:	60f8      	str	r0, [r7, #12]
 801d30e:	460b      	mov	r3, r1
 801d310:	607a      	str	r2, [r7, #4]
 801d312:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d314:	f04f 33ff 	mov.w	r3, #4294967295
 801d318:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d31a:	697b      	ldr	r3, [r7, #20]
}
 801d31c:	4618      	mov	r0, r3
 801d31e:	371c      	adds	r7, #28
 801d320:	46bd      	mov	sp, r7
 801d322:	bc80      	pop	{r7}
 801d324:	4770      	bx	lr

0801d326 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d326:	b480      	push	{r7}
 801d328:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d32a:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d32e:	4618      	mov	r0, r3
 801d330:	46bd      	mov	sp, r7
 801d332:	bc80      	pop	{r7}
 801d334:	4770      	bx	lr

0801d336 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d336:	b480      	push	{r7}
 801d338:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d33a:	bf00      	nop
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bc80      	pop	{r7}
 801d340:	4770      	bx	lr

0801d342 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d342:	b480      	push	{r7}
 801d344:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d346:	bf00      	nop
 801d348:	46bd      	mov	sp, r7
 801d34a:	bc80      	pop	{r7}
 801d34c:	4770      	bx	lr

0801d34e <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d34e:	b480      	push	{r7}
 801d350:	b083      	sub	sp, #12
 801d352:	af00      	add	r7, sp, #0
 801d354:	4603      	mov	r3, r0
 801d356:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d358:	bf00      	nop
 801d35a:	370c      	adds	r7, #12
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bc80      	pop	{r7}
 801d360:	4770      	bx	lr
	...

0801d364 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d364:	b480      	push	{r7}
 801d366:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d368:	4b04      	ldr	r3, [pc, #16]	; (801d37c <UTIL_LPM_Init+0x18>)
 801d36a:	2200      	movs	r2, #0
 801d36c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d36e:	4b04      	ldr	r3, [pc, #16]	; (801d380 <UTIL_LPM_Init+0x1c>)
 801d370:	2200      	movs	r2, #0
 801d372:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d374:	bf00      	nop
 801d376:	46bd      	mov	sp, r7
 801d378:	bc80      	pop	{r7}
 801d37a:	4770      	bx	lr
 801d37c:	20001840 	.word	0x20001840
 801d380:	20001844 	.word	0x20001844

0801d384 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d384:	b480      	push	{r7}
 801d386:	b087      	sub	sp, #28
 801d388:	af00      	add	r7, sp, #0
 801d38a:	6078      	str	r0, [r7, #4]
 801d38c:	460b      	mov	r3, r1
 801d38e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d390:	f3ef 8310 	mrs	r3, PRIMASK
 801d394:	613b      	str	r3, [r7, #16]
  return(result);
 801d396:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d398:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d39a:	b672      	cpsid	i
}
 801d39c:	bf00      	nop
  
  switch( state )
 801d39e:	78fb      	ldrb	r3, [r7, #3]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d008      	beq.n	801d3b6 <UTIL_LPM_SetStopMode+0x32>
 801d3a4:	2b01      	cmp	r3, #1
 801d3a6:	d10e      	bne.n	801d3c6 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3a8:	4b0d      	ldr	r3, [pc, #52]	; (801d3e0 <UTIL_LPM_SetStopMode+0x5c>)
 801d3aa:	681a      	ldr	r2, [r3, #0]
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	4313      	orrs	r3, r2
 801d3b0:	4a0b      	ldr	r2, [pc, #44]	; (801d3e0 <UTIL_LPM_SetStopMode+0x5c>)
 801d3b2:	6013      	str	r3, [r2, #0]
      break;
 801d3b4:	e008      	b.n	801d3c8 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3b6:	687b      	ldr	r3, [r7, #4]
 801d3b8:	43da      	mvns	r2, r3
 801d3ba:	4b09      	ldr	r3, [pc, #36]	; (801d3e0 <UTIL_LPM_SetStopMode+0x5c>)
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	4013      	ands	r3, r2
 801d3c0:	4a07      	ldr	r2, [pc, #28]	; (801d3e0 <UTIL_LPM_SetStopMode+0x5c>)
 801d3c2:	6013      	str	r3, [r2, #0]
      break;
 801d3c4:	e000      	b.n	801d3c8 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d3c6:	bf00      	nop
 801d3c8:	697b      	ldr	r3, [r7, #20]
 801d3ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3cc:	68fb      	ldr	r3, [r7, #12]
 801d3ce:	f383 8810 	msr	PRIMASK, r3
}
 801d3d2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d3d4:	bf00      	nop
 801d3d6:	371c      	adds	r7, #28
 801d3d8:	46bd      	mov	sp, r7
 801d3da:	bc80      	pop	{r7}
 801d3dc:	4770      	bx	lr
 801d3de:	bf00      	nop
 801d3e0:	20001840 	.word	0x20001840

0801d3e4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3e4:	b480      	push	{r7}
 801d3e6:	b087      	sub	sp, #28
 801d3e8:	af00      	add	r7, sp, #0
 801d3ea:	6078      	str	r0, [r7, #4]
 801d3ec:	460b      	mov	r3, r1
 801d3ee:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3f0:	f3ef 8310 	mrs	r3, PRIMASK
 801d3f4:	613b      	str	r3, [r7, #16]
  return(result);
 801d3f6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3fa:	b672      	cpsid	i
}
 801d3fc:	bf00      	nop
  
  switch(state)
 801d3fe:	78fb      	ldrb	r3, [r7, #3]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d008      	beq.n	801d416 <UTIL_LPM_SetOffMode+0x32>
 801d404:	2b01      	cmp	r3, #1
 801d406:	d10e      	bne.n	801d426 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d408:	4b0d      	ldr	r3, [pc, #52]	; (801d440 <UTIL_LPM_SetOffMode+0x5c>)
 801d40a:	681a      	ldr	r2, [r3, #0]
 801d40c:	687b      	ldr	r3, [r7, #4]
 801d40e:	4313      	orrs	r3, r2
 801d410:	4a0b      	ldr	r2, [pc, #44]	; (801d440 <UTIL_LPM_SetOffMode+0x5c>)
 801d412:	6013      	str	r3, [r2, #0]
      break;
 801d414:	e008      	b.n	801d428 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d416:	687b      	ldr	r3, [r7, #4]
 801d418:	43da      	mvns	r2, r3
 801d41a:	4b09      	ldr	r3, [pc, #36]	; (801d440 <UTIL_LPM_SetOffMode+0x5c>)
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	4013      	ands	r3, r2
 801d420:	4a07      	ldr	r2, [pc, #28]	; (801d440 <UTIL_LPM_SetOffMode+0x5c>)
 801d422:	6013      	str	r3, [r2, #0]
      break;
 801d424:	e000      	b.n	801d428 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d426:	bf00      	nop
 801d428:	697b      	ldr	r3, [r7, #20]
 801d42a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d42c:	68fb      	ldr	r3, [r7, #12]
 801d42e:	f383 8810 	msr	PRIMASK, r3
}
 801d432:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d434:	bf00      	nop
 801d436:	371c      	adds	r7, #28
 801d438:	46bd      	mov	sp, r7
 801d43a:	bc80      	pop	{r7}
 801d43c:	4770      	bx	lr
 801d43e:	bf00      	nop
 801d440:	20001844 	.word	0x20001844

0801d444 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d444:	b580      	push	{r7, lr}
 801d446:	b084      	sub	sp, #16
 801d448:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d44a:	f3ef 8310 	mrs	r3, PRIMASK
 801d44e:	60bb      	str	r3, [r7, #8]
  return(result);
 801d450:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d452:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d454:	b672      	cpsid	i
}
 801d456:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d458:	4b12      	ldr	r3, [pc, #72]	; (801d4a4 <UTIL_LPM_EnterLowPower+0x60>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d006      	beq.n	801d46e <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d460:	4b11      	ldr	r3, [pc, #68]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d466:	4b10      	ldr	r3, [pc, #64]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d468:	685b      	ldr	r3, [r3, #4]
 801d46a:	4798      	blx	r3
 801d46c:	e010      	b.n	801d490 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d46e:	4b0f      	ldr	r3, [pc, #60]	; (801d4ac <UTIL_LPM_EnterLowPower+0x68>)
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d006      	beq.n	801d484 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d476:	4b0c      	ldr	r3, [pc, #48]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d478:	689b      	ldr	r3, [r3, #8]
 801d47a:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d47c:	4b0a      	ldr	r3, [pc, #40]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d47e:	68db      	ldr	r3, [r3, #12]
 801d480:	4798      	blx	r3
 801d482:	e005      	b.n	801d490 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d484:	4b08      	ldr	r3, [pc, #32]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d486:	691b      	ldr	r3, [r3, #16]
 801d488:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d48a:	4b07      	ldr	r3, [pc, #28]	; (801d4a8 <UTIL_LPM_EnterLowPower+0x64>)
 801d48c:	695b      	ldr	r3, [r3, #20]
 801d48e:	4798      	blx	r3
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	f383 8810 	msr	PRIMASK, r3
}
 801d49a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d49c:	bf00      	nop
 801d49e:	3710      	adds	r7, #16
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	bd80      	pop	{r7, pc}
 801d4a4:	20001840 	.word	0x20001840
 801d4a8:	0801f4dc 	.word	0x0801f4dc
 801d4ac:	20001844 	.word	0x20001844

0801d4b0 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4b0:	b480      	push	{r7}
 801d4b2:	b087      	sub	sp, #28
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	60f8      	str	r0, [r7, #12]
 801d4b8:	60b9      	str	r1, [r7, #8]
 801d4ba:	4613      	mov	r3, r2
 801d4bc:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d4c2:	68bb      	ldr	r3, [r7, #8]
 801d4c4:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d4c6:	e007      	b.n	801d4d8 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d4c8:	693a      	ldr	r2, [r7, #16]
 801d4ca:	1c53      	adds	r3, r2, #1
 801d4cc:	613b      	str	r3, [r7, #16]
 801d4ce:	697b      	ldr	r3, [r7, #20]
 801d4d0:	1c59      	adds	r1, r3, #1
 801d4d2:	6179      	str	r1, [r7, #20]
 801d4d4:	7812      	ldrb	r2, [r2, #0]
 801d4d6:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d4d8:	88fb      	ldrh	r3, [r7, #6]
 801d4da:	1e5a      	subs	r2, r3, #1
 801d4dc:	80fa      	strh	r2, [r7, #6]
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d1f2      	bne.n	801d4c8 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d4e2:	bf00      	nop
 801d4e4:	bf00      	nop
 801d4e6:	371c      	adds	r7, #28
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bc80      	pop	{r7}
 801d4ec:	4770      	bx	lr

0801d4ee <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d4ee:	b480      	push	{r7}
 801d4f0:	b085      	sub	sp, #20
 801d4f2:	af00      	add	r7, sp, #0
 801d4f4:	6078      	str	r0, [r7, #4]
 801d4f6:	460b      	mov	r3, r1
 801d4f8:	70fb      	strb	r3, [r7, #3]
 801d4fa:	4613      	mov	r3, r2
 801d4fc:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d4fe:	687b      	ldr	r3, [r7, #4]
 801d500:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d502:	e004      	b.n	801d50e <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d504:	68fb      	ldr	r3, [r7, #12]
 801d506:	1c5a      	adds	r2, r3, #1
 801d508:	60fa      	str	r2, [r7, #12]
 801d50a:	78fa      	ldrb	r2, [r7, #3]
 801d50c:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d50e:	883b      	ldrh	r3, [r7, #0]
 801d510:	1e5a      	subs	r2, r3, #1
 801d512:	803a      	strh	r2, [r7, #0]
 801d514:	2b00      	cmp	r3, #0
 801d516:	d1f5      	bne.n	801d504 <UTIL_MEM_set_8+0x16>
  }
}
 801d518:	bf00      	nop
 801d51a:	bf00      	nop
 801d51c:	3714      	adds	r7, #20
 801d51e:	46bd      	mov	sp, r7
 801d520:	bc80      	pop	{r7}
 801d522:	4770      	bx	lr

0801d524 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d524:	b082      	sub	sp, #8
 801d526:	b480      	push	{r7}
 801d528:	b087      	sub	sp, #28
 801d52a:	af00      	add	r7, sp, #0
 801d52c:	60f8      	str	r0, [r7, #12]
 801d52e:	1d38      	adds	r0, r7, #4
 801d530:	e880 0006 	stmia.w	r0, {r1, r2}
 801d534:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d536:	2300      	movs	r3, #0
 801d538:	613b      	str	r3, [r7, #16]
 801d53a:	2300      	movs	r3, #0
 801d53c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d53e:	687a      	ldr	r2, [r7, #4]
 801d540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d542:	4413      	add	r3, r2
 801d544:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d546:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d54a:	b29a      	uxth	r2, r3
 801d54c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d550:	b29b      	uxth	r3, r3
 801d552:	4413      	add	r3, r2
 801d554:	b29b      	uxth	r3, r3
 801d556:	b21b      	sxth	r3, r3
 801d558:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d55a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d55e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d562:	db0a      	blt.n	801d57a <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d564:	693b      	ldr	r3, [r7, #16]
 801d566:	3301      	adds	r3, #1
 801d568:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d56a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d56e:	b29b      	uxth	r3, r3
 801d570:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d574:	b29b      	uxth	r3, r3
 801d576:	b21b      	sxth	r3, r3
 801d578:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	461a      	mov	r2, r3
 801d57e:	f107 0310 	add.w	r3, r7, #16
 801d582:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d586:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d58a:	68f8      	ldr	r0, [r7, #12]
 801d58c:	371c      	adds	r7, #28
 801d58e:	46bd      	mov	sp, r7
 801d590:	bc80      	pop	{r7}
 801d592:	b002      	add	sp, #8
 801d594:	4770      	bx	lr

0801d596 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d596:	b082      	sub	sp, #8
 801d598:	b480      	push	{r7}
 801d59a:	b087      	sub	sp, #28
 801d59c:	af00      	add	r7, sp, #0
 801d59e:	60f8      	str	r0, [r7, #12]
 801d5a0:	1d38      	adds	r0, r7, #4
 801d5a2:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5a6:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5a8:	2300      	movs	r3, #0
 801d5aa:	613b      	str	r3, [r7, #16]
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5b0:	687a      	ldr	r2, [r7, #4]
 801d5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5b4:	1ad3      	subs	r3, r2, r3
 801d5b6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d5bc:	b29a      	uxth	r2, r3
 801d5be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d5c2:	b29b      	uxth	r3, r3
 801d5c4:	1ad3      	subs	r3, r2, r3
 801d5c6:	b29b      	uxth	r3, r3
 801d5c8:	b21b      	sxth	r3, r3
 801d5ca:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d5cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	da0a      	bge.n	801d5ea <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d5d4:	693b      	ldr	r3, [r7, #16]
 801d5d6:	3b01      	subs	r3, #1
 801d5d8:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d5da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5de:	b29b      	uxth	r3, r3
 801d5e0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d5e4:	b29b      	uxth	r3, r3
 801d5e6:	b21b      	sxth	r3, r3
 801d5e8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	461a      	mov	r2, r3
 801d5ee:	f107 0310 	add.w	r3, r7, #16
 801d5f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d5f6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d5fa:	68f8      	ldr	r0, [r7, #12]
 801d5fc:	371c      	adds	r7, #28
 801d5fe:	46bd      	mov	sp, r7
 801d600:	bc80      	pop	{r7}
 801d602:	b002      	add	sp, #8
 801d604:	4770      	bx	lr
	...

0801d608 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d608:	b580      	push	{r7, lr}
 801d60a:	b088      	sub	sp, #32
 801d60c:	af02      	add	r7, sp, #8
 801d60e:	463b      	mov	r3, r7
 801d610:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d614:	2300      	movs	r3, #0
 801d616:	60bb      	str	r3, [r7, #8]
 801d618:	2300      	movs	r3, #0
 801d61a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d61c:	4b10      	ldr	r3, [pc, #64]	; (801d660 <SysTimeSet+0x58>)
 801d61e:	691b      	ldr	r3, [r3, #16]
 801d620:	f107 0208 	add.w	r2, r7, #8
 801d624:	3204      	adds	r2, #4
 801d626:	4610      	mov	r0, r2
 801d628:	4798      	blx	r3
 801d62a:	4603      	mov	r3, r0
 801d62c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d62e:	f107 0010 	add.w	r0, r7, #16
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	9300      	str	r3, [sp, #0]
 801d636:	68bb      	ldr	r3, [r7, #8]
 801d638:	463a      	mov	r2, r7
 801d63a:	ca06      	ldmia	r2, {r1, r2}
 801d63c:	f7ff ffab 	bl	801d596 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d640:	4b07      	ldr	r3, [pc, #28]	; (801d660 <SysTimeSet+0x58>)
 801d642:	681b      	ldr	r3, [r3, #0]
 801d644:	693a      	ldr	r2, [r7, #16]
 801d646:	4610      	mov	r0, r2
 801d648:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d64a:	4b05      	ldr	r3, [pc, #20]	; (801d660 <SysTimeSet+0x58>)
 801d64c:	689b      	ldr	r3, [r3, #8]
 801d64e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d652:	4610      	mov	r0, r2
 801d654:	4798      	blx	r3
}
 801d656:	bf00      	nop
 801d658:	3718      	adds	r7, #24
 801d65a:	46bd      	mov	sp, r7
 801d65c:	bd80      	pop	{r7, pc}
 801d65e:	bf00      	nop
 801d660:	0801f5c0 	.word	0x0801f5c0

0801d664 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d664:	b580      	push	{r7, lr}
 801d666:	b08a      	sub	sp, #40	; 0x28
 801d668:	af02      	add	r7, sp, #8
 801d66a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d66c:	2300      	movs	r3, #0
 801d66e:	61bb      	str	r3, [r7, #24]
 801d670:	2300      	movs	r3, #0
 801d672:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d674:	2300      	movs	r3, #0
 801d676:	613b      	str	r3, [r7, #16]
 801d678:	2300      	movs	r3, #0
 801d67a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d67c:	4b14      	ldr	r3, [pc, #80]	; (801d6d0 <SysTimeGet+0x6c>)
 801d67e:	691b      	ldr	r3, [r3, #16]
 801d680:	f107 0218 	add.w	r2, r7, #24
 801d684:	3204      	adds	r2, #4
 801d686:	4610      	mov	r0, r2
 801d688:	4798      	blx	r3
 801d68a:	4603      	mov	r3, r0
 801d68c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d68e:	4b10      	ldr	r3, [pc, #64]	; (801d6d0 <SysTimeGet+0x6c>)
 801d690:	68db      	ldr	r3, [r3, #12]
 801d692:	4798      	blx	r3
 801d694:	4603      	mov	r3, r0
 801d696:	b21b      	sxth	r3, r3
 801d698:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d69a:	4b0d      	ldr	r3, [pc, #52]	; (801d6d0 <SysTimeGet+0x6c>)
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	4798      	blx	r3
 801d6a0:	4603      	mov	r3, r0
 801d6a2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6a4:	f107 0010 	add.w	r0, r7, #16
 801d6a8:	69fb      	ldr	r3, [r7, #28]
 801d6aa:	9300      	str	r3, [sp, #0]
 801d6ac:	69bb      	ldr	r3, [r7, #24]
 801d6ae:	f107 0208 	add.w	r2, r7, #8
 801d6b2:	ca06      	ldmia	r2, {r1, r2}
 801d6b4:	f7ff ff36 	bl	801d524 <SysTimeAdd>

  return sysTime;
 801d6b8:	687b      	ldr	r3, [r7, #4]
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	f107 0310 	add.w	r3, r7, #16
 801d6c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6c4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d6c8:	6878      	ldr	r0, [r7, #4]
 801d6ca:	3720      	adds	r7, #32
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	bd80      	pop	{r7, pc}
 801d6d0:	0801f5c0 	.word	0x0801f5c0

0801d6d4 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d6d4:	b580      	push	{r7, lr}
 801d6d6:	b084      	sub	sp, #16
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6dc:	2300      	movs	r3, #0
 801d6de:	60bb      	str	r3, [r7, #8]
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6e4:	4b0a      	ldr	r3, [pc, #40]	; (801d710 <SysTimeGetMcuTime+0x3c>)
 801d6e6:	691b      	ldr	r3, [r3, #16]
 801d6e8:	f107 0208 	add.w	r2, r7, #8
 801d6ec:	3204      	adds	r2, #4
 801d6ee:	4610      	mov	r0, r2
 801d6f0:	4798      	blx	r3
 801d6f2:	4603      	mov	r3, r0
 801d6f4:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	461a      	mov	r2, r3
 801d6fa:	f107 0308 	add.w	r3, r7, #8
 801d6fe:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d702:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d706:	6878      	ldr	r0, [r7, #4]
 801d708:	3710      	adds	r7, #16
 801d70a:	46bd      	mov	sp, r7
 801d70c:	bd80      	pop	{r7, pc}
 801d70e:	bf00      	nop
 801d710:	0801f5c0 	.word	0x0801f5c0

0801d714 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d714:	b580      	push	{r7, lr}
 801d716:	b088      	sub	sp, #32
 801d718:	af02      	add	r7, sp, #8
 801d71a:	463b      	mov	r3, r7
 801d71c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d720:	4b0f      	ldr	r3, [pc, #60]	; (801d760 <SysTimeToMs+0x4c>)
 801d722:	68db      	ldr	r3, [r3, #12]
 801d724:	4798      	blx	r3
 801d726:	4603      	mov	r3, r0
 801d728:	b21b      	sxth	r3, r3
 801d72a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d72c:	4b0c      	ldr	r3, [pc, #48]	; (801d760 <SysTimeToMs+0x4c>)
 801d72e:	685b      	ldr	r3, [r3, #4]
 801d730:	4798      	blx	r3
 801d732:	4603      	mov	r3, r0
 801d734:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d736:	f107 0008 	add.w	r0, r7, #8
 801d73a:	697b      	ldr	r3, [r7, #20]
 801d73c:	9300      	str	r3, [sp, #0]
 801d73e:	693b      	ldr	r3, [r7, #16]
 801d740:	463a      	mov	r2, r7
 801d742:	ca06      	ldmia	r2, {r1, r2}
 801d744:	f7ff ff27 	bl	801d596 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d748:	68bb      	ldr	r3, [r7, #8]
 801d74a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d74e:	fb02 f303 	mul.w	r3, r2, r3
 801d752:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d756:	4413      	add	r3, r2
}
 801d758:	4618      	mov	r0, r3
 801d75a:	3718      	adds	r7, #24
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}
 801d760:	0801f5c0 	.word	0x0801f5c0

0801d764 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d764:	b580      	push	{r7, lr}
 801d766:	b08a      	sub	sp, #40	; 0x28
 801d768:	af02      	add	r7, sp, #8
 801d76a:	6078      	str	r0, [r7, #4]
 801d76c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d76e:	683b      	ldr	r3, [r7, #0]
 801d770:	4a19      	ldr	r2, [pc, #100]	; (801d7d8 <SysTimeFromMs+0x74>)
 801d772:	fba2 2303 	umull	r2, r3, r2, r3
 801d776:	099b      	lsrs	r3, r3, #6
 801d778:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d77a:	69fb      	ldr	r3, [r7, #28]
 801d77c:	617b      	str	r3, [r7, #20]
 801d77e:	683b      	ldr	r3, [r7, #0]
 801d780:	b29a      	uxth	r2, r3
 801d782:	69fb      	ldr	r3, [r7, #28]
 801d784:	b29b      	uxth	r3, r3
 801d786:	4619      	mov	r1, r3
 801d788:	0149      	lsls	r1, r1, #5
 801d78a:	1ac9      	subs	r1, r1, r3
 801d78c:	0089      	lsls	r1, r1, #2
 801d78e:	440b      	add	r3, r1
 801d790:	00db      	lsls	r3, r3, #3
 801d792:	b29b      	uxth	r3, r3
 801d794:	1ad3      	subs	r3, r2, r3
 801d796:	b29b      	uxth	r3, r3
 801d798:	b21b      	sxth	r3, r3
 801d79a:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d79c:	f107 030c 	add.w	r3, r7, #12
 801d7a0:	2200      	movs	r2, #0
 801d7a2:	601a      	str	r2, [r3, #0]
 801d7a4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7a6:	4b0d      	ldr	r3, [pc, #52]	; (801d7dc <SysTimeFromMs+0x78>)
 801d7a8:	68db      	ldr	r3, [r3, #12]
 801d7aa:	4798      	blx	r3
 801d7ac:	4603      	mov	r3, r0
 801d7ae:	b21b      	sxth	r3, r3
 801d7b0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7b2:	4b0a      	ldr	r3, [pc, #40]	; (801d7dc <SysTimeFromMs+0x78>)
 801d7b4:	685b      	ldr	r3, [r3, #4]
 801d7b6:	4798      	blx	r3
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d7bc:	6878      	ldr	r0, [r7, #4]
 801d7be:	693b      	ldr	r3, [r7, #16]
 801d7c0:	9300      	str	r3, [sp, #0]
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	f107 0214 	add.w	r2, r7, #20
 801d7c8:	ca06      	ldmia	r2, {r1, r2}
 801d7ca:	f7ff feab 	bl	801d524 <SysTimeAdd>
}
 801d7ce:	6878      	ldr	r0, [r7, #4]
 801d7d0:	3720      	adds	r7, #32
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	bd80      	pop	{r7, pc}
 801d7d6:	bf00      	nop
 801d7d8:	10624dd3 	.word	0x10624dd3
 801d7dc:	0801f5c0 	.word	0x0801f5c0

0801d7e0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d7e0:	b480      	push	{r7}
 801d7e2:	b085      	sub	sp, #20
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d7e8:	2300      	movs	r3, #0
 801d7ea:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d7ec:	e00e      	b.n	801d80c <ee_skip_atoi+0x2c>
 801d7ee:	68fa      	ldr	r2, [r7, #12]
 801d7f0:	4613      	mov	r3, r2
 801d7f2:	009b      	lsls	r3, r3, #2
 801d7f4:	4413      	add	r3, r2
 801d7f6:	005b      	lsls	r3, r3, #1
 801d7f8:	4618      	mov	r0, r3
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	1c59      	adds	r1, r3, #1
 801d800:	687a      	ldr	r2, [r7, #4]
 801d802:	6011      	str	r1, [r2, #0]
 801d804:	781b      	ldrb	r3, [r3, #0]
 801d806:	4403      	add	r3, r0
 801d808:	3b30      	subs	r3, #48	; 0x30
 801d80a:	60fb      	str	r3, [r7, #12]
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	681b      	ldr	r3, [r3, #0]
 801d810:	781b      	ldrb	r3, [r3, #0]
 801d812:	2b2f      	cmp	r3, #47	; 0x2f
 801d814:	d904      	bls.n	801d820 <ee_skip_atoi+0x40>
 801d816:	687b      	ldr	r3, [r7, #4]
 801d818:	681b      	ldr	r3, [r3, #0]
 801d81a:	781b      	ldrb	r3, [r3, #0]
 801d81c:	2b39      	cmp	r3, #57	; 0x39
 801d81e:	d9e6      	bls.n	801d7ee <ee_skip_atoi+0xe>
  return i;
 801d820:	68fb      	ldr	r3, [r7, #12]
}
 801d822:	4618      	mov	r0, r3
 801d824:	3714      	adds	r7, #20
 801d826:	46bd      	mov	sp, r7
 801d828:	bc80      	pop	{r7}
 801d82a:	4770      	bx	lr

0801d82c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d82c:	b480      	push	{r7}
 801d82e:	b099      	sub	sp, #100	; 0x64
 801d830:	af00      	add	r7, sp, #0
 801d832:	60f8      	str	r0, [r7, #12]
 801d834:	60b9      	str	r1, [r7, #8]
 801d836:	607a      	str	r2, [r7, #4]
 801d838:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d83a:	4b71      	ldr	r3, [pc, #452]	; (801da00 <ee_number+0x1d4>)
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d840:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d846:	2b00      	cmp	r3, #0
 801d848:	d002      	beq.n	801d850 <ee_number+0x24>
 801d84a:	4b6e      	ldr	r3, [pc, #440]	; (801da04 <ee_number+0x1d8>)
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	2b01      	cmp	r3, #1
 801d854:	dd02      	ble.n	801d85c <ee_number+0x30>
 801d856:	683b      	ldr	r3, [r7, #0]
 801d858:	2b24      	cmp	r3, #36	; 0x24
 801d85a:	dd01      	ble.n	801d860 <ee_number+0x34>
 801d85c:	2300      	movs	r3, #0
 801d85e:	e0ca      	b.n	801d9f6 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d862:	f003 0301 	and.w	r3, r3, #1
 801d866:	2b00      	cmp	r3, #0
 801d868:	d001      	beq.n	801d86e <ee_number+0x42>
 801d86a:	2330      	movs	r3, #48	; 0x30
 801d86c:	e000      	b.n	801d870 <ee_number+0x44>
 801d86e:	2320      	movs	r3, #32
 801d870:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d874:	2300      	movs	r3, #0
 801d876:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d87c:	f003 0302 	and.w	r3, r3, #2
 801d880:	2b00      	cmp	r3, #0
 801d882:	d00b      	beq.n	801d89c <ee_number+0x70>
  {
    if (num < 0)
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	2b00      	cmp	r3, #0
 801d888:	da08      	bge.n	801d89c <ee_number+0x70>
    {
      sign = '-';
 801d88a:	232d      	movs	r3, #45	; 0x2d
 801d88c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d890:	687b      	ldr	r3, [r7, #4]
 801d892:	425b      	negs	r3, r3
 801d894:	607b      	str	r3, [r7, #4]
      size--;
 801d896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d898:	3b01      	subs	r3, #1
 801d89a:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d89c:	2300      	movs	r3, #0
 801d89e:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8a0:	687b      	ldr	r3, [r7, #4]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d11e      	bne.n	801d8e4 <ee_number+0xb8>
    tmp[i++] = '0';
 801d8a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8a8:	1c5a      	adds	r2, r3, #1
 801d8aa:	657a      	str	r2, [r7, #84]	; 0x54
 801d8ac:	3360      	adds	r3, #96	; 0x60
 801d8ae:	443b      	add	r3, r7
 801d8b0:	2230      	movs	r2, #48	; 0x30
 801d8b2:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8b6:	e018      	b.n	801d8ea <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	683a      	ldr	r2, [r7, #0]
 801d8bc:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8c0:	fb01 f202 	mul.w	r2, r1, r2
 801d8c4:	1a9b      	subs	r3, r3, r2
 801d8c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d8c8:	441a      	add	r2, r3
 801d8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8cc:	1c59      	adds	r1, r3, #1
 801d8ce:	6579      	str	r1, [r7, #84]	; 0x54
 801d8d0:	7812      	ldrb	r2, [r2, #0]
 801d8d2:	3360      	adds	r3, #96	; 0x60
 801d8d4:	443b      	add	r3, r7
 801d8d6:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d8da:	687a      	ldr	r2, [r7, #4]
 801d8dc:	683b      	ldr	r3, [r7, #0]
 801d8de:	fbb2 f3f3 	udiv	r3, r2, r3
 801d8e2:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d1e6      	bne.n	801d8b8 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d8ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d8ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d8ee:	429a      	cmp	r2, r3
 801d8f0:	dd01      	ble.n	801d8f6 <ee_number+0xca>
 801d8f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d8f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d8fa:	1ad3      	subs	r3, r2, r3
 801d8fc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d8fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d900:	f003 0301 	and.w	r3, r3, #1
 801d904:	2b00      	cmp	r3, #0
 801d906:	d112      	bne.n	801d92e <ee_number+0x102>
 801d908:	e00c      	b.n	801d924 <ee_number+0xf8>
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	1c5a      	adds	r2, r3, #1
 801d90e:	60fa      	str	r2, [r7, #12]
 801d910:	2220      	movs	r2, #32
 801d912:	701a      	strb	r2, [r3, #0]
 801d914:	68bb      	ldr	r3, [r7, #8]
 801d916:	3b01      	subs	r3, #1
 801d918:	60bb      	str	r3, [r7, #8]
 801d91a:	68bb      	ldr	r3, [r7, #8]
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d101      	bne.n	801d924 <ee_number+0xf8>
 801d920:	68fb      	ldr	r3, [r7, #12]
 801d922:	e068      	b.n	801d9f6 <ee_number+0x1ca>
 801d924:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d926:	1e5a      	subs	r2, r3, #1
 801d928:	66ba      	str	r2, [r7, #104]	; 0x68
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	dced      	bgt.n	801d90a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d92e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d932:	2b00      	cmp	r3, #0
 801d934:	d01b      	beq.n	801d96e <ee_number+0x142>
 801d936:	68fb      	ldr	r3, [r7, #12]
 801d938:	1c5a      	adds	r2, r3, #1
 801d93a:	60fa      	str	r2, [r7, #12]
 801d93c:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d940:	701a      	strb	r2, [r3, #0]
 801d942:	68bb      	ldr	r3, [r7, #8]
 801d944:	3b01      	subs	r3, #1
 801d946:	60bb      	str	r3, [r7, #8]
 801d948:	68bb      	ldr	r3, [r7, #8]
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d10f      	bne.n	801d96e <ee_number+0x142>
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	e051      	b.n	801d9f6 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	1c5a      	adds	r2, r3, #1
 801d956:	60fa      	str	r2, [r7, #12]
 801d958:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d95c:	701a      	strb	r2, [r3, #0]
 801d95e:	68bb      	ldr	r3, [r7, #8]
 801d960:	3b01      	subs	r3, #1
 801d962:	60bb      	str	r3, [r7, #8]
 801d964:	68bb      	ldr	r3, [r7, #8]
 801d966:	2b00      	cmp	r3, #0
 801d968:	d101      	bne.n	801d96e <ee_number+0x142>
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	e043      	b.n	801d9f6 <ee_number+0x1ca>
 801d96e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d970:	1e5a      	subs	r2, r3, #1
 801d972:	66ba      	str	r2, [r7, #104]	; 0x68
 801d974:	2b00      	cmp	r3, #0
 801d976:	dcec      	bgt.n	801d952 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d978:	e00c      	b.n	801d994 <ee_number+0x168>
 801d97a:	68fb      	ldr	r3, [r7, #12]
 801d97c:	1c5a      	adds	r2, r3, #1
 801d97e:	60fa      	str	r2, [r7, #12]
 801d980:	2230      	movs	r2, #48	; 0x30
 801d982:	701a      	strb	r2, [r3, #0]
 801d984:	68bb      	ldr	r3, [r7, #8]
 801d986:	3b01      	subs	r3, #1
 801d988:	60bb      	str	r3, [r7, #8]
 801d98a:	68bb      	ldr	r3, [r7, #8]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d101      	bne.n	801d994 <ee_number+0x168>
 801d990:	68fb      	ldr	r3, [r7, #12]
 801d992:	e030      	b.n	801d9f6 <ee_number+0x1ca>
 801d994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d996:	1e5a      	subs	r2, r3, #1
 801d998:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d99a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d99c:	429a      	cmp	r2, r3
 801d99e:	dbec      	blt.n	801d97a <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9a0:	e010      	b.n	801d9c4 <ee_number+0x198>
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	1c5a      	adds	r2, r3, #1
 801d9a6:	60fa      	str	r2, [r7, #12]
 801d9a8:	f107 0110 	add.w	r1, r7, #16
 801d9ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9ae:	440a      	add	r2, r1
 801d9b0:	7812      	ldrb	r2, [r2, #0]
 801d9b2:	701a      	strb	r2, [r3, #0]
 801d9b4:	68bb      	ldr	r3, [r7, #8]
 801d9b6:	3b01      	subs	r3, #1
 801d9b8:	60bb      	str	r3, [r7, #8]
 801d9ba:	68bb      	ldr	r3, [r7, #8]
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d101      	bne.n	801d9c4 <ee_number+0x198>
 801d9c0:	68fb      	ldr	r3, [r7, #12]
 801d9c2:	e018      	b.n	801d9f6 <ee_number+0x1ca>
 801d9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9c6:	1e5a      	subs	r2, r3, #1
 801d9c8:	657a      	str	r2, [r7, #84]	; 0x54
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	dce9      	bgt.n	801d9a2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d9ce:	e00c      	b.n	801d9ea <ee_number+0x1be>
 801d9d0:	68fb      	ldr	r3, [r7, #12]
 801d9d2:	1c5a      	adds	r2, r3, #1
 801d9d4:	60fa      	str	r2, [r7, #12]
 801d9d6:	2220      	movs	r2, #32
 801d9d8:	701a      	strb	r2, [r3, #0]
 801d9da:	68bb      	ldr	r3, [r7, #8]
 801d9dc:	3b01      	subs	r3, #1
 801d9de:	60bb      	str	r3, [r7, #8]
 801d9e0:	68bb      	ldr	r3, [r7, #8]
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d101      	bne.n	801d9ea <ee_number+0x1be>
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	e005      	b.n	801d9f6 <ee_number+0x1ca>
 801d9ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d9ec:	1e5a      	subs	r2, r3, #1
 801d9ee:	66ba      	str	r2, [r7, #104]	; 0x68
 801d9f0:	2b00      	cmp	r3, #0
 801d9f2:	dced      	bgt.n	801d9d0 <ee_number+0x1a4>

  return str;
 801d9f4:	68fb      	ldr	r3, [r7, #12]
}
 801d9f6:	4618      	mov	r0, r3
 801d9f8:	3764      	adds	r7, #100	; 0x64
 801d9fa:	46bd      	mov	sp, r7
 801d9fc:	bc80      	pop	{r7}
 801d9fe:	4770      	bx	lr
 801da00:	20000150 	.word	0x20000150
 801da04:	20000154 	.word	0x20000154

0801da08 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da08:	b580      	push	{r7, lr}
 801da0a:	b092      	sub	sp, #72	; 0x48
 801da0c:	af04      	add	r7, sp, #16
 801da0e:	60f8      	str	r0, [r7, #12]
 801da10:	60b9      	str	r1, [r7, #8]
 801da12:	607a      	str	r2, [r7, #4]
 801da14:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da16:	68bb      	ldr	r3, [r7, #8]
 801da18:	2b00      	cmp	r3, #0
 801da1a:	dc01      	bgt.n	801da20 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da1c:	2300      	movs	r3, #0
 801da1e:	e13e      	b.n	801dc9e <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da20:	68fb      	ldr	r3, [r7, #12]
 801da22:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da24:	e128      	b.n	801dc78 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da28:	68fb      	ldr	r3, [r7, #12]
 801da2a:	1ad2      	subs	r2, r2, r3
 801da2c:	68bb      	ldr	r3, [r7, #8]
 801da2e:	3b01      	subs	r3, #1
 801da30:	429a      	cmp	r2, r3
 801da32:	f280 812e 	bge.w	801dc92 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801da36:	687b      	ldr	r3, [r7, #4]
 801da38:	781b      	ldrb	r3, [r3, #0]
 801da3a:	2b25      	cmp	r3, #37	; 0x25
 801da3c:	d006      	beq.n	801da4c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da3e:	687a      	ldr	r2, [r7, #4]
 801da40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da42:	1c59      	adds	r1, r3, #1
 801da44:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da46:	7812      	ldrb	r2, [r2, #0]
 801da48:	701a      	strb	r2, [r3, #0]
      continue;
 801da4a:	e112      	b.n	801dc72 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801da4c:	2300      	movs	r3, #0
 801da4e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da50:	687b      	ldr	r3, [r7, #4]
 801da52:	3301      	adds	r3, #1
 801da54:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	781b      	ldrb	r3, [r3, #0]
 801da5a:	2b30      	cmp	r3, #48	; 0x30
 801da5c:	d103      	bne.n	801da66 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801da5e:	6a3b      	ldr	r3, [r7, #32]
 801da60:	f043 0301 	orr.w	r3, r3, #1
 801da64:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801da66:	f04f 33ff 	mov.w	r3, #4294967295
 801da6a:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	781b      	ldrb	r3, [r3, #0]
 801da70:	2b2f      	cmp	r3, #47	; 0x2f
 801da72:	d908      	bls.n	801da86 <tiny_vsnprintf_like+0x7e>
 801da74:	687b      	ldr	r3, [r7, #4]
 801da76:	781b      	ldrb	r3, [r3, #0]
 801da78:	2b39      	cmp	r3, #57	; 0x39
 801da7a:	d804      	bhi.n	801da86 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801da7c:	1d3b      	adds	r3, r7, #4
 801da7e:	4618      	mov	r0, r3
 801da80:	f7ff feae 	bl	801d7e0 <ee_skip_atoi>
 801da84:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801da86:	f04f 33ff 	mov.w	r3, #4294967295
 801da8a:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801da8c:	f04f 33ff 	mov.w	r3, #4294967295
 801da90:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801da92:	230a      	movs	r3, #10
 801da94:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	781b      	ldrb	r3, [r3, #0]
 801da9a:	3b58      	subs	r3, #88	; 0x58
 801da9c:	2b20      	cmp	r3, #32
 801da9e:	f200 8094 	bhi.w	801dbca <tiny_vsnprintf_like+0x1c2>
 801daa2:	a201      	add	r2, pc, #4	; (adr r2, 801daa8 <tiny_vsnprintf_like+0xa0>)
 801daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801daa8:	0801dbb3 	.word	0x0801dbb3
 801daac:	0801dbcb 	.word	0x0801dbcb
 801dab0:	0801dbcb 	.word	0x0801dbcb
 801dab4:	0801dbcb 	.word	0x0801dbcb
 801dab8:	0801dbcb 	.word	0x0801dbcb
 801dabc:	0801dbcb 	.word	0x0801dbcb
 801dac0:	0801dbcb 	.word	0x0801dbcb
 801dac4:	0801dbcb 	.word	0x0801dbcb
 801dac8:	0801dbcb 	.word	0x0801dbcb
 801dacc:	0801dbcb 	.word	0x0801dbcb
 801dad0:	0801dbcb 	.word	0x0801dbcb
 801dad4:	0801db37 	.word	0x0801db37
 801dad8:	0801dbc1 	.word	0x0801dbc1
 801dadc:	0801dbcb 	.word	0x0801dbcb
 801dae0:	0801dbcb 	.word	0x0801dbcb
 801dae4:	0801dbcb 	.word	0x0801dbcb
 801dae8:	0801dbcb 	.word	0x0801dbcb
 801daec:	0801dbc1 	.word	0x0801dbc1
 801daf0:	0801dbcb 	.word	0x0801dbcb
 801daf4:	0801dbcb 	.word	0x0801dbcb
 801daf8:	0801dbcb 	.word	0x0801dbcb
 801dafc:	0801dbcb 	.word	0x0801dbcb
 801db00:	0801dbcb 	.word	0x0801dbcb
 801db04:	0801dbcb 	.word	0x0801dbcb
 801db08:	0801dbcb 	.word	0x0801dbcb
 801db0c:	0801dbcb 	.word	0x0801dbcb
 801db10:	0801dbcb 	.word	0x0801dbcb
 801db14:	0801db57 	.word	0x0801db57
 801db18:	0801dbcb 	.word	0x0801dbcb
 801db1c:	0801dc17 	.word	0x0801dc17
 801db20:	0801dbcb 	.word	0x0801dbcb
 801db24:	0801dbcb 	.word	0x0801dbcb
 801db28:	0801dbbb 	.word	0x0801dbbb
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db2e:	1c5a      	adds	r2, r3, #1
 801db30:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db32:	2220      	movs	r2, #32
 801db34:	701a      	strb	r2, [r3, #0]
 801db36:	69fb      	ldr	r3, [r7, #28]
 801db38:	3b01      	subs	r3, #1
 801db3a:	61fb      	str	r3, [r7, #28]
 801db3c:	69fb      	ldr	r3, [r7, #28]
 801db3e:	2b00      	cmp	r3, #0
 801db40:	dcf4      	bgt.n	801db2c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db42:	683b      	ldr	r3, [r7, #0]
 801db44:	1d1a      	adds	r2, r3, #4
 801db46:	603a      	str	r2, [r7, #0]
 801db48:	6819      	ldr	r1, [r3, #0]
 801db4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db4c:	1c5a      	adds	r2, r3, #1
 801db4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db50:	b2ca      	uxtb	r2, r1
 801db52:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db54:	e08d      	b.n	801dc72 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801db56:	683b      	ldr	r3, [r7, #0]
 801db58:	1d1a      	adds	r2, r3, #4
 801db5a:	603a      	str	r2, [r7, #0]
 801db5c:	681b      	ldr	r3, [r3, #0]
 801db5e:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801db60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db62:	2b00      	cmp	r3, #0
 801db64:	d101      	bne.n	801db6a <tiny_vsnprintf_like+0x162>
 801db66:	4b50      	ldr	r3, [pc, #320]	; (801dca8 <tiny_vsnprintf_like+0x2a0>)
 801db68:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801db6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db6c:	f7e2 fb04 	bl	8000178 <strlen>
 801db70:	4603      	mov	r3, r0
 801db72:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801db74:	e004      	b.n	801db80 <tiny_vsnprintf_like+0x178>
 801db76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db78:	1c5a      	adds	r2, r3, #1
 801db7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db7c:	2220      	movs	r2, #32
 801db7e:	701a      	strb	r2, [r3, #0]
 801db80:	69fb      	ldr	r3, [r7, #28]
 801db82:	1e5a      	subs	r2, r3, #1
 801db84:	61fa      	str	r2, [r7, #28]
 801db86:	693a      	ldr	r2, [r7, #16]
 801db88:	429a      	cmp	r2, r3
 801db8a:	dbf4      	blt.n	801db76 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801db8c:	2300      	movs	r3, #0
 801db8e:	62bb      	str	r3, [r7, #40]	; 0x28
 801db90:	e00a      	b.n	801dba8 <tiny_vsnprintf_like+0x1a0>
 801db92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801db94:	1c53      	adds	r3, r2, #1
 801db96:	627b      	str	r3, [r7, #36]	; 0x24
 801db98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db9a:	1c59      	adds	r1, r3, #1
 801db9c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801db9e:	7812      	ldrb	r2, [r2, #0]
 801dba0:	701a      	strb	r2, [r3, #0]
 801dba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dba4:	3301      	adds	r3, #1
 801dba6:	62bb      	str	r3, [r7, #40]	; 0x28
 801dba8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbaa:	693b      	ldr	r3, [r7, #16]
 801dbac:	429a      	cmp	r2, r3
 801dbae:	dbf0      	blt.n	801db92 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbb0:	e05f      	b.n	801dc72 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbb2:	6a3b      	ldr	r3, [r7, #32]
 801dbb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbb8:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbba:	2310      	movs	r3, #16
 801dbbc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dbbe:	e02b      	b.n	801dc18 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dbc0:	6a3b      	ldr	r3, [r7, #32]
 801dbc2:	f043 0302 	orr.w	r3, r3, #2
 801dbc6:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dbc8:	e025      	b.n	801dc16 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dbca:	687b      	ldr	r3, [r7, #4]
 801dbcc:	781b      	ldrb	r3, [r3, #0]
 801dbce:	2b25      	cmp	r3, #37	; 0x25
 801dbd0:	d004      	beq.n	801dbdc <tiny_vsnprintf_like+0x1d4>
 801dbd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbd4:	1c5a      	adds	r2, r3, #1
 801dbd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbd8:	2225      	movs	r2, #37	; 0x25
 801dbda:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dbdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	1ad2      	subs	r2, r2, r3
 801dbe2:	68bb      	ldr	r3, [r7, #8]
 801dbe4:	3b01      	subs	r3, #1
 801dbe6:	429a      	cmp	r2, r3
 801dbe8:	da16      	bge.n	801dc18 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801dbea:	687b      	ldr	r3, [r7, #4]
 801dbec:	781b      	ldrb	r3, [r3, #0]
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d006      	beq.n	801dc00 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dbf2:	687a      	ldr	r2, [r7, #4]
 801dbf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbf6:	1c59      	adds	r1, r3, #1
 801dbf8:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbfa:	7812      	ldrb	r2, [r2, #0]
 801dbfc:	701a      	strb	r2, [r3, #0]
 801dbfe:	e002      	b.n	801dc06 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc00:	687b      	ldr	r3, [r7, #4]
 801dc02:	3b01      	subs	r3, #1
 801dc04:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	1ad2      	subs	r2, r2, r3
 801dc0c:	68bb      	ldr	r3, [r7, #8]
 801dc0e:	3b01      	subs	r3, #1
 801dc10:	429a      	cmp	r2, r3
 801dc12:	db2d      	blt.n	801dc70 <tiny_vsnprintf_like+0x268>
 801dc14:	e000      	b.n	801dc18 <tiny_vsnprintf_like+0x210>
        break;
 801dc16:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc18:	697b      	ldr	r3, [r7, #20]
 801dc1a:	2b6c      	cmp	r3, #108	; 0x6c
 801dc1c:	d105      	bne.n	801dc2a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dc1e:	683b      	ldr	r3, [r7, #0]
 801dc20:	1d1a      	adds	r2, r3, #4
 801dc22:	603a      	str	r2, [r7, #0]
 801dc24:	681b      	ldr	r3, [r3, #0]
 801dc26:	637b      	str	r3, [r7, #52]	; 0x34
 801dc28:	e00f      	b.n	801dc4a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dc2a:	6a3b      	ldr	r3, [r7, #32]
 801dc2c:	f003 0302 	and.w	r3, r3, #2
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d005      	beq.n	801dc40 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dc34:	683b      	ldr	r3, [r7, #0]
 801dc36:	1d1a      	adds	r2, r3, #4
 801dc38:	603a      	str	r2, [r7, #0]
 801dc3a:	681b      	ldr	r3, [r3, #0]
 801dc3c:	637b      	str	r3, [r7, #52]	; 0x34
 801dc3e:	e004      	b.n	801dc4a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dc40:	683b      	ldr	r3, [r7, #0]
 801dc42:	1d1a      	adds	r2, r3, #4
 801dc44:	603a      	str	r2, [r7, #0]
 801dc46:	681b      	ldr	r3, [r3, #0]
 801dc48:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc4a:	68bb      	ldr	r3, [r7, #8]
 801dc4c:	1e5a      	subs	r2, r3, #1
 801dc4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	1acb      	subs	r3, r1, r3
 801dc54:	1ad1      	subs	r1, r2, r3
 801dc56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc58:	6a3b      	ldr	r3, [r7, #32]
 801dc5a:	9302      	str	r3, [sp, #8]
 801dc5c:	69bb      	ldr	r3, [r7, #24]
 801dc5e:	9301      	str	r3, [sp, #4]
 801dc60:	69fb      	ldr	r3, [r7, #28]
 801dc62:	9300      	str	r3, [sp, #0]
 801dc64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc66:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc68:	f7ff fde0 	bl	801d82c <ee_number>
 801dc6c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dc6e:	e000      	b.n	801dc72 <tiny_vsnprintf_like+0x26a>
        continue;
 801dc70:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dc72:	687b      	ldr	r3, [r7, #4]
 801dc74:	3301      	adds	r3, #1
 801dc76:	607b      	str	r3, [r7, #4]
 801dc78:	687b      	ldr	r3, [r7, #4]
 801dc7a:	781b      	ldrb	r3, [r3, #0]
 801dc7c:	2b00      	cmp	r3, #0
 801dc7e:	f47f aed2 	bne.w	801da26 <tiny_vsnprintf_like+0x1e>
 801dc82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	1ad2      	subs	r2, r2, r3
 801dc88:	68bb      	ldr	r3, [r7, #8]
 801dc8a:	3b01      	subs	r3, #1
 801dc8c:	429a      	cmp	r2, r3
 801dc8e:	f6bf aeca 	bge.w	801da26 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc94:	2200      	movs	r2, #0
 801dc96:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dc98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	1ad3      	subs	r3, r2, r3
}
 801dc9e:	4618      	mov	r0, r3
 801dca0:	3738      	adds	r7, #56	; 0x38
 801dca2:	46bd      	mov	sp, r7
 801dca4:	bd80      	pop	{r7, pc}
 801dca6:	bf00      	nop
 801dca8:	0801f4d4 	.word	0x0801f4d4

0801dcac <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcac:	b580      	push	{r7, lr}
 801dcae:	b090      	sub	sp, #64	; 0x40
 801dcb0:	af00      	add	r7, sp, #0
 801dcb2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dcb4:	4b73      	ldr	r3, [pc, #460]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801dcb6:	681b      	ldr	r3, [r3, #0]
 801dcb8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcba:	4b72      	ldr	r3, [pc, #456]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801dcbc:	681a      	ldr	r2, [r3, #0]
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	4013      	ands	r3, r2
 801dcc2:	4a70      	ldr	r2, [pc, #448]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801dcc4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dcc6:	4b70      	ldr	r3, [pc, #448]	; (801de88 <UTIL_SEQ_Run+0x1dc>)
 801dcc8:	681b      	ldr	r3, [r3, #0]
 801dcca:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dccc:	4b6f      	ldr	r3, [pc, #444]	; (801de8c <UTIL_SEQ_Run+0x1e0>)
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dcd2:	4b6f      	ldr	r3, [pc, #444]	; (801de90 <UTIL_SEQ_Run+0x1e4>)
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dcd8:	4b6e      	ldr	r3, [pc, #440]	; (801de94 <UTIL_SEQ_Run+0x1e8>)
 801dcda:	681b      	ldr	r3, [r3, #0]
 801dcdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dcde:	e08d      	b.n	801ddfc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dce0:	2300      	movs	r3, #0
 801dce2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dce4:	e002      	b.n	801dcec <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dce8:	3301      	adds	r3, #1
 801dcea:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dcec:	4a6a      	ldr	r2, [pc, #424]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dcee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dcf0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcf6:	401a      	ands	r2, r3
 801dcf8:	4b62      	ldr	r3, [pc, #392]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801dcfa:	681b      	ldr	r3, [r3, #0]
 801dcfc:	4013      	ands	r3, r2
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d0f1      	beq.n	801dce6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd02:	4a65      	ldr	r2, [pc, #404]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd06:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd0c:	401a      	ands	r2, r3
 801dd0e:	4b5d      	ldr	r3, [pc, #372]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	4013      	ands	r3, r2
 801dd14:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd16:	4a60      	ldr	r2, [pc, #384]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd1a:	00db      	lsls	r3, r3, #3
 801dd1c:	4413      	add	r3, r2
 801dd1e:	685a      	ldr	r2, [r3, #4]
 801dd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd22:	4013      	ands	r3, r2
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	d106      	bne.n	801dd36 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd28:	4a5b      	ldr	r2, [pc, #364]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd2c:	00db      	lsls	r3, r3, #3
 801dd2e:	4413      	add	r3, r2
 801dd30:	f04f 32ff 	mov.w	r2, #4294967295
 801dd34:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd36:	4a58      	ldr	r2, [pc, #352]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd3a:	00db      	lsls	r3, r3, #3
 801dd3c:	4413      	add	r3, r2
 801dd3e:	685a      	ldr	r2, [r3, #4]
 801dd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd42:	4013      	ands	r3, r2
 801dd44:	4618      	mov	r0, r3
 801dd46:	f000 f907 	bl	801df58 <SEQ_BitPosition>
 801dd4a:	4603      	mov	r3, r0
 801dd4c:	461a      	mov	r2, r3
 801dd4e:	4b53      	ldr	r3, [pc, #332]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801dd50:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd52:	4a51      	ldr	r2, [pc, #324]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd56:	00db      	lsls	r3, r3, #3
 801dd58:	4413      	add	r3, r2
 801dd5a:	685a      	ldr	r2, [r3, #4]
 801dd5c:	4b4f      	ldr	r3, [pc, #316]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801dd5e:	681b      	ldr	r3, [r3, #0]
 801dd60:	2101      	movs	r1, #1
 801dd62:	fa01 f303 	lsl.w	r3, r1, r3
 801dd66:	43db      	mvns	r3, r3
 801dd68:	401a      	ands	r2, r3
 801dd6a:	494b      	ldr	r1, [pc, #300]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd6e:	00db      	lsls	r3, r3, #3
 801dd70:	440b      	add	r3, r1
 801dd72:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd74:	f3ef 8310 	mrs	r3, PRIMASK
 801dd78:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd7a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801dd7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd7e:	b672      	cpsid	i
}
 801dd80:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801dd82:	4b46      	ldr	r3, [pc, #280]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801dd84:	681b      	ldr	r3, [r3, #0]
 801dd86:	2201      	movs	r2, #1
 801dd88:	fa02 f303 	lsl.w	r3, r2, r3
 801dd8c:	43da      	mvns	r2, r3
 801dd8e:	4b3e      	ldr	r3, [pc, #248]	; (801de88 <UTIL_SEQ_Run+0x1dc>)
 801dd90:	681b      	ldr	r3, [r3, #0]
 801dd92:	4013      	ands	r3, r2
 801dd94:	4a3c      	ldr	r2, [pc, #240]	; (801de88 <UTIL_SEQ_Run+0x1dc>)
 801dd96:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801dd98:	2301      	movs	r3, #1
 801dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd9c:	e013      	b.n	801ddc6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801dd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dda0:	3b01      	subs	r3, #1
 801dda2:	4a3d      	ldr	r2, [pc, #244]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801dda4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801dda8:	4b3c      	ldr	r3, [pc, #240]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	2201      	movs	r2, #1
 801ddae:	fa02 f303 	lsl.w	r3, r2, r3
 801ddb2:	43da      	mvns	r2, r3
 801ddb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddb6:	3b01      	subs	r3, #1
 801ddb8:	400a      	ands	r2, r1
 801ddba:	4937      	ldr	r1, [pc, #220]	; (801de98 <UTIL_SEQ_Run+0x1ec>)
 801ddbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddc2:	3b01      	subs	r3, #1
 801ddc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d1e8      	bne.n	801dd9e <UTIL_SEQ_Run+0xf2>
 801ddcc:	6a3b      	ldr	r3, [r7, #32]
 801ddce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ddd0:	697b      	ldr	r3, [r7, #20]
 801ddd2:	f383 8810 	msr	PRIMASK, r3
}
 801ddd6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ddd8:	4b30      	ldr	r3, [pc, #192]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	4a30      	ldr	r2, [pc, #192]	; (801dea0 <UTIL_SEQ_Run+0x1f4>)
 801ddde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dde2:	4798      	blx	r3

    local_taskset = TaskSet;
 801dde4:	4b28      	ldr	r3, [pc, #160]	; (801de88 <UTIL_SEQ_Run+0x1dc>)
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801ddea:	4b28      	ldr	r3, [pc, #160]	; (801de8c <UTIL_SEQ_Run+0x1e0>)
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801ddf0:	4b27      	ldr	r3, [pc, #156]	; (801de90 <UTIL_SEQ_Run+0x1e4>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801ddf6:	4b27      	ldr	r3, [pc, #156]	; (801de94 <UTIL_SEQ_Run+0x1e8>)
 801ddf8:	681b      	ldr	r3, [r3, #0]
 801ddfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801ddfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ddfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de00:	401a      	ands	r2, r3
 801de02:	4b20      	ldr	r3, [pc, #128]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	4013      	ands	r3, r2
 801de08:	2b00      	cmp	r3, #0
 801de0a:	d005      	beq.n	801de18 <UTIL_SEQ_Run+0x16c>
 801de0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de10:	4013      	ands	r3, r2
 801de12:	2b00      	cmp	r3, #0
 801de14:	f43f af64 	beq.w	801dce0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de18:	4b20      	ldr	r3, [pc, #128]	; (801de9c <UTIL_SEQ_Run+0x1f0>)
 801de1a:	f04f 32ff 	mov.w	r2, #4294967295
 801de1e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de20:	f000 f88e 	bl	801df40 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de24:	f3ef 8310 	mrs	r3, PRIMASK
 801de28:	613b      	str	r3, [r7, #16]
  return(result);
 801de2a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de2e:	b672      	cpsid	i
}
 801de30:	bf00      	nop
  local_taskset = TaskSet;
 801de32:	4b15      	ldr	r3, [pc, #84]	; (801de88 <UTIL_SEQ_Run+0x1dc>)
 801de34:	681b      	ldr	r3, [r3, #0]
 801de36:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de38:	4b14      	ldr	r3, [pc, #80]	; (801de8c <UTIL_SEQ_Run+0x1e0>)
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de3e:	4b14      	ldr	r3, [pc, #80]	; (801de90 <UTIL_SEQ_Run+0x1e4>)
 801de40:	681b      	ldr	r3, [r3, #0]
 801de42:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de48:	401a      	ands	r2, r3
 801de4a:	4b0e      	ldr	r3, [pc, #56]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	4013      	ands	r3, r2
 801de50:	2b00      	cmp	r3, #0
 801de52:	d107      	bne.n	801de64 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de54:	4b0f      	ldr	r3, [pc, #60]	; (801de94 <UTIL_SEQ_Run+0x1e8>)
 801de56:	681a      	ldr	r2, [r3, #0]
 801de58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de5a:	4013      	ands	r3, r2
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d101      	bne.n	801de64 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801de60:	f7e4 fca6 	bl	80027b0 <UTIL_SEQ_Idle>
 801de64:	69fb      	ldr	r3, [r7, #28]
 801de66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	f383 8810 	msr	PRIMASK, r3
}
 801de6e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801de70:	f000 f86c 	bl	801df4c <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801de74:	4a03      	ldr	r2, [pc, #12]	; (801de84 <UTIL_SEQ_Run+0x1d8>)
 801de76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de78:	6013      	str	r3, [r2, #0]

  return;
 801de7a:	bf00      	nop
}
 801de7c:	3740      	adds	r7, #64	; 0x40
 801de7e:	46bd      	mov	sp, r7
 801de80:	bd80      	pop	{r7, pc}
 801de82:	bf00      	nop
 801de84:	2000015c 	.word	0x2000015c
 801de88:	20001848 	.word	0x20001848
 801de8c:	2000184c 	.word	0x2000184c
 801de90:	20000158 	.word	0x20000158
 801de94:	20001850 	.word	0x20001850
 801de98:	20001868 	.word	0x20001868
 801de9c:	20001854 	.word	0x20001854
 801dea0:	20001858 	.word	0x20001858

0801dea4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801dea4:	b580      	push	{r7, lr}
 801dea6:	b088      	sub	sp, #32
 801dea8:	af00      	add	r7, sp, #0
 801deaa:	60f8      	str	r0, [r7, #12]
 801deac:	60b9      	str	r1, [r7, #8]
 801deae:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801deb0:	f3ef 8310 	mrs	r3, PRIMASK
 801deb4:	617b      	str	r3, [r7, #20]
  return(result);
 801deb6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801deb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801deba:	b672      	cpsid	i
}
 801debc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801debe:	68f8      	ldr	r0, [r7, #12]
 801dec0:	f000 f84a 	bl	801df58 <SEQ_BitPosition>
 801dec4:	4603      	mov	r3, r0
 801dec6:	4619      	mov	r1, r3
 801dec8:	4a06      	ldr	r2, [pc, #24]	; (801dee4 <UTIL_SEQ_RegTask+0x40>)
 801deca:	687b      	ldr	r3, [r7, #4]
 801decc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801ded0:	69fb      	ldr	r3, [r7, #28]
 801ded2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ded4:	69bb      	ldr	r3, [r7, #24]
 801ded6:	f383 8810 	msr	PRIMASK, r3
}
 801deda:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801dedc:	bf00      	nop
}
 801dede:	3720      	adds	r7, #32
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	20001858 	.word	0x20001858

0801dee8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801dee8:	b480      	push	{r7}
 801deea:	b087      	sub	sp, #28
 801deec:	af00      	add	r7, sp, #0
 801deee:	6078      	str	r0, [r7, #4]
 801def0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801def2:	f3ef 8310 	mrs	r3, PRIMASK
 801def6:	60fb      	str	r3, [r7, #12]
  return(result);
 801def8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801defa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801defc:	b672      	cpsid	i
}
 801defe:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df00:	4b0d      	ldr	r3, [pc, #52]	; (801df38 <UTIL_SEQ_SetTask+0x50>)
 801df02:	681a      	ldr	r2, [r3, #0]
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	4313      	orrs	r3, r2
 801df08:	4a0b      	ldr	r2, [pc, #44]	; (801df38 <UTIL_SEQ_SetTask+0x50>)
 801df0a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df0c:	4a0b      	ldr	r2, [pc, #44]	; (801df3c <UTIL_SEQ_SetTask+0x54>)
 801df0e:	683b      	ldr	r3, [r7, #0]
 801df10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df14:	687b      	ldr	r3, [r7, #4]
 801df16:	431a      	orrs	r2, r3
 801df18:	4908      	ldr	r1, [pc, #32]	; (801df3c <UTIL_SEQ_SetTask+0x54>)
 801df1a:	683b      	ldr	r3, [r7, #0]
 801df1c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df20:	697b      	ldr	r3, [r7, #20]
 801df22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df24:	693b      	ldr	r3, [r7, #16]
 801df26:	f383 8810 	msr	PRIMASK, r3
}
 801df2a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df2c:	bf00      	nop
}
 801df2e:	371c      	adds	r7, #28
 801df30:	46bd      	mov	sp, r7
 801df32:	bc80      	pop	{r7}
 801df34:	4770      	bx	lr
 801df36:	bf00      	nop
 801df38:	20001848 	.word	0x20001848
 801df3c:	20001868 	.word	0x20001868

0801df40 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df40:	b480      	push	{r7}
 801df42:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df44:	bf00      	nop
}
 801df46:	46bd      	mov	sp, r7
 801df48:	bc80      	pop	{r7}
 801df4a:	4770      	bx	lr

0801df4c <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df4c:	b480      	push	{r7}
 801df4e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df50:	bf00      	nop
}
 801df52:	46bd      	mov	sp, r7
 801df54:	bc80      	pop	{r7}
 801df56:	4770      	bx	lr

0801df58 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df58:	b480      	push	{r7}
 801df5a:	b085      	sub	sp, #20
 801df5c:	af00      	add	r7, sp, #0
 801df5e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801df60:	2300      	movs	r3, #0
 801df62:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801df68:	68bb      	ldr	r3, [r7, #8]
 801df6a:	0c1b      	lsrs	r3, r3, #16
 801df6c:	041b      	lsls	r3, r3, #16
 801df6e:	2b00      	cmp	r3, #0
 801df70:	d104      	bne.n	801df7c <SEQ_BitPosition+0x24>
 801df72:	2310      	movs	r3, #16
 801df74:	73fb      	strb	r3, [r7, #15]
 801df76:	68bb      	ldr	r3, [r7, #8]
 801df78:	041b      	lsls	r3, r3, #16
 801df7a:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801df7c:	68bb      	ldr	r3, [r7, #8]
 801df7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801df82:	2b00      	cmp	r3, #0
 801df84:	d105      	bne.n	801df92 <SEQ_BitPosition+0x3a>
 801df86:	7bfb      	ldrb	r3, [r7, #15]
 801df88:	3308      	adds	r3, #8
 801df8a:	73fb      	strb	r3, [r7, #15]
 801df8c:	68bb      	ldr	r3, [r7, #8]
 801df8e:	021b      	lsls	r3, r3, #8
 801df90:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801df92:	68bb      	ldr	r3, [r7, #8]
 801df94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d105      	bne.n	801dfa8 <SEQ_BitPosition+0x50>
 801df9c:	7bfb      	ldrb	r3, [r7, #15]
 801df9e:	3304      	adds	r3, #4
 801dfa0:	73fb      	strb	r3, [r7, #15]
 801dfa2:	68bb      	ldr	r3, [r7, #8]
 801dfa4:	011b      	lsls	r3, r3, #4
 801dfa6:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfa8:	68bb      	ldr	r3, [r7, #8]
 801dfaa:	0f1b      	lsrs	r3, r3, #28
 801dfac:	4a06      	ldr	r2, [pc, #24]	; (801dfc8 <SEQ_BitPosition+0x70>)
 801dfae:	5cd2      	ldrb	r2, [r2, r3]
 801dfb0:	7bfb      	ldrb	r3, [r7, #15]
 801dfb2:	4413      	add	r3, r2
 801dfb4:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dfb6:	7bfb      	ldrb	r3, [r7, #15]
 801dfb8:	f1c3 031f 	rsb	r3, r3, #31
 801dfbc:	b2db      	uxtb	r3, r3
}
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	3714      	adds	r7, #20
 801dfc2:	46bd      	mov	sp, r7
 801dfc4:	bc80      	pop	{r7}
 801dfc6:	4770      	bx	lr
 801dfc8:	0801fb18 	.word	0x0801fb18

0801dfcc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801dfcc:	b580      	push	{r7, lr}
 801dfce:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801dfd0:	4b04      	ldr	r3, [pc, #16]	; (801dfe4 <UTIL_TIMER_Init+0x18>)
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801dfd6:	4b04      	ldr	r3, [pc, #16]	; (801dfe8 <UTIL_TIMER_Init+0x1c>)
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	4798      	blx	r3
 801dfdc:	4603      	mov	r3, r0
}
 801dfde:	4618      	mov	r0, r3
 801dfe0:	bd80      	pop	{r7, pc}
 801dfe2:	bf00      	nop
 801dfe4:	20001870 	.word	0x20001870
 801dfe8:	0801f594 	.word	0x0801f594

0801dfec <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801dfec:	b580      	push	{r7, lr}
 801dfee:	b084      	sub	sp, #16
 801dff0:	af00      	add	r7, sp, #0
 801dff2:	60f8      	str	r0, [r7, #12]
 801dff4:	60b9      	str	r1, [r7, #8]
 801dff6:	603b      	str	r3, [r7, #0]
 801dff8:	4613      	mov	r3, r2
 801dffa:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801dffc:	68fb      	ldr	r3, [r7, #12]
 801dffe:	2b00      	cmp	r3, #0
 801e000:	d023      	beq.n	801e04a <UTIL_TIMER_Create+0x5e>
 801e002:	683b      	ldr	r3, [r7, #0]
 801e004:	2b00      	cmp	r3, #0
 801e006:	d020      	beq.n	801e04a <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	2200      	movs	r2, #0
 801e00c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e00e:	4b11      	ldr	r3, [pc, #68]	; (801e054 <UTIL_TIMER_Create+0x68>)
 801e010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e012:	68b8      	ldr	r0, [r7, #8]
 801e014:	4798      	blx	r3
 801e016:	4602      	mov	r2, r0
 801e018:	68fb      	ldr	r3, [r7, #12]
 801e01a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e01c:	68fb      	ldr	r3, [r7, #12]
 801e01e:	2200      	movs	r2, #0
 801e020:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e022:	68fb      	ldr	r3, [r7, #12]
 801e024:	2200      	movs	r2, #0
 801e026:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e028:	68fb      	ldr	r3, [r7, #12]
 801e02a:	2200      	movs	r2, #0
 801e02c:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e02e:	68fb      	ldr	r3, [r7, #12]
 801e030:	683a      	ldr	r2, [r7, #0]
 801e032:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	69ba      	ldr	r2, [r7, #24]
 801e038:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	79fa      	ldrb	r2, [r7, #7]
 801e03e:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	2200      	movs	r2, #0
 801e044:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e046:	2300      	movs	r3, #0
 801e048:	e000      	b.n	801e04c <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e04a:	2301      	movs	r3, #1
  }
}
 801e04c:	4618      	mov	r0, r3
 801e04e:	3710      	adds	r7, #16
 801e050:	46bd      	mov	sp, r7
 801e052:	bd80      	pop	{r7, pc}
 801e054:	0801f594 	.word	0x0801f594

0801e058 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e058:	b580      	push	{r7, lr}
 801e05a:	b08a      	sub	sp, #40	; 0x28
 801e05c:	af00      	add	r7, sp, #0
 801e05e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e060:	2300      	movs	r3, #0
 801e062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	2b00      	cmp	r3, #0
 801e06a:	d056      	beq.n	801e11a <UTIL_TIMER_Start+0xc2>
 801e06c:	6878      	ldr	r0, [r7, #4]
 801e06e:	f000 f9a9 	bl	801e3c4 <TimerExists>
 801e072:	4603      	mov	r3, r0
 801e074:	f083 0301 	eor.w	r3, r3, #1
 801e078:	b2db      	uxtb	r3, r3
 801e07a:	2b00      	cmp	r3, #0
 801e07c:	d04d      	beq.n	801e11a <UTIL_TIMER_Start+0xc2>
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	7a5b      	ldrb	r3, [r3, #9]
 801e082:	2b00      	cmp	r3, #0
 801e084:	d149      	bne.n	801e11a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e086:	f3ef 8310 	mrs	r3, PRIMASK
 801e08a:	613b      	str	r3, [r7, #16]
  return(result);
 801e08c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e08e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e090:	b672      	cpsid	i
}
 801e092:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e094:	687b      	ldr	r3, [r7, #4]
 801e096:	685b      	ldr	r3, [r3, #4]
 801e098:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e09a:	4b24      	ldr	r3, [pc, #144]	; (801e12c <UTIL_TIMER_Start+0xd4>)
 801e09c:	6a1b      	ldr	r3, [r3, #32]
 801e09e:	4798      	blx	r3
 801e0a0:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0a2:	6a3a      	ldr	r2, [r7, #32]
 801e0a4:	69bb      	ldr	r3, [r7, #24]
 801e0a6:	429a      	cmp	r2, r3
 801e0a8:	d201      	bcs.n	801e0ae <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0aa:	69bb      	ldr	r3, [r7, #24]
 801e0ac:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0ae:	687b      	ldr	r3, [r7, #4]
 801e0b0:	6a3a      	ldr	r2, [r7, #32]
 801e0b2:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	2200      	movs	r2, #0
 801e0b8:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0ba:	687b      	ldr	r3, [r7, #4]
 801e0bc:	2201      	movs	r2, #1
 801e0be:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	2200      	movs	r2, #0
 801e0c4:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e0c6:	4b1a      	ldr	r3, [pc, #104]	; (801e130 <UTIL_TIMER_Start+0xd8>)
 801e0c8:	681b      	ldr	r3, [r3, #0]
 801e0ca:	2b00      	cmp	r3, #0
 801e0cc:	d106      	bne.n	801e0dc <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e0ce:	4b17      	ldr	r3, [pc, #92]	; (801e12c <UTIL_TIMER_Start+0xd4>)
 801e0d0:	691b      	ldr	r3, [r3, #16]
 801e0d2:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e0d4:	6878      	ldr	r0, [r7, #4]
 801e0d6:	f000 f9eb 	bl	801e4b0 <TimerInsertNewHeadTimer>
 801e0da:	e017      	b.n	801e10c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e0dc:	4b13      	ldr	r3, [pc, #76]	; (801e12c <UTIL_TIMER_Start+0xd4>)
 801e0de:	699b      	ldr	r3, [r3, #24]
 801e0e0:	4798      	blx	r3
 801e0e2:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	681a      	ldr	r2, [r3, #0]
 801e0e8:	697b      	ldr	r3, [r7, #20]
 801e0ea:	441a      	add	r2, r3
 801e0ec:	687b      	ldr	r3, [r7, #4]
 801e0ee:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	681a      	ldr	r2, [r3, #0]
 801e0f4:	4b0e      	ldr	r3, [pc, #56]	; (801e130 <UTIL_TIMER_Start+0xd8>)
 801e0f6:	681b      	ldr	r3, [r3, #0]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	429a      	cmp	r2, r3
 801e0fc:	d203      	bcs.n	801e106 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e0fe:	6878      	ldr	r0, [r7, #4]
 801e100:	f000 f9d6 	bl	801e4b0 <TimerInsertNewHeadTimer>
 801e104:	e002      	b.n	801e10c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e106:	6878      	ldr	r0, [r7, #4]
 801e108:	f000 f9a2 	bl	801e450 <TimerInsertTimer>
 801e10c:	69fb      	ldr	r3, [r7, #28]
 801e10e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	f383 8810 	msr	PRIMASK, r3
}
 801e116:	bf00      	nop
  {
 801e118:	e002      	b.n	801e120 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e11a:	2301      	movs	r3, #1
 801e11c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e124:	4618      	mov	r0, r3
 801e126:	3728      	adds	r7, #40	; 0x28
 801e128:	46bd      	mov	sp, r7
 801e12a:	bd80      	pop	{r7, pc}
 801e12c:	0801f594 	.word	0x0801f594
 801e130:	20001870 	.word	0x20001870

0801e134 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e134:	b580      	push	{r7, lr}
 801e136:	b088      	sub	sp, #32
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e13c:	2300      	movs	r3, #0
 801e13e:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	2b00      	cmp	r3, #0
 801e144:	d05b      	beq.n	801e1fe <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e146:	f3ef 8310 	mrs	r3, PRIMASK
 801e14a:	60fb      	str	r3, [r7, #12]
  return(result);
 801e14c:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e14e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e150:	b672      	cpsid	i
}
 801e152:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e154:	4b2d      	ldr	r3, [pc, #180]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e15a:	4b2c      	ldr	r3, [pc, #176]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e15c:	681b      	ldr	r3, [r3, #0]
 801e15e:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e160:	687b      	ldr	r3, [r7, #4]
 801e162:	2201      	movs	r2, #1
 801e164:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e166:	4b29      	ldr	r3, [pc, #164]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	2b00      	cmp	r3, #0
 801e16c:	d041      	beq.n	801e1f2 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	2200      	movs	r2, #0
 801e172:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e174:	4b25      	ldr	r3, [pc, #148]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e176:	681b      	ldr	r3, [r3, #0]
 801e178:	687a      	ldr	r2, [r7, #4]
 801e17a:	429a      	cmp	r2, r3
 801e17c:	d134      	bne.n	801e1e8 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e17e:	4b23      	ldr	r3, [pc, #140]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	2200      	movs	r2, #0
 801e184:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e186:	4b21      	ldr	r3, [pc, #132]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e188:	681b      	ldr	r3, [r3, #0]
 801e18a:	695b      	ldr	r3, [r3, #20]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d00a      	beq.n	801e1a6 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e190:	4b1e      	ldr	r3, [pc, #120]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	695b      	ldr	r3, [r3, #20]
 801e196:	4a1d      	ldr	r2, [pc, #116]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e198:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e19a:	4b1c      	ldr	r3, [pc, #112]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e19c:	681b      	ldr	r3, [r3, #0]
 801e19e:	4618      	mov	r0, r3
 801e1a0:	f000 f92c 	bl	801e3fc <TimerSetTimeout>
 801e1a4:	e023      	b.n	801e1ee <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1a6:	4b1a      	ldr	r3, [pc, #104]	; (801e210 <UTIL_TIMER_Stop+0xdc>)
 801e1a8:	68db      	ldr	r3, [r3, #12]
 801e1aa:	4798      	blx	r3
            TimerListHead = NULL;
 801e1ac:	4b17      	ldr	r3, [pc, #92]	; (801e20c <UTIL_TIMER_Stop+0xd8>)
 801e1ae:	2200      	movs	r2, #0
 801e1b0:	601a      	str	r2, [r3, #0]
 801e1b2:	e01c      	b.n	801e1ee <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1b4:	697a      	ldr	r2, [r7, #20]
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	429a      	cmp	r2, r3
 801e1ba:	d110      	bne.n	801e1de <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e1bc:	697b      	ldr	r3, [r7, #20]
 801e1be:	695b      	ldr	r3, [r3, #20]
 801e1c0:	2b00      	cmp	r3, #0
 801e1c2:	d006      	beq.n	801e1d2 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e1c4:	697b      	ldr	r3, [r7, #20]
 801e1c6:	695b      	ldr	r3, [r3, #20]
 801e1c8:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1ca:	69bb      	ldr	r3, [r7, #24]
 801e1cc:	697a      	ldr	r2, [r7, #20]
 801e1ce:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e1d0:	e00d      	b.n	801e1ee <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e1d2:	2300      	movs	r3, #0
 801e1d4:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1d6:	69bb      	ldr	r3, [r7, #24]
 801e1d8:	697a      	ldr	r2, [r7, #20]
 801e1da:	615a      	str	r2, [r3, #20]
            break;
 801e1dc:	e007      	b.n	801e1ee <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e1de:	697b      	ldr	r3, [r7, #20]
 801e1e0:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e1e2:	697b      	ldr	r3, [r7, #20]
 801e1e4:	695b      	ldr	r3, [r3, #20]
 801e1e6:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e1e8:	697b      	ldr	r3, [r7, #20]
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d1e2      	bne.n	801e1b4 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e1ee:	2300      	movs	r3, #0
 801e1f0:	77fb      	strb	r3, [r7, #31]
 801e1f2:	693b      	ldr	r3, [r7, #16]
 801e1f4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e1f6:	68bb      	ldr	r3, [r7, #8]
 801e1f8:	f383 8810 	msr	PRIMASK, r3
}
 801e1fc:	e001      	b.n	801e202 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e1fe:	2301      	movs	r3, #1
 801e200:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e202:	7ffb      	ldrb	r3, [r7, #31]
}
 801e204:	4618      	mov	r0, r3
 801e206:	3720      	adds	r7, #32
 801e208:	46bd      	mov	sp, r7
 801e20a:	bd80      	pop	{r7, pc}
 801e20c:	20001870 	.word	0x20001870
 801e210:	0801f594 	.word	0x0801f594

0801e214 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e214:	b580      	push	{r7, lr}
 801e216:	b084      	sub	sp, #16
 801e218:	af00      	add	r7, sp, #0
 801e21a:	6078      	str	r0, [r7, #4]
 801e21c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e21e:	2300      	movs	r3, #0
 801e220:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e222:	687b      	ldr	r3, [r7, #4]
 801e224:	2b00      	cmp	r3, #0
 801e226:	d102      	bne.n	801e22e <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e228:	2301      	movs	r3, #1
 801e22a:	73fb      	strb	r3, [r7, #15]
 801e22c:	e014      	b.n	801e258 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e22e:	4b0d      	ldr	r3, [pc, #52]	; (801e264 <UTIL_TIMER_SetPeriod+0x50>)
 801e230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e232:	6838      	ldr	r0, [r7, #0]
 801e234:	4798      	blx	r3
 801e236:	4602      	mov	r2, r0
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e23c:	6878      	ldr	r0, [r7, #4]
 801e23e:	f000 f8c1 	bl	801e3c4 <TimerExists>
 801e242:	4603      	mov	r3, r0
 801e244:	2b00      	cmp	r3, #0
 801e246:	d007      	beq.n	801e258 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e248:	6878      	ldr	r0, [r7, #4]
 801e24a:	f7ff ff73 	bl	801e134 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e24e:	6878      	ldr	r0, [r7, #4]
 801e250:	f7ff ff02 	bl	801e058 <UTIL_TIMER_Start>
 801e254:	4603      	mov	r3, r0
 801e256:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e258:	7bfb      	ldrb	r3, [r7, #15]
}
 801e25a:	4618      	mov	r0, r3
 801e25c:	3710      	adds	r7, #16
 801e25e:	46bd      	mov	sp, r7
 801e260:	bd80      	pop	{r7, pc}
 801e262:	bf00      	nop
 801e264:	0801f594 	.word	0x0801f594

0801e268 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e268:	b590      	push	{r4, r7, lr}
 801e26a:	b089      	sub	sp, #36	; 0x24
 801e26c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e26e:	f3ef 8310 	mrs	r3, PRIMASK
 801e272:	60bb      	str	r3, [r7, #8]
  return(result);
 801e274:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e276:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e278:	b672      	cpsid	i
}
 801e27a:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e27c:	4b38      	ldr	r3, [pc, #224]	; (801e360 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e27e:	695b      	ldr	r3, [r3, #20]
 801e280:	4798      	blx	r3
 801e282:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e284:	4b36      	ldr	r3, [pc, #216]	; (801e360 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e286:	691b      	ldr	r3, [r3, #16]
 801e288:	4798      	blx	r3
 801e28a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e28c:	693a      	ldr	r2, [r7, #16]
 801e28e:	697b      	ldr	r3, [r7, #20]
 801e290:	1ad3      	subs	r3, r2, r3
 801e292:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e294:	4b33      	ldr	r3, [pc, #204]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	2b00      	cmp	r3, #0
 801e29a:	d037      	beq.n	801e30c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e29c:	4b31      	ldr	r3, [pc, #196]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e29e:	681b      	ldr	r3, [r3, #0]
 801e2a0:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2a2:	69fb      	ldr	r3, [r7, #28]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	68fa      	ldr	r2, [r7, #12]
 801e2a8:	429a      	cmp	r2, r3
 801e2aa:	d206      	bcs.n	801e2ba <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2ac:	69fb      	ldr	r3, [r7, #28]
 801e2ae:	681a      	ldr	r2, [r3, #0]
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	1ad2      	subs	r2, r2, r3
 801e2b4:	69fb      	ldr	r3, [r7, #28]
 801e2b6:	601a      	str	r2, [r3, #0]
 801e2b8:	e002      	b.n	801e2c0 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2ba:	69fb      	ldr	r3, [r7, #28]
 801e2bc:	2200      	movs	r2, #0
 801e2be:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e2c0:	69fb      	ldr	r3, [r7, #28]
 801e2c2:	695b      	ldr	r3, [r3, #20]
 801e2c4:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e2c6:	69fb      	ldr	r3, [r7, #28]
 801e2c8:	2b00      	cmp	r3, #0
 801e2ca:	d1ea      	bne.n	801e2a2 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e2cc:	e01e      	b.n	801e30c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e2ce:	4b25      	ldr	r3, [pc, #148]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2d0:	681b      	ldr	r3, [r3, #0]
 801e2d2:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e2d4:	4b23      	ldr	r3, [pc, #140]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2d6:	681b      	ldr	r3, [r3, #0]
 801e2d8:	695b      	ldr	r3, [r3, #20]
 801e2da:	4a22      	ldr	r2, [pc, #136]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2dc:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e2de:	69fb      	ldr	r3, [r7, #28]
 801e2e0:	2200      	movs	r2, #0
 801e2e2:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e2e4:	69fb      	ldr	r3, [r7, #28]
 801e2e6:	2200      	movs	r2, #0
 801e2e8:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e2ea:	69fb      	ldr	r3, [r7, #28]
 801e2ec:	68db      	ldr	r3, [r3, #12]
 801e2ee:	69fa      	ldr	r2, [r7, #28]
 801e2f0:	6912      	ldr	r2, [r2, #16]
 801e2f2:	4610      	mov	r0, r2
 801e2f4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e2f6:	69fb      	ldr	r3, [r7, #28]
 801e2f8:	7adb      	ldrb	r3, [r3, #11]
 801e2fa:	2b01      	cmp	r3, #1
 801e2fc:	d106      	bne.n	801e30c <UTIL_TIMER_IRQ_Handler+0xa4>
 801e2fe:	69fb      	ldr	r3, [r7, #28]
 801e300:	7a9b      	ldrb	r3, [r3, #10]
 801e302:	2b00      	cmp	r3, #0
 801e304:	d102      	bne.n	801e30c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e306:	69f8      	ldr	r0, [r7, #28]
 801e308:	f7ff fea6 	bl	801e058 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e30c:	4b15      	ldr	r3, [pc, #84]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e30e:	681b      	ldr	r3, [r3, #0]
 801e310:	2b00      	cmp	r3, #0
 801e312:	d00d      	beq.n	801e330 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e314:	4b13      	ldr	r3, [pc, #76]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d0d7      	beq.n	801e2ce <UTIL_TIMER_IRQ_Handler+0x66>
 801e31e:	4b11      	ldr	r3, [pc, #68]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	681c      	ldr	r4, [r3, #0]
 801e324:	4b0e      	ldr	r3, [pc, #56]	; (801e360 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e326:	699b      	ldr	r3, [r3, #24]
 801e328:	4798      	blx	r3
 801e32a:	4603      	mov	r3, r0
 801e32c:	429c      	cmp	r4, r3
 801e32e:	d3ce      	bcc.n	801e2ce <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e330:	4b0c      	ldr	r3, [pc, #48]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e332:	681b      	ldr	r3, [r3, #0]
 801e334:	2b00      	cmp	r3, #0
 801e336:	d009      	beq.n	801e34c <UTIL_TIMER_IRQ_Handler+0xe4>
 801e338:	4b0a      	ldr	r3, [pc, #40]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	7a1b      	ldrb	r3, [r3, #8]
 801e33e:	2b00      	cmp	r3, #0
 801e340:	d104      	bne.n	801e34c <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e342:	4b08      	ldr	r3, [pc, #32]	; (801e364 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e344:	681b      	ldr	r3, [r3, #0]
 801e346:	4618      	mov	r0, r3
 801e348:	f000 f858 	bl	801e3fc <TimerSetTimeout>
 801e34c:	69bb      	ldr	r3, [r7, #24]
 801e34e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	f383 8810 	msr	PRIMASK, r3
}
 801e356:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e358:	bf00      	nop
 801e35a:	3724      	adds	r7, #36	; 0x24
 801e35c:	46bd      	mov	sp, r7
 801e35e:	bd90      	pop	{r4, r7, pc}
 801e360:	0801f594 	.word	0x0801f594
 801e364:	20001870 	.word	0x20001870

0801e368 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e368:	b580      	push	{r7, lr}
 801e36a:	b082      	sub	sp, #8
 801e36c:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e36e:	4b06      	ldr	r3, [pc, #24]	; (801e388 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e370:	69db      	ldr	r3, [r3, #28]
 801e372:	4798      	blx	r3
 801e374:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e376:	4b04      	ldr	r3, [pc, #16]	; (801e388 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e37a:	6878      	ldr	r0, [r7, #4]
 801e37c:	4798      	blx	r3
 801e37e:	4603      	mov	r3, r0
}
 801e380:	4618      	mov	r0, r3
 801e382:	3708      	adds	r7, #8
 801e384:	46bd      	mov	sp, r7
 801e386:	bd80      	pop	{r7, pc}
 801e388:	0801f594 	.word	0x0801f594

0801e38c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b084      	sub	sp, #16
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e394:	4b0a      	ldr	r3, [pc, #40]	; (801e3c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e396:	69db      	ldr	r3, [r3, #28]
 801e398:	4798      	blx	r3
 801e39a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e39c:	4b08      	ldr	r3, [pc, #32]	; (801e3c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3a0:	6878      	ldr	r0, [r7, #4]
 801e3a2:	4798      	blx	r3
 801e3a4:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3a6:	4b06      	ldr	r3, [pc, #24]	; (801e3c0 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3aa:	68f9      	ldr	r1, [r7, #12]
 801e3ac:	68ba      	ldr	r2, [r7, #8]
 801e3ae:	1a8a      	subs	r2, r1, r2
 801e3b0:	4610      	mov	r0, r2
 801e3b2:	4798      	blx	r3
 801e3b4:	4603      	mov	r3, r0
}
 801e3b6:	4618      	mov	r0, r3
 801e3b8:	3710      	adds	r7, #16
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	bd80      	pop	{r7, pc}
 801e3be:	bf00      	nop
 801e3c0:	0801f594 	.word	0x0801f594

0801e3c4 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e3c4:	b480      	push	{r7}
 801e3c6:	b085      	sub	sp, #20
 801e3c8:	af00      	add	r7, sp, #0
 801e3ca:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e3cc:	4b0a      	ldr	r3, [pc, #40]	; (801e3f8 <TimerExists+0x34>)
 801e3ce:	681b      	ldr	r3, [r3, #0]
 801e3d0:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e3d2:	e008      	b.n	801e3e6 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e3d4:	68fa      	ldr	r2, [r7, #12]
 801e3d6:	687b      	ldr	r3, [r7, #4]
 801e3d8:	429a      	cmp	r2, r3
 801e3da:	d101      	bne.n	801e3e0 <TimerExists+0x1c>
    {
      return true;
 801e3dc:	2301      	movs	r3, #1
 801e3de:	e006      	b.n	801e3ee <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	695b      	ldr	r3, [r3, #20]
 801e3e4:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e3e6:	68fb      	ldr	r3, [r7, #12]
 801e3e8:	2b00      	cmp	r3, #0
 801e3ea:	d1f3      	bne.n	801e3d4 <TimerExists+0x10>
  }
  return false;
 801e3ec:	2300      	movs	r3, #0
}
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	3714      	adds	r7, #20
 801e3f2:	46bd      	mov	sp, r7
 801e3f4:	bc80      	pop	{r7}
 801e3f6:	4770      	bx	lr
 801e3f8:	20001870 	.word	0x20001870

0801e3fc <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e3fc:	b590      	push	{r4, r7, lr}
 801e3fe:	b085      	sub	sp, #20
 801e400:	af00      	add	r7, sp, #0
 801e402:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e404:	4b11      	ldr	r3, [pc, #68]	; (801e44c <TimerSetTimeout+0x50>)
 801e406:	6a1b      	ldr	r3, [r3, #32]
 801e408:	4798      	blx	r3
 801e40a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e40c:	687b      	ldr	r3, [r7, #4]
 801e40e:	2201      	movs	r2, #1
 801e410:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e412:	687b      	ldr	r3, [r7, #4]
 801e414:	681c      	ldr	r4, [r3, #0]
 801e416:	4b0d      	ldr	r3, [pc, #52]	; (801e44c <TimerSetTimeout+0x50>)
 801e418:	699b      	ldr	r3, [r3, #24]
 801e41a:	4798      	blx	r3
 801e41c:	4602      	mov	r2, r0
 801e41e:	68fb      	ldr	r3, [r7, #12]
 801e420:	4413      	add	r3, r2
 801e422:	429c      	cmp	r4, r3
 801e424:	d207      	bcs.n	801e436 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e426:	4b09      	ldr	r3, [pc, #36]	; (801e44c <TimerSetTimeout+0x50>)
 801e428:	699b      	ldr	r3, [r3, #24]
 801e42a:	4798      	blx	r3
 801e42c:	4602      	mov	r2, r0
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	441a      	add	r2, r3
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e436:	4b05      	ldr	r3, [pc, #20]	; (801e44c <TimerSetTimeout+0x50>)
 801e438:	689b      	ldr	r3, [r3, #8]
 801e43a:	687a      	ldr	r2, [r7, #4]
 801e43c:	6812      	ldr	r2, [r2, #0]
 801e43e:	4610      	mov	r0, r2
 801e440:	4798      	blx	r3
}
 801e442:	bf00      	nop
 801e444:	3714      	adds	r7, #20
 801e446:	46bd      	mov	sp, r7
 801e448:	bd90      	pop	{r4, r7, pc}
 801e44a:	bf00      	nop
 801e44c:	0801f594 	.word	0x0801f594

0801e450 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e450:	b480      	push	{r7}
 801e452:	b085      	sub	sp, #20
 801e454:	af00      	add	r7, sp, #0
 801e456:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e458:	4b14      	ldr	r3, [pc, #80]	; (801e4ac <TimerInsertTimer+0x5c>)
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e45e:	4b13      	ldr	r3, [pc, #76]	; (801e4ac <TimerInsertTimer+0x5c>)
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	695b      	ldr	r3, [r3, #20]
 801e464:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e466:	e012      	b.n	801e48e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	681a      	ldr	r2, [r3, #0]
 801e46c:	68bb      	ldr	r3, [r7, #8]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	429a      	cmp	r2, r3
 801e472:	d905      	bls.n	801e480 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e474:	68bb      	ldr	r3, [r7, #8]
 801e476:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e478:	68bb      	ldr	r3, [r7, #8]
 801e47a:	695b      	ldr	r3, [r3, #20]
 801e47c:	60bb      	str	r3, [r7, #8]
 801e47e:	e006      	b.n	801e48e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e480:	68fb      	ldr	r3, [r7, #12]
 801e482:	687a      	ldr	r2, [r7, #4]
 801e484:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	68ba      	ldr	r2, [r7, #8]
 801e48a:	615a      	str	r2, [r3, #20]
        return;
 801e48c:	e009      	b.n	801e4a2 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e48e:	68fb      	ldr	r3, [r7, #12]
 801e490:	695b      	ldr	r3, [r3, #20]
 801e492:	2b00      	cmp	r3, #0
 801e494:	d1e8      	bne.n	801e468 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e496:	68fb      	ldr	r3, [r7, #12]
 801e498:	687a      	ldr	r2, [r7, #4]
 801e49a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	2200      	movs	r2, #0
 801e4a0:	615a      	str	r2, [r3, #20]
}
 801e4a2:	3714      	adds	r7, #20
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bc80      	pop	{r7}
 801e4a8:	4770      	bx	lr
 801e4aa:	bf00      	nop
 801e4ac:	20001870 	.word	0x20001870

0801e4b0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4b0:	b580      	push	{r7, lr}
 801e4b2:	b084      	sub	sp, #16
 801e4b4:	af00      	add	r7, sp, #0
 801e4b6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4b8:	4b0b      	ldr	r3, [pc, #44]	; (801e4e8 <TimerInsertNewHeadTimer+0x38>)
 801e4ba:	681b      	ldr	r3, [r3, #0]
 801e4bc:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e4be:	68fb      	ldr	r3, [r7, #12]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d002      	beq.n	801e4ca <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e4c4:	68fb      	ldr	r3, [r7, #12]
 801e4c6:	2200      	movs	r2, #0
 801e4c8:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	68fa      	ldr	r2, [r7, #12]
 801e4ce:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e4d0:	4a05      	ldr	r2, [pc, #20]	; (801e4e8 <TimerInsertNewHeadTimer+0x38>)
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e4d6:	4b04      	ldr	r3, [pc, #16]	; (801e4e8 <TimerInsertNewHeadTimer+0x38>)
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	4618      	mov	r0, r3
 801e4dc:	f7ff ff8e 	bl	801e3fc <TimerSetTimeout>
}
 801e4e0:	bf00      	nop
 801e4e2:	3710      	adds	r7, #16
 801e4e4:	46bd      	mov	sp, r7
 801e4e6:	bd80      	pop	{r7, pc}
 801e4e8:	20001870 	.word	0x20001870

0801e4ec <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e4ec:	b580      	push	{r7, lr}
 801e4ee:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e4f0:	2218      	movs	r2, #24
 801e4f2:	2100      	movs	r1, #0
 801e4f4:	4807      	ldr	r0, [pc, #28]	; (801e514 <UTIL_ADV_TRACE_Init+0x28>)
 801e4f6:	f7fe fffa 	bl	801d4ee <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e4fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e4fe:	2100      	movs	r1, #0
 801e500:	4805      	ldr	r0, [pc, #20]	; (801e518 <UTIL_ADV_TRACE_Init+0x2c>)
 801e502:	f7fe fff4 	bl	801d4ee <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e506:	4b05      	ldr	r3, [pc, #20]	; (801e51c <UTIL_ADV_TRACE_Init+0x30>)
 801e508:	681b      	ldr	r3, [r3, #0]
 801e50a:	4805      	ldr	r0, [pc, #20]	; (801e520 <UTIL_ADV_TRACE_Init+0x34>)
 801e50c:	4798      	blx	r3
 801e50e:	4603      	mov	r3, r0
}
 801e510:	4618      	mov	r0, r3
 801e512:	bd80      	pop	{r7, pc}
 801e514:	20001874 	.word	0x20001874
 801e518:	2000188c 	.word	0x2000188c
 801e51c:	0801f5d4 	.word	0x0801f5d4
 801e520:	0801e78d 	.word	0x0801e78d

0801e524 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e524:	b480      	push	{r7}
 801e526:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e528:	4b06      	ldr	r3, [pc, #24]	; (801e544 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e52a:	8a5a      	ldrh	r2, [r3, #18]
 801e52c:	4b05      	ldr	r3, [pc, #20]	; (801e544 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e52e:	8a1b      	ldrh	r3, [r3, #16]
 801e530:	429a      	cmp	r2, r3
 801e532:	d101      	bne.n	801e538 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e534:	2301      	movs	r3, #1
 801e536:	e000      	b.n	801e53a <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e538:	2300      	movs	r3, #0
}
 801e53a:	4618      	mov	r0, r3
 801e53c:	46bd      	mov	sp, r7
 801e53e:	bc80      	pop	{r7}
 801e540:	4770      	bx	lr
 801e542:	bf00      	nop
 801e544:	20001874 	.word	0x20001874

0801e548 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e548:	b408      	push	{r3}
 801e54a:	b580      	push	{r7, lr}
 801e54c:	b08d      	sub	sp, #52	; 0x34
 801e54e:	af00      	add	r7, sp, #0
 801e550:	60f8      	str	r0, [r7, #12]
 801e552:	60b9      	str	r1, [r7, #8]
 801e554:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e556:	2300      	movs	r3, #0
 801e558:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e55a:	2300      	movs	r3, #0
 801e55c:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e55e:	4b37      	ldr	r3, [pc, #220]	; (801e63c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e560:	7a1b      	ldrb	r3, [r3, #8]
 801e562:	461a      	mov	r2, r3
 801e564:	68fb      	ldr	r3, [r7, #12]
 801e566:	4293      	cmp	r3, r2
 801e568:	d902      	bls.n	801e570 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e56a:	f06f 0304 	mvn.w	r3, #4
 801e56e:	e05e      	b.n	801e62e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e570:	4b32      	ldr	r3, [pc, #200]	; (801e63c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e572:	68da      	ldr	r2, [r3, #12]
 801e574:	68bb      	ldr	r3, [r7, #8]
 801e576:	4013      	ands	r3, r2
 801e578:	68ba      	ldr	r2, [r7, #8]
 801e57a:	429a      	cmp	r2, r3
 801e57c:	d002      	beq.n	801e584 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e57e:	f06f 0305 	mvn.w	r3, #5
 801e582:	e054      	b.n	801e62e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e584:	4b2d      	ldr	r3, [pc, #180]	; (801e63c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e586:	685b      	ldr	r3, [r3, #4]
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d00a      	beq.n	801e5a2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d007      	beq.n	801e5a2 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e592:	4b2a      	ldr	r3, [pc, #168]	; (801e63c <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e594:	685b      	ldr	r3, [r3, #4]
 801e596:	f107 0116 	add.w	r1, r7, #22
 801e59a:	f107 0218 	add.w	r2, r7, #24
 801e59e:	4610      	mov	r0, r2
 801e5a0:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5a6:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5b0:	4823      	ldr	r0, [pc, #140]	; (801e640 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5b2:	f7ff fa29 	bl	801da08 <tiny_vsnprintf_like>
 801e5b6:	4603      	mov	r3, r0
 801e5b8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5ba:	f000 f9f1 	bl	801e9a0 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e5be:	8afa      	ldrh	r2, [r7, #22]
 801e5c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e5c2:	4413      	add	r3, r2
 801e5c4:	b29b      	uxth	r3, r3
 801e5c6:	f107 0214 	add.w	r2, r7, #20
 801e5ca:	4611      	mov	r1, r2
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	f000 f969 	bl	801e8a4 <TRACE_AllocateBufer>
 801e5d2:	4603      	mov	r3, r0
 801e5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5d8:	d025      	beq.n	801e626 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e5da:	2300      	movs	r3, #0
 801e5dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e5de:	e00e      	b.n	801e5fe <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e5e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e5e2:	8aba      	ldrh	r2, [r7, #20]
 801e5e4:	3330      	adds	r3, #48	; 0x30
 801e5e6:	443b      	add	r3, r7
 801e5e8:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e5ec:	4b15      	ldr	r3, [pc, #84]	; (801e644 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e5ee:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e5f0:	8abb      	ldrh	r3, [r7, #20]
 801e5f2:	3301      	adds	r3, #1
 801e5f4:	b29b      	uxth	r3, r3
 801e5f6:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e5f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e5fa:	3301      	adds	r3, #1
 801e5fc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e5fe:	8afb      	ldrh	r3, [r7, #22]
 801e600:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e602:	429a      	cmp	r2, r3
 801e604:	d3ec      	bcc.n	801e5e0 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e606:	8abb      	ldrh	r3, [r7, #20]
 801e608:	461a      	mov	r2, r3
 801e60a:	4b0e      	ldr	r3, [pc, #56]	; (801e644 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e60c:	18d0      	adds	r0, r2, r3
 801e60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e610:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e612:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e616:	f7ff f9f7 	bl	801da08 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e61a:	f000 f9df 	bl	801e9dc <TRACE_UnLock>

    return TRACE_Send();
 801e61e:	f000 f831 	bl	801e684 <TRACE_Send>
 801e622:	4603      	mov	r3, r0
 801e624:	e003      	b.n	801e62e <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e626:	f000 f9d9 	bl	801e9dc <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e62a:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e62e:	4618      	mov	r0, r3
 801e630:	3734      	adds	r7, #52	; 0x34
 801e632:	46bd      	mov	sp, r7
 801e634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e638:	b001      	add	sp, #4
 801e63a:	4770      	bx	lr
 801e63c:	20001874 	.word	0x20001874
 801e640:	20001c8c 	.word	0x20001c8c
 801e644:	2000188c 	.word	0x2000188c

0801e648 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e648:	b480      	push	{r7}
 801e64a:	b083      	sub	sp, #12
 801e64c:	af00      	add	r7, sp, #0
 801e64e:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e650:	4a03      	ldr	r2, [pc, #12]	; (801e660 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	6053      	str	r3, [r2, #4]
}
 801e656:	bf00      	nop
 801e658:	370c      	adds	r7, #12
 801e65a:	46bd      	mov	sp, r7
 801e65c:	bc80      	pop	{r7}
 801e65e:	4770      	bx	lr
 801e660:	20001874 	.word	0x20001874

0801e664 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e664:	b480      	push	{r7}
 801e666:	b083      	sub	sp, #12
 801e668:	af00      	add	r7, sp, #0
 801e66a:	4603      	mov	r3, r0
 801e66c:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e66e:	4a04      	ldr	r2, [pc, #16]	; (801e680 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e670:	79fb      	ldrb	r3, [r7, #7]
 801e672:	7213      	strb	r3, [r2, #8]
}
 801e674:	bf00      	nop
 801e676:	370c      	adds	r7, #12
 801e678:	46bd      	mov	sp, r7
 801e67a:	bc80      	pop	{r7}
 801e67c:	4770      	bx	lr
 801e67e:	bf00      	nop
 801e680:	20001874 	.word	0x20001874

0801e684 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e684:	b580      	push	{r7, lr}
 801e686:	b088      	sub	sp, #32
 801e688:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e68a:	2300      	movs	r3, #0
 801e68c:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e68e:	2300      	movs	r3, #0
 801e690:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e692:	f3ef 8310 	mrs	r3, PRIMASK
 801e696:	613b      	str	r3, [r7, #16]
  return(result);
 801e698:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e69a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e69c:	b672      	cpsid	i
}
 801e69e:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6a0:	f000 f9ba 	bl	801ea18 <TRACE_IsLocked>
 801e6a4:	4603      	mov	r3, r0
 801e6a6:	2b00      	cmp	r3, #0
 801e6a8:	d15d      	bne.n	801e766 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6aa:	f000 f979 	bl	801e9a0 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6ae:	4b34      	ldr	r3, [pc, #208]	; (801e780 <TRACE_Send+0xfc>)
 801e6b0:	8a1a      	ldrh	r2, [r3, #16]
 801e6b2:	4b33      	ldr	r3, [pc, #204]	; (801e780 <TRACE_Send+0xfc>)
 801e6b4:	8a5b      	ldrh	r3, [r3, #18]
 801e6b6:	429a      	cmp	r2, r3
 801e6b8:	d04d      	beq.n	801e756 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6ba:	4b31      	ldr	r3, [pc, #196]	; (801e780 <TRACE_Send+0xfc>)
 801e6bc:	789b      	ldrb	r3, [r3, #2]
 801e6be:	2b01      	cmp	r3, #1
 801e6c0:	d117      	bne.n	801e6f2 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e6c2:	4b2f      	ldr	r3, [pc, #188]	; (801e780 <TRACE_Send+0xfc>)
 801e6c4:	881a      	ldrh	r2, [r3, #0]
 801e6c6:	4b2e      	ldr	r3, [pc, #184]	; (801e780 <TRACE_Send+0xfc>)
 801e6c8:	8a1b      	ldrh	r3, [r3, #16]
 801e6ca:	1ad3      	subs	r3, r2, r3
 801e6cc:	b29a      	uxth	r2, r3
 801e6ce:	4b2c      	ldr	r3, [pc, #176]	; (801e780 <TRACE_Send+0xfc>)
 801e6d0:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e6d2:	4b2b      	ldr	r3, [pc, #172]	; (801e780 <TRACE_Send+0xfc>)
 801e6d4:	2202      	movs	r2, #2
 801e6d6:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e6d8:	4b29      	ldr	r3, [pc, #164]	; (801e780 <TRACE_Send+0xfc>)
 801e6da:	2200      	movs	r2, #0
 801e6dc:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e6de:	4b28      	ldr	r3, [pc, #160]	; (801e780 <TRACE_Send+0xfc>)
 801e6e0:	8a9b      	ldrh	r3, [r3, #20]
 801e6e2:	2b00      	cmp	r3, #0
 801e6e4:	d105      	bne.n	801e6f2 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e6e6:	4b26      	ldr	r3, [pc, #152]	; (801e780 <TRACE_Send+0xfc>)
 801e6e8:	2200      	movs	r2, #0
 801e6ea:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e6ec:	4b24      	ldr	r3, [pc, #144]	; (801e780 <TRACE_Send+0xfc>)
 801e6ee:	2200      	movs	r2, #0
 801e6f0:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e6f2:	4b23      	ldr	r3, [pc, #140]	; (801e780 <TRACE_Send+0xfc>)
 801e6f4:	789b      	ldrb	r3, [r3, #2]
 801e6f6:	2b00      	cmp	r3, #0
 801e6f8:	d115      	bne.n	801e726 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e6fa:	4b21      	ldr	r3, [pc, #132]	; (801e780 <TRACE_Send+0xfc>)
 801e6fc:	8a5a      	ldrh	r2, [r3, #18]
 801e6fe:	4b20      	ldr	r3, [pc, #128]	; (801e780 <TRACE_Send+0xfc>)
 801e700:	8a1b      	ldrh	r3, [r3, #16]
 801e702:	429a      	cmp	r2, r3
 801e704:	d908      	bls.n	801e718 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e706:	4b1e      	ldr	r3, [pc, #120]	; (801e780 <TRACE_Send+0xfc>)
 801e708:	8a5a      	ldrh	r2, [r3, #18]
 801e70a:	4b1d      	ldr	r3, [pc, #116]	; (801e780 <TRACE_Send+0xfc>)
 801e70c:	8a1b      	ldrh	r3, [r3, #16]
 801e70e:	1ad3      	subs	r3, r2, r3
 801e710:	b29a      	uxth	r2, r3
 801e712:	4b1b      	ldr	r3, [pc, #108]	; (801e780 <TRACE_Send+0xfc>)
 801e714:	829a      	strh	r2, [r3, #20]
 801e716:	e006      	b.n	801e726 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e718:	4b19      	ldr	r3, [pc, #100]	; (801e780 <TRACE_Send+0xfc>)
 801e71a:	8a1b      	ldrh	r3, [r3, #16]
 801e71c:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e720:	b29a      	uxth	r2, r3
 801e722:	4b17      	ldr	r3, [pc, #92]	; (801e780 <TRACE_Send+0xfc>)
 801e724:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e726:	4b16      	ldr	r3, [pc, #88]	; (801e780 <TRACE_Send+0xfc>)
 801e728:	8a1b      	ldrh	r3, [r3, #16]
 801e72a:	461a      	mov	r2, r3
 801e72c:	4b15      	ldr	r3, [pc, #84]	; (801e784 <TRACE_Send+0x100>)
 801e72e:	4413      	add	r3, r2
 801e730:	61bb      	str	r3, [r7, #24]
 801e732:	697b      	ldr	r3, [r7, #20]
 801e734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	f383 8810 	msr	PRIMASK, r3
}
 801e73c:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e73e:	f7e4 f96b 	bl	8002a18 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e742:	4b11      	ldr	r3, [pc, #68]	; (801e788 <TRACE_Send+0x104>)
 801e744:	68db      	ldr	r3, [r3, #12]
 801e746:	4a0e      	ldr	r2, [pc, #56]	; (801e780 <TRACE_Send+0xfc>)
 801e748:	8a92      	ldrh	r2, [r2, #20]
 801e74a:	4611      	mov	r1, r2
 801e74c:	69b8      	ldr	r0, [r7, #24]
 801e74e:	4798      	blx	r3
 801e750:	4603      	mov	r3, r0
 801e752:	77fb      	strb	r3, [r7, #31]
 801e754:	e00d      	b.n	801e772 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e756:	f000 f941 	bl	801e9dc <TRACE_UnLock>
 801e75a:	697b      	ldr	r3, [r7, #20]
 801e75c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e75e:	68bb      	ldr	r3, [r7, #8]
 801e760:	f383 8810 	msr	PRIMASK, r3
}
 801e764:	e005      	b.n	801e772 <TRACE_Send+0xee>
 801e766:	697b      	ldr	r3, [r7, #20]
 801e768:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	f383 8810 	msr	PRIMASK, r3
}
 801e770:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e772:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e776:	4618      	mov	r0, r3
 801e778:	3720      	adds	r7, #32
 801e77a:	46bd      	mov	sp, r7
 801e77c:	bd80      	pop	{r7, pc}
 801e77e:	bf00      	nop
 801e780:	20001874 	.word	0x20001874
 801e784:	2000188c 	.word	0x2000188c
 801e788:	0801f5d4 	.word	0x0801f5d4

0801e78c <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e78c:	b580      	push	{r7, lr}
 801e78e:	b088      	sub	sp, #32
 801e790:	af00      	add	r7, sp, #0
 801e792:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e794:	2300      	movs	r3, #0
 801e796:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e798:	f3ef 8310 	mrs	r3, PRIMASK
 801e79c:	617b      	str	r3, [r7, #20]
  return(result);
 801e79e:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7a2:	b672      	cpsid	i
}
 801e7a4:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7a6:	4b3c      	ldr	r3, [pc, #240]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7a8:	789b      	ldrb	r3, [r3, #2]
 801e7aa:	2b02      	cmp	r3, #2
 801e7ac:	d106      	bne.n	801e7bc <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7ae:	4b3a      	ldr	r3, [pc, #232]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7b0:	2200      	movs	r2, #0
 801e7b2:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7b4:	4b38      	ldr	r3, [pc, #224]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7b6:	2200      	movs	r2, #0
 801e7b8:	821a      	strh	r2, [r3, #16]
 801e7ba:	e00a      	b.n	801e7d2 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e7bc:	4b36      	ldr	r3, [pc, #216]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7be:	8a1a      	ldrh	r2, [r3, #16]
 801e7c0:	4b35      	ldr	r3, [pc, #212]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7c2:	8a9b      	ldrh	r3, [r3, #20]
 801e7c4:	4413      	add	r3, r2
 801e7c6:	b29b      	uxth	r3, r3
 801e7c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e7cc:	b29a      	uxth	r2, r3
 801e7ce:	4b32      	ldr	r3, [pc, #200]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7d0:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e7d2:	4b31      	ldr	r3, [pc, #196]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7d4:	8a1a      	ldrh	r2, [r3, #16]
 801e7d6:	4b30      	ldr	r3, [pc, #192]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7d8:	8a5b      	ldrh	r3, [r3, #18]
 801e7da:	429a      	cmp	r2, r3
 801e7dc:	d04d      	beq.n	801e87a <TRACE_TxCpltCallback+0xee>
 801e7de:	4b2e      	ldr	r3, [pc, #184]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7e0:	8adb      	ldrh	r3, [r3, #22]
 801e7e2:	2b01      	cmp	r3, #1
 801e7e4:	d149      	bne.n	801e87a <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e7e6:	4b2c      	ldr	r3, [pc, #176]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7e8:	789b      	ldrb	r3, [r3, #2]
 801e7ea:	2b01      	cmp	r3, #1
 801e7ec:	d117      	bne.n	801e81e <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e7ee:	4b2a      	ldr	r3, [pc, #168]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7f0:	881a      	ldrh	r2, [r3, #0]
 801e7f2:	4b29      	ldr	r3, [pc, #164]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7f4:	8a1b      	ldrh	r3, [r3, #16]
 801e7f6:	1ad3      	subs	r3, r2, r3
 801e7f8:	b29a      	uxth	r2, r3
 801e7fa:	4b27      	ldr	r3, [pc, #156]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e7fc:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e7fe:	4b26      	ldr	r3, [pc, #152]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e800:	2202      	movs	r2, #2
 801e802:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e804:	4b24      	ldr	r3, [pc, #144]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e806:	2200      	movs	r2, #0
 801e808:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e80a:	4b23      	ldr	r3, [pc, #140]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e80c:	8a9b      	ldrh	r3, [r3, #20]
 801e80e:	2b00      	cmp	r3, #0
 801e810:	d105      	bne.n	801e81e <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e812:	4b21      	ldr	r3, [pc, #132]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e814:	2200      	movs	r2, #0
 801e816:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e818:	4b1f      	ldr	r3, [pc, #124]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e81a:	2200      	movs	r2, #0
 801e81c:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e81e:	4b1e      	ldr	r3, [pc, #120]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e820:	789b      	ldrb	r3, [r3, #2]
 801e822:	2b00      	cmp	r3, #0
 801e824:	d115      	bne.n	801e852 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e826:	4b1c      	ldr	r3, [pc, #112]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e828:	8a5a      	ldrh	r2, [r3, #18]
 801e82a:	4b1b      	ldr	r3, [pc, #108]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e82c:	8a1b      	ldrh	r3, [r3, #16]
 801e82e:	429a      	cmp	r2, r3
 801e830:	d908      	bls.n	801e844 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e832:	4b19      	ldr	r3, [pc, #100]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e834:	8a5a      	ldrh	r2, [r3, #18]
 801e836:	4b18      	ldr	r3, [pc, #96]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e838:	8a1b      	ldrh	r3, [r3, #16]
 801e83a:	1ad3      	subs	r3, r2, r3
 801e83c:	b29a      	uxth	r2, r3
 801e83e:	4b16      	ldr	r3, [pc, #88]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e840:	829a      	strh	r2, [r3, #20]
 801e842:	e006      	b.n	801e852 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e844:	4b14      	ldr	r3, [pc, #80]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e846:	8a1b      	ldrh	r3, [r3, #16]
 801e848:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e84c:	b29a      	uxth	r2, r3
 801e84e:	4b12      	ldr	r3, [pc, #72]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e850:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e852:	4b11      	ldr	r3, [pc, #68]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e854:	8a1b      	ldrh	r3, [r3, #16]
 801e856:	461a      	mov	r2, r3
 801e858:	4b10      	ldr	r3, [pc, #64]	; (801e89c <TRACE_TxCpltCallback+0x110>)
 801e85a:	4413      	add	r3, r2
 801e85c:	61fb      	str	r3, [r7, #28]
 801e85e:	69bb      	ldr	r3, [r7, #24]
 801e860:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e862:	693b      	ldr	r3, [r7, #16]
 801e864:	f383 8810 	msr	PRIMASK, r3
}
 801e868:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e86a:	4b0d      	ldr	r3, [pc, #52]	; (801e8a0 <TRACE_TxCpltCallback+0x114>)
 801e86c:	68db      	ldr	r3, [r3, #12]
 801e86e:	4a0a      	ldr	r2, [pc, #40]	; (801e898 <TRACE_TxCpltCallback+0x10c>)
 801e870:	8a92      	ldrh	r2, [r2, #20]
 801e872:	4611      	mov	r1, r2
 801e874:	69f8      	ldr	r0, [r7, #28]
 801e876:	4798      	blx	r3
 801e878:	e00a      	b.n	801e890 <TRACE_TxCpltCallback+0x104>
 801e87a:	69bb      	ldr	r3, [r7, #24]
 801e87c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e87e:	68fb      	ldr	r3, [r7, #12]
 801e880:	f383 8810 	msr	PRIMASK, r3
}
 801e884:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e886:	f7e4 f8cf 	bl	8002a28 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e88a:	f000 f8a7 	bl	801e9dc <TRACE_UnLock>
  }
}
 801e88e:	bf00      	nop
 801e890:	bf00      	nop
 801e892:	3720      	adds	r7, #32
 801e894:	46bd      	mov	sp, r7
 801e896:	bd80      	pop	{r7, pc}
 801e898:	20001874 	.word	0x20001874
 801e89c:	2000188c 	.word	0x2000188c
 801e8a0:	0801f5d4 	.word	0x0801f5d4

0801e8a4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8a4:	b480      	push	{r7}
 801e8a6:	b087      	sub	sp, #28
 801e8a8:	af00      	add	r7, sp, #0
 801e8aa:	4603      	mov	r3, r0
 801e8ac:	6039      	str	r1, [r7, #0]
 801e8ae:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8b4:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8b6:	f3ef 8310 	mrs	r3, PRIMASK
 801e8ba:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8bc:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e8be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8c0:	b672      	cpsid	i
}
 801e8c2:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e8c4:	4b35      	ldr	r3, [pc, #212]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8c6:	8a5a      	ldrh	r2, [r3, #18]
 801e8c8:	4b34      	ldr	r3, [pc, #208]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8ca:	8a1b      	ldrh	r3, [r3, #16]
 801e8cc:	429a      	cmp	r2, r3
 801e8ce:	d11b      	bne.n	801e908 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e8d0:	4b32      	ldr	r3, [pc, #200]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8d2:	8a5b      	ldrh	r3, [r3, #18]
 801e8d4:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e8d8:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e8da:	88fa      	ldrh	r2, [r7, #6]
 801e8dc:	8afb      	ldrh	r3, [r7, #22]
 801e8de:	429a      	cmp	r2, r3
 801e8e0:	d33a      	bcc.n	801e958 <TRACE_AllocateBufer+0xb4>
 801e8e2:	4b2e      	ldr	r3, [pc, #184]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8e4:	8a1b      	ldrh	r3, [r3, #16]
 801e8e6:	88fa      	ldrh	r2, [r7, #6]
 801e8e8:	429a      	cmp	r2, r3
 801e8ea:	d235      	bcs.n	801e958 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e8ec:	4b2b      	ldr	r3, [pc, #172]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8ee:	2201      	movs	r2, #1
 801e8f0:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e8f2:	4b2a      	ldr	r3, [pc, #168]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8f4:	8a5a      	ldrh	r2, [r3, #18]
 801e8f6:	4b29      	ldr	r3, [pc, #164]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8f8:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e8fa:	4b28      	ldr	r3, [pc, #160]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e8fc:	8a1b      	ldrh	r3, [r3, #16]
 801e8fe:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e900:	4b26      	ldr	r3, [pc, #152]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e902:	2200      	movs	r2, #0
 801e904:	825a      	strh	r2, [r3, #18]
 801e906:	e027      	b.n	801e958 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e908:	4b24      	ldr	r3, [pc, #144]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e90a:	8a5a      	ldrh	r2, [r3, #18]
 801e90c:	4b23      	ldr	r3, [pc, #140]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e90e:	8a1b      	ldrh	r3, [r3, #16]
 801e910:	429a      	cmp	r2, r3
 801e912:	d91b      	bls.n	801e94c <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e914:	4b21      	ldr	r3, [pc, #132]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e916:	8a5b      	ldrh	r3, [r3, #18]
 801e918:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e91c:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e91e:	88fa      	ldrh	r2, [r7, #6]
 801e920:	8afb      	ldrh	r3, [r7, #22]
 801e922:	429a      	cmp	r2, r3
 801e924:	d318      	bcc.n	801e958 <TRACE_AllocateBufer+0xb4>
 801e926:	4b1d      	ldr	r3, [pc, #116]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e928:	8a1b      	ldrh	r3, [r3, #16]
 801e92a:	88fa      	ldrh	r2, [r7, #6]
 801e92c:	429a      	cmp	r2, r3
 801e92e:	d213      	bcs.n	801e958 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e930:	4b1a      	ldr	r3, [pc, #104]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e932:	2201      	movs	r2, #1
 801e934:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e936:	4b19      	ldr	r3, [pc, #100]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e938:	8a5a      	ldrh	r2, [r3, #18]
 801e93a:	4b18      	ldr	r3, [pc, #96]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e93c:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e93e:	4b17      	ldr	r3, [pc, #92]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e940:	8a1b      	ldrh	r3, [r3, #16]
 801e942:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e944:	4b15      	ldr	r3, [pc, #84]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e946:	2200      	movs	r2, #0
 801e948:	825a      	strh	r2, [r3, #18]
 801e94a:	e005      	b.n	801e958 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e94c:	4b13      	ldr	r3, [pc, #76]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e94e:	8a1a      	ldrh	r2, [r3, #16]
 801e950:	4b12      	ldr	r3, [pc, #72]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e952:	8a5b      	ldrh	r3, [r3, #18]
 801e954:	1ad3      	subs	r3, r2, r3
 801e956:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e958:	8afa      	ldrh	r2, [r7, #22]
 801e95a:	88fb      	ldrh	r3, [r7, #6]
 801e95c:	429a      	cmp	r2, r3
 801e95e:	d90f      	bls.n	801e980 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e960:	4b0e      	ldr	r3, [pc, #56]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e962:	8a5a      	ldrh	r2, [r3, #18]
 801e964:	683b      	ldr	r3, [r7, #0]
 801e966:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e968:	4b0c      	ldr	r3, [pc, #48]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e96a:	8a5a      	ldrh	r2, [r3, #18]
 801e96c:	88fb      	ldrh	r3, [r7, #6]
 801e96e:	4413      	add	r3, r2
 801e970:	b29b      	uxth	r3, r3
 801e972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e976:	b29a      	uxth	r2, r3
 801e978:	4b08      	ldr	r3, [pc, #32]	; (801e99c <TRACE_AllocateBufer+0xf8>)
 801e97a:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e97c:	2300      	movs	r3, #0
 801e97e:	82bb      	strh	r3, [r7, #20]
 801e980:	693b      	ldr	r3, [r7, #16]
 801e982:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e984:	68bb      	ldr	r3, [r7, #8]
 801e986:	f383 8810 	msr	PRIMASK, r3
}
 801e98a:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e98c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e990:	4618      	mov	r0, r3
 801e992:	371c      	adds	r7, #28
 801e994:	46bd      	mov	sp, r7
 801e996:	bc80      	pop	{r7}
 801e998:	4770      	bx	lr
 801e99a:	bf00      	nop
 801e99c:	20001874 	.word	0x20001874

0801e9a0 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9a0:	b480      	push	{r7}
 801e9a2:	b085      	sub	sp, #20
 801e9a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9a6:	f3ef 8310 	mrs	r3, PRIMASK
 801e9aa:	607b      	str	r3, [r7, #4]
  return(result);
 801e9ac:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9b0:	b672      	cpsid	i
}
 801e9b2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9b4:	4b08      	ldr	r3, [pc, #32]	; (801e9d8 <TRACE_Lock+0x38>)
 801e9b6:	8adb      	ldrh	r3, [r3, #22]
 801e9b8:	3301      	adds	r3, #1
 801e9ba:	b29a      	uxth	r2, r3
 801e9bc:	4b06      	ldr	r3, [pc, #24]	; (801e9d8 <TRACE_Lock+0x38>)
 801e9be:	82da      	strh	r2, [r3, #22]
 801e9c0:	68fb      	ldr	r3, [r7, #12]
 801e9c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9c4:	68bb      	ldr	r3, [r7, #8]
 801e9c6:	f383 8810 	msr	PRIMASK, r3
}
 801e9ca:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e9cc:	bf00      	nop
 801e9ce:	3714      	adds	r7, #20
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bc80      	pop	{r7}
 801e9d4:	4770      	bx	lr
 801e9d6:	bf00      	nop
 801e9d8:	20001874 	.word	0x20001874

0801e9dc <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e9dc:	b480      	push	{r7}
 801e9de:	b085      	sub	sp, #20
 801e9e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9e2:	f3ef 8310 	mrs	r3, PRIMASK
 801e9e6:	607b      	str	r3, [r7, #4]
  return(result);
 801e9e8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9ec:	b672      	cpsid	i
}
 801e9ee:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801e9f0:	4b08      	ldr	r3, [pc, #32]	; (801ea14 <TRACE_UnLock+0x38>)
 801e9f2:	8adb      	ldrh	r3, [r3, #22]
 801e9f4:	3b01      	subs	r3, #1
 801e9f6:	b29a      	uxth	r2, r3
 801e9f8:	4b06      	ldr	r3, [pc, #24]	; (801ea14 <TRACE_UnLock+0x38>)
 801e9fa:	82da      	strh	r2, [r3, #22]
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea00:	68bb      	ldr	r3, [r7, #8]
 801ea02:	f383 8810 	msr	PRIMASK, r3
}
 801ea06:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea08:	bf00      	nop
 801ea0a:	3714      	adds	r7, #20
 801ea0c:	46bd      	mov	sp, r7
 801ea0e:	bc80      	pop	{r7}
 801ea10:	4770      	bx	lr
 801ea12:	bf00      	nop
 801ea14:	20001874 	.word	0x20001874

0801ea18 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea18:	b480      	push	{r7}
 801ea1a:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea1c:	4b05      	ldr	r3, [pc, #20]	; (801ea34 <TRACE_IsLocked+0x1c>)
 801ea1e:	8adb      	ldrh	r3, [r3, #22]
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	bf14      	ite	ne
 801ea24:	2301      	movne	r3, #1
 801ea26:	2300      	moveq	r3, #0
 801ea28:	b2db      	uxtb	r3, r3
}
 801ea2a:	4618      	mov	r0, r3
 801ea2c:	46bd      	mov	sp, r7
 801ea2e:	bc80      	pop	{r7}
 801ea30:	4770      	bx	lr
 801ea32:	bf00      	nop
 801ea34:	20001874 	.word	0x20001874

0801ea38 <memset>:
 801ea38:	4402      	add	r2, r0
 801ea3a:	4603      	mov	r3, r0
 801ea3c:	4293      	cmp	r3, r2
 801ea3e:	d100      	bne.n	801ea42 <memset+0xa>
 801ea40:	4770      	bx	lr
 801ea42:	f803 1b01 	strb.w	r1, [r3], #1
 801ea46:	e7f9      	b.n	801ea3c <memset+0x4>

0801ea48 <__libc_init_array>:
 801ea48:	b570      	push	{r4, r5, r6, lr}
 801ea4a:	4d0d      	ldr	r5, [pc, #52]	; (801ea80 <__libc_init_array+0x38>)
 801ea4c:	4c0d      	ldr	r4, [pc, #52]	; (801ea84 <__libc_init_array+0x3c>)
 801ea4e:	1b64      	subs	r4, r4, r5
 801ea50:	10a4      	asrs	r4, r4, #2
 801ea52:	2600      	movs	r6, #0
 801ea54:	42a6      	cmp	r6, r4
 801ea56:	d109      	bne.n	801ea6c <__libc_init_array+0x24>
 801ea58:	4d0b      	ldr	r5, [pc, #44]	; (801ea88 <__libc_init_array+0x40>)
 801ea5a:	4c0c      	ldr	r4, [pc, #48]	; (801ea8c <__libc_init_array+0x44>)
 801ea5c:	f000 f900 	bl	801ec60 <_init>
 801ea60:	1b64      	subs	r4, r4, r5
 801ea62:	10a4      	asrs	r4, r4, #2
 801ea64:	2600      	movs	r6, #0
 801ea66:	42a6      	cmp	r6, r4
 801ea68:	d105      	bne.n	801ea76 <__libc_init_array+0x2e>
 801ea6a:	bd70      	pop	{r4, r5, r6, pc}
 801ea6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea70:	4798      	blx	r3
 801ea72:	3601      	adds	r6, #1
 801ea74:	e7ee      	b.n	801ea54 <__libc_init_array+0xc>
 801ea76:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea7a:	4798      	blx	r3
 801ea7c:	3601      	adds	r6, #1
 801ea7e:	e7f2      	b.n	801ea66 <__libc_init_array+0x1e>
 801ea80:	0801fc08 	.word	0x0801fc08
 801ea84:	0801fc08 	.word	0x0801fc08
 801ea88:	0801fc08 	.word	0x0801fc08
 801ea8c:	0801fc10 	.word	0x0801fc10

0801ea90 <__retarget_lock_acquire_recursive>:
 801ea90:	4770      	bx	lr

0801ea92 <__retarget_lock_release_recursive>:
 801ea92:	4770      	bx	lr

0801ea94 <register_fini>:
 801ea94:	4b02      	ldr	r3, [pc, #8]	; (801eaa0 <register_fini+0xc>)
 801ea96:	b113      	cbz	r3, 801ea9e <register_fini+0xa>
 801ea98:	4802      	ldr	r0, [pc, #8]	; (801eaa4 <register_fini+0x10>)
 801ea9a:	f000 b805 	b.w	801eaa8 <atexit>
 801ea9e:	4770      	bx	lr
 801eaa0:	00000000 	.word	0x00000000
 801eaa4:	0801eab5 	.word	0x0801eab5

0801eaa8 <atexit>:
 801eaa8:	2300      	movs	r3, #0
 801eaaa:	4601      	mov	r1, r0
 801eaac:	461a      	mov	r2, r3
 801eaae:	4618      	mov	r0, r3
 801eab0:	f000 b814 	b.w	801eadc <__register_exitproc>

0801eab4 <__libc_fini_array>:
 801eab4:	b538      	push	{r3, r4, r5, lr}
 801eab6:	4d07      	ldr	r5, [pc, #28]	; (801ead4 <__libc_fini_array+0x20>)
 801eab8:	4c07      	ldr	r4, [pc, #28]	; (801ead8 <__libc_fini_array+0x24>)
 801eaba:	1b64      	subs	r4, r4, r5
 801eabc:	10a4      	asrs	r4, r4, #2
 801eabe:	b91c      	cbnz	r4, 801eac8 <__libc_fini_array+0x14>
 801eac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eac4:	f000 b8d2 	b.w	801ec6c <_fini>
 801eac8:	3c01      	subs	r4, #1
 801eaca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eace:	4798      	blx	r3
 801ead0:	e7f5      	b.n	801eabe <__libc_fini_array+0xa>
 801ead2:	bf00      	nop
 801ead4:	0801fc10 	.word	0x0801fc10
 801ead8:	0801fc14 	.word	0x0801fc14

0801eadc <__register_exitproc>:
 801eadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eae0:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eb50 <__register_exitproc+0x74>
 801eae4:	4606      	mov	r6, r0
 801eae6:	f8da 0000 	ldr.w	r0, [sl]
 801eaea:	4698      	mov	r8, r3
 801eaec:	460f      	mov	r7, r1
 801eaee:	4691      	mov	r9, r2
 801eaf0:	f7ff ffce 	bl	801ea90 <__retarget_lock_acquire_recursive>
 801eaf4:	4b17      	ldr	r3, [pc, #92]	; (801eb54 <__register_exitproc+0x78>)
 801eaf6:	681c      	ldr	r4, [r3, #0]
 801eaf8:	b90c      	cbnz	r4, 801eafe <__register_exitproc+0x22>
 801eafa:	4c17      	ldr	r4, [pc, #92]	; (801eb58 <__register_exitproc+0x7c>)
 801eafc:	601c      	str	r4, [r3, #0]
 801eafe:	6865      	ldr	r5, [r4, #4]
 801eb00:	f8da 0000 	ldr.w	r0, [sl]
 801eb04:	2d1f      	cmp	r5, #31
 801eb06:	dd05      	ble.n	801eb14 <__register_exitproc+0x38>
 801eb08:	f7ff ffc3 	bl	801ea92 <__retarget_lock_release_recursive>
 801eb0c:	f04f 30ff 	mov.w	r0, #4294967295
 801eb10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb14:	b19e      	cbz	r6, 801eb3e <__register_exitproc+0x62>
 801eb16:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb1a:	2201      	movs	r2, #1
 801eb1c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb20:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb24:	40aa      	lsls	r2, r5
 801eb26:	4313      	orrs	r3, r2
 801eb28:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb2c:	2e02      	cmp	r6, #2
 801eb2e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb32:	bf02      	ittt	eq
 801eb34:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb38:	4313      	orreq	r3, r2
 801eb3a:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb3e:	1c6b      	adds	r3, r5, #1
 801eb40:	3502      	adds	r5, #2
 801eb42:	6063      	str	r3, [r4, #4]
 801eb44:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb48:	f7ff ffa3 	bl	801ea92 <__retarget_lock_release_recursive>
 801eb4c:	2000      	movs	r0, #0
 801eb4e:	e7df      	b.n	801eb10 <__register_exitproc+0x34>
 801eb50:	20000160 	.word	0x20000160
 801eb54:	20001e90 	.word	0x20001e90
 801eb58:	20001e94 	.word	0x20001e94
 801eb5c:	00000000 	.word	0x00000000

0801eb60 <floor>:
 801eb60:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eb64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb68:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801eb6c:	2e13      	cmp	r6, #19
 801eb6e:	460b      	mov	r3, r1
 801eb70:	4607      	mov	r7, r0
 801eb72:	460c      	mov	r4, r1
 801eb74:	4605      	mov	r5, r0
 801eb76:	dc32      	bgt.n	801ebde <floor+0x7e>
 801eb78:	2e00      	cmp	r6, #0
 801eb7a:	da14      	bge.n	801eba6 <floor+0x46>
 801eb7c:	a334      	add	r3, pc, #208	; (adr r3, 801ec50 <floor+0xf0>)
 801eb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb82:	f7e1 fb07 	bl	8000194 <__adddf3>
 801eb86:	2200      	movs	r2, #0
 801eb88:	2300      	movs	r3, #0
 801eb8a:	f7e1 ff49 	bl	8000a20 <__aeabi_dcmpgt>
 801eb8e:	b138      	cbz	r0, 801eba0 <floor+0x40>
 801eb90:	2c00      	cmp	r4, #0
 801eb92:	da56      	bge.n	801ec42 <floor+0xe2>
 801eb94:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801eb98:	4325      	orrs	r5, r4
 801eb9a:	d055      	beq.n	801ec48 <floor+0xe8>
 801eb9c:	4c2e      	ldr	r4, [pc, #184]	; (801ec58 <floor+0xf8>)
 801eb9e:	2500      	movs	r5, #0
 801eba0:	4623      	mov	r3, r4
 801eba2:	462f      	mov	r7, r5
 801eba4:	e025      	b.n	801ebf2 <floor+0x92>
 801eba6:	4a2d      	ldr	r2, [pc, #180]	; (801ec5c <floor+0xfc>)
 801eba8:	fa42 f806 	asr.w	r8, r2, r6
 801ebac:	ea01 0208 	and.w	r2, r1, r8
 801ebb0:	4302      	orrs	r2, r0
 801ebb2:	d01e      	beq.n	801ebf2 <floor+0x92>
 801ebb4:	a326      	add	r3, pc, #152	; (adr r3, 801ec50 <floor+0xf0>)
 801ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebba:	f7e1 faeb 	bl	8000194 <__adddf3>
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	2300      	movs	r3, #0
 801ebc2:	f7e1 ff2d 	bl	8000a20 <__aeabi_dcmpgt>
 801ebc6:	2800      	cmp	r0, #0
 801ebc8:	d0ea      	beq.n	801eba0 <floor+0x40>
 801ebca:	2c00      	cmp	r4, #0
 801ebcc:	bfbe      	ittt	lt
 801ebce:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ebd2:	4133      	asrlt	r3, r6
 801ebd4:	18e4      	addlt	r4, r4, r3
 801ebd6:	ea24 0408 	bic.w	r4, r4, r8
 801ebda:	2500      	movs	r5, #0
 801ebdc:	e7e0      	b.n	801eba0 <floor+0x40>
 801ebde:	2e33      	cmp	r6, #51	; 0x33
 801ebe0:	dd0b      	ble.n	801ebfa <floor+0x9a>
 801ebe2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ebe6:	d104      	bne.n	801ebf2 <floor+0x92>
 801ebe8:	4602      	mov	r2, r0
 801ebea:	f7e1 fad3 	bl	8000194 <__adddf3>
 801ebee:	4607      	mov	r7, r0
 801ebf0:	460b      	mov	r3, r1
 801ebf2:	4638      	mov	r0, r7
 801ebf4:	4619      	mov	r1, r3
 801ebf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ebfa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ebfe:	f04f 38ff 	mov.w	r8, #4294967295
 801ec02:	fa28 f802 	lsr.w	r8, r8, r2
 801ec06:	ea10 0f08 	tst.w	r0, r8
 801ec0a:	d0f2      	beq.n	801ebf2 <floor+0x92>
 801ec0c:	a310      	add	r3, pc, #64	; (adr r3, 801ec50 <floor+0xf0>)
 801ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec12:	f7e1 fabf 	bl	8000194 <__adddf3>
 801ec16:	2200      	movs	r2, #0
 801ec18:	2300      	movs	r3, #0
 801ec1a:	f7e1 ff01 	bl	8000a20 <__aeabi_dcmpgt>
 801ec1e:	2800      	cmp	r0, #0
 801ec20:	d0be      	beq.n	801eba0 <floor+0x40>
 801ec22:	2c00      	cmp	r4, #0
 801ec24:	da0a      	bge.n	801ec3c <floor+0xdc>
 801ec26:	2e14      	cmp	r6, #20
 801ec28:	d101      	bne.n	801ec2e <floor+0xce>
 801ec2a:	3401      	adds	r4, #1
 801ec2c:	e006      	b.n	801ec3c <floor+0xdc>
 801ec2e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec32:	2301      	movs	r3, #1
 801ec34:	40b3      	lsls	r3, r6
 801ec36:	441d      	add	r5, r3
 801ec38:	42af      	cmp	r7, r5
 801ec3a:	d8f6      	bhi.n	801ec2a <floor+0xca>
 801ec3c:	ea25 0508 	bic.w	r5, r5, r8
 801ec40:	e7ae      	b.n	801eba0 <floor+0x40>
 801ec42:	2500      	movs	r5, #0
 801ec44:	462c      	mov	r4, r5
 801ec46:	e7ab      	b.n	801eba0 <floor+0x40>
 801ec48:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ec4c:	e7a8      	b.n	801eba0 <floor+0x40>
 801ec4e:	bf00      	nop
 801ec50:	8800759c 	.word	0x8800759c
 801ec54:	7e37e43c 	.word	0x7e37e43c
 801ec58:	bff00000 	.word	0xbff00000
 801ec5c:	000fffff 	.word	0x000fffff

0801ec60 <_init>:
 801ec60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec62:	bf00      	nop
 801ec64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec66:	bc08      	pop	{r3}
 801ec68:	469e      	mov	lr, r3
 801ec6a:	4770      	bx	lr

0801ec6c <_fini>:
 801ec6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec6e:	bf00      	nop
 801ec70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec72:	bc08      	pop	{r3}
 801ec74:	469e      	mov	lr, r3
 801ec76:	4770      	bx	lr
