
polluTAG_home.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001eb58  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  0801ec90  0801ec90  0002ec90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000d8  0801fb40  0801fb40  0002fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801fc18  0801fc18  00030160  2**0
                  CONTENTS
  5 .ARM          00000008  0801fc18  0801fc18  0002fc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801fc20  0801fc20  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000008  0801fc20  0801fc20  0002fc20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801fc28  0801fc28  0002fc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000160  20000000  0801fc2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001efc  20000160  0801fd8c  00030160  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000205c  0801fd8c  0003205c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003018a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004af40  00000000  00000000  000301cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000baba  00000000  00000000  0007b10d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003d00  00000000  00000000  00086bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002e3d  00000000  00000000  0008a8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a775  00000000  00000000  0008d705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004afd9  00000000  00000000  000b7e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3a7e  00000000  00000000  00102e53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000fdb4  00000000  00000000  001d68d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000043  00000000  00000000  001e6688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000160 	.word	0x20000160
 8000154:	00000000 	.word	0x00000000
 8000158:	0801ec78 	.word	0x0801ec78

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000164 	.word	0x20000164
 8000174:	0801ec78 	.word	0x0801ec78

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__aeabi_dmul>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000506:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800050e:	bf1d      	ittte	ne
 8000510:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000514:	ea94 0f0c 	teqne	r4, ip
 8000518:	ea95 0f0c 	teqne	r5, ip
 800051c:	f000 f8de 	bleq	80006dc <__aeabi_dmul+0x1dc>
 8000520:	442c      	add	r4, r5
 8000522:	ea81 0603 	eor.w	r6, r1, r3
 8000526:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800052e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000532:	bf18      	it	ne
 8000534:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800053c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000540:	d038      	beq.n	80005b4 <__aeabi_dmul+0xb4>
 8000542:	fba0 ce02 	umull	ip, lr, r0, r2
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800054e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000552:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000556:	f04f 0600 	mov.w	r6, #0
 800055a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800055e:	f09c 0f00 	teq	ip, #0
 8000562:	bf18      	it	ne
 8000564:	f04e 0e01 	orrne.w	lr, lr, #1
 8000568:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800056c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000570:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000574:	d204      	bcs.n	8000580 <__aeabi_dmul+0x80>
 8000576:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057a:	416d      	adcs	r5, r5
 800057c:	eb46 0606 	adc.w	r6, r6, r6
 8000580:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000584:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000588:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800058c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000590:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000594:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000598:	bf88      	it	hi
 800059a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800059e:	d81e      	bhi.n	80005de <__aeabi_dmul+0xde>
 80005a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a4:	bf08      	it	eq
 80005a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005aa:	f150 0000 	adcs.w	r0, r0, #0
 80005ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b2:	bd70      	pop	{r4, r5, r6, pc}
 80005b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b8:	ea46 0101 	orr.w	r1, r6, r1
 80005bc:	ea40 0002 	orr.w	r0, r0, r2
 80005c0:	ea81 0103 	eor.w	r1, r1, r3
 80005c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c8:	bfc2      	ittt	gt
 80005ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d2:	bd70      	popgt	{r4, r5, r6, pc}
 80005d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d8:	f04f 0e00 	mov.w	lr, #0
 80005dc:	3c01      	subs	r4, #1
 80005de:	f300 80ab 	bgt.w	8000738 <__aeabi_dmul+0x238>
 80005e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005e6:	bfde      	ittt	le
 80005e8:	2000      	movle	r0, #0
 80005ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ee:	bd70      	pople	{r4, r5, r6, pc}
 80005f0:	f1c4 0400 	rsb	r4, r4, #0
 80005f4:	3c20      	subs	r4, #32
 80005f6:	da35      	bge.n	8000664 <__aeabi_dmul+0x164>
 80005f8:	340c      	adds	r4, #12
 80005fa:	dc1b      	bgt.n	8000634 <__aeabi_dmul+0x134>
 80005fc:	f104 0414 	add.w	r4, r4, #20
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f305 	lsl.w	r3, r0, r5
 8000608:	fa20 f004 	lsr.w	r0, r0, r4
 800060c:	fa01 f205 	lsl.w	r2, r1, r5
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000618:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	fa21 f604 	lsr.w	r6, r1, r4
 8000624:	eb42 0106 	adc.w	r1, r2, r6
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 040c 	rsb	r4, r4, #12
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f304 	lsl.w	r3, r0, r4
 8000640:	fa20 f005 	lsr.w	r0, r0, r5
 8000644:	fa01 f204 	lsl.w	r2, r1, r4
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000654:	f141 0100 	adc.w	r1, r1, #0
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f205 	lsl.w	r2, r0, r5
 800066c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000670:	fa20 f304 	lsr.w	r3, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea43 0302 	orr.w	r3, r3, r2
 800067c:	fa21 f004 	lsr.w	r0, r1, r4
 8000680:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000684:	fa21 f204 	lsr.w	r2, r1, r4
 8000688:	ea20 0002 	bic.w	r0, r0, r2
 800068c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f094 0f00 	teq	r4, #0
 80006a0:	d10f      	bne.n	80006c2 <__aeabi_dmul+0x1c2>
 80006a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006a6:	0040      	lsls	r0, r0, #1
 80006a8:	eb41 0101 	adc.w	r1, r1, r1
 80006ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b0:	bf08      	it	eq
 80006b2:	3c01      	subeq	r4, #1
 80006b4:	d0f7      	beq.n	80006a6 <__aeabi_dmul+0x1a6>
 80006b6:	ea41 0106 	orr.w	r1, r1, r6
 80006ba:	f095 0f00 	teq	r5, #0
 80006be:	bf18      	it	ne
 80006c0:	4770      	bxne	lr
 80006c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006c6:	0052      	lsls	r2, r2, #1
 80006c8:	eb43 0303 	adc.w	r3, r3, r3
 80006cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d0:	bf08      	it	eq
 80006d2:	3d01      	subeq	r5, #1
 80006d4:	d0f7      	beq.n	80006c6 <__aeabi_dmul+0x1c6>
 80006d6:	ea43 0306 	orr.w	r3, r3, r6
 80006da:	4770      	bx	lr
 80006dc:	ea94 0f0c 	teq	r4, ip
 80006e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e4:	bf18      	it	ne
 80006e6:	ea95 0f0c 	teqne	r5, ip
 80006ea:	d00c      	beq.n	8000706 <__aeabi_dmul+0x206>
 80006ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f0:	bf18      	it	ne
 80006f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f6:	d1d1      	bne.n	800069c <__aeabi_dmul+0x19c>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	bd70      	pop	{r4, r5, r6, pc}
 8000706:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070a:	bf06      	itte	eq
 800070c:	4610      	moveq	r0, r2
 800070e:	4619      	moveq	r1, r3
 8000710:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000714:	d019      	beq.n	800074a <__aeabi_dmul+0x24a>
 8000716:	ea94 0f0c 	teq	r4, ip
 800071a:	d102      	bne.n	8000722 <__aeabi_dmul+0x222>
 800071c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000720:	d113      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000722:	ea95 0f0c 	teq	r5, ip
 8000726:	d105      	bne.n	8000734 <__aeabi_dmul+0x234>
 8000728:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800072c:	bf1c      	itt	ne
 800072e:	4610      	movne	r0, r2
 8000730:	4619      	movne	r1, r3
 8000732:	d10a      	bne.n	800074a <__aeabi_dmul+0x24a>
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800073c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000740:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000744:	f04f 0000 	mov.w	r0, #0
 8000748:	bd70      	pop	{r4, r5, r6, pc}
 800074a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800074e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000752:	bd70      	pop	{r4, r5, r6, pc}

08000754 <__aeabi_ddiv>:
 8000754:	b570      	push	{r4, r5, r6, lr}
 8000756:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800075e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000762:	bf1d      	ittte	ne
 8000764:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000768:	ea94 0f0c 	teqne	r4, ip
 800076c:	ea95 0f0c 	teqne	r5, ip
 8000770:	f000 f8a7 	bleq	80008c2 <__aeabi_ddiv+0x16e>
 8000774:	eba4 0405 	sub.w	r4, r4, r5
 8000778:	ea81 0e03 	eor.w	lr, r1, r3
 800077c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000780:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000784:	f000 8088 	beq.w	8000898 <__aeabi_ddiv+0x144>
 8000788:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800078c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000790:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000794:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000798:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800079c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ac:	429d      	cmp	r5, r3
 80007ae:	bf08      	it	eq
 80007b0:	4296      	cmpeq	r6, r2
 80007b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ba:	d202      	bcs.n	80007c2 <__aeabi_ddiv+0x6e>
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	1ab6      	subs	r6, r6, r2
 80007c4:	eb65 0503 	sbc.w	r5, r5, r3
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000830:	ea55 0e06 	orrs.w	lr, r5, r6
 8000834:	d018      	beq.n	8000868 <__aeabi_ddiv+0x114>
 8000836:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800083e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000842:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000846:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800084e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000852:	d1c0      	bne.n	80007d6 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000858:	d10b      	bne.n	8000872 <__aeabi_ddiv+0x11e>
 800085a:	ea41 0100 	orr.w	r1, r1, r0
 800085e:	f04f 0000 	mov.w	r0, #0
 8000862:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000866:	e7b6      	b.n	80007d6 <__aeabi_ddiv+0x82>
 8000868:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800086c:	bf04      	itt	eq
 800086e:	4301      	orreq	r1, r0
 8000870:	2000      	moveq	r0, #0
 8000872:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000876:	bf88      	it	hi
 8000878:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800087c:	f63f aeaf 	bhi.w	80005de <__aeabi_dmul+0xde>
 8000880:	ebb5 0c03 	subs.w	ip, r5, r3
 8000884:	bf04      	itt	eq
 8000886:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800088e:	f150 0000 	adcs.w	r0, r0, #0
 8000892:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000896:	bd70      	pop	{r4, r5, r6, pc}
 8000898:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800089c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a4:	bfc2      	ittt	gt
 80008a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ae:	bd70      	popgt	{r4, r5, r6, pc}
 80008b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b4:	f04f 0e00 	mov.w	lr, #0
 80008b8:	3c01      	subs	r4, #1
 80008ba:	e690      	b.n	80005de <__aeabi_dmul+0xde>
 80008bc:	ea45 0e06 	orr.w	lr, r5, r6
 80008c0:	e68d      	b.n	80005de <__aeabi_dmul+0xde>
 80008c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008c6:	ea94 0f0c 	teq	r4, ip
 80008ca:	bf08      	it	eq
 80008cc:	ea95 0f0c 	teqeq	r5, ip
 80008d0:	f43f af3b 	beq.w	800074a <__aeabi_dmul+0x24a>
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	d10a      	bne.n	80008f0 <__aeabi_ddiv+0x19c>
 80008da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008de:	f47f af34 	bne.w	800074a <__aeabi_dmul+0x24a>
 80008e2:	ea95 0f0c 	teq	r5, ip
 80008e6:	f47f af25 	bne.w	8000734 <__aeabi_dmul+0x234>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e72c      	b.n	800074a <__aeabi_dmul+0x24a>
 80008f0:	ea95 0f0c 	teq	r5, ip
 80008f4:	d106      	bne.n	8000904 <__aeabi_ddiv+0x1b0>
 80008f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fa:	f43f aefd 	beq.w	80006f8 <__aeabi_dmul+0x1f8>
 80008fe:	4610      	mov	r0, r2
 8000900:	4619      	mov	r1, r3
 8000902:	e722      	b.n	800074a <__aeabi_dmul+0x24a>
 8000904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000908:	bf18      	it	ne
 800090a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090e:	f47f aec5 	bne.w	800069c <__aeabi_dmul+0x19c>
 8000912:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000916:	f47f af0d 	bne.w	8000734 <__aeabi_dmul+0x234>
 800091a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800091e:	f47f aeeb 	bne.w	80006f8 <__aeabi_dmul+0x1f8>
 8000922:	e712      	b.n	800074a <__aeabi_dmul+0x24a>

08000924 <__gedf2>:
 8000924:	f04f 3cff 	mov.w	ip, #4294967295
 8000928:	e006      	b.n	8000938 <__cmpdf2+0x4>
 800092a:	bf00      	nop

0800092c <__ledf2>:
 800092c:	f04f 0c01 	mov.w	ip, #1
 8000930:	e002      	b.n	8000938 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__cmpdf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	f84d cd04 	str.w	ip, [sp, #-4]!
 800093c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000940:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000944:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800094e:	d01b      	beq.n	8000988 <__cmpdf2+0x54>
 8000950:	b001      	add	sp, #4
 8000952:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000956:	bf0c      	ite	eq
 8000958:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800095c:	ea91 0f03 	teqne	r1, r3
 8000960:	bf02      	ittt	eq
 8000962:	ea90 0f02 	teqeq	r0, r2
 8000966:	2000      	moveq	r0, #0
 8000968:	4770      	bxeq	lr
 800096a:	f110 0f00 	cmn.w	r0, #0
 800096e:	ea91 0f03 	teq	r1, r3
 8000972:	bf58      	it	pl
 8000974:	4299      	cmppl	r1, r3
 8000976:	bf08      	it	eq
 8000978:	4290      	cmpeq	r0, r2
 800097a:	bf2c      	ite	cs
 800097c:	17d8      	asrcs	r0, r3, #31
 800097e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000982:	f040 0001 	orr.w	r0, r0, #1
 8000986:	4770      	bx	lr
 8000988:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800098c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000990:	d102      	bne.n	8000998 <__cmpdf2+0x64>
 8000992:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000996:	d107      	bne.n	80009a8 <__cmpdf2+0x74>
 8000998:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800099c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a0:	d1d6      	bne.n	8000950 <__cmpdf2+0x1c>
 80009a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009a6:	d0d3      	beq.n	8000950 <__cmpdf2+0x1c>
 80009a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_cdrcmple>:
 80009b0:	4684      	mov	ip, r0
 80009b2:	4610      	mov	r0, r2
 80009b4:	4662      	mov	r2, ip
 80009b6:	468c      	mov	ip, r1
 80009b8:	4619      	mov	r1, r3
 80009ba:	4663      	mov	r3, ip
 80009bc:	e000      	b.n	80009c0 <__aeabi_cdcmpeq>
 80009be:	bf00      	nop

080009c0 <__aeabi_cdcmpeq>:
 80009c0:	b501      	push	{r0, lr}
 80009c2:	f7ff ffb7 	bl	8000934 <__cmpdf2>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	bf48      	it	mi
 80009ca:	f110 0f00 	cmnmi.w	r0, #0
 80009ce:	bd01      	pop	{r0, pc}

080009d0 <__aeabi_dcmpeq>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff fff4 	bl	80009c0 <__aeabi_cdcmpeq>
 80009d8:	bf0c      	ite	eq
 80009da:	2001      	moveq	r0, #1
 80009dc:	2000      	movne	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmplt>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffea 	bl	80009c0 <__aeabi_cdcmpeq>
 80009ec:	bf34      	ite	cc
 80009ee:	2001      	movcc	r0, #1
 80009f0:	2000      	movcs	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmple>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffe0 	bl	80009c0 <__aeabi_cdcmpeq>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpge>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffce 	bl	80009b0 <__aeabi_cdrcmple>
 8000a14:	bf94      	ite	ls
 8000a16:	2001      	movls	r0, #1
 8000a18:	2000      	movhi	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpgt>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff ffc4 	bl	80009b0 <__aeabi_cdrcmple>
 8000a28:	bf34      	ite	cc
 8000a2a:	2001      	movcc	r0, #1
 8000a2c:	2000      	movcs	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_d2iz>:
 8000a34:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a3c:	d215      	bcs.n	8000a6a <__aeabi_d2iz+0x36>
 8000a3e:	d511      	bpl.n	8000a64 <__aeabi_d2iz+0x30>
 8000a40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a48:	d912      	bls.n	8000a70 <__aeabi_d2iz+0x3c>
 8000a4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a56:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	bf18      	it	ne
 8000a60:	4240      	negne	r0, r0
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d105      	bne.n	8000a7c <__aeabi_d2iz+0x48>
 8000a70:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a74:	bf08      	it	eq
 8000a76:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop

08000a84 <__aeabi_frsub>:
 8000a84:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	e002      	b.n	8000a90 <__addsf3>
 8000a8a:	bf00      	nop

08000a8c <__aeabi_fsub>:
 8000a8c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a90 <__addsf3>:
 8000a90:	0042      	lsls	r2, r0, #1
 8000a92:	bf1f      	itttt	ne
 8000a94:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a98:	ea92 0f03 	teqne	r2, r3
 8000a9c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa4:	d06a      	beq.n	8000b7c <__addsf3+0xec>
 8000aa6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aaa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000aae:	bfc1      	itttt	gt
 8000ab0:	18d2      	addgt	r2, r2, r3
 8000ab2:	4041      	eorgt	r1, r0
 8000ab4:	4048      	eorgt	r0, r1
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	bfb8      	it	lt
 8000aba:	425b      	neglt	r3, r3
 8000abc:	2b19      	cmp	r3, #25
 8000abe:	bf88      	it	hi
 8000ac0:	4770      	bxhi	lr
 8000ac2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ace:	bf18      	it	ne
 8000ad0:	4240      	negne	r0, r0
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ada:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ade:	bf18      	it	ne
 8000ae0:	4249      	negne	r1, r1
 8000ae2:	ea92 0f03 	teq	r2, r3
 8000ae6:	d03f      	beq.n	8000b68 <__addsf3+0xd8>
 8000ae8:	f1a2 0201 	sub.w	r2, r2, #1
 8000aec:	fa41 fc03 	asr.w	ip, r1, r3
 8000af0:	eb10 000c 	adds.w	r0, r0, ip
 8000af4:	f1c3 0320 	rsb	r3, r3, #32
 8000af8:	fa01 f103 	lsl.w	r1, r1, r3
 8000afc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b00:	d502      	bpl.n	8000b08 <__addsf3+0x78>
 8000b02:	4249      	negs	r1, r1
 8000b04:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b08:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b0c:	d313      	bcc.n	8000b36 <__addsf3+0xa6>
 8000b0e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b12:	d306      	bcc.n	8000b22 <__addsf3+0x92>
 8000b14:	0840      	lsrs	r0, r0, #1
 8000b16:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1a:	f102 0201 	add.w	r2, r2, #1
 8000b1e:	2afe      	cmp	r2, #254	; 0xfe
 8000b20:	d251      	bcs.n	8000bc6 <__addsf3+0x136>
 8000b22:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2a:	bf08      	it	eq
 8000b2c:	f020 0001 	biceq.w	r0, r0, #1
 8000b30:	ea40 0003 	orr.w	r0, r0, r3
 8000b34:	4770      	bx	lr
 8000b36:	0049      	lsls	r1, r1, #1
 8000b38:	eb40 0000 	adc.w	r0, r0, r0
 8000b3c:	3a01      	subs	r2, #1
 8000b3e:	bf28      	it	cs
 8000b40:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b44:	d2ed      	bcs.n	8000b22 <__addsf3+0x92>
 8000b46:	fab0 fc80 	clz	ip, r0
 8000b4a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b4e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b52:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b56:	bfaa      	itet	ge
 8000b58:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b5c:	4252      	neglt	r2, r2
 8000b5e:	4318      	orrge	r0, r3
 8000b60:	bfbc      	itt	lt
 8000b62:	40d0      	lsrlt	r0, r2
 8000b64:	4318      	orrlt	r0, r3
 8000b66:	4770      	bx	lr
 8000b68:	f092 0f00 	teq	r2, #0
 8000b6c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b70:	bf06      	itte	eq
 8000b72:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b76:	3201      	addeq	r2, #1
 8000b78:	3b01      	subne	r3, #1
 8000b7a:	e7b5      	b.n	8000ae8 <__addsf3+0x58>
 8000b7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b84:	bf18      	it	ne
 8000b86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8a:	d021      	beq.n	8000bd0 <__addsf3+0x140>
 8000b8c:	ea92 0f03 	teq	r2, r3
 8000b90:	d004      	beq.n	8000b9c <__addsf3+0x10c>
 8000b92:	f092 0f00 	teq	r2, #0
 8000b96:	bf08      	it	eq
 8000b98:	4608      	moveq	r0, r1
 8000b9a:	4770      	bx	lr
 8000b9c:	ea90 0f01 	teq	r0, r1
 8000ba0:	bf1c      	itt	ne
 8000ba2:	2000      	movne	r0, #0
 8000ba4:	4770      	bxne	lr
 8000ba6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000baa:	d104      	bne.n	8000bb6 <__addsf3+0x126>
 8000bac:	0040      	lsls	r0, r0, #1
 8000bae:	bf28      	it	cs
 8000bb0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb4:	4770      	bx	lr
 8000bb6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bba:	bf3c      	itt	cc
 8000bbc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bxcc	lr
 8000bc2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bc6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bce:	4770      	bx	lr
 8000bd0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd4:	bf16      	itet	ne
 8000bd6:	4608      	movne	r0, r1
 8000bd8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bdc:	4601      	movne	r1, r0
 8000bde:	0242      	lsls	r2, r0, #9
 8000be0:	bf06      	itte	eq
 8000be2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000be6:	ea90 0f01 	teqeq	r0, r1
 8000bea:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_ui2f>:
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e004      	b.n	8000c00 <__aeabi_i2f+0x8>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_i2f>:
 8000bf8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bfc:	bf48      	it	mi
 8000bfe:	4240      	negmi	r0, r0
 8000c00:	ea5f 0c00 	movs.w	ip, r0
 8000c04:	bf08      	it	eq
 8000c06:	4770      	bxeq	lr
 8000c08:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c0c:	4601      	mov	r1, r0
 8000c0e:	f04f 0000 	mov.w	r0, #0
 8000c12:	e01c      	b.n	8000c4e <__aeabi_l2f+0x2a>

08000c14 <__aeabi_ul2f>:
 8000c14:	ea50 0201 	orrs.w	r2, r0, r1
 8000c18:	bf08      	it	eq
 8000c1a:	4770      	bxeq	lr
 8000c1c:	f04f 0300 	mov.w	r3, #0
 8000c20:	e00a      	b.n	8000c38 <__aeabi_l2f+0x14>
 8000c22:	bf00      	nop

08000c24 <__aeabi_l2f>:
 8000c24:	ea50 0201 	orrs.w	r2, r0, r1
 8000c28:	bf08      	it	eq
 8000c2a:	4770      	bxeq	lr
 8000c2c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c30:	d502      	bpl.n	8000c38 <__aeabi_l2f+0x14>
 8000c32:	4240      	negs	r0, r0
 8000c34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c38:	ea5f 0c01 	movs.w	ip, r1
 8000c3c:	bf02      	ittt	eq
 8000c3e:	4684      	moveq	ip, r0
 8000c40:	4601      	moveq	r1, r0
 8000c42:	2000      	moveq	r0, #0
 8000c44:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c48:	bf08      	it	eq
 8000c4a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c52:	fabc f28c 	clz	r2, ip
 8000c56:	3a08      	subs	r2, #8
 8000c58:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c5c:	db10      	blt.n	8000c80 <__aeabi_l2f+0x5c>
 8000c5e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c62:	4463      	add	r3, ip
 8000c64:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c70:	fa20 f202 	lsr.w	r2, r0, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	f020 0001 	biceq.w	r0, r0, #1
 8000c7e:	4770      	bx	lr
 8000c80:	f102 0220 	add.w	r2, r2, #32
 8000c84:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c88:	f1c2 0220 	rsb	r2, r2, #32
 8000c8c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c90:	fa21 f202 	lsr.w	r2, r1, r2
 8000c94:	eb43 0002 	adc.w	r0, r3, r2
 8000c98:	bf08      	it	eq
 8000c9a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c9e:	4770      	bx	lr

08000ca0 <__aeabi_fmul>:
 8000ca0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ca8:	bf1e      	ittt	ne
 8000caa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cae:	ea92 0f0c 	teqne	r2, ip
 8000cb2:	ea93 0f0c 	teqne	r3, ip
 8000cb6:	d06f      	beq.n	8000d98 <__aeabi_fmul+0xf8>
 8000cb8:	441a      	add	r2, r3
 8000cba:	ea80 0c01 	eor.w	ip, r0, r1
 8000cbe:	0240      	lsls	r0, r0, #9
 8000cc0:	bf18      	it	ne
 8000cc2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cc6:	d01e      	beq.n	8000d06 <__aeabi_fmul+0x66>
 8000cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ccc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cd8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cdc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce0:	bf3e      	ittt	cc
 8000ce2:	0049      	lslcc	r1, r1, #1
 8000ce4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ce8:	005b      	lslcc	r3, r3, #1
 8000cea:	ea40 0001 	orr.w	r0, r0, r1
 8000cee:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf2:	2afd      	cmp	r2, #253	; 0xfd
 8000cf4:	d81d      	bhi.n	8000d32 <__aeabi_fmul+0x92>
 8000cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d0e:	bf08      	it	eq
 8000d10:	0249      	lsleq	r1, r1, #9
 8000d12:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d16:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1a:	3a7f      	subs	r2, #127	; 0x7f
 8000d1c:	bfc2      	ittt	gt
 8000d1e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d22:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d26:	4770      	bxgt	lr
 8000d28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d2c:	f04f 0300 	mov.w	r3, #0
 8000d30:	3a01      	subs	r2, #1
 8000d32:	dc5d      	bgt.n	8000df0 <__aeabi_fmul+0x150>
 8000d34:	f112 0f19 	cmn.w	r2, #25
 8000d38:	bfdc      	itt	le
 8000d3a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d3e:	4770      	bxle	lr
 8000d40:	f1c2 0200 	rsb	r2, r2, #0
 8000d44:	0041      	lsls	r1, r0, #1
 8000d46:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4a:	f1c2 0220 	rsb	r2, r2, #32
 8000d4e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d52:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d56:	f140 0000 	adc.w	r0, r0, #0
 8000d5a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d5e:	bf08      	it	eq
 8000d60:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d64:	4770      	bx	lr
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d6e:	bf02      	ittt	eq
 8000d70:	0040      	lsleq	r0, r0, #1
 8000d72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d76:	3a01      	subeq	r2, #1
 8000d78:	d0f9      	beq.n	8000d6e <__aeabi_fmul+0xce>
 8000d7a:	ea40 000c 	orr.w	r0, r0, ip
 8000d7e:	f093 0f00 	teq	r3, #0
 8000d82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d86:	bf02      	ittt	eq
 8000d88:	0049      	lsleq	r1, r1, #1
 8000d8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d8e:	3b01      	subeq	r3, #1
 8000d90:	d0f9      	beq.n	8000d86 <__aeabi_fmul+0xe6>
 8000d92:	ea41 010c 	orr.w	r1, r1, ip
 8000d96:	e78f      	b.n	8000cb8 <__aeabi_fmul+0x18>
 8000d98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d9c:	ea92 0f0c 	teq	r2, ip
 8000da0:	bf18      	it	ne
 8000da2:	ea93 0f0c 	teqne	r3, ip
 8000da6:	d00a      	beq.n	8000dbe <__aeabi_fmul+0x11e>
 8000da8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000dac:	bf18      	it	ne
 8000dae:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db2:	d1d8      	bne.n	8000d66 <__aeabi_fmul+0xc6>
 8000db4:	ea80 0001 	eor.w	r0, r0, r1
 8000db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	bf17      	itett	ne
 8000dc4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dc8:	4608      	moveq	r0, r1
 8000dca:	f091 0f00 	teqne	r1, #0
 8000dce:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd2:	d014      	beq.n	8000dfe <__aeabi_fmul+0x15e>
 8000dd4:	ea92 0f0c 	teq	r2, ip
 8000dd8:	d101      	bne.n	8000dde <__aeabi_fmul+0x13e>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	d10f      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dde:	ea93 0f0c 	teq	r3, ip
 8000de2:	d103      	bne.n	8000dec <__aeabi_fmul+0x14c>
 8000de4:	024b      	lsls	r3, r1, #9
 8000de6:	bf18      	it	ne
 8000de8:	4608      	movne	r0, r1
 8000dea:	d108      	bne.n	8000dfe <__aeabi_fmul+0x15e>
 8000dec:	ea80 0001 	eor.w	r0, r0, r1
 8000df0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000df8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dfc:	4770      	bx	lr
 8000dfe:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e02:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e06:	4770      	bx	lr

08000e08 <__aeabi_fdiv>:
 8000e08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e10:	bf1e      	ittt	ne
 8000e12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e16:	ea92 0f0c 	teqne	r2, ip
 8000e1a:	ea93 0f0c 	teqne	r3, ip
 8000e1e:	d069      	beq.n	8000ef4 <__aeabi_fdiv+0xec>
 8000e20:	eba2 0203 	sub.w	r2, r2, r3
 8000e24:	ea80 0c01 	eor.w	ip, r0, r1
 8000e28:	0249      	lsls	r1, r1, #9
 8000e2a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e2e:	d037      	beq.n	8000ea0 <__aeabi_fdiv+0x98>
 8000e30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e34:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e38:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	428b      	cmp	r3, r1
 8000e42:	bf38      	it	cc
 8000e44:	005b      	lslcc	r3, r3, #1
 8000e46:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	bf24      	itt	cs
 8000e52:	1a5b      	subcs	r3, r3, r1
 8000e54:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e58:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e5c:	bf24      	itt	cs
 8000e5e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e62:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e66:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6a:	bf24      	itt	cs
 8000e6c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e74:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e78:	bf24      	itt	cs
 8000e7a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e7e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	bf18      	it	ne
 8000e86:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8a:	d1e0      	bne.n	8000e4e <__aeabi_fdiv+0x46>
 8000e8c:	2afd      	cmp	r2, #253	; 0xfd
 8000e8e:	f63f af50 	bhi.w	8000d32 <__aeabi_fmul+0x92>
 8000e92:	428b      	cmp	r3, r1
 8000e94:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e98:	bf08      	it	eq
 8000e9a:	f020 0001 	biceq.w	r0, r0, #1
 8000e9e:	4770      	bx	lr
 8000ea0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ea8:	327f      	adds	r2, #127	; 0x7f
 8000eaa:	bfc2      	ittt	gt
 8000eac:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb4:	4770      	bxgt	lr
 8000eb6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eba:	f04f 0300 	mov.w	r3, #0
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	e737      	b.n	8000d32 <__aeabi_fmul+0x92>
 8000ec2:	f092 0f00 	teq	r2, #0
 8000ec6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eca:	bf02      	ittt	eq
 8000ecc:	0040      	lsleq	r0, r0, #1
 8000ece:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed2:	3a01      	subeq	r2, #1
 8000ed4:	d0f9      	beq.n	8000eca <__aeabi_fdiv+0xc2>
 8000ed6:	ea40 000c 	orr.w	r0, r0, ip
 8000eda:	f093 0f00 	teq	r3, #0
 8000ede:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee2:	bf02      	ittt	eq
 8000ee4:	0049      	lsleq	r1, r1, #1
 8000ee6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eea:	3b01      	subeq	r3, #1
 8000eec:	d0f9      	beq.n	8000ee2 <__aeabi_fdiv+0xda>
 8000eee:	ea41 010c 	orr.w	r1, r1, ip
 8000ef2:	e795      	b.n	8000e20 <__aeabi_fdiv+0x18>
 8000ef4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ef8:	ea92 0f0c 	teq	r2, ip
 8000efc:	d108      	bne.n	8000f10 <__aeabi_fdiv+0x108>
 8000efe:	0242      	lsls	r2, r0, #9
 8000f00:	f47f af7d 	bne.w	8000dfe <__aeabi_fmul+0x15e>
 8000f04:	ea93 0f0c 	teq	r3, ip
 8000f08:	f47f af70 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	e776      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f10:	ea93 0f0c 	teq	r3, ip
 8000f14:	d104      	bne.n	8000f20 <__aeabi_fdiv+0x118>
 8000f16:	024b      	lsls	r3, r1, #9
 8000f18:	f43f af4c 	beq.w	8000db4 <__aeabi_fmul+0x114>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e76e      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f20:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f24:	bf18      	it	ne
 8000f26:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2a:	d1ca      	bne.n	8000ec2 <__aeabi_fdiv+0xba>
 8000f2c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f30:	f47f af5c 	bne.w	8000dec <__aeabi_fmul+0x14c>
 8000f34:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f38:	f47f af3c 	bne.w	8000db4 <__aeabi_fmul+0x114>
 8000f3c:	e75f      	b.n	8000dfe <__aeabi_fmul+0x15e>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_f2iz>:
 8000f40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f44:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f48:	d30f      	bcc.n	8000f6a <__aeabi_f2iz+0x2a>
 8000f4a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f4e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f52:	d90d      	bls.n	8000f70 <__aeabi_f2iz+0x30>
 8000f54:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f5c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f60:	fa23 f002 	lsr.w	r0, r3, r2
 8000f64:	bf18      	it	ne
 8000f66:	4240      	negne	r0, r0
 8000f68:	4770      	bx	lr
 8000f6a:	f04f 0000 	mov.w	r0, #0
 8000f6e:	4770      	bx	lr
 8000f70:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f74:	d101      	bne.n	8000f7a <__aeabi_f2iz+0x3a>
 8000f76:	0242      	lsls	r2, r0, #9
 8000f78:	d105      	bne.n	8000f86 <__aeabi_f2iz+0x46>
 8000f7a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f7e:	bf08      	it	eq
 8000f80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f84:	4770      	bx	lr
 8000f86:	f04f 0000 	mov.w	r0, #0
 8000f8a:	4770      	bx	lr

08000f8c <__aeabi_uldivmod>:
 8000f8c:	b953      	cbnz	r3, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f8e:	b94a      	cbnz	r2, 8000fa4 <__aeabi_uldivmod+0x18>
 8000f90:	2900      	cmp	r1, #0
 8000f92:	bf08      	it	eq
 8000f94:	2800      	cmpeq	r0, #0
 8000f96:	bf1c      	itt	ne
 8000f98:	f04f 31ff 	movne.w	r1, #4294967295
 8000f9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000fa0:	f000 b970 	b.w	8001284 <__aeabi_idiv0>
 8000fa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000fa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000fac:	f000 f806 	bl	8000fbc <__udivmoddi4>
 8000fb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000fb8:	b004      	add	sp, #16
 8000fba:	4770      	bx	lr

08000fbc <__udivmoddi4>:
 8000fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc0:	9e08      	ldr	r6, [sp, #32]
 8000fc2:	460d      	mov	r5, r1
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	460f      	mov	r7, r1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d14a      	bne.n	8001062 <__udivmoddi4+0xa6>
 8000fcc:	428a      	cmp	r2, r1
 8000fce:	4694      	mov	ip, r2
 8000fd0:	d965      	bls.n	800109e <__udivmoddi4+0xe2>
 8000fd2:	fab2 f382 	clz	r3, r2
 8000fd6:	b143      	cbz	r3, 8000fea <__udivmoddi4+0x2e>
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	f1c3 0220 	rsb	r2, r3, #32
 8000fe0:	409f      	lsls	r7, r3
 8000fe2:	fa20 f202 	lsr.w	r2, r0, r2
 8000fe6:	4317      	orrs	r7, r2
 8000fe8:	409c      	lsls	r4, r3
 8000fea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000fee:	fa1f f58c 	uxth.w	r5, ip
 8000ff2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ff6:	0c22      	lsrs	r2, r4, #16
 8000ff8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ffc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001000:	fb01 f005 	mul.w	r0, r1, r5
 8001004:	4290      	cmp	r0, r2
 8001006:	d90a      	bls.n	800101e <__udivmoddi4+0x62>
 8001008:	eb1c 0202 	adds.w	r2, ip, r2
 800100c:	f101 37ff 	add.w	r7, r1, #4294967295
 8001010:	f080 811b 	bcs.w	800124a <__udivmoddi4+0x28e>
 8001014:	4290      	cmp	r0, r2
 8001016:	f240 8118 	bls.w	800124a <__udivmoddi4+0x28e>
 800101a:	3902      	subs	r1, #2
 800101c:	4462      	add	r2, ip
 800101e:	1a12      	subs	r2, r2, r0
 8001020:	b2a4      	uxth	r4, r4
 8001022:	fbb2 f0fe 	udiv	r0, r2, lr
 8001026:	fb0e 2210 	mls	r2, lr, r0, r2
 800102a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800102e:	fb00 f505 	mul.w	r5, r0, r5
 8001032:	42a5      	cmp	r5, r4
 8001034:	d90a      	bls.n	800104c <__udivmoddi4+0x90>
 8001036:	eb1c 0404 	adds.w	r4, ip, r4
 800103a:	f100 32ff 	add.w	r2, r0, #4294967295
 800103e:	f080 8106 	bcs.w	800124e <__udivmoddi4+0x292>
 8001042:	42a5      	cmp	r5, r4
 8001044:	f240 8103 	bls.w	800124e <__udivmoddi4+0x292>
 8001048:	4464      	add	r4, ip
 800104a:	3802      	subs	r0, #2
 800104c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001050:	1b64      	subs	r4, r4, r5
 8001052:	2100      	movs	r1, #0
 8001054:	b11e      	cbz	r6, 800105e <__udivmoddi4+0xa2>
 8001056:	40dc      	lsrs	r4, r3
 8001058:	2300      	movs	r3, #0
 800105a:	e9c6 4300 	strd	r4, r3, [r6]
 800105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001062:	428b      	cmp	r3, r1
 8001064:	d908      	bls.n	8001078 <__udivmoddi4+0xbc>
 8001066:	2e00      	cmp	r6, #0
 8001068:	f000 80ec 	beq.w	8001244 <__udivmoddi4+0x288>
 800106c:	2100      	movs	r1, #0
 800106e:	e9c6 0500 	strd	r0, r5, [r6]
 8001072:	4608      	mov	r0, r1
 8001074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001078:	fab3 f183 	clz	r1, r3
 800107c:	2900      	cmp	r1, #0
 800107e:	d149      	bne.n	8001114 <__udivmoddi4+0x158>
 8001080:	42ab      	cmp	r3, r5
 8001082:	d302      	bcc.n	800108a <__udivmoddi4+0xce>
 8001084:	4282      	cmp	r2, r0
 8001086:	f200 80f7 	bhi.w	8001278 <__udivmoddi4+0x2bc>
 800108a:	1a84      	subs	r4, r0, r2
 800108c:	eb65 0203 	sbc.w	r2, r5, r3
 8001090:	2001      	movs	r0, #1
 8001092:	4617      	mov	r7, r2
 8001094:	2e00      	cmp	r6, #0
 8001096:	d0e2      	beq.n	800105e <__udivmoddi4+0xa2>
 8001098:	e9c6 4700 	strd	r4, r7, [r6]
 800109c:	e7df      	b.n	800105e <__udivmoddi4+0xa2>
 800109e:	b902      	cbnz	r2, 80010a2 <__udivmoddi4+0xe6>
 80010a0:	deff      	udf	#255	; 0xff
 80010a2:	fab2 f382 	clz	r3, r2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 808f 	bne.w	80011ca <__udivmoddi4+0x20e>
 80010ac:	1a8a      	subs	r2, r1, r2
 80010ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b2:	fa1f fe8c 	uxth.w	lr, ip
 80010b6:	2101      	movs	r1, #1
 80010b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80010bc:	fb07 2015 	mls	r0, r7, r5, r2
 80010c0:	0c22      	lsrs	r2, r4, #16
 80010c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80010c6:	fb0e f005 	mul.w	r0, lr, r5
 80010ca:	4290      	cmp	r0, r2
 80010cc:	d908      	bls.n	80010e0 <__udivmoddi4+0x124>
 80010ce:	eb1c 0202 	adds.w	r2, ip, r2
 80010d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80010d6:	d202      	bcs.n	80010de <__udivmoddi4+0x122>
 80010d8:	4290      	cmp	r0, r2
 80010da:	f200 80ca 	bhi.w	8001272 <__udivmoddi4+0x2b6>
 80010de:	4645      	mov	r5, r8
 80010e0:	1a12      	subs	r2, r2, r0
 80010e2:	b2a4      	uxth	r4, r4
 80010e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80010e8:	fb07 2210 	mls	r2, r7, r0, r2
 80010ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80010f0:	fb0e fe00 	mul.w	lr, lr, r0
 80010f4:	45a6      	cmp	lr, r4
 80010f6:	d908      	bls.n	800110a <__udivmoddi4+0x14e>
 80010f8:	eb1c 0404 	adds.w	r4, ip, r4
 80010fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8001100:	d202      	bcs.n	8001108 <__udivmoddi4+0x14c>
 8001102:	45a6      	cmp	lr, r4
 8001104:	f200 80ba 	bhi.w	800127c <__udivmoddi4+0x2c0>
 8001108:	4610      	mov	r0, r2
 800110a:	eba4 040e 	sub.w	r4, r4, lr
 800110e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001112:	e79f      	b.n	8001054 <__udivmoddi4+0x98>
 8001114:	f1c1 0720 	rsb	r7, r1, #32
 8001118:	408b      	lsls	r3, r1
 800111a:	fa22 fc07 	lsr.w	ip, r2, r7
 800111e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001122:	fa05 f401 	lsl.w	r4, r5, r1
 8001126:	fa20 f307 	lsr.w	r3, r0, r7
 800112a:	40fd      	lsrs	r5, r7
 800112c:	4323      	orrs	r3, r4
 800112e:	fa00 f901 	lsl.w	r9, r0, r1
 8001132:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001136:	fa1f fe8c 	uxth.w	lr, ip
 800113a:	fbb5 f8f0 	udiv	r8, r5, r0
 800113e:	0c1c      	lsrs	r4, r3, #16
 8001140:	fb00 5518 	mls	r5, r0, r8, r5
 8001144:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001148:	fb08 f50e 	mul.w	r5, r8, lr
 800114c:	42a5      	cmp	r5, r4
 800114e:	fa02 f201 	lsl.w	r2, r2, r1
 8001152:	d90b      	bls.n	800116c <__udivmoddi4+0x1b0>
 8001154:	eb1c 0404 	adds.w	r4, ip, r4
 8001158:	f108 3aff 	add.w	sl, r8, #4294967295
 800115c:	f080 8087 	bcs.w	800126e <__udivmoddi4+0x2b2>
 8001160:	42a5      	cmp	r5, r4
 8001162:	f240 8084 	bls.w	800126e <__udivmoddi4+0x2b2>
 8001166:	f1a8 0802 	sub.w	r8, r8, #2
 800116a:	4464      	add	r4, ip
 800116c:	1b64      	subs	r4, r4, r5
 800116e:	b29d      	uxth	r5, r3
 8001170:	fbb4 f3f0 	udiv	r3, r4, r0
 8001174:	fb00 4413 	mls	r4, r0, r3, r4
 8001178:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800117c:	fb03 fe0e 	mul.w	lr, r3, lr
 8001180:	45a6      	cmp	lr, r4
 8001182:	d908      	bls.n	8001196 <__udivmoddi4+0x1da>
 8001184:	eb1c 0404 	adds.w	r4, ip, r4
 8001188:	f103 30ff 	add.w	r0, r3, #4294967295
 800118c:	d26b      	bcs.n	8001266 <__udivmoddi4+0x2aa>
 800118e:	45a6      	cmp	lr, r4
 8001190:	d969      	bls.n	8001266 <__udivmoddi4+0x2aa>
 8001192:	3b02      	subs	r3, #2
 8001194:	4464      	add	r4, ip
 8001196:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800119a:	fba0 8302 	umull	r8, r3, r0, r2
 800119e:	eba4 040e 	sub.w	r4, r4, lr
 80011a2:	429c      	cmp	r4, r3
 80011a4:	46c6      	mov	lr, r8
 80011a6:	461d      	mov	r5, r3
 80011a8:	d355      	bcc.n	8001256 <__udivmoddi4+0x29a>
 80011aa:	d052      	beq.n	8001252 <__udivmoddi4+0x296>
 80011ac:	b156      	cbz	r6, 80011c4 <__udivmoddi4+0x208>
 80011ae:	ebb9 030e 	subs.w	r3, r9, lr
 80011b2:	eb64 0405 	sbc.w	r4, r4, r5
 80011b6:	fa04 f707 	lsl.w	r7, r4, r7
 80011ba:	40cb      	lsrs	r3, r1
 80011bc:	40cc      	lsrs	r4, r1
 80011be:	431f      	orrs	r7, r3
 80011c0:	e9c6 7400 	strd	r7, r4, [r6]
 80011c4:	2100      	movs	r1, #0
 80011c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011ca:	f1c3 0120 	rsb	r1, r3, #32
 80011ce:	fa02 fc03 	lsl.w	ip, r2, r3
 80011d2:	fa20 f201 	lsr.w	r2, r0, r1
 80011d6:	fa25 f101 	lsr.w	r1, r5, r1
 80011da:	409d      	lsls	r5, r3
 80011dc:	432a      	orrs	r2, r5
 80011de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011e2:	fa1f fe8c 	uxth.w	lr, ip
 80011e6:	fbb1 f0f7 	udiv	r0, r1, r7
 80011ea:	fb07 1510 	mls	r5, r7, r0, r1
 80011ee:	0c11      	lsrs	r1, r2, #16
 80011f0:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80011f4:	fb00 f50e 	mul.w	r5, r0, lr
 80011f8:	428d      	cmp	r5, r1
 80011fa:	fa04 f403 	lsl.w	r4, r4, r3
 80011fe:	d908      	bls.n	8001212 <__udivmoddi4+0x256>
 8001200:	eb1c 0101 	adds.w	r1, ip, r1
 8001204:	f100 38ff 	add.w	r8, r0, #4294967295
 8001208:	d22f      	bcs.n	800126a <__udivmoddi4+0x2ae>
 800120a:	428d      	cmp	r5, r1
 800120c:	d92d      	bls.n	800126a <__udivmoddi4+0x2ae>
 800120e:	3802      	subs	r0, #2
 8001210:	4461      	add	r1, ip
 8001212:	1b49      	subs	r1, r1, r5
 8001214:	b292      	uxth	r2, r2
 8001216:	fbb1 f5f7 	udiv	r5, r1, r7
 800121a:	fb07 1115 	mls	r1, r7, r5, r1
 800121e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001222:	fb05 f10e 	mul.w	r1, r5, lr
 8001226:	4291      	cmp	r1, r2
 8001228:	d908      	bls.n	800123c <__udivmoddi4+0x280>
 800122a:	eb1c 0202 	adds.w	r2, ip, r2
 800122e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001232:	d216      	bcs.n	8001262 <__udivmoddi4+0x2a6>
 8001234:	4291      	cmp	r1, r2
 8001236:	d914      	bls.n	8001262 <__udivmoddi4+0x2a6>
 8001238:	3d02      	subs	r5, #2
 800123a:	4462      	add	r2, ip
 800123c:	1a52      	subs	r2, r2, r1
 800123e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001242:	e739      	b.n	80010b8 <__udivmoddi4+0xfc>
 8001244:	4631      	mov	r1, r6
 8001246:	4630      	mov	r0, r6
 8001248:	e709      	b.n	800105e <__udivmoddi4+0xa2>
 800124a:	4639      	mov	r1, r7
 800124c:	e6e7      	b.n	800101e <__udivmoddi4+0x62>
 800124e:	4610      	mov	r0, r2
 8001250:	e6fc      	b.n	800104c <__udivmoddi4+0x90>
 8001252:	45c1      	cmp	r9, r8
 8001254:	d2aa      	bcs.n	80011ac <__udivmoddi4+0x1f0>
 8001256:	ebb8 0e02 	subs.w	lr, r8, r2
 800125a:	eb63 050c 	sbc.w	r5, r3, ip
 800125e:	3801      	subs	r0, #1
 8001260:	e7a4      	b.n	80011ac <__udivmoddi4+0x1f0>
 8001262:	4645      	mov	r5, r8
 8001264:	e7ea      	b.n	800123c <__udivmoddi4+0x280>
 8001266:	4603      	mov	r3, r0
 8001268:	e795      	b.n	8001196 <__udivmoddi4+0x1da>
 800126a:	4640      	mov	r0, r8
 800126c:	e7d1      	b.n	8001212 <__udivmoddi4+0x256>
 800126e:	46d0      	mov	r8, sl
 8001270:	e77c      	b.n	800116c <__udivmoddi4+0x1b0>
 8001272:	3d02      	subs	r5, #2
 8001274:	4462      	add	r2, ip
 8001276:	e733      	b.n	80010e0 <__udivmoddi4+0x124>
 8001278:	4608      	mov	r0, r1
 800127a:	e70b      	b.n	8001094 <__udivmoddi4+0xd8>
 800127c:	4464      	add	r4, ip
 800127e:	3802      	subs	r0, #2
 8001280:	e743      	b.n	800110a <__udivmoddi4+0x14e>
 8001282:	bf00      	nop

08001284 <__aeabi_idiv0>:
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop

08001288 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001290:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001294:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001296:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ac:	68fb      	ldr	r3, [r7, #12]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012fe:	4013      	ands	r3, r2
 8001300:	660b      	str	r3, [r1, #96]	; 0x60
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_ADC_Init+0xc4>)
 800131e:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <MX_ADC_Init+0xc8>)
 8001320:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001322:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001324:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001328:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800132a:	4b29      	ldr	r3, [pc, #164]	; (80013d0 <MX_ADC_Init+0xc4>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001330:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001336:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133c:	4b24      	ldr	r3, [pc, #144]	; (80013d0 <MX_ADC_Init+0xc4>)
 800133e:	2204      	movs	r2, #4
 8001340:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001344:	2200      	movs	r2, #0
 8001346:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001348:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <MX_ADC_Init+0xc4>)
 800134a:	2200      	movs	r2, #0
 800134c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001350:	2201      	movs	r2, #1
 8001352:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001354:	4b1e      	ldr	r3, [pc, #120]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001356:	2201      	movs	r2, #1
 8001358:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_ADC_Init+0xc4>)
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_ADC_Init+0xc4>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001378:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001380:	2207      	movs	r2, #7
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001386:	2207      	movs	r2, #7
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_ADC_Init+0xc4>)
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001392:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_ADC_Init+0xc4>)
 8001394:	2200      	movs	r2, #0
 8001396:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_ADC_Init+0xc4>)
 800139a:	f002 ffbb 	bl	8004314 <HAL_ADC_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_ADC_Init+0x9c>
  {
    Error_Handler();
 80013a4:	f000 fe6e 	bl	8002084 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <MX_ADC_Init+0xcc>)
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_ADC_Init+0xc4>)
 80013ba:	f003 fae7 	bl	800498c <HAL_ADC_ConfigChannel>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 80013c4:	f000 fe5e 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000017c 	.word	0x2000017c
 80013d4:	40012400 	.word	0x40012400
 80013d8:	0c000008 	.word	0x0c000008

080013dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0c      	ldr	r2, [pc, #48]	; (800142c <HAL_ADC_MspInit+0x50>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d112      	bne.n	8001424 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013fe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001402:	f7ff ff59 	bl	80012b8 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2002      	movs	r0, #2
 8001408:	f7ff ff3e 	bl	8001288 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800140c:	2310      	movs	r3, #16
 800140e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001410:	2303      	movs	r3, #3
 8001412:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	4619      	mov	r1, r3
 800141e:	4804      	ldr	r0, [pc, #16]	; (8001430 <HAL_ADC_MspInit+0x54>)
 8001420:	f004 fe16 	bl	8006050 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001424:	bf00      	nop
 8001426:	3720      	adds	r7, #32
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012400 	.word	0x40012400
 8001430:	48000400 	.word	0x48000400

08001434 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_ADC_MspDeInit+0x2c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d107      	bne.n	8001456 <HAL_ADC_MspDeInit+0x22>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8001446:	f44f 7000 	mov.w	r0, #512	; 0x200
 800144a:	f7ff ff4d 	bl	80012e8 <LL_APB2_GRP1_DisableClock>

    /**ADC GPIO Configuration
    PB4     ------> ADC_IN3
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 800144e:	2110      	movs	r1, #16
 8001450:	4804      	ldr	r0, [pc, #16]	; (8001464 <HAL_ADC_MspDeInit+0x30>)
 8001452:	f004 ff5d 	bl	8006310 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40012400 	.word	0x40012400
 8001464:	48000400 	.word	0x48000400

08001468 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <SYS_InitMeasurement+0x14>)
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <SYS_InitMeasurement+0x18>)
 8001470:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8001472:	bf00      	nop
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	2000017c 	.word	0x2000017c
 8001480:	40012400 	.word	0x40012400

08001484 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */
   return ADC_ReadChannels(ADC_CHANNEL_3);
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <SYS_GetBatteryLevel+0x14>)
 800148a:	f000 f807 	bl	800149c <ADC_ReadChannels>
 800148e:	4603      	mov	r3, r0
 8001490:	b29b      	uxth	r3, r3

  return batteryLevelmV;
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001492:	4618      	mov	r0, r3
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	0c000008 	.word	0x0c000008

0800149c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 80014b4:	f7ff ff2a 	bl	800130c <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 80014b8:	481a      	ldr	r0, [pc, #104]	; (8001524 <ADC_ReadChannels+0x88>)
 80014ba:	f003 fd4a 	bl	8004f52 <HAL_ADCEx_Calibration_Start>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 80014c4:	f000 fdde 	bl	8002084 <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80014d4:	f107 0308 	add.w	r3, r7, #8
 80014d8:	4619      	mov	r1, r3
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <ADC_ReadChannels+0x88>)
 80014dc:	f003 fa56 	bl	800498c <HAL_ADC_ConfigChannel>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80014e6:	f000 fdcd 	bl	8002084 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80014ea:	480e      	ldr	r0, [pc, #56]	; (8001524 <ADC_ReadChannels+0x88>)
 80014ec:	f003 f932 	bl	8004754 <HAL_ADC_Start>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80014f6:	f000 fdc5 	bl	8002084 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80014fa:	f04f 31ff 	mov.w	r1, #4294967295
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <ADC_ReadChannels+0x88>)
 8001500:	f003 f9a0 	bl	8004844 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001504:	4807      	ldr	r0, [pc, #28]	; (8001524 <ADC_ReadChannels+0x88>)
 8001506:	f003 f96b 	bl	80047e0 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 800150a:	4806      	ldr	r0, [pc, #24]	; (8001524 <ADC_ReadChannels+0x88>)
 800150c:	f003 fa31 	bl	8004972 <HAL_ADC_GetValue>
 8001510:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <ADC_ReadChannels+0x88>)
 8001514:	f003 f892 	bl	800463c <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 8001518:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	2000017c 	.word	0x2000017c

08001528 <LL_AHB1_GRP1_EnableClock>:
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4313      	orrs	r3, r2
 800153e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001544:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4013      	ands	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800154c:	68fb      	ldr	r3, [r7, #12]
}
 800154e:	bf00      	nop
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr

08001558 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800155c:	2004      	movs	r0, #4
 800155e:	f7ff ffe3 	bl	8001528 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff ffe0 	bl	8001528 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001568:	2200      	movs	r2, #0
 800156a:	2102      	movs	r1, #2
 800156c:	200b      	movs	r0, #11
 800156e:	f003 fe96 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001572:	200b      	movs	r0, #11
 8001574:	f003 fead 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	200c      	movs	r0, #12
 800157e:	f003 fe8e 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001582:	200c      	movs	r0, #12
 8001584:	f003 fea5 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX1_OVR_IRQn, 0, 0);
 8001588:	2200      	movs	r2, #0
 800158a:	2100      	movs	r1, #0
 800158c:	203d      	movs	r0, #61	; 0x3d
 800158e:	f003 fe86 	bl	800529e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX1_OVR_IRQn);
 8001592:	203d      	movs	r0, #61	; 0x3d
 8001594:	f003 fe9d 	bl	80052d2 <HAL_NVIC_EnableIRQ>

}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <FLASH_IF_Write>:
  /* USER CODE END FLASH_IF_DeInit_2 */
  return ret_status;
}

FLASH_IF_StatusTypedef FLASH_IF_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80015b2:	d311      	bcc.n	80015d8 <FLASH_IF_Write+0x3c>
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <FLASH_IF_Write+0x48>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	029a      	lsls	r2, r3, #10
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <FLASH_IF_Write+0x4c>)
 80015bc:	4013      	ands	r3, r2
 80015be:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015c2:	3b01      	subs	r3, #1
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d306      	bcc.n	80015d8 <FLASH_IF_Write+0x3c>
  {
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	68f8      	ldr	r0, [r7, #12]
 80015d0:	f000 f85a 	bl	8001688 <FLASH_IF_INT_Write>
 80015d4:	4603      	mov	r3, r0
 80015d6:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
  return ret_status;
 80015d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	1fff75e0 	.word	0x1fff75e0
 80015e8:	03fffc00 	.word	0x03fffc00

080015ec <FLASH_IF_Read>:

FLASH_IF_StatusTypedef FLASH_IF_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015f8:	23ff      	movs	r3, #255	; 0xff
 80015fa:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_Read_1 */

  /* USER CODE END FLASH_IF_Read_1 */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001602:	d311      	bcc.n	8001628 <FLASH_IF_Read+0x3c>
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <FLASH_IF_Read+0x48>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	029a      	lsls	r2, r3, #10
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <FLASH_IF_Read+0x4c>)
 800160c:	4013      	ands	r3, r2
 800160e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001612:	3b01      	subs	r3, #1
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	4293      	cmp	r3, r2
 8001618:	d306      	bcc.n	8001628 <FLASH_IF_Read+0x3c>
  {
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	68b9      	ldr	r1, [r7, #8]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f93a 	bl	8001898 <FLASH_IF_INT_Read>
 8001624:	4603      	mov	r3, r0
 8001626:	75fb      	strb	r3, [r7, #23]
  }
  /* USER CODE BEGIN FLASH_IF_Read_2 */

  /* USER CODE END FLASH_IF_Read_2 */
  return ret_status;
 8001628:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	1fff75e0 	.word	0x1fff75e0
 8001638:	03fffc00 	.word	0x03fffc00

0800163c <FLASH_IF_Erase>:

FLASH_IF_StatusTypedef FLASH_IF_Erase(void *pStart, uint32_t uLength)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001646:	23ff      	movs	r3, #255	; 0xff
 8001648:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN FLASH_IF_Erase_1 */

  /* USER CODE END FLASH_IF_Erase_1 */
  /* Check Flash start address */
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001650:	d310      	bcc.n	8001674 <FLASH_IF_Erase+0x38>
 8001652:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <FLASH_IF_Erase+0x44>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	029a      	lsls	r2, r3, #10
 8001658:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <FLASH_IF_Erase+0x48>)
 800165a:	4013      	ands	r3, r2
 800165c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001660:	3b01      	subs	r3, #1
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	4293      	cmp	r3, r2
 8001666:	d305      	bcc.n	8001674 <FLASH_IF_Erase+0x38>
  {
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001668:	6839      	ldr	r1, [r7, #0]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f932 	bl	80018d4 <FLASH_IF_INT_Erase>
 8001670:	4603      	mov	r3, r0
 8001672:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE BEGIN FLASH_IF_Erase_2 */

  /* USER CODE END FLASH_IF_Erase_2 */
  return ret_status;
 8001674:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	1fff75e0 	.word	0x1fff75e0
 8001684:	03fffc00 	.word	0x03fffc00

08001688 <FLASH_IF_INT_Write>:

/* Private Functions Definition -----------------------------------------------*/

/* Private Functions : internal flash -----------------------------------------*/
static FLASH_IF_StatusTypedef FLASH_IF_INT_Write(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	; 0x40
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  /* USER CODE BEGIN FLASH_IF_INT_Write_1 */

  /* USER CODE END FLASH_IF_INT_Write_1 */
  uint32_t uDest = (uint32_t)pDestination;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t uSource = (uint32_t)pSource;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t length = uLength;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t number_pages;
  uint32_t current_dest;
  uint32_t current_source;
  uint32_t current_length;

  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d00c      	beq.n	80016c6 <FLASH_IF_INT_Write+0x3e>
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d009      	beq.n	80016c6 <FLASH_IF_INT_Write+0x3e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d104      	bne.n	80016c6 <FLASH_IF_INT_Write+0x3e>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <FLASH_IF_INT_Write+0x44>
  {
    return FLASH_IF_PARAM_ERROR;
 80016c6:	f06f 0305 	mvn.w	r3, #5
 80016ca:	e0da      	b.n	8001882 <FLASH_IF_INT_Write+0x1fa>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80016cc:	f000 f992 	bl	80019f4 <FLASH_IF_INT_Clear_Error>
 80016d0:	4603      	mov	r3, r0
 80016d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (ret_status == FLASH_IF_OK)
 80016d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f040 80cf 	bne.w	800187e <FLASH_IF_INT_Write+0x1f6>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 80016e0:	f004 fae0 	bl	8005ca4 <HAL_FLASH_Unlock>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f040 80c6 	bne.w	8001878 <FLASH_IF_INT_Write+0x1f0>
    {
      start_page_index = PAGE_INDEX(uDest);
 80016ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ee:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 80016f2:	4b66      	ldr	r3, [pc, #408]	; (800188c <FLASH_IF_INT_Write+0x204>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	0299      	lsls	r1, r3, #10
 80016f8:	4b65      	ldr	r3, [pc, #404]	; (8001890 <FLASH_IF_INT_Write+0x208>)
 80016fa:	400b      	ands	r3, r1
 80016fc:	fbb2 f1f3 	udiv	r1, r2, r3
 8001700:	fb01 f303 	mul.w	r3, r1, r3
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	61bb      	str	r3, [r7, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 800170a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4413      	add	r3, r2
 8001710:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001714:	3b01      	subs	r3, #1
 8001716:	4a5d      	ldr	r2, [pc, #372]	; (800188c <FLASH_IF_INT_Write+0x204>)
 8001718:	6812      	ldr	r2, [r2, #0]
 800171a:	0291      	lsls	r1, r2, #10
 800171c:	4a5c      	ldr	r2, [pc, #368]	; (8001890 <FLASH_IF_INT_Write+0x208>)
 800171e:	400a      	ands	r2, r1
 8001720:	fbb3 f1f2 	udiv	r1, r3, r2
 8001724:	fb01 f202 	mul.w	r2, r1, r2
 8001728:	1a9b      	subs	r3, r3, r2
 800172a:	0ada      	lsrs	r2, r3, #11
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]

      if (number_pages > 1)
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d905      	bls.n	8001746 <FLASH_IF_INT_Write+0xbe>
      {
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 800173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800173c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001740:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
      }

      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	62fb      	str	r3, [r7, #44]	; 0x2c
 800174a:	e089      	b.n	8001860 <FLASH_IF_INT_Write+0x1d8>
      {
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 800174c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800174e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001752:	02db      	lsls	r3, r3, #11
 8001754:	613b      	str	r3, [r7, #16]
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001758:	68f8      	ldr	r0, [r7, #12]
 800175a:	f000 f925 	bl	80019a8 <FLASH_IF_INT_IsEmpty>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d031      	beq.n	80017c8 <FLASH_IF_INT_Write+0x140>
        {
          if (pAllocatedBuffer == NULL)
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <FLASH_IF_INT_Write+0xec>
          {
            ret_status = FLASH_IF_PARAM_ERROR;
 800176c:	23fa      	movs	r3, #250	; 0xfa
 800176e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 8001772:	e07e      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          }

          /* backup initial Flash page data in RAM area */
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6939      	ldr	r1, [r7, #16]
 800177a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800177e:	4618      	mov	r0, r3
 8001780:	f000 f88a 	bl	8001898 <FLASH_IF_INT_Read>
          /* copy fragment into RAM area */
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001784:	4b43      	ldr	r3, [pc, #268]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800178a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800178e:	4413      	add	r3, r2
 8001790:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001792:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001794:	b292      	uxth	r2, r2
 8001796:	4618      	mov	r0, r3
 8001798:	f01b fe96 	bl	801d4c8 <UTIL_MEM_cpy_8>

          /*  erase the Flash sector, to avoid writing twice in RAM */
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f896 	bl	80018d4 <FLASH_IF_INT_Erase>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d003      	beq.n	80017b6 <FLASH_IF_INT_Write+0x12e>
          {
            ret_status = FLASH_IF_ERASE_ERROR;
 80017ae:	23fe      	movs	r3, #254	; 0xfe
 80017b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break; /* exit for loop */
 80017b4:	e05d      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          }

          /* copy the whole flash sector including fragment from RAM to Flash */
          current_dest = page_address;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = (uint32_t)pAllocatedBuffer;
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <FLASH_IF_INT_Write+0x20c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	623b      	str	r3, [r7, #32]
          current_length = FLASH_PAGE_SIZE;
 80017c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80017c4:	61fb      	str	r3, [r7, #28]
 80017c6:	e005      	b.n	80017d4 <FLASH_IF_INT_Write+0x14c>
        }
        else
        {
          /* write a part of flash page from selected source data */
          current_dest = uDest;
 80017c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
          current_source = uSource;
 80017cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ce:	623b      	str	r3, [r7, #32]
          current_length = length;
 80017d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017d2:	61fb      	str	r3, [r7, #28]
        }

        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d8:	e026      	b.n	8001828 <FLASH_IF_INT_Write+0x1a0>
        {
          /* Device voltage range supposed to be [2.7V to 3.6V], the operation will be done by word */
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80017da:	6a3a      	ldr	r2, [r7, #32]
 80017dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017de:	4413      	add	r3, r2
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017e6:	2001      	movs	r0, #1
 80017e8:	f004 fa18 	bl	8005c1c <HAL_FLASH_Program>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d113      	bne.n	800181a <FLASH_IF_INT_Write+0x192>
          {
            /* Check the written value */
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f8:	6a3a      	ldr	r2, [r7, #32]
 80017fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fc:	4413      	add	r3, r2
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	4299      	cmp	r1, r3
 8001804:	bf08      	it	eq
 8001806:	4290      	cmpeq	r0, r2
 8001808:	d003      	beq.n	8001812 <FLASH_IF_INT_Write+0x18a>
            {
              /* Flash content doesn't match SRAM content */
              ret_status = FLASH_IF_WRITE_ERROR;
 800180a:	23fc      	movs	r3, #252	; 0xfc
 800180c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 8001810:	e00e      	b.n	8001830 <FLASH_IF_INT_Write+0x1a8>
            }
            /* Increment FLASH Destination address */
            current_dest = current_dest + 8U;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3308      	adds	r3, #8
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
 8001818:	e003      	b.n	8001822 <FLASH_IF_INT_Write+0x19a>
          }
          else
          {
            /* Error occurred while writing data in Flash memory */
            ret_status = FLASH_IF_WRITE_ERROR;
 800181a:	23fc      	movs	r3, #252	; 0xfc
 800181c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
            break;
 8001820:	e006      	b.n	8001830 <FLASH_IF_INT_Write+0x1a8>
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	3308      	adds	r3, #8
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	429a      	cmp	r2, r3
 800182e:	d3d4      	bcc.n	80017da <FLASH_IF_INT_Write+0x152>
          }
        }

        if (ret_status != FLASH_IF_OK)
 8001830:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <FLASH_IF_INT_Write+0x1e8>
          /* Error occurred while writing data in Flash memory */
          break;
        }

        /* Increment FLASH destination address, source address, and decrease remaining length */
        uDest += length;
 8001838:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800183a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800183c:	4413      	add	r3, r2
 800183e:	63bb      	str	r3, [r7, #56]	; 0x38
        uSource += length;
 8001840:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001844:	4413      	add	r3, r2
 8001846:	637b      	str	r3, [r7, #52]	; 0x34
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001852:	bf28      	it	cs
 8001854:	f44f 6300 	movcs.w	r3, #2048	; 0x800
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 800185a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800185c:	3301      	adds	r3, #1
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	4413      	add	r3, r2
 8001866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001868:	429a      	cmp	r2, r3
 800186a:	f4ff af6f 	bcc.w	800174c <FLASH_IF_INT_Write+0xc4>
 800186e:	e000      	b.n	8001872 <FLASH_IF_INT_Write+0x1ea>
          break;
 8001870:	bf00      	nop
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 8001872:	f004 fa39 	bl	8005ce8 <HAL_FLASH_Lock>
 8001876:	e002      	b.n	800187e <FLASH_IF_INT_Write+0x1f6>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001878:	23fb      	movs	r3, #251	; 0xfb
 800187a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Write_2 */

  /* USER CODE END FLASH_IF_INT_Write_2 */
  return ret_status;
 800187e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8001882:	4618      	mov	r0, r3
 8001884:	3740      	adds	r7, #64	; 0x40
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	1fff75e0 	.word	0x1fff75e0
 8001890:	03fffc00 	.word	0x03fffc00
 8001894:	200001e0 	.word	0x200001e0

08001898 <FLASH_IF_INT_Read>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Read(void *pDestination, const void *pSource, uint32_t uLength)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	607a      	str	r2, [r7, #4]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN FLASH_IF_INT_Read_1 */

  /* USER CODE END FLASH_IF_INT_Read_1 */
  if ((pDestination == NULL) || (pSource == NULL))
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d002      	beq.n	80018b4 <FLASH_IF_INT_Read+0x1c>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <FLASH_IF_INT_Read+0x22>
  {
    return FLASH_IF_PARAM_ERROR;
 80018b4:	f06f 0305 	mvn.w	r3, #5
 80018b8:	e008      	b.n	80018cc <FLASH_IF_INT_Read+0x34>
  }

  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	b29b      	uxth	r3, r3
 80018be:	461a      	mov	r2, r3
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f01b fe00 	bl	801d4c8 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN FLASH_IF_INT_Read_2 */

  /* USER CODE END FLASH_IF_INT_Read_2 */
  return ret_status;
 80018c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <FLASH_IF_INT_Erase>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Erase(void *pStart, uint32_t uLength)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_OK;
 80018de:	2300      	movs	r3, #0
 80018e0:	77fb      	strb	r3, [r7, #31]
  /* USER CODE BEGIN FLASH_IF_INT_Erase_1 */

  /* USER CODE END FLASH_IF_INT_Erase_1 */
  HAL_StatusTypeDef hal_status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	77bb      	strb	r3, [r7, #30]
  uint32_t page_error = 0U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t uStart = (uint32_t)pStart;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef erase_init;

  if (pStart == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d102      	bne.n	80018fa <FLASH_IF_INT_Erase+0x26>
  {
    return FLASH_IF_PARAM_ERROR;
 80018f4:	f06f 0305 	mvn.w	r3, #5
 80018f8:	e04e      	b.n	8001998 <FLASH_IF_INT_Erase+0xc4>
  }

  /* Clear error flags raised during previous operation */
  ret_status = FLASH_IF_INT_Clear_Error();
 80018fa:	f000 f87b 	bl	80019f4 <FLASH_IF_INT_Clear_Error>
 80018fe:	4603      	mov	r3, r0
 8001900:	77fb      	strb	r3, [r7, #31]

  if (ret_status == FLASH_IF_OK)
 8001902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d144      	bne.n	8001994 <FLASH_IF_INT_Erase+0xc0>
  {
    /* Unlock the Flash to enable the flash control register access */
    if (HAL_FLASH_Unlock() == HAL_OK)
 800190a:	f004 f9cb 	bl	8005ca4 <HAL_FLASH_Unlock>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d13d      	bne.n	8001990 <FLASH_IF_INT_Erase+0xbc>
    {
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001914:	2302      	movs	r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
      erase_init.Page = PAGE_INDEX(uStart);
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <FLASH_IF_INT_Erase+0xcc>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	0299      	lsls	r1, r3, #10
 8001924:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <FLASH_IF_INT_Erase+0xd0>)
 8001926:	400b      	ands	r3, r1
 8001928:	fbb2 f1f3 	udiv	r1, r2, r3
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	0adb      	lsrs	r3, r3, #11
 8001934:	60fb      	str	r3, [r7, #12]
      /* Get the number of pages to erase from 1st page */
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001940:	3b01      	subs	r3, #1
 8001942:	4a17      	ldr	r2, [pc, #92]	; (80019a0 <FLASH_IF_INT_Erase+0xcc>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	0291      	lsls	r1, r2, #10
 8001948:	4a16      	ldr	r2, [pc, #88]	; (80019a4 <FLASH_IF_INT_Erase+0xd0>)
 800194a:	400a      	ands	r2, r1
 800194c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001950:	fb01 f202 	mul.w	r2, r1, r2
 8001954:	1a9b      	subs	r3, r3, r2
 8001956:	0ada      	lsrs	r2, r3, #11
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	3301      	adds	r3, #1
 800195e:	613b      	str	r3, [r7, #16]

      /* Erase the Page */
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001960:	f107 0214 	add.w	r2, r7, #20
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f004 fa9c 	bl	8005ea8 <HAL_FLASHEx_Erase>
 8001970:	4603      	mov	r3, r0
 8001972:	77bb      	strb	r3, [r7, #30]

      if (hal_status != HAL_OK)
 8001974:	7fbb      	ldrb	r3, [r7, #30]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <FLASH_IF_INT_Erase+0xb6>
      {
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 800197a:	7fbb      	ldrb	r3, [r7, #30]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d101      	bne.n	8001984 <FLASH_IF_INT_Erase+0xb0>
 8001980:	2301      	movs	r3, #1
 8001982:	e001      	b.n	8001988 <FLASH_IF_INT_Erase+0xb4>
 8001984:	f06f 0301 	mvn.w	r3, #1
 8001988:	77fb      	strb	r3, [r7, #31]
      }

      /* Lock the Flash to disable the flash control register access (recommended
       * to protect the FLASH memory against possible unwanted operation) */
      HAL_FLASH_Lock();
 800198a:	f004 f9ad 	bl	8005ce8 <HAL_FLASH_Lock>
 800198e:	e001      	b.n	8001994 <FLASH_IF_INT_Erase+0xc0>
    }
    else
    {
      ret_status = FLASH_IF_LOCK_ERROR;
 8001990:	23fb      	movs	r3, #251	; 0xfb
 8001992:	77fb      	strb	r3, [r7, #31]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Erase_2 */

  /* USER CODE END FLASH_IF_INT_Erase_2 */
  return ret_status;
 8001994:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3720      	adds	r7, #32
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	1fff75e0 	.word	0x1fff75e0
 80019a4:	03fffc00 	.word	0x03fffc00

080019a8 <FLASH_IF_INT_IsEmpty>:

static int32_t FLASH_IF_INT_IsEmpty(void *pStart, uint32_t uLength)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  int32_t status = FLASH_IF_MEM_EMPTY;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	e011      	b.n	80019e0 <FLASH_IF_INT_IsEmpty+0x38>
  {
    if (*(uint64_t *)pStart != UINT64_MAX)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c6:	bf08      	it	eq
 80019c8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80019cc:	d002      	beq.n	80019d4 <FLASH_IF_INT_IsEmpty+0x2c>
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
 80019ce:	2301      	movs	r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
      break;
 80019d2:	e009      	b.n	80019e8 <FLASH_IF_INT_IsEmpty+0x40>
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3308      	adds	r3, #8
 80019d8:	607b      	str	r3, [r7, #4]
  for (index = 0; index < uLength; index += 8)
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	3308      	adds	r3, #8
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68ba      	ldr	r2, [r7, #8]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d3e9      	bcc.n	80019bc <FLASH_IF_INT_IsEmpty+0x14>
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
 80019e8:	68fb      	ldr	r3, [r7, #12]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 80019fa:	23fb      	movs	r3, #251	; 0xfb
 80019fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 80019fe:	f004 f951 	bl	8005ca4 <HAL_FLASH_Unlock>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d110      	bne.n	8001a2a <FLASH_IF_INT_Clear_Error+0x36>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a0e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001a12:	6193      	str	r3, [r2, #24]
 8001a14:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <FLASH_IF_INT_Clear_Error+0x44>)
 8001a16:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001a1a:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001a1c:	f004 f964 	bl	8005ce8 <HAL_FLASH_Lock>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <FLASH_IF_INT_Clear_Error+0x36>
    {
      ret_status = FLASH_IF_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
    }
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	58004000 	.word	0x58004000

08001a3c <LL_AHB2_GRP1_EnableClock>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a4a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a60:	68fb      	ldr	r3, [r7, #12]
}
 8001a62:	bf00      	nop
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr

08001a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff ffdb 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a86:	2002      	movs	r0, #2
 8001a88:	f7ff ffd8 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8c:	2004      	movs	r0, #4
 8001a8e:	f7ff ffd5 	bl	8001a3c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|SPI_CSN_Pin|SPI_CEN_Pin, GPIO_PIN_RESET);
 8001a92:	2200      	movs	r2, #0
 8001a94:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8001a98:	4825      	ldr	r0, [pc, #148]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001a9a:	f004 fd07 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	2120      	movs	r1, #32
 8001aa2:	4823      	ldr	r0, [pc, #140]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001aa4:	f004 fd02 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|CONNECT_PM_SENSOR_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f240 2131 	movw	r1, #561	; 0x231
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f004 fcfb 	bl	80064ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|LED2_Pin;
 8001ab6:	2328      	movs	r3, #40	; 0x28
 8001ab8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aba:	2301      	movs	r3, #1
 8001abc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4819      	ldr	r0, [pc, #100]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001acc:	f004 fac0 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI_CSN_Pin|SPI_CEN_Pin;
 8001ad0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae2:	1d3b      	adds	r3, r7, #4
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4812      	ldr	r0, [pc, #72]	; (8001b30 <MX_GPIO_Init+0xc4>)
 8001ae8:	f004 fab2 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001aec:	2331      	movs	r3, #49	; 0x31
 8001aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af0:	2301      	movs	r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af8:	2303      	movs	r3, #3
 8001afa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001afc:	1d3b      	adds	r3, r7, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b04:	f004 faa4 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONNECT_PM_SENSOR_Pin;
 8001b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(CONNECT_PM_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	1d3b      	adds	r3, r7, #4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f004 fa95 	bl	8006050 <HAL_GPIO_Init>

}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	48000400 	.word	0x48000400

08001b34 <LL_AHB2_GRP1_EnableClock>:
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001b4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4013      	ands	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b58:	68fb      	ldr	r3, [r7, #12]
}
 8001b5a:	bf00      	nop
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <LL_APB1_GRP1_EnableClock>:
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001b6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b72:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b88:	68fb      	ldr	r3, [r7, #12]
}
 8001b8a:	bf00      	nop
 8001b8c:	3714      	adds	r7, #20
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001b9a:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <MX_I2C2_Init+0x78>)
 8001b9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x003037FF;
 8001b9e:	4b1a      	ldr	r3, [pc, #104]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <MX_I2C2_Init+0x7c>)
 8001ba2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001baa:	4b17      	ldr	r3, [pc, #92]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001bce:	480e      	ldr	r0, [pc, #56]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bd0:	f004 fc83 	bl	80064da <HAL_I2C_Init>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001bda:	f000 fa53 	bl	8002084 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001bde:	2100      	movs	r1, #0
 8001be0:	4809      	ldr	r0, [pc, #36]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001be2:	f005 feb0 	bl	8007946 <HAL_I2CEx_ConfigAnalogFilter>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001bec:	f000 fa4a 	bl	8002084 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_I2C2_Init+0x74>)
 8001bf4:	f005 fef1 	bl	80079da <HAL_I2CEx_ConfigDigitalFilter>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001bfe:	f000 fa41 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001e4 	.word	0x200001e4
 8001c0c:	40005800 	.word	0x40005800
 8001c10:	003037ff 	.word	0x003037ff

08001c14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b096      	sub	sp, #88	; 0x58
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2238      	movs	r2, #56	; 0x38
 8001c32:	2100      	movs	r1, #0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f01c ff0b 	bl	801ea50 <memset>
  if(i2cHandle->Instance==I2C2)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a29      	ldr	r2, [pc, #164]	; (8001ce4 <HAL_I2C_MspInit+0xd0>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d14b      	bne.n	8001cdc <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c48:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4618      	mov	r0, r3
 8001c54:	f007 fdce 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c5e:	f000 fa11 	bl	8002084 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff ff66 	bl	8001b34 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c68:	2002      	movs	r0, #2
 8001c6a:	f7ff ff63 	bl	8001b34 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c72:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c74:	2312      	movs	r3, #18
 8001c76:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c80:	2304      	movs	r3, #4
 8001c82:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f004 f9df 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c98:	2312      	movs	r3, #18
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca4:	2304      	movs	r3, #4
 8001ca6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	; (8001ce8 <HAL_I2C_MspInit+0xd4>)
 8001cb0:	f004 f9ce 	bl	8006050 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cb4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001cb8:	f7ff ff54 	bl	8001b64 <LL_APB1_GRP1_EnableClock>

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	2020      	movs	r0, #32
 8001cc2:	f003 faec 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001cc6:	2020      	movs	r0, #32
 8001cc8:	f003 fb03 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	2021      	movs	r0, #33	; 0x21
 8001cd2:	f003 fae4 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f003 fafb 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3758      	adds	r7, #88	; 0x58
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40005800 	.word	0x40005800
 8001ce8:	48000400 	.word	0x48000400

08001cec <LL_APB1_GRP1_EnableClock>:
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cf8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001cfa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001d04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d10:	68fb      	ldr	r3, [r7, #12]
}
 8001d12:	bf00      	nop
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d22:	4a14      	ldr	r2, [pc, #80]	; (8001d74 <MX_LPTIM1_Init+0x58>)
 8001d24:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8001d2c:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d2e:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8001d32:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001d34:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001d3c:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001d42:	4b0b      	ldr	r3, [pc, #44]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001d48:	4b09      	ldr	r3, [pc, #36]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001d5a:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_LPTIM1_Init+0x54>)
 8001d5c:	f005 fefa 	bl	8007b54 <HAL_LPTIM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001d66:	f000 f98d 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000238 	.word	0x20000238
 8001d74:	40007c00 	.word	0x40007c00

08001d78 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b090      	sub	sp, #64	; 0x40
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d80:	f107 0308 	add.w	r3, r7, #8
 8001d84:	2238      	movs	r2, #56	; 0x38
 8001d86:	2100      	movs	r1, #0
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f01c fe61 	bl	801ea50 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a11      	ldr	r2, [pc, #68]	; (8001dd8 <HAL_LPTIM_MspInit+0x60>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d11b      	bne.n	8001dd0 <HAL_LPTIM_MspInit+0x58>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8001d9e:	f04f 130c 	mov.w	r3, #786444	; 0xc000c
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001da4:	f107 0308 	add.w	r3, r7, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fd23 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 8001db4:	f000 f966 	bl	8002084 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001db8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001dbc:	f7ff ff96 	bl	8001cec <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	2027      	movs	r0, #39	; 0x27
 8001dc6:	f003 fa6a 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001dca:	2027      	movs	r0, #39	; 0x27
 8001dcc:	f003 fa81 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	3740      	adds	r7, #64	; 0x40
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40007c00 	.word	0x40007c00

08001ddc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f023 0218 	bic.w	r2, r3, #24
 8001df0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
	...

08001e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e0c:	f002 f88a 	bl	8003f24 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e10:	f000 f82a 	bl	8001e68 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e14:	f7ff fe2a 	bl	8001a6c <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8001e18:	f00b f990 	bl	800d13c <MX_LoRaWAN_Init>
  MX_USART2_UART_Init();
 8001e1c:	f001 f9c4 	bl	80031a8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001e20:	f7ff feb8 	bl	8001b94 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001e24:	f000 fad6 	bl	80023d4 <MX_SPI2_Init>
  MX_LPTIM1_Init();
 8001e28:	f7ff ff78 	bl	8001d1c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */

  F1_QueueIni(); // init Function queue
 8001e2c:	f000 f936 	bl	800209c <F1_QueueIni>
  F2_QueueIni();
 8001e30:	f000 f9ac 	bl	800218c <F2_QueueIni>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e34:	2200      	movs	r2, #0
 8001e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f004 fb35 	bl	80064ac <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim16);
  HAL_LPTIM_TimeOut_Start_IT(&hlptim1,  256, 0);
 8001e42:	2200      	movs	r2, #0
 8001e44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e48:	4806      	ldr	r0, [pc, #24]	; (8001e64 <main+0x5c>)
 8001e4a:	f005 ff4b 	bl	8007ce4 <HAL_LPTIM_TimeOut_Start_IT>

  while (1)
  {

    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 8001e4e:	f00b f97d 	bl	800d14c <MX_LoRaWAN_Process>

    /* USER CODE BEGIN 3 */

    F1_pull()();
 8001e52:	f000 f967 	bl	8002124 <F1_pull>
 8001e56:	4603      	mov	r3, r0
 8001e58:	4798      	blx	r3
    F2_pull()();
 8001e5a:	f000 f9a7 	bl	80021ac <F2_pull>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	4798      	blx	r3
    MX_LoRaWAN_Process();
 8001e62:	e7f4      	b.n	8001e4e <main+0x46>
 8001e64:	20000238 	.word	0x20000238

08001e68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b09a      	sub	sp, #104	; 0x68
 8001e6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	2248      	movs	r2, #72	; 0x48
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f01c fdea 	bl	801ea50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e7c:	f107 0308 	add.w	r3, r7, #8
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001e8e:	f006 fa41 	bl	8008314 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff ffa2 	bl	8001ddc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e98:	4b1e      	ldr	r3, [pc, #120]	; (8001f14 <SystemClock_Config+0xac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <SystemClock_Config+0xac>)
 8001ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <SystemClock_Config+0xac>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb0:	607b      	str	r3, [r7, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001eb4:	2305      	movs	r3, #5
 8001eb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS_PWR;
 8001eb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ebe:	2381      	movs	r3, #129	; 0x81
 8001ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEDiv = RCC_HSE_DIV1;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f006 fd6c 	bl	80089ac <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001eda:	f000 f8d3 	bl	8002084 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001ede:	234f      	movs	r3, #79	; 0x4f
 8001ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ef6:	f107 0308 	add.w	r3, r7, #8
 8001efa:	2101      	movs	r1, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f007 f8d7 	bl	80090b0 <HAL_RCC_ClockConfig>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001f08:	f000 f8bc 	bl	8002084 <Error_Handler>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3768      	adds	r7, #104	; 0x68
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58000400 	.word	0x58000400

08001f18 <EnablePM_sens>:

/* USER CODE BEGIN 4 */

void EnablePM_sens(void){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b092      	sub	sp, #72	; 0x48
 8001f1c:	af00      	add	r7, sp, #0
    unsigned char serial_number[32];
    uint8_t serial_number_size = 32;
 8001f1e:	2320      	movs	r3, #32
 8001f20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


    sen5x_device_reset();
 8001f24:	f001 fe1c 	bl	8003b60 <sen5x_device_reset>
    sen5x_get_serial_number(serial_number, serial_number_size);
 8001f28:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001f2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f001 fdd0 	bl	8003ad8 <sen5x_get_serial_number>


    unsigned char product_name[32];
    uint8_t product_name_size = 32;
 8001f38:	2320      	movs	r3, #32
 8001f3a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    sen5x_get_product_name(product_name, product_name_size);
 8001f3e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f001 fd83 	bl	8003a52 <sen5x_get_product_name>
    sen5x_start_measurement();
 8001f4c:	f001 fca8 	bl	80038a0 <sen5x_start_measurement>

}
 8001f50:	bf00      	nop
 8001f52:	3748      	adds	r7, #72	; 0x48
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <DisablePM_sens>:

void DisablePM_sens(void){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0

sen5x_stop_measurement();
 8001f5c:	f001 fcc6 	bl	80038ec <sen5x_stop_measurement>
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <MeasurePM_sens>:

void MeasurePM_sens(void){
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af04      	add	r7, sp, #16
    int16_t a_humidity;
    int16_t a_temperature;
    int16_t nox_index;

    sen5x_read_measured_values(
 8001f6a:	1cbb      	adds	r3, r7, #2
 8001f6c:	9303      	str	r3, [sp, #12]
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <MeasurePM_sens+0x70>)
 8001f70:	9302      	str	r3, [sp, #8]
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	1dbb      	adds	r3, r7, #6
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MeasurePM_sens+0x74>)
 8001f7c:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <MeasurePM_sens+0x78>)
 8001f7e:	4918      	ldr	r1, [pc, #96]	; (8001fe0 <MeasurePM_sens+0x7c>)
 8001f80:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <MeasurePM_sens+0x80>)
 8001f82:	f001 fcdb 	bl	800393c <sen5x_read_measured_values>
        &PM1, &PM2_5,
		&PM4, &PM10,
        &a_humidity, &a_temperature, &VOC, &nox_index);

    temperatureA = (double)a_temperature/200.0; //do not know why, but this variable will be affected
 8001f86:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fa4e 	bl	800042c <__aeabi_i2d>
 8001f90:	f04f 0200 	mov.w	r2, #0
 8001f94:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <MeasurePM_sens+0x84>)
 8001f96:	f7fe fbdd 	bl	8000754 <__aeabi_ddiv>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4913      	ldr	r1, [pc, #76]	; (8001fec <MeasurePM_sens+0x88>)
 8001fa0:	e9c1 2300 	strd	r2, r3, [r1]
    temperatureTX = temperatureA;
 8001fa4:	4b11      	ldr	r3, [pc, #68]	; (8001fec <MeasurePM_sens+0x88>)
 8001fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001faa:	4911      	ldr	r1, [pc, #68]	; (8001ff0 <MeasurePM_sens+0x8c>)
 8001fac:	e9c1 2300 	strd	r2, r3, [r1]
    humidity = a_humidity/100.0f;
 8001fb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7fe fe1f 	bl	8000bf8 <__aeabi_i2f>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <MeasurePM_sens+0x90>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe ff22 	bl	8000e08 <__aeabi_fdiv>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MeasurePM_sens+0x94>)
 8001fca:	601a      	str	r2, [r3, #0]
}
 8001fcc:	bf00      	nop
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	2000027c 	.word	0x2000027c
 8001fd8:	2000027a 	.word	0x2000027a
 8001fdc:	20000278 	.word	0x20000278
 8001fe0:	20000274 	.word	0x20000274
 8001fe4:	20000276 	.word	0x20000276
 8001fe8:	40690000 	.word	0x40690000
 8001fec:	20000280 	.word	0x20000280
 8001ff0:	20000288 	.word	0x20000288
 8001ff4:	42c80000 	.word	0x42c80000
 8001ff8:	20000290 	.word	0x20000290

08001ffc <HAL_LPTIM_CompareMatchCallback>:



 void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	static int counter = 0;

   if (hlptim == &hlptim1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_LPTIM_CompareMatchCallback+0x70>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d12a      	bne.n	8002062 <HAL_LPTIM_CompareMatchCallback+0x66>
   {

      switch(counter){
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <HAL_LPTIM_CompareMatchCallback+0x74>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b47      	cmp	r3, #71	; 0x47
 8002012:	d00e      	beq.n	8002032 <HAL_LPTIM_CompareMatchCallback+0x36>
 8002014:	2b47      	cmp	r3, #71	; 0x47
 8002016:	dc10      	bgt.n	800203a <HAL_LPTIM_CompareMatchCallback+0x3e>
 8002018:	2b0a      	cmp	r3, #10
 800201a:	d002      	beq.n	8002022 <HAL_LPTIM_CompareMatchCallback+0x26>
 800201c:	2b46      	cmp	r3, #70	; 0x46
 800201e:	d004      	beq.n	800202a <HAL_LPTIM_CompareMatchCallback+0x2e>
 8002020:	e00b      	b.n	800203a <HAL_LPTIM_CompareMatchCallback+0x3e>
      case 10:
    		  F1_push(EnablePM_sens);
 8002022:	4814      	ldr	r0, [pc, #80]	; (8002074 <HAL_LPTIM_CompareMatchCallback+0x78>)
 8002024:	f000 f84a 	bl	80020bc <F1_push>
    	  break;
 8002028:	e007      	b.n	800203a <HAL_LPTIM_CompareMatchCallback+0x3e>
      case 70:
    		  F1_push(MeasurePM_sens);
 800202a:	4813      	ldr	r0, [pc, #76]	; (8002078 <HAL_LPTIM_CompareMatchCallback+0x7c>)
 800202c:	f000 f846 	bl	80020bc <F1_push>
    	  break;
 8002030:	e003      	b.n	800203a <HAL_LPTIM_CompareMatchCallback+0x3e>
      case 71:
    		  F1_push(DisablePM_sens);
 8002032:	4812      	ldr	r0, [pc, #72]	; (800207c <HAL_LPTIM_CompareMatchCallback+0x80>)
 8002034:	f000 f842 	bl	80020bc <F1_push>
    	  break;
 8002038:	bf00      	nop

      }
      counter++;
 800203a:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <HAL_LPTIM_CompareMatchCallback+0x74>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3301      	adds	r3, #1
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <HAL_LPTIM_CompareMatchCallback+0x74>)
 8002042:	6013      	str	r3, [r2, #0]
      counter %= 90;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_LPTIM_CompareMatchCallback+0x74>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_LPTIM_CompareMatchCallback+0x84>)
 800204a:	fb82 1203 	smull	r1, r2, r2, r3
 800204e:	441a      	add	r2, r3
 8002050:	1191      	asrs	r1, r2, #6
 8002052:	17da      	asrs	r2, r3, #31
 8002054:	1a8a      	subs	r2, r1, r2
 8002056:	215a      	movs	r1, #90	; 0x5a
 8002058:	fb01 f202 	mul.w	r2, r1, r2
 800205c:	1a9a      	subs	r2, r3, r2
 800205e:	4b04      	ldr	r3, [pc, #16]	; (8002070 <HAL_LPTIM_CompareMatchCallback+0x74>)
 8002060:	601a      	str	r2, [r3, #0]
   }
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000238 	.word	0x20000238
 8002070:	20000294 	.word	0x20000294
 8002074:	08001f19 	.word	0x08001f19
 8002078:	08001f65 	.word	0x08001f65
 800207c:	08001f59 	.word	0x08001f59
 8002080:	b60b60b7 	.word	0xb60b60b7

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002088:	b672      	cpsid	i
}
 800208a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800208c:	e7fe      	b.n	800208c <Error_Handler+0x8>

0800208e <SimpleF1>:
#define Q_SIZE_FAST 16

volatile int F1_last; // number of last element of fast-speed queue
int F1_first; // number of first element of fast-speed queue

void SimpleF1(){;};
 800208e:	b480      	push	{r7}
 8002090:	af00      	add	r7, sp, #0
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr
	...

0800209c <F1_QueueIni>:

void (*F1_Queue[Q_SIZE_FAST])();

 void F1_QueueIni(void){ // initialization of Queue
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  F1_last = 0;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <F1_QueueIni+0x18>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  F1_first = 0;
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <F1_QueueIni+0x1c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
}
 80020ac:	bf00      	nop
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	20000298 	.word	0x20000298
 80020b8:	2000029c 	.word	0x2000029c

080020bc <F1_push>:

 int F1_push(void (*pointerQ)(void) ){ // push element from the queue
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  if ((F1_last+1)%Q_SIZE_FAST == F1_first)return 1;
 80020c4:	4b14      	ldr	r3, [pc, #80]	; (8002118 <F1_push+0x5c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	425a      	negs	r2, r3
 80020cc:	f003 030f 	and.w	r3, r3, #15
 80020d0:	f002 020f 	and.w	r2, r2, #15
 80020d4:	bf58      	it	pl
 80020d6:	4253      	negpl	r3, r2
 80020d8:	4a10      	ldr	r2, [pc, #64]	; (800211c <F1_push+0x60>)
 80020da:	6812      	ldr	r2, [r2, #0]
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <F1_push+0x28>
 80020e0:	2301      	movs	r3, #1
 80020e2:	e014      	b.n	800210e <F1_push+0x52>
  F1_Queue[F1_last++] = pointerQ;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	; (8002118 <F1_push+0x5c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	490b      	ldr	r1, [pc, #44]	; (8002118 <F1_push+0x5c>)
 80020ec:	600a      	str	r2, [r1, #0]
 80020ee:	490c      	ldr	r1, [pc, #48]	; (8002120 <F1_push+0x64>)
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  F1_last%=Q_SIZE_FAST;
 80020f6:	4b08      	ldr	r3, [pc, #32]	; (8002118 <F1_push+0x5c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	425a      	negs	r2, r3
 80020fc:	f003 030f 	and.w	r3, r3, #15
 8002100:	f002 020f 	and.w	r2, r2, #15
 8002104:	bf58      	it	pl
 8002106:	4253      	negpl	r3, r2
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <F1_push+0x5c>)
 800210a:	6013      	str	r3, [r2, #0]
  return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	20000298 	.word	0x20000298
 800211c:	2000029c 	.word	0x2000029c
 8002120:	200002a0 	.word	0x200002a0

08002124 <F1_pull>:

 void (*F1_pull(void))(void){ // pull element from the queue
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  void (*pullVar)(void);
  if (F1_last == F1_first)return SimpleF1;
 800212a:	4b11      	ldr	r3, [pc, #68]	; (8002170 <F1_pull+0x4c>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <F1_pull+0x50>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d101      	bne.n	800213a <F1_pull+0x16>
 8002136:	4b10      	ldr	r3, [pc, #64]	; (8002178 <F1_pull+0x54>)
 8002138:	e014      	b.n	8002164 <F1_pull+0x40>
  pullVar = F1_Queue[F1_first++];
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <F1_pull+0x50>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <F1_pull+0x50>)
 8002142:	600a      	str	r2, [r1, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <F1_pull+0x58>)
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	607b      	str	r3, [r7, #4]
  F1_first%=Q_SIZE_FAST;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <F1_pull+0x50>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	425a      	negs	r2, r3
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	f002 020f 	and.w	r2, r2, #15
 800215a:	bf58      	it	pl
 800215c:	4253      	negpl	r3, r2
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <F1_pull+0x50>)
 8002160:	6013      	str	r3, [r2, #0]
  return pullVar;
 8002162:	687b      	ldr	r3, [r7, #4]
}
 8002164:	4618      	mov	r0, r3
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	20000298 	.word	0x20000298
 8002174:	2000029c 	.word	0x2000029c
 8002178:	0800208f 	.word	0x0800208f
 800217c:	200002a0 	.word	0x200002a0

08002180 <SimpleF2>:
 // ------ 8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----8<----

 volatile int F2_last; // number of last element of fast-speed queue
 int F2_first; // number of first element of fast-speed queue

 void SimpleF2(){;};
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr

0800218c <F2_QueueIni>:

 void (*F2_Queue[Q_SIZE_FAST])();

 void F2_QueueIni(void){ // initialization of Queue
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
   F2_last = 0;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <F2_QueueIni+0x18>)
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
   F2_first = 0;
 8002196:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <F2_QueueIni+0x1c>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 }
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	200002e0 	.word	0x200002e0
 80021a8:	200002e4 	.word	0x200002e4

080021ac <F2_pull>:
   F2_Queue[F2_last++] = pointerQ;
   F2_last%=Q_SIZE_FAST;
   return 0;
 }

 void (*F2_pull(void))(void){ // pull element from the queue
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
   void (*pullVar)(void);
   if (F2_last == F2_first)return SimpleF2;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <F2_pull+0x4c>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <F2_pull+0x50>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d101      	bne.n	80021c2 <F2_pull+0x16>
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <F2_pull+0x54>)
 80021c0:	e014      	b.n	80021ec <F2_pull+0x40>
   pullVar = F2_Queue[F2_first++];
 80021c2:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <F2_pull+0x50>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	490c      	ldr	r1, [pc, #48]	; (80021fc <F2_pull+0x50>)
 80021ca:	600a      	str	r2, [r1, #0]
 80021cc:	4a0d      	ldr	r2, [pc, #52]	; (8002204 <F2_pull+0x58>)
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	607b      	str	r3, [r7, #4]
   F2_first%=Q_SIZE_FAST;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <F2_pull+0x50>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	425a      	negs	r2, r3
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	f002 020f 	and.w	r2, r2, #15
 80021e2:	bf58      	it	pl
 80021e4:	4253      	negpl	r3, r2
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <F2_pull+0x50>)
 80021e8:	6013      	str	r3, [r2, #0]
   return pullVar;
 80021ea:	687b      	ldr	r3, [r7, #4]
 }
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	200002e0 	.word	0x200002e0
 80021fc:	200002e4 	.word	0x200002e4
 8002200:	08002181 	.word	0x08002181
 8002204:	200002e8 	.word	0x200002e8

08002208 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <LL_APB1_GRP1_EnableClock>:
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002234:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002236:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4313      	orrs	r3, r2
 800223e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4013      	ands	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800224c:	68fb      	ldr	r3, [r7, #12]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800225e:	1d3b      	adds	r3, r7, #4
 8002260:	222c      	movs	r2, #44	; 0x2c
 8002262:	2100      	movs	r1, #0
 8002264:	4618      	mov	r0, r3
 8002266:	f01c fbf3 	bl	801ea50 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <MX_RTC_Init+0x9c>)
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <MX_RTC_Init+0xa0>)
 800226e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <MX_RTC_Init+0x9c>)
 8002272:	221f      	movs	r2, #31
 8002274:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002276:	4b1f      	ldr	r3, [pc, #124]	; (80022f4 <MX_RTC_Init+0x9c>)
 8002278:	2200      	movs	r2, #0
 800227a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <MX_RTC_Init+0x9c>)
 800227e:	2200      	movs	r2, #0
 8002280:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <MX_RTC_Init+0x9c>)
 8002284:	2200      	movs	r2, #0
 8002286:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_RTC_Init+0x9c>)
 800228a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002290:	4b18      	ldr	r3, [pc, #96]	; (80022f4 <MX_RTC_Init+0x9c>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_RTC_Init+0x9c>)
 8002298:	f44f 7280 	mov.w	r2, #256	; 0x100
 800229c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800229e:	4815      	ldr	r0, [pc, #84]	; (80022f4 <MX_RTC_Init+0x9c>)
 80022a0:	f007 fbc2 	bl	8009a28 <HAL_RTC_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_RTC_Init+0x56>
  {
    Error_Handler();
 80022aa:	f7ff feeb 	bl	8002084 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80022ae:	4811      	ldr	r0, [pc, #68]	; (80022f4 <MX_RTC_Init+0x9c>)
 80022b0:	f007 feb8 	bl	800a024 <HAL_RTCEx_SetSSRU_IT>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80022ba:	f7ff fee3 	bl	8002084 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80022ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80022ce:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80022d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_RTC_Init+0x9c>)
 80022de:	f007 fc25 	bl	8009b2c <HAL_RTC_SetAlarm_IT>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80022e8:	f7ff fecc 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	3730      	adds	r7, #48	; 0x30
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000328 	.word	0x20000328
 80022f8:	40002800 	.word	0x40002800

080022fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b090      	sub	sp, #64	; 0x40
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	2238      	movs	r2, #56	; 0x38
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f01c fb9f 	bl	801ea50 <memset>
  if(rtcHandle->Instance==RTC)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a16      	ldr	r2, [pc, #88]	; (8002370 <HAL_RTC_MspInit+0x74>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d125      	bne.n	8002368 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800231c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002320:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002322:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002326:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	4618      	mov	r0, r3
 800232e:	f007 fa61 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002338:	f7ff fea4 	bl	8002084 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800233c:	f7ff ff64 	bl	8002208 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002344:	f7ff ff70 	bl	8002228 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2002      	movs	r0, #2
 800234e:	f002 ffa6 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8002352:	2002      	movs	r0, #2
 8002354:	f002 ffbd 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	202a      	movs	r0, #42	; 0x2a
 800235e:	f002 ff9e 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8002362:	202a      	movs	r0, #42	; 0x2a
 8002364:	f002 ffb5 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002368:	bf00      	nop
 800236a:	3740      	adds	r7, #64	; 0x40
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40002800 	.word	0x40002800

08002374 <LL_AHB2_GRP1_EnableClock>:
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800237c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002380:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002382:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4313      	orrs	r3, r2
 800238a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002390:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	bf00      	nop
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <LL_APB1_GRP1_EnableClock>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80023bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80023c8:	68fb      	ldr	r3, [r7, #12]
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <MX_SPI2_Init+0x74>)
 80023da:	4a1c      	ldr	r2, [pc, #112]	; (800244c <MX_SPI2_Init+0x78>)
 80023dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <MX_SPI2_Init+0x74>)
 80023e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_SPI2_Init+0x74>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80023ec:	4b16      	ldr	r3, [pc, #88]	; (8002448 <MX_SPI2_Init+0x74>)
 80023ee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80023f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <MX_SPI2_Init+0x74>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <MX_SPI2_Init+0x74>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <MX_SPI2_Init+0x74>)
 8002402:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002406:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002408:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <MX_SPI2_Init+0x74>)
 800240a:	2218      	movs	r2, #24
 800240c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240e:	4b0e      	ldr	r3, [pc, #56]	; (8002448 <MX_SPI2_Init+0x74>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <MX_SPI2_Init+0x74>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241a:	4b0b      	ldr	r3, [pc, #44]	; (8002448 <MX_SPI2_Init+0x74>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002420:	4b09      	ldr	r3, [pc, #36]	; (8002448 <MX_SPI2_Init+0x74>)
 8002422:	2207      	movs	r2, #7
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <MX_SPI2_Init+0x74>)
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800242c:	4b06      	ldr	r3, [pc, #24]	; (8002448 <MX_SPI2_Init+0x74>)
 800242e:	2208      	movs	r2, #8
 8002430:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002432:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_SPI2_Init+0x74>)
 8002434:	f007 fe84 	bl	800a140 <HAL_SPI_Init>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800243e:	f7ff fe21 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000360 	.word	0x20000360
 800244c:	40003800 	.word	0x40003800

08002450 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 030c 	add.w	r3, r7, #12
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a19      	ldr	r2, [pc, #100]	; (80024d4 <HAL_SPI_MspInit+0x84>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12c      	bne.n	80024cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002472:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002476:	f7ff ff95 	bl	80023a4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800247a:	2002      	movs	r0, #2
 800247c:	f7ff ff7a 	bl	8002374 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002480:	2001      	movs	r0, #1
 8002482:	f7ff ff77 	bl	8002374 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8002486:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800248a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002494:	2300      	movs	r3, #0
 8002496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002498:	2305      	movs	r3, #5
 800249a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	4619      	mov	r1, r3
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <HAL_SPI_MspInit+0x88>)
 80024a4:	f003 fdd4 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ae:	2302      	movs	r3, #2
 80024b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024ba:	2305      	movs	r3, #5
 80024bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c8:	f003 fdc2 	bl	8006050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024cc:	bf00      	nop
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40003800 	.word	0x40003800
 80024d8:	48000400 	.word	0x48000400

080024dc <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	58000400 	.word	0x58000400

080024f4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr

08002500 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8002510:	f001 fd28 	bl	8003f64 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8002514:	f7ff ffe2 	bl	80024dc <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002518:	2001      	movs	r0, #1
 800251a:	f005 ff8d 	bl	8008438 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}

08002522 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8002526:	f001 fd2b 	bl	8003f80 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800252a:	f001 f887 	bl	800363c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}

08002532 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8002536:	f001 fd15 	bl	8003f64 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800253a:	2101      	movs	r1, #1
 800253c:	2000      	movs	r0, #0
 800253e:	f005 fef7 	bl	8008330 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}

08002546 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8002546:	b580      	push	{r7, lr}
 8002548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800254a:	f001 fd19 	bl	8003f80 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800254e:	bf00      	nop
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002556:	bf00      	nop
 8002558:	46bd      	mov	sp, r7
 800255a:	bc80      	pop	{r7}
 800255c:	4770      	bx	lr

0800255e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255e:	b480      	push	{r7}
 8002560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002562:	e7fe      	b.n	8002562 <NMI_Handler+0x4>

08002564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002568:	e7fe      	b.n	8002568 <HardFault_Handler+0x4>

0800256a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256e:	e7fe      	b.n	800256e <MemManage_Handler+0x4>

08002570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002574:	e7fe      	b.n	8002574 <BusFault_Handler+0x4>

08002576 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002576:	b480      	push	{r7}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257a:	e7fe      	b.n	800257a <UsageFault_Handler+0x4>

0800257c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr

080025ac <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80025b2:	f007 fd73 	bl	800a09c <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000328 	.word	0x20000328

080025c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025c4:	4802      	ldr	r0, [pc, #8]	; (80025d0 <DMA1_Channel1_IRQHandler+0x10>)
 80025c6:	f003 f91b 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000524 	.word	0x20000524

080025d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <DMA1_Channel2_IRQHandler+0x10>)
 80025da:	f003 f911 	bl	8005800 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	20000584 	.word	0x20000584

080025e8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <I2C2_EV_IRQHandler+0x10>)
 80025ee:	f004 f9ed 	bl	80069cc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200001e4 	.word	0x200001e4

080025fc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <I2C2_ER_IRQHandler+0x10>)
 8002602:	f004 f9fd 	bl	8006a00 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200001e4 	.word	0x200001e4

08002610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <USART1_IRQHandler+0x10>)
 8002616:	f008 fc5f 	bl	800aed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200003fc 	.word	0x200003fc

08002624 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <USART2_IRQHandler+0x10>)
 800262a:	f008 fc55 	bl	800aed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000490 	.word	0x20000490

08002638 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 Global Interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <LPTIM1_IRQHandler+0x10>)
 800263e:	f005 fbe3 	bl	8007e08 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000238 	.word	0x20000238

0800264c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <RTC_Alarm_IRQHandler+0x10>)
 8002652:	f007 fbd3 	bl	8009dfc <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000328 	.word	0x20000328

08002660 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <SUBGHZ_Radio_IRQHandler+0x10>)
 8002666:	f008 f95b 	bl	800a920 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200003c4 	.word	0x200003c4

08002674 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun Interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 0 */

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  // Handle DMA1_Channel2
  HAL_DMAEx_MUX_IRQHandler(&hdma_usart1_rx);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <DMAMUX1_OVR_IRQHandler+0x10>)
 800267a:	f003 fa7d 	bl	8005b78 <HAL_DMAEx_MUX_IRQHandler>
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20000584 	.word	0x20000584

08002688 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8002690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002694:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4013      	ands	r3, r2
 80026aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ac:	68fb      	ldr	r3, [r7, #12]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <MX_SUBGHZ_Init+0x20>)
 80026be:	2208      	movs	r2, #8
 80026c0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80026c2:	4805      	ldr	r0, [pc, #20]	; (80026d8 <MX_SUBGHZ_Init+0x20>)
 80026c4:	f007 feaa 	bl	800a41c <HAL_SUBGHZ_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80026ce:	f7ff fcd9 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	200003c4 	.word	0x200003c4

080026dc <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7ff ffcf 	bl	8002688 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2100      	movs	r1, #0
 80026ee:	2032      	movs	r0, #50	; 0x32
 80026f0:	f002 fdd5 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80026f4:	2032      	movs	r0, #50	; 0x32
 80026f6:	f002 fdec 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800270a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002714:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4313      	orrs	r3, r2
 800271c:	608b      	str	r3, [r1, #8]
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800272c:	4b02      	ldr	r3, [pc, #8]	; (8002738 <LL_FLASH_GetUDN+0x10>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr
 8002738:	1fff7580 	.word	0x1fff7580

0800273c <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8002740:	4b03      	ldr	r3, [pc, #12]	; (8002750 <LL_FLASH_GetDeviceID+0x14>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	b2db      	uxtb	r3, r3
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	1fff7584 	.word	0x1fff7584

08002754 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <LL_FLASH_GetSTCompanyID+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0a1b      	lsrs	r3, r3, #8
}
 800275e:	4618      	mov	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	1fff7584 	.word	0x1fff7584

0800276c <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff ffc6 	bl	8002702 <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8002776:	f01b fc35 	bl	801dfe4 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800277a:	4b10      	ldr	r3, [pc, #64]	; (80027bc <SystemApp_Init+0x50>)
 800277c:	2201      	movs	r2, #1
 800277e:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8002780:	f000 f9ba 	bl	8002af8 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8002784:	f01b febe 	bl	801e504 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002788:	480d      	ldr	r0, [pc, #52]	; (80027c0 <SystemApp_Init+0x54>)
 800278a:	f01b ff69 	bl	801e660 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <SystemApp_Init+0x58>)
 8002790:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002794:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002796:	2002      	movs	r0, #2
 8002798:	f01b ff70 	bl	801e67c <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 800279c:	f7fe fe64 	bl	8001468 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 80027a0:	f000 f9e2 	bl	8002b68 <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 80027a4:	f01a fdea 	bl	801d37c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80027a8:	2101      	movs	r1, #1
 80027aa:	2001      	movs	r0, #1
 80027ac:	f01a fe26 	bl	801d3fc <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80027b0:	2101      	movs	r1, #1
 80027b2:	2001      	movs	r0, #1
 80027b4:	f01a fdf2 	bl	801d39c <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200003d0 	.word	0x200003d0
 80027c0:	080029f1 	.word	0x080029f1
 80027c4:	58004000 	.word	0x58004000

080027c8 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 80027cc:	f01a fe46 	bl	801d45c <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	71fb      	strb	r3, [r7, #7]
  static uint16_t batteryLevelmVA[AVERAGEL];
  static uint16_t count = 0;

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80027de:	f7fe fe51 	bl	8001484 <SYS_GetBatteryLevel>
 80027e2:	4603      	mov	r3, r0
 80027e4:	81fb      	strh	r3, [r7, #14]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 80027e6:	89fb      	ldrh	r3, [r7, #14]
 80027e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d902      	bls.n	80027f6 <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 80027f0:	23fe      	movs	r3, #254	; 0xfe
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	e014      	b.n	8002820 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 80027f6:	89fb      	ldrh	r3, [r7, #14]
 80027f8:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 80027fc:	d202      	bcs.n	8002804 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	71fb      	strb	r3, [r7, #7]
 8002802:	e00d      	b.n	8002820 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002804:	89fb      	ldrh	r3, [r7, #14]
 8002806:	f5a3 63e1 	sub.w	r3, r3, #1800	; 0x708
 800280a:	461a      	mov	r2, r3
 800280c:	4613      	mov	r3, r2
 800280e:	01db      	lsls	r3, r3, #7
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	461a      	mov	r2, r3
 8002816:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <GetBatteryLevel+0xac>)
 8002818:	fba3 2302 	umull	r2, r3, r3, r2
 800281c:	09db      	lsrs	r3, r3, #7
 800281e:	71fb      	strb	r3, [r7, #7]
  }

  /* USER CODE BEGIN GetBatteryLevel_2 */
  batteryLevelmVA[count++] = (uint16_t) SYS_GetBatteryLevel();
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <GetBatteryLevel+0xb0>)
 8002822:	881b      	ldrh	r3, [r3, #0]
 8002824:	1c5a      	adds	r2, r3, #1
 8002826:	b291      	uxth	r1, r2
 8002828:	4a16      	ldr	r2, [pc, #88]	; (8002884 <GetBatteryLevel+0xb0>)
 800282a:	8011      	strh	r1, [r2, #0]
 800282c:	461c      	mov	r4, r3
 800282e:	f7fe fe29 	bl	8001484 <SYS_GetBatteryLevel>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <GetBatteryLevel+0xb4>)
 8002838:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
  count %= AVERAGEL;
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <GetBatteryLevel+0xb0>)
 800283e:	881b      	ldrh	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	b29a      	uxth	r2, r3
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <GetBatteryLevel+0xb0>)
 8002848:	801a      	strh	r2, [r3, #0]

  batteryLevelmV = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	81fb      	strh	r3, [r7, #14]
  for(int i=0; i< AVERAGEL; i++)
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	e009      	b.n	8002868 <GetBatteryLevel+0x94>
  batteryLevelmV += batteryLevelmVA[i];
 8002854:	4a0c      	ldr	r2, [pc, #48]	; (8002888 <GetBatteryLevel+0xb4>)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800285c:	89fb      	ldrh	r3, [r7, #14]
 800285e:	4413      	add	r3, r2
 8002860:	81fb      	strh	r3, [r7, #14]
  for(int i=0; i< AVERAGEL; i++)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3301      	adds	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b0f      	cmp	r3, #15
 800286c:	ddf2      	ble.n	8002854 <GetBatteryLevel+0x80>

  //batteryLevelmV /= AVERAGEL;



  batteryLevel = batteryLevelmV >> 8; //(((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	0a1b      	lsrs	r3, r3, #8
 8002872:	b29b      	uxth	r3, r3
 8002874:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8002876:	79fb      	ldrb	r3, [r7, #7]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	bd90      	pop	{r4, r7, pc}
 8002880:	1b4e81b5 	.word	0x1b4e81b5
 8002884:	200003d2 	.word	0x200003d2
 8002888:	200003d4 	.word	0x200003d4

0800288c <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8002892:	2300      	movs	r3, #0
 8002894:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8002896:	1d3b      	adds	r3, r7, #4
 8002898:	4618      	mov	r0, r3
 800289a:	f000 f93b 	bl	8002b14 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7fe fb4d 	bl	8000f40 <__aeabi_f2iz>
 80028a6:	4603      	mov	r3, r0
 80028a8:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 80028aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3720      	adds	r7, #32
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 80028b6:	b590      	push	{r4, r7, lr}
 80028b8:	b087      	sub	sp, #28
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 80028c2:	f7ff ff31 	bl	8002728 <LL_FLASH_GetUDN>
 80028c6:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ce:	d138      	bne.n	8002942 <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80028d0:	f001 fb6e 	bl	8003fb0 <HAL_GetUIDw0>
 80028d4:	4604      	mov	r4, r0
 80028d6:	f001 fb7f 	bl	8003fd8 <HAL_GetUIDw2>
 80028da:	4603      	mov	r3, r0
 80028dc:	4423      	add	r3, r4
 80028de:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 80028e0:	f001 fb70 	bl	8003fc4 <HAL_GetUIDw1>
 80028e4:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	0e1a      	lsrs	r2, r3, #24
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	3307      	adds	r3, #7
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	0c1a      	lsrs	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	3306      	adds	r3, #6
 80028fa:	b2d2      	uxtb	r2, r2
 80028fc:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	0a1a      	lsrs	r2, r3, #8
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3305      	adds	r3, #5
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3304      	adds	r3, #4
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	b2d2      	uxtb	r2, r2
 8002912:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	0e1a      	lsrs	r2, r3, #24
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3303      	adds	r3, #3
 800291c:	b2d2      	uxtb	r2, r2
 800291e:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	0c1a      	lsrs	r2, r3, #16
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3302      	adds	r3, #2
 8002928:	b2d2      	uxtb	r2, r2
 800292a:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0a1a      	lsrs	r2, r3, #8
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3301      	adds	r3, #1
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8002940:	e031      	b.n	80029a6 <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3307      	adds	r3, #7
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	b2d2      	uxtb	r2, r2
 800294a:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	0a1a      	lsrs	r2, r3, #8
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3306      	adds	r3, #6
 8002954:	b2d2      	uxtb	r2, r2
 8002956:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	0c1a      	lsrs	r2, r3, #16
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3305      	adds	r3, #5
 8002960:	b2d2      	uxtb	r2, r2
 8002962:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	0e1a      	lsrs	r2, r3, #24
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3304      	adds	r3, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8002970:	f7ff fee4 	bl	800273c <LL_FLASH_GetDeviceID>
 8002974:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3303      	adds	r3, #3
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8002980:	f7ff fee8 	bl	8002754 <LL_FLASH_GetSTCompanyID>
 8002984:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3302      	adds	r3, #2
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	b2d2      	uxtb	r2, r2
 800298e:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	0a1a      	lsrs	r2, r3, #8
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3301      	adds	r3, #1
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	0c1b      	lsrs	r3, r3, #16
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	701a      	strb	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd90      	pop	{r4, r7, pc}

080029ae <GetDevAddr>:

void GetDevAddr(uint32_t *devAddr)
{
 80029ae:	b590      	push	{r4, r7, lr}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  *devAddr = LL_FLASH_GetUDN();
 80029b6:	f7ff feb7 	bl	8002728 <LL_FLASH_GetUDN>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]
  if (*devAddr == 0xFFFFFFFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d10d      	bne.n	80029e6 <GetDevAddr+0x38>
  {
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80029ca:	f001 faf1 	bl	8003fb0 <HAL_GetUIDw0>
 80029ce:	4604      	mov	r4, r0
 80029d0:	f001 faf8 	bl	8003fc4 <HAL_GetUIDw1>
 80029d4:	4603      	mov	r3, r0
 80029d6:	405c      	eors	r4, r3
 80029d8:	f001 fafe 	bl	8003fd8 <HAL_GetUIDw2>
 80029dc:	4603      	mov	r3, r0
 80029de:	ea84 0203 	eor.w	r2, r4, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd90      	pop	{r4, r7, pc}
	...

080029f0 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 80029fa:	f107 0308 	add.w	r3, r7, #8
 80029fe:	4618      	mov	r0, r3
 8002a00:	f01a fe3c 	bl	801d67c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002a0a:	9200      	str	r2, [sp, #0]
 8002a0c:	4a07      	ldr	r2, [pc, #28]	; (8002a2c <TimestampNow+0x3c>)
 8002a0e:	2110      	movs	r1, #16
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f81d 	bl	8002a50 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fd fbae 	bl	8000178 <strlen>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8002a24:	bf00      	nop
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	0801ec90 	.word	0x0801ec90

08002a30 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002a34:	2101      	movs	r1, #1
 8002a36:	2002      	movs	r0, #2
 8002a38:	f01a fcb0 	bl	801d39c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002a44:	2100      	movs	r1, #0
 8002a46:	2002      	movs	r0, #2
 8002a48:	f01a fca8 	bl	801d39c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8002a4c:	bf00      	nop
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002a50:	b40c      	push	{r2, r3}
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b084      	sub	sp, #16
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
 8002a5a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f01a ffd9 	bl	801da20 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002a6e:	bf00      	nop
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a78:	b002      	add	sp, #8
 8002a7a:	4770      	bx	lr

08002a7c <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b082      	sub	sp, #8
 8002a94:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_GetTick+0x24>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d002      	beq.n	8002aa8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8002aa2:	f000 f92d 	bl	8002d00 <TIMER_IF_GetTimerValue>
 8002aa6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8002aa8:	687b      	ldr	r3, [r7, #4]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200003d0 	.word	0x200003d0

08002ab8 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f9a3 	bl	8002e0e <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ac8:	bf00      	nop
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002ad8:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002ada:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002ade:	4905      	ldr	r1, [pc, #20]	; (8002af4 <LL_EXTI_EnableIT_32_63+0x24>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	58000800 	.word	0x58000800

08002af8 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8002afc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b00:	f7ff ffe6 	bl	8002ad0 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002b04:	f001 fa72 	bl	8003fec <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8002b08:	f001 fa76 	bl	8003ff8 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8002b0c:	f001 fa7a 	bl	8004004 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8002b1c:	4b0d      	ldr	r3, [pc, #52]	; (8002b54 <EnvSensors_Read+0x40>)
 8002b1e:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8002b20:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <EnvSensors_Read+0x44>)
 8002b22:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8002b24:	4b0d      	ldr	r3, [pc, #52]	; (8002b5c <EnvSensors_Read+0x48>)
 8002b26:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	697a      	ldr	r2, [r7, #20]
 8002b2c:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	4a08      	ldr	r2, [pc, #32]	; (8002b60 <EnvSensors_Read+0x4c>)
 8002b3e:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <EnvSensors_Read+0x50>)
 8002b44:	611a      	str	r2, [r3, #16]

  return 0;
 8002b46:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	42480000 	.word	0x42480000
 8002b58:	41900000 	.word	0x41900000
 8002b5c:	447a0000 	.word	0x447a0000
 8002b60:	003e090d 	.word	0x003e090d
 8002b64:	000503ab 	.word	0x000503ab

08002b68 <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
  int32_t ret = 0;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8002b72:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002b82:	bf00      	nop
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bc80      	pop	{r7}
 8002b88:	4770      	bx	lr

08002b8a <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <TIMER_IF_Init+0x5c>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <TIMER_IF_Init+0x60>)
 8002bba:	f04f 32ff 	mov.w	r2, #4294967295
 8002bbe:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8002bc0:	f7ff fb4a 	bl	8002258 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8002bc4:	f000 f856 	bl	8002c74 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bcc:	480c      	ldr	r0, [pc, #48]	; (8002c00 <TIMER_IF_Init+0x60>)
 8002bce:	f007 f8b9 	bl	8009d44 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002bd2:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <TIMER_IF_Init+0x60>)
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002bda:	4809      	ldr	r0, [pc, #36]	; (8002c00 <TIMER_IF_Init+0x60>)
 8002bdc:	f007 f9f0 	bl	8009fc0 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f000 f9d3 	bl	8002f8c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8002be6:	f000 f85f 	bl	8002ca8 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8002bea:	4b04      	ldr	r3, [pc, #16]	; (8002bfc <TIMER_IF_Init+0x5c>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	200003f4 	.word	0x200003f4
 8002c00:	20000328 	.word	0x20000328

08002c04 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08e      	sub	sp, #56	; 0x38
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	222c      	movs	r2, #44	; 0x2c
 8002c18:	2100      	movs	r1, #0
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f01b ff18 	bl	801ea50 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002c20:	f000 f828 	bl	8002c74 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002c24:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <TIMER_IF_StartTimer+0x68>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c3c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c40:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c48:	f107 0308 	add.w	r3, r7, #8
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4807      	ldr	r0, [pc, #28]	; (8002c70 <TIMER_IF_StartTimer+0x6c>)
 8002c52:	f006 ff6b 	bl	8009b2c <HAL_RTC_SetAlarm_IT>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8002c5c:	f7ff fa12 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002c60:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3738      	adds	r7, #56	; 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200003f8 	.word	0x200003f8
 8002c70:	20000328 	.word	0x20000328

08002c74 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002c7e:	4b08      	ldr	r3, [pc, #32]	; (8002ca0 <TIMER_IF_StopTimer+0x2c>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002c84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c88:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <TIMER_IF_StopTimer+0x30>)
 8002c8a:	f007 f85b 	bl	8009d44 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <TIMER_IF_StopTimer+0x30>)
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002c96:	79fb      	ldrb	r3, [r7, #7]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40002800 	.word	0x40002800
 8002ca4:	20000328 	.word	0x20000328

08002ca8 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8002cac:	f000 f98e 	bl	8002fcc <GetTimerTicks>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4a03      	ldr	r2, [pc, #12]	; (8002cc0 <TIMER_IF_SetTimerContext+0x18>)
 8002cb4:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002cb6:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <TIMER_IF_SetTimerContext+0x18>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200003f8 	.word	0x200003f8

08002cc4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <TIMER_IF_GetTimerContext+0x10>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	200003f8 	.word	0x200003f8

08002cd8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002ce2:	f000 f973 	bl	8002fcc <GetTimerTicks>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <TIMER_IF_GetTimerElapsedTime+0x24>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8002cf0:	687b      	ldr	r3, [r7, #4]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3708      	adds	r7, #8
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200003f8 	.word	0x200003f8

08002d00 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <TIMER_IF_GetTimerValue+0x24>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002d12:	f000 f95b 	bl	8002fcc <GetTimerTicks>
 8002d16:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8002d18:	687b      	ldr	r3, [r7, #4]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200003f4 	.word	0x200003f4

08002d28 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002d32:	2303      	movs	r3, #3
 8002d34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002d36:	687b      	ldr	r3, [r7, #4]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	370c      	adds	r7, #12
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bc80      	pop	{r7}
 8002d40:	4770      	bx	lr

08002d42 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002d42:	b5b0      	push	{r4, r5, r7, lr}
 8002d44:	b084      	sub	sp, #16
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	2000      	movs	r0, #0
 8002d52:	460a      	mov	r2, r1
 8002d54:	4603      	mov	r3, r0
 8002d56:	0d95      	lsrs	r5, r2, #22
 8002d58:	0294      	lsls	r4, r2, #10
 8002d5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fe f911 	bl	8000f8c <__aeabi_uldivmod>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4613      	mov	r3, r2
 8002d70:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bdb0      	pop	{r4, r5, r7, pc}

08002d7c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002d7c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002d80:	b085      	sub	sp, #20
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002d86:	2100      	movs	r1, #0
 8002d88:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	2000      	movs	r0, #0
 8002d8e:	460c      	mov	r4, r1
 8002d90:	4605      	mov	r5, r0
 8002d92:	4620      	mov	r0, r4
 8002d94:	4629      	mov	r1, r5
 8002d96:	f04f 0a00 	mov.w	sl, #0
 8002d9a:	f04f 0b00 	mov.w	fp, #0
 8002d9e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002da2:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002da6:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002daa:	4650      	mov	r0, sl
 8002dac:	4659      	mov	r1, fp
 8002dae:	1b02      	subs	r2, r0, r4
 8002db0:	eb61 0305 	sbc.w	r3, r1, r5
 8002db4:	f04f 0000 	mov.w	r0, #0
 8002db8:	f04f 0100 	mov.w	r1, #0
 8002dbc:	0099      	lsls	r1, r3, #2
 8002dbe:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002dc2:	0090      	lsls	r0, r2, #2
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	eb12 0804 	adds.w	r8, r2, r4
 8002dcc:	eb43 0905 	adc.w	r9, r3, r5
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ddc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002de0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002de4:	4690      	mov	r8, r2
 8002de6:	4699      	mov	r9, r3
 8002de8:	4640      	mov	r0, r8
 8002dea:	4649      	mov	r1, r9
 8002dec:	f04f 0200 	mov.w	r2, #0
 8002df0:	f04f 0300 	mov.w	r3, #0
 8002df4:	0a82      	lsrs	r2, r0, #10
 8002df6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002dfa:	0a8b      	lsrs	r3, r1, #10
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8002e00:	68fb      	ldr	r3, [r7, #12]
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3714      	adds	r7, #20
 8002e06:	46bd      	mov	sp, r7
 8002e08:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002e0c:	4770      	bx	lr

08002e0e <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7ff ff93 	bl	8002d42 <TIMER_IF_Convert_ms2Tick>
 8002e1c:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002e1e:	f000 f8d5 	bl	8002fcc <GetTimerTicks>
 8002e22:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e24:	e000      	b.n	8002e28 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002e26:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002e28:	f000 f8d0 	bl	8002fcc <GetTimerTicks>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d8f6      	bhi.n	8002e26 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002e38:	bf00      	nop
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002e4a:	f01b fa19 	bl	801e280 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002e5e:	f000 f8a5 	bl	8002fac <TIMER_IF_BkUp_Read_MSBticks>
 8002e62:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 f88f 	bl	8002f8c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002e76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e7a:	b08c      	sub	sp, #48	; 0x30
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002e84:	f000 f8a2 	bl	8002fcc <GetTimerTicks>
 8002e88:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002e8a:	f000 f88f 	bl	8002fac <TIMER_IF_BkUp_Read_MSBticks>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	2200      	movs	r2, #0
 8002e94:	60bb      	str	r3, [r7, #8]
 8002e96:	60fa      	str	r2, [r7, #12]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	000b      	movs	r3, r1
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	4605      	mov	r5, r0
 8002eae:	eb12 0804 	adds.w	r8, r2, r4
 8002eb2:	eb43 0905 	adc.w	r9, r3, r5
 8002eb6:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002eba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	f04f 0300 	mov.w	r3, #0
 8002ec6:	0a82      	lsrs	r2, r0, #10
 8002ec8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8002ecc:	0a8b      	lsrs	r3, r1, #10
 8002ece:	4613      	mov	r3, r2
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	603b      	str	r3, [r7, #0]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8002ee0:	f04f 0b00 	mov.w	fp, #0
 8002ee4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff46 	bl	8002d7c <TIMER_IF_Convert_Tick2ms>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8002ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f04 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4803      	ldr	r0, [pc, #12]	; (8002f20 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002f12:	f007 f8e7 	bl	800a0e4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000328 	.word	0x20000328

08002f24 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4803      	ldr	r0, [pc, #12]	; (8002f40 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002f32:	f007 f8d7 	bl	800a0e4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000328 	.word	0x20000328

08002f44 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4804      	ldr	r0, [pc, #16]	; (8002f64 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002f52:	f007 f8df 	bl	800a114 <HAL_RTCEx_BKUPRead>
 8002f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002f58:	687b      	ldr	r3, [r7, #4]
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	20000328 	.word	0x20000328

08002f68 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002f72:	2101      	movs	r1, #1
 8002f74:	4804      	ldr	r0, [pc, #16]	; (8002f88 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002f76:	f007 f8cd 	bl	800a114 <HAL_RTCEx_BKUPRead>
 8002f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002f7c:	687b      	ldr	r3, [r7, #4]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	20000328 	.word	0x20000328

08002f8c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	2102      	movs	r1, #2
 8002f98:	4803      	ldr	r0, [pc, #12]	; (8002fa8 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8002f9a:	f007 f8a3 	bl	800a0e4 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002f9e:	bf00      	nop
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	20000328 	.word	0x20000328

08002fac <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002fb2:	2102      	movs	r1, #2
 8002fb4:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002fb6:	f007 f8ad 	bl	800a114 <HAL_RTCEx_BKUPRead>
 8002fba:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8002fbc:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000328 	.word	0x20000328

08002fcc <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002fd2:	480b      	ldr	r0, [pc, #44]	; (8003000 <GetTimerTicks+0x34>)
 8002fd4:	f7ff fdd9 	bl	8002b8a <LL_RTC_TIME_GetSubSecond>
 8002fd8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002fda:	e003      	b.n	8002fe4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8002fdc:	4808      	ldr	r0, [pc, #32]	; (8003000 <GetTimerTicks+0x34>)
 8002fde:	f7ff fdd4 	bl	8002b8a <LL_RTC_TIME_GetSubSecond>
 8002fe2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002fe4:	4806      	ldr	r0, [pc, #24]	; (8003000 <GetTimerTicks+0x34>)
 8002fe6:	f7ff fdd0 	bl	8002b8a <LL_RTC_TIME_GetSubSecond>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d1f4      	bne.n	8002fdc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40002800 	.word	0x40002800

08003004 <LL_AHB2_GRP1_EnableClock>:
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800300c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003012:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4313      	orrs	r3, r2
 800301a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800301c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003020:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4013      	ands	r3, r2
 8003026:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003028:	68fb      	ldr	r3, [r7, #12]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <LL_APB1_GRP1_EnableClock>:
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800303c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003040:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4313      	orrs	r3, r2
 800304a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800304c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003050:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	bf00      	nop
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <LL_APB1_GRP1_DisableClock>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	43db      	mvns	r3, r3
 8003076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307a:	4013      	ands	r3, r2
 800307c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <LL_APB2_GRP1_EnableClock>:
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4313      	orrs	r3, r2
 800309e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80030a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4013      	ands	r3, r2
 80030aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80030ac:	68fb      	ldr	r3, [r7, #12]
}
 80030ae:	bf00      	nop
 80030b0:	3714      	adds	r7, #20
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bc80      	pop	{r7}
 80030b6:	4770      	bx	lr

080030b8 <LL_APB2_GRP1_DisableClock>:
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80030c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	43db      	mvns	r3, r3
 80030ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ce:	4013      	ands	r3, r2
 80030d0:	660b      	str	r3, [r1, #96]	; 0x60
}
 80030d2:	bf00      	nop
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr

080030dc <LL_SYSCFG_EnableFastModePlus>:
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 80030e4:	4b05      	ldr	r3, [pc, #20]	; (80030fc <LL_SYSCFG_EnableFastModePlus+0x20>)
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	4904      	ldr	r1, [pc, #16]	; (80030fc <LL_SYSCFG_EnableFastModePlus+0x20>)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000

08003100 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003104:	4b26      	ldr	r3, [pc, #152]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003106:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <MX_USART1_UART_Init+0xa4>)
 8003108:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800310a:	4b25      	ldr	r3, [pc, #148]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800310c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003110:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003114:	2200      	movs	r2, #0
 8003116:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800311a:	2200      	movs	r2, #0
 800311c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800311e:	4b20      	ldr	r3, [pc, #128]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003120:	2200      	movs	r2, #0
 8003122:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003126:	220c      	movs	r2, #12
 8003128:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800312a:	4b1d      	ldr	r3, [pc, #116]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800312c:	2200      	movs	r2, #0
 800312e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003130:	4b1b      	ldr	r3, [pc, #108]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003132:	2200      	movs	r2, #0
 8003134:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003136:	4b1a      	ldr	r3, [pc, #104]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003138:	2200      	movs	r2, #0
 800313a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800313c:	4b18      	ldr	r3, [pc, #96]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800313e:	2200      	movs	r2, #0
 8003140:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_AUTOBAUDRATE_INIT;
 8003142:	4b17      	ldr	r3, [pc, #92]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003144:	2240      	movs	r2, #64	; 0x40
 8003146:	629a      	str	r2, [r3, #40]	; 0x28
  huart1.AdvancedInit.AutoBaudRateEnable = UART_ADVFEATURE_AUTOBAUDRATE_ENABLE;
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800314a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800314e:	645a      	str	r2, [r3, #68]	; 0x44
  huart1.AdvancedInit.AutoBaudRateMode = UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT;
 8003150:	4b13      	ldr	r3, [pc, #76]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003152:	2200      	movs	r2, #0
 8003154:	649a      	str	r2, [r3, #72]	; 0x48
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003156:	4812      	ldr	r0, [pc, #72]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 8003158:	f007 fda1 	bl	800ac9e <HAL_UART_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_USART1_UART_Init+0x66>
  {
    Error_Handler();
 8003162:	f7fe ff8f 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003166:	2100      	movs	r1, #0
 8003168:	480d      	ldr	r0, [pc, #52]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800316a:	f009 fefc 	bl	800cf66 <HAL_UARTEx_SetTxFifoThreshold>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d001      	beq.n	8003178 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 8003174:	f7fe ff86 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003178:	2100      	movs	r1, #0
 800317a:	4809      	ldr	r0, [pc, #36]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800317c:	f009 ff31 	bl	800cfe2 <HAL_UARTEx_SetRxFifoThreshold>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <MX_USART1_UART_Init+0x8a>
  {
    Error_Handler();
 8003186:	f7fe ff7d 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 800318a:	4805      	ldr	r0, [pc, #20]	; (80031a0 <MX_USART1_UART_Init+0xa0>)
 800318c:	f009 fe78 	bl	800ce80 <HAL_UARTEx_EnableFifoMode>
 8003190:	4603      	mov	r3, r0
 8003192:	2b00      	cmp	r3, #0
 8003194:	d001      	beq.n	800319a <MX_USART1_UART_Init+0x9a>
  {
    Error_Handler();
 8003196:	f7fe ff75 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800319a:	bf00      	nop
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	200003fc 	.word	0x200003fc
 80031a4:	40013800 	.word	0x40013800

080031a8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ac:	4b23      	ldr	r3, [pc, #140]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031ae:	4a24      	ldr	r2, [pc, #144]	; (8003240 <MX_USART2_UART_Init+0x98>)
 80031b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031b2:	4b22      	ldr	r3, [pc, #136]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031ba:	4b20      	ldr	r3, [pc, #128]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031bc:	2200      	movs	r2, #0
 80031be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c0:	4b1e      	ldr	r3, [pc, #120]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031c6:	4b1d      	ldr	r3, [pc, #116]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031ce:	220c      	movs	r2, #12
 80031d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d2:	4b1a      	ldr	r3, [pc, #104]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80031de:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031e0:	4b16      	ldr	r3, [pc, #88]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031ec:	4b13      	ldr	r3, [pc, #76]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031f2:	4812      	ldr	r0, [pc, #72]	; (800323c <MX_USART2_UART_Init+0x94>)
 80031f4:	f007 fd53 	bl	800ac9e <HAL_UART_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80031fe:	f7fe ff41 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003202:	2100      	movs	r1, #0
 8003204:	480d      	ldr	r0, [pc, #52]	; (800323c <MX_USART2_UART_Init+0x94>)
 8003206:	f009 feae 	bl	800cf66 <HAL_UARTEx_SetTxFifoThreshold>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8003210:	f7fe ff38 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003214:	2100      	movs	r1, #0
 8003216:	4809      	ldr	r0, [pc, #36]	; (800323c <MX_USART2_UART_Init+0x94>)
 8003218:	f009 fee3 	bl	800cfe2 <HAL_UARTEx_SetRxFifoThreshold>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8003222:	f7fe ff2f 	bl	8002084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_USART2_UART_Init+0x94>)
 8003228:	f009 fe65 	bl	800cef6 <HAL_UARTEx_DisableFifoMode>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8003232:	f7fe ff27 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003236:	bf00      	nop
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000490 	.word	0x20000490
 8003240:	40004400 	.word	0x40004400

08003244 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b09a      	sub	sp, #104	; 0x68
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800324c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003250:	2200      	movs	r2, #0
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	605a      	str	r2, [r3, #4]
 8003256:	609a      	str	r2, [r3, #8]
 8003258:	60da      	str	r2, [r3, #12]
 800325a:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig= {0};
 800325c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	60da      	str	r2, [r3, #12]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800326a:	f107 030c 	add.w	r3, r7, #12
 800326e:	2238      	movs	r2, #56	; 0x38
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f01b fbec 	bl	801ea50 <memset>
  if(uartHandle->Instance==USART1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a6f      	ldr	r2, [pc, #444]	; (800343c <HAL_UART_MspInit+0x1f8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f040 80a4 	bne.w	80033cc <HAL_UART_MspInit+0x188>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003284:	2301      	movs	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003288:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800328c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	4618      	mov	r0, r3
 8003294:	f006 faae 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_MspInit+0x5e>
    {
      Error_Handler();
 800329e:	f7fe fef1 	bl	8002084 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80032a6:	f7ff feef 	bl	8003088 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032aa:	2002      	movs	r0, #2
 80032ac:	f7ff feaa 	bl	8003004 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 80032b0:	23c0      	movs	r3, #192	; 0xc0
 80032b2:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b4:	2302      	movs	r3, #2
 80032b6:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032b8:	2301      	movs	r3, #1
 80032ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80032bc:	2301      	movs	r3, #1
 80032be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80032c0:	2307      	movs	r3, #7
 80032c2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032c8:	4619      	mov	r1, r3
 80032ca:	485d      	ldr	r0, [pc, #372]	; (8003440 <HAL_UART_MspInit+0x1fc>)
 80032cc:	f002 fec0 	bl	8006050 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB7);
 80032d0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80032d4:	f7ff ff02 	bl	80030dc <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB6);
 80032d8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80032dc:	f7ff fefe 	bl	80030dc <LL_SYSCFG_EnableFastModePlus>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80032e0:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_UART_MspInit+0x200>)
 80032e2:	4a59      	ldr	r2, [pc, #356]	; (8003448 <HAL_UART_MspInit+0x204>)
 80032e4:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80032e6:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_UART_MspInit+0x200>)
 80032e8:	2212      	movs	r2, #18
 80032ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ec:	4b55      	ldr	r3, [pc, #340]	; (8003444 <HAL_UART_MspInit+0x200>)
 80032ee:	2210      	movs	r2, #16
 80032f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f2:	4b54      	ldr	r3, [pc, #336]	; (8003444 <HAL_UART_MspInit+0x200>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032f8:	4b52      	ldr	r3, [pc, #328]	; (8003444 <HAL_UART_MspInit+0x200>)
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032fe:	4b51      	ldr	r3, [pc, #324]	; (8003444 <HAL_UART_MspInit+0x200>)
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003304:	4b4f      	ldr	r3, [pc, #316]	; (8003444 <HAL_UART_MspInit+0x200>)
 8003306:	2200      	movs	r2, #0
 8003308:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800330a:	4b4e      	ldr	r3, [pc, #312]	; (8003444 <HAL_UART_MspInit+0x200>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003310:	4b4c      	ldr	r3, [pc, #304]	; (8003444 <HAL_UART_MspInit+0x200>)
 8003312:	2200      	movs	r2, #0
 8003314:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003316:	484b      	ldr	r0, [pc, #300]	; (8003444 <HAL_UART_MspInit+0x200>)
 8003318:	f001 fff8 	bl	800530c <HAL_DMA_Init>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <HAL_UART_MspInit+0xe2>
    {
      Error_Handler();
 8003322:	f7fe feaf 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a46      	ldr	r2, [pc, #280]	; (8003444 <HAL_UART_MspInit+0x200>)
 800332a:	67da      	str	r2, [r3, #124]	; 0x7c
 800332c:	4a45      	ldr	r2, [pc, #276]	; (8003444 <HAL_UART_MspInit+0x200>)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel2;
 8003332:	4b46      	ldr	r3, [pc, #280]	; (800344c <HAL_UART_MspInit+0x208>)
 8003334:	4a46      	ldr	r2, [pc, #280]	; (8003450 <HAL_UART_MspInit+0x20c>)
 8003336:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8003338:	4b44      	ldr	r3, [pc, #272]	; (800344c <HAL_UART_MspInit+0x208>)
 800333a:	2211      	movs	r2, #17
 800333c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800333e:	4b43      	ldr	r3, [pc, #268]	; (800344c <HAL_UART_MspInit+0x208>)
 8003340:	2200      	movs	r2, #0
 8003342:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003344:	4b41      	ldr	r3, [pc, #260]	; (800344c <HAL_UART_MspInit+0x208>)
 8003346:	2200      	movs	r2, #0
 8003348:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800334a:	4b40      	ldr	r3, [pc, #256]	; (800344c <HAL_UART_MspInit+0x208>)
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003350:	4b3e      	ldr	r3, [pc, #248]	; (800344c <HAL_UART_MspInit+0x208>)
 8003352:	2200      	movs	r2, #0
 8003354:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003356:	4b3d      	ldr	r3, [pc, #244]	; (800344c <HAL_UART_MspInit+0x208>)
 8003358:	2200      	movs	r2, #0
 800335a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_UART_MspInit+0x208>)
 800335e:	2200      	movs	r2, #0
 8003360:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003362:	4b3a      	ldr	r3, [pc, #232]	; (800344c <HAL_UART_MspInit+0x208>)
 8003364:	2200      	movs	r2, #0
 8003366:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003368:	4838      	ldr	r0, [pc, #224]	; (800344c <HAL_UART_MspInit+0x208>)
 800336a:	f001 ffcf 	bl	800530c <HAL_DMA_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_UART_MspInit+0x134>
    {
      Error_Handler();
 8003374:	f7fe fe86 	bl	8002084 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_EXTI0;
 8003378:	2300      	movs	r3, #0
 800337a:	647b      	str	r3, [r7, #68]	; 0x44
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800337c:	2300      	movs	r3, #0
 800337e:	64bb      	str	r3, [r7, #72]	; 0x48
    pSyncConfig.SyncEnable = DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    pSyncConfig.EventEnable = ENABLE;
 8003386:	2301      	movs	r3, #1
 8003388:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
    pSyncConfig.RequestNumber = 1;
 800338c:	2301      	movs	r3, #1
 800338e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_DMAEx_ConfigMuxSync(&hdma_usart1_rx, &pSyncConfig) != HAL_OK)
 8003390:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003394:	4619      	mov	r1, r3
 8003396:	482d      	ldr	r0, [pc, #180]	; (800344c <HAL_UART_MspInit+0x208>)
 8003398:	f002 fbae 	bl	8005af8 <HAL_DMAEx_ConfigMuxSync>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80033a2:	f7fe fe6f 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <HAL_UART_MspInit+0x208>)
 80033aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80033ae:	4a27      	ldr	r2, [pc, #156]	; (800344c <HAL_UART_MspInit+0x208>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2102      	movs	r1, #2
 80033b8:	2024      	movs	r0, #36	; 0x24
 80033ba:	f001 ff70 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80033be:	2024      	movs	r0, #36	; 0x24
 80033c0:	f001 ff87 	bl	80052d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */
    HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80033c4:	200c      	movs	r0, #12
 80033c6:	f001 ff84 	bl	80052d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80033ca:	e033      	b.n	8003434 <HAL_UART_MspInit+0x1f0>
  else if(uartHandle->Instance==USART2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a20      	ldr	r2, [pc, #128]	; (8003454 <HAL_UART_MspInit+0x210>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d12e      	bne.n	8003434 <HAL_UART_MspInit+0x1f0>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033d6:	2302      	movs	r3, #2
 80033d8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033da:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80033de:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033e0:	f107 030c 	add.w	r3, r7, #12
 80033e4:	4618      	mov	r0, r3
 80033e6:	f006 fa05 	bl	80097f4 <HAL_RCCEx_PeriphCLKConfig>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d001      	beq.n	80033f4 <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 80033f0:	f7fe fe48 	bl	8002084 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80033f8:	f7ff fe1c 	bl	8003034 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fc:	2001      	movs	r0, #1
 80033fe:	f7ff fe01 	bl	8003004 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8003402:	230c      	movs	r3, #12
 8003404:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003406:	2302      	movs	r3, #2
 8003408:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800340a:	2301      	movs	r3, #1
 800340c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800340e:	2301      	movs	r3, #1
 8003410:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003412:	2307      	movs	r3, #7
 8003414:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003416:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800341a:	4619      	mov	r1, r3
 800341c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003420:	f002 fe16 	bl	8006050 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003424:	2200      	movs	r2, #0
 8003426:	2100      	movs	r1, #0
 8003428:	2025      	movs	r0, #37	; 0x25
 800342a:	f001 ff38 	bl	800529e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800342e:	2025      	movs	r0, #37	; 0x25
 8003430:	f001 ff4f 	bl	80052d2 <HAL_NVIC_EnableIRQ>
}
 8003434:	bf00      	nop
 8003436:	3768      	adds	r7, #104	; 0x68
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40013800 	.word	0x40013800
 8003440:	48000400 	.word	0x48000400
 8003444:	20000524 	.word	0x20000524
 8003448:	40020008 	.word	0x40020008
 800344c:	20000584 	.word	0x20000584
 8003450:	4002001c 	.word	0x4002001c
 8003454:	40004400 	.word	0x40004400

08003458 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a17      	ldr	r2, [pc, #92]	; (80034c4 <HAL_UART_MspDeInit+0x6c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d116      	bne.n	8003498 <HAL_UART_MspDeInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800346a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800346e:	f7ff fe23 	bl	80030b8 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8003472:	21c0      	movs	r1, #192	; 0xc0
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <HAL_UART_MspDeInit+0x70>)
 8003476:	f002 ff4b 	bl	8006310 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800347e:	4618      	mov	r0, r3
 8003480:	f001 ffec 	bl	800545c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	4618      	mov	r0, r3
 800348c:	f001 ffe6 	bl	800545c <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003490:	2024      	movs	r0, #36	; 0x24
 8003492:	f001 ff2c 	bl	80052ee <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003496:	e010      	b.n	80034ba <HAL_UART_MspDeInit+0x62>
  else if(uartHandle->Instance==USART2)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <HAL_UART_MspDeInit+0x74>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10b      	bne.n	80034ba <HAL_UART_MspDeInit+0x62>
    __HAL_RCC_USART2_CLK_DISABLE();
 80034a2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80034a6:	f7ff fddd 	bl	8003064 <LL_APB1_GRP1_DisableClock>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_3|GPIO_PIN_2);
 80034aa:	210c      	movs	r1, #12
 80034ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b0:	f002 ff2e 	bl	8006310 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80034b4:	2025      	movs	r0, #37	; 0x25
 80034b6:	f001 ff1a 	bl	80052ee <HAL_NVIC_DisableIRQ>
}
 80034ba:	bf00      	nop
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40013800 	.word	0x40013800
 80034c8:	48000400 	.word	0x48000400
 80034cc:	40004400 	.word	0x40004400

080034d0 <LL_APB2_GRP1_ForceReset>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80034d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	640b      	str	r3, [r1, #64]	; 0x40
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bc80      	pop	{r7}
 80034f0:	4770      	bx	lr

080034f2 <LL_APB2_GRP1_ReleaseReset>:
{
 80034f2:	b480      	push	{r7}
 80034f4:	b083      	sub	sp, #12
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	43db      	mvns	r3, r3
 8003504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003508:	4013      	ands	r3, r2
 800350a:	640b      	str	r3, [r1, #64]	; 0x40
}
 800350c:	bf00      	nop
 800350e:	370c      	adds	r7, #12
 8003510:	46bd      	mov	sp, r7
 8003512:	bc80      	pop	{r7}
 8003514:	4770      	bx	lr
	...

08003518 <LL_EXTI_EnableIT_0_31>:
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <LL_EXTI_EnableIT_0_31+0x24>)
 8003522:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003526:	4905      	ldr	r1, [pc, #20]	; (800353c <LL_EXTI_EnableIT_0_31+0x24>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4313      	orrs	r3, r2
 800352c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	58000800 	.word	0x58000800

08003540 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003548:	4a07      	ldr	r2, [pc, #28]	; (8003568 <vcom_Init+0x28>)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800354e:	f7fe f803 	bl	8001558 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003552:	f7ff fdd5 	bl	8003100 <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 8003556:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800355a:	f7ff ffdd 	bl	8003518 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800355e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8003560:	4618      	mov	r0, r3
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	200005e8 	.word	0x200005e8

0800356c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 8003570:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003574:	f7ff ffac 	bl	80034d0 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 8003578:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800357c:	f7ff ffb9 	bl	80034f2 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8003580:	4804      	ldr	r0, [pc, #16]	; (8003594 <vcom_DeInit+0x28>)
 8003582:	f7ff ff69 	bl	8003458 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8003586:	200f      	movs	r0, #15
 8003588:	f001 feb1 	bl	80052ee <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800358c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800358e:	4618      	mov	r0, r3
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	200003fc 	.word	0x200003fc

08003598 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4804      	ldr	r0, [pc, #16]	; (80035bc <vcom_Trace_DMA+0x24>)
 80035ac:	f007 fc14 	bl	800add8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80035b0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200003fc 	.word	0x200003fc

080035c0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80035c8:	4a19      	ldr	r2, [pc, #100]	; (8003630 <vcom_ReceiveInit+0x70>)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80035ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80035d2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 80035d4:	f107 0308 	add.w	r3, r7, #8
 80035d8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80035dc:	4815      	ldr	r0, [pc, #84]	; (8003634 <vcom_ReceiveInit+0x74>)
 80035de:	f009 fbc2 	bl	800cd66 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 80035e2:	bf00      	nop
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <vcom_ReceiveInit+0x74>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035f2:	d0f7      	beq.n	80035e4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 80035f4:	bf00      	nop
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <vcom_ReceiveInit+0x74>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003604:	d1f7      	bne.n	80035f6 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8003606:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <vcom_ReceiveInit+0x74>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <vcom_ReceiveInit+0x74>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003614:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8003616:	4807      	ldr	r0, [pc, #28]	; (8003634 <vcom_ReceiveInit+0x74>)
 8003618:	f009 fc00 	bl	800ce1c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800361c:	2201      	movs	r2, #1
 800361e:	4906      	ldr	r1, [pc, #24]	; (8003638 <vcom_ReceiveInit+0x78>)
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <vcom_ReceiveInit+0x74>)
 8003622:	f007 fb8d 	bl	800ad40 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8003626:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	200005ec 	.word	0x200005ec
 8003634:	200003fc 	.word	0x200003fc
 8003638:	200005e4 	.word	0x200005e4

0800363c <vcom_Resume>:

void vcom_Resume(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003640:	4808      	ldr	r0, [pc, #32]	; (8003664 <vcom_Resume+0x28>)
 8003642:	f007 fb2c 	bl	800ac9e <HAL_UART_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <vcom_Resume+0x14>
  {
    Error_Handler();
 800364c:	f7fe fd1a 	bl	8002084 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003650:	4805      	ldr	r0, [pc, #20]	; (8003668 <vcom_Resume+0x2c>)
 8003652:	f001 fe5b 	bl	800530c <HAL_DMA_Init>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d001      	beq.n	8003660 <vcom_Resume+0x24>
  {
    Error_Handler();
 800365c:	f7fe fd12 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003660:	bf00      	nop
 8003662:	bd80      	pop	{r7, pc}
 8003664:	200003fc 	.word	0x200003fc
 8003668:	20000524 	.word	0x20000524

0800366c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <HAL_UART_TxCpltCallback+0x24>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d103      	bne.n	8003686 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 800367e:	4b05      	ldr	r3, [pc, #20]	; (8003694 <HAL_UART_TxCpltCallback+0x28>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2000      	movs	r0, #0
 8003684:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40013800 	.word	0x40013800
 8003694:	200005e8 	.word	0x200005e8

08003698 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a11      	ldr	r2, [pc, #68]	; (80036ec <HAL_UART_RxCpltCallback+0x54>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d113      	bne.n	80036d2 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80036aa:	4b11      	ldr	r3, [pc, #68]	; (80036f0 <HAL_UART_RxCpltCallback+0x58>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00a      	beq.n	80036c8 <HAL_UART_RxCpltCallback+0x30>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d105      	bne.n	80036c8 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <HAL_UART_RxCpltCallback+0x58>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2101      	movs	r1, #1
 80036c4:	480b      	ldr	r0, [pc, #44]	; (80036f4 <HAL_UART_RxCpltCallback+0x5c>)
 80036c6:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80036c8:	2201      	movs	r2, #1
 80036ca:	490a      	ldr	r1, [pc, #40]	; (80036f4 <HAL_UART_RxCpltCallback+0x5c>)
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f007 fb37 	bl	800ad40 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

      if (huart->Instance == USART2) {
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a08      	ldr	r2, [pc, #32]	; (80036f8 <HAL_UART_RxCpltCallback+0x60>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d102      	bne.n	80036e2 <HAL_UART_RxCpltCallback+0x4a>
//    	  __HAL_UART_CLEAR_IDLEFLAG(&huart2);        /* Clear IDLE line flag */
    	  UART2_SET = 1;
 80036dc:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_UART_RxCpltCallback+0x64>)
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]




  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40013800 	.word	0x40013800
 80036f0:	200005ec 	.word	0x200005ec
 80036f4:	200005e4 	.word	0x200005e4
 80036f8:	40004400 	.word	0x40004400
 80036fc:	20000004 	.word	0x20000004

08003700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003700:	480d      	ldr	r0, [pc, #52]	; (8003738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003702:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003704:	f7ff fa3b 	bl	8002b7e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003708:	480c      	ldr	r0, [pc, #48]	; (800373c <LoopForever+0x6>)
  ldr r1, =_edata
 800370a:	490d      	ldr	r1, [pc, #52]	; (8003740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800370c:	4a0d      	ldr	r2, [pc, #52]	; (8003744 <LoopForever+0xe>)
  movs r3, #0
 800370e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003710:	e002      	b.n	8003718 <LoopCopyDataInit>

08003712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003716:	3304      	adds	r3, #4

08003718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800371c:	d3f9      	bcc.n	8003712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800371e:	4a0a      	ldr	r2, [pc, #40]	; (8003748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003720:	4c0a      	ldr	r4, [pc, #40]	; (800374c <LoopForever+0x16>)
  movs r3, #0
 8003722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003724:	e001      	b.n	800372a <LoopFillZerobss>

08003726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003728:	3204      	adds	r2, #4

0800372a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800372c:	d3fb      	bcc.n	8003726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800372e:	f01b f997 	bl	801ea60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003732:	f7fe fb69 	bl	8001e08 <main>

08003736 <LoopForever>:

LoopForever:
    b LoopForever
 8003736:	e7fe      	b.n	8003736 <LoopForever>
  ldr   r0, =_estack
 8003738:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800373c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003740:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8003744:	0801fc2c 	.word	0x0801fc2c
  ldr r2, =_sbss
 8003748:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800374c:	2000205c 	.word	0x2000205c

08003750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003750:	e7fe      	b.n	8003750 <ADC_IRQHandler>

08003752 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b086      	sub	sp, #24
 8003756:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8003758:	1d3b      	adds	r3, r7, #4
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8003766:	2310      	movs	r3, #16
 8003768:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800376a:	2301      	movs	r3, #1
 800376c:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003772:	2303      	movs	r3, #3
 8003774:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8003776:	1d3b      	adds	r3, r7, #4
 8003778:	4619      	mov	r1, r3
 800377a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800377e:	f002 fc67 	bl	8006050 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8003782:	2320      	movs	r3, #32
 8003784:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8003786:	1d3b      	adds	r3, r7, #4
 8003788:	4619      	mov	r1, r3
 800378a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800378e:	f002 fc5f 	bl	8006050 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003792:	2200      	movs	r2, #0
 8003794:	2120      	movs	r1, #32
 8003796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800379a:	f002 fe87 	bl	80064ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800379e:	2200      	movs	r2, #0
 80037a0:	2110      	movs	r1, #16
 80037a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037a6:	f002 fe81 	bl	80064ac <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d83f      	bhi.n	8003844 <BSP_RADIO_ConfigRFSwitch+0x90>
 80037c4:	a201      	add	r2, pc, #4	; (adr r2, 80037cc <BSP_RADIO_ConfigRFSwitch+0x18>)
 80037c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ca:	bf00      	nop
 80037cc:	080037dd 	.word	0x080037dd
 80037d0:	080037f7 	.word	0x080037f7
 80037d4:	08003811 	.word	0x08003811
 80037d8:	0800382b 	.word	0x0800382b
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 80037dc:	2200      	movs	r2, #0
 80037de:	2110      	movs	r1, #16
 80037e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e4:	f002 fe62 	bl	80064ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2120      	movs	r1, #32
 80037ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037f0:	f002 fe5c 	bl	80064ac <HAL_GPIO_WritePin>
      break;      
 80037f4:	e027      	b.n	8003846 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80037f6:	2201      	movs	r2, #1
 80037f8:	2110      	movs	r1, #16
 80037fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037fe:	f002 fe55 	bl	80064ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8003802:	2200      	movs	r2, #0
 8003804:	2120      	movs	r1, #32
 8003806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800380a:	f002 fe4f 	bl	80064ac <HAL_GPIO_WritePin>
      break;
 800380e:	e01a      	b.n	8003846 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8003810:	2201      	movs	r2, #1
 8003812:	2110      	movs	r1, #16
 8003814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003818:	f002 fe48 	bl	80064ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800381c:	2201      	movs	r2, #1
 800381e:	2120      	movs	r1, #32
 8003820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003824:	f002 fe42 	bl	80064ac <HAL_GPIO_WritePin>
      break;
 8003828:	e00d      	b.n	8003846 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800382a:	2200      	movs	r2, #0
 800382c:	2110      	movs	r1, #16
 800382e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003832:	f002 fe3b 	bl	80064ac <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8003836:	2201      	movs	r2, #1
 8003838:	2120      	movs	r1, #32
 800383a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800383e:	f002 fe35 	bl	80064ac <HAL_GPIO_WritePin>
      break;
 8003842:	e000      	b.n	8003846 <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 8003844:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 8003854:	2302      	movs	r3, #2
}
 8003856:	4618      	mov	r0, r3
 8003858:	46bd      	mov	sp, r7
 800385a:	bc80      	pop	{r7}
 800385c:	4770      	bx	lr

0800385e <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 8003862:	2301      	movs	r3, #1
}
 8003864:	4618      	mov	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr

0800386c <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8003870:	2301      	movs	r3, #1
}
 8003872:	4618      	mov	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr

0800387a <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 800387a:	b480      	push	{r7}
 800387c:	b085      	sub	sp, #20
 800387e:	af00      	add	r7, sp, #0
 8003880:	4603      	mov	r3, r0
 8003882:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800388a:	230f      	movs	r3, #15
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e001      	b.n	8003894 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8003890:	2316      	movs	r3, #22
 8003892:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr

080038a0 <sen5x_start_measurement>:
#include "sensirion_i2c.h"
#include "sensirion_i2c_hal.h"

#define SEN5X_I2C_ADDRESS 0x69

int16_t sen5x_start_measurement(void) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x21);
 80038aa:	88f9      	ldrh	r1, [r7, #6]
 80038ac:	463b      	mov	r3, r7
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa0d 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 80038ba:	88fa      	ldrh	r2, [r7, #6]
 80038bc:	463b      	mov	r3, r7
 80038be:	4619      	mov	r1, r3
 80038c0:	2069      	movs	r0, #105	; 0x69
 80038c2:	f000 fa27 	bl	8003d14 <sensirion_i2c_write_data>
 80038c6:	4603      	mov	r3, r0
 80038c8:	80bb      	strh	r3, [r7, #4]
    if (error) {
 80038ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d002      	beq.n	80038d8 <sen5x_start_measurement+0x38>
        return error;
 80038d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038d6:	e004      	b.n	80038e2 <sen5x_start_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(50000);
 80038d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80038dc:	f000 faca 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <sen5x_stop_measurement>:
    }
    sensirion_i2c_hal_sleep_usec(50000);
    return NO_ERROR;
}

int16_t sen5x_stop_measurement(void) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 80038f2:	2300      	movs	r3, #0
 80038f4:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x104);
 80038f6:	88f9      	ldrh	r1, [r7, #6]
 80038f8:	463b      	mov	r3, r7
 80038fa:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f9e6 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 8003904:	4603      	mov	r3, r0
 8003906:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	463b      	mov	r3, r7
 800390c:	4619      	mov	r1, r3
 800390e:	2069      	movs	r0, #105	; 0x69
 8003910:	f000 fa00 	bl	8003d14 <sensirion_i2c_write_data>
 8003914:	4603      	mov	r3, r0
 8003916:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8003918:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <sen5x_stop_measurement+0x3a>
        return error;
 8003920:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003924:	e003      	b.n	800392e <sen5x_stop_measurement+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8003926:	4804      	ldr	r0, [pc, #16]	; (8003938 <sen5x_stop_measurement+0x4c>)
 8003928:	f000 faa4 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	00030d40 	.word	0x00030d40

0800393c <sen5x_read_measured_values>:
                                   uint16_t* mass_concentration_pm2p5,
                                   uint16_t* mass_concentration_pm4p0,
                                   uint16_t* mass_concentration_pm10p0,
                                   int16_t* ambient_humidity,
                                   int16_t* ambient_temperature,
                                   int16_t* voc_index, int16_t* nox_index) {
 800393c:	b580      	push	{r7, lr}
 800393e:	b08c      	sub	sp, #48	; 0x30
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	603b      	str	r3, [r7, #0]
    int16_t error;
    uint8_t buffer[24];
    uint16_t offset = 0;
 800394a:	2300      	movs	r3, #0
 800394c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0x3C4);
 800394e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	f44f 7271 	mov.w	r2, #964	; 0x3c4
 8003958:	4618      	mov	r0, r3
 800395a:	f000 f9b9 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 800395e:	4603      	mov	r3, r0
 8003960:	85fb      	strh	r3, [r7, #46]	; 0x2e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003962:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4619      	mov	r1, r3
 800396a:	2069      	movs	r0, #105	; 0x69
 800396c:	f000 f9d2 	bl	8003d14 <sensirion_i2c_write_data>
 8003970:	4603      	mov	r3, r0
 8003972:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (error) {
 8003974:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <sen5x_read_measured_values+0x46>
        return error;
 800397c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8003980:	e063      	b.n	8003a4a <sen5x_read_measured_values+0x10e>
    }

    sensirion_i2c_hal_sleep_usec(20000);
 8003982:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003986:	f000 fa75 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 16);
 800398a:	f107 0314 	add.w	r3, r7, #20
 800398e:	2210      	movs	r2, #16
 8003990:	4619      	mov	r1, r3
 8003992:	2069      	movs	r0, #105	; 0x69
 8003994:	f000 f9d2 	bl	8003d3c <sensirion_i2c_read_data_inplace>
 8003998:	4603      	mov	r3, r0
 800399a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (error) {
 800399c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <sen5x_read_measured_values+0x6e>
        return error;
 80039a4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80039a8:	e04f      	b.n	8003a4a <sen5x_read_measured_values+0x10e>
    }
    *mass_concentration_pm1p0 = sensirion_common_bytes_to_uint16_t(&buffer[0]);
 80039aa:	f107 0314 	add.w	r3, r7, #20
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 f8fe 	bl	8003bb0 <sensirion_common_bytes_to_uint16_t>
 80039b4:	4603      	mov	r3, r0
 80039b6:	461a      	mov	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm2p5 = sensirion_common_bytes_to_uint16_t(&buffer[2]);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	3302      	adds	r3, #2
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f8f4 	bl	8003bb0 <sensirion_common_bytes_to_uint16_t>
 80039c8:	4603      	mov	r3, r0
 80039ca:	461a      	mov	r2, r3
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm4p0 = sensirion_common_bytes_to_uint16_t(&buffer[4]);
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	3304      	adds	r3, #4
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f8ea 	bl	8003bb0 <sensirion_common_bytes_to_uint16_t>
 80039dc:	4603      	mov	r3, r0
 80039de:	461a      	mov	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	801a      	strh	r2, [r3, #0]
    *mass_concentration_pm10p0 = sensirion_common_bytes_to_uint16_t(&buffer[6]);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	3306      	adds	r3, #6
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f8e0 	bl	8003bb0 <sensirion_common_bytes_to_uint16_t>
 80039f0:	4603      	mov	r3, r0
 80039f2:	461a      	mov	r2, r3
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	801a      	strh	r2, [r3, #0]
    *ambient_humidity = sensirion_common_bytes_to_int16_t(&buffer[8]);
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	3308      	adds	r3, #8
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 f8ea 	bl	8003bd8 <sensirion_common_bytes_to_int16_t>
 8003a04:	4603      	mov	r3, r0
 8003a06:	461a      	mov	r2, r3
 8003a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a0a:	801a      	strh	r2, [r3, #0]
    *ambient_temperature = sensirion_common_bytes_to_int16_t(&buffer[10]);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	330a      	adds	r3, #10
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f8e0 	bl	8003bd8 <sensirion_common_bytes_to_int16_t>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1e:	801a      	strh	r2, [r3, #0]
    *voc_index = sensirion_common_bytes_to_int16_t(&buffer[12]);
 8003a20:	f107 0314 	add.w	r3, r7, #20
 8003a24:	330c      	adds	r3, #12
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f8d6 	bl	8003bd8 <sensirion_common_bytes_to_int16_t>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	461a      	mov	r2, r3
 8003a30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a32:	801a      	strh	r2, [r3, #0]
    *nox_index = sensirion_common_bytes_to_int16_t(&buffer[14]);
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	330e      	adds	r3, #14
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f000 f8cc 	bl	8003bd8 <sensirion_common_bytes_to_int16_t>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	801a      	strh	r2, [r3, #0]
    return NO_ERROR;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3730      	adds	r7, #48	; 0x30
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <sen5x_get_product_name>:
    *interval = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_get_product_name(unsigned char* product_name,
                               uint8_t product_name_size) {
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b090      	sub	sp, #64	; 0x40
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	87fb      	strh	r3, [r7, #62]	; 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD014);
 8003a62:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003a64:	f107 030c 	add.w	r3, r7, #12
 8003a68:	f24d 0214 	movw	r2, #53268	; 0xd014
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f92f 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 8003a72:	4603      	mov	r3, r0
 8003a74:	87fb      	strh	r3, [r7, #62]	; 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003a76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	2069      	movs	r0, #105	; 0x69
 8003a80:	f000 f948 	bl	8003d14 <sensirion_i2c_write_data>
 8003a84:	4603      	mov	r3, r0
 8003a86:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003a88:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <sen5x_get_product_name+0x44>
        return error;
 8003a90:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003a94:	e01c      	b.n	8003ad0 <sen5x_get_product_name+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8003a96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003a9a:	f000 f9eb 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8003a9e:	f107 030c 	add.w	r3, r7, #12
 8003aa2:	2220      	movs	r2, #32
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	2069      	movs	r0, #105	; 0x69
 8003aa8:	f000 f948 	bl	8003d3c <sensirion_i2c_read_data_inplace>
 8003aac:	4603      	mov	r3, r0
 8003aae:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003ab0:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <sen5x_get_product_name+0x6c>
        return error;
 8003ab8:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003abc:	e008      	b.n	8003ad0 <sen5x_get_product_name+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], product_name, product_name_size);
 8003abe:	78fb      	ldrb	r3, [r7, #3]
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	f107 030c 	add.w	r3, r7, #12
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 f892 	bl	8003bf2 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3740      	adds	r7, #64	; 0x40
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <sen5x_get_serial_number>:

int16_t sen5x_get_serial_number(unsigned char* serial_number,
                                uint8_t serial_number_size) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b090      	sub	sp, #64	; 0x40
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	70fb      	strb	r3, [r7, #3]
    int16_t error;
    uint8_t buffer[48];
    uint16_t offset = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD033);
 8003ae8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8003aea:	f107 030c 	add.w	r3, r7, #12
 8003aee:	f24d 0233 	movw	r2, #53299	; 0xd033
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f8ec 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 8003af8:	4603      	mov	r3, r0
 8003afa:	87fb      	strh	r3, [r7, #62]	; 0x3e

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003afc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8003afe:	f107 030c 	add.w	r3, r7, #12
 8003b02:	4619      	mov	r1, r3
 8003b04:	2069      	movs	r0, #105	; 0x69
 8003b06:	f000 f905 	bl	8003d14 <sensirion_i2c_write_data>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003b0e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <sen5x_get_serial_number+0x44>
        return error;
 8003b16:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b1a:	e01c      	b.n	8003b56 <sen5x_get_serial_number+0x7e>
    }

    sensirion_i2c_hal_sleep_usec(50000);
 8003b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003b20:	f000 f9a8 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>

    error = sensirion_i2c_read_data_inplace(SEN5X_I2C_ADDRESS, &buffer[0], 32);
 8003b24:	f107 030c 	add.w	r3, r7, #12
 8003b28:	2220      	movs	r2, #32
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	2069      	movs	r0, #105	; 0x69
 8003b2e:	f000 f905 	bl	8003d3c <sensirion_i2c_read_data_inplace>
 8003b32:	4603      	mov	r3, r0
 8003b34:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (error) {
 8003b36:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d002      	beq.n	8003b44 <sen5x_get_serial_number+0x6c>
        return error;
 8003b3e:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8003b42:	e008      	b.n	8003b56 <sen5x_get_serial_number+0x7e>
    }
    sensirion_common_copy_bytes(&buffer[0], serial_number, serial_number_size);
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	f107 030c 	add.w	r3, r7, #12
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 f84f 	bl	8003bf2 <sensirion_common_copy_bytes>
    return NO_ERROR;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3740      	adds	r7, #64	; 0x40
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
	...

08003b60 <sen5x_device_reset>:
    }
    *device_status = sensirion_common_bytes_to_uint32_t(&buffer[0]);
    return NO_ERROR;
}

int16_t sen5x_device_reset(void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
    int16_t error;
    uint8_t buffer[2];
    uint16_t offset = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	80fb      	strh	r3, [r7, #6]
    offset = sensirion_i2c_add_command_to_buffer(&buffer[0], offset, 0xD304);
 8003b6a:	88f9      	ldrh	r1, [r7, #6]
 8003b6c:	463b      	mov	r3, r7
 8003b6e:	f24d 3204 	movw	r2, #54020	; 0xd304
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f8ac 	bl	8003cd0 <sensirion_i2c_add_command_to_buffer>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	80fb      	strh	r3, [r7, #6]

    error = sensirion_i2c_write_data(SEN5X_I2C_ADDRESS, &buffer[0], offset);
 8003b7c:	88fa      	ldrh	r2, [r7, #6]
 8003b7e:	463b      	mov	r3, r7
 8003b80:	4619      	mov	r1, r3
 8003b82:	2069      	movs	r0, #105	; 0x69
 8003b84:	f000 f8c6 	bl	8003d14 <sensirion_i2c_write_data>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	80bb      	strh	r3, [r7, #4]
    if (error) {
 8003b8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d002      	beq.n	8003b9a <sen5x_device_reset+0x3a>
        return error;
 8003b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003b98:	e003      	b.n	8003ba2 <sen5x_device_reset+0x42>
    }
    sensirion_i2c_hal_sleep_usec(200000);
 8003b9a:	4804      	ldr	r0, [pc, #16]	; (8003bac <sen5x_device_reset+0x4c>)
 8003b9c:	f000 f96a 	bl	8003e74 <sensirion_i2c_hal_sleep_usec>
    return NO_ERROR;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	00030d40 	.word	0x00030d40

08003bb0 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	b21a      	sxth	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	b21b      	sxth	r3, r3
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	b21b      	sxth	r3, r3
 8003bcc:	b29b      	uxth	r3, r3
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bc80      	pop	{r7}
 8003bd6:	4770      	bx	lr

08003bd8 <sensirion_common_bytes_to_int16_t>:
uint32_t sensirion_common_bytes_to_uint32_t(const uint8_t* bytes) {
    return (uint32_t)bytes[0] << 24 | (uint32_t)bytes[1] << 16 |
           (uint32_t)bytes[2] << 8 | (uint32_t)bytes[3];
}

int16_t sensirion_common_bytes_to_int16_t(const uint8_t* bytes) {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
    return (int16_t)sensirion_common_bytes_to_uint16_t(bytes);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f7ff ffe5 	bl	8003bb0 <sensirion_common_bytes_to_uint16_t>
 8003be6:	4603      	mov	r3, r0
 8003be8:	b21b      	sxth	r3, r3
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <sensirion_common_copy_bytes>:
    tmp.float32 = value;
    sensirion_common_uint32_t_to_bytes(tmp.u32_value, bytes);
}

void sensirion_common_copy_bytes(const uint8_t* source, uint8_t* destination,
                                 uint16_t data_length) {
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	80fb      	strh	r3, [r7, #6]
    uint16_t i;
    for (i = 0; i < data_length; i++) {
 8003c00:	2300      	movs	r3, #0
 8003c02:	82fb      	strh	r3, [r7, #22]
 8003c04:	e00a      	b.n	8003c1c <sensirion_common_copy_bytes+0x2a>
        destination[i] = source[i];
 8003c06:	8afb      	ldrh	r3, [r7, #22]
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	441a      	add	r2, r3
 8003c0c:	8afb      	ldrh	r3, [r7, #22]
 8003c0e:	68b9      	ldr	r1, [r7, #8]
 8003c10:	440b      	add	r3, r1
 8003c12:	7812      	ldrb	r2, [r2, #0]
 8003c14:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < data_length; i++) {
 8003c16:	8afb      	ldrh	r3, [r7, #22]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	82fb      	strh	r3, [r7, #22]
 8003c1c:	8afa      	ldrh	r2, [r7, #22]
 8003c1e:	88fb      	ldrh	r3, [r7, #6]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d3f0      	bcc.n	8003c06 <sensirion_common_copy_bytes+0x14>
    }
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	371c      	adds	r7, #28
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr

08003c30 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8003c3c:	23ff      	movs	r3, #255	; 0xff
 8003c3e:	737b      	strb	r3, [r7, #13]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003c40:	2300      	movs	r3, #0
 8003c42:	81fb      	strh	r3, [r7, #14]
 8003c44:	e021      	b.n	8003c8a <sensirion_i2c_generate_crc+0x5a>
        crc ^= (data[current_byte]);
 8003c46:	89fb      	ldrh	r3, [r7, #14]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	7b7b      	ldrb	r3, [r7, #13]
 8003c50:	4053      	eors	r3, r2
 8003c52:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003c54:	2308      	movs	r3, #8
 8003c56:	733b      	strb	r3, [r7, #12]
 8003c58:	e011      	b.n	8003c7e <sensirion_i2c_generate_crc+0x4e>
            if (crc & 0x80)
 8003c5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da07      	bge.n	8003c72 <sensirion_i2c_generate_crc+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8003c62:	7b7b      	ldrb	r3, [r7, #13]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	b25b      	sxtb	r3, r3
 8003c68:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8003c6c:	b25b      	sxtb	r3, r3
 8003c6e:	737b      	strb	r3, [r7, #13]
 8003c70:	e002      	b.n	8003c78 <sensirion_i2c_generate_crc+0x48>
            else
                crc = (crc << 1);
 8003c72:	7b7b      	ldrb	r3, [r7, #13]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	737b      	strb	r3, [r7, #13]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8003c78:	7b3b      	ldrb	r3, [r7, #12]
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	733b      	strb	r3, [r7, #12]
 8003c7e:	7b3b      	ldrb	r3, [r7, #12]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1ea      	bne.n	8003c5a <sensirion_i2c_generate_crc+0x2a>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	3301      	adds	r3, #1
 8003c88:	81fb      	strh	r3, [r7, #14]
 8003c8a:	89fa      	ldrh	r2, [r7, #14]
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3d9      	bcc.n	8003c46 <sensirion_i2c_generate_crc+0x16>
        }
    }
    return crc;
 8003c92:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3714      	adds	r7, #20
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bc80      	pop	{r7}
 8003c9c:	4770      	bx	lr

08003c9e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b082      	sub	sp, #8
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	807b      	strh	r3, [r7, #2]
 8003caa:	4613      	mov	r3, r2
 8003cac:	707b      	strb	r3, [r7, #1]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	4619      	mov	r1, r3
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7ff ffbc 	bl	8003c30 <sensirion_i2c_generate_crc>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	461a      	mov	r2, r3
 8003cbc:	787b      	ldrb	r3, [r7, #1]
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d001      	beq.n	8003cc6 <sensirion_i2c_check_crc+0x28>
        return CRC_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <sensirion_i2c_check_crc+0x2a>
    return NO_ERROR;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <sensirion_i2c_add_command_to_buffer>:
    return sensirion_i2c_delayed_read_cmd(address, cmd, 0, data_words,
                                          num_words);
}

uint16_t sensirion_i2c_add_command_to_buffer(uint8_t* buffer, uint16_t offset,
                                             uint16_t command) {
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	460b      	mov	r3, r1
 8003cda:	807b      	strh	r3, [r7, #2]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	803b      	strh	r3, [r7, #0]
    buffer[offset++] = (uint8_t)((command & 0xFF00) >> 8);
 8003ce0:	883b      	ldrh	r3, [r7, #0]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	887b      	ldrh	r3, [r7, #2]
 8003ce8:	1c59      	adds	r1, r3, #1
 8003cea:	8079      	strh	r1, [r7, #2]
 8003cec:	4619      	mov	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	440b      	add	r3, r1
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
 8003cf6:	887b      	ldrh	r3, [r7, #2]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	807a      	strh	r2, [r7, #2]
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	883a      	ldrh	r2, [r7, #0]
 8003d04:	b2d2      	uxtb	r2, r2
 8003d06:	701a      	strb	r2, [r3, #0]
    return offset;
 8003d08:	887b      	ldrh	r3, [r7, #2]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
 8003d20:	4613      	mov	r3, r2
 8003d22:	80bb      	strh	r3, [r7, #4]
    return sensirion_i2c_hal_write(address, data, data_length);
 8003d24:	88ba      	ldrh	r2, [r7, #4]
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	6839      	ldr	r1, [r7, #0]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f886 	bl	8003e3c <sensirion_i2c_hal_write>
 8003d30:	4603      	mov	r3, r0
 8003d32:	b21b      	sxth	r3, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	6039      	str	r1, [r7, #0]
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	80bb      	strh	r3, [r7, #4]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8003d4c:	88bb      	ldrh	r3, [r7, #4]
 8003d4e:	085b      	lsrs	r3, r3, #1
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	461a      	mov	r2, r3
 8003d54:	0052      	lsls	r2, r2, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	817b      	strh	r3, [r7, #10]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8003d5a:	88bb      	ldrh	r3, [r7, #4]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <sensirion_i2c_read_data_inplace+0x2e>
        return BYTE_NUM_ERROR;
 8003d66:	2304      	movs	r3, #4
 8003d68:	e047      	b.n	8003dfa <sensirion_i2c_read_data_inplace+0xbe>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8003d6a:	897a      	ldrh	r2, [r7, #10]
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	6839      	ldr	r1, [r7, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 f847 	bl	8003e04 <sensirion_i2c_hal_read>
 8003d76:	4603      	mov	r3, r0
 8003d78:	813b      	strh	r3, [r7, #8]
    if (error) {
 8003d7a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d002      	beq.n	8003d88 <sensirion_i2c_read_data_inplace+0x4c>
        return error;
 8003d82:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003d86:	e038      	b.n	8003dfa <sensirion_i2c_read_data_inplace+0xbe>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003d88:	2300      	movs	r3, #0
 8003d8a:	81fb      	strh	r3, [r7, #14]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	81bb      	strh	r3, [r7, #12]
 8003d90:	e02e      	b.n	8003df0 <sensirion_i2c_read_data_inplace+0xb4>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8003d92:	89fb      	ldrh	r3, [r7, #14]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8003d98:	89fb      	ldrh	r3, [r7, #14]
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	4413      	add	r3, r2
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	2102      	movs	r1, #2
 8003da6:	f7ff ff7a 	bl	8003c9e <sensirion_i2c_check_crc>
 8003daa:	4603      	mov	r3, r0
 8003dac:	813b      	strh	r3, [r7, #8]
        if (error) {
 8003dae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <sensirion_i2c_read_data_inplace+0x80>
            return error;
 8003db6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003dba:	e01e      	b.n	8003dfa <sensirion_i2c_read_data_inplace+0xbe>
        }
        buffer[j++] = buffer[i];
 8003dbc:	89fb      	ldrh	r3, [r7, #14]
 8003dbe:	683a      	ldr	r2, [r7, #0]
 8003dc0:	441a      	add	r2, r3
 8003dc2:	89bb      	ldrh	r3, [r7, #12]
 8003dc4:	1c59      	adds	r1, r3, #1
 8003dc6:	81b9      	strh	r1, [r7, #12]
 8003dc8:	4619      	mov	r1, r3
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	440b      	add	r3, r1
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	441a      	add	r2, r3
 8003dda:	89bb      	ldrh	r3, [r7, #12]
 8003ddc:	1c59      	adds	r1, r3, #1
 8003dde:	81b9      	strh	r1, [r7, #12]
 8003de0:	4619      	mov	r1, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	440b      	add	r3, r1
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003dea:	89fb      	ldrh	r3, [r7, #14]
 8003dec:	3303      	adds	r3, #3
 8003dee:	81fb      	strh	r3, [r7, #14]
 8003df0:	89fa      	ldrh	r2, [r7, #14]
 8003df2:	897b      	ldrh	r3, [r7, #10]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d3cc      	bcc.n	8003d92 <sensirion_i2c_read_data_inplace+0x56>
    }

    return NO_ERROR;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
	...

08003e04 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint16_t count) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	6039      	str	r1, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
 8003e10:	4613      	mov	r3, r2
 8003e12:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c2, (uint16_t)(address << 1),
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	b299      	uxth	r1, r3
 8003e1c:	88bb      	ldrh	r3, [r7, #4]
 8003e1e:	2264      	movs	r2, #100	; 0x64
 8003e20:	9200      	str	r2, [sp, #0]
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	4804      	ldr	r0, [pc, #16]	; (8003e38 <sensirion_i2c_hal_read+0x34>)
 8003e26:	f002 fcdb 	bl	80067e0 <HAL_I2C_Master_Receive>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	200001e4 	.word	0x200001e4

08003e3c <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint16_t count) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	4603      	mov	r3, r0
 8003e44:	6039      	str	r1, [r7, #0]
 8003e46:	71fb      	strb	r3, [r7, #7]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	80bb      	strh	r3, [r7, #4]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c2, (uint16_t)(address << 1),
 8003e4c:	79fb      	ldrb	r3, [r7, #7]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	b299      	uxth	r1, r3
 8003e54:	88bb      	ldrh	r3, [r7, #4]
 8003e56:	2264      	movs	r2, #100	; 0x64
 8003e58:	9200      	str	r2, [sp, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	4804      	ldr	r0, [pc, #16]	; (8003e70 <sensirion_i2c_hal_write+0x34>)
 8003e5e:	f002 fbcb 	bl	80065f8 <HAL_I2C_Master_Transmit>
 8003e62:	4603      	mov	r3, r0
 8003e64:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200001e4 	.word	0x200001e4

08003e74 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a12      	ldr	r2, [pc, #72]	; (8003ec8 <sensirion_i2c_hal_sleep_usec+0x54>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	099b      	lsrs	r3, r3, #6
 8003e86:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	4b0f      	ldr	r3, [pc, #60]	; (8003ec8 <sensirion_i2c_hal_sleep_usec+0x54>)
 8003e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d002      	beq.n	8003ea6 <sensirion_i2c_hal_sleep_usec+0x32>
        msec++;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8003ea6:	f000 f879 	bl	8003f9c <HAL_GetHalVersion>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <sensirion_i2c_hal_sleep_usec+0x58>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d202      	bcs.n	8003eb8 <sensirion_i2c_hal_sleep_usec+0x44>
        msec++;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7fe fdfd 	bl	8002ab8 <HAL_Delay>
}
 8003ebe:	bf00      	nop
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	10624dd3 	.word	0x10624dd3
 8003ecc:	01010100 	.word	0x01010100

08003ed0 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	4a03      	ldr	r2, [pc, #12]	; (8003ee8 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6053      	str	r3, [r2, #4]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bc80      	pop	{r7}
 8003ee6:	4770      	bx	lr
 8003ee8:	e0042000 	.word	0xe0042000

08003eec <LL_DBGMCU_EnableDBGStopMode>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a03      	ldr	r2, [pc, #12]	; (8003f04 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 8003ef6:	f043 0302 	orr.w	r3, r3, #2
 8003efa:	6053      	str	r3, [r2, #4]
}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	e0042000 	.word	0xe0042000

08003f08 <LL_DBGMCU_EnableDBGStandbyMode>:
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003f0c:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a03      	ldr	r2, [pc, #12]	; (8003f20 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8003f12:	f043 0304 	orr.w	r3, r3, #4
 8003f16:	6053      	str	r3, [r2, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	e0042000 	.word	0xe0042000

08003f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2e:	2003      	movs	r0, #3
 8003f30:	f001 f9aa 	bl	8005288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003f34:	f005 fa80 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_Init+0x3c>)
 8003f3c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003f3e:	200f      	movs	r0, #15
 8003f40:	f7fe fd9c 	bl	8002a7c <HAL_InitTick>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	71fb      	strb	r3, [r7, #7]
 8003f4e:	e001      	b.n	8003f54 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f50:	f7fe faff 	bl	8002552 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f54:	79fb      	ldrb	r3, [r7, #7]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3708      	adds	r7, #8
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003f64:	b480      	push	{r7}
 8003f66:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f68:	4b04      	ldr	r3, [pc, #16]	; (8003f7c <HAL_SuspendTick+0x18>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a03      	ldr	r2, [pc, #12]	; (8003f7c <HAL_SuspendTick+0x18>)
 8003f6e:	f023 0302 	bic.w	r3, r3, #2
 8003f72:	6013      	str	r3, [r2, #0]
}
 8003f74:	bf00      	nop
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr
 8003f7c:	e000e010 	.word	0xe000e010

08003f80 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003f84:	4b04      	ldr	r3, [pc, #16]	; (8003f98 <HAL_ResumeTick+0x18>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a03      	ldr	r2, [pc, #12]	; (8003f98 <HAL_ResumeTick+0x18>)
 8003f8a:	f043 0302 	orr.w	r3, r3, #2
 8003f8e:	6013      	str	r3, [r2, #0]
}
 8003f90:	bf00      	nop
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bc80      	pop	{r7}
 8003f96:	4770      	bx	lr
 8003f98:	e000e010 	.word	0xe000e010

08003f9c <HAL_GetHalVersion>:
/**
  * @brief  Returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return __STM32WLxx_HAL_VERSION;
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <HAL_GetHalVersion+0x10>)
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	01030000 	.word	0x01030000

08003fb0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8003fb4:	4b02      	ldr	r3, [pc, #8]	; (8003fc0 <HAL_GetUIDw0+0x10>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	1fff7590 	.word	0x1fff7590

08003fc4 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003fc8:	4b02      	ldr	r3, [pc, #8]	; (8003fd4 <HAL_GetUIDw1+0x10>)
 8003fca:	681b      	ldr	r3, [r3, #0]
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr
 8003fd4:	1fff7594 	.word	0x1fff7594

08003fd8 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003fdc:	4b02      	ldr	r3, [pc, #8]	; (8003fe8 <HAL_GetUIDw2+0x10>)
 8003fde:	681b      	ldr	r3, [r3, #0]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr
 8003fe8:	1fff7598 	.word	0x1fff7598

08003fec <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003ff0:	f7ff ff6e 	bl	8003ed0 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003ff4:	bf00      	nop
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003ffc:	f7ff ff76 	bl	8003eec <LL_DBGMCU_EnableDBGStopMode>
}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}

08004004 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8004008:	f7ff ff7e 	bl	8003f08 <LL_DBGMCU_EnableDBGStandbyMode>
}
 800400c:	bf00      	nop
 800400e:	bd80      	pop	{r7, pc}

08004010 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	431a      	orrs	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	601a      	str	r2, [r3, #0]
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004044:	4618      	mov	r0, r3
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	bc80      	pop	{r7}
 800404c:	4770      	bx	lr

0800404e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2107      	movs	r1, #7
 8004066:	fa01 f303 	lsl.w	r3, r1, r3
 800406a:	43db      	mvns	r3, r3
 800406c:	401a      	ands	r2, r3
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	bc80      	pop	{r7}
 8004088:	4770      	bx	lr

0800408a <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	695a      	ldr	r2, [r3, #20]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2107      	movs	r1, #7
 80040a0:	fa01 f303 	lsl.w	r3, r1, r3
 80040a4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80040ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr

080040ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	60b9      	str	r1, [r7, #8]
 80040e8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	210f      	movs	r1, #15
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	401a      	ands	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	f003 010f 	and.w	r1, r3, #15
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004116:	bf00      	nop
 8004118:	3714      	adds	r7, #20
 800411a:	46bd      	mov	sp, r7
 800411c:	bc80      	pop	{r7}
 800411e:	4770      	bx	lr

08004120 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004134:	431a      	orrs	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	629a      	str	r2, [r3, #40]	; 0x28
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	bc80      	pop	{r7}
 8004142:	4770      	bx	lr

08004144 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004158:	43db      	mvns	r3, r3
 800415a:	401a      	ands	r2, r3
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	bc80      	pop	{r7}
 8004168:	4770      	bx	lr

0800416a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	695a      	ldr	r2, [r3, #20]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	43db      	mvns	r3, r3
 8004180:	401a      	ands	r2, r3
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	0219      	lsls	r1, r3, #8
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	400b      	ands	r3, r1
 800418a:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 800418e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004192:	431a      	orrs	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8004198:	bf00      	nop
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041b2:	f023 0317 	bic.w	r3, r3, #23
 80041b6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80041be:	bf00      	nop
 80041c0:	370c      	adds	r7, #12
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bc80      	pop	{r7}
 80041c6:	4770      	bx	lr

080041c8 <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80041d8:	f023 0317 	bic.w	r3, r3, #23
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6093      	str	r3, [r2, #8]
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bc80      	pop	{r7}
 80041e8:	4770      	bx	lr

080041ea <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041fe:	d101      	bne.n	8004204 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004220:	f023 0317 	bic.w	r3, r3, #23
 8004224:	f043 0201 	orr.w	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	bc80      	pop	{r7}
 8004234:	4770      	bx	lr

08004236 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004246:	f023 0317 	bic.w	r3, r3, #23
 800424a:	f043 0202 	orr.w	r2, r3, #2
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr

0800425c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <LL_ADC_IsEnabled+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <LL_ADC_IsEnabled+0x1a>
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	bc80      	pop	{r7}
 800427e:	4770      	bx	lr

08004280 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b02      	cmp	r3, #2
 8004292:	d101      	bne.n	8004298 <LL_ADC_IsDisableOngoing+0x18>
 8004294:	2301      	movs	r3, #1
 8004296:	e000      	b.n	800429a <LL_ADC_IsDisableOngoing+0x1a>
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	370c      	adds	r7, #12
 800429e:	46bd      	mov	sp, r7
 80042a0:	bc80      	pop	{r7}
 80042a2:	4770      	bx	lr

080042a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042b4:	f023 0317 	bic.w	r3, r3, #23
 80042b8:	f043 0204 	orr.w	r2, r3, #4
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bc80      	pop	{r7}
 80042c8:	4770      	bx	lr

080042ca <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b083      	sub	sp, #12
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f023 0317 	bic.w	r3, r3, #23
 80042de:	f043 0210 	orr.w	r2, r3, #16
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b04      	cmp	r3, #4
 8004302:	d101      	bne.n	8004308 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004308:	2300      	movs	r3, #0
}
 800430a:	4618      	mov	r0, r3
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr

08004314 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800431c:	2300      	movs	r3, #0
 800431e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8004320:	2300      	movs	r3, #0
 8004322:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004324:	2300      	movs	r3, #0
 8004326:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e17e      	b.n	8004634 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	2b00      	cmp	r3, #0
 8004342:	d109      	bne.n	8004358 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7fd f849 	bl	80013dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff ff44 	bl	80041ea <LL_ADC_IsInternalRegulatorEnabled>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d115      	bne.n	8004394 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff18 	bl	80041a2 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004372:	4b9e      	ldr	r3, [pc, #632]	; (80045ec <HAL_ADC_Init+0x2d8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	099b      	lsrs	r3, r3, #6
 8004378:	4a9d      	ldr	r2, [pc, #628]	; (80045f0 <HAL_ADC_Init+0x2dc>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	099b      	lsrs	r3, r3, #6
 8004380:	3301      	adds	r3, #1
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004386:	e002      	b.n	800438e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3b01      	subs	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1f9      	bne.n	8004388 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f7ff ff26 	bl	80041ea <LL_ADC_IsInternalRegulatorEnabled>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10d      	bne.n	80043c0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a8:	f043 0210 	orr.w	r2, r3, #16
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff93 	bl	80042f0 <LL_ADC_REG_IsConversionOngoing>
 80043ca:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f040 8124 	bne.w	8004622 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 8120 	bne.w	8004622 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043ea:	f043 0202 	orr.w	r2, r3, #2
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7ff ff30 	bl	800425c <LL_ADC_IsEnabled>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 80a7 	bne.w	8004552 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	7e1b      	ldrb	r3, [r3, #24]
 800440c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800440e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7e5b      	ldrb	r3, [r3, #25]
 8004414:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8004416:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	7e9b      	ldrb	r3, [r3, #26]
 800441c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800441e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004424:	2a00      	cmp	r2, #0
 8004426:	d002      	beq.n	800442e <HAL_ADC_Init+0x11a>
 8004428:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800442c:	e000      	b.n	8004430 <HAL_ADC_Init+0x11c>
 800442e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004430:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004436:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	da04      	bge.n	800444a <HAL_ADC_Init+0x136>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
 8004444:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004448:	e001      	b.n	800444e <HAL_ADC_Init+0x13a>
 800444a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800444e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004456:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8004458:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	4313      	orrs	r3, r2
 800445e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d114      	bne.n	8004494 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	7e9b      	ldrb	r3, [r3, #26]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e00b      	b.n	8004494 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004480:	f043 0220 	orr.w	r2, r3, #32
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f043 0201 	orr.w	r2, r3, #1
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	2b00      	cmp	r3, #0
 800449a:	d009      	beq.n	80044b0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80044a8:	4313      	orrs	r3, r2
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80044ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	69b9      	ldr	r1, [r7, #24]
 80044c4:	430b      	orrs	r3, r1
 80044c6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044d4:	4313      	orrs	r3, r2
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d111      	bne.n	800450a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80044f2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80044f8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80044fe:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	691a      	ldr	r2, [r3, #16]
 8004510:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_ADC_Init+0x2e0>)
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6812      	ldr	r2, [r2, #0]
 8004518:	6979      	ldr	r1, [r7, #20]
 800451a:	430b      	orrs	r3, r1
 800451c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004526:	d014      	beq.n	8004552 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d00f      	beq.n	8004552 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800453a:	d00a      	beq.n	8004552 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 800453c:	4b2e      	ldr	r3, [pc, #184]	; (80045f8 <HAL_ADC_Init+0x2e4>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800454c:	492a      	ldr	r1, [pc, #168]	; (80045f8 <HAL_ADC_Init+0x2e4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	461a      	mov	r2, r3
 800455c:	2100      	movs	r1, #0
 800455e:	f7ff fd76 	bl	800404e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456a:	461a      	mov	r2, r3
 800456c:	4923      	ldr	r1, [pc, #140]	; (80045fc <HAL_ADC_Init+0x2e8>)
 800456e:	f7ff fd6e 	bl	800404e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d108      	bne.n	800458c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f062 020f 	orn	r2, r2, #15
 8004588:	629a      	str	r2, [r3, #40]	; 0x28
 800458a:	e017      	b.n	80045bc <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004594:	d112      	bne.n	80045bc <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	f003 031c 	and.w	r3, r3, #28
 80045a8:	f06f 020f 	mvn.w	r2, #15
 80045ac:	fa02 f103 	lsl.w	r1, r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7ff fd61 	bl	800408a <LL_ADC_GetSamplingTimeCommonChannels>
 80045c8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d116      	bne.n	8004600 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045dc:	f023 0303 	bic.w	r3, r3, #3
 80045e0:	f043 0201 	orr.w	r2, r3, #1
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80045e8:	e023      	b.n	8004632 <HAL_ADC_Init+0x31e>
 80045ea:	bf00      	nop
 80045ec:	20000000 	.word	0x20000000
 80045f0:	053e2d63 	.word	0x053e2d63
 80045f4:	1ffffc02 	.word	0x1ffffc02
 80045f8:	40012708 	.word	0x40012708
 80045fc:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	f023 0312 	bic.w	r3, r3, #18
 8004608:	f043 0210 	orr.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f043 0201 	orr.w	r2, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004620:	e007      	b.n	8004632 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	f043 0210 	orr.w	r2, r3, #16
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8004632:	7ffb      	ldrb	r3, [r7, #31]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e07a      	b.n	8004744 <HAL_ADC_DeInit+0x108>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004652:	f043 0202 	orr.w	r2, r3, #2
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	659a      	str	r2, [r3, #88]	; 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 face 	bl	8004bfc <ADC_ConversionStop>
 8004660:	4603      	mov	r3, r0
 8004662:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004664:	7bfb      	ldrb	r3, [r7, #15]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f000 fb92 	bl	8004d94 <ADC_Disable>
 8004670:	4603      	mov	r3, r0
 8004672:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d102      	bne.n	8004680 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff fd9f 	bl	80041c8 <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8004698:	f023 0303 	bic.w	r3, r3, #3
 800469c:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f240 329f 	movw	r2, #927	; 0x39f
 80046a6:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68d9      	ldr	r1, [r3, #12]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_ADC_DeInit+0x110>)
 80046b4:	400b      	ands	r3, r1
 80046b6:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691a      	ldr	r2, [r3, #16]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80046c6:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 0207 	bic.w	r2, r2, #7
 80046d6:	615a      	str	r2, [r3, #20]

  /* Reset registers AWDxTR */
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a1a      	ldr	r2, [r3, #32]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80046e6:	621a      	str	r2, [r3, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 80046f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f002 22f0 	and.w	r2, r2, #4026593280	; 0xf000f000
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 8004716:	4b0e      	ldr	r3, [pc, #56]	; (8004750 <HAL_ADC_DeInit+0x114>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0d      	ldr	r2, [pc, #52]	; (8004750 <HAL_ADC_DeInit+0x114>)
 800471c:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 8004720:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fe86 	bl	8001434 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	659a      	str	r2, [r3, #88]	; 0x58

  __HAL_UNLOCK(hadc);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004742:	7bfb      	ldrb	r3, [r7, #15]
}
 8004744:	4618      	mov	r0, r3
 8004746:	3710      	adds	r7, #16
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	833e0200 	.word	0x833e0200
 8004750:	40012708 	.word	0x40012708

08004754 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff fdc5 	bl	80042f0 <LL_ADC_REG_IsConversionOngoing>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d132      	bne.n	80047d2 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004772:	2b01      	cmp	r3, #1
 8004774:	d101      	bne.n	800477a <HAL_ADC_Start+0x26>
 8004776:	2302      	movs	r3, #2
 8004778:	e02e      	b.n	80047d8 <HAL_ADC_Start+0x84>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fa80 	bl	8004c88 <ADC_Enable>
 8004788:	4603      	mov	r3, r0
 800478a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d11a      	bne.n	80047c8 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004796:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	221c      	movs	r2, #28
 80047b2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fd6f 	bl	80042a4 <LL_ADC_REG_StartConversion>
 80047c6:	e006      	b.n	80047d6 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80047d0:	e001      	b.n	80047d6 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80047d2:	2302      	movs	r3, #2
 80047d4:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_ADC_Stop+0x16>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e022      	b.n	800483c <HAL_ADC_Stop+0x5c>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f9fc 	bl	8004bfc <ADC_ConversionStop>
 8004804:	4603      	mov	r3, r0
 8004806:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d111      	bne.n	8004832 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fac0 	bl	8004d94 <ADC_Disable>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004826:	f023 0301 	bic.w	r3, r3, #1
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 800483a:	7bfb      	ldrb	r3, [r7, #15]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	2b08      	cmp	r3, #8
 8004854:	d102      	bne.n	800485c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 8004856:	2308      	movs	r3, #8
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e010      	b.n	800487e <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486e:	f043 0220 	orr.w	r2, r3, #32
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e077      	b.n	800496a <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 800487a:	2304      	movs	r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800487e:	f7fe f907 	bl	8002a90 <HAL_GetTick>
 8004882:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8004884:	e021      	b.n	80048ca <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488c:	d01d      	beq.n	80048ca <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800488e:	f7fe f8ff 	bl	8002a90 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d302      	bcc.n	80048a4 <HAL_ADC_PollForConversion+0x60>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d112      	bne.n	80048ca <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b6:	f043 0204 	orr.w	r2, r3, #4
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	e04f      	b.n	800496a <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0d6      	beq.n	8004886 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f7ff fbe6 	bl	80040ba <LL_ADC_REG_IsTriggerSourceSWStart>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d031      	beq.n	8004958 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	7e9b      	ldrb	r3, [r3, #26]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d12d      	bne.n	8004958 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0308 	and.w	r3, r3, #8
 8004906:	2b08      	cmp	r3, #8
 8004908:	d126      	bne.n	8004958 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fcee 	bl	80042f0 <LL_ADC_REG_IsConversionOngoing>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d112      	bne.n	8004940 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 020c 	bic.w	r2, r2, #12
 8004928:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	659a      	str	r2, [r3, #88]	; 0x58
 800493e:	e00b      	b.n	8004958 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004944:	f043 0220 	orr.w	r2, r3, #32
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	f043 0201 	orr.w	r2, r3, #1
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	7e1b      	ldrb	r3, [r3, #24]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d103      	bne.n	8004968 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	220c      	movs	r2, #12
 8004966:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	bc80      	pop	{r7}
 8004988:	4770      	bx	lr
	...

0800498c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_ConfigChannel+0x28>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e110      	b.n	8004bd6 <HAL_ADC_ConfigChannel+0x24a>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fc95 	bl	80042f0 <LL_ADC_REG_IsConversionOngoing>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 80f7 	bne.w	8004bbc <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	f000 80b1 	beq.w	8004b3a <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80049e6:	4a7e      	ldr	r2, [pc, #504]	; (8004be0 <HAL_ADC_ConfigChannel+0x254>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d108      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff fb92 	bl	8004120 <LL_ADC_REG_SetSequencerChAdd>
 80049fc:	e041      	b.n	8004a82 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	210f      	movs	r1, #15
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d105      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0xa0>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0e9b      	lsrs	r3, r3, #26
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	e011      	b.n	8004a50 <HAL_ADC_ConfigChannel+0xc4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e003      	b.n	8004a50 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	6839      	ldr	r1, [r7, #0]
 8004a52:	6849      	ldr	r1, [r1, #4]
 8004a54:	f001 011f 	and.w	r1, r1, #31
 8004a58:	408b      	lsls	r3, r1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	089b      	lsrs	r3, r3, #2
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	69db      	ldr	r3, [r3, #28]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d808      	bhi.n	8004a82 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f7ff fb2e 	bl	80040de <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6818      	ldr	r0, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6819      	ldr	r1, [r3, #0]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	461a      	mov	r2, r3
 8004a90:	f7ff fb6b 	bl	800416a <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f280 8097 	bge.w	8004bcc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a9e:	4851      	ldr	r0, [pc, #324]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004aa0:	f7ff fac8 	bl	8004034 <LL_ADC_GetCommonPathInternalCh>
 8004aa4:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a4f      	ldr	r2, [pc, #316]	; (8004be8 <HAL_ADC_ConfigChannel+0x25c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d120      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d11b      	bne.n	8004af2 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4848      	ldr	r0, [pc, #288]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004ac4:	f7ff faa4 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ac8:	4b48      	ldr	r3, [pc, #288]	; (8004bec <HAL_ADC_ConfigChannel+0x260>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	099b      	lsrs	r3, r3, #6
 8004ace:	4a48      	ldr	r2, [pc, #288]	; (8004bf0 <HAL_ADC_ConfigChannel+0x264>)
 8004ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad4:	099b      	lsrs	r3, r3, #6
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	4613      	mov	r3, r2
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004ae2:	e002      	b.n	8004aea <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f9      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004af0:	e06c      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a3f      	ldr	r2, [pc, #252]	; (8004bf4 <HAL_ADC_ConfigChannel+0x268>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d10c      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d107      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4835      	ldr	r0, [pc, #212]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004b10:	f7ff fa7e 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
 8004b14:	e05a      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a37      	ldr	r2, [pc, #220]	; (8004bf8 <HAL_ADC_ConfigChannel+0x26c>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d155      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d150      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b30:	4619      	mov	r1, r3
 8004b32:	482c      	ldr	r0, [pc, #176]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004b34:	f7ff fa6c 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
 8004b38:	e048      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b42:	d004      	beq.n	8004b4e <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b48:	4a25      	ldr	r2, [pc, #148]	; (8004be0 <HAL_ADC_ConfigChannel+0x254>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d107      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f7ff faf3 	bl	8004144 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	da32      	bge.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b66:	481f      	ldr	r0, [pc, #124]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004b68:	f7ff fa64 	bl	8004034 <LL_ADC_GetCommonPathInternalCh>
 8004b6c:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1d      	ldr	r2, [pc, #116]	; (8004be8 <HAL_ADC_ConfigChannel+0x25c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d107      	bne.n	8004b88 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b78:	69bb      	ldr	r3, [r7, #24]
 8004b7a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4818      	ldr	r0, [pc, #96]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004b82:	f7ff fa45 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
 8004b86:	e021      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a19      	ldr	r2, [pc, #100]	; (8004bf4 <HAL_ADC_ConfigChannel+0x268>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d107      	bne.n	8004ba2 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b98:	4619      	mov	r1, r3
 8004b9a:	4812      	ldr	r0, [pc, #72]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004b9c:	f7ff fa38 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
 8004ba0:	e014      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a14      	ldr	r2, [pc, #80]	; (8004bf8 <HAL_ADC_ConfigChannel+0x26c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d10f      	bne.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	480b      	ldr	r0, [pc, #44]	; (8004be4 <HAL_ADC_ConfigChannel+0x258>)
 8004bb6:	f7ff fa2b 	bl	8004010 <LL_ADC_SetCommonPathInternalCh>
 8004bba:	e007      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f043 0220 	orr.w	r2, r3, #32
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8004bd4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	80000004 	.word	0x80000004
 8004be4:	40012708 	.word	0x40012708
 8004be8:	b0001000 	.word	0xb0001000
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	053e2d63 	.word	0x053e2d63
 8004bf4:	b8004000 	.word	0xb8004000
 8004bf8:	b4002000 	.word	0xb4002000

08004bfc <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7ff fb71 	bl	80042f0 <LL_ADC_REG_IsConversionOngoing>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d033      	beq.n	8004c7c <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff fb31 	bl	8004280 <LL_ADC_IsDisableOngoing>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d104      	bne.n	8004c2e <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff fb4e 	bl	80042ca <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c2e:	f7fd ff2f 	bl	8002a90 <HAL_GetTick>
 8004c32:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c34:	e01b      	b.n	8004c6e <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c36:	f7fd ff2b 	bl	8002a90 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d914      	bls.n	8004c6e <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 0304 	and.w	r3, r3, #4
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00d      	beq.n	8004c6e <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	f043 0210 	orr.w	r2, r3, #16
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c62:	f043 0201 	orr.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e007      	b.n	8004c7e <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1dc      	bne.n	8004c36 <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
	...

08004c88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fadf 	bl	800425c <LL_ADC_IsEnabled>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d169      	bne.n	8004d78 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	4b36      	ldr	r3, [pc, #216]	; (8004d84 <ADC_Enable+0xfc>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb6:	f043 0210 	orr.w	r2, r3, #16
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc2:	f043 0201 	orr.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e055      	b.n	8004d7a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff fa9c 	bl	8004210 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8004cd8:	482b      	ldr	r0, [pc, #172]	; (8004d88 <ADC_Enable+0x100>)
 8004cda:	f7ff f9ab 	bl	8004034 <LL_ADC_GetCommonPathInternalCh>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00f      	beq.n	8004d08 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ce8:	4b28      	ldr	r3, [pc, #160]	; (8004d8c <ADC_Enable+0x104>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	099b      	lsrs	r3, r3, #6
 8004cee:	4a28      	ldr	r2, [pc, #160]	; (8004d90 <ADC_Enable+0x108>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	099b      	lsrs	r3, r3, #6
 8004cf6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8004cf8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004cfa:	e002      	b.n	8004d02 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	3b01      	subs	r3, #1
 8004d00:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f9      	bne.n	8004cfc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	7e5b      	ldrb	r3, [r3, #25]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d033      	beq.n	8004d78 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8004d10:	f7fd febe 	bl	8002a90 <HAL_GetTick>
 8004d14:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d16:	e028      	b.n	8004d6a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7ff fa9d 	bl	800425c <LL_ADC_IsEnabled>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7ff fa6f 	bl	8004210 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d32:	f7fd fead 	bl	8002a90 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d914      	bls.n	8004d6a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d00d      	beq.n	8004d6a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d52:	f043 0210 	orr.w	r2, r3, #16
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d5e:	f043 0201 	orr.w	r2, r3, #1
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e007      	b.n	8004d7a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0301 	and.w	r3, r3, #1
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d1cf      	bne.n	8004d18 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	80000017 	.word	0x80000017
 8004d88:	40012708 	.word	0x40012708
 8004d8c:	20000000 	.word	0x20000000
 8004d90:	053e2d63 	.word	0x053e2d63

08004d94 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fa6d 	bl	8004280 <LL_ADC_IsDisableOngoing>
 8004da6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff fa55 	bl	800425c <LL_ADC_IsEnabled>
 8004db2:	4603      	mov	r3, r0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d047      	beq.n	8004e48 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d144      	bne.n	8004e48 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0305 	and.w	r3, r3, #5
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10c      	bne.n	8004de6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7ff fa30 	bl	8004236 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004dde:	f7fd fe57 	bl	8002a90 <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004de4:	e029      	b.n	8004e3a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f043 0210 	orr.w	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df6:	f043 0201 	orr.w	r2, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e023      	b.n	8004e4a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e02:	f7fd fe45 	bl	8002a90 <HAL_GetTick>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	2b02      	cmp	r3, #2
 8004e0e:	d914      	bls.n	8004e3a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e22:	f043 0210 	orr.w	r2, r3, #16
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e2e:	f043 0201 	orr.w	r2, r3, #1
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e007      	b.n	8004e4a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1dc      	bne.n	8004e02 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <LL_ADC_SetCalibrationFactor>:
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e62:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <LL_ADC_GetCalibrationFactor>:
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b083      	sub	sp, #12
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	370c      	adds	r7, #12
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bc80      	pop	{r7}
 8004e94:	4770      	bx	lr

08004e96 <LL_ADC_Enable>:
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ea6:	f023 0317 	bic.w	r3, r3, #23
 8004eaa:	f043 0201 	orr.w	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <LL_ADC_Disable>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ecc:	f023 0317 	bic.w	r3, r3, #23
 8004ed0:	f043 0202 	orr.w	r2, r3, #2
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	609a      	str	r2, [r3, #8]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bc80      	pop	{r7}
 8004ee0:	4770      	bx	lr

08004ee2 <LL_ADC_IsEnabled>:
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <LL_ADC_IsEnabled+0x18>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <LL_ADC_IsEnabled+0x1a>
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr

08004f06 <LL_ADC_StartCalibration>:
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f16:	f023 0317 	bic.w	r3, r3, #23
 8004f1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	609a      	str	r2, [r3, #8]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bc80      	pop	{r7}
 8004f2a:	4770      	bx	lr

08004f2c <LL_ADC_IsCalibrationOnGoing>:
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f40:	d101      	bne.n	8004f46 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b088      	sub	sp, #32
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_ADCEx_Calibration_Start+0x1e>
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	e0b9      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0x192>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7ff ff0b 	bl	8004d94 <ADC_Disable>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff ffab 	bl	8004ee2 <LL_ADC_IsEnabled>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	f040 809d 	bne.w	80050ce <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004f9c:	f043 0202 	orr.w	r2, r3, #2
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	f248 0303 	movw	r3, #32771	; 0x8003
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	6812      	ldr	r2, [r2, #0]
 8004fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc0:	f023 0303 	bic.w	r3, r3, #3
 8004fc4:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e02e      	b.n	800502a <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7ff ff98 	bl	8004f06 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004fd6:	e014      	b.n	8005002 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8004fe4:	d30d      	bcc.n	8005002 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fea:	f023 0312 	bic.w	r3, r3, #18
 8004fee:	f043 0210 	orr.w	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e070      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ff90 	bl	8004f2c <LL_ADC_IsCalibrationOnGoing>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1e2      	bne.n	8004fd8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff ff2f 	bl	8004e7a <LL_ADC_GetCalibrationFactor>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	4413      	add	r3, r2
 8005022:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	3301      	adds	r3, #1
 8005028:	61fb      	str	r3, [r7, #28]
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	2b07      	cmp	r3, #7
 800502e:	d9cd      	bls.n	8004fcc <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8005030:	69ba      	ldr	r2, [r7, #24]
 8005032:	69fb      	ldr	r3, [r7, #28]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff29 	bl	8004e96 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69b9      	ldr	r1, [r7, #24]
 800504a:	4618      	mov	r0, r3
 800504c:	f7ff ff01 	bl	8004e52 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff ff31 	bl	8004ebc <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800505a:	f7fd fd19 	bl	8002a90 <HAL_GetTick>
 800505e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005060:	e01c      	b.n	800509c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005062:	f7fd fd15 	bl	8002a90 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d915      	bls.n	800509c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff ff34 	bl	8004ee2 <LL_ADC_IsEnabled>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005084:	f043 0210 	orr.w	r2, r3, #16
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005090:	f043 0201 	orr.w	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e023      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ff1e 	bl	8004ee2 <LL_ADC_IsEnabled>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1da      	bne.n	8005062 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68d9      	ldr	r1, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0201 	orr.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	659a      	str	r2, [r3, #88]	; 0x58
 80050cc:	e005      	b.n	80050da <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3720      	adds	r7, #32
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f003 0307 	and.w	r3, r3, #7
 80050fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <__NVIC_SetPriorityGrouping+0x44>)
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005108:	4013      	ands	r3, r2
 800510a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800511c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800511e:	4a04      	ldr	r2, [pc, #16]	; (8005130 <__NVIC_SetPriorityGrouping+0x44>)
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	60d3      	str	r3, [r2, #12]
}
 8005124:	bf00      	nop
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr
 800512e:	bf00      	nop
 8005130:	e000ed00 	.word	0xe000ed00

08005134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005138:	4b04      	ldr	r3, [pc, #16]	; (800514c <__NVIC_GetPriorityGrouping+0x18>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	f003 0307 	and.w	r3, r3, #7
}
 8005142:	4618      	mov	r0, r3
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	db0b      	blt.n	800517a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4906      	ldr	r1, [pc, #24]	; (8005184 <__NVIC_EnableIRQ+0x34>)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2001      	movs	r0, #1
 8005172:	fa00 f202 	lsl.w	r2, r0, r2
 8005176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	bc80      	pop	{r7}
 8005182:	4770      	bx	lr
 8005184:	e000e100 	.word	0xe000e100

08005188 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	4603      	mov	r3, r0
 8005190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005196:	2b00      	cmp	r3, #0
 8005198:	db12      	blt.n	80051c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	f003 021f 	and.w	r2, r3, #31
 80051a0:	490a      	ldr	r1, [pc, #40]	; (80051cc <__NVIC_DisableIRQ+0x44>)
 80051a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2001      	movs	r0, #1
 80051aa:	fa00 f202 	lsl.w	r2, r0, r2
 80051ae:	3320      	adds	r3, #32
 80051b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80051b4:	f3bf 8f4f 	dsb	sy
}
 80051b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80051ba:	f3bf 8f6f 	isb	sy
}
 80051be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80051c0:	bf00      	nop
 80051c2:	370c      	adds	r7, #12
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	e000e100 	.word	0xe000e100

080051d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	6039      	str	r1, [r7, #0]
 80051da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	db0a      	blt.n	80051fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	490c      	ldr	r1, [pc, #48]	; (800521c <__NVIC_SetPriority+0x4c>)
 80051ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ee:	0112      	lsls	r2, r2, #4
 80051f0:	b2d2      	uxtb	r2, r2
 80051f2:	440b      	add	r3, r1
 80051f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f8:	e00a      	b.n	8005210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	b2da      	uxtb	r2, r3
 80051fe:	4908      	ldr	r1, [pc, #32]	; (8005220 <__NVIC_SetPriority+0x50>)
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	3b04      	subs	r3, #4
 8005208:	0112      	lsls	r2, r2, #4
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	440b      	add	r3, r1
 800520e:	761a      	strb	r2, [r3, #24]
}
 8005210:	bf00      	nop
 8005212:	370c      	adds	r7, #12
 8005214:	46bd      	mov	sp, r7
 8005216:	bc80      	pop	{r7}
 8005218:	4770      	bx	lr
 800521a:	bf00      	nop
 800521c:	e000e100 	.word	0xe000e100
 8005220:	e000ed00 	.word	0xe000ed00

08005224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	; 0x24
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f1c3 0307 	rsb	r3, r3, #7
 800523e:	2b04      	cmp	r3, #4
 8005240:	bf28      	it	cs
 8005242:	2304      	movcs	r3, #4
 8005244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3304      	adds	r3, #4
 800524a:	2b06      	cmp	r3, #6
 800524c:	d902      	bls.n	8005254 <NVIC_EncodePriority+0x30>
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	3b03      	subs	r3, #3
 8005252:	e000      	b.n	8005256 <NVIC_EncodePriority+0x32>
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005258:	f04f 32ff 	mov.w	r2, #4294967295
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	fa02 f303 	lsl.w	r3, r2, r3
 8005262:	43da      	mvns	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	401a      	ands	r2, r3
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800526c:	f04f 31ff 	mov.w	r1, #4294967295
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	fa01 f303 	lsl.w	r3, r1, r3
 8005276:	43d9      	mvns	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800527c:	4313      	orrs	r3, r2
         );
}
 800527e:	4618      	mov	r0, r3
 8005280:	3724      	adds	r7, #36	; 0x24
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f7ff ff2b 	bl	80050ec <__NVIC_SetPriorityGrouping>
}
 8005296:	bf00      	nop
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b086      	sub	sp, #24
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	4603      	mov	r3, r0
 80052a6:	60b9      	str	r1, [r7, #8]
 80052a8:	607a      	str	r2, [r7, #4]
 80052aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052ac:	f7ff ff42 	bl	8005134 <__NVIC_GetPriorityGrouping>
 80052b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	6978      	ldr	r0, [r7, #20]
 80052b8:	f7ff ffb4 	bl	8005224 <NVIC_EncodePriority>
 80052bc:	4602      	mov	r2, r0
 80052be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c2:	4611      	mov	r1, r2
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7ff ff83 	bl	80051d0 <__NVIC_SetPriority>
}
 80052ca:	bf00      	nop
 80052cc:	3718      	adds	r7, #24
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b082      	sub	sp, #8
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	4603      	mov	r3, r0
 80052da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7ff ff35 	bl	8005150 <__NVIC_EnableIRQ>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	4603      	mov	r3, r0
 80052f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7ff ff43 	bl	8005188 <__NVIC_DisableIRQ>
}
 8005302:	bf00      	nop
 8005304:	3708      	adds	r7, #8
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e08e      	b.n	800543c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	4b47      	ldr	r3, [pc, #284]	; (8005444 <HAL_DMA_Init+0x138>)
 8005326:	429a      	cmp	r2, r3
 8005328:	d80f      	bhi.n	800534a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	461a      	mov	r2, r3
 8005330:	4b45      	ldr	r3, [pc, #276]	; (8005448 <HAL_DMA_Init+0x13c>)
 8005332:	4413      	add	r3, r2
 8005334:	4a45      	ldr	r2, [pc, #276]	; (800544c <HAL_DMA_Init+0x140>)
 8005336:	fba2 2303 	umull	r2, r3, r2, r3
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	009a      	lsls	r2, r3, #2
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a42      	ldr	r2, [pc, #264]	; (8005450 <HAL_DMA_Init+0x144>)
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
 8005348:	e00e      	b.n	8005368 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	461a      	mov	r2, r3
 8005350:	4b40      	ldr	r3, [pc, #256]	; (8005454 <HAL_DMA_Init+0x148>)
 8005352:	4413      	add	r3, r2
 8005354:	4a3d      	ldr	r2, [pc, #244]	; (800544c <HAL_DMA_Init+0x140>)
 8005356:	fba2 2303 	umull	r2, r3, r2, r3
 800535a:	091b      	lsrs	r3, r3, #4
 800535c:	009a      	lsls	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a3c      	ldr	r2, [pc, #240]	; (8005458 <HAL_DMA_Init+0x14c>)
 8005366:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb30 	bl	8005a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80053c8:	d102      	bne.n	80053d0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80053e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d010      	beq.n	8005412 <HAL_DMA_Init+0x106>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2b04      	cmp	r3, #4
 80053f6:	d80c      	bhi.n	8005412 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fb59 	bl	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e008      	b.n	8005424 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40020407 	.word	0x40020407
 8005448:	bffdfff8 	.word	0xbffdfff8
 800544c:	cccccccd 	.word	0xcccccccd
 8005450:	40020000 	.word	0x40020000
 8005454:	bffdfbf8 	.word	0xbffdfbf8
 8005458:	40020400 	.word	0x40020400

0800545c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07b      	b.n	8005566 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 0201 	bic.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	461a      	mov	r2, r3
 8005484:	4b3a      	ldr	r3, [pc, #232]	; (8005570 <HAL_DMA_DeInit+0x114>)
 8005486:	429a      	cmp	r2, r3
 8005488:	d80f      	bhi.n	80054aa <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	461a      	mov	r2, r3
 8005490:	4b38      	ldr	r3, [pc, #224]	; (8005574 <HAL_DMA_DeInit+0x118>)
 8005492:	4413      	add	r3, r2
 8005494:	4a38      	ldr	r2, [pc, #224]	; (8005578 <HAL_DMA_DeInit+0x11c>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	009a      	lsls	r2, r3, #2
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a35      	ldr	r2, [pc, #212]	; (800557c <HAL_DMA_DeInit+0x120>)
 80054a6:	641a      	str	r2, [r3, #64]	; 0x40
 80054a8:	e00e      	b.n	80054c8 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b33      	ldr	r3, [pc, #204]	; (8005580 <HAL_DMA_DeInit+0x124>)
 80054b2:	4413      	add	r3, r2
 80054b4:	4a30      	ldr	r2, [pc, #192]	; (8005578 <HAL_DMA_DeInit+0x11c>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	091b      	lsrs	r3, r3, #4
 80054bc:	009a      	lsls	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2f      	ldr	r2, [pc, #188]	; (8005584 <HAL_DMA_DeInit+0x128>)
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d4:	f003 021c 	and.w	r2, r3, #28
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054dc:	2101      	movs	r1, #1
 80054de:	fa01 f202 	lsl.w	r2, r1, r2
 80054e2:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa9b 	bl	8005a20 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80054fa:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00f      	beq.n	8005524 <HAL_DMA_DeInit+0xc8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	2b04      	cmp	r3, #4
 800550a:	d80b      	bhi.n	8005524 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 facf 	bl	8005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005522:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3708      	adds	r7, #8
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	40020407 	.word	0x40020407
 8005574:	bffdfff8 	.word	0xbffdfff8
 8005578:	cccccccd 	.word	0xcccccccd
 800557c:	40020000 	.word	0x40020000
 8005580:	bffdfbf8 	.word	0xbffdfbf8
 8005584:	40020400 	.word	0x40020400

08005588 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b086      	sub	sp, #24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
 8005594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_DMA_Start_IT+0x20>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e069      	b.n	800567c <HAL_DMA_Start_IT+0xf4>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d155      	bne.n	8005668 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	68b9      	ldr	r1, [r7, #8]
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f9e0 	bl	80059a6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 020e 	orr.w	r2, r2, #14
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	e00f      	b.n	8005620 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0204 	bic.w	r2, r2, #4
 800560e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 020a 	orr.w	r2, r2, #10
 800561e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005638:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800563c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005654:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f042 0201 	orr.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e008      	b.n	800567a <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2280      	movs	r2, #128	; 0x80
 800566c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800567a:	7dfb      	ldrb	r3, [r7, #23]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3718      	adds	r7, #24
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e04f      	b.n	8005736 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d008      	beq.n	80056b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2204      	movs	r2, #4
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e040      	b.n	8005736 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 020e 	bic.w	r2, r2, #14
 80056c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	f003 021c 	and.w	r2, r3, #28
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	2101      	movs	r1, #1
 80056f2:	fa01 f202 	lsl.w	r2, r1, r2
 80056f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005700:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00c      	beq.n	8005724 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005718:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005722:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	370c      	adds	r7, #12
 800573a:	46bd      	mov	sp, r7
 800573c:	bc80      	pop	{r7}
 800573e:	4770      	bx	lr

08005740 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	2300      	movs	r3, #0
 800574a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d005      	beq.n	8005764 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2204      	movs	r2, #4
 800575c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	73fb      	strb	r3, [r7, #15]
 8005762:	e047      	b.n	80057f4 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 020e 	bic.w	r2, r2, #14
 8005772:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800578e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005792:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005798:	f003 021c 	and.w	r2, r3, #28
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	2101      	movs	r1, #1
 80057a2:	fa01 f202 	lsl.w	r2, r1, r2
 80057a6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80057b0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80057c8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80057d2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	4798      	blx	r3
    }
  }
  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800581c:	f003 031c 	and.w	r3, r3, #28
 8005820:	2204      	movs	r2, #4
 8005822:	409a      	lsls	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4013      	ands	r3, r2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d027      	beq.n	800587c <HAL_DMA_IRQHandler+0x7c>
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d022      	beq.n	800587c <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d107      	bne.n	8005854 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0204 	bic.w	r2, r2, #4
 8005852:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005858:	f003 021c 	and.w	r2, r3, #28
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	2104      	movs	r1, #4
 8005862:	fa01 f202 	lsl.w	r2, r1, r2
 8005866:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	2b00      	cmp	r3, #0
 800586e:	f000 8081 	beq.w	8005974 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800587a:	e07b      	b.n	8005974 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f003 031c 	and.w	r3, r3, #28
 8005884:	2202      	movs	r2, #2
 8005886:	409a      	lsls	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	4013      	ands	r3, r2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d03d      	beq.n	800590c <HAL_DMA_IRQHandler+0x10c>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0302 	and.w	r3, r3, #2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d038      	beq.n	800590c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0320 	and.w	r3, r3, #32
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 020a 	bic.w	r2, r2, #10
 80058b6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	4b2e      	ldr	r3, [pc, #184]	; (8005980 <HAL_DMA_IRQHandler+0x180>)
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d909      	bls.n	80058e0 <HAL_DMA_IRQHandler+0xe0>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d0:	f003 031c 	and.w	r3, r3, #28
 80058d4:	4a2b      	ldr	r2, [pc, #172]	; (8005984 <HAL_DMA_IRQHandler+0x184>)
 80058d6:	2102      	movs	r1, #2
 80058d8:	fa01 f303 	lsl.w	r3, r1, r3
 80058dc:	6053      	str	r3, [r2, #4]
 80058de:	e008      	b.n	80058f2 <HAL_DMA_IRQHandler+0xf2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e4:	f003 031c 	and.w	r3, r3, #28
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <HAL_DMA_IRQHandler+0x188>)
 80058ea:	2102      	movs	r1, #2
 80058ec:	fa01 f303 	lsl.w	r3, r1, r3
 80058f0:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d038      	beq.n	8005974 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800590a:	e033      	b.n	8005974 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	f003 031c 	and.w	r3, r3, #28
 8005914:	2208      	movs	r2, #8
 8005916:	409a      	lsls	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	4013      	ands	r3, r2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d02a      	beq.n	8005976 <HAL_DMA_IRQHandler+0x176>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0308 	and.w	r3, r3, #8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d025      	beq.n	8005976 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 020e 	bic.w	r2, r2, #14
 8005938:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800593e:	f003 021c 	and.w	r2, r3, #28
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f202 	lsl.w	r2, r1, r2
 800594c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	2b00      	cmp	r3, #0
 800596a:	d004      	beq.n	8005976 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005974:	bf00      	nop
 8005976:	bf00      	nop
}
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	40020080 	.word	0x40020080
 8005984:	40020400 	.word	0x40020400
 8005988:	40020000 	.word	0x40020000

0800598c <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800599a:	b2db      	uxtb	r3, r3
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bc80      	pop	{r7}
 80059a4:	4770      	bx	lr

080059a6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b085      	sub	sp, #20
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	60f8      	str	r0, [r7, #12]
 80059ae:	60b9      	str	r1, [r7, #8]
 80059b0:	607a      	str	r2, [r7, #4]
 80059b2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80059bc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d004      	beq.n	80059d0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059ce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d4:	f003 021c 	and.w	r2, r3, #28
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	2101      	movs	r1, #1
 80059de:	fa01 f202 	lsl.w	r2, r1, r2
 80059e2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d108      	bne.n	8005a06 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a04:	e007      	b.n	8005a16 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68ba      	ldr	r2, [r7, #8]
 8005a0c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	60da      	str	r2, [r3, #12]
}
 8005a16:	bf00      	nop
 8005a18:	3714      	adds	r7, #20
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d813      	bhi.n	8005a5c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a38:	089b      	lsrs	r3, r3, #2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a40:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	3b08      	subs	r3, #8
 8005a50:	4a14      	ldr	r2, [pc, #80]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	091b      	lsrs	r3, r3, #4
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e011      	b.n	8005a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a60:	089b      	lsrs	r3, r3, #2
 8005a62:	009a      	lsls	r2, r3, #2
 8005a64:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8005a66:	4413      	add	r3, r2
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	3b08      	subs	r3, #8
 8005a74:	4a0b      	ldr	r2, [pc, #44]	; (8005aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	091b      	lsrs	r3, r3, #4
 8005a7c:	3307      	adds	r3, #7
 8005a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a0a      	ldr	r2, [pc, #40]	; (8005aac <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8005a84:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	409a      	lsls	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005a94:	bf00      	nop
 8005a96:	3714      	adds	r7, #20
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bc80      	pop	{r7}
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40020407 	.word	0x40020407
 8005aa4:	cccccccd 	.word	0xcccccccd
 8005aa8:	4002081c 	.word	0x4002081c
 8005aac:	40020880 	.word	0x40020880

08005ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005ac6:	4413      	add	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005ad4:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	f003 0303 	and.w	r3, r3, #3
 8005ade:	2201      	movs	r2, #1
 8005ae0:	409a      	lsls	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	1000823f 	.word	0x1000823f
 8005af4:	40020940 	.word	0x40020940

08005af8 <HAL_DMAEx_ConfigMuxSync>:
  *             the configuration information for the specified DMA channel.
  * @param pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b083      	sub	sp, #12
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d12b      	bne.n	8005b66 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d101      	bne.n	8005b1c <HAL_DMAEx_ConfigMuxSync+0x24>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	e028      	b.n	8005b6e <HAL_DMAEx_ConfigMuxSync+0x76>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	04db      	lsls	r3, r3, #19
 8005b3a:	431a      	orrs	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	431a      	orrs	r2, r3
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	7a1b      	ldrb	r3, [r3, #8]
 8005b46:	041b      	lsls	r3, r3, #16
 8005b48:	431a      	orrs	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	7a5b      	ldrb	r3, [r3, #9]
 8005b4e:	025b      	lsls	r3, r3, #9
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b56:	430a      	orrs	r2, r1
 8005b58:	601a      	str	r2, [r3, #0]
               (pSyncConfig->SyncSignalID | ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
                pSyncConfig->SyncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos) | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	e003      	b.n	8005b6e <HAL_DMAEx_ConfigMuxSync+0x76>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2280      	movs	r2, #128	; 0x80
 8005b6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Return error status */
    return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
  }
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <HAL_DMAEx_MUX_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA channel.
  * @retval None
  */
void HAL_DMAEx_MUX_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Check for DMAMUX Synchronization overrun */
  if ((hdma->DMAmuxChannelStatus->CSR & hdma->DMAmuxChannelStatusMask) != 0U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01a      	beq.n	8005bc6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
  {
    /* Disable the synchro overrun interrupt */
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ba8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode |= HAL_DMA_ERROR_SYNC;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    if (hdma->XferErrorCallback != NULL)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_DMAEx_MUX_IRQHandler+0x4e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	4798      	blx	r3
    }
  }

  if (hdma->DMAmuxRequestGen != 0)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d022      	beq.n	8005c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
  {
    /* if using a DMAMUX request generator block Check for DMAMUX request generator overrun */
    if ((hdma->DMAmuxRequestGenStatus->RGSR & hdma->DMAmuxRequestGenStatusMask) != 0U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d01a      	beq.n	8005c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
    {
      /* Disable the request gen overrun interrupt */
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bf6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_REQGEN;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bfc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	63da      	str	r2, [r3, #60]	; 0x3c

      if (hdma->XferErrorCallback != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <HAL_DMAEx_MUX_IRQHandler+0x9c>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	4798      	blx	r3
      }
    }
  }
}
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005c2a:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <HAL_FLASH_Program+0x80>)
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_FLASH_Program+0x1a>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e02d      	b.n	8005c92 <HAL_FLASH_Program+0x76>
 8005c36:	4b19      	ldr	r3, [pc, #100]	; (8005c9c <HAL_FLASH_Program+0x80>)
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005c3c:	4b17      	ldr	r3, [pc, #92]	; (8005c9c <HAL_FLASH_Program+0x80>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c46:	f000 f869 	bl	8005d1c <FLASH_WaitForLastOperation>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8005c4e:	7dfb      	ldrb	r3, [r7, #23]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d11a      	bne.n	8005c8a <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d105      	bne.n	8005c66 <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8005c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5e:	68b8      	ldr	r0, [r7, #8]
 8005c60:	f000 f8be 	bl	8005de0 <FLASH_Program_DoubleWord>
 8005c64:	e004      	b.n	8005c70 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68b8      	ldr	r0, [r7, #8]
 8005c6c:	f000 f8de 	bl	8005e2c <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c74:	f000 f852 	bl	8005d1c <FLASH_WaitForLastOperation>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8005c7c:	4b08      	ldr	r3, [pc, #32]	; (8005ca0 <HAL_FLASH_Program+0x84>)
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	43db      	mvns	r3, r3
 8005c84:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <HAL_FLASH_Program+0x84>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005c8a:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <HAL_FLASH_Program+0x80>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	200005f0 	.word	0x200005f0
 8005ca0:	58004000 	.word	0x58004000

08005ca4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cae:	4b0b      	ldr	r3, [pc, #44]	; (8005cdc <HAL_FLASH_Unlock+0x38>)
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	da0b      	bge.n	8005cce <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005cb6:	4b09      	ldr	r3, [pc, #36]	; (8005cdc <HAL_FLASH_Unlock+0x38>)
 8005cb8:	4a09      	ldr	r2, [pc, #36]	; (8005ce0 <HAL_FLASH_Unlock+0x3c>)
 8005cba:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005cbc:	4b07      	ldr	r3, [pc, #28]	; (8005cdc <HAL_FLASH_Unlock+0x38>)
 8005cbe:	4a09      	ldr	r2, [pc, #36]	; (8005ce4 <HAL_FLASH_Unlock+0x40>)
 8005cc0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_FLASH_Unlock+0x38>)
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	da01      	bge.n	8005cce <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005cce:	79fb      	ldrb	r3, [r7, #7]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bc80      	pop	{r7}
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	58004000 	.word	0x58004000
 8005ce0:	45670123 	.word	0x45670123
 8005ce4:	cdef89ab 	.word	0xcdef89ab

08005ce8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8005cf2:	4b09      	ldr	r3, [pc, #36]	; (8005d18 <HAL_FLASH_Lock+0x30>)
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	4a08      	ldr	r2, [pc, #32]	; (8005d18 <HAL_FLASH_Lock+0x30>)
 8005cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8005cfe:	4b06      	ldr	r3, [pc, #24]	; (8005d18 <HAL_FLASH_Lock+0x30>)
 8005d00:	695b      	ldr	r3, [r3, #20]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	db01      	blt.n	8005d0a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005d0a:	79fb      	ldrb	r3, [r7, #7]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bc80      	pop	{r7}
 8005d14:	4770      	bx	lr
 8005d16:	bf00      	nop
 8005d18:	58004000 	.word	0x58004000

08005d1c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8005d24:	f7fc feb4 	bl	8002a90 <HAL_GetTick>
 8005d28:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d2a:	e009      	b.n	8005d40 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005d2c:	f7fc feb0 	bl	8002a90 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d801      	bhi.n	8005d40 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e047      	b.n	8005dd0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8005d40:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d0ee      	beq.n	8005d2c <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8005d4e:	4b22      	ldr	r3, [pc, #136]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d50:	691b      	ldr	r3, [r3, #16]
 8005d52:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d002      	beq.n	8005d64 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d007      	beq.n	8005d88 <FLASH_WaitForLastOperation+0x6c>
 8005d78:	4b17      	ldr	r3, [pc, #92]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d7a:	699a      	ldr	r2, [r3, #24]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8005d82:	4915      	ldr	r1, [pc, #84]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	618b      	str	r3, [r1, #24]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d004      	beq.n	8005d9c <FLASH_WaitForLastOperation+0x80>
 8005d92:	4a11      	ldr	r2, [pc, #68]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005d9a:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <FLASH_WaitForLastOperation+0xa4>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8005da2:	4a0e      	ldr	r2, [pc, #56]	; (8005ddc <FLASH_WaitForLastOperation+0xc0>)
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e011      	b.n	8005dd0 <FLASH_WaitForLastOperation+0xb4>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8005dac:	f7fc fe70 	bl	8002a90 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d801      	bhi.n	8005dc0 <FLASH_WaitForLastOperation+0xa4>
    {
      return HAL_TIMEOUT;
 8005dbc:	2303      	movs	r3, #3
 8005dbe:	e007      	b.n	8005dd0 <FLASH_WaitForLastOperation+0xb4>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8005dc0:	4b05      	ldr	r3, [pc, #20]	; (8005dd8 <FLASH_WaitForLastOperation+0xbc>)
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dcc:	d0ee      	beq.n	8005dac <FLASH_WaitForLastOperation+0x90>
    }
  }

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	58004000 	.word	0x58004000
 8005ddc:	200005f0 	.word	0x200005f0

08005de0 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	60f8      	str	r0, [r7, #12]
 8005de8:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8005dec:	4b0e      	ldr	r3, [pc, #56]	; (8005e28 <FLASH_Program_DoubleWord+0x48>)
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	4a0d      	ldr	r2, [pc, #52]	; (8005e28 <FLASH_Program_DoubleWord+0x48>)
 8005df2:	f043 0301 	orr.w	r3, r3, #1
 8005df6:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005dfe:	f3bf 8f6f 	isb	sy
}
 8005e02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8005e04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	000a      	movs	r2, r1
 8005e12:	2300      	movs	r3, #0
 8005e14:	68f9      	ldr	r1, [r7, #12]
 8005e16:	3104      	adds	r1, #4
 8005e18:	4613      	mov	r3, r2
 8005e1a:	600b      	str	r3, [r1, #0]
}
 8005e1c:	bf00      	nop
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bc80      	pop	{r7}
 8005e24:	4770      	bx	lr
 8005e26:	bf00      	nop
 8005e28:	58004000 	.word	0x58004000

08005e2c <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b089      	sub	sp, #36	; 0x24
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
 8005e34:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8005e36:	2340      	movs	r3, #64	; 0x40
 8005e38:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <FLASH_Program_Fast+0x78>)
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4a17      	ldr	r2, [pc, #92]	; (8005ea4 <FLASH_Program_Fast+0x78>)
 8005e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e4c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e52:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e54:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 8005e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005e58:	b672      	cpsid	i
}
 8005e5a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	3304      	adds	r3, #4
 8005e68:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	3304      	adds	r3, #4
 8005e6e:	617b      	str	r3, [r7, #20]
    row_index--;
 8005e70:	7ffb      	ldrb	r3, [r7, #31]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8005e76:	7ffb      	ldrb	r3, [r7, #31]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1ef      	bne.n	8005e5c <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8005e7c:	bf00      	nop
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <FLASH_Program_Fast+0x78>)
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e8a:	d0f8      	beq.n	8005e7e <FLASH_Program_Fast+0x52>
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f383 8810 	msr	PRIMASK, r3
}
 8005e96:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8005e98:	bf00      	nop
 8005e9a:	3724      	adds	r7, #36	; 0x24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bc80      	pop	{r7}
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop
 8005ea4:	58004000 	.word	0x58004000

08005ea8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005eb2:	4b28      	ldr	r3, [pc, #160]	; (8005f54 <HAL_FLASHEx_Erase+0xac>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_FLASHEx_Erase+0x16>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e046      	b.n	8005f4c <HAL_FLASHEx_Erase+0xa4>
 8005ebe:	4b25      	ldr	r3, [pc, #148]	; (8005f54 <HAL_FLASHEx_Erase+0xac>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005ec4:	4b23      	ldr	r3, [pc, #140]	; (8005f54 <HAL_FLASHEx_Erase+0xac>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005eca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005ece:	f7ff ff25 	bl	8005d1c <FLASH_WaitForLastOperation>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d133      	bne.n	8005f44 <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	d108      	bne.n	8005ef6 <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 8005ee4:	f000 f838 	bl	8005f58 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005ee8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005eec:	f7ff ff16 	bl	8005d1c <FLASH_WaitForLastOperation>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e024      	b.n	8005f40 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8005efc:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	e012      	b.n	8005f2c <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f000 f836 	bl	8005f78 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005f0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f10:	f7ff ff04 	bl	8005d1c <FLASH_WaitForLastOperation>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8005f18:	7bfb      	ldrb	r3, [r7, #15]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d003      	beq.n	8005f26 <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	601a      	str	r2, [r3, #0]
          break;
 8005f24:	e00a      	b.n	8005f3c <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	3301      	adds	r3, #1
 8005f2a:	60bb      	str	r3, [r7, #8]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4413      	add	r3, r2
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d3e4      	bcc.n	8005f06 <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8005f3c:	f000 f878 	bl	8006030 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005f40:	f000 f832 	bl	8005fa8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005f44:	4b03      	ldr	r3, [pc, #12]	; (8005f54 <HAL_FLASHEx_Erase+0xac>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	701a      	strb	r2, [r3, #0]

  return status;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	200005f0 	.word	0x200005f0

08005f58 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8005f5c:	4b05      	ldr	r3, [pc, #20]	; (8005f74 <FLASH_MassErase+0x1c>)
 8005f5e:	695b      	ldr	r3, [r3, #20]
 8005f60:	4a04      	ldr	r2, [pc, #16]	; (8005f74 <FLASH_MassErase+0x1c>)
 8005f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f66:	f043 0304 	orr.w	r3, r3, #4
 8005f6a:	6153      	str	r3, [r2, #20]
#endif
}
 8005f6c:	bf00      	nop
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bc80      	pop	{r7}
 8005f72:	4770      	bx	lr
 8005f74:	58004000 	.word	0x58004000

08005f78 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8005f80:	4b08      	ldr	r3, [pc, #32]	; (8005fa4 <FLASH_PageErase+0x2c>)
 8005f82:	695b      	ldr	r3, [r3, #20]
 8005f84:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	00db      	lsls	r3, r3, #3
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	4a05      	ldr	r2, [pc, #20]	; (8005fa4 <FLASH_PageErase+0x2c>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f94:	f043 0302 	orr.w	r3, r3, #2
 8005f98:	6153      	str	r3, [r2, #20]
#endif
}
 8005f9a:	bf00      	nop
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr
 8005fa4:	58004000 	.word	0x58004000

08005fa8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8005fac:	4b1f      	ldr	r3, [pc, #124]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d117      	bne.n	8005fe8 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005fb8:	4b1c      	ldr	r3, [pc, #112]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1b      	ldr	r2, [pc, #108]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fc2:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005fc4:	4b19      	ldr	r3, [pc, #100]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a18      	ldr	r2, [pc, #96]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	4b16      	ldr	r3, [pc, #88]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fda:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fdc:	4b13      	ldr	r3, [pc, #76]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a12      	ldr	r2, [pc, #72]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fe2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fe6:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8005fe8:	4b10      	ldr	r3, [pc, #64]	; (800602c <FLASH_FlushCaches+0x84>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d117      	bne.n	8006024 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ff4:	4b0d      	ldr	r3, [pc, #52]	; (800602c <FLASH_FlushCaches+0x84>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0c      	ldr	r2, [pc, #48]	; (800602c <FLASH_FlushCaches+0x84>)
 8005ffa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ffe:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006000:	4b0a      	ldr	r3, [pc, #40]	; (800602c <FLASH_FlushCaches+0x84>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a09      	ldr	r2, [pc, #36]	; (800602c <FLASH_FlushCaches+0x84>)
 8006006:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4b07      	ldr	r3, [pc, #28]	; (800602c <FLASH_FlushCaches+0x84>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a06      	ldr	r2, [pc, #24]	; (800602c <FLASH_FlushCaches+0x84>)
 8006012:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006016:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006018:	4b04      	ldr	r3, [pc, #16]	; (800602c <FLASH_FlushCaches+0x84>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a03      	ldr	r2, [pc, #12]	; (800602c <FLASH_FlushCaches+0x84>)
 800601e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006022:	6013      	str	r3, [r2, #0]
  }
#endif
}
 8006024:	bf00      	nop
 8006026:	46bd      	mov	sp, r7
 8006028:	bc80      	pop	{r7}
 800602a:	4770      	bx	lr
 800602c:	58004000 	.word	0x58004000

08006030 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8006030:	b480      	push	{r7}
 8006032:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8006034:	4b05      	ldr	r3, [pc, #20]	; (800604c <FLASH_AcknowledgePageErase+0x1c>)
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <FLASH_AcknowledgePageErase+0x1c>)
 800603a:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800603e:	f023 0302 	bic.w	r3, r3, #2
 8006042:	6153      	str	r3, [r2, #20]
#endif
}
 8006044:	bf00      	nop
 8006046:	46bd      	mov	sp, r7
 8006048:	bc80      	pop	{r7}
 800604a:	4770      	bx	lr
 800604c:	58004000 	.word	0x58004000

08006050 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800605e:	e140      	b.n	80062e2 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	2101      	movs	r1, #1
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	fa01 f303 	lsl.w	r3, r1, r3
 800606c:	4013      	ands	r3, r2
 800606e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	f000 8132 	beq.w	80062dc <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f003 0303 	and.w	r3, r3, #3
 8006080:	2b01      	cmp	r3, #1
 8006082:	d005      	beq.n	8006090 <HAL_GPIO_Init+0x40>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f003 0303 	and.w	r3, r3, #3
 800608c:	2b02      	cmp	r3, #2
 800608e:	d130      	bne.n	80060f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	2203      	movs	r2, #3
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	43db      	mvns	r3, r3
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	4013      	ands	r3, r2
 80060a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060c6:	2201      	movs	r2, #1
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	fa02 f303 	lsl.w	r3, r2, r3
 80060ce:	43db      	mvns	r3, r3
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	4013      	ands	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	f003 0201 	and.w	r2, r3, #1
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	693a      	ldr	r2, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d017      	beq.n	800612e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2203      	movs	r2, #3
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4013      	ands	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	689a      	ldr	r2, [r3, #8]
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	693a      	ldr	r2, [r7, #16]
 8006124:	4313      	orrs	r3, r2
 8006126:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d123      	bne.n	8006182 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	08da      	lsrs	r2, r3, #3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3208      	adds	r2, #8
 8006142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006146:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	220f      	movs	r2, #15
 8006152:	fa02 f303 	lsl.w	r3, r2, r3
 8006156:	43db      	mvns	r3, r3
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4013      	ands	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	691a      	ldr	r2, [r3, #16]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	fa02 f303 	lsl.w	r3, r2, r3
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	08da      	lsrs	r2, r3, #3
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	3208      	adds	r2, #8
 800617c:	6939      	ldr	r1, [r7, #16]
 800617e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	2203      	movs	r2, #3
 800618e:	fa02 f303 	lsl.w	r3, r2, r3
 8006192:	43db      	mvns	r3, r3
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	4013      	ands	r3, r2
 8006198:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f003 0203 	and.w	r2, r3, #3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	fa02 f303 	lsl.w	r3, r2, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 808c 	beq.w	80062dc <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80061c4:	4a4e      	ldr	r2, [pc, #312]	; (8006300 <HAL_GPIO_Init+0x2b0>)
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	089b      	lsrs	r3, r3, #2
 80061ca:	3302      	adds	r3, #2
 80061cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f003 0303 	and.w	r3, r3, #3
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	2207      	movs	r2, #7
 80061dc:	fa02 f303 	lsl.w	r3, r2, r3
 80061e0:	43db      	mvns	r3, r3
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	4013      	ands	r3, r2
 80061e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061ee:	d00d      	beq.n	800620c <HAL_GPIO_Init+0x1bc>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a44      	ldr	r2, [pc, #272]	; (8006304 <HAL_GPIO_Init+0x2b4>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d007      	beq.n	8006208 <HAL_GPIO_Init+0x1b8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a43      	ldr	r2, [pc, #268]	; (8006308 <HAL_GPIO_Init+0x2b8>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_GPIO_Init+0x1b4>
 8006200:	2302      	movs	r3, #2
 8006202:	e004      	b.n	800620e <HAL_GPIO_Init+0x1be>
 8006204:	2307      	movs	r3, #7
 8006206:	e002      	b.n	800620e <HAL_GPIO_Init+0x1be>
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <HAL_GPIO_Init+0x1be>
 800620c:	2300      	movs	r3, #0
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	f002 0203 	and.w	r2, r2, #3
 8006214:	0092      	lsls	r2, r2, #2
 8006216:	4093      	lsls	r3, r2
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800621e:	4938      	ldr	r1, [pc, #224]	; (8006300 <HAL_GPIO_Init+0x2b0>)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	089b      	lsrs	r3, r3, #2
 8006224:	3302      	adds	r3, #2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800622c:	4b37      	ldr	r3, [pc, #220]	; (800630c <HAL_GPIO_Init+0x2bc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	43db      	mvns	r3, r3
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	4013      	ands	r3, r2
 800623a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685b      	ldr	r3, [r3, #4]
 8006240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d003      	beq.n	8006250 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006250:	4a2e      	ldr	r2, [pc, #184]	; (800630c <HAL_GPIO_Init+0x2bc>)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006256:	4b2d      	ldr	r3, [pc, #180]	; (800630c <HAL_GPIO_Init+0x2bc>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	43db      	mvns	r3, r3
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4013      	ands	r3, r2
 8006264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d003      	beq.n	800627a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8006272:	693a      	ldr	r2, [r7, #16]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	4313      	orrs	r3, r2
 8006278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800627a:	4a24      	ldr	r2, [pc, #144]	; (800630c <HAL_GPIO_Init+0x2bc>)
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8006280:	4b22      	ldr	r3, [pc, #136]	; (800630c <HAL_GPIO_Init+0x2bc>)
 8006282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006286:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d003      	beq.n	80062a6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80062a6:	4a19      	ldr	r2, [pc, #100]	; (800630c <HAL_GPIO_Init+0x2bc>)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80062ae:	4b17      	ldr	r3, [pc, #92]	; (800630c <HAL_GPIO_Init+0x2bc>)
 80062b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062b4:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	43db      	mvns	r3, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4013      	ands	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80062d4:	4a0d      	ldr	r2, [pc, #52]	; (800630c <HAL_GPIO_Init+0x2bc>)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3301      	adds	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	fa22 f303 	lsr.w	r3, r2, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f aeb7 	bne.w	8006060 <HAL_GPIO_Init+0x10>
  }
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	371c      	adds	r7, #28
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	40010000 	.word	0x40010000
 8006304:	48000400 	.word	0x48000400
 8006308:	48000800 	.word	0x48000800
 800630c:	58000800 	.word	0x58000800

08006310 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800631e:	e0af      	b.n	8006480 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8006320:	2201      	movs	r2, #1
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	fa02 f303 	lsl.w	r3, r2, r3
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	4013      	ands	r3, r2
 800632c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 80a2 	beq.w	800647a <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8006336:	4a59      	ldr	r2, [pc, #356]	; (800649c <HAL_GPIO_DeInit+0x18c>)
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	089b      	lsrs	r3, r3, #2
 800633c:	3302      	adds	r3, #2
 800633e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006342:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	f003 0303 	and.w	r3, r3, #3
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	2207      	movs	r2, #7
 800634e:	fa02 f303 	lsl.w	r3, r2, r3
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	4013      	ands	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800635e:	d00d      	beq.n	800637c <HAL_GPIO_DeInit+0x6c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a4f      	ldr	r2, [pc, #316]	; (80064a0 <HAL_GPIO_DeInit+0x190>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d007      	beq.n	8006378 <HAL_GPIO_DeInit+0x68>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a4e      	ldr	r2, [pc, #312]	; (80064a4 <HAL_GPIO_DeInit+0x194>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d101      	bne.n	8006374 <HAL_GPIO_DeInit+0x64>
 8006370:	2302      	movs	r3, #2
 8006372:	e004      	b.n	800637e <HAL_GPIO_DeInit+0x6e>
 8006374:	2307      	movs	r3, #7
 8006376:	e002      	b.n	800637e <HAL_GPIO_DeInit+0x6e>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_GPIO_DeInit+0x6e>
 800637c:	2300      	movs	r3, #0
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	0092      	lsls	r2, r2, #2
 8006386:	4093      	lsls	r3, r2
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	429a      	cmp	r2, r3
 800638c:	d136      	bne.n	80063fc <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 800638e:	4b46      	ldr	r3, [pc, #280]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 8006390:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	43db      	mvns	r3, r3
 8006398:	4943      	ldr	r1, [pc, #268]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 800639a:	4013      	ands	r3, r2
 800639c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80063a0:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063a2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	493f      	ldr	r1, [pc, #252]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	43db      	mvns	r3, r3
 80063ba:	493b      	ldr	r1, [pc, #236]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063bc:	4013      	ands	r3, r2
 80063be:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80063c0:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	43db      	mvns	r3, r3
 80063c8:	4937      	ldr	r1, [pc, #220]	; (80064a8 <HAL_GPIO_DeInit+0x198>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	f003 0303 	and.w	r3, r3, #3
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	2207      	movs	r2, #7
 80063d8:	fa02 f303 	lsl.w	r3, r2, r3
 80063dc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80063de:	4a2f      	ldr	r2, [pc, #188]	; (800649c <HAL_GPIO_DeInit+0x18c>)
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	089b      	lsrs	r3, r3, #2
 80063e4:	3302      	adds	r3, #2
 80063e6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	43da      	mvns	r2, r3
 80063ee:	482b      	ldr	r0, [pc, #172]	; (800649c <HAL_GPIO_DeInit+0x18c>)
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	089b      	lsrs	r3, r3, #2
 80063f4:	400a      	ands	r2, r1
 80063f6:	3302      	adds	r3, #2
 80063f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	2103      	movs	r1, #3
 8006406:	fa01 f303 	lsl.w	r3, r1, r3
 800640a:	431a      	orrs	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	08d2      	lsrs	r2, r2, #3
 8006430:	4019      	ands	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3208      	adds	r2, #8
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	2103      	movs	r1, #3
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	401a      	ands	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	2101      	movs	r1, #1
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68da      	ldr	r2, [r3, #12]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	2103      	movs	r1, #3
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60da      	str	r2, [r3, #12]
    }

    position++;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	3301      	adds	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8006480:	683a      	ldr	r2, [r7, #0]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	fa22 f303 	lsr.w	r3, r2, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	f47f af49 	bne.w	8006320 <HAL_GPIO_DeInit+0x10>
  }
}
 800648e:	bf00      	nop
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	bc80      	pop	{r7}
 8006498:	4770      	bx	lr
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	48000400 	.word	0x48000400
 80064a4:	48000800 	.word	0x48000800
 80064a8:	58000800 	.word	0x58000800

080064ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
 80064b4:	460b      	mov	r3, r1
 80064b6:	807b      	strh	r3, [r7, #2]
 80064b8:	4613      	mov	r3, r2
 80064ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064bc:	787b      	ldrb	r3, [r7, #1]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064c2:	887a      	ldrh	r2, [r7, #2]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064c8:	e002      	b.n	80064d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064ca:	887a      	ldrh	r2, [r7, #2]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e081      	b.n	80065f0 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d106      	bne.n	8006506 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f7fb fb87 	bl	8001c14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2224      	movs	r2, #36	; 0x24
 800650a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0201 	bic.w	r2, r2, #1
 800651c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685a      	ldr	r2, [r3, #4]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800652a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	689a      	ldr	r2, [r3, #8]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800653a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d107      	bne.n	8006554 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689a      	ldr	r2, [r3, #8]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006550:	609a      	str	r2, [r3, #8]
 8006552:	e006      	b.n	8006562 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006560:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d104      	bne.n	8006574 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006572:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	6812      	ldr	r2, [r2, #0]
 800657e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006582:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006586:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006596:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	691a      	ldr	r2, [r3, #16]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	695b      	ldr	r3, [r3, #20]
 80065a0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	699b      	ldr	r3, [r3, #24]
 80065a8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	430a      	orrs	r2, r1
 80065b0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69d9      	ldr	r1, [r3, #28]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a1a      	ldr	r2, [r3, #32]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	430a      	orrs	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f042 0201 	orr.w	r2, r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2220      	movs	r2, #32
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	461a      	mov	r2, r3
 8006604:	460b      	mov	r3, r1
 8006606:	817b      	strh	r3, [r7, #10]
 8006608:	4613      	mov	r3, r2
 800660a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b20      	cmp	r3, #32
 8006616:	f040 80da 	bne.w	80067ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006620:	2b01      	cmp	r3, #1
 8006622:	d101      	bne.n	8006628 <HAL_I2C_Master_Transmit+0x30>
 8006624:	2302      	movs	r3, #2
 8006626:	e0d3      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006630:	f7fc fa2e 	bl	8002a90 <HAL_GetTick>
 8006634:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	2319      	movs	r3, #25
 800663c:	2201      	movs	r2, #1
 800663e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006642:	68f8      	ldr	r0, [r7, #12]
 8006644:	f000 fedc 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d001      	beq.n	8006652 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e0be      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2221      	movs	r2, #33	; 0x21
 8006656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2210      	movs	r2, #16
 800665e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	893a      	ldrh	r2, [r7, #8]
 8006672:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800667e:	b29b      	uxth	r3, r3
 8006680:	2bff      	cmp	r3, #255	; 0xff
 8006682:	d90e      	bls.n	80066a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	22ff      	movs	r2, #255	; 0xff
 8006688:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800668e:	b2da      	uxtb	r2, r3
 8006690:	8979      	ldrh	r1, [r7, #10]
 8006692:	4b51      	ldr	r3, [pc, #324]	; (80067d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f001 f8c6 	bl	800782c <I2C_TransferConfig>
 80066a0:	e06c      	b.n	800677c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066b0:	b2da      	uxtb	r2, r3
 80066b2:	8979      	ldrh	r1, [r7, #10]
 80066b4:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80066bc:	68f8      	ldr	r0, [r7, #12]
 80066be:	f001 f8b5 	bl	800782c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80066c2:	e05b      	b.n	800677c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	6a39      	ldr	r1, [r7, #32]
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fed9 	bl	8007480 <I2C_WaitOnTXISFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	e07b      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	3b01      	subs	r3, #1
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670c:	b29b      	uxth	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d034      	beq.n	800677c <HAL_I2C_Master_Transmit+0x184>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d130      	bne.n	800677c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	6a3b      	ldr	r3, [r7, #32]
 8006720:	2200      	movs	r2, #0
 8006722:	2180      	movs	r1, #128	; 0x80
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fe6b 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e04d      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006738:	b29b      	uxth	r3, r3
 800673a:	2bff      	cmp	r3, #255	; 0xff
 800673c:	d90e      	bls.n	800675c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	22ff      	movs	r2, #255	; 0xff
 8006742:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006748:	b2da      	uxtb	r2, r3
 800674a:	8979      	ldrh	r1, [r7, #10]
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f001 f869 	bl	800782c <I2C_TransferConfig>
 800675a:	e00f      	b.n	800677c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800676a:	b2da      	uxtb	r2, r3
 800676c:	8979      	ldrh	r1, [r7, #10]
 800676e:	2300      	movs	r3, #0
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f001 f858 	bl	800782c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006780:	b29b      	uxth	r3, r3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d19e      	bne.n	80066c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	6a39      	ldr	r1, [r7, #32]
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	f000 feb8 	bl	8007500 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e01a      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2220      	movs	r2, #32
 80067a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	6859      	ldr	r1, [r3, #4]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	4b0b      	ldr	r3, [pc, #44]	; (80067dc <HAL_I2C_Master_Transmit+0x1e4>)
 80067ae:	400b      	ands	r3, r1
 80067b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	e000      	b.n	80067d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80067ce:	2302      	movs	r3, #2
  }
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}
 80067d8:	80002000 	.word	0x80002000
 80067dc:	fe00e800 	.word	0xfe00e800

080067e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b088      	sub	sp, #32
 80067e4:	af02      	add	r7, sp, #8
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	607a      	str	r2, [r7, #4]
 80067ea:	461a      	mov	r2, r3
 80067ec:	460b      	mov	r3, r1
 80067ee:	817b      	strh	r3, [r7, #10]
 80067f0:	4613      	mov	r3, r2
 80067f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b20      	cmp	r3, #32
 80067fe:	f040 80db 	bne.w	80069b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006808:	2b01      	cmp	r3, #1
 800680a:	d101      	bne.n	8006810 <HAL_I2C_Master_Receive+0x30>
 800680c:	2302      	movs	r3, #2
 800680e:	e0d4      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006818:	f7fc f93a 	bl	8002a90 <HAL_GetTick>
 800681c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2319      	movs	r3, #25
 8006824:	2201      	movs	r2, #1
 8006826:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fde8 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d001      	beq.n	800683a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e0bf      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2222      	movs	r2, #34	; 0x22
 800683e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2210      	movs	r2, #16
 8006846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	893a      	ldrh	r2, [r7, #8]
 800685a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006866:	b29b      	uxth	r3, r3
 8006868:	2bff      	cmp	r3, #255	; 0xff
 800686a:	d90e      	bls.n	800688a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	22ff      	movs	r2, #255	; 0xff
 8006870:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006876:	b2da      	uxtb	r2, r3
 8006878:	8979      	ldrh	r1, [r7, #10]
 800687a:	4b52      	ldr	r3, [pc, #328]	; (80069c4 <HAL_I2C_Master_Receive+0x1e4>)
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 ffd2 	bl	800782c <I2C_TransferConfig>
 8006888:	e06d      	b.n	8006966 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688e:	b29a      	uxth	r2, r3
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006898:	b2da      	uxtb	r2, r3
 800689a:	8979      	ldrh	r1, [r7, #10]
 800689c:	4b49      	ldr	r3, [pc, #292]	; (80069c4 <HAL_I2C_Master_Receive+0x1e4>)
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 ffc1 	bl	800782c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80068aa:	e05c      	b.n	8006966 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	6a39      	ldr	r1, [r7, #32]
 80068b0:	68f8      	ldr	r0, [r7, #12]
 80068b2:	f000 fe61 	bl	8007578 <I2C_WaitOnRXNEFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e07c      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	1c5a      	adds	r2, r3, #1
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	3b01      	subs	r3, #1
 80068ec:	b29a      	uxth	r2, r3
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d034      	beq.n	8006966 <HAL_I2C_Master_Receive+0x186>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006900:	2b00      	cmp	r3, #0
 8006902:	d130      	bne.n	8006966 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	2200      	movs	r2, #0
 800690c:	2180      	movs	r1, #128	; 0x80
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 fd76 	bl	8007400 <I2C_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d001      	beq.n	800691e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e04d      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006922:	b29b      	uxth	r3, r3
 8006924:	2bff      	cmp	r3, #255	; 0xff
 8006926:	d90e      	bls.n	8006946 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006932:	b2da      	uxtb	r2, r3
 8006934:	8979      	ldrh	r1, [r7, #10]
 8006936:	2300      	movs	r3, #0
 8006938:	9300      	str	r3, [sp, #0]
 800693a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 ff74 	bl	800782c <I2C_TransferConfig>
 8006944:	e00f      	b.n	8006966 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694a:	b29a      	uxth	r2, r3
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006954:	b2da      	uxtb	r2, r3
 8006956:	8979      	ldrh	r1, [r7, #10]
 8006958:	2300      	movs	r3, #0
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006960:	68f8      	ldr	r0, [r7, #12]
 8006962:	f000 ff63 	bl	800782c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d19d      	bne.n	80068ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	6a39      	ldr	r1, [r7, #32]
 8006974:	68f8      	ldr	r0, [r7, #12]
 8006976:	f000 fdc3 	bl	8007500 <I2C_WaitOnSTOPFlagUntilTimeout>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d001      	beq.n	8006984 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	e01a      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2220      	movs	r2, #32
 800698a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6859      	ldr	r1, [r3, #4]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	4b0c      	ldr	r3, [pc, #48]	; (80069c8 <HAL_I2C_Master_Receive+0x1e8>)
 8006998:	400b      	ands	r3, r1
 800699a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2220      	movs	r2, #32
 80069a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069b4:	2300      	movs	r3, #0
 80069b6:	e000      	b.n	80069ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80069b8:	2302      	movs	r3, #2
  }
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	80002400 	.word	0x80002400
 80069c8:	fe00e800 	.word	0xfe00e800

080069cc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	699b      	ldr	r3, [r3, #24]
 80069da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d005      	beq.n	80069f8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
  }
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b086      	sub	sp, #24
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00f      	beq.n	8006a42 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00a      	beq.n	8006a42 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a30:	f043 0201 	orr.w	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a40:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d00f      	beq.n	8006a6c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a5a:	f043 0208 	orr.w	r2, r3, #8
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a6a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00f      	beq.n	8006a96 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00a      	beq.n	8006a96 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	f043 0202 	orr.w	r2, r3, #2
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a94:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f003 030b 	and.w	r3, r3, #11
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fb71 	bl	8007190 <I2C_ITError>
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3718      	adds	r7, #24
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b083      	sub	sp, #12
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	70fb      	strb	r3, [r7, #3]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bc80      	pop	{r7}
 8006af2:	4770      	bx	lr

08006af4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <I2C_Slave_ISR_IT+0x24>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e0e1      	b.n	8006d12 <I2C_Slave_ISR_IT+0x1e8>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f003 0320 	and.w	r3, r3, #32
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d008      	beq.n	8006b72 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d003      	beq.n	8006b72 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006b6a:	6939      	ldr	r1, [r7, #16]
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 f9b5 	bl	8006edc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	f003 0310 	and.w	r3, r3, #16
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d04b      	beq.n	8006c14 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d046      	beq.n	8006c14 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d128      	bne.n	8006be2 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	2b28      	cmp	r3, #40	; 0x28
 8006b9a:	d108      	bne.n	8006bae <I2C_Slave_ISR_IT+0x84>
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba2:	d104      	bne.n	8006bae <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006ba4:	6939      	ldr	r1, [r7, #16]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fa9e 	bl	80070e8 <I2C_ITListenCplt>
 8006bac:	e031      	b.n	8006c12 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	2b29      	cmp	r3, #41	; 0x29
 8006bb8:	d10e      	bne.n	8006bd8 <I2C_Slave_ISR_IT+0xae>
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006bc0:	d00a      	beq.n	8006bd8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f000 fbd7 	bl	800737e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f000 f926 	bl	8006e22 <I2C_ITSlaveSeqCplt>
 8006bd6:	e01c      	b.n	8006c12 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2210      	movs	r2, #16
 8006bde:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006be0:	e08f      	b.n	8006d02 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2210      	movs	r2, #16
 8006be8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bee:	f043 0204 	orr.w	r2, r3, #4
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d003      	beq.n	8006c04 <I2C_Slave_ISR_IT+0xda>
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c02:	d17e      	bne.n	8006d02 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c08:	4619      	mov	r1, r3
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 fac0 	bl	8007190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006c10:	e077      	b.n	8006d02 <I2C_Slave_ISR_IT+0x1d8>
 8006c12:	e076      	b.n	8006d02 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f003 0304 	and.w	r3, r3, #4
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d02f      	beq.n	8006c7e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d02a      	beq.n	8006c7e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	1c5a      	adds	r2, r3, #1
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d14b      	bne.n	8006d06 <I2C_Slave_ISR_IT+0x1dc>
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c74:	d047      	beq.n	8006d06 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f8d3 	bl	8006e22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006c7c:	e043      	b.n	8006d06 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f003 0308 	and.w	r3, r3, #8
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d009      	beq.n	8006c9c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d004      	beq.n	8006c9c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006c92:	6939      	ldr	r1, [r7, #16]
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f000 f840 	bl	8006d1a <I2C_ITAddrCplt>
 8006c9a:	e035      	b.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f003 0302 	and.w	r3, r3, #2
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d030      	beq.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d02b      	beq.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d018      	beq.n	8006cec <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cea:	e00d      	b.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cf2:	d002      	beq.n	8006cfa <I2C_Slave_ISR_IT+0x1d0>
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006cfa:	68f8      	ldr	r0, [r7, #12]
 8006cfc:	f000 f891 	bl	8006e22 <I2C_ITSlaveSeqCplt>
 8006d00:	e002      	b.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8006d02:	bf00      	nop
 8006d04:	e000      	b.n	8006d08 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8006d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d30:	2b28      	cmp	r3, #40	; 0x28
 8006d32:	d16a      	bne.n	8006e0a <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	699b      	ldr	r3, [r3, #24]
 8006d3a:	0c1b      	lsrs	r3, r3, #16
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	0c1b      	lsrs	r3, r3, #16
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d52:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d60:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006d6e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d138      	bne.n	8006dea <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006d78:	897b      	ldrh	r3, [r7, #10]
 8006d7a:	09db      	lsrs	r3, r3, #7
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	89bb      	ldrh	r3, [r7, #12]
 8006d80:	4053      	eors	r3, r2
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	f003 0306 	and.w	r3, r3, #6
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d11c      	bne.n	8006dc6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006d8c:	897b      	ldrh	r3, [r7, #10]
 8006d8e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d94:	1c5a      	adds	r2, r3, #1
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d9e:	2b02      	cmp	r3, #2
 8006da0:	d13b      	bne.n	8006e1a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2208      	movs	r2, #8
 8006dae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006db8:	89ba      	ldrh	r2, [r7, #12]
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	4619      	mov	r1, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f7ff fe8b 	bl	8006ada <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006dc4:	e029      	b.n	8006e1a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006dc6:	893b      	ldrh	r3, [r7, #8]
 8006dc8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fd5c 	bl	800788c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ddc:	89ba      	ldrh	r2, [r7, #12]
 8006dde:	7bfb      	ldrb	r3, [r7, #15]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff fe79 	bl	8006ada <HAL_I2C_AddrCallback>
}
 8006de8:	e017      	b.n	8006e1a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fd4c 	bl	800788c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006dfc:	89ba      	ldrh	r2, [r7, #12]
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	4619      	mov	r1, r3
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f7ff fe69 	bl	8006ada <HAL_I2C_AddrCallback>
}
 8006e08:	e007      	b.n	8006e1a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2208      	movs	r2, #8
 8006e10:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b084      	sub	sp, #16
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d008      	beq.n	8006e56 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e52:	601a      	str	r2, [r3, #0]
 8006e54:	e00c      	b.n	8006e70 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d007      	beq.n	8006e70 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e6e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b29      	cmp	r3, #41	; 0x29
 8006e7a:	d112      	bne.n	8006ea2 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2228      	movs	r2, #40	; 0x28
 8006e80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2221      	movs	r2, #33	; 0x21
 8006e88:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006e8a:	2101      	movs	r1, #1
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 fcfd 	bl	800788c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fe0b 	bl	8006ab6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ea0:	e017      	b.n	8006ed2 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8006eac:	d111      	bne.n	8006ed2 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2228      	movs	r2, #40	; 0x28
 8006eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2222      	movs	r2, #34	; 0x22
 8006eba:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 fce4 	bl	800788c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fdfb 	bl	8006ac8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
	...

08006edc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ef8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2220      	movs	r2, #32
 8006f00:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b21      	cmp	r3, #33	; 0x21
 8006f06:	d002      	beq.n	8006f0e <I2C_ITSlaveCplt+0x32>
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b29      	cmp	r3, #41	; 0x29
 8006f0c:	d108      	bne.n	8006f20 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006f0e:	f248 0101 	movw	r1, #32769	; 0x8001
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fcba 	bl	800788c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2221      	movs	r2, #33	; 0x21
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8006f1e:	e00d      	b.n	8006f3c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b22      	cmp	r3, #34	; 0x22
 8006f24:	d002      	beq.n	8006f2c <I2C_ITSlaveCplt+0x50>
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	2b2a      	cmp	r3, #42	; 0x2a
 8006f2a:	d107      	bne.n	8006f3c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006f2c:	f248 0102 	movw	r1, #32770	; 0x8002
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fcab 	bl	800788c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2222      	movs	r2, #34	; 0x22
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6859      	ldr	r1, [r3, #4]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b62      	ldr	r3, [pc, #392]	; (80070e0 <I2C_ITSlaveCplt+0x204>)
 8006f58:	400b      	ands	r3, r1
 8006f5a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 fa0e 	bl	800737e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d013      	beq.n	8006f94 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f7a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d01f      	beq.n	8006fc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f92:	e017      	b.n	8006fc4 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d012      	beq.n	8006fc4 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006fac:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d006      	beq.n	8006fc4 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f003 0304 	and.w	r3, r3, #4
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d020      	beq.n	8007010 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	f023 0304 	bic.w	r3, r3, #4
 8006fd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00c      	beq.n	8007010 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007006:	b29b      	uxth	r3, r3
 8007008:	3b01      	subs	r3, #1
 800700a:	b29a      	uxth	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007014:	b29b      	uxth	r3, r3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d005      	beq.n	8007026 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800701e:	f043 0204 	orr.w	r2, r3, #4
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007038:	2b00      	cmp	r3, #0
 800703a:	d010      	beq.n	800705e <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007040:	4619      	mov	r1, r3
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f8a4 	bl	8007190 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800704e:	b2db      	uxtb	r3, r3
 8007050:	2b28      	cmp	r3, #40	; 0x28
 8007052:	d141      	bne.n	80070d8 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007054:	6979      	ldr	r1, [r7, #20]
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f846 	bl	80070e8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800705c:	e03c      	b.n	80070d8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007062:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007066:	d014      	beq.n	8007092 <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f7ff feda 	bl	8006e22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <I2C_ITSlaveCplt+0x208>)
 8007072:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f7ff fd32 	bl	8006af4 <HAL_I2C_ListenCpltCallback>
}
 8007090:	e022      	b.n	80070d8 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007098:	b2db      	uxtb	r3, r3
 800709a:	2b22      	cmp	r3, #34	; 0x22
 800709c:	d10e      	bne.n	80070bc <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fd07 	bl	8006ac8 <HAL_I2C_SlaveRxCpltCallback>
}
 80070ba:	e00d      	b.n	80070d8 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7ff fcef 	bl	8006ab6 <HAL_I2C_SlaveTxCpltCallback>
}
 80070d8:	bf00      	nop
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	fe00e800 	.word	0xfe00e800
 80070e4:	ffff0000 	.word	0xffff0000

080070e8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a25      	ldr	r2, [pc, #148]	; (800718c <I2C_ITListenCplt+0xa4>)
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2200      	movs	r2, #0
 80070fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2220      	movs	r2, #32
 8007102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	f003 0304 	and.w	r3, r3, #4
 800711a:	2b00      	cmp	r3, #0
 800711c:	d022      	beq.n	8007164 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	b2d2      	uxtb	r2, r2
 800712a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d012      	beq.n	8007164 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007142:	3b01      	subs	r3, #1
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800714e:	b29b      	uxth	r3, r3
 8007150:	3b01      	subs	r3, #1
 8007152:	b29a      	uxth	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715c:	f043 0204 	orr.w	r2, r3, #4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007164:	f248 0103 	movw	r1, #32771	; 0x8003
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 fb8f 	bl	800788c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2210      	movs	r2, #16
 8007174:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f7ff fcb8 	bl	8006af4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007184:	bf00      	nop
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	ffff0000 	.word	0xffff0000

08007190 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a5d      	ldr	r2, [pc, #372]	; (8007324 <I2C_ITError+0x194>)
 80071ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80071c2:	7bfb      	ldrb	r3, [r7, #15]
 80071c4:	2b28      	cmp	r3, #40	; 0x28
 80071c6:	d005      	beq.n	80071d4 <I2C_ITError+0x44>
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b29      	cmp	r3, #41	; 0x29
 80071cc:	d002      	beq.n	80071d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b2a      	cmp	r3, #42	; 0x2a
 80071d2:	d10b      	bne.n	80071ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071d4:	2103      	movs	r1, #3
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fb58 	bl	800788c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2228      	movs	r2, #40	; 0x28
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	4a50      	ldr	r2, [pc, #320]	; (8007328 <I2C_ITError+0x198>)
 80071e8:	635a      	str	r2, [r3, #52]	; 0x34
 80071ea:	e011      	b.n	8007210 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80071ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 fb4b 	bl	800788c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b60      	cmp	r3, #96	; 0x60
 8007200:	d003      	beq.n	800720a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2220      	movs	r2, #32
 8007206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800721a:	2b00      	cmp	r3, #0
 800721c:	d039      	beq.n	8007292 <I2C_ITError+0x102>
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b11      	cmp	r3, #17
 8007222:	d002      	beq.n	800722a <I2C_ITError+0x9a>
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	2b21      	cmp	r3, #33	; 0x21
 8007228:	d133      	bne.n	8007292 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007238:	d107      	bne.n	800724a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007248:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724e:	4618      	mov	r0, r3
 8007250:	f7fe fb9c 	bl	800598c <HAL_DMA_GetState>
 8007254:	4603      	mov	r3, r0
 8007256:	2b01      	cmp	r3, #1
 8007258:	d017      	beq.n	800728a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725e:	4a33      	ldr	r2, [pc, #204]	; (800732c <I2C_ITError+0x19c>)
 8007260:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fa66 	bl	8005740 <HAL_DMA_Abort_IT>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04d      	beq.n	8007316 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007284:	4610      	mov	r0, r2
 8007286:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007288:	e045      	b.n	8007316 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f850 	bl	8007330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007290:	e041      	b.n	8007316 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d039      	beq.n	800730e <I2C_ITError+0x17e>
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b12      	cmp	r3, #18
 800729e:	d002      	beq.n	80072a6 <I2C_ITError+0x116>
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2b22      	cmp	r3, #34	; 0x22
 80072a4:	d133      	bne.n	800730e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072b4:	d107      	bne.n	80072c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80072c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fb5e 	bl	800598c <HAL_DMA_GetState>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d017      	beq.n	8007306 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	4a14      	ldr	r2, [pc, #80]	; (800732c <I2C_ITError+0x19c>)
 80072dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	4618      	mov	r0, r3
 80072ec:	f7fe fa28 	bl	8005740 <HAL_DMA_Abort_IT>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d011      	beq.n	800731a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007300:	4610      	mov	r0, r2
 8007302:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007304:	e009      	b.n	800731a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f812 	bl	8007330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800730c:	e005      	b.n	800731a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f80e 	bl	8007330 <I2C_TreatErrorCallback>
  }
}
 8007314:	e002      	b.n	800731c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007316:	bf00      	nop
 8007318:	e000      	b.n	800731c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800731a:	bf00      	nop
}
 800731c:	bf00      	nop
 800731e:	3710      	adds	r7, #16
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	ffff0000 	.word	0xffff0000
 8007328:	08006b2b 	.word	0x08006b2b
 800732c:	080073c5 	.word	0x080073c5

08007330 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800733e:	b2db      	uxtb	r3, r3
 8007340:	2b60      	cmp	r3, #96	; 0x60
 8007342:	d10e      	bne.n	8007362 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2220      	movs	r2, #32
 8007348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fbdc 	bl	8006b18 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007360:	e009      	b.n	8007376 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff fbc8 	bl	8006b06 <HAL_I2C_ErrorCallback>
}
 8007376:	bf00      	nop
 8007378:	3708      	adds	r7, #8
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	f003 0302 	and.w	r3, r3, #2
 8007390:	2b02      	cmp	r3, #2
 8007392:	d103      	bne.n	800739c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2200      	movs	r2, #0
 800739a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d007      	beq.n	80073ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	699a      	ldr	r2, [r3, #24]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f042 0201 	orr.w	r2, r2, #1
 80073b8:	619a      	str	r2, [r3, #24]
  }
}
 80073ba:	bf00      	nop
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	bc80      	pop	{r7}
 80073c2:	4770      	bx	lr

080073c4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	2200      	movs	r2, #0
 80073e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ee:	2200      	movs	r2, #0
 80073f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff ff9c 	bl	8007330 <I2C_TreatErrorCallback>
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	603b      	str	r3, [r7, #0]
 800740c:	4613      	mov	r3, r2
 800740e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007410:	e022      	b.n	8007458 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007418:	d01e      	beq.n	8007458 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800741a:	f7fb fb39 	bl	8002a90 <HAL_GetTick>
 800741e:	4602      	mov	r2, r0
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d302      	bcc.n	8007430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d113      	bne.n	8007458 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007434:	f043 0220 	orr.w	r2, r3, #32
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e00f      	b.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4013      	ands	r3, r2
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	429a      	cmp	r2, r3
 8007466:	bf0c      	ite	eq
 8007468:	2301      	moveq	r3, #1
 800746a:	2300      	movne	r3, #0
 800746c:	b2db      	uxtb	r3, r3
 800746e:	461a      	mov	r2, r3
 8007470:	79fb      	ldrb	r3, [r7, #7]
 8007472:	429a      	cmp	r2, r3
 8007474:	d0cd      	beq.n	8007412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007476:	2300      	movs	r3, #0
}
 8007478:	4618      	mov	r0, r3
 800747a:	3710      	adds	r7, #16
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}

08007480 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b084      	sub	sp, #16
 8007484:	af00      	add	r7, sp, #0
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800748c:	e02c      	b.n	80074e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	68b9      	ldr	r1, [r7, #8]
 8007492:	68f8      	ldr	r0, [r7, #12]
 8007494:	f000 f8ea 	bl	800766c <I2C_IsErrorOccurred>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e02a      	b.n	80074f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a8:	d01e      	beq.n	80074e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fb faf1 	bl	8002a90 <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d113      	bne.n	80074e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c4:	f043 0220 	orr.w	r2, r3, #32
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e007      	b.n	80074f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d1cb      	bne.n	800748e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800750c:	e028      	b.n	8007560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	68b9      	ldr	r1, [r7, #8]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f8aa 	bl	800766c <I2C_IsErrorOccurred>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d001      	beq.n	8007522 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e026      	b.n	8007570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007522:	f7fb fab5 	bl	8002a90 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	d302      	bcc.n	8007538 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d113      	bne.n	8007560 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	f043 0220 	orr.w	r2, r3, #32
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	e007      	b.n	8007570 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b20      	cmp	r3, #32
 800756c:	d1cf      	bne.n	800750e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800756e:	2300      	movs	r3, #0
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007584:	e064      	b.n	8007650 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	68b9      	ldr	r1, [r7, #8]
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 f86e 	bl	800766c <I2C_IsErrorOccurred>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e062      	b.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	699b      	ldr	r3, [r3, #24]
 80075a0:	f003 0320 	and.w	r3, r3, #32
 80075a4:	2b20      	cmp	r3, #32
 80075a6:	d138      	bne.n	800761a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b04      	cmp	r3, #4
 80075b4:	d105      	bne.n	80075c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d001      	beq.n	80075c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e04e      	b.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	f003 0310 	and.w	r3, r3, #16
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d107      	bne.n	80075e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2210      	movs	r2, #16
 80075d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2204      	movs	r2, #4
 80075dc:	645a      	str	r2, [r3, #68]	; 0x44
 80075de:	e002      	b.n	80075e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2200      	movs	r2, #0
 80075e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2220      	movs	r2, #32
 80075ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6859      	ldr	r1, [r3, #4]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	4b1b      	ldr	r3, [pc, #108]	; (8007668 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80075fa:	400b      	ands	r3, r1
 80075fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e022      	b.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800761a:	f7fb fa39 	bl	8002a90 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	68ba      	ldr	r2, [r7, #8]
 8007626:	429a      	cmp	r2, r3
 8007628:	d302      	bcc.n	8007630 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10f      	bne.n	8007650 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	f043 0220 	orr.w	r2, r3, #32
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2220      	movs	r2, #32
 8007640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e007      	b.n	8007660 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	f003 0304 	and.w	r3, r3, #4
 800765a:	2b04      	cmp	r3, #4
 800765c:	d193      	bne.n	8007586 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	fe00e800 	.word	0xfe00e800

0800766c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b08a      	sub	sp, #40	; 0x28
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007678:	2300      	movs	r3, #0
 800767a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	f003 0310 	and.w	r3, r3, #16
 8007694:	2b00      	cmp	r3, #0
 8007696:	d068      	beq.n	800776a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2210      	movs	r2, #16
 800769e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076a0:	e049      	b.n	8007736 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a8:	d045      	beq.n	8007736 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80076aa:	f7fb f9f1 	bl	8002a90 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d302      	bcc.n	80076c0 <I2C_IsErrorOccurred+0x54>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d13a      	bne.n	8007736 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80076ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80076d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699b      	ldr	r3, [r3, #24]
 80076da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e2:	d121      	bne.n	8007728 <I2C_IsErrorOccurred+0xbc>
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ea:	d01d      	beq.n	8007728 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80076ec:	7cfb      	ldrb	r3, [r7, #19]
 80076ee:	2b20      	cmp	r3, #32
 80076f0:	d01a      	beq.n	8007728 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685a      	ldr	r2, [r3, #4]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007700:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007702:	f7fb f9c5 	bl	8002a90 <HAL_GetTick>
 8007706:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007708:	e00e      	b.n	8007728 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800770a:	f7fb f9c1 	bl	8002a90 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b19      	cmp	r3, #25
 8007716:	d907      	bls.n	8007728 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	f043 0320 	orr.w	r3, r3, #32
 800771e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007726:	e006      	b.n	8007736 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	f003 0320 	and.w	r3, r3, #32
 8007732:	2b20      	cmp	r3, #32
 8007734:	d1e9      	bne.n	800770a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b20      	cmp	r3, #32
 8007742:	d003      	beq.n	800774c <I2C_IsErrorOccurred+0xe0>
 8007744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007748:	2b00      	cmp	r3, #0
 800774a:	d0aa      	beq.n	80076a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800774c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2220      	movs	r2, #32
 800775a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f043 0304 	orr.w	r3, r3, #4
 8007762:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	699b      	ldr	r3, [r3, #24]
 8007770:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800778c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00b      	beq.n	80077b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	f043 0308 	orr.w	r3, r3, #8
 80077a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00b      	beq.n	80077d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	f043 0302 	orr.w	r3, r3, #2
 80077c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80077d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01c      	beq.n	800781a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f7ff fdcc 	bl	800737e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	6859      	ldr	r1, [r3, #4]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <I2C_IsErrorOccurred+0x1bc>)
 80077f2:	400b      	ands	r3, r1
 80077f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	431a      	orrs	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2220      	movs	r2, #32
 8007806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2200      	movs	r2, #0
 8007816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800781a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800781e:	4618      	mov	r0, r3
 8007820:	3728      	adds	r7, #40	; 0x28
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	fe00e800 	.word	0xfe00e800

0800782c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	607b      	str	r3, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	817b      	strh	r3, [r7, #10]
 800783a:	4613      	mov	r3, r2
 800783c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800783e:	897b      	ldrh	r3, [r7, #10]
 8007840:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007844:	7a7b      	ldrb	r3, [r7, #9]
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800784c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007852:	6a3b      	ldr	r3, [r7, #32]
 8007854:	4313      	orrs	r3, r2
 8007856:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800785a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	0d5b      	lsrs	r3, r3, #21
 8007866:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800786a:	4b07      	ldr	r3, [pc, #28]	; (8007888 <I2C_TransferConfig+0x5c>)
 800786c:	430b      	orrs	r3, r1
 800786e:	43db      	mvns	r3, r3
 8007870:	ea02 0103 	and.w	r1, r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	697a      	ldr	r2, [r7, #20]
 800787a:	430a      	orrs	r2, r1
 800787c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800787e:	bf00      	nop
 8007880:	371c      	adds	r7, #28
 8007882:	46bd      	mov	sp, r7
 8007884:	bc80      	pop	{r7}
 8007886:	4770      	bx	lr
 8007888:	03ff63ff 	.word	0x03ff63ff

0800788c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007898:	2300      	movs	r3, #0
 800789a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800789c:	887b      	ldrh	r3, [r7, #2]
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d00f      	beq.n	80078c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80078ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078ba:	2b28      	cmp	r3, #40	; 0x28
 80078bc:	d003      	beq.n	80078c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80078c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078c6:	887b      	ldrh	r3, [r7, #2]
 80078c8:	f003 0302 	and.w	r3, r3, #2
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80078d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80078e4:	2b28      	cmp	r3, #40	; 0x28
 80078e6:	d003      	beq.n	80078f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80078ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80078f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da03      	bge.n	8007900 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80078fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007900:	887b      	ldrh	r3, [r7, #2]
 8007902:	2b10      	cmp	r3, #16
 8007904:	d103      	bne.n	800790e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800790c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800790e:	887b      	ldrh	r3, [r7, #2]
 8007910:	2b20      	cmp	r3, #32
 8007912:	d103      	bne.n	800791c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f043 0320 	orr.w	r3, r3, #32
 800791a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800791c:	887b      	ldrh	r3, [r7, #2]
 800791e:	2b40      	cmp	r3, #64	; 0x40
 8007920:	d103      	bne.n	800792a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007928:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	6819      	ldr	r1, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	43da      	mvns	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	400a      	ands	r2, r1
 800793a:	601a      	str	r2, [r3, #0]
}
 800793c:	bf00      	nop
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	bc80      	pop	{r7}
 8007944:	4770      	bx	lr

08007946 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007956:	b2db      	uxtb	r3, r3
 8007958:	2b20      	cmp	r3, #32
 800795a:	d138      	bne.n	80079ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007962:	2b01      	cmp	r3, #1
 8007964:	d101      	bne.n	800796a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007966:	2302      	movs	r3, #2
 8007968:	e032      	b.n	80079d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0201 	bic.w	r2, r2, #1
 8007988:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007998:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6819      	ldr	r1, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f042 0201 	orr.w	r2, r2, #1
 80079b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2220      	movs	r2, #32
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	e000      	b.n	80079d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80079ce:	2302      	movs	r3, #2
  }
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr

080079da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80079da:	b480      	push	{r7}
 80079dc:	b085      	sub	sp, #20
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ea:	b2db      	uxtb	r3, r3
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d139      	bne.n	8007a64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d101      	bne.n	80079fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80079fa:	2302      	movs	r3, #2
 80079fc:	e033      	b.n	8007a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2201      	movs	r2, #1
 8007a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2224      	movs	r2, #36	; 0x24
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f022 0201 	bic.w	r2, r2, #1
 8007a1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007a2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	021b      	lsls	r3, r3, #8
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f042 0201 	orr.w	r2, r2, #1
 8007a4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2220      	movs	r2, #32
 8007a54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e000      	b.n	8007a66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007a64:	2302      	movs	r3, #2
  }
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3714      	adds	r7, #20
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bc80      	pop	{r7}
 8007a6e:	4770      	bx	lr

08007a70 <LL_RCC_SetLPTIMClockSource>:
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a7c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0c1b      	lsrs	r3, r3, #16
 8007a84:	041b      	lsls	r3, r3, #16
 8007a86:	43db      	mvns	r3, r3
 8007a88:	401a      	ands	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	041b      	lsls	r3, r3, #16
 8007a8e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a92:	4313      	orrs	r3, r2
 8007a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8007a98:	bf00      	nop
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bc80      	pop	{r7}
 8007aa0:	4770      	bx	lr

08007aa2 <LL_RCC_GetLPTIMClockSource>:
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 8007aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	0c1a      	lsrs	r2, r3, #16
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4313      	orrs	r3, r2
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr

08007ac6 <LL_APB1_GRP1_ForceReset>:
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8007ace:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bc80      	pop	{r7}
 8007ae6:	4770      	bx	lr

08007ae8 <LL_APB1_GRP2_ForceReset>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8007af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007af6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bc80      	pop	{r7}
 8007b08:	4770      	bx	lr

08007b0a <LL_APB1_GRP1_ReleaseReset>:
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8007b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	43db      	mvns	r3, r3
 8007b1c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b20:	4013      	ands	r3, r2
 8007b22:	638b      	str	r3, [r1, #56]	; 0x38
}
 8007b24:	bf00      	nop
 8007b26:	370c      	adds	r7, #12
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bc80      	pop	{r7}
 8007b2c:	4770      	bx	lr

08007b2e <LL_APB1_GRP2_ReleaseReset>:
{
 8007b2e:	b480      	push	{r7}
 8007b30:	b083      	sub	sp, #12
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 8007b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	43db      	mvns	r3, r3
 8007b40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007b44:	4013      	ands	r3, r2
 8007b46:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bc80      	pop	{r7}
 8007b50:	4770      	bx	lr
	...

08007b54 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d101      	bne.n	8007b66 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007b62:	2301      	movs	r3, #1
 8007b64:	e0b6      	b.n	8007cd4 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d106      	bne.n	8007b86 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7fa f8f9 	bl	8001d78 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	691a      	ldr	r2, [r3, #16]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f042 0201 	orr.w	r2, r2, #1
 8007b9c:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007ba6:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007bb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8007bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f000 fa44 	bl	8008044 <LPTIM_WaitForFlag>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b03      	cmp	r3, #3
 8007bc0:	d101      	bne.n	8007bc6 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	e086      	b.n	8007cd4 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa6c 	bl	80080a4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fa2b 	bl	8008028 <HAL_LPTIM_GetState>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d101      	bne.n	8007bdc <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e07b      	b.n	8007cd4 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d004      	beq.n	8007bf6 <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007bf4:	d103      	bne.n	8007bfe <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f023 031e 	bic.w	r3, r3, #30
 8007bfc:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d005      	beq.n	8007c16 <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007c10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007c14:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007c16:	68fa      	ldr	r2, [r7, #12]
 8007c18:	4b30      	ldr	r3, [pc, #192]	; (8007cdc <HAL_LPTIM_Init+0x188>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c26:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007c2c:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007c32:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8007c38:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d107      	bne.n	8007c58 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8007c50:	4313      	orrs	r3, r2
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d004      	beq.n	8007c6a <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007c68:	d107      	bne.n	8007c7a <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8007c72:	4313      	orrs	r3, r2
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4313      	orrs	r3, r2
 8007c78:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	695b      	ldr	r3, [r3, #20]
 8007c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00a      	beq.n	8007c9c <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c8e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8007c94:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <HAL_LPTIM_Init+0x18c>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d108      	bne.n	8007cc0 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	621a      	str	r2, [r3, #32]
 8007cbe:	e004      	b.n	8007cca <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007cc8:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3710      	adds	r7, #16
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}
 8007cdc:	ff19f1fe 	.word	0xff19f1fe
 8007ce0:	40007c00 	.word	0x40007c00

08007ce4 <HAL_LPTIM_TimeOut_Start_IT>:
  * @param  Timeout Specifies the TimeOut value to reset the counter.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_TimeOut_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Timeout)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Timeout));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a3f      	ldr	r2, [pc, #252]	; (8007dfc <HAL_LPTIM_TimeOut_Start_IT+0x118>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d108      	bne.n	8007d14 <HAL_LPTIM_TimeOut_Start_IT+0x30>
 8007d02:	4b3f      	ldr	r3, [pc, #252]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d08:	4a3d      	ldr	r2, [pc, #244]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d12:	e015      	b.n	8007d40 <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a3a      	ldr	r2, [pc, #232]	; (8007e04 <HAL_LPTIM_TimeOut_Start_IT+0x120>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d108      	bne.n	8007d30 <HAL_LPTIM_TimeOut_Start_IT+0x4c>
 8007d1e:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d24:	4a36      	ldr	r2, [pc, #216]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d2a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d2e:	e007      	b.n	8007d40 <HAL_LPTIM_TimeOut_Start_IT+0x5c>
 8007d30:	4b33      	ldr	r3, [pc, #204]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d36:	4a32      	ldr	r2, [pc, #200]	; (8007e00 <HAL_LPTIM_TimeOut_Start_IT+0x11c>)
 8007d38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007d3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Set TIMOUT bit to enable the timeout function */
  hlptim->Instance->CFGR |= LPTIM_CFGR_TIMOUT;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68da      	ldr	r2, [r3, #12]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f042 0201 	orr.w	r2, r2, #1
 8007d5e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2210      	movs	r2, #16
 8007d66:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8007d70:	2110      	movs	r1, #16
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f966 	bl	8008044 <LPTIM_WaitForFlag>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d101      	bne.n	8007d82 <HAL_LPTIM_TimeOut_Start_IT+0x9e>
  {
    return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e038      	b.n	8007df4 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2208      	movs	r2, #8
 8007d88:	605a      	str	r2, [r3, #4]

  /* Load the Timeout value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Timeout);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8007d92:	2108      	movs	r1, #8
 8007d94:	68f8      	ldr	r0, [r7, #12]
 8007d96:	f000 f955 	bl	8008044 <LPTIM_WaitForFlag>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d101      	bne.n	8007da4 <HAL_LPTIM_TimeOut_Start_IT+0xc0>
  {
    return HAL_TIMEOUT;
 8007da0:	2303      	movs	r3, #3
 8007da2:	e027      	b.n	8007df4 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 f97d 	bl	80080a4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f000 f93c 	bl	8008028 <HAL_LPTIM_GetState>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b03      	cmp	r3, #3
 8007db4:	d101      	bne.n	8007dba <HAL_LPTIM_TimeOut_Start_IT+0xd6>
  {
    return HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	e01c      	b.n	8007df4 <HAL_LPTIM_TimeOut_Start_IT+0x110>
  }

  /* Enable Compare match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_CMPM);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0201 	orr.w	r2, r2, #1
 8007dd8:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691a      	ldr	r2, [r3, #16]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0204 	orr.w	r2, r2, #4
 8007de8:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Return function status */
  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	40007c00 	.word	0x40007c00
 8007e00:	58000800 	.word	0x58000800
 8007e04:	40009400 	.word	0x40009400

08007e08 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0301 	and.w	r3, r3, #1
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d10d      	bne.n	8007e3a <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d106      	bne.n	8007e3a <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2201      	movs	r2, #1
 8007e32:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7fa f8e1 	bl	8001ffc <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d10d      	bne.n	8007e64 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d106      	bne.n	8007e64 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f89a 	bl	8007f98 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f003 0304 	and.w	r3, r3, #4
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d10d      	bne.n	8007e8e <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	f003 0304 	and.w	r3, r3, #4
 8007e7c:	2b04      	cmp	r3, #4
 8007e7e:	d106      	bne.n	8007e8e <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2204      	movs	r2, #4
 8007e86:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f88e 	bl	8007faa <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0308 	and.w	r3, r3, #8
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d10d      	bne.n	8007eb8 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 0308 	and.w	r3, r3, #8
 8007ea6:	2b08      	cmp	r3, #8
 8007ea8:	d106      	bne.n	8007eb8 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	2208      	movs	r2, #8
 8007eb0:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f882 	bl	8007fbc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b10      	cmp	r3, #16
 8007ec4:	d10d      	bne.n	8007ee2 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	f003 0310 	and.w	r3, r3, #16
 8007ed0:	2b10      	cmp	r3, #16
 8007ed2:	d106      	bne.n	8007ee2 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2210      	movs	r2, #16
 8007eda:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f876 	bl	8007fce <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 0320 	and.w	r3, r3, #32
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d10d      	bne.n	8007f0c <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	f003 0320 	and.w	r3, r3, #32
 8007efa:	2b20      	cmp	r3, #32
 8007efc:	d106      	bne.n	8007f0c <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2220      	movs	r2, #32
 8007f04:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 f86a 	bl	8007fe0 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f16:	2b40      	cmp	r3, #64	; 0x40
 8007f18:	d10d      	bne.n	8007f36 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f24:	2b40      	cmp	r3, #64	; 0x40
 8007f26:	d106      	bne.n	8007f36 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2240      	movs	r2, #64	; 0x40
 8007f2e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f85e 	bl	8007ff2 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f40:	2b80      	cmp	r3, #128	; 0x80
 8007f42:	d10d      	bne.n	8007f60 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d106      	bne.n	8007f60 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2280      	movs	r2, #128	; 0x80
 8007f58:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f852 	bl	8008004 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f6e:	d10f      	bne.n	8007f90 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f7e:	d107      	bne.n	8007f90 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007f88:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 f843 	bl	8008016 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr

08007faa <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bc80      	pop	{r7}
 8007fcc:	4770      	bx	lr

08007fce <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bc80      	pop	{r7}
 8007fde:	4770      	bx	lr

08007fe0 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bc80      	pop	{r7}
 8007ff0:	4770      	bx	lr

08007ff2 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8007ff2:	b480      	push	{r7}
 8007ff4:	b083      	sub	sp, #12
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8007ffa:	bf00      	nop
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bc80      	pop	{r7}
 8008002:	4770      	bx	lr

08008004 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	bc80      	pop	{r7}
 8008014:	4770      	bx	lr

08008016 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008036:	b2db      	uxtb	r3, r3
}
 8008038:	4618      	mov	r0, r3
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	bc80      	pop	{r7}
 8008040:	4770      	bx	lr
	...

08008044 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <LPTIM_WaitForFlag+0x58>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a12      	ldr	r2, [pc, #72]	; (80080a0 <LPTIM_WaitForFlag+0x5c>)
 8008058:	fba2 2303 	umull	r2, r3, r2, r3
 800805c:	0b9b      	lsrs	r3, r3, #14
 800805e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008062:	fb02 f303 	mul.w	r3, r2, r3
 8008066:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	3b01      	subs	r3, #1
 800806c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d101      	bne.n	8008078 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	4013      	ands	r3, r2
 8008082:	683a      	ldr	r2, [r7, #0]
 8008084:	429a      	cmp	r2, r3
 8008086:	d002      	beq.n	800808e <LPTIM_WaitForFlag+0x4a>
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1ec      	bne.n	8008068 <LPTIM_WaitForFlag+0x24>

  return result;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008090:	4618      	mov	r0, r3
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	bc80      	pop	{r7}
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	20000000 	.word	0x20000000
 80080a0:	d1b71759 	.word	0xd1b71759

080080a4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b08e      	sub	sp, #56	; 0x38
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b0:	f3ef 8310 	mrs	r3, PRIMASK
 80080b4:	613b      	str	r3, [r7, #16]
  return(result);
 80080b6:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80080b8:	633b      	str	r3, [r7, #48]	; 0x30
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f383 8810 	msr	PRIMASK, r3
}
 80080c4:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a8f      	ldr	r2, [pc, #572]	; (8008308 <LPTIM_Disable+0x264>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d015      	beq.n	80080fc <LPTIM_Disable+0x58>
 80080d0:	4a8d      	ldr	r2, [pc, #564]	; (8008308 <LPTIM_Disable+0x264>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d818      	bhi.n	8008108 <LPTIM_Disable+0x64>
 80080d6:	4a8d      	ldr	r2, [pc, #564]	; (800830c <LPTIM_Disable+0x268>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d003      	beq.n	80080e4 <LPTIM_Disable+0x40>
 80080dc:	4a8c      	ldr	r2, [pc, #560]	; (8008310 <LPTIM_Disable+0x26c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d006      	beq.n	80080f0 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 80080e2:	e011      	b.n	8008108 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80080e4:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80080e8:	f7ff fcdb 	bl	8007aa2 <LL_RCC_GetLPTIMClockSource>
 80080ec:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80080ee:	e00c      	b.n	800810a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80080f0:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80080f4:	f7ff fcd5 	bl	8007aa2 <LL_RCC_GetLPTIMClockSource>
 80080f8:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 80080fa:	e006      	b.n	800810a <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 80080fc:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8008100:	f7ff fccf 	bl	8007aa2 <LL_RCC_GetLPTIMClockSource>
 8008104:	6378      	str	r0, [r7, #52]	; 0x34
      break;
 8008106:	e000      	b.n	800810a <LPTIM_Disable+0x66>
      break;
 8008108:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	62bb      	str	r3, [r7, #40]	; 0x28
  tmpCMP = hlptim->Instance->CMP;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695b      	ldr	r3, [r3, #20]
 8008120:	627b      	str	r3, [r7, #36]	; 0x24
  tmpARR = hlptim->Instance->ARR;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	699b      	ldr	r3, [r3, #24]
 8008128:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	6a1b      	ldr	r3, [r3, #32]
 8008130:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008138:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a72      	ldr	r2, [pc, #456]	; (8008308 <LPTIM_Disable+0x264>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d019      	beq.n	8008178 <LPTIM_Disable+0xd4>
 8008144:	4a70      	ldr	r2, [pc, #448]	; (8008308 <LPTIM_Disable+0x264>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d81d      	bhi.n	8008186 <LPTIM_Disable+0xe2>
 800814a:	4a70      	ldr	r2, [pc, #448]	; (800830c <LPTIM_Disable+0x268>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d003      	beq.n	8008158 <LPTIM_Disable+0xb4>
 8008150:	4a6f      	ldr	r2, [pc, #444]	; (8008310 <LPTIM_Disable+0x26c>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d009      	beq.n	800816a <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 8008156:	e016      	b.n	8008186 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8008158:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800815c:	f7ff fcb3 	bl	8007ac6 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8008160:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8008164:	f7ff fcd1 	bl	8007b0a <LL_APB1_GRP1_ReleaseReset>
      break;
 8008168:	e00e      	b.n	8008188 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800816a:	2020      	movs	r0, #32
 800816c:	f7ff fcbc 	bl	8007ae8 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8008170:	2020      	movs	r0, #32
 8008172:	f7ff fcdc 	bl	8007b2e <LL_APB1_GRP2_ReleaseReset>
      break;
 8008176:	e007      	b.n	8008188 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008178:	2040      	movs	r0, #64	; 0x40
 800817a:	f7ff fcb5 	bl	8007ae8 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 800817e:	2040      	movs	r0, #64	; 0x40
 8008180:	f7ff fcd5 	bl	8007b2e <LL_APB1_GRP2_ReleaseReset>
      break;
 8008184:	e000      	b.n	8008188 <LPTIM_Disable+0xe4>
      break;
 8008186:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <LPTIM_Disable+0xf8>
 800818e:	6a3b      	ldr	r3, [r7, #32]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d103      	bne.n	800819c <LPTIM_Disable+0xf8>
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 8097 	beq.w	80082ca <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a59      	ldr	r2, [pc, #356]	; (8008308 <LPTIM_Disable+0x264>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d013      	beq.n	80081ce <LPTIM_Disable+0x12a>
 80081a6:	4a58      	ldr	r2, [pc, #352]	; (8008308 <LPTIM_Disable+0x264>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d815      	bhi.n	80081d8 <LPTIM_Disable+0x134>
 80081ac:	4a57      	ldr	r2, [pc, #348]	; (800830c <LPTIM_Disable+0x268>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d003      	beq.n	80081ba <LPTIM_Disable+0x116>
 80081b2:	4a57      	ldr	r2, [pc, #348]	; (8008310 <LPTIM_Disable+0x26c>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d005      	beq.n	80081c4 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 80081b8:	e00e      	b.n	80081d8 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80081ba:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80081be:	f7ff fc57 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80081c2:	e00a      	b.n	80081da <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80081c4:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80081c8:	f7ff fc52 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80081cc:	e005      	b.n	80081da <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 80081ce:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80081d2:	f7ff fc4d 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80081d6:	e000      	b.n	80081da <LPTIM_Disable+0x136>
        break;
 80081d8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d01a      	beq.n	8008216 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691a      	ldr	r2, [r3, #16]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80081f8:	2108      	movs	r1, #8
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff ff22 	bl	8008044 <LPTIM_WaitForFlag>
 8008200:	4603      	mov	r3, r0
 8008202:	2b03      	cmp	r3, #3
 8008204:	d103      	bne.n	800820e <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2203      	movs	r2, #3
 800820a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	2208      	movs	r2, #8
 8008214:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8008216:	6a3b      	ldr	r3, [r7, #32]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01a      	beq.n	8008252 <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0201 	orr.w	r2, r2, #1
 800822a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6a3a      	ldr	r2, [r7, #32]
 8008232:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008234:	2110      	movs	r1, #16
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f7ff ff04 	bl	8008044 <LPTIM_WaitForFlag>
 800823c:	4603      	mov	r3, r0
 800823e:	2b03      	cmp	r3, #3
 8008240:	d103      	bne.n	800824a <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2203      	movs	r2, #3
 8008246:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2210      	movs	r2, #16
 8008250:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 8008252:	69bb      	ldr	r3, [r7, #24]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d01c      	beq.n	8008292 <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691a      	ldr	r2, [r3, #16]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	69ba      	ldr	r2, [r7, #24]
 800826e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 8008270:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f7ff fee5 	bl	8008044 <LPTIM_WaitForFlag>
 800827a:	4603      	mov	r3, r0
 800827c:	2b03      	cmp	r3, #3
 800827e:	d103      	bne.n	8008288 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2203      	movs	r2, #3
 8008284:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008290:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a1c      	ldr	r2, [pc, #112]	; (8008308 <LPTIM_Disable+0x264>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d011      	beq.n	80082c0 <LPTIM_Disable+0x21c>
 800829c:	4a1a      	ldr	r2, [pc, #104]	; (8008308 <LPTIM_Disable+0x264>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d812      	bhi.n	80082c8 <LPTIM_Disable+0x224>
 80082a2:	4a1a      	ldr	r2, [pc, #104]	; (800830c <LPTIM_Disable+0x268>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d003      	beq.n	80082b0 <LPTIM_Disable+0x20c>
 80082a8:	4a19      	ldr	r2, [pc, #100]	; (8008310 <LPTIM_Disable+0x26c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d004      	beq.n	80082b8 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 80082ae:	e00b      	b.n	80082c8 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80082b0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082b2:	f7ff fbdd 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80082b6:	e008      	b.n	80082ca <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80082b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082ba:	f7ff fbd9 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80082be:	e004      	b.n	80082ca <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80082c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80082c2:	f7ff fbd5 	bl	8007a70 <LL_RCC_SetLPTIMClockSource>
        break;
 80082c6:	e000      	b.n	80082ca <LPTIM_Disable+0x226>
        break;
 80082c8:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691a      	ldr	r2, [r3, #16]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e0:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e8:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	69fa      	ldr	r2, [r7, #28]
 80082f0:	621a      	str	r2, [r3, #32]
 80082f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f383 8810 	msr	PRIMASK, r3
}
 80082fc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80082fe:	bf00      	nop
 8008300:	3738      	adds	r7, #56	; 0x38
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
 8008306:	bf00      	nop
 8008308:	40009800 	.word	0x40009800
 800830c:	40007c00 	.word	0x40007c00
 8008310:	40009400 	.word	0x40009400

08008314 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008314:	b480      	push	{r7}
 8008316:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008318:	4b04      	ldr	r3, [pc, #16]	; (800832c <HAL_PWR_EnableBkUpAccess+0x18>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a03      	ldr	r2, [pc, #12]	; (800832c <HAL_PWR_EnableBkUpAccess+0x18>)
 800831e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008322:	6013      	str	r3, [r2, #0]
}
 8008324:	bf00      	nop
 8008326:	46bd      	mov	sp, r7
 8008328:	bc80      	pop	{r7}
 800832a:	4770      	bx	lr
 800832c:	58000400 	.word	0x58000400

08008330 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10c      	bne.n	800835c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8008342:	4b13      	ldr	r3, [pc, #76]	; (8008390 <HAL_PWR_EnterSLEEPMode+0x60>)
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800834a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834e:	d10d      	bne.n	800836c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8008350:	f000 f83c 	bl	80083cc <HAL_PWREx_DisableLowPowerRunMode>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d008      	beq.n	800836c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800835a:	e015      	b.n	8008388 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800835c:	4b0c      	ldr	r3, [pc, #48]	; (8008390 <HAL_PWR_EnterSLEEPMode+0x60>)
 800835e:	695b      	ldr	r3, [r3, #20]
 8008360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008364:	2b00      	cmp	r3, #0
 8008366:	d101      	bne.n	800836c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8008368:	f000 f822 	bl	80083b0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800836c:	4b09      	ldr	r3, [pc, #36]	; (8008394 <HAL_PWR_EnterSLEEPMode+0x64>)
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	4a08      	ldr	r2, [pc, #32]	; (8008394 <HAL_PWR_EnterSLEEPMode+0x64>)
 8008372:	f023 0304 	bic.w	r3, r3, #4
 8008376:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d101      	bne.n	8008382 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800837e:	bf30      	wfi
 8008380:	e002      	b.n	8008388 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008382:	bf40      	sev
    __WFE();
 8008384:	bf20      	wfe
    __WFE();
 8008386:	bf20      	wfe
  }
}
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	58000400 	.word	0x58000400
 8008394:	e000ed00 	.word	0xe000ed00

08008398 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800839c:	4b03      	ldr	r3, [pc, #12]	; (80083ac <HAL_PWREx_GetVoltageRange+0x14>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bc80      	pop	{r7}
 80083aa:	4770      	bx	lr
 80083ac:	58000400 	.word	0x58000400

080083b0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80083b4:	4b04      	ldr	r3, [pc, #16]	; (80083c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a03      	ldr	r2, [pc, #12]	; (80083c8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80083ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80083be:	6013      	str	r3, [r2, #0]
}
 80083c0:	bf00      	nop
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bc80      	pop	{r7}
 80083c6:	4770      	bx	lr
 80083c8:	58000400 	.word	0x58000400

080083cc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80083d2:	4b16      	ldr	r3, [pc, #88]	; (800842c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a15      	ldr	r2, [pc, #84]	; (800842c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083dc:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 80083de:	4b14      	ldr	r3, [pc, #80]	; (8008430 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	2232      	movs	r2, #50	; 0x32
 80083e4:	fb02 f303 	mul.w	r3, r2, r3
 80083e8:	4a12      	ldr	r2, [pc, #72]	; (8008434 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80083ea:	fba2 2303 	umull	r2, r3, r2, r3
 80083ee:	0c9b      	lsrs	r3, r3, #18
 80083f0:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80083f2:	e002      	b.n	80083fa <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80083fa:	4b0c      	ldr	r3, [pc, #48]	; (800842c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008406:	d102      	bne.n	800840e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1f2      	bne.n	80083f4 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800840e:	4b07      	ldr	r3, [pc, #28]	; (800842c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800841a:	d101      	bne.n	8008420 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e000      	b.n	8008422 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	bc80      	pop	{r7}
 800842a:	4770      	bx	lr
 800842c:	58000400 	.word	0x58000400
 8008430:	20000000 	.word	0x20000000
 8008434:	431bde83 	.word	0x431bde83

08008438 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	4603      	mov	r3, r0
 8008440:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8008442:	4b10      	ldr	r3, [pc, #64]	; (8008484 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 0307 	bic.w	r3, r3, #7
 800844a:	4a0e      	ldr	r2, [pc, #56]	; (8008484 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800844c:	f043 0302 	orr.w	r3, r3, #2
 8008450:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008452:	4b0d      	ldr	r3, [pc, #52]	; (8008488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008454:	691b      	ldr	r3, [r3, #16]
 8008456:	4a0c      	ldr	r2, [pc, #48]	; (8008488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008458:	f043 0304 	orr.w	r3, r3, #4
 800845c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800845e:	79fb      	ldrb	r3, [r7, #7]
 8008460:	2b01      	cmp	r3, #1
 8008462:	d101      	bne.n	8008468 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8008464:	bf30      	wfi
 8008466:	e002      	b.n	800846e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8008468:	bf40      	sev
    __WFE();
 800846a:	bf20      	wfe
    __WFE();
 800846c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800846e:	4b06      	ldr	r3, [pc, #24]	; (8008488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008470:	691b      	ldr	r3, [r3, #16]
 8008472:	4a05      	ldr	r2, [pc, #20]	; (8008488 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8008474:	f023 0304 	bic.w	r3, r3, #4
 8008478:	6113      	str	r3, [r2, #16]
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	bc80      	pop	{r7}
 8008482:	4770      	bx	lr
 8008484:	58000400 	.word	0x58000400
 8008488:	e000ed00 	.word	0xe000ed00

0800848c <LL_PWR_IsEnabledBkUpAccess>:
{
 800848c:	b480      	push	{r7}
 800848e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8008490:	4b06      	ldr	r3, [pc, #24]	; (80084ac <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800849c:	d101      	bne.n	80084a2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800849e:	2301      	movs	r3, #1
 80084a0:	e000      	b.n	80084a4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80084a2:	2300      	movs	r3, #0
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bc80      	pop	{r7}
 80084aa:	4770      	bx	lr
 80084ac:	58000400 	.word	0x58000400

080084b0 <LL_RCC_HSE_EnableTcxo>:
{
 80084b0:	b480      	push	{r7}
 80084b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80084b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80084c2:	6013      	str	r3, [r2, #0]
}
 80084c4:	bf00      	nop
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bc80      	pop	{r7}
 80084ca:	4770      	bx	lr

080084cc <LL_RCC_HSE_DisableTcxo>:
{
 80084cc:	b480      	push	{r7}
 80084ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80084d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80084da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80084de:	6013      	str	r3, [r2, #0]
}
 80084e0:	bf00      	nop
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bc80      	pop	{r7}
 80084e6:	4770      	bx	lr

080084e8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084fa:	d101      	bne.n	8008500 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	46bd      	mov	sp, r7
 8008506:	bc80      	pop	{r7}
 8008508:	4770      	bx	lr

0800850a <LL_RCC_HSE_Enable>:
{
 800850a:	b480      	push	{r7}
 800850c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800850e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800851c:	6013      	str	r3, [r2, #0]
}
 800851e:	bf00      	nop
 8008520:	46bd      	mov	sp, r7
 8008522:	bc80      	pop	{r7}
 8008524:	4770      	bx	lr

08008526 <LL_RCC_HSE_Disable>:
{
 8008526:	b480      	push	{r7}
 8008528:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800852a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008538:	6013      	str	r3, [r2, #0]
}
 800853a:	bf00      	nop
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr

08008542 <LL_RCC_HSE_IsReady>:
{
 8008542:	b480      	push	{r7}
 8008544:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008546:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008554:	d101      	bne.n	800855a <LL_RCC_HSE_IsReady+0x18>
 8008556:	2301      	movs	r3, #1
 8008558:	e000      	b.n	800855c <LL_RCC_HSE_IsReady+0x1a>
 800855a:	2300      	movs	r3, #0
}
 800855c:	4618      	mov	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	bc80      	pop	{r7}
 8008562:	4770      	bx	lr

08008564 <LL_RCC_HSI_Enable>:
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008572:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008576:	6013      	str	r3, [r2, #0]
}
 8008578:	bf00      	nop
 800857a:	46bd      	mov	sp, r7
 800857c:	bc80      	pop	{r7}
 800857e:	4770      	bx	lr

08008580 <LL_RCC_HSI_Disable>:
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008584:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800858e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008592:	6013      	str	r3, [r2, #0]
}
 8008594:	bf00      	nop
 8008596:	46bd      	mov	sp, r7
 8008598:	bc80      	pop	{r7}
 800859a:	4770      	bx	lr

0800859c <LL_RCC_HSI_IsReady>:
{
 800859c:	b480      	push	{r7}
 800859e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80085a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ae:	d101      	bne.n	80085b4 <LL_RCC_HSI_IsReady+0x18>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <LL_RCC_HSI_IsReady+0x1a>
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bc80      	pop	{r7}
 80085bc:	4770      	bx	lr

080085be <LL_RCC_HSI_SetCalibTrimming>:
{
 80085be:	b480      	push	{r7}
 80085c0:	b083      	sub	sp, #12
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80085c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	061b      	lsls	r3, r3, #24
 80085d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80085d8:	4313      	orrs	r3, r2
 80085da:	604b      	str	r3, [r1, #4]
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <LL_RCC_LSE_IsReady>:
{
 80085e6:	b480      	push	{r7}
 80085e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d101      	bne.n	80085fe <LL_RCC_LSE_IsReady+0x18>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <LL_RCC_LSE_IsReady+0x1a>
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	46bd      	mov	sp, r7
 8008604:	bc80      	pop	{r7}
 8008606:	4770      	bx	lr

08008608 <LL_RCC_LSI_Enable>:
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800860c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008614:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008618:	f043 0301 	orr.w	r3, r3, #1
 800861c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008620:	bf00      	nop
 8008622:	46bd      	mov	sp, r7
 8008624:	bc80      	pop	{r7}
 8008626:	4770      	bx	lr

08008628 <LL_RCC_LSI_Disable>:
{
 8008628:	b480      	push	{r7}
 800862a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800862c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008634:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008638:	f023 0301 	bic.w	r3, r3, #1
 800863c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8008640:	bf00      	nop
 8008642:	46bd      	mov	sp, r7
 8008644:	bc80      	pop	{r7}
 8008646:	4770      	bx	lr

08008648 <LL_RCC_LSI_IsReady>:
{
 8008648:	b480      	push	{r7}
 800864a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800864c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d101      	bne.n	8008660 <LL_RCC_LSI_IsReady+0x18>
 800865c:	2301      	movs	r3, #1
 800865e:	e000      	b.n	8008662 <LL_RCC_LSI_IsReady+0x1a>
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	46bd      	mov	sp, r7
 8008666:	bc80      	pop	{r7}
 8008668:	4770      	bx	lr

0800866a <LL_RCC_MSI_Enable>:
{
 800866a:	b480      	push	{r7}
 800866c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800866e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008678:	f043 0301 	orr.w	r3, r3, #1
 800867c:	6013      	str	r3, [r2, #0]
}
 800867e:	bf00      	nop
 8008680:	46bd      	mov	sp, r7
 8008682:	bc80      	pop	{r7}
 8008684:	4770      	bx	lr

08008686 <LL_RCC_MSI_Disable>:
{
 8008686:	b480      	push	{r7}
 8008688:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008694:	f023 0301 	bic.w	r3, r3, #1
 8008698:	6013      	str	r3, [r2, #0]
}
 800869a:	bf00      	nop
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr

080086a2 <LL_RCC_MSI_IsReady>:
{
 80086a2:	b480      	push	{r7}
 80086a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80086a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	d101      	bne.n	80086b8 <LL_RCC_MSI_IsReady+0x16>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <LL_RCC_MSI_IsReady+0x18>
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr

080086c2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80086c2:	b480      	push	{r7}
 80086c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80086c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0308 	and.w	r3, r3, #8
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d101      	bne.n	80086d8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80086d4:	2301      	movs	r3, #1
 80086d6:	e000      	b.n	80086da <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80086d8:	2300      	movs	r3, #0
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	bc80      	pop	{r7}
 80086e0:	4770      	bx	lr

080086e2 <LL_RCC_MSI_GetRange>:
{
 80086e2:	b480      	push	{r7}
 80086e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80086e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bc80      	pop	{r7}
 80086f6:	4770      	bx	lr

080086f8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80086fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008704:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8008708:	4618      	mov	r0, r3
 800870a:	46bd      	mov	sp, r7
 800870c:	bc80      	pop	{r7}
 800870e:	4770      	bx	lr

08008710 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	021b      	lsls	r3, r3, #8
 8008726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800872a:	4313      	orrs	r3, r2
 800872c:	604b      	str	r3, [r1, #4]
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	bc80      	pop	{r7}
 8008736:	4770      	bx	lr

08008738 <LL_RCC_SetSysClkSource>:
{
 8008738:	b480      	push	{r7}
 800873a:	b083      	sub	sp, #12
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f023 0203 	bic.w	r2, r3, #3
 800874a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4313      	orrs	r3, r2
 8008752:	608b      	str	r3, [r1, #8]
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	bc80      	pop	{r7}
 800875c:	4770      	bx	lr

0800875e <LL_RCC_GetSysClkSource>:
{
 800875e:	b480      	push	{r7}
 8008760:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8008762:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 030c 	and.w	r3, r3, #12
}
 800876c:	4618      	mov	r0, r3
 800876e:	46bd      	mov	sp, r7
 8008770:	bc80      	pop	{r7}
 8008772:	4770      	bx	lr

08008774 <LL_RCC_SetAHBPrescaler>:
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800877c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008786:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4313      	orrs	r3, r2
 800878e:	608b      	str	r3, [r1, #8]
}
 8008790:	bf00      	nop
 8008792:	370c      	adds	r7, #12
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr

0800879a <LL_RCC_SetAHB3Prescaler>:
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80087a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087a6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80087aa:	f023 020f 	bic.w	r2, r3, #15
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	091b      	lsrs	r3, r3, #4
 80087b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087b6:	4313      	orrs	r3, r2
 80087b8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bc80      	pop	{r7}
 80087c4:	4770      	bx	lr

080087c6 <LL_RCC_SetAPB1Prescaler>:
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80087ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4313      	orrs	r3, r2
 80087e0:	608b      	str	r3, [r1, #8]
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <LL_RCC_SetAPB2Prescaler>:
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80087f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4313      	orrs	r3, r2
 8008806:	608b      	str	r3, [r1, #8]
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	bc80      	pop	{r7}
 8008810:	4770      	bx	lr

08008812 <LL_RCC_GetAHBPrescaler>:
{
 8008812:	b480      	push	{r7}
 8008814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8008816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8008820:	4618      	mov	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	bc80      	pop	{r7}
 8008826:	4770      	bx	lr

08008828 <LL_RCC_GetAHB3Prescaler>:
{
 8008828:	b480      	push	{r7}
 800882a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800882c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008830:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008834:	011b      	lsls	r3, r3, #4
 8008836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800883a:	4618      	mov	r0, r3
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr

08008842 <LL_RCC_GetAPB1Prescaler>:
{
 8008842:	b480      	push	{r7}
 8008844:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008846:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	bc80      	pop	{r7}
 8008856:	4770      	bx	lr

08008858 <LL_RCC_GetAPB2Prescaler>:
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800885c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8008866:	4618      	mov	r0, r3
 8008868:	46bd      	mov	sp, r7
 800886a:	bc80      	pop	{r7}
 800886c:	4770      	bx	lr

0800886e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800886e:	b480      	push	{r7}
 8008870:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008872:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800887c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008880:	6013      	str	r3, [r2, #0]
}
 8008882:	bf00      	nop
 8008884:	46bd      	mov	sp, r7
 8008886:	bc80      	pop	{r7}
 8008888:	4770      	bx	lr

0800888a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800888e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800889c:	6013      	str	r3, [r2, #0]
}
 800889e:	bf00      	nop
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bc80      	pop	{r7}
 80088a4:	4770      	bx	lr

080088a6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80088a6:	b480      	push	{r7}
 80088a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80088aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088b8:	d101      	bne.n	80088be <LL_RCC_PLL_IsReady+0x18>
 80088ba:	2301      	movs	r3, #1
 80088bc:	e000      	b.n	80088c0 <LL_RCC_PLL_IsReady+0x1a>
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr

080088c8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80088cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d0:	68db      	ldr	r3, [r3, #12]
 80088d2:	0a1b      	lsrs	r3, r3, #8
 80088d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80088d8:	4618      	mov	r0, r3
 80088da:	46bd      	mov	sp, r7
 80088dc:	bc80      	pop	{r7}
 80088de:	4770      	bx	lr

080088e0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80088e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bc80      	pop	{r7}
 80088f4:	4770      	bx	lr

080088f6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80088f6:	b480      	push	{r7}
 80088f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80088fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8008904:	4618      	mov	r0, r3
 8008906:	46bd      	mov	sp, r7
 8008908:	bc80      	pop	{r7}
 800890a:	4770      	bx	lr

0800890c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0303 	and.w	r3, r3, #3
}
 800891a:	4618      	mov	r0, r3
 800891c:	46bd      	mov	sp, r7
 800891e:	bc80      	pop	{r7}
 8008920:	4770      	bx	lr

08008922 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008922:	b480      	push	{r7}
 8008924:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008934:	d101      	bne.n	800893a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008936:	2301      	movs	r3, #1
 8008938:	e000      	b.n	800893c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	46bd      	mov	sp, r7
 8008940:	bc80      	pop	{r7}
 8008942:	4770      	bx	lr

08008944 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008944:	b480      	push	{r7}
 8008946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800894c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8008950:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008958:	d101      	bne.n	800895e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800895a:	2301      	movs	r3, #1
 800895c:	e000      	b.n	8008960 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	46bd      	mov	sp, r7
 8008964:	bc80      	pop	{r7}
 8008966:	4770      	bx	lr

08008968 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800896c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008970:	689b      	ldr	r3, [r3, #8]
 8008972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008976:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800897a:	d101      	bne.n	8008980 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800897c:	2301      	movs	r3, #1
 800897e:	e000      	b.n	8008982 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008980:	2300      	movs	r3, #0
}
 8008982:	4618      	mov	r0, r3
 8008984:	46bd      	mov	sp, r7
 8008986:	bc80      	pop	{r7}
 8008988:	4770      	bx	lr

0800898a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800898a:	b480      	push	{r7}
 800898c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800898e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008998:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800899c:	d101      	bne.n	80089a2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800899e:	2301      	movs	r3, #1
 80089a0:	e000      	b.n	80089a4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bc80      	pop	{r7}
 80089aa:	4770      	bx	lr

080089ac <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d101      	bne.n	80089be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e36f      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089be:	f7ff fece 	bl	800875e <LL_RCC_GetSysClkSource>
 80089c2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80089c4:	f7ff ffa2 	bl	800890c <LL_RCC_PLL_GetMainSource>
 80089c8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0320 	and.w	r3, r3, #32
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	f000 80c4 	beq.w	8008b60 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <HAL_RCC_OscConfig+0x3e>
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	2b0c      	cmp	r3, #12
 80089e2:	d176      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80089e4:	69bb      	ldr	r3, [r7, #24]
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d173      	bne.n	8008ad2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e353      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 0308 	and.w	r3, r3, #8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d005      	beq.n	8008a14 <HAL_RCC_OscConfig+0x68>
 8008a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a12:	e006      	b.n	8008a22 <HAL_RCC_OscConfig+0x76>
 8008a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a1c:	091b      	lsrs	r3, r3, #4
 8008a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d222      	bcs.n	8008a6c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fd3c 	bl	80094a8 <RCC_SetFlashLatencyFromMSIRange>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d001      	beq.n	8008a3a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e331      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a44:	f043 0308 	orr.w	r3, r3, #8
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	4618      	mov	r0, r3
 8008a66:	f7ff fe53 	bl	8008710 <LL_RCC_MSI_SetCalibTrimming>
 8008a6a:	e021      	b.n	8008ab0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008a76:	f043 0308 	orr.w	r3, r3, #8
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fe3a 	bl	8008710 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fd01 	bl	80094a8 <RCC_SetFlashLatencyFromMSIRange>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d001      	beq.n	8008ab0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e2f6      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008ab0:	f000 fcc2 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	4aa7      	ldr	r2, [pc, #668]	; (8008d54 <HAL_RCC_OscConfig+0x3a8>)
 8008ab8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8008aba:	4ba7      	ldr	r3, [pc, #668]	; (8008d58 <HAL_RCC_OscConfig+0x3ac>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7f9 ffdc 	bl	8002a7c <HAL_InitTick>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8008ac8:	7cfb      	ldrb	r3, [r7, #19]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d047      	beq.n	8008b5e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8008ace:	7cfb      	ldrb	r3, [r7, #19]
 8008ad0:	e2e5      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d02c      	beq.n	8008b34 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008ada:	f7ff fdc6 	bl	800866a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008ade:	f7f9 ffd7 	bl	8002a90 <HAL_GetTick>
 8008ae2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008ae4:	e008      	b.n	8008af8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ae6:	f7f9 ffd3 	bl	8002a90 <HAL_GetTick>
 8008aea:	4602      	mov	r2, r0
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	1ad3      	subs	r3, r2, r3
 8008af0:	2b02      	cmp	r3, #2
 8008af2:	d901      	bls.n	8008af8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8008af4:	2303      	movs	r3, #3
 8008af6:	e2d2      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008af8:	f7ff fdd3 	bl	80086a2 <LL_RCC_MSI_IsReady>
 8008afc:	4603      	mov	r3, r0
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0f1      	beq.n	8008ae6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b0c:	f043 0308 	orr.w	r3, r3, #8
 8008b10:	6013      	str	r3, [r2, #0]
 8008b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b24:	4313      	orrs	r3, r2
 8008b26:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7ff fdef 	bl	8008710 <LL_RCC_MSI_SetCalibTrimming>
 8008b32:	e015      	b.n	8008b60 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008b34:	f7ff fda7 	bl	8008686 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008b38:	f7f9 ffaa 	bl	8002a90 <HAL_GetTick>
 8008b3c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008b40:	f7f9 ffa6 	bl	8002a90 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e2a5      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008b52:	f7ff fda6 	bl	80086a2 <LL_RCC_MSI_IsReady>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1f1      	bne.n	8008b40 <HAL_RCC_OscConfig+0x194>
 8008b5c:	e000      	b.n	8008b60 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008b5e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d058      	beq.n	8008c1e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2b08      	cmp	r3, #8
 8008b70:	d005      	beq.n	8008b7e <HAL_RCC_OscConfig+0x1d2>
 8008b72:	69fb      	ldr	r3, [r7, #28]
 8008b74:	2b0c      	cmp	r3, #12
 8008b76:	d108      	bne.n	8008b8a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	2b03      	cmp	r3, #3
 8008b7c:	d105      	bne.n	8008b8a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d14b      	bne.n	8008c1e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e289      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8008b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba8:	d102      	bne.n	8008bb0 <HAL_RCC_OscConfig+0x204>
 8008baa:	f7ff fcae 	bl	800850a <LL_RCC_HSE_Enable>
 8008bae:	e00d      	b.n	8008bcc <HAL_RCC_OscConfig+0x220>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	685b      	ldr	r3, [r3, #4]
 8008bb4:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8008bb8:	d104      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x218>
 8008bba:	f7ff fc79 	bl	80084b0 <LL_RCC_HSE_EnableTcxo>
 8008bbe:	f7ff fca4 	bl	800850a <LL_RCC_HSE_Enable>
 8008bc2:	e003      	b.n	8008bcc <HAL_RCC_OscConfig+0x220>
 8008bc4:	f7ff fcaf 	bl	8008526 <LL_RCC_HSE_Disable>
 8008bc8:	f7ff fc80 	bl	80084cc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d012      	beq.n	8008bfa <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bd4:	f7f9 ff5c 	bl	8002a90 <HAL_GetTick>
 8008bd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008bda:	e008      	b.n	8008bee <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008bdc:	f7f9 ff58 	bl	8002a90 <HAL_GetTick>
 8008be0:	4602      	mov	r2, r0
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	1ad3      	subs	r3, r2, r3
 8008be6:	2b64      	cmp	r3, #100	; 0x64
 8008be8:	d901      	bls.n	8008bee <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8008bea:	2303      	movs	r3, #3
 8008bec:	e257      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008bee:	f7ff fca8 	bl	8008542 <LL_RCC_HSE_IsReady>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d0f1      	beq.n	8008bdc <HAL_RCC_OscConfig+0x230>
 8008bf8:	e011      	b.n	8008c1e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bfa:	f7f9 ff49 	bl	8002a90 <HAL_GetTick>
 8008bfe:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008c00:	e008      	b.n	8008c14 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c02:	f7f9 ff45 	bl	8002a90 <HAL_GetTick>
 8008c06:	4602      	mov	r2, r0
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	1ad3      	subs	r3, r2, r3
 8008c0c:	2b64      	cmp	r3, #100	; 0x64
 8008c0e:	d901      	bls.n	8008c14 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e244      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008c14:	f7ff fc95 	bl	8008542 <LL_RCC_HSE_IsReady>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1f1      	bne.n	8008c02 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d046      	beq.n	8008cb8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	2b04      	cmp	r3, #4
 8008c2e:	d005      	beq.n	8008c3c <HAL_RCC_OscConfig+0x290>
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	2b0c      	cmp	r3, #12
 8008c34:	d10e      	bne.n	8008c54 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b02      	cmp	r3, #2
 8008c3a:	d10b      	bne.n	8008c54 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	691b      	ldr	r3, [r3, #16]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e22a      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fcb6 	bl	80085be <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008c52:	e031      	b.n	8008cb8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d019      	beq.n	8008c90 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008c5c:	f7ff fc82 	bl	8008564 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c60:	f7f9 ff16 	bl	8002a90 <HAL_GetTick>
 8008c64:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c66:	e008      	b.n	8008c7a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c68:	f7f9 ff12 	bl	8002a90 <HAL_GetTick>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	2b02      	cmp	r3, #2
 8008c74:	d901      	bls.n	8008c7a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e211      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008c7a:	f7ff fc8f 	bl	800859c <LL_RCC_HSI_IsReady>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d0f1      	beq.n	8008c68 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fc98 	bl	80085be <LL_RCC_HSI_SetCalibTrimming>
 8008c8e:	e013      	b.n	8008cb8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c90:	f7ff fc76 	bl	8008580 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c94:	f7f9 fefc 	bl	8002a90 <HAL_GetTick>
 8008c98:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008c9a:	e008      	b.n	8008cae <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008c9c:	f7f9 fef8 	bl	8002a90 <HAL_GetTick>
 8008ca0:	4602      	mov	r2, r0
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	1ad3      	subs	r3, r2, r3
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d901      	bls.n	8008cae <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8008caa:	2303      	movs	r3, #3
 8008cac:	e1f7      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008cae:	f7ff fc75 	bl	800859c <LL_RCC_HSI_IsReady>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d1f1      	bne.n	8008c9c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f003 0308 	and.w	r3, r3, #8
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d06e      	beq.n	8008da2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d056      	beq.n	8008d7a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8008ccc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008cd4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69da      	ldr	r2, [r3, #28]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f003 0310 	and.w	r3, r3, #16
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d031      	beq.n	8008d48 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f003 0302 	and.w	r3, r3, #2
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d006      	beq.n	8008cfc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d101      	bne.n	8008cfc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e1d0      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d013      	beq.n	8008d2e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8008d06:	f7ff fc8f 	bl	8008628 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008d0a:	f7f9 fec1 	bl	8002a90 <HAL_GetTick>
 8008d0e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8008d10:	e008      	b.n	8008d24 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d12:	f7f9 febd 	bl	8002a90 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	2b11      	cmp	r3, #17
 8008d1e:	d901      	bls.n	8008d24 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8008d20:	2303      	movs	r3, #3
 8008d22:	e1bc      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8008d24:	f7ff fc90 	bl	8008648 <LL_RCC_LSI_IsReady>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f1      	bne.n	8008d12 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8008d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008d36:	f023 0210 	bic.w	r2, r3, #16
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d48:	f7ff fc5e 	bl	8008608 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d4c:	f7f9 fea0 	bl	8002a90 <HAL_GetTick>
 8008d50:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8008d52:	e00c      	b.n	8008d6e <HAL_RCC_OscConfig+0x3c2>
 8008d54:	20000000 	.word	0x20000000
 8008d58:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d5c:	f7f9 fe98 	bl	8002a90 <HAL_GetTick>
 8008d60:	4602      	mov	r2, r0
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	1ad3      	subs	r3, r2, r3
 8008d66:	2b11      	cmp	r3, #17
 8008d68:	d901      	bls.n	8008d6e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e197      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8008d6e:	f7ff fc6b 	bl	8008648 <LL_RCC_LSI_IsReady>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d0f1      	beq.n	8008d5c <HAL_RCC_OscConfig+0x3b0>
 8008d78:	e013      	b.n	8008da2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d7a:	f7ff fc55 	bl	8008628 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d7e:	f7f9 fe87 	bl	8002a90 <HAL_GetTick>
 8008d82:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8008d84:	e008      	b.n	8008d98 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008d86:	f7f9 fe83 	bl	8002a90 <HAL_GetTick>
 8008d8a:	4602      	mov	r2, r0
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	1ad3      	subs	r3, r2, r3
 8008d90:	2b11      	cmp	r3, #17
 8008d92:	d901      	bls.n	8008d98 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e182      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8008d98:	f7ff fc56 	bl	8008648 <LL_RCC_LSI_IsReady>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1f1      	bne.n	8008d86 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0304 	and.w	r3, r3, #4
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	f000 80d8 	beq.w	8008f60 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008db0:	f7ff fb6c 	bl	800848c <LL_PWR_IsEnabledBkUpAccess>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d113      	bne.n	8008de2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008dba:	f7ff faab 	bl	8008314 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008dbe:	f7f9 fe67 	bl	8002a90 <HAL_GetTick>
 8008dc2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008dc4:	e008      	b.n	8008dd8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dc6:	f7f9 fe63 	bl	8002a90 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d901      	bls.n	8008dd8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8008dd4:	2303      	movs	r3, #3
 8008dd6:	e162      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8008dd8:	f7ff fb58 	bl	800848c <LL_PWR_IsEnabledBkUpAccess>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d0f1      	beq.n	8008dc6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d07b      	beq.n	8008ee2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b85      	cmp	r3, #133	; 0x85
 8008df0:	d003      	beq.n	8008dfa <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	68db      	ldr	r3, [r3, #12]
 8008df6:	2b05      	cmp	r3, #5
 8008df8:	d109      	bne.n	8008e0e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e06:	f043 0304 	orr.w	r3, r3, #4
 8008e0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008e0e:	f7f9 fe3f 	bl	8002a90 <HAL_GetTick>
 8008e12:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e20:	f043 0301 	orr.w	r3, r3, #1
 8008e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e28:	e00a      	b.n	8008e40 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e2a:	f7f9 fe31 	bl	8002a90 <HAL_GetTick>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	1ad3      	subs	r3, r2, r3
 8008e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d901      	bls.n	8008e40 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	e12e      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008e40:	f7ff fbd1 	bl	80085e6 <LL_RCC_LSE_IsReady>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d0ef      	beq.n	8008e2a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b81      	cmp	r3, #129	; 0x81
 8008e50:	d003      	beq.n	8008e5a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	2b85      	cmp	r3, #133	; 0x85
 8008e58:	d121      	bne.n	8008e9e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e5a:	f7f9 fe19 	bl	8002a90 <HAL_GetTick>
 8008e5e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008e74:	e00a      	b.n	8008e8c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e76:	f7f9 fe0b 	bl	8002a90 <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d901      	bls.n	8008e8c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e108      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8008e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0ec      	beq.n	8008e76 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8008e9c:	e060      	b.n	8008f60 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e9e:	f7f9 fdf7 	bl	8002a90 <HAL_GetTick>
 8008ea2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008eb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008eb8:	e00a      	b.n	8008ed0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008eba:	f7f9 fde9 	bl	8002a90 <HAL_GetTick>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	1ad3      	subs	r3, r2, r3
 8008ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d901      	bls.n	8008ed0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8008ecc:	2303      	movs	r3, #3
 8008ece:	e0e6      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008ed0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1ec      	bne.n	8008eba <HAL_RCC_OscConfig+0x50e>
 8008ee0:	e03e      	b.n	8008f60 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee2:	f7f9 fdd5 	bl	8002a90 <HAL_GetTick>
 8008ee6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8008ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008efc:	e00a      	b.n	8008f14 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008efe:	f7f9 fdc7 	bl	8002a90 <HAL_GetTick>
 8008f02:	4602      	mov	r2, r0
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	1ad3      	subs	r3, r2, r3
 8008f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d901      	bls.n	8008f14 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8008f10:	2303      	movs	r3, #3
 8008f12:	e0c4      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8008f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1ec      	bne.n	8008efe <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f24:	f7f9 fdb4 	bl	8002a90 <HAL_GetTick>
 8008f28:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008f36:	f023 0301 	bic.w	r3, r3, #1
 8008f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f3e:	e00a      	b.n	8008f56 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f40:	f7f9 fda6 	bl	8002a90 <HAL_GetTick>
 8008f44:	4602      	mov	r2, r0
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d901      	bls.n	8008f56 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8008f52:	2303      	movs	r3, #3
 8008f54:	e0a3      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008f56:	f7ff fb46 	bl	80085e6 <LL_RCC_LSE_IsReady>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1ef      	bne.n	8008f40 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 8099 	beq.w	800909c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	2b0c      	cmp	r3, #12
 8008f6e:	d06c      	beq.n	800904a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d14b      	bne.n	8009010 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f78:	f7ff fc87 	bl	800888a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f7c:	f7f9 fd88 	bl	8002a90 <HAL_GetTick>
 8008f80:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f84:	f7f9 fd84 	bl	8002a90 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b0a      	cmp	r3, #10
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e083      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8008f96:	f7ff fc86 	bl	80088a6 <LL_RCC_PLL_IsReady>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d1f1      	bne.n	8008f84 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fa4:	68da      	ldr	r2, [r3, #12]
 8008fa6:	4b40      	ldr	r3, [pc, #256]	; (80090a8 <HAL_RCC_OscConfig+0x6fc>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008fb2:	4311      	orrs	r1, r2
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008fb8:	0212      	lsls	r2, r2, #8
 8008fba:	4311      	orrs	r1, r2
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008fc0:	4311      	orrs	r1, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008fc6:	4311      	orrs	r1, r2
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008fcc:	430a      	orrs	r2, r1
 8008fce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fd6:	f7ff fc4a 	bl	800886e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fea:	f7f9 fd51 	bl	8002a90 <HAL_GetTick>
 8008fee:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ff2:	f7f9 fd4d 	bl	8002a90 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b0a      	cmp	r3, #10
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e04c      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8009004:	f7ff fc4f 	bl	80088a6 <LL_RCC_PLL_IsReady>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0f1      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x646>
 800900e:	e045      	b.n	800909c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009010:	f7ff fc3b 	bl	800888a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009014:	f7f9 fd3c 	bl	8002a90 <HAL_GetTick>
 8009018:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800901a:	e008      	b.n	800902e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800901c:	f7f9 fd38 	bl	8002a90 <HAL_GetTick>
 8009020:	4602      	mov	r2, r0
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	2b0a      	cmp	r3, #10
 8009028:	d901      	bls.n	800902e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800902a:	2303      	movs	r3, #3
 800902c:	e037      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800902e:	f7ff fc3a 	bl	80088a6 <LL_RCC_PLL_IsReady>
 8009032:	4603      	mov	r3, r0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1f1      	bne.n	800901c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009038:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800903c:	68da      	ldr	r2, [r3, #12]
 800903e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009042:	4b1a      	ldr	r3, [pc, #104]	; (80090ac <HAL_RCC_OscConfig+0x700>)
 8009044:	4013      	ands	r3, r2
 8009046:	60cb      	str	r3, [r1, #12]
 8009048:	e028      	b.n	800909c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904e:	2b01      	cmp	r3, #1
 8009050:	d101      	bne.n	8009056 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e023      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	f003 0203 	and.w	r2, r3, #3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009068:	429a      	cmp	r2, r3
 800906a:	d115      	bne.n	8009098 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009076:	429a      	cmp	r2, r3
 8009078:	d10e      	bne.n	8009098 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009084:	021b      	lsls	r3, r3, #8
 8009086:	429a      	cmp	r2, r3
 8009088:	d106      	bne.n	8009098 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800908a:	69bb      	ldr	r3, [r7, #24]
 800908c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009094:	429a      	cmp	r2, r3
 8009096:	d001      	beq.n	800909c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8009098:	2301      	movs	r3, #1
 800909a:	e000      	b.n	800909e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3720      	adds	r7, #32
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	11c1808c 	.word	0x11c1808c
 80090ac:	eefefffc 	.word	0xeefefffc

080090b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e10f      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c4:	4b89      	ldr	r3, [pc, #548]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d91b      	bls.n	800910a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b86      	ldr	r3, [pc, #536]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f023 0207 	bic.w	r2, r3, #7
 80090da:	4984      	ldr	r1, [pc, #528]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	4313      	orrs	r3, r2
 80090e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80090e2:	f7f9 fcd5 	bl	8002a90 <HAL_GetTick>
 80090e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e8:	e008      	b.n	80090fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090ea:	f7f9 fcd1 	bl	8002a90 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b02      	cmp	r3, #2
 80090f6:	d901      	bls.n	80090fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e0f3      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090fc:	4b7b      	ldr	r3, [pc, #492]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d1ef      	bne.n	80090ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0302 	and.w	r3, r3, #2
 8009112:	2b00      	cmp	r3, #0
 8009114:	d016      	beq.n	8009144 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	4618      	mov	r0, r3
 800911c:	f7ff fb2a 	bl	8008774 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009120:	f7f9 fcb6 	bl	8002a90 <HAL_GetTick>
 8009124:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8009126:	e008      	b.n	800913a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009128:	f7f9 fcb2 	bl	8002a90 <HAL_GetTick>
 800912c:	4602      	mov	r2, r0
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	2b02      	cmp	r3, #2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e0d4      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800913a:	f7ff fbf2 	bl	8008922 <LL_RCC_IsActiveFlag_HPRE>
 800913e:	4603      	mov	r3, r0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d0f1      	beq.n	8009128 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914c:	2b00      	cmp	r3, #0
 800914e:	d016      	beq.n	800917e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	4618      	mov	r0, r3
 8009156:	f7ff fb20 	bl	800879a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800915a:	f7f9 fc99 	bl	8002a90 <HAL_GetTick>
 800915e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009160:	e008      	b.n	8009174 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009162:	f7f9 fc95 	bl	8002a90 <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e0b7      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8009174:	f7ff fbe6 	bl	8008944 <LL_RCC_IsActiveFlag_SHDHPRE>
 8009178:	4603      	mov	r3, r0
 800917a:	2b00      	cmp	r3, #0
 800917c:	d0f1      	beq.n	8009162 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0304 	and.w	r3, r3, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d016      	beq.n	80091b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	4618      	mov	r0, r3
 8009190:	f7ff fb19 	bl	80087c6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009194:	f7f9 fc7c 	bl	8002a90 <HAL_GetTick>
 8009198:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800919a:	e008      	b.n	80091ae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800919c:	f7f9 fc78 	bl	8002a90 <HAL_GetTick>
 80091a0:	4602      	mov	r2, r0
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1ad3      	subs	r3, r2, r3
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d901      	bls.n	80091ae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80091aa:	2303      	movs	r3, #3
 80091ac:	e09a      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80091ae:	f7ff fbdb 	bl	8008968 <LL_RCC_IsActiveFlag_PPRE1>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0f1      	beq.n	800919c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f003 0308 	and.w	r3, r3, #8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d017      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fb0e 	bl	80087ec <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80091d0:	f7f9 fc5e 	bl	8002a90 <HAL_GetTick>
 80091d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80091d8:	f7f9 fc5a 	bl	8002a90 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e07c      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80091ea:	f7ff fbce 	bl	800898a <LL_RCC_IsActiveFlag_PPRE2>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0f1      	beq.n	80091d8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d043      	beq.n	8009288 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b02      	cmp	r3, #2
 8009206:	d106      	bne.n	8009216 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009208:	f7ff f99b 	bl	8008542 <LL_RCC_HSE_IsReady>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d11e      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009212:	2301      	movs	r3, #1
 8009214:	e066      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	2b03      	cmp	r3, #3
 800921c:	d106      	bne.n	800922c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800921e:	f7ff fb42 	bl	80088a6 <LL_RCC_PLL_IsReady>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d113      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e05b      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d106      	bne.n	8009242 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009234:	f7ff fa35 	bl	80086a2 <LL_RCC_MSI_IsReady>
 8009238:	4603      	mov	r3, r0
 800923a:	2b00      	cmp	r3, #0
 800923c:	d108      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e050      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009242:	f7ff f9ab 	bl	800859c <LL_RCC_HSI_IsReady>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d101      	bne.n	8009250 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800924c:	2301      	movs	r3, #1
 800924e:	e049      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	685b      	ldr	r3, [r3, #4]
 8009254:	4618      	mov	r0, r3
 8009256:	f7ff fa6f 	bl	8008738 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800925a:	f7f9 fc19 	bl	8002a90 <HAL_GetTick>
 800925e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009260:	e00a      	b.n	8009278 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009262:	f7f9 fc15 	bl	8002a90 <HAL_GetTick>
 8009266:	4602      	mov	r2, r0
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009270:	4293      	cmp	r3, r2
 8009272:	d901      	bls.n	8009278 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8009274:	2303      	movs	r3, #3
 8009276:	e035      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009278:	f7ff fa71 	bl	800875e <LL_RCC_GetSysClkSource>
 800927c:	4602      	mov	r2, r0
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	429a      	cmp	r2, r3
 8009286:	d1ec      	bne.n	8009262 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009288:	4b18      	ldr	r3, [pc, #96]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d21b      	bcs.n	80092ce <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009296:	4b15      	ldr	r3, [pc, #84]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f023 0207 	bic.w	r2, r3, #7
 800929e:	4913      	ldr	r1, [pc, #76]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80092a6:	f7f9 fbf3 	bl	8002a90 <HAL_GetTick>
 80092aa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ac:	e008      	b.n	80092c0 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80092ae:	f7f9 fbef 	bl	8002a90 <HAL_GetTick>
 80092b2:	4602      	mov	r2, r0
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	1ad3      	subs	r3, r2, r3
 80092b8:	2b02      	cmp	r3, #2
 80092ba:	d901      	bls.n	80092c0 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e011      	b.n	80092e4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <HAL_RCC_ClockConfig+0x23c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f003 0307 	and.w	r3, r3, #7
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d1ef      	bne.n	80092ae <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80092ce:	f000 f8b3 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 80092d2:	4603      	mov	r3, r0
 80092d4:	4a06      	ldr	r2, [pc, #24]	; (80092f0 <HAL_RCC_ClockConfig+0x240>)
 80092d6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80092d8:	4b06      	ldr	r3, [pc, #24]	; (80092f4 <HAL_RCC_ClockConfig+0x244>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f9 fbcd 	bl	8002a7c <HAL_InitTick>
 80092e2:	4603      	mov	r3, r0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	58004000 	.word	0x58004000
 80092f0:	20000000 	.word	0x20000000
 80092f4:	20000008 	.word	0x20000008

080092f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80092f8:	b590      	push	{r4, r7, lr}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009306:	f7ff fa2a 	bl	800875e <LL_RCC_GetSysClkSource>
 800930a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800930c:	f7ff fafe 	bl	800890c <LL_RCC_PLL_GetMainSource>
 8009310:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d005      	beq.n	8009324 <HAL_RCC_GetSysClockFreq+0x2c>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2b0c      	cmp	r3, #12
 800931c:	d139      	bne.n	8009392 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2b01      	cmp	r3, #1
 8009322:	d136      	bne.n	8009392 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009324:	f7ff f9cd 	bl	80086c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d115      	bne.n	800935a <HAL_RCC_GetSysClockFreq+0x62>
 800932e:	f7ff f9c8 	bl	80086c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8009332:	4603      	mov	r3, r0
 8009334:	2b01      	cmp	r3, #1
 8009336:	d106      	bne.n	8009346 <HAL_RCC_GetSysClockFreq+0x4e>
 8009338:	f7ff f9d3 	bl	80086e2 <LL_RCC_MSI_GetRange>
 800933c:	4603      	mov	r3, r0
 800933e:	0a1b      	lsrs	r3, r3, #8
 8009340:	f003 030f 	and.w	r3, r3, #15
 8009344:	e005      	b.n	8009352 <HAL_RCC_GetSysClockFreq+0x5a>
 8009346:	f7ff f9d7 	bl	80086f8 <LL_RCC_MSI_GetRangeAfterStandby>
 800934a:	4603      	mov	r3, r0
 800934c:	0a1b      	lsrs	r3, r3, #8
 800934e:	f003 030f 	and.w	r3, r3, #15
 8009352:	4a36      	ldr	r2, [pc, #216]	; (800942c <HAL_RCC_GetSysClockFreq+0x134>)
 8009354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009358:	e014      	b.n	8009384 <HAL_RCC_GetSysClockFreq+0x8c>
 800935a:	f7ff f9b2 	bl	80086c2 <LL_RCC_MSI_IsEnabledRangeSelect>
 800935e:	4603      	mov	r3, r0
 8009360:	2b01      	cmp	r3, #1
 8009362:	d106      	bne.n	8009372 <HAL_RCC_GetSysClockFreq+0x7a>
 8009364:	f7ff f9bd 	bl	80086e2 <LL_RCC_MSI_GetRange>
 8009368:	4603      	mov	r3, r0
 800936a:	091b      	lsrs	r3, r3, #4
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	e005      	b.n	800937e <HAL_RCC_GetSysClockFreq+0x86>
 8009372:	f7ff f9c1 	bl	80086f8 <LL_RCC_MSI_GetRangeAfterStandby>
 8009376:	4603      	mov	r3, r0
 8009378:	091b      	lsrs	r3, r3, #4
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	4a2b      	ldr	r2, [pc, #172]	; (800942c <HAL_RCC_GetSysClockFreq+0x134>)
 8009380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009384:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d115      	bne.n	80093b8 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009390:	e012      	b.n	80093b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	2b04      	cmp	r3, #4
 8009396:	d102      	bne.n	800939e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009398:	4b25      	ldr	r3, [pc, #148]	; (8009430 <HAL_RCC_GetSysClockFreq+0x138>)
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e00c      	b.n	80093b8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	2b08      	cmp	r3, #8
 80093a2:	d109      	bne.n	80093b8 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80093a4:	f7ff f8a0 	bl	80084e8 <LL_RCC_HSE_IsEnabledDiv2>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d102      	bne.n	80093b4 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80093ae:	4b20      	ldr	r3, [pc, #128]	; (8009430 <HAL_RCC_GetSysClockFreq+0x138>)
 80093b0:	617b      	str	r3, [r7, #20]
 80093b2:	e001      	b.n	80093b8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80093b4:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <HAL_RCC_GetSysClockFreq+0x13c>)
 80093b6:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80093b8:	f7ff f9d1 	bl	800875e <LL_RCC_GetSysClkSource>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b0c      	cmp	r3, #12
 80093c0:	d12f      	bne.n	8009422 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80093c2:	f7ff faa3 	bl	800890c <LL_RCC_PLL_GetMainSource>
 80093c6:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d003      	beq.n	80093d6 <HAL_RCC_GetSysClockFreq+0xde>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d003      	beq.n	80093dc <HAL_RCC_GetSysClockFreq+0xe4>
 80093d4:	e00d      	b.n	80093f2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80093d6:	4b16      	ldr	r3, [pc, #88]	; (8009430 <HAL_RCC_GetSysClockFreq+0x138>)
 80093d8:	60fb      	str	r3, [r7, #12]
        break;
 80093da:	e00d      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80093dc:	f7ff f884 	bl	80084e8 <LL_RCC_HSE_IsEnabledDiv2>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d102      	bne.n	80093ec <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80093e6:	4b12      	ldr	r3, [pc, #72]	; (8009430 <HAL_RCC_GetSysClockFreq+0x138>)
 80093e8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80093ea:	e005      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <HAL_RCC_GetSysClockFreq+0x13c>)
 80093ee:	60fb      	str	r3, [r7, #12]
        break;
 80093f0:	e002      	b.n	80093f8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	60fb      	str	r3, [r7, #12]
        break;
 80093f6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80093f8:	f7ff fa66 	bl	80088c8 <LL_RCC_PLL_GetN>
 80093fc:	4602      	mov	r2, r0
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	fb03 f402 	mul.w	r4, r3, r2
 8009404:	f7ff fa77 	bl	80088f6 <LL_RCC_PLL_GetDivider>
 8009408:	4603      	mov	r3, r0
 800940a:	091b      	lsrs	r3, r3, #4
 800940c:	3301      	adds	r3, #1
 800940e:	fbb4 f4f3 	udiv	r4, r4, r3
 8009412:	f7ff fa65 	bl	80088e0 <LL_RCC_PLL_GetR>
 8009416:	4603      	mov	r3, r0
 8009418:	0f5b      	lsrs	r3, r3, #29
 800941a:	3301      	adds	r3, #1
 800941c:	fbb4 f3f3 	udiv	r3, r4, r3
 8009420:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009422:	697b      	ldr	r3, [r7, #20]
}
 8009424:	4618      	mov	r0, r3
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	bd90      	pop	{r4, r7, pc}
 800942c:	0801f56c 	.word	0x0801f56c
 8009430:	00f42400 	.word	0x00f42400
 8009434:	01e84800 	.word	0x01e84800

08009438 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009438:	b598      	push	{r3, r4, r7, lr}
 800943a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800943c:	f7ff ff5c 	bl	80092f8 <HAL_RCC_GetSysClockFreq>
 8009440:	4604      	mov	r4, r0
 8009442:	f7ff f9e6 	bl	8008812 <LL_RCC_GetAHBPrescaler>
 8009446:	4603      	mov	r3, r0
 8009448:	091b      	lsrs	r3, r3, #4
 800944a:	f003 030f 	and.w	r3, r3, #15
 800944e:	4a03      	ldr	r2, [pc, #12]	; (800945c <HAL_RCC_GetHCLKFreq+0x24>)
 8009450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009454:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8009458:	4618      	mov	r0, r3
 800945a:	bd98      	pop	{r3, r4, r7, pc}
 800945c:	0801f50c 	.word	0x0801f50c

08009460 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009460:	b598      	push	{r3, r4, r7, lr}
 8009462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009464:	f7ff ffe8 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 8009468:	4604      	mov	r4, r0
 800946a:	f7ff f9ea 	bl	8008842 <LL_RCC_GetAPB1Prescaler>
 800946e:	4603      	mov	r3, r0
 8009470:	0a1b      	lsrs	r3, r3, #8
 8009472:	4a03      	ldr	r2, [pc, #12]	; (8009480 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009478:	fa24 f303 	lsr.w	r3, r4, r3
}
 800947c:	4618      	mov	r0, r3
 800947e:	bd98      	pop	{r3, r4, r7, pc}
 8009480:	0801f54c 	.word	0x0801f54c

08009484 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009484:	b598      	push	{r3, r4, r7, lr}
 8009486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009488:	f7ff ffd6 	bl	8009438 <HAL_RCC_GetHCLKFreq>
 800948c:	4604      	mov	r4, r0
 800948e:	f7ff f9e3 	bl	8008858 <LL_RCC_GetAPB2Prescaler>
 8009492:	4603      	mov	r3, r0
 8009494:	0adb      	lsrs	r3, r3, #11
 8009496:	4a03      	ldr	r2, [pc, #12]	; (80094a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800949c:	fa24 f303 	lsr.w	r3, r4, r3
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	bd98      	pop	{r3, r4, r7, pc}
 80094a4:	0801f54c 	.word	0x0801f54c

080094a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80094a8:	b590      	push	{r4, r7, lr}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	091b      	lsrs	r3, r3, #4
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	4a10      	ldr	r2, [pc, #64]	; (80094fc <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80094ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094be:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80094c0:	f7ff f9b2 	bl	8008828 <LL_RCC_GetAHB3Prescaler>
 80094c4:	4603      	mov	r3, r0
 80094c6:	091b      	lsrs	r3, r3, #4
 80094c8:	f003 030f 	and.w	r3, r3, #15
 80094cc:	4a0c      	ldr	r2, [pc, #48]	; (8009500 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80094ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094d8:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	4a09      	ldr	r2, [pc, #36]	; (8009504 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80094de:	fba2 2303 	umull	r2, r3, r2, r3
 80094e2:	0c9c      	lsrs	r4, r3, #18
 80094e4:	f7fe ff58 	bl	8008398 <HAL_PWREx_GetVoltageRange>
 80094e8:	4603      	mov	r3, r0
 80094ea:	4619      	mov	r1, r3
 80094ec:	4620      	mov	r0, r4
 80094ee:	f000 f80b 	bl	8009508 <RCC_SetFlashLatency>
 80094f2:	4603      	mov	r3, r0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd90      	pop	{r4, r7, pc}
 80094fc:	0801f56c 	.word	0x0801f56c
 8009500:	0801f50c 	.word	0x0801f50c
 8009504:	431bde83 	.word	0x431bde83

08009508 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b08e      	sub	sp, #56	; 0x38
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009512:	4a3a      	ldr	r2, [pc, #232]	; (80095fc <RCC_SetFlashLatency+0xf4>)
 8009514:	f107 0320 	add.w	r3, r7, #32
 8009518:	e892 0003 	ldmia.w	r2, {r0, r1}
 800951c:	6018      	str	r0, [r3, #0]
 800951e:	3304      	adds	r3, #4
 8009520:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009522:	4a37      	ldr	r2, [pc, #220]	; (8009600 <RCC_SetFlashLatency+0xf8>)
 8009524:	f107 0318 	add.w	r3, r7, #24
 8009528:	e892 0003 	ldmia.w	r2, {r0, r1}
 800952c:	6018      	str	r0, [r3, #0]
 800952e:	3304      	adds	r3, #4
 8009530:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009532:	4a34      	ldr	r2, [pc, #208]	; (8009604 <RCC_SetFlashLatency+0xfc>)
 8009534:	f107 030c 	add.w	r3, r7, #12
 8009538:	ca07      	ldmia	r2, {r0, r1, r2}
 800953a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800953e:	2300      	movs	r3, #0
 8009540:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009548:	d11b      	bne.n	8009582 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800954a:	2300      	movs	r3, #0
 800954c:	633b      	str	r3, [r7, #48]	; 0x30
 800954e:	e014      	b.n	800957a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009552:	005b      	lsls	r3, r3, #1
 8009554:	3338      	adds	r3, #56	; 0x38
 8009556:	443b      	add	r3, r7
 8009558:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800955c:	461a      	mov	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	4293      	cmp	r3, r2
 8009562:	d807      	bhi.n	8009574 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009566:	009b      	lsls	r3, r3, #2
 8009568:	3338      	adds	r3, #56	; 0x38
 800956a:	443b      	add	r3, r7
 800956c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009572:	e021      	b.n	80095b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	3301      	adds	r3, #1
 8009578:	633b      	str	r3, [r7, #48]	; 0x30
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	2b02      	cmp	r3, #2
 800957e:	d9e7      	bls.n	8009550 <RCC_SetFlashLatency+0x48>
 8009580:	e01a      	b.n	80095b8 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009582:	2300      	movs	r3, #0
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009586:	e014      	b.n	80095b2 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	3338      	adds	r3, #56	; 0x38
 800958e:	443b      	add	r3, r7
 8009590:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8009594:	461a      	mov	r2, r3
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4293      	cmp	r3, r2
 800959a:	d807      	bhi.n	80095ac <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	3338      	adds	r3, #56	; 0x38
 80095a2:	443b      	add	r3, r7
 80095a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80095a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80095aa:	e005      	b.n	80095b8 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80095ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ae:	3301      	adds	r3, #1
 80095b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80095b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b4:	2b02      	cmp	r3, #2
 80095b6:	d9e7      	bls.n	8009588 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80095b8:	4b13      	ldr	r3, [pc, #76]	; (8009608 <RCC_SetFlashLatency+0x100>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f023 0207 	bic.w	r2, r3, #7
 80095c0:	4911      	ldr	r1, [pc, #68]	; (8009608 <RCC_SetFlashLatency+0x100>)
 80095c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095c4:	4313      	orrs	r3, r2
 80095c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095c8:	f7f9 fa62 	bl	8002a90 <HAL_GetTick>
 80095cc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80095ce:	e008      	b.n	80095e2 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80095d0:	f7f9 fa5e 	bl	8002a90 <HAL_GetTick>
 80095d4:	4602      	mov	r2, r0
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	2b02      	cmp	r3, #2
 80095dc:	d901      	bls.n	80095e2 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80095de:	2303      	movs	r3, #3
 80095e0:	e007      	b.n	80095f2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80095e2:	4b09      	ldr	r3, [pc, #36]	; (8009608 <RCC_SetFlashLatency+0x100>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d1ef      	bne.n	80095d0 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3738      	adds	r7, #56	; 0x38
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	0801ec9c 	.word	0x0801ec9c
 8009600:	0801eca4 	.word	0x0801eca4
 8009604:	0801ecac 	.word	0x0801ecac
 8009608:	58004000 	.word	0x58004000

0800960c <LL_RCC_LSE_IsReady>:
{
 800960c:	b480      	push	{r7}
 800960e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b02      	cmp	r3, #2
 800961e:	d101      	bne.n	8009624 <LL_RCC_LSE_IsReady+0x18>
 8009620:	2301      	movs	r3, #1
 8009622:	e000      	b.n	8009626 <LL_RCC_LSE_IsReady+0x1a>
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	46bd      	mov	sp, r7
 800962a:	bc80      	pop	{r7}
 800962c:	4770      	bx	lr

0800962e <LL_RCC_SetUSARTClockSource>:
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8009636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800963a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	0c1b      	lsrs	r3, r3, #16
 8009642:	43db      	mvns	r3, r3
 8009644:	401a      	ands	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	b29b      	uxth	r3, r3
 800964a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800964e:	4313      	orrs	r3, r2
 8009650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	bc80      	pop	{r7}
 800965c:	4770      	bx	lr

0800965e <LL_RCC_SetI2SClockSource>:
{
 800965e:	b480      	push	{r7}
 8009660:	b083      	sub	sp, #12
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8009666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800966a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800966e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009672:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4313      	orrs	r3, r2
 800967a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800967e:	bf00      	nop
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	bc80      	pop	{r7}
 8009686:	4770      	bx	lr

08009688 <LL_RCC_SetLPUARTClockSource>:
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009690:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800969c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096a8:	bf00      	nop
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bc80      	pop	{r7}
 80096b0:	4770      	bx	lr

080096b2 <LL_RCC_SetI2CClockSource>:
{
 80096b2:	b480      	push	{r7}
 80096b4:	b083      	sub	sp, #12
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80096ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096be:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	091b      	lsrs	r3, r3, #4
 80096c6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80096ca:	43db      	mvns	r3, r3
 80096cc:	401a      	ands	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80096d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096da:	4313      	orrs	r3, r2
 80096dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80096e0:	bf00      	nop
 80096e2:	370c      	adds	r7, #12
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bc80      	pop	{r7}
 80096e8:	4770      	bx	lr

080096ea <LL_RCC_SetLPTIMClockSource>:
{
 80096ea:	b480      	push	{r7}
 80096ec:	b083      	sub	sp, #12
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80096f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096f6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	0c1b      	lsrs	r3, r3, #16
 80096fe:	041b      	lsls	r3, r3, #16
 8009700:	43db      	mvns	r3, r3
 8009702:	401a      	ands	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	041b      	lsls	r3, r3, #16
 8009708:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800970c:	4313      	orrs	r3, r2
 800970e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009712:	bf00      	nop
 8009714:	370c      	adds	r7, #12
 8009716:	46bd      	mov	sp, r7
 8009718:	bc80      	pop	{r7}
 800971a:	4770      	bx	lr

0800971c <LL_RCC_SetRNGClockSource>:
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8009724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800972c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	4313      	orrs	r3, r2
 8009738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	bc80      	pop	{r7}
 8009744:	4770      	bx	lr

08009746 <LL_RCC_SetADCClockSource>:
{
 8009746:	b480      	push	{r7}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800974e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009756:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800975a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4313      	orrs	r3, r2
 8009762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8009766:	bf00      	nop
 8009768:	370c      	adds	r7, #12
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <LL_RCC_SetRTCClockSource>:
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800977c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	bc80      	pop	{r7}
 8009798:	4770      	bx	lr

0800979a <LL_RCC_GetRTCClockSource>:
{
 800979a:	b480      	push	{r7}
 800979c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800979e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bc80      	pop	{r7}
 80097b0:	4770      	bx	lr

080097b2 <LL_RCC_ForceBackupDomainReset>:
{
 80097b2:	b480      	push	{r7}
 80097b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097ca:	bf00      	nop
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bc80      	pop	{r7}
 80097d0:	4770      	bx	lr

080097d2 <LL_RCC_ReleaseBackupDomainReset>:
{
 80097d2:	b480      	push	{r7}
 80097d4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80097d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80097e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80097ea:	bf00      	nop
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bc80      	pop	{r7}
 80097f0:	4770      	bx	lr
	...

080097f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b086      	sub	sp, #24
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8009800:	2300      	movs	r3, #0
 8009802:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009804:	2300      	movs	r3, #0
 8009806:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009810:	2b00      	cmp	r3, #0
 8009812:	d058      	beq.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8009814:	f7fe fd7e 	bl	8008314 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009818:	f7f9 f93a 	bl	8002a90 <HAL_GetTick>
 800981c:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800981e:	e009      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009820:	f7f9 f936 	bl	8002a90 <HAL_GetTick>
 8009824:	4602      	mov	r2, r0
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	2b02      	cmp	r3, #2
 800982c:	d902      	bls.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	74fb      	strb	r3, [r7, #19]
        break;
 8009832:	e006      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8009834:	4b7b      	ldr	r3, [pc, #492]	; (8009a24 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800983c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009840:	d1ee      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8009842:	7cfb      	ldrb	r3, [r7, #19]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d13c      	bne.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8009848:	f7ff ffa7 	bl	800979a <LL_RCC_GetRTCClockSource>
 800984c:	4602      	mov	r2, r0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009852:	429a      	cmp	r2, r3
 8009854:	d00f      	beq.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009856:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800985a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800985e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009862:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009864:	f7ff ffa5 	bl	80097b2 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009868:	f7ff ffb3 	bl	80097d2 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800986c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f003 0302 	and.w	r3, r3, #2
 800987c:	2b00      	cmp	r3, #0
 800987e:	d014      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009880:	f7f9 f906 	bl	8002a90 <HAL_GetTick>
 8009884:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8009886:	e00b      	b.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009888:	f7f9 f902 	bl	8002a90 <HAL_GetTick>
 800988c:	4602      	mov	r2, r0
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	1ad3      	subs	r3, r2, r3
 8009892:	f241 3288 	movw	r2, #5000	; 0x1388
 8009896:	4293      	cmp	r3, r2
 8009898:	d902      	bls.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800989a:	2303      	movs	r3, #3
 800989c:	74fb      	strb	r3, [r7, #19]
            break;
 800989e:	e004      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80098a0:	f7ff feb4 	bl	800960c <LL_RCC_LSE_IsReady>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d1ee      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80098aa:	7cfb      	ldrb	r3, [r7, #19]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff5b 	bl	8009770 <LL_RCC_SetRTCClockSource>
 80098ba:	e004      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80098bc:	7cfb      	ldrb	r3, [r7, #19]
 80098be:	74bb      	strb	r3, [r7, #18]
 80098c0:	e001      	b.n	80098c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098c2:	7cfb      	ldrb	r3, [r7, #19]
 80098c4:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d004      	beq.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7ff fea9 	bl	800962e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0302 	and.w	r3, r3, #2
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d004      	beq.n	80098f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7ff fe9e 	bl	800962e <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0320 	and.w	r3, r3, #32
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d004      	beq.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	4618      	mov	r0, r3
 8009904:	f7ff fec0 	bl	8009688 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009910:	2b00      	cmp	r3, #0
 8009912:	d004      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	6a1b      	ldr	r3, [r3, #32]
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff fee6 	bl	80096ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009926:	2b00      	cmp	r3, #0
 8009928:	d004      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800992e:	4618      	mov	r0, r3
 8009930:	f7ff fedb 	bl	80096ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800993c:	2b00      	cmp	r3, #0
 800993e:	d004      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009944:	4618      	mov	r0, r3
 8009946:	f7ff fed0 	bl	80096ea <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009952:	2b00      	cmp	r3, #0
 8009954:	d004      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	695b      	ldr	r3, [r3, #20]
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fea9 	bl	80096b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009968:	2b00      	cmp	r3, #0
 800996a:	d004      	beq.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	699b      	ldr	r3, [r3, #24]
 8009970:	4618      	mov	r0, r3
 8009972:	f7ff fe9e 	bl	80096b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800997e:	2b00      	cmp	r3, #0
 8009980:	d004      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	69db      	ldr	r3, [r3, #28]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff fe93 	bl	80096b2 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b00      	cmp	r3, #0
 8009996:	d011      	beq.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fe5e 	bl	800965e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099aa:	d107      	bne.n	80099bc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80099ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d010      	beq.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fea5 	bl	800971c <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d107      	bne.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80099da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80099e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80099e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d011      	beq.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff fea3 	bl	8009746 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009a08:	d107      	bne.n	8009a1a <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a18:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8009a1a:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3718      	adds	r7, #24
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	58000400 	.word	0x58000400

08009a28 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d071      	beq.n	8009b1e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d106      	bne.n	8009a54 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f7f8 fc54 	bl	80022fc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009a5c:	4b32      	ldr	r3, [pc, #200]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f003 0310 	and.w	r3, r3, #16
 8009a64:	2b10      	cmp	r3, #16
 8009a66:	d051      	beq.n	8009b0c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a68:	4b2f      	ldr	r3, [pc, #188]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a6a:	22ca      	movs	r2, #202	; 0xca
 8009a6c:	625a      	str	r2, [r3, #36]	; 0x24
 8009a6e:	4b2e      	ldr	r3, [pc, #184]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a70:	2253      	movs	r2, #83	; 0x53
 8009a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fa11 	bl	8009e9c <RTC_EnterInitMode>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8009a7e:	7bfb      	ldrb	r3, [r7, #15]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d13f      	bne.n	8009b04 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009a84:	4b28      	ldr	r3, [pc, #160]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	4a27      	ldr	r2, [pc, #156]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a8a:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8009a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a92:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009a94:	4b24      	ldr	r3, [pc, #144]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009a96:	699a      	ldr	r2, [r3, #24]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6859      	ldr	r1, [r3, #4]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	691b      	ldr	r3, [r3, #16]
 8009aa0:	4319      	orrs	r1, r3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	430b      	orrs	r3, r1
 8009aa8:	491f      	ldr	r1, [pc, #124]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68da      	ldr	r2, [r3, #12]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	041b      	lsls	r3, r3, #16
 8009ab8:	491b      	ldr	r1, [pc, #108]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009aba:	4313      	orrs	r3, r2
 8009abc:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8009abe:	4b1a      	ldr	r3, [pc, #104]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	430b      	orrs	r3, r1
 8009ad0:	4915      	ldr	r1, [pc, #84]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fa14 	bl	8009f04 <RTC_ExitInitMode>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d10e      	bne.n	8009b04 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8009ae6:	4b10      	ldr	r3, [pc, #64]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009ae8:	699b      	ldr	r3, [r3, #24]
 8009aea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6a19      	ldr	r1, [r3, #32]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	69db      	ldr	r3, [r3, #28]
 8009af6:	4319      	orrs	r1, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	430b      	orrs	r3, r1
 8009afe:	490a      	ldr	r1, [pc, #40]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009b00:	4313      	orrs	r3, r2
 8009b02:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b04:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <HAL_RTC_Init+0x100>)
 8009b06:	22ff      	movs	r2, #255	; 0xff
 8009b08:	625a      	str	r2, [r3, #36]	; 0x24
 8009b0a:	e001      	b.n	8009b10 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d103      	bne.n	8009b1e <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8009b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	40002800 	.word	0x40002800

08009b2c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009b2c:	b590      	push	{r4, r7, lr}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d101      	bne.n	8009b4a <HAL_RTC_SetAlarm_IT+0x1e>
 8009b46:	2302      	movs	r3, #2
 8009b48:	e0f3      	b.n	8009d32 <HAL_RTC_SetAlarm_IT+0x206>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2202      	movs	r2, #2
 8009b56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8009b5a:	4b78      	ldr	r3, [pc, #480]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b62:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b6a:	d06a      	beq.n	8009c42 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d13a      	bne.n	8009be8 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009b72:	4b72      	ldr	r3, [pc, #456]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d102      	bne.n	8009b84 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	2200      	movs	r2, #0
 8009b82:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	4618      	mov	r0, r3
 8009b92:	f000 f9f5 	bl	8009f80 <RTC_ByteToBcd2>
 8009b96:	4603      	mov	r3, r0
 8009b98:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f9ee 	bl	8009f80 <RTC_ByteToBcd2>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009ba8:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	789b      	ldrb	r3, [r3, #2]
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f000 f9e6 	bl	8009f80 <RTC_ByteToBcd2>
 8009bb4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009bb6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	78db      	ldrb	r3, [r3, #3]
 8009bbe:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009bc0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f000 f9d8 	bl	8009f80 <RTC_ByteToBcd2>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009bd4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009bdc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009be2:	4313      	orrs	r3, r2
 8009be4:	617b      	str	r3, [r7, #20]
 8009be6:	e02c      	b.n	8009c42 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	695b      	ldr	r3, [r3, #20]
 8009bec:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8009bf0:	d00d      	beq.n	8009c0e <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009bfa:	d008      	beq.n	8009c0e <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8009bfc:	4b4f      	ldr	r3, [pc, #316]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	785b      	ldrb	r3, [r3, #1]
 8009c18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009c1a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009c20:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	78db      	ldrb	r3, [r3, #3]
 8009c26:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8009c28:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009c30:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8009c32:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8009c38:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c42:	4b3e      	ldr	r3, [pc, #248]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c44:	22ca      	movs	r2, #202	; 0xca
 8009c46:	625a      	str	r2, [r3, #36]	; 0x24
 8009c48:	4b3c      	ldr	r3, [pc, #240]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c4a:	2253      	movs	r2, #83	; 0x53
 8009c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c56:	d12c      	bne.n	8009cb2 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009c58:	4b38      	ldr	r3, [pc, #224]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c5a:	699b      	ldr	r3, [r3, #24]
 8009c5c:	4a37      	ldr	r2, [pc, #220]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c5e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009c62:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009c64:	4b35      	ldr	r3, [pc, #212]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c66:	2201      	movs	r2, #1
 8009c68:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c70:	d107      	bne.n	8009c82 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	699a      	ldr	r2, [r3, #24]
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	69db      	ldr	r3, [r3, #28]
 8009c7a:	4930      	ldr	r1, [pc, #192]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	644b      	str	r3, [r1, #68]	; 0x44
 8009c80:	e006      	b.n	8009c90 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8009c82:	4a2e      	ldr	r2, [pc, #184]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c84:	697b      	ldr	r3, [r7, #20]
 8009c86:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8009c88:	4a2c      	ldr	r2, [pc, #176]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	699b      	ldr	r3, [r3, #24]
 8009c8e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8009c90:	4a2a      	ldr	r2, [pc, #168]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c9c:	f043 0201 	orr.w	r2, r3, #1
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009ca4:	4b25      	ldr	r3, [pc, #148]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	4a24      	ldr	r2, [pc, #144]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009caa:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8009cae:	6193      	str	r3, [r2, #24]
 8009cb0:	e02b      	b.n	8009d0a <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009cb2:	4b22      	ldr	r3, [pc, #136]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cb4:	699b      	ldr	r3, [r3, #24]
 8009cb6:	4a21      	ldr	r2, [pc, #132]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cb8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009cbc:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cc0:	2202      	movs	r2, #2
 8009cc2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8009cc4:	693b      	ldr	r3, [r7, #16]
 8009cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cca:	d107      	bne.n	8009cdc <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	699a      	ldr	r2, [r3, #24]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	4919      	ldr	r1, [pc, #100]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cda:	e006      	b.n	8009cea <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8009cdc:	4a17      	ldr	r2, [pc, #92]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8009ce2:	4a16      	ldr	r2, [pc, #88]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	699b      	ldr	r3, [r3, #24]
 8009ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8009cea:	4a14      	ldr	r2, [pc, #80]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf6:	f043 0202 	orr.w	r2, r3, #2
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009cfe:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009d00:	699b      	ldr	r3, [r3, #24]
 8009d02:	4a0e      	ldr	r2, [pc, #56]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009d04:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8009d08:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <HAL_RTC_SetAlarm_IT+0x214>)
 8009d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d10:	4a0b      	ldr	r2, [pc, #44]	; (8009d40 <HAL_RTC_SetAlarm_IT+0x214>)
 8009d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d1a:	4b08      	ldr	r3, [pc, #32]	; (8009d3c <HAL_RTC_SetAlarm_IT+0x210>)
 8009d1c:	22ff      	movs	r2, #255	; 0xff
 8009d1e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd90      	pop	{r4, r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40002800 	.word	0x40002800
 8009d40:	58000800 	.word	0x58000800

08009d44 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
 8009d4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009d54:	2b01      	cmp	r3, #1
 8009d56:	d101      	bne.n	8009d5c <HAL_RTC_DeactivateAlarm+0x18>
 8009d58:	2302      	movs	r3, #2
 8009d5a:	e048      	b.n	8009dee <HAL_RTC_DeactivateAlarm+0xaa>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6c:	4b22      	ldr	r3, [pc, #136]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d6e:	22ca      	movs	r2, #202	; 0xca
 8009d70:	625a      	str	r2, [r3, #36]	; 0x24
 8009d72:	4b21      	ldr	r3, [pc, #132]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d74:	2253      	movs	r2, #83	; 0x53
 8009d76:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d7e:	d115      	bne.n	8009dac <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8009d80:	4b1d      	ldr	r3, [pc, #116]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	4a1c      	ldr	r2, [pc, #112]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009d8a:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8009d8c:	4b1a      	ldr	r3, [pc, #104]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d90:	4a19      	ldr	r2, [pc, #100]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009d96:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d9c:	f023 0201 	bic.w	r2, r3, #1
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009da4:	4b14      	ldr	r3, [pc, #80]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009da6:	2201      	movs	r2, #1
 8009da8:	65da      	str	r2, [r3, #92]	; 0x5c
 8009daa:	e014      	b.n	8009dd6 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8009dac:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dae:	699b      	ldr	r3, [r3, #24]
 8009db0:	4a11      	ldr	r2, [pc, #68]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009db2:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8009db6:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8009db8:	4b0f      	ldr	r3, [pc, #60]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dbc:	4a0e      	ldr	r2, [pc, #56]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dbe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009dc2:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc8:	f023 0202 	bic.w	r2, r3, #2
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8009dd8:	22ff      	movs	r2, #255	; 0xff
 8009dda:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	370c      	adds	r7, #12
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bc80      	pop	{r7}
 8009df6:	4770      	bx	lr
 8009df8:	40002800 	.word	0x40002800

08009dfc <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8009e04:	4b11      	ldr	r3, [pc, #68]	; (8009e4c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 0301 	and.w	r3, r3, #1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d005      	beq.n	8009e26 <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8009e1a:	4b0c      	ldr	r3, [pc, #48]	; (8009e4c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	f7f9 f80e 	bl	8002e42 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f003 0302 	and.w	r3, r3, #2
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d005      	beq.n	8009e3c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8009e30:	4b06      	ldr	r3, [pc, #24]	; (8009e4c <HAL_RTC_AlarmIRQHandler+0x50>)
 8009e32:	2202      	movs	r2, #2
 8009e34:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f94a 	bl	800a0d0 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8009e44:	bf00      	nop
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	40002800 	.word	0x40002800

08009e50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009e58:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <HAL_RTC_WaitForSynchro+0x48>)
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	4a0e      	ldr	r2, [pc, #56]	; (8009e98 <HAL_RTC_WaitForSynchro+0x48>)
 8009e5e:	f023 0320 	bic.w	r3, r3, #32
 8009e62:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8009e64:	f7f8 fe14 	bl	8002a90 <HAL_GetTick>
 8009e68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e6a:	e009      	b.n	8009e80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e6c:	f7f8 fe10 	bl	8002a90 <HAL_GetTick>
 8009e70:	4602      	mov	r2, r0
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e7a:	d901      	bls.n	8009e80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8009e7c:	2303      	movs	r3, #3
 8009e7e:	e006      	b.n	8009e8e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009e80:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <HAL_RTC_WaitForSynchro+0x48>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d0ef      	beq.n	8009e6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3710      	adds	r7, #16
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	40002800 	.word	0x40002800

08009e9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009ea8:	4b15      	ldr	r3, [pc, #84]	; (8009f00 <RTC_EnterInitMode+0x64>)
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d120      	bne.n	8009ef6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009eb4:	4b12      	ldr	r3, [pc, #72]	; (8009f00 <RTC_EnterInitMode+0x64>)
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	4a11      	ldr	r2, [pc, #68]	; (8009f00 <RTC_EnterInitMode+0x64>)
 8009eba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ebe:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009ec0:	f7f8 fde6 	bl	8002a90 <HAL_GetTick>
 8009ec4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ec6:	e00d      	b.n	8009ee4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009ec8:	f7f8 fde2 	bl	8002a90 <HAL_GetTick>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	1ad3      	subs	r3, r2, r3
 8009ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ed6:	d905      	bls.n	8009ee4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2203      	movs	r2, #3
 8009ee0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009ee4:	4b06      	ldr	r3, [pc, #24]	; (8009f00 <RTC_EnterInitMode+0x64>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <RTC_EnterInitMode+0x5a>
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d1e8      	bne.n	8009ec8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	40002800 	.word	0x40002800

08009f04 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009f10:	4b1a      	ldr	r3, [pc, #104]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	4a19      	ldr	r2, [pc, #100]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f1a:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8009f1c:	4b17      	ldr	r3, [pc, #92]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f1e:	699b      	ldr	r3, [r3, #24]
 8009f20:	f003 0320 	and.w	r3, r3, #32
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d10c      	bne.n	8009f42 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f7ff ff91 	bl	8009e50 <HAL_RTC_WaitForSynchro>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d01e      	beq.n	8009f72 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2203      	movs	r2, #3
 8009f38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	73fb      	strb	r3, [r7, #15]
 8009f40:	e017      	b.n	8009f72 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f42:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	4a0d      	ldr	r2, [pc, #52]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f48:	f023 0320 	bic.w	r3, r3, #32
 8009f4c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f7ff ff7e 	bl	8009e50 <HAL_RTC_WaitForSynchro>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d005      	beq.n	8009f66 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2203      	movs	r2, #3
 8009f5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009f66:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f68:	699b      	ldr	r3, [r3, #24]
 8009f6a:	4a04      	ldr	r2, [pc, #16]	; (8009f7c <RTC_ExitInitMode+0x78>)
 8009f6c:	f043 0320 	orr.w	r3, r3, #32
 8009f70:	6193      	str	r3, [r2, #24]
  }

  return status;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	40002800 	.word	0x40002800

08009f80 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8009f8e:	79fb      	ldrb	r3, [r7, #7]
 8009f90:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8009f92:	e005      	b.n	8009fa0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	3301      	adds	r3, #1
 8009f98:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	3b0a      	subs	r3, #10
 8009f9e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8009fa0:	7afb      	ldrb	r3, [r7, #11]
 8009fa2:	2b09      	cmp	r3, #9
 8009fa4:	d8f6      	bhi.n	8009f94 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	b2db      	uxtb	r3, r3
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	7afb      	ldrb	r3, [r7, #11]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	b2db      	uxtb	r3, r3
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bc80      	pop	{r7}
 8009fbc:	4770      	bx	lr
	...

08009fc0 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b083      	sub	sp, #12
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009fce:	2b01      	cmp	r3, #1
 8009fd0:	d101      	bne.n	8009fd6 <HAL_RTCEx_EnableBypassShadow+0x16>
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	e01f      	b.n	800a016 <HAL_RTCEx_EnableBypassShadow+0x56>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fe6:	4b0e      	ldr	r3, [pc, #56]	; (800a020 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fe8:	22ca      	movs	r2, #202	; 0xca
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24
 8009fec:	4b0c      	ldr	r3, [pc, #48]	; (800a020 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009fee:	2253      	movs	r2, #83	; 0x53
 8009ff0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009ff2:	4b0b      	ldr	r3, [pc, #44]	; (800a020 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	4a0a      	ldr	r2, [pc, #40]	; (800a020 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8009ff8:	f043 0320 	orr.w	r3, r3, #32
 8009ffc:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ffe:	4b08      	ldr	r3, [pc, #32]	; (800a020 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800a000:	22ff      	movs	r2, #255	; 0xff
 800a002:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2201      	movs	r2, #1
 800a008:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	370c      	adds	r7, #12
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bc80      	pop	{r7}
 800a01e:	4770      	bx	lr
 800a020:	40002800 	.word	0x40002800

0800a024 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800a024:	b480      	push	{r7}
 800a026:	b083      	sub	sp, #12
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a032:	2b01      	cmp	r3, #1
 800a034:	d101      	bne.n	800a03a <HAL_RTCEx_SetSSRU_IT+0x16>
 800a036:	2302      	movs	r3, #2
 800a038:	e027      	b.n	800a08a <HAL_RTCEx_SetSSRU_IT+0x66>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2202      	movs	r2, #2
 800a046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a04a:	4b12      	ldr	r3, [pc, #72]	; (800a094 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a04c:	22ca      	movs	r2, #202	; 0xca
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24
 800a050:	4b10      	ldr	r3, [pc, #64]	; (800a094 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a052:	2253      	movs	r2, #83	; 0x53
 800a054:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800a056:	4b0f      	ldr	r3, [pc, #60]	; (800a094 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	4a0e      	ldr	r2, [pc, #56]	; (800a094 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a05c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a060:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800a062:	4b0d      	ldr	r3, [pc, #52]	; (800a098 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a064:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a068:	4a0b      	ldr	r2, [pc, #44]	; (800a098 <HAL_RTCEx_SetSSRU_IT+0x74>)
 800a06a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a06e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a072:	4b08      	ldr	r3, [pc, #32]	; (800a094 <HAL_RTCEx_SetSSRU_IT+0x70>)
 800a074:	22ff      	movs	r2, #255	; 0xff
 800a076:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	370c      	adds	r7, #12
 800a08e:	46bd      	mov	sp, r7
 800a090:	bc80      	pop	{r7}
 800a092:	4770      	bx	lr
 800a094:	40002800 	.word	0x40002800
 800a098:	58000800 	.word	0x58000800

0800a09c <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b082      	sub	sp, #8
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800a0a4:	4b09      	ldr	r3, [pc, #36]	; (800a0cc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a0a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d005      	beq.n	800a0bc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800a0b0:	4b06      	ldr	r3, [pc, #24]	; (800a0cc <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800a0b2:	2240      	movs	r2, #64	; 0x40
 800a0b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7f8 fecd 	bl	8002e56 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2201      	movs	r2, #1
 800a0c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800a0c4:	bf00      	nop
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	40002800 	.word	0x40002800

0800a0d0 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a0d0:	b480      	push	{r7}
 800a0d2:	b083      	sub	sp, #12
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a0d8:	bf00      	nop
 800a0da:	370c      	adds	r7, #12
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bc80      	pop	{r7}
 800a0e0:	4770      	bx	lr
	...

0800a0e4 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800a0e4:	b480      	push	{r7}
 800a0e6:	b087      	sub	sp, #28
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a0f0:	4b07      	ldr	r3, [pc, #28]	; (800a110 <HAL_RTCEx_BKUPWrite+0x2c>)
 800a0f2:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	697a      	ldr	r2, [r7, #20]
 800a0fa:	4413      	add	r3, r2
 800a0fc:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	687a      	ldr	r2, [r7, #4]
 800a102:	601a      	str	r2, [r3, #0]
}
 800a104:	bf00      	nop
 800a106:	371c      	adds	r7, #28
 800a108:	46bd      	mov	sp, r7
 800a10a:	bc80      	pop	{r7}
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	4000b100 	.word	0x4000b100

0800a114 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800a11e:	4b07      	ldr	r3, [pc, #28]	; (800a13c <HAL_RTCEx_BKUPRead+0x28>)
 800a120:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4413      	add	r3, r2
 800a12a:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	bc80      	pop	{r7}
 800a138:	4770      	bx	lr
 800a13a:	bf00      	nop
 800a13c:	4000b100 	.word	0x4000b100

0800a140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d101      	bne.n	800a152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e0c6      	b.n	800a2e0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a156:	2b00      	cmp	r3, #0
 800a158:	d108      	bne.n	800a16c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a162:	d009      	beq.n	800a178 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2200      	movs	r2, #0
 800a168:	61da      	str	r2, [r3, #28]
 800a16a:	e005      	b.n	800a178 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2200      	movs	r2, #0
 800a170:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	2b00      	cmp	r3, #0
 800a182:	d106      	bne.n	800a192 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2200      	movs	r2, #0
 800a188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f7f8 f95f 	bl	8002450 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1b2:	d902      	bls.n	800a1ba <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
 800a1b8:	e002      	b.n	800a1c0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a1ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a1be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a1c8:	d007      	beq.n	800a1da <HAL_SPI_Init+0x9a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a1d2:	d002      	beq.n	800a1da <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1ea:	431a      	orrs	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	691b      	ldr	r3, [r3, #16]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	431a      	orrs	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a208:	431a      	orrs	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a212:	431a      	orrs	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6a1b      	ldr	r3, [r3, #32]
 800a218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a21c:	ea42 0103 	orr.w	r1, r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a224:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	430a      	orrs	r2, r1
 800a22e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a238:	d11b      	bne.n	800a272 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a24a:	d903      	bls.n	800a254 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	631a      	str	r2, [r3, #48]	; 0x30
 800a252:	e002      	b.n	800a25a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a25e:	2b02      	cmp	r3, #2
 800a260:	d107      	bne.n	800a272 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	681a      	ldr	r2, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	699b      	ldr	r3, [r3, #24]
 800a276:	0c1b      	lsrs	r3, r3, #16
 800a278:	f003 0204 	and.w	r2, r3, #4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a280:	f003 0310 	and.w	r3, r3, #16
 800a284:	431a      	orrs	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a298:	ea42 0103 	orr.w	r1, r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2b2:	d105      	bne.n	800a2c0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	b292      	uxth	r2, r2
 800a2be:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69da      	ldr	r2, [r3, #28]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3710      	adds	r7, #16
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <LL_PWR_SetRadioBusyTrigger>:
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800a2f0:	4b06      	ldr	r3, [pc, #24]	; (800a30c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2f8:	4904      	ldr	r1, [pc, #16]	; (800a30c <LL_PWR_SetRadioBusyTrigger+0x24>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	608b      	str	r3, [r1, #8]
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	bc80      	pop	{r7}
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	58000400 	.word	0x58000400

0800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800a310:	b480      	push	{r7}
 800a312:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a314:	4b05      	ldr	r3, [pc, #20]	; (800a32c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31a:	4a04      	ldr	r2, [pc, #16]	; (800a32c <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 800a31c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a324:	bf00      	nop
 800a326:	46bd      	mov	sp, r7
 800a328:	bc80      	pop	{r7}
 800a32a:	4770      	bx	lr
 800a32c:	58000400 	.word	0x58000400

0800a330 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800a330:	b480      	push	{r7}
 800a332:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33a:	4a04      	ldr	r2, [pc, #16]	; (800a34c <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 800a33c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a344:	bf00      	nop
 800a346:	46bd      	mov	sp, r7
 800a348:	bc80      	pop	{r7}
 800a34a:	4770      	bx	lr
 800a34c:	58000400 	.word	0x58000400

0800a350 <LL_PWR_ClearFlag_RFBUSY>:
{
 800a350:	b480      	push	{r7}
 800a352:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800a354:	4b03      	ldr	r3, [pc, #12]	; (800a364 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 800a356:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a35a:	619a      	str	r2, [r3, #24]
}
 800a35c:	bf00      	nop
 800a35e:	46bd      	mov	sp, r7
 800a360:	bc80      	pop	{r7}
 800a362:	4770      	bx	lr
 800a364:	58000400 	.word	0x58000400

0800a368 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 800a368:	b480      	push	{r7}
 800a36a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	f003 0302 	and.w	r3, r3, #2
 800a374:	2b02      	cmp	r3, #2
 800a376:	d101      	bne.n	800a37c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 800a378:	2301      	movs	r3, #1
 800a37a:	e000      	b.n	800a37e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800a37c:	2300      	movs	r3, #0
}
 800a37e:	4618      	mov	r0, r3
 800a380:	46bd      	mov	sp, r7
 800a382:	bc80      	pop	{r7}
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	58000400 	.word	0x58000400

0800a38c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800a390:	4b06      	ldr	r3, [pc, #24]	; (800a3ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d101      	bne.n	800a3a0 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800a39c:	2301      	movs	r3, #1
 800a39e:	e000      	b.n	800a3a2 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bc80      	pop	{r7}
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	58000400 	.word	0x58000400

0800a3b0 <LL_RCC_RF_DisableReset>:
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800a3b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a3c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a3c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800a3c8:	bf00      	nop
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bc80      	pop	{r7}
 800a3ce:	4770      	bx	lr

0800a3d0 <LL_RCC_IsRFUnderReset>:
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800a3d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a3d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3e4:	d101      	bne.n	800a3ea <LL_RCC_IsRFUnderReset+0x1a>
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e000      	b.n	800a3ec <LL_RCC_IsRFUnderReset+0x1c>
 800a3ea:	2300      	movs	r3, #0
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bc80      	pop	{r7}
 800a3f2:	4770      	bx	lr

0800a3f4 <LL_EXTI_EnableIT_32_63>:
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a3fc:	4b06      	ldr	r3, [pc, #24]	; (800a418 <LL_EXTI_EnableIT_32_63+0x24>)
 800a3fe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a402:	4905      	ldr	r1, [pc, #20]	; (800a418 <LL_EXTI_EnableIT_32_63+0x24>)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	4313      	orrs	r3, r2
 800a408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a40c:	bf00      	nop
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	bc80      	pop	{r7}
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	58000800 	.word	0x58000800

0800a41c <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d103      	bne.n	800a432 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
    return status;
 800a42e:	7bfb      	ldrb	r3, [r7, #15]
 800a430:	e052      	b.n	800a4d8 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	799b      	ldrb	r3, [r3, #6]
 800a43a:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800a43c:	7bbb      	ldrb	r3, [r7, #14]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d002      	beq.n	800a448 <HAL_SUBGHZ_Init+0x2c>
 800a442:	7bbb      	ldrb	r3, [r7, #14]
 800a444:	2b03      	cmp	r3, #3
 800a446:	d109      	bne.n	800a45c <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f7f8 f944 	bl	80026dc <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 800a454:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a458:	f7ff ffcc 	bl	800a3f4 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d126      	bne.n	800a4b0 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2202      	movs	r2, #2
 800a466:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 800a468:	f7ff ffa2 	bl	800a3b0 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800a46c:	4b1c      	ldr	r3, [pc, #112]	; (800a4e0 <HAL_SUBGHZ_Init+0xc4>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	4613      	mov	r3, r2
 800a472:	00db      	lsls	r3, r3, #3
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	0cdb      	lsrs	r3, r3, #19
 800a47a:	2264      	movs	r2, #100	; 0x64
 800a47c:	fb02 f303 	mul.w	r3, r2, r3
 800a480:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d105      	bne.n	800a494 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2201      	movs	r2, #1
 800a490:	609a      	str	r2, [r3, #8]
        break;
 800a492:	e007      	b.n	800a4a4 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	3b01      	subs	r3, #1
 800a498:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 800a49a:	f7ff ff99 	bl	800a3d0 <LL_RCC_IsRFUnderReset>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1ee      	bne.n	800a482 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a4a4:	f7ff ff34 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800a4a8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a4ac:	f7ff ff1c 	bl	800a2e8 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 800a4b0:	f7ff ff4e 	bl	800a350 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10a      	bne.n	800a4d0 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 faac 	bl	800aa1c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	719a      	strb	r2, [r3, #6]

  return status;
 800a4d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3710      	adds	r7, #16
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	20000000 	.word	0x20000000

0800a4e4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b086      	sub	sp, #24
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60f8      	str	r0, [r7, #12]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	817b      	strh	r3, [r7, #10]
 800a4f4:	4613      	mov	r3, r2
 800a4f6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	799b      	ldrb	r3, [r3, #6]
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d14a      	bne.n	800a598 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	795b      	ldrb	r3, [r3, #5]
 800a506:	2b01      	cmp	r3, #1
 800a508:	d101      	bne.n	800a50e <HAL_SUBGHZ_WriteRegisters+0x2a>
 800a50a:	2302      	movs	r3, #2
 800a50c:	e045      	b.n	800a59a <HAL_SUBGHZ_WriteRegisters+0xb6>
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	2201      	movs	r2, #1
 800a512:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2202      	movs	r2, #2
 800a518:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 fb4c 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a520:	f7ff ff06 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800a524:	210d      	movs	r1, #13
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f000 fa98 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a52c:	897b      	ldrh	r3, [r7, #10]
 800a52e:	0a1b      	lsrs	r3, r3, #8
 800a530:	b29b      	uxth	r3, r3
 800a532:	b2db      	uxtb	r3, r3
 800a534:	4619      	mov	r1, r3
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f000 fa90 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a53c:	897b      	ldrh	r3, [r7, #10]
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	4619      	mov	r1, r3
 800a542:	68f8      	ldr	r0, [r7, #12]
 800a544:	f000 fa8a 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a548:	2300      	movs	r3, #0
 800a54a:	82bb      	strh	r3, [r7, #20]
 800a54c:	e00a      	b.n	800a564 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a54e:	8abb      	ldrh	r3, [r7, #20]
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	4619      	mov	r1, r3
 800a558:	68f8      	ldr	r0, [r7, #12]
 800a55a:	f000 fa7f 	bl	800aa5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a55e:	8abb      	ldrh	r3, [r7, #20]
 800a560:	3301      	adds	r3, #1
 800a562:	82bb      	strh	r3, [r7, #20]
 800a564:	8aba      	ldrh	r2, [r7, #20]
 800a566:	893b      	ldrh	r3, [r7, #8]
 800a568:	429a      	cmp	r2, r3
 800a56a:	d3f0      	bcc.n	800a54e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a56c:	f7ff fed0 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 fb45 	bl	800ac00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d002      	beq.n	800a584 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	75fb      	strb	r3, [r7, #23]
 800a582:	e001      	b.n	800a588 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	2201      	movs	r2, #1
 800a58c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2200      	movs	r2, #0
 800a592:	715a      	strb	r2, [r3, #5]

    return status;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
 800a596:	e000      	b.n	800a59a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a598:	2302      	movs	r3, #2
  }
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3718      	adds	r7, #24
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b088      	sub	sp, #32
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	607a      	str	r2, [r7, #4]
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	817b      	strh	r3, [r7, #10]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	799b      	ldrb	r3, [r3, #6]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	d14a      	bne.n	800a65a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	795b      	ldrb	r3, [r3, #5]
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d101      	bne.n	800a5d0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 800a5cc:	2302      	movs	r3, #2
 800a5ce:	e045      	b.n	800a65c <HAL_SUBGHZ_ReadRegisters+0xba>
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 faee 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a5dc:	f7ff fea8 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800a5e0:	211d      	movs	r1, #29
 800a5e2:	68f8      	ldr	r0, [r7, #12]
 800a5e4:	f000 fa3a 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800a5e8:	897b      	ldrh	r3, [r7, #10]
 800a5ea:	0a1b      	lsrs	r3, r3, #8
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 fa32 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800a5f8:	897b      	ldrh	r3, [r7, #10]
 800a5fa:	b2db      	uxtb	r3, r3
 800a5fc:	4619      	mov	r1, r3
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 fa2c 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800a604:	2100      	movs	r1, #0
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f000 fa28 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a60c:	2300      	movs	r3, #0
 800a60e:	82fb      	strh	r3, [r7, #22]
 800a610:	e009      	b.n	800a626 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a612:	69b9      	ldr	r1, [r7, #24]
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 fa77 	bl	800ab08 <SUBGHZSPI_Receive>
      pData++;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	3301      	adds	r3, #1
 800a61e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a620:	8afb      	ldrh	r3, [r7, #22]
 800a622:	3301      	adds	r3, #1
 800a624:	82fb      	strh	r3, [r7, #22]
 800a626:	8afa      	ldrh	r2, [r7, #22]
 800a628:	893b      	ldrh	r3, [r7, #8]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d3f1      	bcc.n	800a612 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a62e:	f7ff fe6f 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	f000 fae4 	bl	800ac00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800a640:	2301      	movs	r3, #1
 800a642:	77fb      	strb	r3, [r7, #31]
 800a644:	e001      	b.n	800a64a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2201      	movs	r2, #1
 800a64e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	715a      	strb	r2, [r3, #5]

    return status;
 800a656:	7ffb      	ldrb	r3, [r7, #31]
 800a658:	e000      	b.n	800a65c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800a65a:	2302      	movs	r3, #2
  }
}
 800a65c:	4618      	mov	r0, r3
 800a65e:	3720      	adds	r7, #32
 800a660:	46bd      	mov	sp, r7
 800a662:	bd80      	pop	{r7, pc}

0800a664 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	607a      	str	r2, [r7, #4]
 800a66e:	461a      	mov	r2, r3
 800a670:	460b      	mov	r3, r1
 800a672:	72fb      	strb	r3, [r7, #11]
 800a674:	4613      	mov	r3, r2
 800a676:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	799b      	ldrb	r3, [r3, #6]
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d14a      	bne.n	800a718 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	795b      	ldrb	r3, [r3, #5]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d101      	bne.n	800a68e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800a68a:	2302      	movs	r3, #2
 800a68c:	e045      	b.n	800a71a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	2201      	movs	r2, #1
 800a692:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 fa8f 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800a69a:	7afb      	ldrb	r3, [r7, #11]
 800a69c:	2b84      	cmp	r3, #132	; 0x84
 800a69e:	d002      	beq.n	800a6a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800a6a0:	7afb      	ldrb	r3, [r7, #11]
 800a6a2:	2b94      	cmp	r3, #148	; 0x94
 800a6a4:	d103      	bne.n	800a6ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	711a      	strb	r2, [r3, #4]
 800a6ac:	e002      	b.n	800a6b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a6b4:	f7ff fe3c 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a6b8:	7afb      	ldrb	r3, [r7, #11]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	68f8      	ldr	r0, [r7, #12]
 800a6be:	f000 f9cd 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	82bb      	strh	r3, [r7, #20]
 800a6c6:	e00a      	b.n	800a6de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a6c8:	8abb      	ldrh	r3, [r7, #20]
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f9c2 	bl	800aa5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a6d8:	8abb      	ldrh	r3, [r7, #20]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	82bb      	strh	r3, [r7, #20]
 800a6de:	8aba      	ldrh	r2, [r7, #20]
 800a6e0:	893b      	ldrh	r3, [r7, #8]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d3f0      	bcc.n	800a6c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a6e6:	f7ff fe13 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	2b84      	cmp	r3, #132	; 0x84
 800a6ee:	d002      	beq.n	800a6f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a6f0:	68f8      	ldr	r0, [r7, #12]
 800a6f2:	f000 fa85 	bl	800ac00 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800a6fe:	2301      	movs	r3, #1
 800a700:	75fb      	strb	r3, [r7, #23]
 800a702:	e001      	b.n	800a708 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2201      	movs	r2, #1
 800a70c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	715a      	strb	r2, [r3, #5]

    return status;
 800a714:	7dfb      	ldrb	r3, [r7, #23]
 800a716:	e000      	b.n	800a71a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800a718:	2302      	movs	r3, #2
  }
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b088      	sub	sp, #32
 800a726:	af00      	add	r7, sp, #0
 800a728:	60f8      	str	r0, [r7, #12]
 800a72a:	607a      	str	r2, [r7, #4]
 800a72c:	461a      	mov	r2, r3
 800a72e:	460b      	mov	r3, r1
 800a730:	72fb      	strb	r3, [r7, #11]
 800a732:	4613      	mov	r3, r2
 800a734:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	799b      	ldrb	r3, [r3, #6]
 800a73e:	b2db      	uxtb	r3, r3
 800a740:	2b01      	cmp	r3, #1
 800a742:	d13d      	bne.n	800a7c0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	795b      	ldrb	r3, [r3, #5]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d101      	bne.n	800a750 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800a74c:	2302      	movs	r3, #2
 800a74e:	e038      	b.n	800a7c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a756:	68f8      	ldr	r0, [r7, #12]
 800a758:	f000 fa2e 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a75c:	f7ff fde8 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800a760:	7afb      	ldrb	r3, [r7, #11]
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 f979 	bl	800aa5c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a76a:	2100      	movs	r1, #0
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 f975 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a772:	2300      	movs	r3, #0
 800a774:	82fb      	strh	r3, [r7, #22]
 800a776:	e009      	b.n	800a78c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a778:	69b9      	ldr	r1, [r7, #24]
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 f9c4 	bl	800ab08 <SUBGHZSPI_Receive>
      pData++;
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	3301      	adds	r3, #1
 800a784:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a786:	8afb      	ldrh	r3, [r7, #22]
 800a788:	3301      	adds	r3, #1
 800a78a:	82fb      	strh	r3, [r7, #22]
 800a78c:	8afa      	ldrh	r2, [r7, #22]
 800a78e:	893b      	ldrh	r3, [r7, #8]
 800a790:	429a      	cmp	r2, r3
 800a792:	d3f1      	bcc.n	800a778 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a794:	f7ff fdbc 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 fa31 	bl	800ac00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	77fb      	strb	r3, [r7, #31]
 800a7aa:	e001      	b.n	800a7b0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	715a      	strb	r2, [r3, #5]

    return status;
 800a7bc:	7ffb      	ldrb	r3, [r7, #31]
 800a7be:	e000      	b.n	800a7c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800a7c0:	2302      	movs	r3, #2
  }
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3720      	adds	r7, #32
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b086      	sub	sp, #24
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	60f8      	str	r0, [r7, #12]
 800a7d2:	607a      	str	r2, [r7, #4]
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	72fb      	strb	r3, [r7, #11]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	799b      	ldrb	r3, [r3, #6]
 800a7e2:	b2db      	uxtb	r3, r3
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d13e      	bne.n	800a866 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	795b      	ldrb	r3, [r3, #5]
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e039      	b.n	800a868 <HAL_SUBGHZ_WriteBuffer+0x9e>
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 f9dc 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a800:	f7ff fd96 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800a804:	210e      	movs	r1, #14
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 f928 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a80c:	7afb      	ldrb	r3, [r7, #11]
 800a80e:	4619      	mov	r1, r3
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	f000 f923 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a816:	2300      	movs	r3, #0
 800a818:	82bb      	strh	r3, [r7, #20]
 800a81a:	e00a      	b.n	800a832 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800a81c:	8abb      	ldrh	r3, [r7, #20]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	4413      	add	r3, r2
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	4619      	mov	r1, r3
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f000 f918 	bl	800aa5c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800a82c:	8abb      	ldrh	r3, [r7, #20]
 800a82e:	3301      	adds	r3, #1
 800a830:	82bb      	strh	r3, [r7, #20]
 800a832:	8aba      	ldrh	r2, [r7, #20]
 800a834:	893b      	ldrh	r3, [r7, #8]
 800a836:	429a      	cmp	r2, r3
 800a838:	d3f0      	bcc.n	800a81c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a83a:	f7ff fd69 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a83e:	68f8      	ldr	r0, [r7, #12]
 800a840:	f000 f9de 	bl	800ac00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	75fb      	strb	r3, [r7, #23]
 800a850:	e001      	b.n	800a856 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2201      	movs	r2, #1
 800a85a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	715a      	strb	r2, [r3, #5]

    return status;
 800a862:	7dfb      	ldrb	r3, [r7, #23]
 800a864:	e000      	b.n	800a868 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800a866:	2302      	movs	r3, #2
  }
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b088      	sub	sp, #32
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	607a      	str	r2, [r7, #4]
 800a87a:	461a      	mov	r2, r3
 800a87c:	460b      	mov	r3, r1
 800a87e:	72fb      	strb	r3, [r7, #11]
 800a880:	4613      	mov	r3, r2
 800a882:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	799b      	ldrb	r3, [r3, #6]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d141      	bne.n	800a916 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	795b      	ldrb	r3, [r3, #5]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d101      	bne.n	800a89e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800a89a:	2302      	movs	r3, #2
 800a89c:	e03c      	b.n	800a918 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800a8a4:	68f8      	ldr	r0, [r7, #12]
 800a8a6:	f000 f987 	bl	800abb8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800a8aa:	f7ff fd41 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800a8ae:	211e      	movs	r1, #30
 800a8b0:	68f8      	ldr	r0, [r7, #12]
 800a8b2:	f000 f8d3 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 f8ce 	bl	800aa5c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f8ca 	bl	800aa5c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	82fb      	strh	r3, [r7, #22]
 800a8cc:	e009      	b.n	800a8e2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800a8ce:	69b9      	ldr	r1, [r7, #24]
 800a8d0:	68f8      	ldr	r0, [r7, #12]
 800a8d2:	f000 f919 	bl	800ab08 <SUBGHZSPI_Receive>
      pData++;
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800a8dc:	8afb      	ldrh	r3, [r7, #22]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	82fb      	strh	r3, [r7, #22]
 800a8e2:	8afa      	ldrh	r2, [r7, #22]
 800a8e4:	893b      	ldrh	r3, [r7, #8]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d3f1      	bcc.n	800a8ce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800a8ea:	f7ff fd11 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800a8ee:	68f8      	ldr	r0, [r7, #12]
 800a8f0:	f000 f986 	bl	800ac00 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	77fb      	strb	r3, [r7, #31]
 800a900:	e001      	b.n	800a906 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2200      	movs	r2, #0
 800a910:	715a      	strb	r2, [r3, #5]

    return status;
 800a912:	7ffb      	ldrb	r3, [r7, #31]
 800a914:	e000      	b.n	800a918 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800a916:	2302      	movs	r3, #2
  }
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3720      	adds	r7, #32
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b084      	sub	sp, #16
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800a928:	2300      	movs	r3, #0
 800a92a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800a92c:	f107 020c 	add.w	r2, r7, #12
 800a930:	2302      	movs	r3, #2
 800a932:	2112      	movs	r1, #18
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f7ff fef4 	bl	800a722 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800a93a:	7b3b      	ldrb	r3, [r7, #12]
 800a93c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800a93e:	89fb      	ldrh	r3, [r7, #14]
 800a940:	021b      	lsls	r3, r3, #8
 800a942:	b21a      	sxth	r2, r3
 800a944:	7b7b      	ldrb	r3, [r7, #13]
 800a946:	b21b      	sxth	r3, r3
 800a948:	4313      	orrs	r3, r2
 800a94a:	b21b      	sxth	r3, r3
 800a94c:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800a94e:	f107 020c 	add.w	r2, r7, #12
 800a952:	2302      	movs	r3, #2
 800a954:	2102      	movs	r1, #2
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f7ff fe84 	bl	800a664 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800a95c:	89fb      	ldrh	r3, [r7, #14]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f012 fb2c 	bl	801cfc4 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	f003 0302 	and.w	r3, r3, #2
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f012 fb32 	bl	801cfe0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800a97c:	89fb      	ldrh	r3, [r7, #14]
 800a97e:	f003 0304 	and.w	r3, r3, #4
 800a982:	2b00      	cmp	r3, #0
 800a984:	d002      	beq.n	800a98c <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f012 fb82 	bl	801d090 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800a98c:	89fb      	ldrh	r3, [r7, #14]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f012 fb88 	bl	801d0ac <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800a99c:	89fb      	ldrh	r3, [r7, #14]
 800a99e:	f003 0310 	and.w	r3, r3, #16
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d002      	beq.n	800a9ac <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f012 fb8e 	bl	801d0c8 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800a9ac:	89fb      	ldrh	r3, [r7, #14]
 800a9ae:	f003 0320 	and.w	r3, r3, #32
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f012 fb5c 	bl	801d074 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800a9bc:	89fb      	ldrh	r3, [r7, #14]
 800a9be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d002      	beq.n	800a9cc <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f012 fb18 	bl	801cffc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800a9cc:	89fb      	ldrh	r3, [r7, #14]
 800a9ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00d      	beq.n	800a9f2 <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800a9d6:	89fb      	ldrh	r3, [r7, #14]
 800a9d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f012 fb18 	bl	801d018 <HAL_SUBGHZ_CADStatusCallback>
 800a9e8:	e003      	b.n	800a9f2 <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800a9ea:	2100      	movs	r1, #0
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f012 fb13 	bl	801d018 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800a9f2:	89fb      	ldrh	r3, [r7, #14]
 800a9f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d002      	beq.n	800aa02 <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f012 fb29 	bl	801d054 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800aa02:	89fb      	ldrh	r3, [r7, #14]
 800aa04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d002      	beq.n	800aa12 <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f012 fb69 	bl	801d0e4 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa24:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a0b      	ldr	r2, [pc, #44]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800aa30:	4a09      	ldr	r2, [pc, #36]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 800aa38:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800aa3a:	4b07      	ldr	r3, [pc, #28]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa3c:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800aa40:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800aa42:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a04      	ldr	r2, [pc, #16]	; (800aa58 <SUBGHZSPI_Init+0x3c>)
 800aa48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa4c:	6013      	str	r3, [r2, #0]
}
 800aa4e:	bf00      	nop
 800aa50:	370c      	adds	r7, #12
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bc80      	pop	{r7}
 800aa56:	4770      	bx	lr
 800aa58:	58010000 	.word	0x58010000

0800aa5c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b087      	sub	sp, #28
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	460b      	mov	r3, r1
 800aa66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aa6c:	4b23      	ldr	r3, [pc, #140]	; (800aafc <SUBGHZSPI_Transmit+0xa0>)
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	4613      	mov	r3, r2
 800aa72:	00db      	lsls	r3, r3, #3
 800aa74:	1a9b      	subs	r3, r3, r2
 800aa76:	009b      	lsls	r3, r3, #2
 800aa78:	0cdb      	lsrs	r3, r3, #19
 800aa7a:	2264      	movs	r2, #100	; 0x64
 800aa7c:	fb02 f303 	mul.w	r3, r2, r3
 800aa80:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d105      	bne.n	800aa94 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	609a      	str	r2, [r3, #8]
      break;
 800aa92:	e008      	b.n	800aaa6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3b01      	subs	r3, #1
 800aa98:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800aa9a:	4b19      	ldr	r3, [pc, #100]	; (800ab00 <SUBGHZSPI_Transmit+0xa4>)
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d1ed      	bne.n	800aa82 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800aaa6:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <SUBGHZSPI_Transmit+0xa8>)
 800aaa8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	78fa      	ldrb	r2, [r7, #3]
 800aaae:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aab0:	4b12      	ldr	r3, [pc, #72]	; (800aafc <SUBGHZSPI_Transmit+0xa0>)
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	4613      	mov	r3, r2
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	1a9b      	subs	r3, r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	0cdb      	lsrs	r3, r3, #19
 800aabe:	2264      	movs	r2, #100	; 0x64
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
 800aac4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d105      	bne.n	800aad8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	2201      	movs	r2, #1
 800aad4:	609a      	str	r2, [r3, #8]
      break;
 800aad6:	e008      	b.n	800aaea <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	3b01      	subs	r3, #1
 800aadc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800aade:	4b08      	ldr	r3, [pc, #32]	; (800ab00 <SUBGHZSPI_Transmit+0xa4>)
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d1ed      	bne.n	800aac6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800aaea:	4b05      	ldr	r3, [pc, #20]	; (800ab00 <SUBGHZSPI_Transmit+0xa4>)
 800aaec:	68db      	ldr	r3, [r3, #12]

  return status;
 800aaee:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bc80      	pop	{r7}
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	20000000 	.word	0x20000000
 800ab00:	58010000 	.word	0x58010000
 800ab04:	5801000c 	.word	0x5801000c

0800ab08 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ab12:	2300      	movs	r3, #0
 800ab14:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ab16:	4b25      	ldr	r3, [pc, #148]	; (800abac <SUBGHZSPI_Receive+0xa4>)
 800ab18:	681a      	ldr	r2, [r3, #0]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	00db      	lsls	r3, r3, #3
 800ab1e:	1a9b      	subs	r3, r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	0cdb      	lsrs	r3, r3, #19
 800ab24:	2264      	movs	r2, #100	; 0x64
 800ab26:	fb02 f303 	mul.w	r3, r2, r3
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d105      	bne.n	800ab3e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 800ab32:	2301      	movs	r3, #1
 800ab34:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	609a      	str	r2, [r3, #8]
      break;
 800ab3c:	e008      	b.n	800ab50 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	3b01      	subs	r3, #1
 800ab42:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800ab44:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <SUBGHZSPI_Receive+0xa8>)
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	f003 0302 	and.w	r3, r3, #2
 800ab4c:	2b02      	cmp	r3, #2
 800ab4e:	d1ed      	bne.n	800ab2c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800ab50:	4b18      	ldr	r3, [pc, #96]	; (800abb4 <SUBGHZSPI_Receive+0xac>)
 800ab52:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	22ff      	movs	r2, #255	; 0xff
 800ab58:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ab5a:	4b14      	ldr	r3, [pc, #80]	; (800abac <SUBGHZSPI_Receive+0xa4>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	00db      	lsls	r3, r3, #3
 800ab62:	1a9b      	subs	r3, r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	0cdb      	lsrs	r3, r3, #19
 800ab68:	2264      	movs	r2, #100	; 0x64
 800ab6a:	fb02 f303 	mul.w	r3, r2, r3
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d105      	bne.n	800ab82 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	609a      	str	r2, [r3, #8]
      break;
 800ab80:	e008      	b.n	800ab94 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3b01      	subs	r3, #1
 800ab86:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800ab88:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <SUBGHZSPI_Receive+0xa8>)
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	f003 0301 	and.w	r3, r3, #1
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d1ed      	bne.n	800ab70 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800ab94:	4b06      	ldr	r3, [pc, #24]	; (800abb0 <SUBGHZSPI_Receive+0xa8>)
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	b2da      	uxtb	r2, r3
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	701a      	strb	r2, [r3, #0]

  return status;
 800ab9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	371c      	adds	r7, #28
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bc80      	pop	{r7}
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	20000000 	.word	0x20000000
 800abb0:	58010000 	.word	0x58010000
 800abb4:	5801000c 	.word	0x5801000c

0800abb8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	791b      	ldrb	r3, [r3, #4]
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d111      	bne.n	800abec <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 800abc8:	4b0c      	ldr	r3, [pc, #48]	; (800abfc <SUBGHZ_CheckDeviceReady+0x44>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	4613      	mov	r3, r2
 800abce:	005b      	lsls	r3, r3, #1
 800abd0:	4413      	add	r3, r2
 800abd2:	00db      	lsls	r3, r3, #3
 800abd4:	0c1b      	lsrs	r3, r3, #16
 800abd6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800abd8:	f7ff fbaa 	bl	800a330 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	3b01      	subs	r3, #1
 800abe0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1f9      	bne.n	800abdc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800abe8:	f7ff fb92 	bl	800a310 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f807 	bl	800ac00 <SUBGHZ_WaitOnBusy>
 800abf2:	4603      	mov	r3, r0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20000000 	.word	0x20000000

0800ac00 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b086      	sub	sp, #24
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800ac0c:	4b12      	ldr	r3, [pc, #72]	; (800ac58 <SUBGHZ_WaitOnBusy+0x58>)
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	4613      	mov	r3, r2
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	4413      	add	r3, r2
 800ac16:	00db      	lsls	r3, r3, #3
 800ac18:	0d1b      	lsrs	r3, r3, #20
 800ac1a:	2264      	movs	r2, #100	; 0x64
 800ac1c:	fb02 f303 	mul.w	r3, r2, r3
 800ac20:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800ac22:	f7ff fbb3 	bl	800a38c <LL_PWR_IsActiveFlag_RFBUSYMS>
 800ac26:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d105      	bne.n	800ac3a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800ac2e:	2301      	movs	r3, #1
 800ac30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2202      	movs	r2, #2
 800ac36:	609a      	str	r2, [r3, #8]
      break;
 800ac38:	e009      	b.n	800ac4e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800ac40:	f7ff fb92 	bl	800a368 <LL_PWR_IsActiveFlag_RFBUSYS>
 800ac44:	4602      	mov	r2, r0
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	4013      	ands	r3, r2
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d0e9      	beq.n	800ac22 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800ac4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3718      	adds	r7, #24
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000000 	.word	0x20000000

0800ac5c <LL_RCC_GetUSARTClockSource>:
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b083      	sub	sp, #12
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800ac64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	401a      	ands	r2, r3
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	041b      	lsls	r3, r3, #16
 800ac74:	4313      	orrs	r3, r2
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bc80      	pop	{r7}
 800ac7e:	4770      	bx	lr

0800ac80 <LL_RCC_GetLPUARTClockSource>:
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ac88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4013      	ands	r3, r2
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bc80      	pop	{r7}
 800ac9c:	4770      	bx	lr

0800ac9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b082      	sub	sp, #8
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d101      	bne.n	800acb0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acac:	2301      	movs	r3, #1
 800acae:	e042      	b.n	800ad36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7f8 fabe 	bl	8003244 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2224      	movs	r2, #36	; 0x24
 800accc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f022 0201 	bic.w	r2, r2, #1
 800acde:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fc3b 	bl	800b55c <UART_SetConfig>
 800ace6:	4603      	mov	r3, r0
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d101      	bne.n	800acf0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800acec:	2301      	movs	r3, #1
 800acee:	e022      	b.n	800ad36 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d002      	beq.n	800acfe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fea3 	bl	800ba44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	689a      	ldr	r2, [r3, #8]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f042 0201 	orr.w	r2, r2, #1
 800ad2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	f000 ff29 	bl	800bb86 <UART_CheckIdleState>
 800ad34:	4603      	mov	r3, r0
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3708      	adds	r7, #8
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}
	...

0800ad40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08a      	sub	sp, #40	; 0x28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	60f8      	str	r0, [r7, #12]
 800ad48:	60b9      	str	r1, [r7, #8]
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	d137      	bne.n	800adc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d002      	beq.n	800ad64 <HAL_UART_Receive_IT+0x24>
 800ad5e:	88fb      	ldrh	r3, [r7, #6]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d101      	bne.n	800ad68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e030      	b.n	800adca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a18      	ldr	r2, [pc, #96]	; (800add4 <HAL_UART_Receive_IT+0x94>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d01f      	beq.n	800adb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d018      	beq.n	800adb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	e853 3f00 	ldrex	r3, [r3]
 800ad92:	613b      	str	r3, [r7, #16]
   return(result);
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ad9a:	627b      	str	r3, [r7, #36]	; 0x24
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	461a      	mov	r2, r3
 800ada2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada4:	623b      	str	r3, [r7, #32]
 800ada6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ada8:	69f9      	ldr	r1, [r7, #28]
 800adaa:	6a3a      	ldr	r2, [r7, #32]
 800adac:	e841 2300 	strex	r3, r2, [r1]
 800adb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800adb2:	69bb      	ldr	r3, [r7, #24]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1e6      	bne.n	800ad86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800adb8:	88fb      	ldrh	r3, [r7, #6]
 800adba:	461a      	mov	r2, r3
 800adbc:	68b9      	ldr	r1, [r7, #8]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 fff8 	bl	800bdb4 <UART_Start_Receive_IT>
 800adc4:	4603      	mov	r3, r0
 800adc6:	e000      	b.n	800adca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3728      	adds	r7, #40	; 0x28
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	bf00      	nop
 800add4:	40008000 	.word	0x40008000

0800add8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b08a      	sub	sp, #40	; 0x28
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adec:	2b20      	cmp	r3, #32
 800adee:	d167      	bne.n	800aec0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <HAL_UART_Transmit_DMA+0x24>
 800adf6:	88fb      	ldrh	r3, [r7, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d101      	bne.n	800ae00 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e060      	b.n	800aec2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	88fa      	ldrh	r2, [r7, #6]
 800ae0a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	88fa      	ldrh	r2, [r7, #6]
 800ae12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	2200      	movs	r2, #0
 800ae1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2221      	movs	r2, #33	; 0x21
 800ae22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d028      	beq.n	800ae80 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae32:	4a26      	ldr	r2, [pc, #152]	; (800aecc <HAL_UART_Transmit_DMA+0xf4>)
 800ae34:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae3a:	4a25      	ldr	r2, [pc, #148]	; (800aed0 <HAL_UART_Transmit_DMA+0xf8>)
 800ae3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae42:	4a24      	ldr	r2, [pc, #144]	; (800aed4 <HAL_UART_Transmit_DMA+0xfc>)
 800ae44:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae56:	4619      	mov	r1, r3
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3328      	adds	r3, #40	; 0x28
 800ae5e:	461a      	mov	r2, r3
 800ae60:	88fb      	ldrh	r3, [r7, #6]
 800ae62:	f7fa fb91 	bl	8005588 <HAL_DMA_Start_IT>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d009      	beq.n	800ae80 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2210      	movs	r2, #16
 800ae70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2220      	movs	r2, #32
 800ae78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	e020      	b.n	800aec2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	2240      	movs	r2, #64	; 0x40
 800ae86:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	3308      	adds	r3, #8
 800ae8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	e853 3f00 	ldrex	r3, [r3]
 800ae96:	613b      	str	r3, [r7, #16]
   return(result);
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae9e:	627b      	str	r3, [r7, #36]	; 0x24
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3308      	adds	r3, #8
 800aea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aea8:	623a      	str	r2, [r7, #32]
 800aeaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeac:	69f9      	ldr	r1, [r7, #28]
 800aeae:	6a3a      	ldr	r2, [r7, #32]
 800aeb0:	e841 2300 	strex	r3, r2, [r1]
 800aeb4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1e5      	bne.n	800ae88 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800aebc:	2300      	movs	r3, #0
 800aebe:	e000      	b.n	800aec2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800aec0:	2302      	movs	r3, #2
  }
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3728      	adds	r7, #40	; 0x28
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	0800c13f 	.word	0x0800c13f
 800aed0:	0800c1d9 	.word	0x0800c1d9
 800aed4:	0800c1f5 	.word	0x0800c1f5

0800aed8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b0ba      	sub	sp, #232	; 0xe8
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	69db      	ldr	r3, [r3, #28]
 800aee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	689b      	ldr	r3, [r3, #8]
 800aefa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aefe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800af02:	f640 030f 	movw	r3, #2063	; 0x80f
 800af06:	4013      	ands	r3, r2
 800af08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800af0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11b      	bne.n	800af4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af18:	f003 0320 	and.w	r3, r3, #32
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d015      	beq.n	800af4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af24:	f003 0320 	and.w	r3, r3, #32
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d105      	bne.n	800af38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d009      	beq.n	800af4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 82e3 	beq.w	800b508 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
      }
      return;
 800af4a:	e2dd      	b.n	800b508 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af50:	2b00      	cmp	r3, #0
 800af52:	f000 8123 	beq.w	800b19c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800af56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800af5a:	4b8d      	ldr	r3, [pc, #564]	; (800b190 <HAL_UART_IRQHandler+0x2b8>)
 800af5c:	4013      	ands	r3, r2
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d106      	bne.n	800af70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800af62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800af66:	4b8b      	ldr	r3, [pc, #556]	; (800b194 <HAL_UART_IRQHandler+0x2bc>)
 800af68:	4013      	ands	r3, r2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f000 8116 	beq.w	800b19c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af74:	f003 0301 	and.w	r3, r3, #1
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d011      	beq.n	800afa0 <HAL_UART_IRQHandler+0xc8>
 800af7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af84:	2b00      	cmp	r3, #0
 800af86:	d00b      	beq.n	800afa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	2201      	movs	r2, #1
 800af8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af96:	f043 0201 	orr.w	r2, r3, #1
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afa4:	f003 0302 	and.w	r3, r3, #2
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d011      	beq.n	800afd0 <HAL_UART_IRQHandler+0xf8>
 800afac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afb0:	f003 0301 	and.w	r3, r3, #1
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d00b      	beq.n	800afd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2202      	movs	r2, #2
 800afbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afc6:	f043 0204 	orr.w	r2, r3, #4
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d011      	beq.n	800b000 <HAL_UART_IRQHandler+0x128>
 800afdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afe0:	f003 0301 	and.w	r3, r3, #1
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	2204      	movs	r2, #4
 800afee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff6:	f043 0202 	orr.w	r2, r3, #2
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b004:	f003 0308 	and.w	r3, r3, #8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d017      	beq.n	800b03c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b00c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b00      	cmp	r3, #0
 800b016:	d105      	bne.n	800b024 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b018:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b01c:	4b5c      	ldr	r3, [pc, #368]	; (800b190 <HAL_UART_IRQHandler+0x2b8>)
 800b01e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b020:	2b00      	cmp	r3, #0
 800b022:	d00b      	beq.n	800b03c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	2208      	movs	r2, #8
 800b02a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b032:	f043 0208 	orr.w	r2, r3, #8
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b03c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b044:	2b00      	cmp	r3, #0
 800b046:	d012      	beq.n	800b06e <HAL_UART_IRQHandler+0x196>
 800b048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b04c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00c      	beq.n	800b06e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b05c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b064:	f043 0220 	orr.w	r2, r3, #32
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 8249 	beq.w	800b50c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07e:	f003 0320 	and.w	r3, r3, #32
 800b082:	2b00      	cmp	r3, #0
 800b084:	d013      	beq.n	800b0ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b08a:	f003 0320 	and.w	r3, r3, #32
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d105      	bne.n	800b09e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d007      	beq.n	800b0ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	689b      	ldr	r3, [r3, #8]
 800b0be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0c2:	2b40      	cmp	r3, #64	; 0x40
 800b0c4:	d005      	beq.n	800b0d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b0c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b0ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d054      	beq.n	800b17c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 ffce 	bl	800c074 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e2:	2b40      	cmp	r3, #64	; 0x40
 800b0e4:	d146      	bne.n	800b174 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	3308      	adds	r3, #8
 800b0ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b0f4:	e853 3f00 	ldrex	r3, [r3]
 800b0f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b0fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b104:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3308      	adds	r3, #8
 800b10e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b112:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b11e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b122:	e841 2300 	strex	r3, r2, [r1]
 800b126:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b12a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d1d9      	bne.n	800b0e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d017      	beq.n	800b16c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b142:	4a15      	ldr	r2, [pc, #84]	; (800b198 <HAL_UART_IRQHandler+0x2c0>)
 800b144:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fa faf7 	bl	8005740 <HAL_DMA_Abort_IT>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d019      	beq.n	800b18c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b15e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b166:	4610      	mov	r0, r2
 800b168:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b16a:	e00f      	b.n	800b18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 f9e0 	bl	800b532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b172:	e00b      	b.n	800b18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f9dc 	bl	800b532 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b17a:	e007      	b.n	800b18c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f9d8 	bl	800b532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b18a:	e1bf      	b.n	800b50c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b18c:	bf00      	nop
    return;
 800b18e:	e1bd      	b.n	800b50c <HAL_UART_IRQHandler+0x634>
 800b190:	10000001 	.word	0x10000001
 800b194:	04000120 	.word	0x04000120
 800b198:	0800c275 	.word	0x0800c275

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	f040 8153 	bne.w	800b44c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b1a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1aa:	f003 0310 	and.w	r3, r3, #16
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	f000 814c 	beq.w	800b44c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b1b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1b8:	f003 0310 	and.w	r3, r3, #16
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 8145 	beq.w	800b44c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	689b      	ldr	r3, [r3, #8]
 800b1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d4:	2b40      	cmp	r3, #64	; 0x40
 800b1d6:	f040 80bb 	bne.w	800b350 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b1e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f000 818f 	beq.w	800b510 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b1f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	f080 8187 	bcs.w	800b510 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b208:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f003 0320 	and.w	r3, r3, #32
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f040 8087 	bne.w	800b32e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b22c:	e853 3f00 	ldrex	r3, [r3]
 800b230:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b234:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b23c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	461a      	mov	r2, r3
 800b246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b24a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b24e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b252:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b256:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b25a:	e841 2300 	strex	r3, r2, [r1]
 800b25e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b262:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b266:	2b00      	cmp	r3, #0
 800b268:	d1da      	bne.n	800b220 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	3308      	adds	r3, #8
 800b270:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b272:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b274:	e853 3f00 	ldrex	r3, [r3]
 800b278:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b27a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b27c:	f023 0301 	bic.w	r3, r3, #1
 800b280:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3308      	adds	r3, #8
 800b28a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b28e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b292:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b294:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b296:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b29a:	e841 2300 	strex	r3, r2, [r1]
 800b29e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b2a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d1e1      	bne.n	800b26a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2b0:	e853 3f00 	ldrex	r3, [r3]
 800b2b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3308      	adds	r3, #8
 800b2c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b2ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b2cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b2d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b2d2:	e841 2300 	strex	r3, r2, [r1]
 800b2d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b2d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d1e3      	bne.n	800b2a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2220      	movs	r2, #32
 800b2e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2f4:	e853 3f00 	ldrex	r3, [r3]
 800b2f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b2fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2fc:	f023 0310 	bic.w	r3, r3, #16
 800b300:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	461a      	mov	r2, r3
 800b30a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b30e:	65bb      	str	r3, [r7, #88]	; 0x58
 800b310:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b312:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b314:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b316:	e841 2300 	strex	r3, r2, [r1]
 800b31a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b31c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d1e4      	bne.n	800b2ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fa f9ab 	bl	8005684 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2202      	movs	r2, #2
 800b332:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b340:	b29b      	uxth	r3, r3
 800b342:	1ad3      	subs	r3, r2, r3
 800b344:	b29b      	uxth	r3, r3
 800b346:	4619      	mov	r1, r3
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f000 f8fb 	bl	800b544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b34e:	e0df      	b.n	800b510 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	1ad3      	subs	r3, r2, r3
 800b360:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	f000 80d1 	beq.w	800b514 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b372:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b376:	2b00      	cmp	r3, #0
 800b378:	f000 80cc 	beq.w	800b514 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b384:	e853 3f00 	ldrex	r3, [r3]
 800b388:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b38c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b390:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	461a      	mov	r2, r3
 800b39a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b39e:	647b      	str	r3, [r7, #68]	; 0x44
 800b3a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3a6:	e841 2300 	strex	r3, r2, [r1]
 800b3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d1e4      	bne.n	800b37c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3308      	adds	r3, #8
 800b3b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3bc:	e853 3f00 	ldrex	r3, [r3]
 800b3c0:	623b      	str	r3, [r7, #32]
   return(result);
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	f023 0301 	bic.w	r3, r3, #1
 800b3cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b3da:	633a      	str	r2, [r7, #48]	; 0x30
 800b3dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e2:	e841 2300 	strex	r3, r2, [r1]
 800b3e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e1      	bne.n	800b3b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b408:	693b      	ldr	r3, [r7, #16]
 800b40a:	e853 3f00 	ldrex	r3, [r3]
 800b40e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0310 	bic.w	r3, r3, #16
 800b416:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	461a      	mov	r2, r3
 800b420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b424:	61fb      	str	r3, [r7, #28]
 800b426:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	69b9      	ldr	r1, [r7, #24]
 800b42a:	69fa      	ldr	r2, [r7, #28]
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	617b      	str	r3, [r7, #20]
   return(result);
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e4      	bne.n	800b402 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2202      	movs	r2, #2
 800b43c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b43e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 f87d 	bl	800b544 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b44a:	e063      	b.n	800b514 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d00e      	beq.n	800b476 <HAL_UART_IRQHandler+0x59e>
 800b458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b45c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b460:	2b00      	cmp	r3, #0
 800b462:	d008      	beq.n	800b476 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b46c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f001 fc5e 	bl	800cd30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b474:	e051      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b47a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d014      	beq.n	800b4ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d105      	bne.n	800b49a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b48e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b496:	2b00      	cmp	r3, #0
 800b498:	d008      	beq.n	800b4ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d03a      	beq.n	800b518 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	4798      	blx	r3
    }
    return;
 800b4aa:	e035      	b.n	800b518 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b4ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d009      	beq.n	800b4cc <HAL_UART_IRQHandler+0x5f4>
 800b4b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 feeb 	bl	800c2a0 <UART_EndTransmit_IT>
    return;
 800b4ca:	e026      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b4cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d009      	beq.n	800b4ec <HAL_UART_IRQHandler+0x614>
 800b4d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d003      	beq.n	800b4ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f001 fc35 	bl	800cd54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b4ea:	e016      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b4ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d010      	beq.n	800b51a <HAL_UART_IRQHandler+0x642>
 800b4f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da0c      	bge.n	800b51a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f001 fc1e 	bl	800cd42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b506:	e008      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
      return;
 800b508:	bf00      	nop
 800b50a:	e006      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
    return;
 800b50c:	bf00      	nop
 800b50e:	e004      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
      return;
 800b510:	bf00      	nop
 800b512:	e002      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
      return;
 800b514:	bf00      	nop
 800b516:	e000      	b.n	800b51a <HAL_UART_IRQHandler+0x642>
    return;
 800b518:	bf00      	nop
  }
}
 800b51a:	37e8      	adds	r7, #232	; 0xe8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b520:	b480      	push	{r7}
 800b522:	b083      	sub	sp, #12
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b528:	bf00      	nop
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bc80      	pop	{r7}
 800b530:	4770      	bx	lr

0800b532 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b53a:	bf00      	nop
 800b53c:	370c      	adds	r7, #12
 800b53e:	46bd      	mov	sp, r7
 800b540:	bc80      	pop	{r7}
 800b542:	4770      	bx	lr

0800b544 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b544:	b480      	push	{r7}
 800b546:	b083      	sub	sp, #12
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	460b      	mov	r3, r1
 800b54e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b550:	bf00      	nop
 800b552:	370c      	adds	r7, #12
 800b554:	46bd      	mov	sp, r7
 800b556:	bc80      	pop	{r7}
 800b558:	4770      	bx	lr
	...

0800b55c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b55c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b560:	b08c      	sub	sp, #48	; 0x30
 800b562:	af00      	add	r7, sp, #0
 800b564:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b566:	2300      	movs	r3, #0
 800b568:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	689a      	ldr	r2, [r3, #8]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	691b      	ldr	r3, [r3, #16]
 800b574:	431a      	orrs	r2, r3
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	431a      	orrs	r2, r3
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	69db      	ldr	r3, [r3, #28]
 800b580:	4313      	orrs	r3, r2
 800b582:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	681a      	ldr	r2, [r3, #0]
 800b58a:	4b94      	ldr	r3, [pc, #592]	; (800b7dc <UART_SetConfig+0x280>)
 800b58c:	4013      	ands	r3, r2
 800b58e:	697a      	ldr	r2, [r7, #20]
 800b590:	6812      	ldr	r2, [r2, #0]
 800b592:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b594:	430b      	orrs	r3, r1
 800b596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	68da      	ldr	r2, [r3, #12]
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	430a      	orrs	r2, r1
 800b5ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	4a89      	ldr	r2, [pc, #548]	; (800b7e0 <UART_SetConfig+0x284>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d004      	beq.n	800b5c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5c4:	4313      	orrs	r3, r2
 800b5c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b5c8:	697b      	ldr	r3, [r7, #20]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	689b      	ldr	r3, [r3, #8]
 800b5ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b5d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b5d6:	697a      	ldr	r2, [r7, #20]
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5dc:	430b      	orrs	r3, r1
 800b5de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5e6:	f023 010f 	bic.w	r1, r3, #15
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	430a      	orrs	r2, r1
 800b5f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a7a      	ldr	r2, [pc, #488]	; (800b7e4 <UART_SetConfig+0x288>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d127      	bne.n	800b650 <UART_SetConfig+0xf4>
 800b600:	2003      	movs	r0, #3
 800b602:	f7ff fb2b 	bl	800ac5c <LL_RCC_GetUSARTClockSource>
 800b606:	4603      	mov	r3, r0
 800b608:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d81b      	bhi.n	800b648 <UART_SetConfig+0xec>
 800b610:	a201      	add	r2, pc, #4	; (adr r2, 800b618 <UART_SetConfig+0xbc>)
 800b612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b616:	bf00      	nop
 800b618:	0800b629 	.word	0x0800b629
 800b61c:	0800b639 	.word	0x0800b639
 800b620:	0800b631 	.word	0x0800b631
 800b624:	0800b641 	.word	0x0800b641
 800b628:	2301      	movs	r3, #1
 800b62a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b62e:	e080      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b630:	2302      	movs	r3, #2
 800b632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b636:	e07c      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b638:	2304      	movs	r3, #4
 800b63a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b63e:	e078      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b640:	2308      	movs	r3, #8
 800b642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b646:	e074      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b648:	2310      	movs	r3, #16
 800b64a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b64e:	e070      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a64      	ldr	r2, [pc, #400]	; (800b7e8 <UART_SetConfig+0x28c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d138      	bne.n	800b6cc <UART_SetConfig+0x170>
 800b65a:	200c      	movs	r0, #12
 800b65c:	f7ff fafe 	bl	800ac5c <LL_RCC_GetUSARTClockSource>
 800b660:	4603      	mov	r3, r0
 800b662:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800b666:	2b0c      	cmp	r3, #12
 800b668:	d82c      	bhi.n	800b6c4 <UART_SetConfig+0x168>
 800b66a:	a201      	add	r2, pc, #4	; (adr r2, 800b670 <UART_SetConfig+0x114>)
 800b66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b670:	0800b6a5 	.word	0x0800b6a5
 800b674:	0800b6c5 	.word	0x0800b6c5
 800b678:	0800b6c5 	.word	0x0800b6c5
 800b67c:	0800b6c5 	.word	0x0800b6c5
 800b680:	0800b6b5 	.word	0x0800b6b5
 800b684:	0800b6c5 	.word	0x0800b6c5
 800b688:	0800b6c5 	.word	0x0800b6c5
 800b68c:	0800b6c5 	.word	0x0800b6c5
 800b690:	0800b6ad 	.word	0x0800b6ad
 800b694:	0800b6c5 	.word	0x0800b6c5
 800b698:	0800b6c5 	.word	0x0800b6c5
 800b69c:	0800b6c5 	.word	0x0800b6c5
 800b6a0:	0800b6bd 	.word	0x0800b6bd
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6aa:	e042      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b6ac:	2302      	movs	r3, #2
 800b6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6b2:	e03e      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b6b4:	2304      	movs	r3, #4
 800b6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ba:	e03a      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b6bc:	2308      	movs	r3, #8
 800b6be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6c2:	e036      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b6c4:	2310      	movs	r3, #16
 800b6c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b6ca:	e032      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4a43      	ldr	r2, [pc, #268]	; (800b7e0 <UART_SetConfig+0x284>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d12a      	bne.n	800b72c <UART_SetConfig+0x1d0>
 800b6d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800b6da:	f7ff fad1 	bl	800ac80 <LL_RCC_GetLPUARTClockSource>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6e4:	d01a      	beq.n	800b71c <UART_SetConfig+0x1c0>
 800b6e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b6ea:	d81b      	bhi.n	800b724 <UART_SetConfig+0x1c8>
 800b6ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6f0:	d00c      	beq.n	800b70c <UART_SetConfig+0x1b0>
 800b6f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6f6:	d815      	bhi.n	800b724 <UART_SetConfig+0x1c8>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d003      	beq.n	800b704 <UART_SetConfig+0x1a8>
 800b6fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b700:	d008      	beq.n	800b714 <UART_SetConfig+0x1b8>
 800b702:	e00f      	b.n	800b724 <UART_SetConfig+0x1c8>
 800b704:	2300      	movs	r3, #0
 800b706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b70a:	e012      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b70c:	2302      	movs	r3, #2
 800b70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b712:	e00e      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b714:	2304      	movs	r3, #4
 800b716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b71a:	e00a      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b71c:	2308      	movs	r3, #8
 800b71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b722:	e006      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b724:	2310      	movs	r3, #16
 800b726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b72a:	e002      	b.n	800b732 <UART_SetConfig+0x1d6>
 800b72c:	2310      	movs	r3, #16
 800b72e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a2a      	ldr	r2, [pc, #168]	; (800b7e0 <UART_SetConfig+0x284>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	f040 80a4 	bne.w	800b886 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b73e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b742:	2b08      	cmp	r3, #8
 800b744:	d823      	bhi.n	800b78e <UART_SetConfig+0x232>
 800b746:	a201      	add	r2, pc, #4	; (adr r2, 800b74c <UART_SetConfig+0x1f0>)
 800b748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b74c:	0800b771 	.word	0x0800b771
 800b750:	0800b78f 	.word	0x0800b78f
 800b754:	0800b779 	.word	0x0800b779
 800b758:	0800b78f 	.word	0x0800b78f
 800b75c:	0800b77f 	.word	0x0800b77f
 800b760:	0800b78f 	.word	0x0800b78f
 800b764:	0800b78f 	.word	0x0800b78f
 800b768:	0800b78f 	.word	0x0800b78f
 800b76c:	0800b787 	.word	0x0800b787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b770:	f7fd fe76 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800b774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b776:	e010      	b.n	800b79a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <UART_SetConfig+0x290>)
 800b77a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b77c:	e00d      	b.n	800b79a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b77e:	f7fd fdbb 	bl	80092f8 <HAL_RCC_GetSysClockFreq>
 800b782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b784:	e009      	b.n	800b79a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b78a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b78c:	e005      	b.n	800b79a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800b78e:	2300      	movs	r3, #0
 800b790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b798:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	f000 8137 	beq.w	800ba10 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	4a12      	ldr	r2, [pc, #72]	; (800b7f0 <UART_SetConfig+0x294>)
 800b7a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b7b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	685a      	ldr	r2, [r3, #4]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	005b      	lsls	r3, r3, #1
 800b7be:	4413      	add	r3, r2
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d305      	bcc.n	800b7d2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b7cc:	69ba      	ldr	r2, [r7, #24]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d910      	bls.n	800b7f4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b7d8:	e11a      	b.n	800ba10 <UART_SetConfig+0x4b4>
 800b7da:	bf00      	nop
 800b7dc:	cfff69f3 	.word	0xcfff69f3
 800b7e0:	40008000 	.word	0x40008000
 800b7e4:	40013800 	.word	0x40013800
 800b7e8:	40004400 	.word	0x40004400
 800b7ec:	00f42400 	.word	0x00f42400
 800b7f0:	0801f5fc 	.word	0x0801f5fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	60bb      	str	r3, [r7, #8]
 800b7fa:	60fa      	str	r2, [r7, #12]
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b800:	4a8e      	ldr	r2, [pc, #568]	; (800ba3c <UART_SetConfig+0x4e0>)
 800b802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b806:	b29b      	uxth	r3, r3
 800b808:	2200      	movs	r2, #0
 800b80a:	603b      	str	r3, [r7, #0]
 800b80c:	607a      	str	r2, [r7, #4]
 800b80e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b812:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b816:	f7f5 fbb9 	bl	8000f8c <__aeabi_uldivmod>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4610      	mov	r0, r2
 800b820:	4619      	mov	r1, r3
 800b822:	f04f 0200 	mov.w	r2, #0
 800b826:	f04f 0300 	mov.w	r3, #0
 800b82a:	020b      	lsls	r3, r1, #8
 800b82c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b830:	0202      	lsls	r2, r0, #8
 800b832:	6979      	ldr	r1, [r7, #20]
 800b834:	6849      	ldr	r1, [r1, #4]
 800b836:	0849      	lsrs	r1, r1, #1
 800b838:	2000      	movs	r0, #0
 800b83a:	460c      	mov	r4, r1
 800b83c:	4605      	mov	r5, r0
 800b83e:	eb12 0804 	adds.w	r8, r2, r4
 800b842:	eb43 0905 	adc.w	r9, r3, r5
 800b846:	697b      	ldr	r3, [r7, #20]
 800b848:	685b      	ldr	r3, [r3, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	469a      	mov	sl, r3
 800b84e:	4693      	mov	fp, r2
 800b850:	4652      	mov	r2, sl
 800b852:	465b      	mov	r3, fp
 800b854:	4640      	mov	r0, r8
 800b856:	4649      	mov	r1, r9
 800b858:	f7f5 fb98 	bl	8000f8c <__aeabi_uldivmod>
 800b85c:	4602      	mov	r2, r0
 800b85e:	460b      	mov	r3, r1
 800b860:	4613      	mov	r3, r2
 800b862:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b864:	6a3b      	ldr	r3, [r7, #32]
 800b866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b86a:	d308      	bcc.n	800b87e <UART_SetConfig+0x322>
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b872:	d204      	bcs.n	800b87e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	6a3a      	ldr	r2, [r7, #32]
 800b87a:	60da      	str	r2, [r3, #12]
 800b87c:	e0c8      	b.n	800ba10 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b884:	e0c4      	b.n	800ba10 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	69db      	ldr	r3, [r3, #28]
 800b88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b88e:	d167      	bne.n	800b960 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800b890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b894:	2b08      	cmp	r3, #8
 800b896:	d828      	bhi.n	800b8ea <UART_SetConfig+0x38e>
 800b898:	a201      	add	r2, pc, #4	; (adr r2, 800b8a0 <UART_SetConfig+0x344>)
 800b89a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b89e:	bf00      	nop
 800b8a0:	0800b8c5 	.word	0x0800b8c5
 800b8a4:	0800b8cd 	.word	0x0800b8cd
 800b8a8:	0800b8d5 	.word	0x0800b8d5
 800b8ac:	0800b8eb 	.word	0x0800b8eb
 800b8b0:	0800b8db 	.word	0x0800b8db
 800b8b4:	0800b8eb 	.word	0x0800b8eb
 800b8b8:	0800b8eb 	.word	0x0800b8eb
 800b8bc:	0800b8eb 	.word	0x0800b8eb
 800b8c0:	0800b8e3 	.word	0x0800b8e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8c4:	f7fd fdcc 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800b8c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8ca:	e014      	b.n	800b8f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8cc:	f7fd fdda 	bl	8009484 <HAL_RCC_GetPCLK2Freq>
 800b8d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8d2:	e010      	b.n	800b8f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8d4:	4b5a      	ldr	r3, [pc, #360]	; (800ba40 <UART_SetConfig+0x4e4>)
 800b8d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8d8:	e00d      	b.n	800b8f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8da:	f7fd fd0d 	bl	80092f8 <HAL_RCC_GetSysClockFreq>
 800b8de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b8e0:	e009      	b.n	800b8f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b8e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b8e8:	e005      	b.n	800b8f6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b8f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	f000 8089 	beq.w	800ba10 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b8fe:	697b      	ldr	r3, [r7, #20]
 800b900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b902:	4a4e      	ldr	r2, [pc, #312]	; (800ba3c <UART_SetConfig+0x4e0>)
 800b904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b908:	461a      	mov	r2, r3
 800b90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b90c:	fbb3 f3f2 	udiv	r3, r3, r2
 800b910:	005a      	lsls	r2, r3, #1
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	085b      	lsrs	r3, r3, #1
 800b918:	441a      	add	r2, r3
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b922:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	2b0f      	cmp	r3, #15
 800b928:	d916      	bls.n	800b958 <UART_SetConfig+0x3fc>
 800b92a:	6a3b      	ldr	r3, [r7, #32]
 800b92c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b930:	d212      	bcs.n	800b958 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b932:	6a3b      	ldr	r3, [r7, #32]
 800b934:	b29b      	uxth	r3, r3
 800b936:	f023 030f 	bic.w	r3, r3, #15
 800b93a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b93c:	6a3b      	ldr	r3, [r7, #32]
 800b93e:	085b      	lsrs	r3, r3, #1
 800b940:	b29b      	uxth	r3, r3
 800b942:	f003 0307 	and.w	r3, r3, #7
 800b946:	b29a      	uxth	r2, r3
 800b948:	8bfb      	ldrh	r3, [r7, #30]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b94e:	697b      	ldr	r3, [r7, #20]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	8bfa      	ldrh	r2, [r7, #30]
 800b954:	60da      	str	r2, [r3, #12]
 800b956:	e05b      	b.n	800ba10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b95e:	e057      	b.n	800ba10 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b960:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b964:	2b08      	cmp	r3, #8
 800b966:	d828      	bhi.n	800b9ba <UART_SetConfig+0x45e>
 800b968:	a201      	add	r2, pc, #4	; (adr r2, 800b970 <UART_SetConfig+0x414>)
 800b96a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b96e:	bf00      	nop
 800b970:	0800b995 	.word	0x0800b995
 800b974:	0800b99d 	.word	0x0800b99d
 800b978:	0800b9a5 	.word	0x0800b9a5
 800b97c:	0800b9bb 	.word	0x0800b9bb
 800b980:	0800b9ab 	.word	0x0800b9ab
 800b984:	0800b9bb 	.word	0x0800b9bb
 800b988:	0800b9bb 	.word	0x0800b9bb
 800b98c:	0800b9bb 	.word	0x0800b9bb
 800b990:	0800b9b3 	.word	0x0800b9b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b994:	f7fd fd64 	bl	8009460 <HAL_RCC_GetPCLK1Freq>
 800b998:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b99a:	e014      	b.n	800b9c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b99c:	f7fd fd72 	bl	8009484 <HAL_RCC_GetPCLK2Freq>
 800b9a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9a2:	e010      	b.n	800b9c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b9a4:	4b26      	ldr	r3, [pc, #152]	; (800ba40 <UART_SetConfig+0x4e4>)
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9a8:	e00d      	b.n	800b9c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b9aa:	f7fd fca5 	bl	80092f8 <HAL_RCC_GetSysClockFreq>
 800b9ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b9b0:	e009      	b.n	800b9c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b9b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b9b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b9b8:	e005      	b.n	800b9c6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b9c4:	bf00      	nop
    }

    if (pclk != 0U)
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d021      	beq.n	800ba10 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d0:	4a1a      	ldr	r2, [pc, #104]	; (800ba3c <UART_SetConfig+0x4e0>)
 800b9d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	fbb3 f2f2 	udiv	r2, r3, r2
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	085b      	lsrs	r3, r3, #1
 800b9e4:	441a      	add	r2, r3
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	2b0f      	cmp	r3, #15
 800b9f4:	d909      	bls.n	800ba0a <UART_SetConfig+0x4ae>
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9fc:	d205      	bcs.n	800ba0a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b9fe:	6a3b      	ldr	r3, [r7, #32]
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	60da      	str	r2, [r3, #12]
 800ba08:	e002      	b.n	800ba10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2201      	movs	r2, #1
 800ba14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	2200      	movs	r2, #0
 800ba24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ba2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3730      	adds	r7, #48	; 0x30
 800ba34:	46bd      	mov	sp, r7
 800ba36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba3a:	bf00      	nop
 800ba3c:	0801f5fc 	.word	0x0801f5fc
 800ba40:	00f42400 	.word	0x00f42400

0800ba44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba50:	f003 0301 	and.w	r3, r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00a      	beq.n	800ba6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	430a      	orrs	r2, r1
 800ba6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba72:	f003 0302 	and.w	r3, r3, #2
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d00a      	beq.n	800ba90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	685b      	ldr	r3, [r3, #4]
 800ba80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	430a      	orrs	r2, r1
 800ba8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba94:	f003 0304 	and.w	r3, r3, #4
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00a      	beq.n	800bab2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	430a      	orrs	r2, r1
 800bab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d00a      	beq.n	800bad4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	430a      	orrs	r2, r1
 800bad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad8:	f003 0310 	and.w	r3, r3, #16
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00a      	beq.n	800baf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	689b      	ldr	r3, [r3, #8]
 800bae6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	430a      	orrs	r2, r1
 800baf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bafa:	f003 0320 	and.w	r3, r3, #32
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d00a      	beq.n	800bb18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	689b      	ldr	r3, [r3, #8]
 800bb08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	430a      	orrs	r2, r1
 800bb16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d01a      	beq.n	800bb5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	430a      	orrs	r2, r1
 800bb38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb42:	d10a      	bne.n	800bb5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	685b      	ldr	r3, [r3, #4]
 800bb4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	430a      	orrs	r2, r1
 800bb58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00a      	beq.n	800bb7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	430a      	orrs	r2, r1
 800bb7a:	605a      	str	r2, [r3, #4]
  }
}
 800bb7c:	bf00      	nop
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bc80      	pop	{r7}
 800bb84:	4770      	bx	lr

0800bb86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b086      	sub	sp, #24
 800bb8a:	af02      	add	r7, sp, #8
 800bb8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb96:	f7f6 ff7b 	bl	8002a90 <HAL_GetTick>
 800bb9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f003 0308 	and.w	r3, r3, #8
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	d10e      	bne.n	800bbc8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbaa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbae:	9300      	str	r3, [sp, #0]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f832 	bl	800bc22 <UART_WaitOnFlagUntilTimeout>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbc4:	2303      	movs	r3, #3
 800bbc6:	e028      	b.n	800bc1a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f003 0304 	and.w	r3, r3, #4
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d10e      	bne.n	800bbf4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bbd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	2200      	movs	r2, #0
 800bbe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 f81c 	bl	800bc22 <UART_WaitOnFlagUntilTimeout>
 800bbea:	4603      	mov	r3, r0
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d001      	beq.n	800bbf4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	e012      	b.n	800bc1a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2220      	movs	r2, #32
 800bc00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	2200      	movs	r2, #0
 800bc08:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3710      	adds	r7, #16
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}

0800bc22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bc22:	b580      	push	{r7, lr}
 800bc24:	b09c      	sub	sp, #112	; 0x70
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	60f8      	str	r0, [r7, #12]
 800bc2a:	60b9      	str	r1, [r7, #8]
 800bc2c:	603b      	str	r3, [r7, #0]
 800bc2e:	4613      	mov	r3, r2
 800bc30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc32:	e0a9      	b.n	800bd88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3a:	f000 80a5 	beq.w	800bd88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc3e:	f7f6 ff27 	bl	8002a90 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d302      	bcc.n	800bc54 <UART_WaitOnFlagUntilTimeout+0x32>
 800bc4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d140      	bne.n	800bcd6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bc5c:	e853 3f00 	ldrex	r3, [r3]
 800bc60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bc62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bc68:	667b      	str	r3, [r7, #100]	; 0x64
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	461a      	mov	r2, r3
 800bc70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc72:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc74:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bc78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc7a:	e841 2300 	strex	r3, r2, [r1]
 800bc7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bc80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1e6      	bne.n	800bc54 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	3308      	adds	r3, #8
 800bc8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc90:	e853 3f00 	ldrex	r3, [r3]
 800bc94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc98:	f023 0301 	bic.w	r3, r3, #1
 800bc9c:	663b      	str	r3, [r7, #96]	; 0x60
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	3308      	adds	r3, #8
 800bca4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bca6:	64ba      	str	r2, [r7, #72]	; 0x48
 800bca8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcaa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bcac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bcae:	e841 2300 	strex	r3, r2, [r1]
 800bcb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d1e5      	bne.n	800bc86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2220      	movs	r2, #32
 800bcbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2220      	movs	r2, #32
 800bcc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	e069      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 0304 	and.w	r3, r3, #4
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d051      	beq.n	800bd88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcf2:	d149      	bne.n	800bd88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bcfc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd06:	e853 3f00 	ldrex	r3, [r3]
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bd12:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bd1c:	637b      	str	r3, [r7, #52]	; 0x34
 800bd1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bd22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bd24:	e841 2300 	strex	r3, r2, [r1]
 800bd28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bd2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1e6      	bne.n	800bcfe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3308      	adds	r3, #8
 800bd36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd38:	697b      	ldr	r3, [r7, #20]
 800bd3a:	e853 3f00 	ldrex	r3, [r3]
 800bd3e:	613b      	str	r3, [r7, #16]
   return(result);
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	f023 0301 	bic.w	r3, r3, #1
 800bd46:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	3308      	adds	r3, #8
 800bd4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bd50:	623a      	str	r2, [r7, #32]
 800bd52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd54:	69f9      	ldr	r1, [r7, #28]
 800bd56:	6a3a      	ldr	r2, [r7, #32]
 800bd58:	e841 2300 	strex	r3, r2, [r1]
 800bd5c:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1e5      	bne.n	800bd30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2220      	movs	r2, #32
 800bd68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	2220      	movs	r2, #32
 800bd70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2220      	movs	r2, #32
 800bd78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800bd84:	2303      	movs	r3, #3
 800bd86:	e010      	b.n	800bdaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	69da      	ldr	r2, [r3, #28]
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	4013      	ands	r3, r2
 800bd92:	68ba      	ldr	r2, [r7, #8]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	bf0c      	ite	eq
 800bd98:	2301      	moveq	r3, #1
 800bd9a:	2300      	movne	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	79fb      	ldrb	r3, [r7, #7]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	f43f af46 	beq.w	800bc34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3770      	adds	r7, #112	; 0x70
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b0a3      	sub	sp, #140	; 0x8c
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	68ba      	ldr	r2, [r7, #8]
 800bdc6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	88fa      	ldrh	r2, [r7, #6]
 800bdcc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	88fa      	ldrh	r2, [r7, #6]
 800bdd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	2200      	movs	r2, #0
 800bddc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bde6:	d10e      	bne.n	800be06 <UART_Start_Receive_IT+0x52>
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d105      	bne.n	800bdfc <UART_Start_Receive_IT+0x48>
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800bdf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bdfa:	e02d      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	22ff      	movs	r2, #255	; 0xff
 800be00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be04:	e028      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	689b      	ldr	r3, [r3, #8]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d10d      	bne.n	800be2a <UART_Start_Receive_IT+0x76>
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d104      	bne.n	800be20 <UART_Start_Receive_IT+0x6c>
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	22ff      	movs	r2, #255	; 0xff
 800be1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be1e:	e01b      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	227f      	movs	r2, #127	; 0x7f
 800be24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be28:	e016      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	689b      	ldr	r3, [r3, #8]
 800be2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be32:	d10d      	bne.n	800be50 <UART_Start_Receive_IT+0x9c>
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d104      	bne.n	800be46 <UART_Start_Receive_IT+0x92>
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	227f      	movs	r2, #127	; 0x7f
 800be40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be44:	e008      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	223f      	movs	r2, #63	; 0x3f
 800be4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be4e:	e003      	b.n	800be58 <UART_Start_Receive_IT+0xa4>
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2222      	movs	r2, #34	; 0x22
 800be64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	3308      	adds	r3, #8
 800be6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be72:	e853 3f00 	ldrex	r3, [r3]
 800be76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800be78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be7a:	f043 0301 	orr.w	r3, r3, #1
 800be7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	3308      	adds	r3, #8
 800be88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800be8c:	673a      	str	r2, [r7, #112]	; 0x70
 800be8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800be92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800be94:	e841 2300 	strex	r3, r2, [r1]
 800be98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800be9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d1e3      	bne.n	800be68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bea8:	d14f      	bne.n	800bf4a <UART_Start_Receive_IT+0x196>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800beb0:	88fa      	ldrh	r2, [r7, #6]
 800beb2:	429a      	cmp	r2, r3
 800beb4:	d349      	bcc.n	800bf4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bebe:	d107      	bne.n	800bed0 <UART_Start_Receive_IT+0x11c>
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	691b      	ldr	r3, [r3, #16]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d103      	bne.n	800bed0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	4a46      	ldr	r2, [pc, #280]	; (800bfe4 <UART_Start_Receive_IT+0x230>)
 800becc:	675a      	str	r2, [r3, #116]	; 0x74
 800bece:	e002      	b.n	800bed6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4a45      	ldr	r2, [pc, #276]	; (800bfe8 <UART_Start_Receive_IT+0x234>)
 800bed4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	691b      	ldr	r3, [r3, #16]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d01a      	beq.n	800bf14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bee6:	e853 3f00 	ldrex	r3, [r3]
 800beea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800beec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800beee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	461a      	mov	r2, r3
 800befc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bf00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bf02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf08:	e841 2300 	strex	r3, r2, [r1]
 800bf0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bf0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e4      	bne.n	800bede <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3308      	adds	r3, #8
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf1e:	e853 3f00 	ldrex	r3, [r3]
 800bf22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bf24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	3308      	adds	r3, #8
 800bf32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bf34:	64ba      	str	r2, [r7, #72]	; 0x48
 800bf36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bf3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bf3c:	e841 2300 	strex	r3, r2, [r1]
 800bf40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bf42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1e5      	bne.n	800bf14 <UART_Start_Receive_IT+0x160>
 800bf48:	e046      	b.n	800bfd8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	689b      	ldr	r3, [r3, #8]
 800bf4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf52:	d107      	bne.n	800bf64 <UART_Start_Receive_IT+0x1b0>
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d103      	bne.n	800bf64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	4a23      	ldr	r2, [pc, #140]	; (800bfec <UART_Start_Receive_IT+0x238>)
 800bf60:	675a      	str	r2, [r3, #116]	; 0x74
 800bf62:	e002      	b.n	800bf6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	4a22      	ldr	r2, [pc, #136]	; (800bff0 <UART_Start_Receive_IT+0x23c>)
 800bf68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d019      	beq.n	800bfa6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf7a:	e853 3f00 	ldrex	r3, [r3]
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800bf86:	677b      	str	r3, [r7, #116]	; 0x74
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf90:	637b      	str	r3, [r7, #52]	; 0x34
 800bf92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf98:	e841 2300 	strex	r3, r2, [r1]
 800bf9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d1e6      	bne.n	800bf72 <UART_Start_Receive_IT+0x1be>
 800bfa4:	e018      	b.n	800bfd8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	e853 3f00 	ldrex	r3, [r3]
 800bfb2:	613b      	str	r3, [r7, #16]
   return(result);
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	f043 0320 	orr.w	r3, r3, #32
 800bfba:	67bb      	str	r3, [r7, #120]	; 0x78
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bfc4:	623b      	str	r3, [r7, #32]
 800bfc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfc8:	69f9      	ldr	r1, [r7, #28]
 800bfca:	6a3a      	ldr	r2, [r7, #32]
 800bfcc:	e841 2300 	strex	r3, r2, [r1]
 800bfd0:	61bb      	str	r3, [r7, #24]
   return(result);
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1e6      	bne.n	800bfa6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	378c      	adds	r7, #140	; 0x8c
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bc80      	pop	{r7}
 800bfe2:	4770      	bx	lr
 800bfe4:	0800c9c9 	.word	0x0800c9c9
 800bfe8:	0800c669 	.word	0x0800c669
 800bfec:	0800c4b1 	.word	0x0800c4b1
 800bff0:	0800c2f9 	.word	0x0800c2f9

0800bff4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b08f      	sub	sp, #60	; 0x3c
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c002:	6a3b      	ldr	r3, [r7, #32]
 800c004:	e853 3f00 	ldrex	r3, [r3]
 800c008:	61fb      	str	r3, [r7, #28]
   return(result);
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c010:	637b      	str	r3, [r7, #52]	; 0x34
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	461a      	mov	r2, r3
 800c018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c022:	e841 2300 	strex	r3, r2, [r1]
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d1e6      	bne.n	800bffc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	3308      	adds	r3, #8
 800c034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	e853 3f00 	ldrex	r3, [r3]
 800c03c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c044:	633b      	str	r3, [r7, #48]	; 0x30
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	3308      	adds	r3, #8
 800c04c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c04e:	61ba      	str	r2, [r7, #24]
 800c050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c052:	6979      	ldr	r1, [r7, #20]
 800c054:	69ba      	ldr	r2, [r7, #24]
 800c056:	e841 2300 	strex	r3, r2, [r1]
 800c05a:	613b      	str	r3, [r7, #16]
   return(result);
 800c05c:	693b      	ldr	r3, [r7, #16]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1e5      	bne.n	800c02e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2220      	movs	r2, #32
 800c066:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c06a:	bf00      	nop
 800c06c:	373c      	adds	r7, #60	; 0x3c
 800c06e:	46bd      	mov	sp, r7
 800c070:	bc80      	pop	{r7}
 800c072:	4770      	bx	lr

0800c074 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c074:	b480      	push	{r7}
 800c076:	b095      	sub	sp, #84	; 0x54
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c084:	e853 3f00 	ldrex	r3, [r3]
 800c088:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c090:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	461a      	mov	r2, r3
 800c098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c09a:	643b      	str	r3, [r7, #64]	; 0x40
 800c09c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c09e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c0a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c0a2:	e841 2300 	strex	r3, r2, [r1]
 800c0a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d1e6      	bne.n	800c07c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	3308      	adds	r3, #8
 800c0b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0b6:	6a3b      	ldr	r3, [r7, #32]
 800c0b8:	e853 3f00 	ldrex	r3, [r3]
 800c0bc:	61fb      	str	r3, [r7, #28]
   return(result);
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c0c4:	f023 0301 	bic.w	r3, r3, #1
 800c0c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3308      	adds	r3, #8
 800c0d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c0d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c0d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c0da:	e841 2300 	strex	r3, r2, [r1]
 800c0de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d1e3      	bne.n	800c0ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d118      	bne.n	800c120 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	e853 3f00 	ldrex	r3, [r3]
 800c0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800c0fc:	68bb      	ldr	r3, [r7, #8]
 800c0fe:	f023 0310 	bic.w	r3, r3, #16
 800c102:	647b      	str	r3, [r7, #68]	; 0x44
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	461a      	mov	r2, r3
 800c10a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c10c:	61bb      	str	r3, [r7, #24]
 800c10e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c110:	6979      	ldr	r1, [r7, #20]
 800c112:	69ba      	ldr	r2, [r7, #24]
 800c114:	e841 2300 	strex	r3, r2, [r1]
 800c118:	613b      	str	r3, [r7, #16]
   return(result);
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d1e6      	bne.n	800c0ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2200      	movs	r2, #0
 800c132:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c134:	bf00      	nop
 800c136:	3754      	adds	r7, #84	; 0x54
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr

0800c13e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b090      	sub	sp, #64	; 0x40
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	f003 0320 	and.w	r3, r3, #32
 800c156:	2b00      	cmp	r3, #0
 800c158:	d137      	bne.n	800c1ca <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c15a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c15c:	2200      	movs	r2, #0
 800c15e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3308      	adds	r3, #8
 800c168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16c:	e853 3f00 	ldrex	r3, [r3]
 800c170:	623b      	str	r3, [r7, #32]
   return(result);
 800c172:	6a3b      	ldr	r3, [r7, #32]
 800c174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c178:	63bb      	str	r3, [r7, #56]	; 0x38
 800c17a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	3308      	adds	r3, #8
 800c180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c182:	633a      	str	r2, [r7, #48]	; 0x30
 800c184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c18a:	e841 2300 	strex	r3, r2, [r1]
 800c18e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1e5      	bne.n	800c162 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1aa:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b4:	61fb      	str	r3, [r7, #28]
 800c1b6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b8:	69b9      	ldr	r1, [r7, #24]
 800c1ba:	69fa      	ldr	r2, [r7, #28]
 800c1bc:	e841 2300 	strex	r3, r2, [r1]
 800c1c0:	617b      	str	r3, [r7, #20]
   return(result);
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1e6      	bne.n	800c196 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c1c8:	e002      	b.n	800c1d0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c1ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c1cc:	f7f7 fa4e 	bl	800366c <HAL_UART_TxCpltCallback>
}
 800c1d0:	bf00      	nop
 800c1d2:	3740      	adds	r7, #64	; 0x40
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1e4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c1e6:	68f8      	ldr	r0, [r7, #12]
 800c1e8:	f7ff f99a 	bl	800b520 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ec:	bf00      	nop
 800c1ee:	3710      	adds	r7, #16
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c200:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c208:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c20a:	697b      	ldr	r3, [r7, #20]
 800c20c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c210:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c21c:	2b80      	cmp	r3, #128	; 0x80
 800c21e:	d109      	bne.n	800c234 <UART_DMAError+0x40>
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b21      	cmp	r3, #33	; 0x21
 800c224:	d106      	bne.n	800c234 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	2200      	movs	r2, #0
 800c22a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c22e:	6978      	ldr	r0, [r7, #20]
 800c230:	f7ff fee0 	bl	800bff4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c234:	697b      	ldr	r3, [r7, #20]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	689b      	ldr	r3, [r3, #8]
 800c23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23e:	2b40      	cmp	r3, #64	; 0x40
 800c240:	d109      	bne.n	800c256 <UART_DMAError+0x62>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2b22      	cmp	r3, #34	; 0x22
 800c246:	d106      	bne.n	800c256 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c250:	6978      	ldr	r0, [r7, #20]
 800c252:	f7ff ff0f 	bl	800c074 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c25c:	f043 0210 	orr.w	r2, r3, #16
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c266:	6978      	ldr	r0, [r7, #20]
 800c268:	f7ff f963 	bl	800b532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c26c:	bf00      	nop
 800c26e:	3718      	adds	r7, #24
 800c270:	46bd      	mov	sp, r7
 800c272:	bd80      	pop	{r7, pc}

0800c274 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c274:	b580      	push	{r7, lr}
 800c276:	b084      	sub	sp, #16
 800c278:	af00      	add	r7, sp, #0
 800c27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	2200      	movs	r2, #0
 800c286:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c292:	68f8      	ldr	r0, [r7, #12]
 800c294:	f7ff f94d 	bl	800b532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c298:	bf00      	nop
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2bc:	61fb      	str	r3, [r7, #28]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	461a      	mov	r2, r3
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	61bb      	str	r3, [r7, #24]
 800c2c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6979      	ldr	r1, [r7, #20]
 800c2cc:	69ba      	ldr	r2, [r7, #24]
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e6      	bne.n	800c2a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7f7 f9bf 	bl	800366c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2ee:	bf00      	nop
 800c2f0:	3720      	adds	r7, #32
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	bd80      	pop	{r7, pc}
	...

0800c2f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b09c      	sub	sp, #112	; 0x70
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c306:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c310:	2b22      	cmp	r3, #34	; 0x22
 800c312:	f040 80be 	bne.w	800c492 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c31c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c320:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c324:	b2d9      	uxtb	r1, r3
 800c326:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c330:	400a      	ands	r2, r1
 800c332:	b2d2      	uxtb	r2, r2
 800c334:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33a:	1c5a      	adds	r2, r3, #1
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c346:	b29b      	uxth	r3, r3
 800c348:	3b01      	subs	r3, #1
 800c34a:	b29a      	uxth	r2, r3
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c358:	b29b      	uxth	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	f040 80a1 	bne.w	800c4a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c366:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c36e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c370:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c374:	66bb      	str	r3, [r7, #104]	; 0x68
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	461a      	mov	r2, r3
 800c37c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c37e:	65bb      	str	r3, [r7, #88]	; 0x58
 800c380:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c382:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c384:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c386:	e841 2300 	strex	r3, r2, [r1]
 800c38a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c38c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d1e6      	bne.n	800c360 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3308      	adds	r3, #8
 800c398:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c39c:	e853 3f00 	ldrex	r3, [r3]
 800c3a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a4:	f023 0301 	bic.w	r3, r3, #1
 800c3a8:	667b      	str	r3, [r7, #100]	; 0x64
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c3b2:	647a      	str	r2, [r7, #68]	; 0x44
 800c3b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ba:	e841 2300 	strex	r3, r2, [r1]
 800c3be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d1e5      	bne.n	800c392 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a33      	ldr	r2, [pc, #204]	; (800c4ac <UART_RxISR_8BIT+0x1b4>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d01f      	beq.n	800c424 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d018      	beq.n	800c424 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fa:	e853 3f00 	ldrex	r3, [r3]
 800c3fe:	623b      	str	r3, [r7, #32]
   return(result);
 800c400:	6a3b      	ldr	r3, [r7, #32]
 800c402:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c406:	663b      	str	r3, [r7, #96]	; 0x60
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	461a      	mov	r2, r3
 800c40e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c410:	633b      	str	r3, [r7, #48]	; 0x30
 800c412:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c418:	e841 2300 	strex	r3, r2, [r1]
 800c41c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c420:	2b00      	cmp	r3, #0
 800c422:	d1e6      	bne.n	800c3f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d12e      	bne.n	800c48a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2200      	movs	r2, #0
 800c430:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	e853 3f00 	ldrex	r3, [r3]
 800c43e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f023 0310 	bic.w	r3, r3, #16
 800c446:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	461a      	mov	r2, r3
 800c44e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c450:	61fb      	str	r3, [r7, #28]
 800c452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c454:	69b9      	ldr	r1, [r7, #24]
 800c456:	69fa      	ldr	r2, [r7, #28]
 800c458:	e841 2300 	strex	r3, r2, [r1]
 800c45c:	617b      	str	r3, [r7, #20]
   return(result);
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d1e6      	bne.n	800c432 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f003 0310 	and.w	r3, r3, #16
 800c46e:	2b10      	cmp	r3, #16
 800c470:	d103      	bne.n	800c47a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	2210      	movs	r2, #16
 800c478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f7ff f85e 	bl	800b544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c488:	e00b      	b.n	800c4a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7f7 f904 	bl	8003698 <HAL_UART_RxCpltCallback>
}
 800c490:	e007      	b.n	800c4a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	699a      	ldr	r2, [r3, #24]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f042 0208 	orr.w	r2, r2, #8
 800c4a0:	619a      	str	r2, [r3, #24]
}
 800c4a2:	bf00      	nop
 800c4a4:	3770      	adds	r7, #112	; 0x70
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop
 800c4ac:	40008000 	.word	0x40008000

0800c4b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b09c      	sub	sp, #112	; 0x70
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c4be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4c8:	2b22      	cmp	r3, #34	; 0x22
 800c4ca:	f040 80be 	bne.w	800c64a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c4de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c4e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c4ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4f2:	1c9a      	adds	r2, r3, #2
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	3b01      	subs	r3, #1
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c510:	b29b      	uxth	r3, r3
 800c512:	2b00      	cmp	r3, #0
 800c514:	f040 80a1 	bne.w	800c65a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c520:	e853 3f00 	ldrex	r3, [r3]
 800c524:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c528:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c52c:	667b      	str	r3, [r7, #100]	; 0x64
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c536:	657b      	str	r3, [r7, #84]	; 0x54
 800c538:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c53c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c53e:	e841 2300 	strex	r3, r2, [r1]
 800c542:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1e6      	bne.n	800c518 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	3308      	adds	r3, #8
 800c550:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c554:	e853 3f00 	ldrex	r3, [r3]
 800c558:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	f023 0301 	bic.w	r3, r3, #1
 800c560:	663b      	str	r3, [r7, #96]	; 0x60
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3308      	adds	r3, #8
 800c568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c56a:	643a      	str	r2, [r7, #64]	; 0x40
 800c56c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c56e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c570:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c572:	e841 2300 	strex	r3, r2, [r1]
 800c576:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d1e5      	bne.n	800c54a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	2220      	movs	r2, #32
 800c582:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2200      	movs	r2, #0
 800c58a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2200      	movs	r2, #0
 800c590:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a33      	ldr	r2, [pc, #204]	; (800c664 <UART_RxISR_16BIT+0x1b4>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d01f      	beq.n	800c5dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d018      	beq.n	800c5dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b0:	6a3b      	ldr	r3, [r7, #32]
 800c5b2:	e853 3f00 	ldrex	r3, [r3]
 800c5b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c5b8:	69fb      	ldr	r3, [r7, #28]
 800c5ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c5be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c5ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c5ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5d0:	e841 2300 	strex	r3, r2, [r1]
 800c5d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d1e6      	bne.n	800c5aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d12e      	bne.n	800c642 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	e853 3f00 	ldrex	r3, [r3]
 800c5f6:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	f023 0310 	bic.w	r3, r3, #16
 800c5fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	461a      	mov	r2, r3
 800c606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c608:	61bb      	str	r3, [r7, #24]
 800c60a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60c:	6979      	ldr	r1, [r7, #20]
 800c60e:	69ba      	ldr	r2, [r7, #24]
 800c610:	e841 2300 	strex	r3, r2, [r1]
 800c614:	613b      	str	r3, [r7, #16]
   return(result);
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1e6      	bne.n	800c5ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	f003 0310 	and.w	r3, r3, #16
 800c626:	2b10      	cmp	r3, #16
 800c628:	d103      	bne.n	800c632 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2210      	movs	r2, #16
 800c630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c638:	4619      	mov	r1, r3
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f7fe ff82 	bl	800b544 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c640:	e00b      	b.n	800c65a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f7f7 f828 	bl	8003698 <HAL_UART_RxCpltCallback>
}
 800c648:	e007      	b.n	800c65a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	699a      	ldr	r2, [r3, #24]
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	f042 0208 	orr.w	r2, r2, #8
 800c658:	619a      	str	r2, [r3, #24]
}
 800c65a:	bf00      	nop
 800c65c:	3770      	adds	r7, #112	; 0x70
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	40008000 	.word	0x40008000

0800c668 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b0ac      	sub	sp, #176	; 0xb0
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c676:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	69db      	ldr	r3, [r3, #28]
 800c680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	689b      	ldr	r3, [r3, #8]
 800c694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c69e:	2b22      	cmp	r3, #34	; 0x22
 800c6a0:	f040 8182 	bne.w	800c9a8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c6aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c6ae:	e125      	b.n	800c8fc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c6ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800c6be:	b2d9      	uxtb	r1, r3
 800c6c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800c6c4:	b2da      	uxtb	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6ca:	400a      	ands	r2, r1
 800c6cc:	b2d2      	uxtb	r2, r2
 800c6ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	b29a      	uxth	r2, r3
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	69db      	ldr	r3, [r3, #28]
 800c6f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c6f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6fa:	f003 0307 	and.w	r3, r3, #7
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d053      	beq.n	800c7aa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c702:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c706:	f003 0301 	and.w	r3, r3, #1
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d011      	beq.n	800c732 <UART_RxISR_8BIT_FIFOEN+0xca>
 800c70e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00b      	beq.n	800c732 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	2201      	movs	r2, #1
 800c720:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c728:	f043 0201 	orr.w	r2, r3, #1
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c732:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c736:	f003 0302 	and.w	r3, r3, #2
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d011      	beq.n	800c762 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800c73e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00b      	beq.n	800c762 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	2202      	movs	r2, #2
 800c750:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c758:	f043 0204 	orr.w	r2, r3, #4
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c766:	f003 0304 	and.w	r3, r3, #4
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d011      	beq.n	800c792 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800c76e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d00b      	beq.n	800c792 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	2204      	movs	r2, #4
 800c780:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c788:	f043 0202 	orr.w	r2, r3, #2
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d006      	beq.n	800c7aa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7fe fec8 	bl	800b532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	f040 80a2 	bne.w	800c8fc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c7c0:	e853 3f00 	ldrex	r3, [r3]
 800c7c4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800c7c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c7c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	461a      	mov	r2, r3
 800c7d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c7da:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7dc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7de:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800c7e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c7e2:	e841 2300 	strex	r3, r2, [r1]
 800c7e6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800c7e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1e4      	bne.n	800c7b8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7f8:	e853 3f00 	ldrex	r3, [r3]
 800c7fc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800c7fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c804:	f023 0301 	bic.w	r3, r3, #1
 800c808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3308      	adds	r3, #8
 800c812:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c816:	66ba      	str	r2, [r7, #104]	; 0x68
 800c818:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c81a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800c81c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c81e:	e841 2300 	strex	r3, r2, [r1]
 800c822:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1e1      	bne.n	800c7ee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2220      	movs	r2, #32
 800c82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2200      	movs	r2, #0
 800c836:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2200      	movs	r2, #0
 800c83c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	4a5f      	ldr	r2, [pc, #380]	; (800c9c0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d021      	beq.n	800c88c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c852:	2b00      	cmp	r3, #0
 800c854:	d01a      	beq.n	800c88c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c85c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c85e:	e853 3f00 	ldrex	r3, [r3]
 800c862:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c86a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	461a      	mov	r2, r3
 800c874:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c878:	657b      	str	r3, [r7, #84]	; 0x54
 800c87a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c87c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c87e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c880:	e841 2300 	strex	r3, r2, [r1]
 800c884:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c886:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1e4      	bne.n	800c856 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c890:	2b01      	cmp	r3, #1
 800c892:	d130      	bne.n	800c8f6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	e853 3f00 	ldrex	r3, [r3]
 800c8a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c8a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8aa:	f023 0310 	bic.w	r3, r3, #16
 800c8ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c8bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c8be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8c4:	e841 2300 	strex	r3, r2, [r1]
 800c8c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d1e4      	bne.n	800c89a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	f003 0310 	and.w	r3, r3, #16
 800c8da:	2b10      	cmp	r3, #16
 800c8dc:	d103      	bne.n	800c8e6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2210      	movs	r2, #16
 800c8e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7fe fe28 	bl	800b544 <HAL_UARTEx_RxEventCallback>
 800c8f4:	e002      	b.n	800c8fc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c8f6:	6878      	ldr	r0, [r7, #4]
 800c8f8:	f7f6 fece 	bl	8003698 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c8fc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800c900:	2b00      	cmp	r3, #0
 800c902:	d006      	beq.n	800c912 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800c904:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c908:	f003 0320 	and.w	r3, r3, #32
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f47f aecf 	bne.w	800c6b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c918:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c91c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c920:	2b00      	cmp	r3, #0
 800c922:	d049      	beq.n	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x350>
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c92a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800c92e:	429a      	cmp	r2, r3
 800c930:	d242      	bcs.n	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	3308      	adds	r3, #8
 800c938:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93a:	6a3b      	ldr	r3, [r7, #32]
 800c93c:	e853 3f00 	ldrex	r3, [r3]
 800c940:	61fb      	str	r3, [r7, #28]
   return(result);
 800c942:	69fb      	ldr	r3, [r7, #28]
 800c944:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c948:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	3308      	adds	r3, #8
 800c952:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c956:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c958:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c95a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c95c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c95e:	e841 2300 	strex	r3, r2, [r1]
 800c962:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1e3      	bne.n	800c932 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a15      	ldr	r2, [pc, #84]	; (800c9c4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800c96e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	e853 3f00 	ldrex	r3, [r3]
 800c97c:	60bb      	str	r3, [r7, #8]
   return(result);
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	f043 0320 	orr.w	r3, r3, #32
 800c984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c992:	61bb      	str	r3, [r7, #24]
 800c994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c996:	6979      	ldr	r1, [r7, #20]
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	e841 2300 	strex	r3, r2, [r1]
 800c99e:	613b      	str	r3, [r7, #16]
   return(result);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d1e4      	bne.n	800c970 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c9a6:	e007      	b.n	800c9b8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	699a      	ldr	r2, [r3, #24]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	f042 0208 	orr.w	r2, r2, #8
 800c9b6:	619a      	str	r2, [r3, #24]
}
 800c9b8:	bf00      	nop
 800c9ba:	37b0      	adds	r7, #176	; 0xb0
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	40008000 	.word	0x40008000
 800c9c4:	0800c2f9 	.word	0x0800c2f9

0800c9c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b0ae      	sub	sp, #184	; 0xb8
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c9d6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	69db      	ldr	r3, [r3, #28]
 800c9e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9fe:	2b22      	cmp	r3, #34	; 0x22
 800ca00:	f040 8186 	bne.w	800cd10 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ca0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca0e:	e129      	b.n	800cc64 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca16:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ca22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ca26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ca2a:	4013      	ands	r3, r2
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca38:	1c9a      	adds	r2, r3, #2
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	3b01      	subs	r3, #1
 800ca48:	b29a      	uxth	r2, r3
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ca5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca5e:	f003 0307 	and.w	r3, r3, #7
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d053      	beq.n	800cb0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d011      	beq.n	800ca96 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ca72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ca76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d00b      	beq.n	800ca96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	2201      	movs	r2, #1
 800ca84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca8c:	f043 0201 	orr.w	r2, r3, #1
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ca9a:	f003 0302 	and.w	r3, r3, #2
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d011      	beq.n	800cac6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800caa2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800caa6:	f003 0301 	and.w	r3, r3, #1
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d00b      	beq.n	800cac6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	2202      	movs	r2, #2
 800cab4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cabc:	f043 0204 	orr.w	r2, r3, #4
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cac6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800caca:	f003 0304 	and.w	r3, r3, #4
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d011      	beq.n	800caf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cad2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00b      	beq.n	800caf6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	2204      	movs	r2, #4
 800cae4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caec:	f043 0202 	orr.w	r2, r3, #2
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d006      	beq.n	800cb0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f7fe fd16 	bl	800b532 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	f040 80a4 	bne.w	800cc64 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb24:	e853 3f00 	ldrex	r3, [r3]
 800cb28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cb2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cb30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cb3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cb42:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cb46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cb4a:	e841 2300 	strex	r3, r2, [r1]
 800cb4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cb50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d1e2      	bne.n	800cb1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cb60:	e853 3f00 	ldrex	r3, [r3]
 800cb64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cb66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb6c:	f023 0301 	bic.w	r3, r3, #1
 800cb70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	3308      	adds	r3, #8
 800cb7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cb7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cb80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cb84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cb86:	e841 2300 	strex	r3, r2, [r1]
 800cb8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cb8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d1e1      	bne.n	800cb56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2220      	movs	r2, #32
 800cb96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a5f      	ldr	r2, [pc, #380]	; (800cd28 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d021      	beq.n	800cbf4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685b      	ldr	r3, [r3, #4]
 800cbb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d01a      	beq.n	800cbf4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbc6:	e853 3f00 	ldrex	r3, [r3]
 800cbca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cbcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cbd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800cbe0:	65bb      	str	r3, [r7, #88]	; 0x58
 800cbe2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbe4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cbe6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cbe8:	e841 2300 	strex	r3, r2, [r1]
 800cbec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cbee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1e4      	bne.n	800cbbe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbf8:	2b01      	cmp	r3, #1
 800cbfa:	d130      	bne.n	800cc5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0a:	e853 3f00 	ldrex	r3, [r3]
 800cc0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800cc10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc12:	f023 0310 	bic.w	r3, r3, #16
 800cc16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cc24:	647b      	str	r3, [r7, #68]	; 0x44
 800cc26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cc2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc2c:	e841 2300 	strex	r3, r2, [r1]
 800cc30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cc32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1e4      	bne.n	800cc02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	69db      	ldr	r3, [r3, #28]
 800cc3e:	f003 0310 	and.w	r3, r3, #16
 800cc42:	2b10      	cmp	r3, #16
 800cc44:	d103      	bne.n	800cc4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2210      	movs	r2, #16
 800cc4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cc54:	4619      	mov	r1, r3
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f7fe fc74 	bl	800b544 <HAL_UARTEx_RxEventCallback>
 800cc5c:	e002      	b.n	800cc64 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cc5e:	6878      	ldr	r0, [r7, #4]
 800cc60:	f7f6 fd1a 	bl	8003698 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cc64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d006      	beq.n	800cc7a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800cc6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cc70:	f003 0320 	and.w	r3, r3, #32
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	f47f aecb 	bne.w	800ca10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cc84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d049      	beq.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x358>
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cc92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d242      	bcs.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	3308      	adds	r3, #8
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	e853 3f00 	ldrex	r3, [r3]
 800cca8:	623b      	str	r3, [r7, #32]
   return(result);
 800ccaa:	6a3b      	ldr	r3, [r7, #32]
 800ccac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ccb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	3308      	adds	r3, #8
 800ccba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ccbe:	633a      	str	r2, [r7, #48]	; 0x30
 800ccc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ccc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ccc6:	e841 2300 	strex	r3, r2, [r1]
 800ccca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e3      	bne.n	800cc9a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a15      	ldr	r2, [pc, #84]	; (800cd2c <UART_RxISR_16BIT_FIFOEN+0x364>)
 800ccd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	e853 3f00 	ldrex	r3, [r3]
 800cce4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	f043 0320 	orr.w	r3, r3, #32
 800ccec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ccfa:	61fb      	str	r3, [r7, #28]
 800ccfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccfe:	69b9      	ldr	r1, [r7, #24]
 800cd00:	69fa      	ldr	r2, [r7, #28]
 800cd02:	e841 2300 	strex	r3, r2, [r1]
 800cd06:	617b      	str	r3, [r7, #20]
   return(result);
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d1e4      	bne.n	800ccd8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cd0e:	e007      	b.n	800cd20 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	699a      	ldr	r2, [r3, #24]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f042 0208 	orr.w	r2, r2, #8
 800cd1e:	619a      	str	r2, [r3, #24]
}
 800cd20:	bf00      	nop
 800cd22:	37b8      	adds	r7, #184	; 0xb8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	40008000 	.word	0x40008000
 800cd2c:	0800c4b1 	.word	0x0800c4b1

0800cd30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b083      	sub	sp, #12
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cd38:	bf00      	nop
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bc80      	pop	{r7}
 800cd40:	4770      	bx	lr

0800cd42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cd4a:	bf00      	nop
 800cd4c:	370c      	adds	r7, #12
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bc80      	pop	{r7}
 800cd52:	4770      	bx	lr

0800cd54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cd5c:	bf00      	nop
 800cd5e:	370c      	adds	r7, #12
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bc80      	pop	{r7}
 800cd64:	4770      	bx	lr

0800cd66 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b088      	sub	sp, #32
 800cd6a:	af02      	add	r7, sp, #8
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	1d3b      	adds	r3, r7, #4
 800cd70:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800cd74:	2300      	movs	r3, #0
 800cd76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cd7e:	2b01      	cmp	r3, #1
 800cd80:	d101      	bne.n	800cd86 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800cd82:	2302      	movs	r3, #2
 800cd84:	e046      	b.n	800ce14 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2224      	movs	r2, #36	; 0x24
 800cd92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	681a      	ldr	r2, [r3, #0]
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	f022 0201 	bic.w	r2, r2, #1
 800cda4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d105      	bne.n	800cdcc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800cdc0:	1d3b      	adds	r3, r7, #4
 800cdc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f000 f949 	bl	800d05e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	681a      	ldr	r2, [r3, #0]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f042 0201 	orr.w	r2, r2, #1
 800cdda:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cddc:	f7f5 fe58 	bl	8002a90 <HAL_GetTick>
 800cde0:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cde2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800cdf0:	68f8      	ldr	r0, [r7, #12]
 800cdf2:	f7fe ff16 	bl	800bc22 <UART_WaitOnFlagUntilTimeout>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d002      	beq.n	800ce02 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	75fb      	strb	r3, [r7, #23]
 800ce00:	e003      	b.n	800ce0a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	2220      	movs	r2, #32
 800ce06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800ce12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3718      	adds	r7, #24
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b089      	sub	sp, #36	; 0x24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d101      	bne.n	800ce32 <HAL_UARTEx_EnableStopMode+0x16>
 800ce2e:	2302      	movs	r3, #2
 800ce30:	e021      	b.n	800ce76 <HAL_UARTEx_EnableStopMode+0x5a>
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2201      	movs	r2, #1
 800ce36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	e853 3f00 	ldrex	r3, [r3]
 800ce46:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce48:	68bb      	ldr	r3, [r7, #8]
 800ce4a:	f043 0302 	orr.w	r3, r3, #2
 800ce4e:	61fb      	str	r3, [r7, #28]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	461a      	mov	r2, r3
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	61bb      	str	r3, [r7, #24]
 800ce5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce5c:	6979      	ldr	r1, [r7, #20]
 800ce5e:	69ba      	ldr	r2, [r7, #24]
 800ce60:	e841 2300 	strex	r3, r2, [r1]
 800ce64:	613b      	str	r3, [r7, #16]
   return(result);
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d1e6      	bne.n	800ce3a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3724      	adds	r7, #36	; 0x24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bc80      	pop	{r7}
 800ce7e:	4770      	bx	lr

0800ce80 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b084      	sub	sp, #16
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d101      	bne.n	800ce96 <HAL_UARTEx_EnableFifoMode+0x16>
 800ce92:	2302      	movs	r3, #2
 800ce94:	e02b      	b.n	800ceee <HAL_UARTEx_EnableFifoMode+0x6e>
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2224      	movs	r2, #36	; 0x24
 800cea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	681a      	ldr	r2, [r3, #0]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f022 0201 	bic.w	r2, r2, #1
 800cebc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cec4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800cecc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	68fa      	ldr	r2, [r7, #12]
 800ced4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f8e4 	bl	800d0a4 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	2220      	movs	r2, #32
 800cee0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ceec:	2300      	movs	r3, #0
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cef6:	b480      	push	{r7}
 800cef8:	b085      	sub	sp, #20
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d101      	bne.n	800cf0c <HAL_UARTEx_DisableFifoMode+0x16>
 800cf08:	2302      	movs	r3, #2
 800cf0a:	e027      	b.n	800cf5c <HAL_UARTEx_DisableFifoMode+0x66>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	2201      	movs	r2, #1
 800cf10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	2224      	movs	r2, #36	; 0x24
 800cf18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	681a      	ldr	r2, [r3, #0]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f022 0201 	bic.w	r2, r2, #1
 800cf32:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cf3a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2220      	movs	r2, #32
 800cf4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cf5a:	2300      	movs	r3, #0
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3714      	adds	r7, #20
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bc80      	pop	{r7}
 800cf64:	4770      	bx	lr

0800cf66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cf66:	b580      	push	{r7, lr}
 800cf68:	b084      	sub	sp, #16
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	6078      	str	r0, [r7, #4]
 800cf6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e02d      	b.n	800cfda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2201      	movs	r2, #1
 800cf82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2224      	movs	r2, #36	; 0x24
 800cf8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f022 0201 	bic.w	r2, r2, #1
 800cfa4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	689b      	ldr	r3, [r3, #8]
 800cfac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	683a      	ldr	r2, [r7, #0]
 800cfb6:	430a      	orrs	r2, r1
 800cfb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 f872 	bl	800d0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2220      	movs	r2, #32
 800cfcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800cfd8:	2300      	movs	r3, #0
}
 800cfda:	4618      	mov	r0, r3
 800cfdc:	3710      	adds	r7, #16
 800cfde:	46bd      	mov	sp, r7
 800cfe0:	bd80      	pop	{r7, pc}

0800cfe2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
 800cfea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d101      	bne.n	800cffa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cff6:	2302      	movs	r3, #2
 800cff8:	e02d      	b.n	800d056 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2201      	movs	r2, #1
 800cffe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	2224      	movs	r2, #36	; 0x24
 800d006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f022 0201 	bic.w	r2, r2, #1
 800d020:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	683a      	ldr	r2, [r7, #0]
 800d032:	430a      	orrs	r2, r1
 800d034:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f834 	bl	800d0a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	68fa      	ldr	r2, [r7, #12]
 800d042:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2220      	movs	r2, #32
 800d048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	2200      	movs	r2, #0
 800d050:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d054:	2300      	movs	r3, #0
}
 800d056:	4618      	mov	r0, r3
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800d05e:	b480      	push	{r7}
 800d060:	b085      	sub	sp, #20
 800d062:	af00      	add	r7, sp, #0
 800d064:	60f8      	str	r0, [r7, #12]
 800d066:	1d3b      	adds	r3, r7, #4
 800d068:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	f023 0210 	bic.w	r2, r3, #16
 800d076:	893b      	ldrh	r3, [r7, #8]
 800d078:	4619      	mov	r1, r3
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	430a      	orrs	r2, r1
 800d080:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	685b      	ldr	r3, [r3, #4]
 800d088:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800d08c:	7abb      	ldrb	r3, [r7, #10]
 800d08e:	061a      	lsls	r2, r3, #24
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	430a      	orrs	r2, r1
 800d096:	605a      	str	r2, [r3, #4]
}
 800d098:	bf00      	nop
 800d09a:	3714      	adds	r7, #20
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bc80      	pop	{r7}
 800d0a0:	4770      	bx	lr
	...

0800d0a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d108      	bne.n	800d0c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2201      	movs	r2, #1
 800d0c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d0c4:	e031      	b.n	800d12a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d0c6:	2308      	movs	r3, #8
 800d0c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d0ca:	2308      	movs	r3, #8
 800d0cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	0e5b      	lsrs	r3, r3, #25
 800d0d6:	b2db      	uxtb	r3, r3
 800d0d8:	f003 0307 	and.w	r3, r3, #7
 800d0dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	0f5b      	lsrs	r3, r3, #29
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	f003 0307 	and.w	r3, r3, #7
 800d0ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	7b3a      	ldrb	r2, [r7, #12]
 800d0f2:	4910      	ldr	r1, [pc, #64]	; (800d134 <UARTEx_SetNbDataToProcess+0x90>)
 800d0f4:	5c8a      	ldrb	r2, [r1, r2]
 800d0f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d0fa:	7b3a      	ldrb	r2, [r7, #12]
 800d0fc:	490e      	ldr	r1, [pc, #56]	; (800d138 <UARTEx_SetNbDataToProcess+0x94>)
 800d0fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d100:	fb93 f3f2 	sdiv	r3, r3, r2
 800d104:	b29a      	uxth	r2, r3
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	7b7a      	ldrb	r2, [r7, #13]
 800d110:	4908      	ldr	r1, [pc, #32]	; (800d134 <UARTEx_SetNbDataToProcess+0x90>)
 800d112:	5c8a      	ldrb	r2, [r1, r2]
 800d114:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d118:	7b7a      	ldrb	r2, [r7, #13]
 800d11a:	4907      	ldr	r1, [pc, #28]	; (800d138 <UARTEx_SetNbDataToProcess+0x94>)
 800d11c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d11e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d122:	b29a      	uxth	r2, r3
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d12a:	bf00      	nop
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	bc80      	pop	{r7}
 800d132:	4770      	bx	lr
 800d134:	0801f614 	.word	0x0801f614
 800d138:	0801f61c 	.word	0x0801f61c

0800d13c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800d140:	f7f5 fb14 	bl	800276c <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800d144:	f000 f820 	bl	800d188 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800d148:	bf00      	nop
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800d150:	f04f 30ff 	mov.w	r0, #4294967295
 800d154:	f010 fdb6 	bl	801dcc4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800d158:	bf00      	nop
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800d15c:	b480      	push	{r7}
 800d15e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800d160:	f3bf 8f4f 	dsb	sy
}
 800d164:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800d166:	4b06      	ldr	r3, [pc, #24]	; (800d180 <__NVIC_SystemReset+0x24>)
 800d168:	68db      	ldr	r3, [r3, #12]
 800d16a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800d16e:	4904      	ldr	r1, [pc, #16]	; (800d180 <__NVIC_SystemReset+0x24>)
 800d170:	4b04      	ldr	r3, [pc, #16]	; (800d184 <__NVIC_SystemReset+0x28>)
 800d172:	4313      	orrs	r3, r2
 800d174:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800d176:	f3bf 8f4f 	dsb	sy
}
 800d17a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800d17c:	bf00      	nop
 800d17e:	e7fd      	b.n	800d17c <__NVIC_SystemReset+0x20>
 800d180:	e000ed00 	.word	0xe000ed00
 800d184:	05fa0004 	.word	0x05fa0004

0800d188 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 800d18e:	2300      	movs	r3, #0
 800d190:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 800d192:	2300      	movs	r3, #0
 800d194:	9302      	str	r3, [sp, #8]
 800d196:	2303      	movs	r3, #3
 800d198:	9301      	str	r3, [sp, #4]
 800d19a:	2301      	movs	r3, #1
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	4b59      	ldr	r3, [pc, #356]	; (800d304 <LoRaWAN_Init+0x17c>)
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	2002      	movs	r0, #2
 800d1a6:	f011 f9db 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	9302      	str	r3, [sp, #8]
 800d1ae:	2305      	movs	r3, #5
 800d1b0:	9301      	str	r3, [sp, #4]
 800d1b2:	2302      	movs	r3, #2
 800d1b4:	9300      	str	r3, [sp, #0]
 800d1b6:	4b54      	ldr	r3, [pc, #336]	; (800d308 <LoRaWAN_Init+0x180>)
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	2100      	movs	r1, #0
 800d1bc:	2002      	movs	r0, #2
 800d1be:	f011 f9cf 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9302      	str	r3, [sp, #8]
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4b4f      	ldr	r3, [pc, #316]	; (800d30c <LoRaWAN_Init+0x184>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	2002      	movs	r0, #2
 800d1d6:	f011 f9c3 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 800d1da:	1d3b      	adds	r3, r7, #4
 800d1dc:	4619      	mov	r1, r3
 800d1de:	2000      	movs	r0, #0
 800d1e0:	f003 f974 	bl	80104cc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	0e1b      	lsrs	r3, r3, #24
 800d1e8:	b2db      	uxtb	r3, r3
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	0c1b      	lsrs	r3, r3, #16
 800d1f0:	b2db      	uxtb	r3, r3
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	0a1b      	lsrs	r3, r3, #8
 800d1f8:	b2db      	uxtb	r3, r3
 800d1fa:	9302      	str	r3, [sp, #8]
 800d1fc:	9101      	str	r1, [sp, #4]
 800d1fe:	9200      	str	r2, [sp, #0]
 800d200:	4b43      	ldr	r3, [pc, #268]	; (800d310 <LoRaWAN_Init+0x188>)
 800d202:	2200      	movs	r2, #0
 800d204:	2100      	movs	r1, #0
 800d206:	2002      	movs	r0, #2
 800d208:	f011 f9aa 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800d20c:	1d3b      	adds	r3, r7, #4
 800d20e:	4619      	mov	r1, r3
 800d210:	2001      	movs	r0, #1
 800d212:	f003 f95b 	bl	80104cc <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	0e1b      	lsrs	r3, r3, #24
 800d21a:	b2db      	uxtb	r3, r3
 800d21c:	461a      	mov	r2, r3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	0c1b      	lsrs	r3, r3, #16
 800d222:	b2db      	uxtb	r3, r3
 800d224:	4619      	mov	r1, r3
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	0a1b      	lsrs	r3, r3, #8
 800d22a:	b2db      	uxtb	r3, r3
 800d22c:	6878      	ldr	r0, [r7, #4]
 800d22e:	b2c0      	uxtb	r0, r0
 800d230:	9003      	str	r0, [sp, #12]
 800d232:	9302      	str	r3, [sp, #8]
 800d234:	9101      	str	r1, [sp, #4]
 800d236:	9200      	str	r2, [sp, #0]
 800d238:	4b36      	ldr	r3, [pc, #216]	; (800d314 <LoRaWAN_Init+0x18c>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	2100      	movs	r1, #0
 800d23e:	2002      	movs	r0, #2
 800d240:	f011 f98e 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 800d244:	2300      	movs	r3, #0
 800d246:	9300      	str	r3, [sp, #0]
 800d248:	4b33      	ldr	r3, [pc, #204]	; (800d318 <LoRaWAN_Init+0x190>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d250:	4832      	ldr	r0, [pc, #200]	; (800d31c <LoRaWAN_Init+0x194>)
 800d252:	f010 fed7 	bl	801e004 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 800d256:	2300      	movs	r3, #0
 800d258:	9300      	str	r3, [sp, #0]
 800d25a:	4b31      	ldr	r3, [pc, #196]	; (800d320 <LoRaWAN_Init+0x198>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d262:	4830      	ldr	r0, [pc, #192]	; (800d324 <LoRaWAN_Init+0x19c>)
 800d264:	f010 fece 	bl	801e004 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 800d268:	2300      	movs	r3, #0
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	4b2e      	ldr	r3, [pc, #184]	; (800d328 <LoRaWAN_Init+0x1a0>)
 800d26e:	2201      	movs	r2, #1
 800d270:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800d274:	482d      	ldr	r0, [pc, #180]	; (800d32c <LoRaWAN_Init+0x1a4>)
 800d276:	f010 fec5 	bl	801e004 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 800d27a:	2300      	movs	r3, #0
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	4b2c      	ldr	r3, [pc, #176]	; (800d330 <LoRaWAN_Init+0x1a8>)
 800d280:	2200      	movs	r2, #0
 800d282:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800d286:	482b      	ldr	r0, [pc, #172]	; (800d334 <LoRaWAN_Init+0x1ac>)
 800d288:	f010 febc 	bl	801e004 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 800d28c:	4a2a      	ldr	r2, [pc, #168]	; (800d338 <LoRaWAN_Init+0x1b0>)
 800d28e:	2100      	movs	r1, #0
 800d290:	2001      	movs	r0, #1
 800d292:	f010 fe13 	bl	801debc <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800d296:	4a29      	ldr	r2, [pc, #164]	; (800d33c <LoRaWAN_Init+0x1b4>)
 800d298:	2100      	movs	r1, #0
 800d29a:	2002      	movs	r0, #2
 800d29c:	f010 fe0e 	bl	801debc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 800d2a0:	4a27      	ldr	r2, [pc, #156]	; (800d340 <LoRaWAN_Init+0x1b8>)
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	2004      	movs	r0, #4
 800d2a6:	f010 fe09 	bl	801debc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 800d2aa:	4a26      	ldr	r2, [pc, #152]	; (800d344 <LoRaWAN_Init+0x1bc>)
 800d2ac:	2100      	movs	r1, #0
 800d2ae:	2008      	movs	r0, #8
 800d2b0:	f010 fe04 	bl	801debc <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 800d2b4:	f000 fcf6 	bl	800dca4 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800d2b8:	4923      	ldr	r1, [pc, #140]	; (800d348 <LoRaWAN_Init+0x1c0>)
 800d2ba:	4824      	ldr	r0, [pc, #144]	; (800d34c <LoRaWAN_Init+0x1c4>)
 800d2bc:	f002 fa1c 	bl	800f6f8 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 800d2c0:	4823      	ldr	r0, [pc, #140]	; (800d350 <LoRaWAN_Init+0x1c8>)
 800d2c2:	f002 fa75 	bl	800f7b0 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 800d2c6:	4819      	ldr	r0, [pc, #100]	; (800d32c <LoRaWAN_Init+0x1a4>)
 800d2c8:	f010 fed2 	bl	801e070 <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 800d2cc:	4b21      	ldr	r3, [pc, #132]	; (800d354 <LoRaWAN_Init+0x1cc>)
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	4a21      	ldr	r2, [pc, #132]	; (800d358 <LoRaWAN_Init+0x1d0>)
 800d2d2:	7812      	ldrb	r2, [r2, #0]
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f002 fb38 	bl	800f94c <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 800d2dc:	4b1f      	ldr	r3, [pc, #124]	; (800d35c <LoRaWAN_Init+0x1d4>)
 800d2de:	781b      	ldrb	r3, [r3, #0]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d10b      	bne.n	800d2fc <LoRaWAN_Init+0x174>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800d2e4:	4b1e      	ldr	r3, [pc, #120]	; (800d360 <LoRaWAN_Init+0x1d8>)
 800d2e6:	6819      	ldr	r1, [r3, #0]
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	4b1d      	ldr	r3, [pc, #116]	; (800d364 <LoRaWAN_Init+0x1dc>)
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	481d      	ldr	r0, [pc, #116]	; (800d368 <LoRaWAN_Init+0x1e0>)
 800d2f2:	f010 fe87 	bl	801e004 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800d2f6:	481c      	ldr	r0, [pc, #112]	; (800d368 <LoRaWAN_Init+0x1e0>)
 800d2f8:	f010 feba 	bl	801e070 <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 800d2fc:	bf00      	nop
 800d2fe:	3708      	adds	r7, #8
 800d300:	46bd      	mov	sp, r7
 800d302:	bd80      	pop	{r7, pc}
 800d304:	0801ecd8 	.word	0x0801ecd8
 800d308:	0801ecfc 	.word	0x0801ecfc
 800d30c:	0801ed1c 	.word	0x0801ed1c
 800d310:	0801ed3c 	.word	0x0801ed3c
 800d314:	0801ed60 	.word	0x0801ed60
 800d318:	0800d7cd 	.word	0x0800d7cd
 800d31c:	20000730 	.word	0x20000730
 800d320:	0800d7df 	.word	0x0800d7df
 800d324:	20000748 	.word	0x20000748
 800d328:	0800d7f1 	.word	0x0800d7f1
 800d32c:	20000760 	.word	0x20000760
 800d330:	0800dba5 	.word	0x0800dba5
 800d334:	20000624 	.word	0x20000624
 800d338:	0800f921 	.word	0x0800f921
 800d33c:	0800d4c5 	.word	0x0800d4c5
 800d340:	0800dbc9 	.word	0x0800dbc9
 800d344:	0800db25 	.word	0x0800db25
 800d348:	01030000 	.word	0x01030000
 800d34c:	20000028 	.word	0x20000028
 800d350:	20000074 	.word	0x20000074
 800d354:	20000024 	.word	0x20000024
 800d358:	20000025 	.word	0x20000025
 800d35c:	20000608 	.word	0x20000608
 800d360:	2000008c 	.word	0x2000008c
 800d364:	0800d7a9 	.word	0x0800d7a9
 800d368:	2000060c 	.word	0x2000060c

0800d36c <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 800d36c:	b5b0      	push	{r4, r5, r7, lr}
 800d36e:	b08a      	sub	sp, #40	; 0x28
 800d370:	af06      	add	r7, sp, #24
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
 uint8_t RxPort = 0;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	f000 808c 	beq.w	800d49a <OnRxData+0x12e>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 800d382:	4848      	ldr	r0, [pc, #288]	; (800d4a4 <OnRxData+0x138>)
 800d384:	f010 fe74 	bl	801e070 <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d060      	beq.n	800d452 <OnRxData+0xe6>
    {
      if (appData != NULL)
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2b00      	cmp	r3, #0
 800d394:	d05d      	beq.n	800d452 <OnRxData+0xe6>
      {
        RxPort = appData->Port;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d056      	beq.n	800d452 <OnRxData+0xe6>
        {
    switch (appData->Port)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d01f      	beq.n	800d3ec <OnRxData+0x80>
 800d3ac:	2b03      	cmp	r3, #3
 800d3ae:	d14b      	bne.n	800d448 <OnRxData+0xdc>
    {
      case LORAWAN_SWITCH_CLASS_PORT:
        /*this port switches the class*/
        if (appData->BufferSize == 1)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	785b      	ldrb	r3, [r3, #1]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d149      	bne.n	800d44c <OnRxData+0xe0>
        {
          switch (appData->Buffer[0])
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	685b      	ldr	r3, [r3, #4]
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	2b02      	cmp	r3, #2
 800d3c0:	d00e      	beq.n	800d3e0 <OnRxData+0x74>
 800d3c2:	2b02      	cmp	r3, #2
 800d3c4:	dc10      	bgt.n	800d3e8 <OnRxData+0x7c>
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d002      	beq.n	800d3d0 <OnRxData+0x64>
 800d3ca:	2b01      	cmp	r3, #1
 800d3cc:	d004      	beq.n	800d3d8 <OnRxData+0x6c>
            {
              LmHandlerRequestClass(CLASS_C);
              break;
            }
            default:
              break;
 800d3ce:	e00b      	b.n	800d3e8 <OnRxData+0x7c>
              LmHandlerRequestClass(CLASS_A);
 800d3d0:	2000      	movs	r0, #0
 800d3d2:	f002 fc83 	bl	800fcdc <LmHandlerRequestClass>
              break;
 800d3d6:	e008      	b.n	800d3ea <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_B);
 800d3d8:	2001      	movs	r0, #1
 800d3da:	f002 fc7f 	bl	800fcdc <LmHandlerRequestClass>
              break;
 800d3de:	e004      	b.n	800d3ea <OnRxData+0x7e>
              LmHandlerRequestClass(CLASS_C);
 800d3e0:	2002      	movs	r0, #2
 800d3e2:	f002 fc7b 	bl	800fcdc <LmHandlerRequestClass>
              break;
 800d3e6:	e000      	b.n	800d3ea <OnRxData+0x7e>
              break;
 800d3e8:	bf00      	nop
          }
        }
        break;
 800d3ea:	e02f      	b.n	800d44c <OnRxData+0xe0>
      case LORAWAN_USER_APP_PORT:
        if (appData->BufferSize == 1)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	785b      	ldrb	r3, [r3, #1]
 800d3f0:	2b01      	cmp	r3, #1
 800d3f2:	d12d      	bne.n	800d450 <OnRxData+0xe4>
        {
          AppLedStateOn = appData->Buffer[0] & 0x01;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	f003 0301 	and.w	r3, r3, #1
 800d3fe:	b2da      	uxtb	r2, r3
 800d400:	4b29      	ldr	r3, [pc, #164]	; (800d4a8 <OnRxData+0x13c>)
 800d402:	701a      	strb	r2, [r3, #0]
          if (AppLedStateOn == RESET)
 800d404:	4b28      	ldr	r3, [pc, #160]	; (800d4a8 <OnRxData+0x13c>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d10e      	bne.n	800d42a <OnRxData+0xbe>
          {
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800d40c:	4b27      	ldr	r3, [pc, #156]	; (800d4ac <OnRxData+0x140>)
 800d40e:	2200      	movs	r2, #0
 800d410:	2100      	movs	r1, #0
 800d412:	2003      	movs	r0, #3
 800d414:	f011 f8a4 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
            LEDON = 0;
 800d418:	4b25      	ldr	r3, [pc, #148]	; (800d4b0 <OnRxData+0x144>)
 800d41a:	2200      	movs	r2, #0
 800d41c:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 800d41e:	2201      	movs	r2, #1
 800d420:	2120      	movs	r1, #32
 800d422:	4824      	ldr	r0, [pc, #144]	; (800d4b4 <OnRxData+0x148>)
 800d424:	f7f9 f842 	bl	80064ac <HAL_GPIO_WritePin>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  LEDON = 1;
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
          }
        }
        break;
 800d428:	e012      	b.n	800d450 <OnRxData+0xe4>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 800d42a:	4b23      	ldr	r3, [pc, #140]	; (800d4b8 <OnRxData+0x14c>)
 800d42c:	2200      	movs	r2, #0
 800d42e:	2100      	movs	r1, #0
 800d430:	2003      	movs	r0, #3
 800d432:	f011 f895 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
                  LEDON = 1;
 800d436:	4b1e      	ldr	r3, [pc, #120]	; (800d4b0 <OnRxData+0x144>)
 800d438:	2201      	movs	r2, #1
 800d43a:	701a      	strb	r2, [r3, #0]
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 800d43c:	2200      	movs	r2, #0
 800d43e:	2120      	movs	r1, #32
 800d440:	481c      	ldr	r0, [pc, #112]	; (800d4b4 <OnRxData+0x148>)
 800d442:	f7f9 f833 	bl	80064ac <HAL_GPIO_WritePin>
        break;
 800d446:	e003      	b.n	800d450 <OnRxData+0xe4>

      default:

        break;
 800d448:	bf00      	nop
 800d44a:	e002      	b.n	800d452 <OnRxData+0xe6>
        break;
 800d44c:	bf00      	nop
 800d44e:	e000      	b.n	800d452 <OnRxData+0xe6>
        break;
 800d450:	bf00      	nop
    }
  }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	7c1b      	ldrb	r3, [r3, #16]
 800d456:	2b05      	cmp	r3, #5
 800d458:	d81f      	bhi.n	800d49a <OnRxData+0x12e>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	7bfa      	ldrb	r2, [r7, #15]
 800d460:	6839      	ldr	r1, [r7, #0]
 800d462:	f991 1008 	ldrsb.w	r1, [r1, #8]
 800d466:	460c      	mov	r4, r1
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	7c09      	ldrb	r1, [r1, #16]
 800d46c:	4608      	mov	r0, r1
 800d46e:	4913      	ldr	r1, [pc, #76]	; (800d4bc <OnRxData+0x150>)
 800d470:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d474:	6838      	ldr	r0, [r7, #0]
 800d476:	f990 0009 	ldrsb.w	r0, [r0, #9]
 800d47a:	4605      	mov	r5, r0
 800d47c:	6838      	ldr	r0, [r7, #0]
 800d47e:	f990 000a 	ldrsb.w	r0, [r0, #10]
 800d482:	9005      	str	r0, [sp, #20]
 800d484:	9504      	str	r5, [sp, #16]
 800d486:	9103      	str	r1, [sp, #12]
 800d488:	9402      	str	r4, [sp, #8]
 800d48a:	9201      	str	r2, [sp, #4]
 800d48c:	9300      	str	r3, [sp, #0]
 800d48e:	4b0c      	ldr	r3, [pc, #48]	; (800d4c0 <OnRxData+0x154>)
 800d490:	2200      	movs	r2, #0
 800d492:	2100      	movs	r1, #0
 800d494:	2003      	movs	r0, #3
 800d496:	f011 f863 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 800d49a:	bf00      	nop
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20000748 	.word	0x20000748
 800d4a8:	2000072e 	.word	0x2000072e
 800d4ac:	0801ed84 	.word	0x0801ed84
 800d4b0:	2000027e 	.word	0x2000027e
 800d4b4:	48000400 	.word	0x48000400
 800d4b8:	0801ed90 	.word	0x0801ed90
 800d4bc:	2000000c 	.word	0x2000000c
 800d4c0:	0801ed9c 	.word	0x0801ed9c

0800d4c4 <SendTxData>:

static void SendTxData(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800d4ca:	23ff      	movs	r3, #255	; 0xff
 800d4cc:	72fb      	strb	r3, [r7, #11]
  extBattery = GetBatteryLevel();
 800d4ce:	f7f5 f981 	bl	80027d4 <GetBatteryLevel>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	4ba0      	ldr	r3, [pc, #640]	; (800d758 <SendTxData+0x294>)
 800d4d8:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Time_t nextTxIn = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	60fb      	str	r3, [r7, #12]


  uint32_t i = 0;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	607b      	str	r3, [r7, #4]


  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", extBattery);
 800d4e2:	4b9d      	ldr	r3, [pc, #628]	; (800d758 <SendTxData+0x294>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	9300      	str	r3, [sp, #0]
 800d4e8:	4b9c      	ldr	r3, [pc, #624]	; (800d75c <SendTxData+0x298>)
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	2002      	movs	r0, #2
 800d4f0:	f011 f836 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 800d4f4:	4b9a      	ldr	r3, [pc, #616]	; (800d760 <SendTxData+0x29c>)
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1) >> 8;
 800d4fa:	4b9a      	ldr	r3, [pc, #616]	; (800d764 <SendTxData+0x2a0>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	0a18      	lsrs	r0, r3, #8
 800d500:	4b97      	ldr	r3, [pc, #604]	; (800d760 <SendTxData+0x29c>)
 800d502:	685a      	ldr	r2, [r3, #4]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	1c59      	adds	r1, r3, #1
 800d508:	6079      	str	r1, [r7, #4]
 800d50a:	4413      	add	r3, r2
 800d50c:	b2c2      	uxtb	r2, r0
 800d50e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM1)%256;
 800d510:	4b94      	ldr	r3, [pc, #592]	; (800d764 <SendTxData+0x2a0>)
 800d512:	6818      	ldr	r0, [r3, #0]
 800d514:	4b92      	ldr	r3, [pc, #584]	; (800d760 <SendTxData+0x29c>)
 800d516:	685a      	ldr	r2, [r3, #4]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	1c59      	adds	r1, r3, #1
 800d51c:	6079      	str	r1, [r7, #4]
 800d51e:	4413      	add	r3, r2
 800d520:	b2c2      	uxtb	r2, r0
 800d522:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5)>>8;
 800d524:	4b90      	ldr	r3, [pc, #576]	; (800d768 <SendTxData+0x2a4>)
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	0a18      	lsrs	r0, r3, #8
 800d52a:	4b8d      	ldr	r3, [pc, #564]	; (800d760 <SendTxData+0x29c>)
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	1c59      	adds	r1, r3, #1
 800d532:	6079      	str	r1, [r7, #4]
 800d534:	4413      	add	r3, r2
 800d536:	b2c2      	uxtb	r2, r0
 800d538:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM2_5)%256;
 800d53a:	4b8b      	ldr	r3, [pc, #556]	; (800d768 <SendTxData+0x2a4>)
 800d53c:	6818      	ldr	r0, [r3, #0]
 800d53e:	4b88      	ldr	r3, [pc, #544]	; (800d760 <SendTxData+0x29c>)
 800d540:	685a      	ldr	r2, [r3, #4]
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	1c59      	adds	r1, r3, #1
 800d546:	6079      	str	r1, [r7, #4]
 800d548:	4413      	add	r3, r2
 800d54a:	b2c2      	uxtb	r2, r0
 800d54c:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10)>>8;
 800d54e:	4b87      	ldr	r3, [pc, #540]	; (800d76c <SendTxData+0x2a8>)
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	0a18      	lsrs	r0, r3, #8
 800d554:	4b82      	ldr	r3, [pc, #520]	; (800d760 <SendTxData+0x29c>)
 800d556:	685a      	ldr	r2, [r3, #4]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	1c59      	adds	r1, r3, #1
 800d55c:	6079      	str	r1, [r7, #4]
 800d55e:	4413      	add	r3, r2
 800d560:	b2c2      	uxtb	r2, r0
 800d562:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (PM10)%256;
 800d564:	4b81      	ldr	r3, [pc, #516]	; (800d76c <SendTxData+0x2a8>)
 800d566:	6818      	ldr	r0, [r3, #0]
 800d568:	4b7d      	ldr	r3, [pc, #500]	; (800d760 <SendTxData+0x29c>)
 800d56a:	685a      	ldr	r2, [r3, #4]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	1c59      	adds	r1, r3, #1
 800d570:	6079      	str	r1, [r7, #4]
 800d572:	4413      	add	r3, r2
 800d574:	b2c2      	uxtb	r2, r0
 800d576:	701a      	strb	r2, [r3, #0]
  int16_t tempVar;
  tempVar = ((int16_t)(temperatureTX*100.0)) + 10000;
 800d578:	4b7d      	ldr	r3, [pc, #500]	; (800d770 <SendTxData+0x2ac>)
 800d57a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d57e:	f04f 0200 	mov.w	r2, #0
 800d582:	4b7c      	ldr	r3, [pc, #496]	; (800d774 <SendTxData+0x2b0>)
 800d584:	f7f2 ffbc 	bl	8000500 <__aeabi_dmul>
 800d588:	4602      	mov	r2, r0
 800d58a:	460b      	mov	r3, r1
 800d58c:	4610      	mov	r0, r2
 800d58e:	4619      	mov	r1, r3
 800d590:	f7f3 fa50 	bl	8000a34 <__aeabi_d2iz>
 800d594:	4603      	mov	r3, r0
 800d596:	b21b      	sxth	r3, r3
 800d598:	b29b      	uxth	r3, r3
 800d59a:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800d59e:	3310      	adds	r3, #16
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	807b      	strh	r3, [r7, #2]
  AppData.Buffer[i++] = tempVar/100;
 800d5a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5a8:	4a73      	ldr	r2, [pc, #460]	; (800d778 <SendTxData+0x2b4>)
 800d5aa:	fb82 1203 	smull	r1, r2, r2, r3
 800d5ae:	1152      	asrs	r2, r2, #5
 800d5b0:	17db      	asrs	r3, r3, #31
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	b218      	sxth	r0, r3
 800d5b6:	4b6a      	ldr	r3, [pc, #424]	; (800d760 <SendTxData+0x29c>)
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	1c59      	adds	r1, r3, #1
 800d5be:	6079      	str	r1, [r7, #4]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	b2c2      	uxtb	r2, r0
 800d5c4:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d5c6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d5ca:	4a6b      	ldr	r2, [pc, #428]	; (800d778 <SendTxData+0x2b4>)
 800d5cc:	fb82 1203 	smull	r1, r2, r2, r3
 800d5d0:	1151      	asrs	r1, r2, #5
 800d5d2:	17da      	asrs	r2, r3, #31
 800d5d4:	1a8a      	subs	r2, r1, r2
 800d5d6:	2164      	movs	r1, #100	; 0x64
 800d5d8:	fb01 f202 	mul.w	r2, r1, r2
 800d5dc:	1a9b      	subs	r3, r3, r2
 800d5de:	b218      	sxth	r0, r3
 800d5e0:	4b5f      	ldr	r3, [pc, #380]	; (800d760 <SendTxData+0x29c>)
 800d5e2:	685a      	ldr	r2, [r3, #4]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	1c59      	adds	r1, r3, #1
 800d5e8:	6079      	str	r1, [r7, #4]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	b2c2      	uxtb	r2, r0
 800d5ee:	701a      	strb	r2, [r3, #0]
  tempVar = ((int16_t)(humidity*100.0));
 800d5f0:	4b62      	ldr	r3, [pc, #392]	; (800d77c <SendTxData+0x2b8>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f7f2 ff2b 	bl	8000450 <__aeabi_f2d>
 800d5fa:	f04f 0200 	mov.w	r2, #0
 800d5fe:	4b5d      	ldr	r3, [pc, #372]	; (800d774 <SendTxData+0x2b0>)
 800d600:	f7f2 ff7e 	bl	8000500 <__aeabi_dmul>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	4610      	mov	r0, r2
 800d60a:	4619      	mov	r1, r3
 800d60c:	f7f3 fa12 	bl	8000a34 <__aeabi_d2iz>
 800d610:	4603      	mov	r3, r0
 800d612:	807b      	strh	r3, [r7, #2]
  AppData.Buffer[i++] = tempVar/100;
 800d614:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d618:	4a57      	ldr	r2, [pc, #348]	; (800d778 <SendTxData+0x2b4>)
 800d61a:	fb82 1203 	smull	r1, r2, r2, r3
 800d61e:	1152      	asrs	r2, r2, #5
 800d620:	17db      	asrs	r3, r3, #31
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	b218      	sxth	r0, r3
 800d626:	4b4e      	ldr	r3, [pc, #312]	; (800d760 <SendTxData+0x29c>)
 800d628:	685a      	ldr	r2, [r3, #4]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	1c59      	adds	r1, r3, #1
 800d62e:	6079      	str	r1, [r7, #4]
 800d630:	4413      	add	r3, r2
 800d632:	b2c2      	uxtb	r2, r0
 800d634:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = tempVar%100;
 800d636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d63a:	4a4f      	ldr	r2, [pc, #316]	; (800d778 <SendTxData+0x2b4>)
 800d63c:	fb82 1203 	smull	r1, r2, r2, r3
 800d640:	1151      	asrs	r1, r2, #5
 800d642:	17da      	asrs	r2, r3, #31
 800d644:	1a8a      	subs	r2, r1, r2
 800d646:	2164      	movs	r1, #100	; 0x64
 800d648:	fb01 f202 	mul.w	r2, r1, r2
 800d64c:	1a9b      	subs	r3, r3, r2
 800d64e:	b218      	sxth	r0, r3
 800d650:	4b43      	ldr	r3, [pc, #268]	; (800d760 <SendTxData+0x29c>)
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	1c59      	adds	r1, r3, #1
 800d658:	6079      	str	r1, [r7, #4]
 800d65a:	4413      	add	r3, r2
 800d65c:	b2c2      	uxtb	r2, r0
 800d65e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = VOC/256;
 800d660:	4b47      	ldr	r3, [pc, #284]	; (800d780 <SendTxData+0x2bc>)
 800d662:	881b      	ldrh	r3, [r3, #0]
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	b298      	uxth	r0, r3
 800d668:	4b3d      	ldr	r3, [pc, #244]	; (800d760 <SendTxData+0x29c>)
 800d66a:	685a      	ldr	r2, [r3, #4]
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	1c59      	adds	r1, r3, #1
 800d670:	6079      	str	r1, [r7, #4]
 800d672:	4413      	add	r3, r2
 800d674:	b2c2      	uxtb	r2, r0
 800d676:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = VOC%256;
 800d678:	4b41      	ldr	r3, [pc, #260]	; (800d780 <SendTxData+0x2bc>)
 800d67a:	8818      	ldrh	r0, [r3, #0]
 800d67c:	4b38      	ldr	r3, [pc, #224]	; (800d760 <SendTxData+0x29c>)
 800d67e:	685a      	ldr	r2, [r3, #4]
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	1c59      	adds	r1, r3, #1
 800d684:	6079      	str	r1, [r7, #4]
 800d686:	4413      	add	r3, r2
 800d688:	b2c2      	uxtb	r2, r0
 800d68a:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = extBattery;
 800d68c:	4b32      	ldr	r3, [pc, #200]	; (800d758 <SendTxData+0x294>)
 800d68e:	6818      	ldr	r0, [r3, #0]
 800d690:	4b33      	ldr	r3, [pc, #204]	; (800d760 <SendTxData+0x29c>)
 800d692:	685a      	ldr	r2, [r3, #4]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	1c59      	adds	r1, r3, #1
 800d698:	6079      	str	r1, [r7, #4]
 800d69a:	4413      	add	r3, r2
 800d69c:	b2c2      	uxtb	r2, r0
 800d69e:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = LEDON;
 800d6a0:	4b2f      	ldr	r3, [pc, #188]	; (800d760 <SendTxData+0x29c>)
 800d6a2:	685a      	ldr	r2, [r3, #4]
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	1c59      	adds	r1, r3, #1
 800d6a8:	6079      	str	r1, [r7, #4]
 800d6aa:	4413      	add	r3, r2
 800d6ac:	4a35      	ldr	r2, [pc, #212]	; (800d784 <SendTxData+0x2c0>)
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	701a      	strb	r2, [r3, #0]

  AppData.BufferSize = i;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	4b2a      	ldr	r3, [pc, #168]	; (800d760 <SendTxData+0x29c>)
 800d6b8:	705a      	strb	r2, [r3, #1]

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800d6ba:	4b33      	ldr	r3, [pc, #204]	; (800d788 <SendTxData+0x2c4>)
 800d6bc:	7a5b      	ldrb	r3, [r3, #9]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <SendTxData+0x20e>
 800d6c2:	f002 f9e7 	bl	800fa94 <LmHandlerJoinStatus>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d102      	bne.n	800d6d2 <SendTxData+0x20e>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 800d6cc:	482e      	ldr	r0, [pc, #184]	; (800d788 <SendTxData+0x2c4>)
 800d6ce:	f010 fd3d 	bl	801e14c <UTIL_TIMER_Stop>

  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 800d6d2:	4b2e      	ldr	r3, [pc, #184]	; (800d78c <SendTxData+0x2c8>)
 800d6d4:	78db      	ldrb	r3, [r3, #3]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	4619      	mov	r1, r3
 800d6da:	4821      	ldr	r0, [pc, #132]	; (800d760 <SendTxData+0x29c>)
 800d6dc:	f002 f9f6 	bl	800facc <LmHandlerSend>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	72fb      	strb	r3, [r7, #11]
  if (LORAMAC_HANDLER_SUCCESS == status)
 800d6e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d106      	bne.n	800d6fa <SendTxData+0x236>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 800d6ec:	4b28      	ldr	r3, [pc, #160]	; (800d790 <SendTxData+0x2cc>)
 800d6ee:	2201      	movs	r2, #1
 800d6f0:	2100      	movs	r1, #0
 800d6f2:	2001      	movs	r0, #1
 800d6f4:	f010 ff34 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
 800d6f8:	e016      	b.n	800d728 <SendTxData+0x264>
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800d6fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d6fe:	f113 0f06 	cmn.w	r3, #6
 800d702:	d111      	bne.n	800d728 <SendTxData+0x264>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 800d704:	f002 f918 	bl	800f938 <LmHandlerGetDutyCycleWaitTime>
 800d708:	60f8      	str	r0, [r7, #12]
    if (nextTxIn > 0)
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00b      	beq.n	800d728 <SendTxData+0x264>
  {
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	4a20      	ldr	r2, [pc, #128]	; (800d794 <SendTxData+0x2d0>)
 800d714:	fba2 2303 	umull	r2, r3, r2, r3
 800d718:	099b      	lsrs	r3, r3, #6
 800d71a:	9300      	str	r3, [sp, #0]
 800d71c:	4b1e      	ldr	r3, [pc, #120]	; (800d798 <SendTxData+0x2d4>)
 800d71e:	2201      	movs	r2, #1
 800d720:	2100      	movs	r1, #0
 800d722:	2001      	movs	r0, #1
 800d724:	f010 ff1c 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
  }
  }

  if (EventType == TX_ON_TIMER)
 800d728:	4b1c      	ldr	r3, [pc, #112]	; (800d79c <SendTxData+0x2d8>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10f      	bne.n	800d750 <SendTxData+0x28c>
  {
    UTIL_TIMER_Stop(&TxTimer);
 800d730:	481b      	ldr	r0, [pc, #108]	; (800d7a0 <SendTxData+0x2dc>)
 800d732:	f010 fd0b 	bl	801e14c <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 800d736:	4b1b      	ldr	r3, [pc, #108]	; (800d7a4 <SendTxData+0x2e0>)
 800d738:	681a      	ldr	r2, [r3, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	4293      	cmp	r3, r2
 800d73e:	bf38      	it	cc
 800d740:	4613      	movcc	r3, r2
 800d742:	4619      	mov	r1, r3
 800d744:	4816      	ldr	r0, [pc, #88]	; (800d7a0 <SendTxData+0x2dc>)
 800d746:	f010 fd71 	bl	801e22c <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800d74a:	4815      	ldr	r0, [pc, #84]	; (800d7a0 <SendTxData+0x2dc>)
 800d74c:	f010 fc90 	bl	801e070 <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800d750:	bf00      	nop
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}
 800d758:	2000027f 	.word	0x2000027f
 800d75c:	0801ede4 	.word	0x0801ede4
 800d760:	20000090 	.word	0x20000090
 800d764:	20000276 	.word	0x20000276
 800d768:	20000274 	.word	0x20000274
 800d76c:	2000027a 	.word	0x2000027a
 800d770:	20000288 	.word	0x20000288
 800d774:	40590000 	.word	0x40590000
 800d778:	51eb851f 	.word	0x51eb851f
 800d77c:	20000290 	.word	0x20000290
 800d780:	2000027c 	.word	0x2000027c
 800d784:	2000027e 	.word	0x2000027e
 800d788:	20000760 	.word	0x20000760
 800d78c:	20000074 	.word	0x20000074
 800d790:	0801edf0 	.word	0x0801edf0
 800d794:	10624dd3 	.word	0x10624dd3
 800d798:	0801ee00 	.word	0x0801ee00
 800d79c:	20000608 	.word	0x20000608
 800d7a0:	2000060c 	.word	0x2000060c
 800d7a4:	2000008c 	.word	0x2000008c

0800d7a8 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b082      	sub	sp, #8
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	2002      	movs	r0, #2
 800d7b4:	f010 fba4 	bl	801df00 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800d7b8:	4803      	ldr	r0, [pc, #12]	; (800d7c8 <OnTxTimerEvent+0x20>)
 800d7ba:	f010 fc59 	bl	801e070 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800d7be:	bf00      	nop
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
 800d7c6:	bf00      	nop
 800d7c8:	2000060c 	.word	0x2000060c

0800d7cc <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b083      	sub	sp, #12
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bc80      	pop	{r7}
 800d7dc:	4770      	bx	lr

0800d7de <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800d7de:	b480      	push	{r7}
 800d7e0:	b083      	sub	sp, #12
 800d7e2:	af00      	add	r7, sp, #0
 800d7e4:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800d7e6:	bf00      	nop
 800d7e8:	370c      	adds	r7, #12
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bc80      	pop	{r7}
 800d7ee:	4770      	bx	lr

0800d7f0 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800d7f8:	bf00      	nop
 800d7fa:	370c      	adds	r7, #12
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bc80      	pop	{r7}
 800d800:	4770      	bx	lr
	...

0800d804 <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b086      	sub	sp, #24
 800d808:	af04      	add	r7, sp, #16
 800d80a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d041      	beq.n	800d896 <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d03d      	beq.n	800d896 <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800d81a:	4821      	ldr	r0, [pc, #132]	; (800d8a0 <OnTxData+0x9c>)
 800d81c:	f010 fc28 	bl	801e070 <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800d820:	4b20      	ldr	r3, [pc, #128]	; (800d8a4 <OnTxData+0xa0>)
 800d822:	2200      	movs	r2, #0
 800d824:	2100      	movs	r1, #0
 800d826:	2002      	movs	r0, #2
 800d828:	f010 fe9a 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	7c12      	ldrb	r2, [r2, #16]
 800d834:	4611      	mov	r1, r2
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800d83c:	4610      	mov	r0, r2
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800d844:	9203      	str	r2, [sp, #12]
 800d846:	9002      	str	r0, [sp, #8]
 800d848:	9101      	str	r1, [sp, #4]
 800d84a:	9300      	str	r3, [sp, #0]
 800d84c:	4b16      	ldr	r3, [pc, #88]	; (800d8a8 <OnTxData+0xa4>)
 800d84e:	2200      	movs	r2, #0
 800d850:	2100      	movs	r1, #0
 800d852:	2003      	movs	r0, #3
 800d854:	f010 fe84 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800d858:	4b14      	ldr	r3, [pc, #80]	; (800d8ac <OnTxData+0xa8>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	2100      	movs	r1, #0
 800d85e:	2003      	movs	r0, #3
 800d860:	f010 fe7e 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	7a1b      	ldrb	r3, [r3, #8]
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d10e      	bne.n	800d88a <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	7a5b      	ldrb	r3, [r3, #9]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d001      	beq.n	800d878 <OnTxData+0x74>
 800d874:	4b0e      	ldr	r3, [pc, #56]	; (800d8b0 <OnTxData+0xac>)
 800d876:	e000      	b.n	800d87a <OnTxData+0x76>
 800d878:	4b0e      	ldr	r3, [pc, #56]	; (800d8b4 <OnTxData+0xb0>)
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	4b0e      	ldr	r3, [pc, #56]	; (800d8b8 <OnTxData+0xb4>)
 800d87e:	2200      	movs	r2, #0
 800d880:	2100      	movs	r1, #0
 800d882:	2003      	movs	r0, #3
 800d884:	f010 fe6c 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800d888:	e005      	b.n	800d896 <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800d88a:	4b0c      	ldr	r3, [pc, #48]	; (800d8bc <OnTxData+0xb8>)
 800d88c:	2200      	movs	r2, #0
 800d88e:	2100      	movs	r1, #0
 800d890:	2003      	movs	r0, #3
 800d892:	f010 fe65 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 800d896:	bf00      	nop
 800d898:	3708      	adds	r7, #8
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20000730 	.word	0x20000730
 800d8a4:	0801ee20 	.word	0x0801ee20
 800d8a8:	0801ee54 	.word	0x0801ee54
 800d8ac:	0801ee88 	.word	0x0801ee88
 800d8b0:	0801ee98 	.word	0x0801ee98
 800d8b4:	0801ee9c 	.word	0x0801ee9c
 800d8b8:	0801eea4 	.word	0x0801eea4
 800d8bc:	0801eeb8 	.word	0x0801eeb8

0800d8c0 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b082      	sub	sp, #8
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d035      	beq.n	800d93a <OnJoinRequest+0x7a>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d11a      	bne.n	800d90e <OnJoinRequest+0x4e>
    {
      UTIL_TIMER_Stop(&JoinLedTimer);
 800d8d8:	481a      	ldr	r0, [pc, #104]	; (800d944 <OnJoinRequest+0x84>)
 800d8da:	f010 fc37 	bl	801e14c <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800d8de:	4b1a      	ldr	r3, [pc, #104]	; (800d948 <OnJoinRequest+0x88>)
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	2002      	movs	r0, #2
 800d8e6:	f010 fe3b 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	79db      	ldrb	r3, [r3, #7]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d106      	bne.n	800d900 <OnJoinRequest+0x40>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800d8f2:	4b16      	ldr	r3, [pc, #88]	; (800d94c <OnJoinRequest+0x8c>)
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	2002      	movs	r0, #2
 800d8fa:	f010 fe31 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800d8fe:	e01c      	b.n	800d93a <OnJoinRequest+0x7a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800d900:	4b13      	ldr	r3, [pc, #76]	; (800d950 <OnJoinRequest+0x90>)
 800d902:	2200      	movs	r2, #0
 800d904:	2100      	movs	r1, #0
 800d906:	2002      	movs	r0, #2
 800d908:	f010 fe2a 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 800d90c:	e015      	b.n	800d93a <OnJoinRequest+0x7a>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800d90e:	4b11      	ldr	r3, [pc, #68]	; (800d954 <OnJoinRequest+0x94>)
 800d910:	2200      	movs	r2, #0
 800d912:	2100      	movs	r1, #0
 800d914:	2002      	movs	r0, #2
 800d916:	f010 fe23 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	79db      	ldrb	r3, [r3, #7]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d10b      	bne.n	800d93a <OnJoinRequest+0x7a>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800d922:	4b0d      	ldr	r3, [pc, #52]	; (800d958 <OnJoinRequest+0x98>)
 800d924:	2200      	movs	r2, #0
 800d926:	2100      	movs	r1, #0
 800d928:	2002      	movs	r0, #2
 800d92a:	f010 fe19 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800d92e:	4b0b      	ldr	r3, [pc, #44]	; (800d95c <OnJoinRequest+0x9c>)
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	2101      	movs	r1, #1
 800d934:	4618      	mov	r0, r3
 800d936:	f002 f809 	bl	800f94c <LmHandlerJoin>
}
 800d93a:	bf00      	nop
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
 800d942:	bf00      	nop
 800d944:	20000760 	.word	0x20000760
 800d948:	0801eec8 	.word	0x0801eec8
 800d94c:	0801eee0 	.word	0x0801eee0
 800d950:	0801ef00 	.word	0x0801ef00
 800d954:	0801ef20 	.word	0x0801ef20
 800d958:	0801ef3c 	.word	0x0801ef3c
 800d95c:	20000024 	.word	0x20000024

0800d960 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800d960:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d962:	b093      	sub	sp, #76	; 0x4c
 800d964:	af0c      	add	r7, sp, #48	; 0x30
 800d966:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d056      	beq.n	800da1c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800d96e:	697b      	ldr	r3, [r7, #20]
 800d970:	785b      	ldrb	r3, [r3, #1]
 800d972:	2b02      	cmp	r3, #2
 800d974:	d008      	beq.n	800d988 <OnBeaconStatusChange+0x28>
 800d976:	2b03      	cmp	r3, #3
 800d978:	d049      	beq.n	800da0e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800d97a:	4b2a      	ldr	r3, [pc, #168]	; (800da24 <OnBeaconStatusChange+0xc4>)
 800d97c:	2200      	movs	r2, #0
 800d97e:	2100      	movs	r1, #0
 800d980:	2002      	movs	r0, #2
 800d982:	f010 fded 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800d986:	e049      	b.n	800da1c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	7c1b      	ldrb	r3, [r3, #16]
 800d98c:	4618      	mov	r0, r3
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800d994:	461c      	mov	r4, r3
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800d99c:	461d      	mov	r5, r3
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	68db      	ldr	r3, [r3, #12]
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	6852      	ldr	r2, [r2, #4]
 800d9a6:	6979      	ldr	r1, [r7, #20]
 800d9a8:	7d49      	ldrb	r1, [r1, #21]
 800d9aa:	460e      	mov	r6, r1
 800d9ac:	6979      	ldr	r1, [r7, #20]
 800d9ae:	7d89      	ldrb	r1, [r1, #22]
 800d9b0:	6139      	str	r1, [r7, #16]
 800d9b2:	6979      	ldr	r1, [r7, #20]
 800d9b4:	7dc9      	ldrb	r1, [r1, #23]
 800d9b6:	60f9      	str	r1, [r7, #12]
 800d9b8:	6979      	ldr	r1, [r7, #20]
 800d9ba:	7e09      	ldrb	r1, [r1, #24]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	6979      	ldr	r1, [r7, #20]
 800d9c0:	7e49      	ldrb	r1, [r1, #25]
 800d9c2:	6079      	str	r1, [r7, #4]
 800d9c4:	6979      	ldr	r1, [r7, #20]
 800d9c6:	7e89      	ldrb	r1, [r1, #26]
 800d9c8:	6039      	str	r1, [r7, #0]
 800d9ca:	6979      	ldr	r1, [r7, #20]
 800d9cc:	7ec9      	ldrb	r1, [r1, #27]
 800d9ce:	910b      	str	r1, [sp, #44]	; 0x2c
 800d9d0:	f8d7 c000 	ldr.w	ip, [r7]
 800d9d4:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800d9d8:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800d9dc:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 800d9e0:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800d9e4:	f8cd c020 	str.w	ip, [sp, #32]
 800d9e8:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800d9ec:	f8cd c01c 	str.w	ip, [sp, #28]
 800d9f0:	6939      	ldr	r1, [r7, #16]
 800d9f2:	9106      	str	r1, [sp, #24]
 800d9f4:	9605      	str	r6, [sp, #20]
 800d9f6:	9204      	str	r2, [sp, #16]
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	9502      	str	r5, [sp, #8]
 800d9fc:	9401      	str	r4, [sp, #4]
 800d9fe:	9000      	str	r0, [sp, #0]
 800da00:	4b09      	ldr	r3, [pc, #36]	; (800da28 <OnBeaconStatusChange+0xc8>)
 800da02:	2200      	movs	r2, #0
 800da04:	2100      	movs	r1, #0
 800da06:	2002      	movs	r0, #2
 800da08:	f010 fdaa 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800da0c:	e006      	b.n	800da1c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800da0e:	4b07      	ldr	r3, [pc, #28]	; (800da2c <OnBeaconStatusChange+0xcc>)
 800da10:	2200      	movs	r2, #0
 800da12:	2100      	movs	r1, #0
 800da14:	2002      	movs	r0, #2
 800da16:	f010 fda3 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800da1a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800da1c:	bf00      	nop
 800da1e:	371c      	adds	r7, #28
 800da20:	46bd      	mov	sp, r7
 800da22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da24:	0801ef60 	.word	0x0801ef60
 800da28:	0801ef78 	.word	0x0801ef78
 800da2c:	0801efec 	.word	0x0801efec

0800da30 <OnSysTimeUpdate>:

static void OnSysTimeUpdate(void)
{
 800da30:	b480      	push	{r7}
 800da32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 800da34:	bf00      	nop
 800da36:	46bd      	mov	sp, r7
 800da38:	bc80      	pop	{r7}
 800da3a:	4770      	bx	lr

0800da3c <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af02      	add	r7, sp, #8
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800da46:	79fb      	ldrb	r3, [r7, #7]
 800da48:	4a06      	ldr	r2, [pc, #24]	; (800da64 <OnClassChange+0x28>)
 800da4a:	5cd3      	ldrb	r3, [r2, r3]
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	4b06      	ldr	r3, [pc, #24]	; (800da68 <OnClassChange+0x2c>)
 800da50:	2200      	movs	r2, #0
 800da52:	2100      	movs	r1, #0
 800da54:	2002      	movs	r0, #2
 800da56:	f010 fd83 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800da5a:	bf00      	nop
 800da5c:	3708      	adds	r7, #8
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	0801f028 	.word	0x0801f028
 800da68:	0801f00c 	.word	0x0801f00c

0800da6c <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800da70:	2100      	movs	r1, #0
 800da72:	2001      	movs	r0, #1
 800da74:	f010 fa44 	bl	801df00 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800da78:	bf00      	nop
 800da7a:	bd80      	pop	{r7, pc}

0800da7c <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b082      	sub	sp, #8
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800da84:	4a0d      	ldr	r2, [pc, #52]	; (800dabc <OnTxPeriodicityChanged+0x40>)
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800da8a:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <OnTxPeriodicityChanged+0x40>)
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d103      	bne.n	800da9a <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800da92:	4b0a      	ldr	r3, [pc, #40]	; (800dabc <OnTxPeriodicityChanged+0x40>)
 800da94:	f242 7210 	movw	r2, #10000	; 0x2710
 800da98:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800da9a:	4809      	ldr	r0, [pc, #36]	; (800dac0 <OnTxPeriodicityChanged+0x44>)
 800da9c:	f010 fb56 	bl	801e14c <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800daa0:	4b06      	ldr	r3, [pc, #24]	; (800dabc <OnTxPeriodicityChanged+0x40>)
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	4619      	mov	r1, r3
 800daa6:	4806      	ldr	r0, [pc, #24]	; (800dac0 <OnTxPeriodicityChanged+0x44>)
 800daa8:	f010 fbc0 	bl	801e22c <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800daac:	4804      	ldr	r0, [pc, #16]	; (800dac0 <OnTxPeriodicityChanged+0x44>)
 800daae:	f010 fadf 	bl	801e070 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800dab2:	bf00      	nop
 800dab4:	3708      	adds	r7, #8
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}
 800daba:	bf00      	nop
 800dabc:	2000008c 	.word	0x2000008c
 800dac0:	2000060c 	.word	0x2000060c

0800dac4 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b083      	sub	sp, #12
 800dac8:	af00      	add	r7, sp, #0
 800daca:	4603      	mov	r3, r0
 800dacc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800dace:	4a04      	ldr	r2, [pc, #16]	; (800dae0 <OnTxFrameCtrlChanged+0x1c>)
 800dad0:	79fb      	ldrb	r3, [r7, #7]
 800dad2:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800dad4:	bf00      	nop
 800dad6:	370c      	adds	r7, #12
 800dad8:	46bd      	mov	sp, r7
 800dada:	bc80      	pop	{r7}
 800dadc:	4770      	bx	lr
 800dade:	bf00      	nop
 800dae0:	20000074 	.word	0x20000074

0800dae4 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b083      	sub	sp, #12
 800dae8:	af00      	add	r7, sp, #0
 800daea:	4603      	mov	r3, r0
 800daec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800daee:	4a04      	ldr	r2, [pc, #16]	; (800db00 <OnPingSlotPeriodicityChanged+0x1c>)
 800daf0:	79fb      	ldrb	r3, [r7, #7]
 800daf2:	7413      	strb	r3, [r2, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800daf4:	bf00      	nop
 800daf6:	370c      	adds	r7, #12
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bc80      	pop	{r7}
 800dafc:	4770      	bx	lr
 800dafe:	bf00      	nop
 800db00:	20000074 	.word	0x20000074

0800db04 <OnSystemReset>:

static void OnSystemReset(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800db08:	f002 fd11 	bl	801052e <LmHandlerHalt>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d106      	bne.n	800db20 <OnSystemReset+0x1c>
 800db12:	f001 ffbf 	bl	800fa94 <LmHandlerJoinStatus>
 800db16:	4603      	mov	r3, r0
 800db18:	2b01      	cmp	r3, #1
 800db1a:	d101      	bne.n	800db20 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800db1c:	f7ff fb1e 	bl	800d15c <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800db20:	bf00      	nop
 800db22:	bd80      	pop	{r7, pc}

0800db24 <StopJoin>:

static void StopJoin(void)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800db28:	4817      	ldr	r0, [pc, #92]	; (800db88 <StopJoin+0x64>)
 800db2a:	f010 fb0f 	bl	801e14c <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800db2e:	f002 fcf1 	bl	8010514 <LmHandlerStop>
 800db32:	4603      	mov	r3, r0
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800db38:	4b14      	ldr	r3, [pc, #80]	; (800db8c <StopJoin+0x68>)
 800db3a:	2200      	movs	r2, #0
 800db3c:	2100      	movs	r1, #0
 800db3e:	2002      	movs	r0, #2
 800db40:	f010 fd0e 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
 800db44:	e01a      	b.n	800db7c <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800db46:	4b12      	ldr	r3, [pc, #72]	; (800db90 <StopJoin+0x6c>)
 800db48:	2200      	movs	r2, #0
 800db4a:	2100      	movs	r1, #0
 800db4c:	2002      	movs	r0, #2
 800db4e:	f010 fd07 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800db52:	4b10      	ldr	r3, [pc, #64]	; (800db94 <StopJoin+0x70>)
 800db54:	2201      	movs	r2, #1
 800db56:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800db58:	4b0f      	ldr	r3, [pc, #60]	; (800db98 <StopJoin+0x74>)
 800db5a:	2200      	movs	r2, #0
 800db5c:	2100      	movs	r1, #0
 800db5e:	2002      	movs	r0, #2
 800db60:	f010 fcfe 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800db64:	480d      	ldr	r0, [pc, #52]	; (800db9c <StopJoin+0x78>)
 800db66:	f001 fe23 	bl	800f7b0 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800db6a:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <StopJoin+0x70>)
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	2101      	movs	r1, #1
 800db70:	4618      	mov	r0, r3
 800db72:	f001 feeb 	bl	800f94c <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800db76:	4804      	ldr	r0, [pc, #16]	; (800db88 <StopJoin+0x64>)
 800db78:	f010 fa7a 	bl	801e070 <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800db7c:	4808      	ldr	r0, [pc, #32]	; (800dba0 <StopJoin+0x7c>)
 800db7e:	f010 fa77 	bl	801e070 <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800db82:	bf00      	nop
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	2000060c 	.word	0x2000060c
 800db8c:	0801f02c 	.word	0x0801f02c
 800db90:	0801f04c 	.word	0x0801f04c
 800db94:	20000024 	.word	0x20000024
 800db98:	0801f060 	.word	0x0801f060
 800db9c:	20000074 	.word	0x20000074
 800dba0:	20000624 	.word	0x20000624

0800dba4 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800dbac:	4b05      	ldr	r3, [pc, #20]	; (800dbc4 <OnStopJoinTimerEvent+0x20>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	2b02      	cmp	r3, #2
 800dbb2:	d103      	bne.n	800dbbc <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800dbb4:	2100      	movs	r1, #0
 800dbb6:	2008      	movs	r0, #8
 800dbb8:	f010 f9a2 	bl	801df00 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800dbbc:	bf00      	nop
 800dbbe:	3708      	adds	r7, #8
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20000024 	.word	0x20000024

0800dbc8 <StoreContext>:

static void StoreContext(void)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800dbce:	23ff      	movs	r3, #255	; 0xff
 800dbd0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800dbd2:	f002 fce1 	bl	8010598 <LmHandlerNvmDataStore>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800dbda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbde:	f113 0f08 	cmn.w	r3, #8
 800dbe2:	d106      	bne.n	800dbf2 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800dbe4:	4b0a      	ldr	r3, [pc, #40]	; (800dc10 <StoreContext+0x48>)
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2100      	movs	r1, #0
 800dbea:	2002      	movs	r0, #2
 800dbec:	f010 fcb8 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800dbf0:	e00a      	b.n	800dc08 <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800dbf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbfa:	d105      	bne.n	800dc08 <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800dbfc:	4b05      	ldr	r3, [pc, #20]	; (800dc14 <StoreContext+0x4c>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2100      	movs	r1, #0
 800dc02:	2002      	movs	r0, #2
 800dc04:	f010 fcac 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	0801f080 	.word	0x0801f080
 800dc14:	0801f098 	.word	0x0801f098

0800dc18 <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	4603      	mov	r3, r0
 800dc20:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800dc22:	79fb      	ldrb	r3, [r7, #7]
 800dc24:	2b01      	cmp	r3, #1
 800dc26:	d106      	bne.n	800dc36 <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800dc28:	4b08      	ldr	r3, [pc, #32]	; (800dc4c <OnNvmDataChange+0x34>)
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	2100      	movs	r1, #0
 800dc2e:	2002      	movs	r0, #2
 800dc30:	f010 fc96 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800dc34:	e005      	b.n	800dc42 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <OnNvmDataChange+0x38>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	2100      	movs	r1, #0
 800dc3c:	2002      	movs	r0, #2
 800dc3e:	f010 fc8f 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 800dc42:	bf00      	nop
 800dc44:	3708      	adds	r7, #8
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}
 800dc4a:	bf00      	nop
 800dc4c:	0801f0b0 	.word	0x0801f0b0
 800dc50:	0801f0c4 	.word	0x0801f0c4

0800dc54 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800dc5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800dc62:	4807      	ldr	r0, [pc, #28]	; (800dc80 <OnStoreContextRequest+0x2c>)
 800dc64:	f7f3 fcea 	bl	800163c <FLASH_IF_Erase>
 800dc68:	4603      	mov	r3, r0
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d104      	bne.n	800dc78 <OnStoreContextRequest+0x24>
  {
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 800dc6e:	683a      	ldr	r2, [r7, #0]
 800dc70:	6879      	ldr	r1, [r7, #4]
 800dc72:	4803      	ldr	r0, [pc, #12]	; (800dc80 <OnStoreContextRequest+0x2c>)
 800dc74:	f7f3 fc92 	bl	800159c <FLASH_IF_Write>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0803f000 	.word	0x0803f000

0800dc84 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
 800dc8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800dc8e:	683a      	ldr	r2, [r7, #0]
 800dc90:	4903      	ldr	r1, [pc, #12]	; (800dca0 <OnRestoreContextRequest+0x1c>)
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7f3 fcaa 	bl	80015ec <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800dc98:	bf00      	nop
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	0803f000 	.word	0x0803f000

0800dca4 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 800dca8:	4b15      	ldr	r3, [pc, #84]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcaa:	2200      	movs	r2, #0
 800dcac:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800dcae:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800dcb4:	4b12      	ldr	r3, [pc, #72]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800dcba:	4b11      	ldr	r3, [pc, #68]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800dcc0:	4b0f      	ldr	r3, [pc, #60]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f043 0320 	orr.w	r3, r3, #32
 800dcc8:	4a0d      	ldr	r2, [pc, #52]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcca:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800dccc:	4b0c      	ldr	r3, [pc, #48]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcce:	685b      	ldr	r3, [r3, #4]
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d10c      	bne.n	800dcee <LoraInfo_Init+0x4a>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800dcd4:	4b0b      	ldr	r3, [pc, #44]	; (800dd04 <LoraInfo_Init+0x60>)
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	2100      	movs	r1, #0
 800dcda:	2000      	movs	r0, #0
 800dcdc:	f010 fc40 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800dce0:	bf00      	nop
 800dce2:	f010 fc2b 	bl	801e53c <UTIL_ADV_TRACE_IsBufferEmpty>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d1fa      	bne.n	800dce2 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800dcec:	e7fe      	b.n	800dcec <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800dcee:	4b04      	ldr	r3, [pc, #16]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	60da      	str	r2, [r3, #12]
#else /* LORAWAN_KMS == 1 */
  loraInfo.Kms = 1;
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
 800dcf4:	4b02      	ldr	r3, [pc, #8]	; (800dd00 <LoraInfo_Init+0x5c>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800dcfa:	bf00      	nop
 800dcfc:	bd80      	pop	{r7, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000778 	.word	0x20000778
 800dd04:	0801f0d8 	.word	0x0801f0d8

0800dd08 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800dd0c:	4b02      	ldr	r3, [pc, #8]	; (800dd18 <LoraInfo_GetPtr+0x10>)
}
 800dd0e:	4618      	mov	r0, r3
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bc80      	pop	{r7}
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	20000778 	.word	0x20000778

0800dd1c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800dd20:	f7f5 fd17 	bl	8003752 <BSP_RADIO_Init>
 800dd24:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd26:	4618      	mov	r0, r3
 800dd28:	bd80      	pop	{r7, pc}

0800dd2a <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b082      	sub	sp, #8
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	4603      	mov	r3, r0
 800dd32:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800dd34:	79fb      	ldrb	r3, [r7, #7]
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7f5 fd3c 	bl	80037b4 <BSP_RADIO_ConfigRFSwitch>
 800dd3c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3708      	adds	r7, #8
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}

0800dd46 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800dd46:	b580      	push	{r7, lr}
 800dd48:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800dd4a:	f7f5 fd81 	bl	8003850 <BSP_RADIO_GetTxConfig>
 800dd4e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	bd80      	pop	{r7, pc}

0800dd54 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800dd58:	f7f5 fd81 	bl	800385e <BSP_RADIO_IsTCXO>
 800dd5c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800dd66:	f7f5 fd81 	bl	800386c <BSP_RADIO_IsDCDC>
 800dd6a:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	bd80      	pop	{r7, pc}

0800dd70 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f7f5 fd7c 	bl	800387a <BSP_RADIO_GetRFOMaxPowerConfig>
 800dd82:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	33f1      	adds	r3, #241	; 0xf1
 800dd98:	2210      	movs	r2, #16
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f00c f875 	bl	8019e8c <memset1>
    ctx->M_n = 0;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2200      	movs	r2, #0
 800dda6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	22f0      	movs	r2, #240	; 0xf0
 800ddae:	2100      	movs	r1, #0
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f00c f86b 	bl	8019e8c <memset1>
}
 800ddb6:	bf00      	nop
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b082      	sub	sp, #8
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	461a      	mov	r2, r3
 800ddcc:	2110      	movs	r1, #16
 800ddce:	6838      	ldr	r0, [r7, #0]
 800ddd0:	f000 fe5c 	bl	800ea8c <lorawan_aes_set_key>
}
 800ddd4:	bf00      	nop
 800ddd6:	3708      	adds	r7, #8
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b08c      	sub	sp, #48	; 0x30
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	f000 80a1 	beq.w	800df36 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800ddfa:	f1c3 0310 	rsb	r3, r3, #16
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	4293      	cmp	r3, r2
 800de02:	bf28      	it	cs
 800de04:	4613      	movcs	r3, r2
 800de06:	627b      	str	r3, [r7, #36]	; 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	f203 1201 	addw	r2, r3, #257	; 0x101
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de14:	4413      	add	r3, r2
 800de16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de18:	b292      	uxth	r2, r2
 800de1a:	68b9      	ldr	r1, [r7, #8]
 800de1c:	4618      	mov	r0, r3
 800de1e:	f00b fffa 	bl	8019e16 <memcpy1>
        ctx->M_n += mlen;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
 800de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de2a:	441a      	add	r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800de38:	2b0f      	cmp	r3, #15
 800de3a:	f240 808d 	bls.w	800df58 <AES_CMAC_Update+0x17c>
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de42:	429a      	cmp	r2, r3
 800de44:	f000 8088 	beq.w	800df58 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800de48:	2300      	movs	r3, #0
 800de4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de4c:	e015      	b.n	800de7a <AES_CMAC_Update+0x9e>
 800de4e:	68fa      	ldr	r2, [r7, #12]
 800de50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de52:	4413      	add	r3, r2
 800de54:	33f1      	adds	r3, #241	; 0xf1
 800de56:	781a      	ldrb	r2, [r3, #0]
 800de58:	68f9      	ldr	r1, [r7, #12]
 800de5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de5c:	440b      	add	r3, r1
 800de5e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	4053      	eors	r3, r2
 800de66:	b2d9      	uxtb	r1, r3
 800de68:	68fa      	ldr	r2, [r7, #12]
 800de6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6c:	4413      	add	r3, r2
 800de6e:	33f1      	adds	r3, #241	; 0xf1
 800de70:	460a      	mov	r2, r1
 800de72:	701a      	strb	r2, [r3, #0]
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	3301      	adds	r3, #1
 800de78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	2b0f      	cmp	r3, #15
 800de7e:	dde6      	ble.n	800de4e <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800de86:	f107 0314 	add.w	r3, r7, #20
 800de8a:	2210      	movs	r2, #16
 800de8c:	4618      	mov	r0, r3
 800de8e:	f00b ffc2 	bl	8019e16 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	f107 0114 	add.w	r1, r7, #20
 800de98:	f107 0314 	add.w	r3, r7, #20
 800de9c:	4618      	mov	r0, r3
 800de9e:	f000 fed3 	bl	800ec48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	33f1      	adds	r3, #241	; 0xf1
 800dea6:	f107 0114 	add.w	r1, r7, #20
 800deaa:	2210      	movs	r2, #16
 800deac:	4618      	mov	r0, r3
 800deae:	f00b ffb2 	bl	8019e16 <memcpy1>

        data += mlen;
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb6:	4413      	add	r3, r2
 800deb8:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800deba:	687a      	ldr	r2, [r7, #4]
 800debc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800debe:	1ad3      	subs	r3, r2, r3
 800dec0:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800dec2:	e038      	b.n	800df36 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800dec4:	2300      	movs	r3, #0
 800dec6:	62bb      	str	r3, [r7, #40]	; 0x28
 800dec8:	e013      	b.n	800def2 <AES_CMAC_Update+0x116>
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dece:	4413      	add	r3, r2
 800ded0:	33f1      	adds	r3, #241	; 0xf1
 800ded2:	781a      	ldrb	r2, [r3, #0]
 800ded4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded6:	68b9      	ldr	r1, [r7, #8]
 800ded8:	440b      	add	r3, r1
 800deda:	781b      	ldrb	r3, [r3, #0]
 800dedc:	4053      	eors	r3, r2
 800dede:	b2d9      	uxtb	r1, r3
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee4:	4413      	add	r3, r2
 800dee6:	33f1      	adds	r3, #241	; 0xf1
 800dee8:	460a      	mov	r2, r1
 800deea:	701a      	strb	r2, [r3, #0]
 800deec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800deee:	3301      	adds	r3, #1
 800def0:	62bb      	str	r3, [r7, #40]	; 0x28
 800def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def4:	2b0f      	cmp	r3, #15
 800def6:	dde8      	ble.n	800deca <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800defe:	f107 0314 	add.w	r3, r7, #20
 800df02:	2210      	movs	r2, #16
 800df04:	4618      	mov	r0, r3
 800df06:	f00b ff86 	bl	8019e16 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	f107 0114 	add.w	r1, r7, #20
 800df10:	f107 0314 	add.w	r3, r7, #20
 800df14:	4618      	mov	r0, r3
 800df16:	f000 fe97 	bl	800ec48 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	33f1      	adds	r3, #241	; 0xf1
 800df1e:	f107 0114 	add.w	r1, r7, #20
 800df22:	2210      	movs	r2, #16
 800df24:	4618      	mov	r0, r3
 800df26:	f00b ff76 	bl	8019e16 <memcpy1>

        data += 16;
 800df2a:	68bb      	ldr	r3, [r7, #8]
 800df2c:	3310      	adds	r3, #16
 800df2e:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	3b10      	subs	r3, #16
 800df34:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b10      	cmp	r3, #16
 800df3a:	d8c3      	bhi.n	800dec4 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f203 1301 	addw	r3, r3, #257	; 0x101
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	b292      	uxth	r2, r2
 800df46:	68b9      	ldr	r1, [r7, #8]
 800df48:	4618      	mov	r0, r3
 800df4a:	f00b ff64 	bl	8019e16 <memcpy1>
    ctx->M_n = len;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800df56:	e000      	b.n	800df5a <AES_CMAC_Update+0x17e>
            return;
 800df58:	bf00      	nop
}
 800df5a:	3730      	adds	r7, #48	; 0x30
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}

0800df60 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b092      	sub	sp, #72	; 0x48
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800df6a:	f107 031c 	add.w	r3, r7, #28
 800df6e:	2210      	movs	r2, #16
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f00b ff8a 	bl	8019e8c <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800df78:	683a      	ldr	r2, [r7, #0]
 800df7a:	f107 011c 	add.w	r1, r7, #28
 800df7e:	f107 031c 	add.w	r3, r7, #28
 800df82:	4618      	mov	r0, r3
 800df84:	f000 fe60 	bl	800ec48 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800df88:	7f3b      	ldrb	r3, [r7, #28]
 800df8a:	b25b      	sxtb	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	da30      	bge.n	800dff2 <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800df90:	2300      	movs	r3, #0
 800df92:	647b      	str	r3, [r7, #68]	; 0x44
 800df94:	e01b      	b.n	800dfce <AES_CMAC_Final+0x6e>
 800df96:	f107 021c 	add.w	r2, r7, #28
 800df9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df9c:	4413      	add	r3, r2
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	005b      	lsls	r3, r3, #1
 800dfa2:	b25a      	sxtb	r2, r3
 800dfa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa6:	3301      	adds	r3, #1
 800dfa8:	3348      	adds	r3, #72	; 0x48
 800dfaa:	443b      	add	r3, r7
 800dfac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800dfb0:	09db      	lsrs	r3, r3, #7
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	b25b      	sxtb	r3, r3
 800dfb6:	4313      	orrs	r3, r2
 800dfb8:	b25b      	sxtb	r3, r3
 800dfba:	b2d9      	uxtb	r1, r3
 800dfbc:	f107 021c 	add.w	r2, r7, #28
 800dfc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfc2:	4413      	add	r3, r2
 800dfc4:	460a      	mov	r2, r1
 800dfc6:	701a      	strb	r2, [r3, #0]
 800dfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfca:	3301      	adds	r3, #1
 800dfcc:	647b      	str	r3, [r7, #68]	; 0x44
 800dfce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfd0:	2b0e      	cmp	r3, #14
 800dfd2:	dde0      	ble.n	800df96 <AES_CMAC_Final+0x36>
 800dfd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        K[15] ^= 0x87;
 800dfe0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dfe4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800dfe8:	43db      	mvns	r3, r3
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800dff0:	e027      	b.n	800e042 <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800dff2:	2300      	movs	r3, #0
 800dff4:	643b      	str	r3, [r7, #64]	; 0x40
 800dff6:	e01b      	b.n	800e030 <AES_CMAC_Final+0xd0>
 800dff8:	f107 021c 	add.w	r2, r7, #28
 800dffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dffe:	4413      	add	r3, r2
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	005b      	lsls	r3, r3, #1
 800e004:	b25a      	sxtb	r2, r3
 800e006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e008:	3301      	adds	r3, #1
 800e00a:	3348      	adds	r3, #72	; 0x48
 800e00c:	443b      	add	r3, r7
 800e00e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e012:	09db      	lsrs	r3, r3, #7
 800e014:	b2db      	uxtb	r3, r3
 800e016:	b25b      	sxtb	r3, r3
 800e018:	4313      	orrs	r3, r2
 800e01a:	b25b      	sxtb	r3, r3
 800e01c:	b2d9      	uxtb	r1, r3
 800e01e:	f107 021c 	add.w	r2, r7, #28
 800e022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e024:	4413      	add	r3, r2
 800e026:	460a      	mov	r2, r1
 800e028:	701a      	strb	r2, [r3, #0]
 800e02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e02c:	3301      	adds	r3, #1
 800e02e:	643b      	str	r3, [r7, #64]	; 0x40
 800e030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e032:	2b0e      	cmp	r3, #14
 800e034:	dde0      	ble.n	800dff8 <AES_CMAC_Final+0x98>
 800e036:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e03a:	005b      	lsls	r3, r3, #1
 800e03c:	b2db      	uxtb	r3, r3
 800e03e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    if( ctx->M_n == 16 )
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e048:	2b10      	cmp	r3, #16
 800e04a:	d11d      	bne.n	800e088 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800e04c:	2300      	movs	r3, #0
 800e04e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e050:	e016      	b.n	800e080 <AES_CMAC_Final+0x120>
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e056:	4413      	add	r3, r2
 800e058:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e05c:	781a      	ldrb	r2, [r3, #0]
 800e05e:	f107 011c 	add.w	r1, r7, #28
 800e062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e064:	440b      	add	r3, r1
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	4053      	eors	r3, r2
 800e06a:	b2d9      	uxtb	r1, r3
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e070:	4413      	add	r3, r2
 800e072:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e076:	460a      	mov	r2, r1
 800e078:	701a      	strb	r2, [r3, #0]
 800e07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07c:	3301      	adds	r3, #1
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e082:	2b0f      	cmp	r3, #15
 800e084:	dde5      	ble.n	800e052 <AES_CMAC_Final+0xf2>
 800e086:	e096      	b.n	800e1b6 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800e088:	7f3b      	ldrb	r3, [r7, #28]
 800e08a:	b25b      	sxtb	r3, r3
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	da30      	bge.n	800e0f2 <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800e090:	2300      	movs	r3, #0
 800e092:	63bb      	str	r3, [r7, #56]	; 0x38
 800e094:	e01b      	b.n	800e0ce <AES_CMAC_Final+0x16e>
 800e096:	f107 021c 	add.w	r2, r7, #28
 800e09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09c:	4413      	add	r3, r2
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	005b      	lsls	r3, r3, #1
 800e0a2:	b25a      	sxtb	r2, r3
 800e0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	3348      	adds	r3, #72	; 0x48
 800e0aa:	443b      	add	r3, r7
 800e0ac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e0b0:	09db      	lsrs	r3, r3, #7
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	b25b      	sxtb	r3, r3
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	b25b      	sxtb	r3, r3
 800e0ba:	b2d9      	uxtb	r1, r3
 800e0bc:	f107 021c 	add.w	r2, r7, #28
 800e0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0c2:	4413      	add	r3, r2
 800e0c4:	460a      	mov	r2, r1
 800e0c6:	701a      	strb	r2, [r3, #0]
 800e0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0ca:	3301      	adds	r3, #1
 800e0cc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0d0:	2b0e      	cmp	r3, #14
 800e0d2:	dde0      	ble.n	800e096 <AES_CMAC_Final+0x136>
 800e0d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            K[15] ^= 0x87;
 800e0e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e0e4:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800e0e8:	43db      	mvns	r3, r3
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800e0f0:	e027      	b.n	800e142 <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e0f6:	e01b      	b.n	800e130 <AES_CMAC_Final+0x1d0>
 800e0f8:	f107 021c 	add.w	r2, r7, #28
 800e0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0fe:	4413      	add	r3, r2
 800e100:	781b      	ldrb	r3, [r3, #0]
 800e102:	005b      	lsls	r3, r3, #1
 800e104:	b25a      	sxtb	r2, r3
 800e106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e108:	3301      	adds	r3, #1
 800e10a:	3348      	adds	r3, #72	; 0x48
 800e10c:	443b      	add	r3, r7
 800e10e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800e112:	09db      	lsrs	r3, r3, #7
 800e114:	b2db      	uxtb	r3, r3
 800e116:	b25b      	sxtb	r3, r3
 800e118:	4313      	orrs	r3, r2
 800e11a:	b25b      	sxtb	r3, r3
 800e11c:	b2d9      	uxtb	r1, r3
 800e11e:	f107 021c 	add.w	r2, r7, #28
 800e122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e124:	4413      	add	r3, r2
 800e126:	460a      	mov	r2, r1
 800e128:	701a      	strb	r2, [r3, #0]
 800e12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e12c:	3301      	adds	r3, #1
 800e12e:	637b      	str	r3, [r7, #52]	; 0x34
 800e130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e132:	2b0e      	cmp	r3, #14
 800e134:	dde0      	ble.n	800e0f8 <AES_CMAC_Final+0x198>
 800e136:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e13a:	005b      	lsls	r3, r3, #1
 800e13c:	b2db      	uxtb	r3, r3
 800e13e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e148:	683a      	ldr	r2, [r7, #0]
 800e14a:	4413      	add	r3, r2
 800e14c:	2280      	movs	r2, #128	; 0x80
 800e14e:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e152:	e007      	b.n	800e164 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e15a:	683a      	ldr	r2, [r7, #0]
 800e15c:	4413      	add	r3, r2
 800e15e:	2200      	movs	r2, #0
 800e160:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e16a:	1c5a      	adds	r2, r3, #1
 800e16c:	683b      	ldr	r3, [r7, #0]
 800e16e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800e178:	2b0f      	cmp	r3, #15
 800e17a:	d9eb      	bls.n	800e154 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800e17c:	2300      	movs	r3, #0
 800e17e:	633b      	str	r3, [r7, #48]	; 0x30
 800e180:	e016      	b.n	800e1b0 <AES_CMAC_Final+0x250>
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e186:	4413      	add	r3, r2
 800e188:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e18c:	781a      	ldrb	r2, [r3, #0]
 800e18e:	f107 011c 	add.w	r1, r7, #28
 800e192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e194:	440b      	add	r3, r1
 800e196:	781b      	ldrb	r3, [r3, #0]
 800e198:	4053      	eors	r3, r2
 800e19a:	b2d9      	uxtb	r1, r3
 800e19c:	683a      	ldr	r2, [r7, #0]
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	4413      	add	r3, r2
 800e1a2:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1a6:	460a      	mov	r2, r1
 800e1a8:	701a      	strb	r2, [r3, #0]
 800e1aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ac:	3301      	adds	r3, #1
 800e1ae:	633b      	str	r3, [r7, #48]	; 0x30
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	2b0f      	cmp	r3, #15
 800e1b4:	dde5      	ble.n	800e182 <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1ba:	e015      	b.n	800e1e8 <AES_CMAC_Final+0x288>
 800e1bc:	683a      	ldr	r2, [r7, #0]
 800e1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c0:	4413      	add	r3, r2
 800e1c2:	33f1      	adds	r3, #241	; 0xf1
 800e1c4:	781a      	ldrb	r2, [r3, #0]
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ca:	440b      	add	r3, r1
 800e1cc:	f203 1301 	addw	r3, r3, #257	; 0x101
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	4053      	eors	r3, r2
 800e1d4:	b2d9      	uxtb	r1, r3
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1da:	4413      	add	r3, r2
 800e1dc:	33f1      	adds	r3, #241	; 0xf1
 800e1de:	460a      	mov	r2, r1
 800e1e0:	701a      	strb	r2, [r3, #0]
 800e1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ea:	2b0f      	cmp	r3, #15
 800e1ec:	dde6      	ble.n	800e1bc <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	f103 01f1 	add.w	r1, r3, #241	; 0xf1
 800e1f4:	f107 030c 	add.w	r3, r7, #12
 800e1f8:	2210      	movs	r2, #16
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f00b fe0b 	bl	8019e16 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800e200:	683a      	ldr	r2, [r7, #0]
 800e202:	f107 030c 	add.w	r3, r7, #12
 800e206:	6879      	ldr	r1, [r7, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	f000 fd1d 	bl	800ec48 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800e20e:	f107 031c 	add.w	r3, r7, #28
 800e212:	2210      	movs	r2, #16
 800e214:	2100      	movs	r1, #0
 800e216:	4618      	mov	r0, r3
 800e218:	f00b fe38 	bl	8019e8c <memset1>
}
 800e21c:	bf00      	nop
 800e21e:	3748      	adds	r7, #72	; 0x48
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781a      	ldrb	r2, [r3, #0]
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	3301      	adds	r3, #1
 800e23a:	683a      	ldr	r2, [r7, #0]
 800e23c:	7852      	ldrb	r2, [r2, #1]
 800e23e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	3302      	adds	r3, #2
 800e244:	683a      	ldr	r2, [r7, #0]
 800e246:	7892      	ldrb	r2, [r2, #2]
 800e248:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	3303      	adds	r3, #3
 800e24e:	683a      	ldr	r2, [r7, #0]
 800e250:	78d2      	ldrb	r2, [r2, #3]
 800e252:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	3304      	adds	r3, #4
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	7912      	ldrb	r2, [r2, #4]
 800e25c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3305      	adds	r3, #5
 800e262:	683a      	ldr	r2, [r7, #0]
 800e264:	7952      	ldrb	r2, [r2, #5]
 800e266:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	3306      	adds	r3, #6
 800e26c:	683a      	ldr	r2, [r7, #0]
 800e26e:	7992      	ldrb	r2, [r2, #6]
 800e270:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	3307      	adds	r3, #7
 800e276:	683a      	ldr	r2, [r7, #0]
 800e278:	79d2      	ldrb	r2, [r2, #7]
 800e27a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	3308      	adds	r3, #8
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	7a12      	ldrb	r2, [r2, #8]
 800e284:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3309      	adds	r3, #9
 800e28a:	683a      	ldr	r2, [r7, #0]
 800e28c:	7a52      	ldrb	r2, [r2, #9]
 800e28e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	330a      	adds	r3, #10
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	7a92      	ldrb	r2, [r2, #10]
 800e298:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	330b      	adds	r3, #11
 800e29e:	683a      	ldr	r2, [r7, #0]
 800e2a0:	7ad2      	ldrb	r2, [r2, #11]
 800e2a2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	330c      	adds	r3, #12
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	7b12      	ldrb	r2, [r2, #12]
 800e2ac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	330d      	adds	r3, #13
 800e2b2:	683a      	ldr	r2, [r7, #0]
 800e2b4:	7b52      	ldrb	r2, [r2, #13]
 800e2b6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	330e      	adds	r3, #14
 800e2bc:	683a      	ldr	r2, [r7, #0]
 800e2be:	7b92      	ldrb	r2, [r2, #14]
 800e2c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	330f      	adds	r3, #15
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	7bd2      	ldrb	r2, [r2, #15]
 800e2ca:	701a      	strb	r2, [r3, #0]
#endif
}
 800e2cc:	bf00      	nop
 800e2ce:	370c      	adds	r7, #12
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bc80      	pop	{r7}
 800e2d4:	4770      	bx	lr

0800e2d6 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800e2d6:	b480      	push	{r7}
 800e2d8:	b085      	sub	sp, #20
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	60f8      	str	r0, [r7, #12]
 800e2de:	60b9      	str	r1, [r7, #8]
 800e2e0:	4613      	mov	r3, r2
 800e2e2:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800e2e4:	e007      	b.n	800e2f6 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	1c53      	adds	r3, r2, #1
 800e2ea:	60bb      	str	r3, [r7, #8]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	1c59      	adds	r1, r3, #1
 800e2f0:	60f9      	str	r1, [r7, #12]
 800e2f2:	7812      	ldrb	r2, [r2, #0]
 800e2f4:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800e2f6:	79fb      	ldrb	r3, [r7, #7]
 800e2f8:	1e5a      	subs	r2, r3, #1
 800e2fa:	71fa      	strb	r2, [r7, #7]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d1f2      	bne.n	800e2e6 <copy_block_nn+0x10>
}
 800e300:	bf00      	nop
 800e302:	bf00      	nop
 800e304:	3714      	adds	r7, #20
 800e306:	46bd      	mov	sp, r7
 800e308:	bc80      	pop	{r7}
 800e30a:	4770      	bx	lr

0800e30c <xor_block>:

static void xor_block( void *d, const void *s )
{
 800e30c:	b480      	push	{r7}
 800e30e:	b083      	sub	sp, #12
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	781a      	ldrb	r2, [r3, #0]
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	4053      	eors	r3, r2
 800e320:	b2da      	uxtb	r2, r3
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3301      	adds	r3, #1
 800e32a:	7819      	ldrb	r1, [r3, #0]
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	3301      	adds	r3, #1
 800e330:	781a      	ldrb	r2, [r3, #0]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	3301      	adds	r3, #1
 800e336:	404a      	eors	r2, r1
 800e338:	b2d2      	uxtb	r2, r2
 800e33a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	3302      	adds	r3, #2
 800e340:	7819      	ldrb	r1, [r3, #0]
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	3302      	adds	r3, #2
 800e346:	781a      	ldrb	r2, [r3, #0]
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	3302      	adds	r3, #2
 800e34c:	404a      	eors	r2, r1
 800e34e:	b2d2      	uxtb	r2, r2
 800e350:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	3303      	adds	r3, #3
 800e356:	7819      	ldrb	r1, [r3, #0]
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	3303      	adds	r3, #3
 800e35c:	781a      	ldrb	r2, [r3, #0]
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3303      	adds	r3, #3
 800e362:	404a      	eors	r2, r1
 800e364:	b2d2      	uxtb	r2, r2
 800e366:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	3304      	adds	r3, #4
 800e36c:	7819      	ldrb	r1, [r3, #0]
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	3304      	adds	r3, #4
 800e372:	781a      	ldrb	r2, [r3, #0]
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	3304      	adds	r3, #4
 800e378:	404a      	eors	r2, r1
 800e37a:	b2d2      	uxtb	r2, r2
 800e37c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	3305      	adds	r3, #5
 800e382:	7819      	ldrb	r1, [r3, #0]
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	3305      	adds	r3, #5
 800e388:	781a      	ldrb	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	3305      	adds	r3, #5
 800e38e:	404a      	eors	r2, r1
 800e390:	b2d2      	uxtb	r2, r2
 800e392:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	3306      	adds	r3, #6
 800e398:	7819      	ldrb	r1, [r3, #0]
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	3306      	adds	r3, #6
 800e39e:	781a      	ldrb	r2, [r3, #0]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3306      	adds	r3, #6
 800e3a4:	404a      	eors	r2, r1
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3307      	adds	r3, #7
 800e3ae:	7819      	ldrb	r1, [r3, #0]
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	3307      	adds	r3, #7
 800e3b4:	781a      	ldrb	r2, [r3, #0]
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	3307      	adds	r3, #7
 800e3ba:	404a      	eors	r2, r1
 800e3bc:	b2d2      	uxtb	r2, r2
 800e3be:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3308      	adds	r3, #8
 800e3c4:	7819      	ldrb	r1, [r3, #0]
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	3308      	adds	r3, #8
 800e3ca:	781a      	ldrb	r2, [r3, #0]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	3308      	adds	r3, #8
 800e3d0:	404a      	eors	r2, r1
 800e3d2:	b2d2      	uxtb	r2, r2
 800e3d4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	3309      	adds	r3, #9
 800e3da:	7819      	ldrb	r1, [r3, #0]
 800e3dc:	683b      	ldr	r3, [r7, #0]
 800e3de:	3309      	adds	r3, #9
 800e3e0:	781a      	ldrb	r2, [r3, #0]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	3309      	adds	r3, #9
 800e3e6:	404a      	eors	r2, r1
 800e3e8:	b2d2      	uxtb	r2, r2
 800e3ea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	330a      	adds	r3, #10
 800e3f0:	7819      	ldrb	r1, [r3, #0]
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	330a      	adds	r3, #10
 800e3f6:	781a      	ldrb	r2, [r3, #0]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	330a      	adds	r3, #10
 800e3fc:	404a      	eors	r2, r1
 800e3fe:	b2d2      	uxtb	r2, r2
 800e400:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	330b      	adds	r3, #11
 800e406:	7819      	ldrb	r1, [r3, #0]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	330b      	adds	r3, #11
 800e40c:	781a      	ldrb	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	330b      	adds	r3, #11
 800e412:	404a      	eors	r2, r1
 800e414:	b2d2      	uxtb	r2, r2
 800e416:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	330c      	adds	r3, #12
 800e41c:	7819      	ldrb	r1, [r3, #0]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	330c      	adds	r3, #12
 800e422:	781a      	ldrb	r2, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	330c      	adds	r3, #12
 800e428:	404a      	eors	r2, r1
 800e42a:	b2d2      	uxtb	r2, r2
 800e42c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	330d      	adds	r3, #13
 800e432:	7819      	ldrb	r1, [r3, #0]
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	330d      	adds	r3, #13
 800e438:	781a      	ldrb	r2, [r3, #0]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	330d      	adds	r3, #13
 800e43e:	404a      	eors	r2, r1
 800e440:	b2d2      	uxtb	r2, r2
 800e442:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	330e      	adds	r3, #14
 800e448:	7819      	ldrb	r1, [r3, #0]
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	330e      	adds	r3, #14
 800e44e:	781a      	ldrb	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	330e      	adds	r3, #14
 800e454:	404a      	eors	r2, r1
 800e456:	b2d2      	uxtb	r2, r2
 800e458:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	330f      	adds	r3, #15
 800e45e:	7819      	ldrb	r1, [r3, #0]
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	330f      	adds	r3, #15
 800e464:	781a      	ldrb	r2, [r3, #0]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	330f      	adds	r3, #15
 800e46a:	404a      	eors	r2, r1
 800e46c:	b2d2      	uxtb	r2, r2
 800e46e:	701a      	strb	r2, [r3, #0]
#endif
}
 800e470:	bf00      	nop
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	bc80      	pop	{r7}
 800e478:	4770      	bx	lr

0800e47a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800e47a:	b480      	push	{r7}
 800e47c:	b085      	sub	sp, #20
 800e47e:	af00      	add	r7, sp, #0
 800e480:	60f8      	str	r0, [r7, #12]
 800e482:	60b9      	str	r1, [r7, #8]
 800e484:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	781a      	ldrb	r2, [r3, #0]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	4053      	eors	r3, r2
 800e490:	b2da      	uxtb	r2, r3
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	3301      	adds	r3, #1
 800e49a:	7819      	ldrb	r1, [r3, #0]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	3301      	adds	r3, #1
 800e4a0:	781a      	ldrb	r2, [r3, #0]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	404a      	eors	r2, r1
 800e4a8:	b2d2      	uxtb	r2, r2
 800e4aa:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	3302      	adds	r3, #2
 800e4b0:	7819      	ldrb	r1, [r3, #0]
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	3302      	adds	r3, #2
 800e4b6:	781a      	ldrb	r2, [r3, #0]
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	3302      	adds	r3, #2
 800e4bc:	404a      	eors	r2, r1
 800e4be:	b2d2      	uxtb	r2, r2
 800e4c0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	3303      	adds	r3, #3
 800e4c6:	7819      	ldrb	r1, [r3, #0]
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3303      	adds	r3, #3
 800e4cc:	781a      	ldrb	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3303      	adds	r3, #3
 800e4d2:	404a      	eors	r2, r1
 800e4d4:	b2d2      	uxtb	r2, r2
 800e4d6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800e4d8:	68bb      	ldr	r3, [r7, #8]
 800e4da:	3304      	adds	r3, #4
 800e4dc:	7819      	ldrb	r1, [r3, #0]
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3304      	adds	r3, #4
 800e4e2:	781a      	ldrb	r2, [r3, #0]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	3304      	adds	r3, #4
 800e4e8:	404a      	eors	r2, r1
 800e4ea:	b2d2      	uxtb	r2, r2
 800e4ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	3305      	adds	r3, #5
 800e4f2:	7819      	ldrb	r1, [r3, #0]
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3305      	adds	r3, #5
 800e4f8:	781a      	ldrb	r2, [r3, #0]
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	3305      	adds	r3, #5
 800e4fe:	404a      	eors	r2, r1
 800e500:	b2d2      	uxtb	r2, r2
 800e502:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	3306      	adds	r3, #6
 800e508:	7819      	ldrb	r1, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	3306      	adds	r3, #6
 800e50e:	781a      	ldrb	r2, [r3, #0]
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	3306      	adds	r3, #6
 800e514:	404a      	eors	r2, r1
 800e516:	b2d2      	uxtb	r2, r2
 800e518:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800e51a:	68bb      	ldr	r3, [r7, #8]
 800e51c:	3307      	adds	r3, #7
 800e51e:	7819      	ldrb	r1, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	3307      	adds	r3, #7
 800e524:	781a      	ldrb	r2, [r3, #0]
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	3307      	adds	r3, #7
 800e52a:	404a      	eors	r2, r1
 800e52c:	b2d2      	uxtb	r2, r2
 800e52e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	3308      	adds	r3, #8
 800e534:	7819      	ldrb	r1, [r3, #0]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	3308      	adds	r3, #8
 800e53a:	781a      	ldrb	r2, [r3, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	3308      	adds	r3, #8
 800e540:	404a      	eors	r2, r1
 800e542:	b2d2      	uxtb	r2, r2
 800e544:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	3309      	adds	r3, #9
 800e54a:	7819      	ldrb	r1, [r3, #0]
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3309      	adds	r3, #9
 800e550:	781a      	ldrb	r2, [r3, #0]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	3309      	adds	r3, #9
 800e556:	404a      	eors	r2, r1
 800e558:	b2d2      	uxtb	r2, r2
 800e55a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	330a      	adds	r3, #10
 800e560:	7819      	ldrb	r1, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	330a      	adds	r3, #10
 800e566:	781a      	ldrb	r2, [r3, #0]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	330a      	adds	r3, #10
 800e56c:	404a      	eors	r2, r1
 800e56e:	b2d2      	uxtb	r2, r2
 800e570:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	330b      	adds	r3, #11
 800e576:	7819      	ldrb	r1, [r3, #0]
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	330b      	adds	r3, #11
 800e57c:	781a      	ldrb	r2, [r3, #0]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	330b      	adds	r3, #11
 800e582:	404a      	eors	r2, r1
 800e584:	b2d2      	uxtb	r2, r2
 800e586:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	330c      	adds	r3, #12
 800e58c:	7819      	ldrb	r1, [r3, #0]
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	330c      	adds	r3, #12
 800e592:	781a      	ldrb	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	330c      	adds	r3, #12
 800e598:	404a      	eors	r2, r1
 800e59a:	b2d2      	uxtb	r2, r2
 800e59c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	330d      	adds	r3, #13
 800e5a2:	7819      	ldrb	r1, [r3, #0]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	330d      	adds	r3, #13
 800e5a8:	781a      	ldrb	r2, [r3, #0]
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	330d      	adds	r3, #13
 800e5ae:	404a      	eors	r2, r1
 800e5b0:	b2d2      	uxtb	r2, r2
 800e5b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	330e      	adds	r3, #14
 800e5b8:	7819      	ldrb	r1, [r3, #0]
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	330e      	adds	r3, #14
 800e5be:	781a      	ldrb	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	330e      	adds	r3, #14
 800e5c4:	404a      	eors	r2, r1
 800e5c6:	b2d2      	uxtb	r2, r2
 800e5c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	330f      	adds	r3, #15
 800e5ce:	7819      	ldrb	r1, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	330f      	adds	r3, #15
 800e5d4:	781a      	ldrb	r2, [r3, #0]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	330f      	adds	r3, #15
 800e5da:	404a      	eors	r2, r1
 800e5dc:	b2d2      	uxtb	r2, r2
 800e5de:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800e5e0:	bf00      	nop
 800e5e2:	3714      	adds	r7, #20
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bc80      	pop	{r7}
 800e5e8:	4770      	bx	lr

0800e5ea <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b082      	sub	sp, #8
 800e5ee:	af00      	add	r7, sp, #0
 800e5f0:	6078      	str	r0, [r7, #4]
 800e5f2:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f7ff fe88 	bl	800e30c <xor_block>
}
 800e5fc:	bf00      	nop
 800e5fe:	3708      	adds	r7, #8
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	781b      	ldrb	r3, [r3, #0]
 800e610:	461a      	mov	r2, r3
 800e612:	4b48      	ldr	r3, [pc, #288]	; (800e734 <shift_sub_rows+0x130>)
 800e614:	5c9a      	ldrb	r2, [r3, r2]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	701a      	strb	r2, [r3, #0]
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	3304      	adds	r3, #4
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	4619      	mov	r1, r3
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	3304      	adds	r3, #4
 800e626:	4a43      	ldr	r2, [pc, #268]	; (800e734 <shift_sub_rows+0x130>)
 800e628:	5c52      	ldrb	r2, [r2, r1]
 800e62a:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	3308      	adds	r3, #8
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	4619      	mov	r1, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3308      	adds	r3, #8
 800e638:	4a3e      	ldr	r2, [pc, #248]	; (800e734 <shift_sub_rows+0x130>)
 800e63a:	5c52      	ldrb	r2, [r2, r1]
 800e63c:	701a      	strb	r2, [r3, #0]
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	330c      	adds	r3, #12
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	4619      	mov	r1, r3
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	330c      	adds	r3, #12
 800e64a:	4a3a      	ldr	r2, [pc, #232]	; (800e734 <shift_sub_rows+0x130>)
 800e64c:	5c52      	ldrb	r2, [r2, r1]
 800e64e:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	73fb      	strb	r3, [r7, #15]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	3305      	adds	r3, #5
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	4619      	mov	r1, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3301      	adds	r3, #1
 800e662:	4a34      	ldr	r2, [pc, #208]	; (800e734 <shift_sub_rows+0x130>)
 800e664:	5c52      	ldrb	r2, [r2, r1]
 800e666:	701a      	strb	r2, [r3, #0]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	3309      	adds	r3, #9
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	4619      	mov	r1, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	3305      	adds	r3, #5
 800e674:	4a2f      	ldr	r2, [pc, #188]	; (800e734 <shift_sub_rows+0x130>)
 800e676:	5c52      	ldrb	r2, [r2, r1]
 800e678:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	330d      	adds	r3, #13
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	4619      	mov	r1, r3
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3309      	adds	r3, #9
 800e686:	4a2b      	ldr	r2, [pc, #172]	; (800e734 <shift_sub_rows+0x130>)
 800e688:	5c52      	ldrb	r2, [r2, r1]
 800e68a:	701a      	strb	r2, [r3, #0]
 800e68c:	7bfa      	ldrb	r2, [r7, #15]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	330d      	adds	r3, #13
 800e692:	4928      	ldr	r1, [pc, #160]	; (800e734 <shift_sub_rows+0x130>)
 800e694:	5c8a      	ldrb	r2, [r1, r2]
 800e696:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	789b      	ldrb	r3, [r3, #2]
 800e69c:	73fb      	strb	r3, [r7, #15]
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	330a      	adds	r3, #10
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	3302      	adds	r3, #2
 800e6aa:	4a22      	ldr	r2, [pc, #136]	; (800e734 <shift_sub_rows+0x130>)
 800e6ac:	5c52      	ldrb	r2, [r2, r1]
 800e6ae:	701a      	strb	r2, [r3, #0]
 800e6b0:	7bfa      	ldrb	r2, [r7, #15]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	330a      	adds	r3, #10
 800e6b6:	491f      	ldr	r1, [pc, #124]	; (800e734 <shift_sub_rows+0x130>)
 800e6b8:	5c8a      	ldrb	r2, [r1, r2]
 800e6ba:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	799b      	ldrb	r3, [r3, #6]
 800e6c0:	73fb      	strb	r3, [r7, #15]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	330e      	adds	r3, #14
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	4619      	mov	r1, r3
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	3306      	adds	r3, #6
 800e6ce:	4a19      	ldr	r2, [pc, #100]	; (800e734 <shift_sub_rows+0x130>)
 800e6d0:	5c52      	ldrb	r2, [r2, r1]
 800e6d2:	701a      	strb	r2, [r3, #0]
 800e6d4:	7bfa      	ldrb	r2, [r7, #15]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	330e      	adds	r3, #14
 800e6da:	4916      	ldr	r1, [pc, #88]	; (800e734 <shift_sub_rows+0x130>)
 800e6dc:	5c8a      	ldrb	r2, [r1, r2]
 800e6de:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	7bdb      	ldrb	r3, [r3, #15]
 800e6e4:	73fb      	strb	r3, [r7, #15]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	330b      	adds	r3, #11
 800e6ea:	781b      	ldrb	r3, [r3, #0]
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	330f      	adds	r3, #15
 800e6f2:	4a10      	ldr	r2, [pc, #64]	; (800e734 <shift_sub_rows+0x130>)
 800e6f4:	5c52      	ldrb	r2, [r2, r1]
 800e6f6:	701a      	strb	r2, [r3, #0]
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	3307      	adds	r3, #7
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	4619      	mov	r1, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	330b      	adds	r3, #11
 800e704:	4a0b      	ldr	r2, [pc, #44]	; (800e734 <shift_sub_rows+0x130>)
 800e706:	5c52      	ldrb	r2, [r2, r1]
 800e708:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	3303      	adds	r3, #3
 800e70e:	781b      	ldrb	r3, [r3, #0]
 800e710:	4619      	mov	r1, r3
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	3307      	adds	r3, #7
 800e716:	4a07      	ldr	r2, [pc, #28]	; (800e734 <shift_sub_rows+0x130>)
 800e718:	5c52      	ldrb	r2, [r2, r1]
 800e71a:	701a      	strb	r2, [r3, #0]
 800e71c:	7bfa      	ldrb	r2, [r7, #15]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3303      	adds	r3, #3
 800e722:	4904      	ldr	r1, [pc, #16]	; (800e734 <shift_sub_rows+0x130>)
 800e724:	5c8a      	ldrb	r2, [r1, r2]
 800e726:	701a      	strb	r2, [r3, #0]
}
 800e728:	bf00      	nop
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bc80      	pop	{r7}
 800e730:	4770      	bx	lr
 800e732:	bf00      	nop
 800e734:	0801f624 	.word	0x0801f624

0800e738 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800e740:	f107 0308 	add.w	r3, r7, #8
 800e744:	6879      	ldr	r1, [r7, #4]
 800e746:	4618      	mov	r0, r3
 800e748:	f7ff fd6c 	bl	800e224 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800e74c:	7a3b      	ldrb	r3, [r7, #8]
 800e74e:	461a      	mov	r2, r3
 800e750:	4b9a      	ldr	r3, [pc, #616]	; (800e9bc <mix_sub_columns+0x284>)
 800e752:	5c9a      	ldrb	r2, [r3, r2]
 800e754:	7b7b      	ldrb	r3, [r7, #13]
 800e756:	4619      	mov	r1, r3
 800e758:	4b99      	ldr	r3, [pc, #612]	; (800e9c0 <mix_sub_columns+0x288>)
 800e75a:	5c5b      	ldrb	r3, [r3, r1]
 800e75c:	4053      	eors	r3, r2
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	7cbb      	ldrb	r3, [r7, #18]
 800e762:	4619      	mov	r1, r3
 800e764:	4b97      	ldr	r3, [pc, #604]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e766:	5c5b      	ldrb	r3, [r3, r1]
 800e768:	4053      	eors	r3, r2
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	7dfb      	ldrb	r3, [r7, #23]
 800e76e:	4619      	mov	r1, r3
 800e770:	4b94      	ldr	r3, [pc, #592]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e772:	5c5b      	ldrb	r3, [r3, r1]
 800e774:	4053      	eors	r3, r2
 800e776:	b2da      	uxtb	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800e77c:	7a3b      	ldrb	r3, [r7, #8]
 800e77e:	461a      	mov	r2, r3
 800e780:	4b90      	ldr	r3, [pc, #576]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e782:	5c9a      	ldrb	r2, [r3, r2]
 800e784:	7b7b      	ldrb	r3, [r7, #13]
 800e786:	4619      	mov	r1, r3
 800e788:	4b8c      	ldr	r3, [pc, #560]	; (800e9bc <mix_sub_columns+0x284>)
 800e78a:	5c5b      	ldrb	r3, [r3, r1]
 800e78c:	4053      	eors	r3, r2
 800e78e:	b2da      	uxtb	r2, r3
 800e790:	7cbb      	ldrb	r3, [r7, #18]
 800e792:	4619      	mov	r1, r3
 800e794:	4b8a      	ldr	r3, [pc, #552]	; (800e9c0 <mix_sub_columns+0x288>)
 800e796:	5c5b      	ldrb	r3, [r3, r1]
 800e798:	4053      	eors	r3, r2
 800e79a:	b2d9      	uxtb	r1, r3
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
 800e79e:	461a      	mov	r2, r3
 800e7a0:	4b88      	ldr	r3, [pc, #544]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e7a2:	5c9a      	ldrb	r2, [r3, r2]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	404a      	eors	r2, r1
 800e7aa:	b2d2      	uxtb	r2, r2
 800e7ac:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800e7ae:	7a3b      	ldrb	r3, [r7, #8]
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4b84      	ldr	r3, [pc, #528]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e7b4:	5c9a      	ldrb	r2, [r3, r2]
 800e7b6:	7b7b      	ldrb	r3, [r7, #13]
 800e7b8:	4619      	mov	r1, r3
 800e7ba:	4b82      	ldr	r3, [pc, #520]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e7bc:	5c5b      	ldrb	r3, [r3, r1]
 800e7be:	4053      	eors	r3, r2
 800e7c0:	b2da      	uxtb	r2, r3
 800e7c2:	7cbb      	ldrb	r3, [r7, #18]
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4b7d      	ldr	r3, [pc, #500]	; (800e9bc <mix_sub_columns+0x284>)
 800e7c8:	5c5b      	ldrb	r3, [r3, r1]
 800e7ca:	4053      	eors	r3, r2
 800e7cc:	b2d9      	uxtb	r1, r3
 800e7ce:	7dfb      	ldrb	r3, [r7, #23]
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4b7b      	ldr	r3, [pc, #492]	; (800e9c0 <mix_sub_columns+0x288>)
 800e7d4:	5c9a      	ldrb	r2, [r3, r2]
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	3302      	adds	r3, #2
 800e7da:	404a      	eors	r2, r1
 800e7dc:	b2d2      	uxtb	r2, r2
 800e7de:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800e7e0:	7a3b      	ldrb	r3, [r7, #8]
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	4b76      	ldr	r3, [pc, #472]	; (800e9c0 <mix_sub_columns+0x288>)
 800e7e6:	5c9a      	ldrb	r2, [r3, r2]
 800e7e8:	7b7b      	ldrb	r3, [r7, #13]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	4b75      	ldr	r3, [pc, #468]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e7ee:	5c5b      	ldrb	r3, [r3, r1]
 800e7f0:	4053      	eors	r3, r2
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	7cbb      	ldrb	r3, [r7, #18]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	4b72      	ldr	r3, [pc, #456]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e7fa:	5c5b      	ldrb	r3, [r3, r1]
 800e7fc:	4053      	eors	r3, r2
 800e7fe:	b2d9      	uxtb	r1, r3
 800e800:	7dfb      	ldrb	r3, [r7, #23]
 800e802:	461a      	mov	r2, r3
 800e804:	4b6d      	ldr	r3, [pc, #436]	; (800e9bc <mix_sub_columns+0x284>)
 800e806:	5c9a      	ldrb	r2, [r3, r2]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	3303      	adds	r3, #3
 800e80c:	404a      	eors	r2, r1
 800e80e:	b2d2      	uxtb	r2, r2
 800e810:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800e812:	7b3b      	ldrb	r3, [r7, #12]
 800e814:	461a      	mov	r2, r3
 800e816:	4b69      	ldr	r3, [pc, #420]	; (800e9bc <mix_sub_columns+0x284>)
 800e818:	5c9a      	ldrb	r2, [r3, r2]
 800e81a:	7c7b      	ldrb	r3, [r7, #17]
 800e81c:	4619      	mov	r1, r3
 800e81e:	4b68      	ldr	r3, [pc, #416]	; (800e9c0 <mix_sub_columns+0x288>)
 800e820:	5c5b      	ldrb	r3, [r3, r1]
 800e822:	4053      	eors	r3, r2
 800e824:	b2da      	uxtb	r2, r3
 800e826:	7dbb      	ldrb	r3, [r7, #22]
 800e828:	4619      	mov	r1, r3
 800e82a:	4b66      	ldr	r3, [pc, #408]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e82c:	5c5b      	ldrb	r3, [r3, r1]
 800e82e:	4053      	eors	r3, r2
 800e830:	b2d9      	uxtb	r1, r3
 800e832:	7afb      	ldrb	r3, [r7, #11]
 800e834:	461a      	mov	r2, r3
 800e836:	4b63      	ldr	r3, [pc, #396]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e838:	5c9a      	ldrb	r2, [r3, r2]
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	3304      	adds	r3, #4
 800e83e:	404a      	eors	r2, r1
 800e840:	b2d2      	uxtb	r2, r2
 800e842:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800e844:	7b3b      	ldrb	r3, [r7, #12]
 800e846:	461a      	mov	r2, r3
 800e848:	4b5e      	ldr	r3, [pc, #376]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e84a:	5c9a      	ldrb	r2, [r3, r2]
 800e84c:	7c7b      	ldrb	r3, [r7, #17]
 800e84e:	4619      	mov	r1, r3
 800e850:	4b5a      	ldr	r3, [pc, #360]	; (800e9bc <mix_sub_columns+0x284>)
 800e852:	5c5b      	ldrb	r3, [r3, r1]
 800e854:	4053      	eors	r3, r2
 800e856:	b2da      	uxtb	r2, r3
 800e858:	7dbb      	ldrb	r3, [r7, #22]
 800e85a:	4619      	mov	r1, r3
 800e85c:	4b58      	ldr	r3, [pc, #352]	; (800e9c0 <mix_sub_columns+0x288>)
 800e85e:	5c5b      	ldrb	r3, [r3, r1]
 800e860:	4053      	eors	r3, r2
 800e862:	b2d9      	uxtb	r1, r3
 800e864:	7afb      	ldrb	r3, [r7, #11]
 800e866:	461a      	mov	r2, r3
 800e868:	4b56      	ldr	r3, [pc, #344]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e86a:	5c9a      	ldrb	r2, [r3, r2]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3305      	adds	r3, #5
 800e870:	404a      	eors	r2, r1
 800e872:	b2d2      	uxtb	r2, r2
 800e874:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800e876:	7b3b      	ldrb	r3, [r7, #12]
 800e878:	461a      	mov	r2, r3
 800e87a:	4b52      	ldr	r3, [pc, #328]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e87c:	5c9a      	ldrb	r2, [r3, r2]
 800e87e:	7c7b      	ldrb	r3, [r7, #17]
 800e880:	4619      	mov	r1, r3
 800e882:	4b50      	ldr	r3, [pc, #320]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e884:	5c5b      	ldrb	r3, [r3, r1]
 800e886:	4053      	eors	r3, r2
 800e888:	b2da      	uxtb	r2, r3
 800e88a:	7dbb      	ldrb	r3, [r7, #22]
 800e88c:	4619      	mov	r1, r3
 800e88e:	4b4b      	ldr	r3, [pc, #300]	; (800e9bc <mix_sub_columns+0x284>)
 800e890:	5c5b      	ldrb	r3, [r3, r1]
 800e892:	4053      	eors	r3, r2
 800e894:	b2d9      	uxtb	r1, r3
 800e896:	7afb      	ldrb	r3, [r7, #11]
 800e898:	461a      	mov	r2, r3
 800e89a:	4b49      	ldr	r3, [pc, #292]	; (800e9c0 <mix_sub_columns+0x288>)
 800e89c:	5c9a      	ldrb	r2, [r3, r2]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	3306      	adds	r3, #6
 800e8a2:	404a      	eors	r2, r1
 800e8a4:	b2d2      	uxtb	r2, r2
 800e8a6:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800e8a8:	7b3b      	ldrb	r3, [r7, #12]
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	4b44      	ldr	r3, [pc, #272]	; (800e9c0 <mix_sub_columns+0x288>)
 800e8ae:	5c9a      	ldrb	r2, [r3, r2]
 800e8b0:	7c7b      	ldrb	r3, [r7, #17]
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	4b43      	ldr	r3, [pc, #268]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e8b6:	5c5b      	ldrb	r3, [r3, r1]
 800e8b8:	4053      	eors	r3, r2
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	7dbb      	ldrb	r3, [r7, #22]
 800e8be:	4619      	mov	r1, r3
 800e8c0:	4b40      	ldr	r3, [pc, #256]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e8c2:	5c5b      	ldrb	r3, [r3, r1]
 800e8c4:	4053      	eors	r3, r2
 800e8c6:	b2d9      	uxtb	r1, r3
 800e8c8:	7afb      	ldrb	r3, [r7, #11]
 800e8ca:	461a      	mov	r2, r3
 800e8cc:	4b3b      	ldr	r3, [pc, #236]	; (800e9bc <mix_sub_columns+0x284>)
 800e8ce:	5c9a      	ldrb	r2, [r3, r2]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	3307      	adds	r3, #7
 800e8d4:	404a      	eors	r2, r1
 800e8d6:	b2d2      	uxtb	r2, r2
 800e8d8:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800e8da:	7c3b      	ldrb	r3, [r7, #16]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	4b37      	ldr	r3, [pc, #220]	; (800e9bc <mix_sub_columns+0x284>)
 800e8e0:	5c9a      	ldrb	r2, [r3, r2]
 800e8e2:	7d7b      	ldrb	r3, [r7, #21]
 800e8e4:	4619      	mov	r1, r3
 800e8e6:	4b36      	ldr	r3, [pc, #216]	; (800e9c0 <mix_sub_columns+0x288>)
 800e8e8:	5c5b      	ldrb	r3, [r3, r1]
 800e8ea:	4053      	eors	r3, r2
 800e8ec:	b2da      	uxtb	r2, r3
 800e8ee:	7abb      	ldrb	r3, [r7, #10]
 800e8f0:	4619      	mov	r1, r3
 800e8f2:	4b34      	ldr	r3, [pc, #208]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e8f4:	5c5b      	ldrb	r3, [r3, r1]
 800e8f6:	4053      	eors	r3, r2
 800e8f8:	b2d9      	uxtb	r1, r3
 800e8fa:	7bfb      	ldrb	r3, [r7, #15]
 800e8fc:	461a      	mov	r2, r3
 800e8fe:	4b31      	ldr	r3, [pc, #196]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e900:	5c9a      	ldrb	r2, [r3, r2]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	3308      	adds	r3, #8
 800e906:	404a      	eors	r2, r1
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800e90c:	7c3b      	ldrb	r3, [r7, #16]
 800e90e:	461a      	mov	r2, r3
 800e910:	4b2c      	ldr	r3, [pc, #176]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e912:	5c9a      	ldrb	r2, [r3, r2]
 800e914:	7d7b      	ldrb	r3, [r7, #21]
 800e916:	4619      	mov	r1, r3
 800e918:	4b28      	ldr	r3, [pc, #160]	; (800e9bc <mix_sub_columns+0x284>)
 800e91a:	5c5b      	ldrb	r3, [r3, r1]
 800e91c:	4053      	eors	r3, r2
 800e91e:	b2da      	uxtb	r2, r3
 800e920:	7abb      	ldrb	r3, [r7, #10]
 800e922:	4619      	mov	r1, r3
 800e924:	4b26      	ldr	r3, [pc, #152]	; (800e9c0 <mix_sub_columns+0x288>)
 800e926:	5c5b      	ldrb	r3, [r3, r1]
 800e928:	4053      	eors	r3, r2
 800e92a:	b2d9      	uxtb	r1, r3
 800e92c:	7bfb      	ldrb	r3, [r7, #15]
 800e92e:	461a      	mov	r2, r3
 800e930:	4b24      	ldr	r3, [pc, #144]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e932:	5c9a      	ldrb	r2, [r3, r2]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	3309      	adds	r3, #9
 800e938:	404a      	eors	r2, r1
 800e93a:	b2d2      	uxtb	r2, r2
 800e93c:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800e93e:	7c3b      	ldrb	r3, [r7, #16]
 800e940:	461a      	mov	r2, r3
 800e942:	4b20      	ldr	r3, [pc, #128]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e944:	5c9a      	ldrb	r2, [r3, r2]
 800e946:	7d7b      	ldrb	r3, [r7, #21]
 800e948:	4619      	mov	r1, r3
 800e94a:	4b1e      	ldr	r3, [pc, #120]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e94c:	5c5b      	ldrb	r3, [r3, r1]
 800e94e:	4053      	eors	r3, r2
 800e950:	b2da      	uxtb	r2, r3
 800e952:	7abb      	ldrb	r3, [r7, #10]
 800e954:	4619      	mov	r1, r3
 800e956:	4b19      	ldr	r3, [pc, #100]	; (800e9bc <mix_sub_columns+0x284>)
 800e958:	5c5b      	ldrb	r3, [r3, r1]
 800e95a:	4053      	eors	r3, r2
 800e95c:	b2d9      	uxtb	r1, r3
 800e95e:	7bfb      	ldrb	r3, [r7, #15]
 800e960:	461a      	mov	r2, r3
 800e962:	4b17      	ldr	r3, [pc, #92]	; (800e9c0 <mix_sub_columns+0x288>)
 800e964:	5c9a      	ldrb	r2, [r3, r2]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	330a      	adds	r3, #10
 800e96a:	404a      	eors	r2, r1
 800e96c:	b2d2      	uxtb	r2, r2
 800e96e:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800e970:	7c3b      	ldrb	r3, [r7, #16]
 800e972:	461a      	mov	r2, r3
 800e974:	4b12      	ldr	r3, [pc, #72]	; (800e9c0 <mix_sub_columns+0x288>)
 800e976:	5c9a      	ldrb	r2, [r3, r2]
 800e978:	7d7b      	ldrb	r3, [r7, #21]
 800e97a:	4619      	mov	r1, r3
 800e97c:	4b11      	ldr	r3, [pc, #68]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e97e:	5c5b      	ldrb	r3, [r3, r1]
 800e980:	4053      	eors	r3, r2
 800e982:	b2da      	uxtb	r2, r3
 800e984:	7abb      	ldrb	r3, [r7, #10]
 800e986:	4619      	mov	r1, r3
 800e988:	4b0e      	ldr	r3, [pc, #56]	; (800e9c4 <mix_sub_columns+0x28c>)
 800e98a:	5c5b      	ldrb	r3, [r3, r1]
 800e98c:	4053      	eors	r3, r2
 800e98e:	b2d9      	uxtb	r1, r3
 800e990:	7bfb      	ldrb	r3, [r7, #15]
 800e992:	461a      	mov	r2, r3
 800e994:	4b09      	ldr	r3, [pc, #36]	; (800e9bc <mix_sub_columns+0x284>)
 800e996:	5c9a      	ldrb	r2, [r3, r2]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	330b      	adds	r3, #11
 800e99c:	404a      	eors	r2, r1
 800e99e:	b2d2      	uxtb	r2, r2
 800e9a0:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800e9a2:	7d3b      	ldrb	r3, [r7, #20]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	4b05      	ldr	r3, [pc, #20]	; (800e9bc <mix_sub_columns+0x284>)
 800e9a8:	5c9a      	ldrb	r2, [r3, r2]
 800e9aa:	7a7b      	ldrb	r3, [r7, #9]
 800e9ac:	4619      	mov	r1, r3
 800e9ae:	4b04      	ldr	r3, [pc, #16]	; (800e9c0 <mix_sub_columns+0x288>)
 800e9b0:	5c5b      	ldrb	r3, [r3, r1]
 800e9b2:	4053      	eors	r3, r2
 800e9b4:	b2da      	uxtb	r2, r3
 800e9b6:	7bbb      	ldrb	r3, [r7, #14]
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	e005      	b.n	800e9c8 <mix_sub_columns+0x290>
 800e9bc:	0801f724 	.word	0x0801f724
 800e9c0:	0801f824 	.word	0x0801f824
 800e9c4:	0801f624 	.word	0x0801f624
 800e9c8:	4b2d      	ldr	r3, [pc, #180]	; (800ea80 <mix_sub_columns+0x348>)
 800e9ca:	5c5b      	ldrb	r3, [r3, r1]
 800e9cc:	4053      	eors	r3, r2
 800e9ce:	b2d9      	uxtb	r1, r3
 800e9d0:	7cfb      	ldrb	r3, [r7, #19]
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ea80 <mix_sub_columns+0x348>)
 800e9d6:	5c9a      	ldrb	r2, [r3, r2]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	330c      	adds	r3, #12
 800e9dc:	404a      	eors	r2, r1
 800e9de:	b2d2      	uxtb	r2, r2
 800e9e0:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800e9e2:	7d3b      	ldrb	r3, [r7, #20]
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b26      	ldr	r3, [pc, #152]	; (800ea80 <mix_sub_columns+0x348>)
 800e9e8:	5c9a      	ldrb	r2, [r3, r2]
 800e9ea:	7a7b      	ldrb	r3, [r7, #9]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	4b25      	ldr	r3, [pc, #148]	; (800ea84 <mix_sub_columns+0x34c>)
 800e9f0:	5c5b      	ldrb	r3, [r3, r1]
 800e9f2:	4053      	eors	r3, r2
 800e9f4:	b2da      	uxtb	r2, r3
 800e9f6:	7bbb      	ldrb	r3, [r7, #14]
 800e9f8:	4619      	mov	r1, r3
 800e9fa:	4b23      	ldr	r3, [pc, #140]	; (800ea88 <mix_sub_columns+0x350>)
 800e9fc:	5c5b      	ldrb	r3, [r3, r1]
 800e9fe:	4053      	eors	r3, r2
 800ea00:	b2d9      	uxtb	r1, r3
 800ea02:	7cfb      	ldrb	r3, [r7, #19]
 800ea04:	461a      	mov	r2, r3
 800ea06:	4b1e      	ldr	r3, [pc, #120]	; (800ea80 <mix_sub_columns+0x348>)
 800ea08:	5c9a      	ldrb	r2, [r3, r2]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	330d      	adds	r3, #13
 800ea0e:	404a      	eors	r2, r1
 800ea10:	b2d2      	uxtb	r2, r2
 800ea12:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800ea14:	7d3b      	ldrb	r3, [r7, #20]
 800ea16:	461a      	mov	r2, r3
 800ea18:	4b19      	ldr	r3, [pc, #100]	; (800ea80 <mix_sub_columns+0x348>)
 800ea1a:	5c9a      	ldrb	r2, [r3, r2]
 800ea1c:	7a7b      	ldrb	r3, [r7, #9]
 800ea1e:	4619      	mov	r1, r3
 800ea20:	4b17      	ldr	r3, [pc, #92]	; (800ea80 <mix_sub_columns+0x348>)
 800ea22:	5c5b      	ldrb	r3, [r3, r1]
 800ea24:	4053      	eors	r3, r2
 800ea26:	b2da      	uxtb	r2, r3
 800ea28:	7bbb      	ldrb	r3, [r7, #14]
 800ea2a:	4619      	mov	r1, r3
 800ea2c:	4b15      	ldr	r3, [pc, #84]	; (800ea84 <mix_sub_columns+0x34c>)
 800ea2e:	5c5b      	ldrb	r3, [r3, r1]
 800ea30:	4053      	eors	r3, r2
 800ea32:	b2d9      	uxtb	r1, r3
 800ea34:	7cfb      	ldrb	r3, [r7, #19]
 800ea36:	461a      	mov	r2, r3
 800ea38:	4b13      	ldr	r3, [pc, #76]	; (800ea88 <mix_sub_columns+0x350>)
 800ea3a:	5c9a      	ldrb	r2, [r3, r2]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	330e      	adds	r3, #14
 800ea40:	404a      	eors	r2, r1
 800ea42:	b2d2      	uxtb	r2, r2
 800ea44:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800ea46:	7d3b      	ldrb	r3, [r7, #20]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4b0f      	ldr	r3, [pc, #60]	; (800ea88 <mix_sub_columns+0x350>)
 800ea4c:	5c9a      	ldrb	r2, [r3, r2]
 800ea4e:	7a7b      	ldrb	r3, [r7, #9]
 800ea50:	4619      	mov	r1, r3
 800ea52:	4b0b      	ldr	r3, [pc, #44]	; (800ea80 <mix_sub_columns+0x348>)
 800ea54:	5c5b      	ldrb	r3, [r3, r1]
 800ea56:	4053      	eors	r3, r2
 800ea58:	b2da      	uxtb	r2, r3
 800ea5a:	7bbb      	ldrb	r3, [r7, #14]
 800ea5c:	4619      	mov	r1, r3
 800ea5e:	4b08      	ldr	r3, [pc, #32]	; (800ea80 <mix_sub_columns+0x348>)
 800ea60:	5c5b      	ldrb	r3, [r3, r1]
 800ea62:	4053      	eors	r3, r2
 800ea64:	b2d9      	uxtb	r1, r3
 800ea66:	7cfb      	ldrb	r3, [r7, #19]
 800ea68:	461a      	mov	r2, r3
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <mix_sub_columns+0x34c>)
 800ea6c:	5c9a      	ldrb	r2, [r3, r2]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	330f      	adds	r3, #15
 800ea72:	404a      	eors	r2, r1
 800ea74:	b2d2      	uxtb	r2, r2
 800ea76:	701a      	strb	r2, [r3, #0]
  }
 800ea78:	bf00      	nop
 800ea7a:	3718      	adds	r7, #24
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}
 800ea80:	0801f624 	.word	0x0801f624
 800ea84:	0801f724 	.word	0x0801f724
 800ea88:	0801f824 	.word	0x0801f824

0800ea8c <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b086      	sub	sp, #24
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	60f8      	str	r0, [r7, #12]
 800ea94:	460b      	mov	r3, r1
 800ea96:	607a      	str	r2, [r7, #4]
 800ea98:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800ea9a:	7afb      	ldrb	r3, [r7, #11]
 800ea9c:	3b10      	subs	r3, #16
 800ea9e:	2b10      	cmp	r3, #16
 800eaa0:	bf8c      	ite	hi
 800eaa2:	2201      	movhi	r2, #1
 800eaa4:	2200      	movls	r2, #0
 800eaa6:	b2d2      	uxtb	r2, r2
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	d10b      	bne.n	800eac4 <lorawan_aes_set_key+0x38>
 800eaac:	4a64      	ldr	r2, [pc, #400]	; (800ec40 <lorawan_aes_set_key+0x1b4>)
 800eaae:	fa22 f303 	lsr.w	r3, r2, r3
 800eab2:	f003 0301 	and.w	r3, r3, #1
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	bf14      	ite	ne
 800eaba:	2301      	movne	r3, #1
 800eabc:	2300      	moveq	r3, #0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d105      	bne.n	800ead0 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
        return ( uint8_t )-1;
 800eacc:	23ff      	movs	r3, #255	; 0xff
 800eace:	e0b2      	b.n	800ec36 <lorawan_aes_set_key+0x1aa>
        break;
 800ead0:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	7afa      	ldrb	r2, [r7, #11]
 800ead6:	68f9      	ldr	r1, [r7, #12]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7ff fbfc 	bl	800e2d6 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800eade:	7afb      	ldrb	r3, [r7, #11]
 800eae0:	331c      	adds	r3, #28
 800eae2:	b2db      	uxtb	r3, r3
 800eae4:	009b      	lsls	r3, r3, #2
 800eae6:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800eae8:	7c7b      	ldrb	r3, [r7, #17]
 800eaea:	091b      	lsrs	r3, r3, #4
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	3b01      	subs	r3, #1
 800eaf0:	b2da      	uxtb	r2, r3
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800eaf8:	7afb      	ldrb	r3, [r7, #11]
 800eafa:	75fb      	strb	r3, [r7, #23]
 800eafc:	2301      	movs	r3, #1
 800eafe:	75bb      	strb	r3, [r7, #22]
 800eb00:	e093      	b.n	800ec2a <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800eb02:	7dfb      	ldrb	r3, [r7, #23]
 800eb04:	3b04      	subs	r3, #4
 800eb06:	687a      	ldr	r2, [r7, #4]
 800eb08:	5cd3      	ldrb	r3, [r2, r3]
 800eb0a:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800eb0c:	7dfb      	ldrb	r3, [r7, #23]
 800eb0e:	3b03      	subs	r3, #3
 800eb10:	687a      	ldr	r2, [r7, #4]
 800eb12:	5cd3      	ldrb	r3, [r2, r3]
 800eb14:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800eb16:	7dfb      	ldrb	r3, [r7, #23]
 800eb18:	3b02      	subs	r3, #2
 800eb1a:	687a      	ldr	r2, [r7, #4]
 800eb1c:	5cd3      	ldrb	r3, [r2, r3]
 800eb1e:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800eb20:	7dfb      	ldrb	r3, [r7, #23]
 800eb22:	3b01      	subs	r3, #1
 800eb24:	687a      	ldr	r2, [r7, #4]
 800eb26:	5cd3      	ldrb	r3, [r2, r3]
 800eb28:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	7afa      	ldrb	r2, [r7, #11]
 800eb2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb32:	fb01 f202 	mul.w	r2, r1, r2
 800eb36:	1a9b      	subs	r3, r3, r2
 800eb38:	b2db      	uxtb	r3, r3
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d127      	bne.n	800eb8e <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800eb3e:	7d7b      	ldrb	r3, [r7, #21]
 800eb40:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800eb42:	7d3b      	ldrb	r3, [r7, #20]
 800eb44:	4a3f      	ldr	r2, [pc, #252]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800eb46:	5cd2      	ldrb	r2, [r2, r3]
 800eb48:	7dbb      	ldrb	r3, [r7, #22]
 800eb4a:	4053      	eors	r3, r2
 800eb4c:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800eb4e:	7cfb      	ldrb	r3, [r7, #19]
 800eb50:	4a3c      	ldr	r2, [pc, #240]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800eb52:	5cd3      	ldrb	r3, [r2, r3]
 800eb54:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800eb56:	7cbb      	ldrb	r3, [r7, #18]
 800eb58:	4a3a      	ldr	r2, [pc, #232]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800eb5a:	5cd3      	ldrb	r3, [r2, r3]
 800eb5c:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800eb5e:	7c3b      	ldrb	r3, [r7, #16]
 800eb60:	4a38      	ldr	r2, [pc, #224]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800eb62:	5cd3      	ldrb	r3, [r2, r3]
 800eb64:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800eb66:	7dbb      	ldrb	r3, [r7, #22]
 800eb68:	005b      	lsls	r3, r3, #1
 800eb6a:	b25a      	sxtb	r2, r3
 800eb6c:	7dbb      	ldrb	r3, [r7, #22]
 800eb6e:	09db      	lsrs	r3, r3, #7
 800eb70:	b2db      	uxtb	r3, r3
 800eb72:	4619      	mov	r1, r3
 800eb74:	0049      	lsls	r1, r1, #1
 800eb76:	440b      	add	r3, r1
 800eb78:	4619      	mov	r1, r3
 800eb7a:	00c8      	lsls	r0, r1, #3
 800eb7c:	4619      	mov	r1, r3
 800eb7e:	4603      	mov	r3, r0
 800eb80:	440b      	add	r3, r1
 800eb82:	b2db      	uxtb	r3, r3
 800eb84:	b25b      	sxtb	r3, r3
 800eb86:	4053      	eors	r3, r2
 800eb88:	b25b      	sxtb	r3, r3
 800eb8a:	75bb      	strb	r3, [r7, #22]
 800eb8c:	e01c      	b.n	800ebc8 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800eb8e:	7afb      	ldrb	r3, [r7, #11]
 800eb90:	2b18      	cmp	r3, #24
 800eb92:	d919      	bls.n	800ebc8 <lorawan_aes_set_key+0x13c>
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	7afa      	ldrb	r2, [r7, #11]
 800eb98:	fbb3 f1f2 	udiv	r1, r3, r2
 800eb9c:	fb01 f202 	mul.w	r2, r1, r2
 800eba0:	1a9b      	subs	r3, r3, r2
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b10      	cmp	r3, #16
 800eba6:	d10f      	bne.n	800ebc8 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800eba8:	7d7b      	ldrb	r3, [r7, #21]
 800ebaa:	4a26      	ldr	r2, [pc, #152]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800ebac:	5cd3      	ldrb	r3, [r2, r3]
 800ebae:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800ebb0:	7d3b      	ldrb	r3, [r7, #20]
 800ebb2:	4a24      	ldr	r2, [pc, #144]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800ebb4:	5cd3      	ldrb	r3, [r2, r3]
 800ebb6:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800ebb8:	7cfb      	ldrb	r3, [r7, #19]
 800ebba:	4a22      	ldr	r2, [pc, #136]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800ebbc:	5cd3      	ldrb	r3, [r2, r3]
 800ebbe:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800ebc0:	7cbb      	ldrb	r3, [r7, #18]
 800ebc2:	4a20      	ldr	r2, [pc, #128]	; (800ec44 <lorawan_aes_set_key+0x1b8>)
 800ebc4:	5cd3      	ldrb	r3, [r2, r3]
 800ebc6:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800ebc8:	7dfa      	ldrb	r2, [r7, #23]
 800ebca:	7afb      	ldrb	r3, [r7, #11]
 800ebcc:	1ad3      	subs	r3, r2, r3
 800ebce:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800ebd0:	7c3b      	ldrb	r3, [r7, #16]
 800ebd2:	687a      	ldr	r2, [r7, #4]
 800ebd4:	5cd1      	ldrb	r1, [r2, r3]
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	7d7a      	ldrb	r2, [r7, #21]
 800ebda:	404a      	eors	r2, r1
 800ebdc:	b2d1      	uxtb	r1, r2
 800ebde:	687a      	ldr	r2, [r7, #4]
 800ebe0:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800ebe2:	7c3b      	ldrb	r3, [r7, #16]
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	687a      	ldr	r2, [r7, #4]
 800ebe8:	5cd1      	ldrb	r1, [r2, r3]
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	3301      	adds	r3, #1
 800ebee:	7d3a      	ldrb	r2, [r7, #20]
 800ebf0:	404a      	eors	r2, r1
 800ebf2:	b2d1      	uxtb	r1, r2
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800ebf8:	7c3b      	ldrb	r3, [r7, #16]
 800ebfa:	3302      	adds	r3, #2
 800ebfc:	687a      	ldr	r2, [r7, #4]
 800ebfe:	5cd1      	ldrb	r1, [r2, r3]
 800ec00:	7dfb      	ldrb	r3, [r7, #23]
 800ec02:	3302      	adds	r3, #2
 800ec04:	7cfa      	ldrb	r2, [r7, #19]
 800ec06:	404a      	eors	r2, r1
 800ec08:	b2d1      	uxtb	r1, r2
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800ec0e:	7c3b      	ldrb	r3, [r7, #16]
 800ec10:	3303      	adds	r3, #3
 800ec12:	687a      	ldr	r2, [r7, #4]
 800ec14:	5cd1      	ldrb	r1, [r2, r3]
 800ec16:	7dfb      	ldrb	r3, [r7, #23]
 800ec18:	3303      	adds	r3, #3
 800ec1a:	7cba      	ldrb	r2, [r7, #18]
 800ec1c:	404a      	eors	r2, r1
 800ec1e:	b2d1      	uxtb	r1, r2
 800ec20:	687a      	ldr	r2, [r7, #4]
 800ec22:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	3304      	adds	r3, #4
 800ec28:	75fb      	strb	r3, [r7, #23]
 800ec2a:	7dfa      	ldrb	r2, [r7, #23]
 800ec2c:	7c7b      	ldrb	r3, [r7, #17]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	f4ff af67 	bcc.w	800eb02 <lorawan_aes_set_key+0x76>
    }
    return 0;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	00010101 	.word	0x00010101
 800ec44:	0801f624 	.word	0x0801f624

0800ec48 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b08a      	sub	sp, #40	; 0x28
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	60f8      	str	r0, [r7, #12]
 800ec50:	60b9      	str	r1, [r7, #8]
 800ec52:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d038      	beq.n	800ecd0 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	f107 0314 	add.w	r3, r7, #20
 800ec64:	68f9      	ldr	r1, [r7, #12]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7ff fc07 	bl	800e47a <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec72:	e014      	b.n	800ec9e <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800ec74:	f107 0314 	add.w	r3, r7, #20
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7ff fd5d 	bl	800e738 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec84:	0112      	lsls	r2, r2, #4
 800ec86:	441a      	add	r2, r3
 800ec88:	f107 0314 	add.w	r3, r7, #20
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff fcab 	bl	800e5ea <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800ec94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec98:	3301      	adds	r3, #1
 800ec9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800eca4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eca8:	429a      	cmp	r2, r3
 800ecaa:	d3e3      	bcc.n	800ec74 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800ecac:	f107 0314 	add.w	r3, r7, #20
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff fca7 	bl	800e604 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ecbc:	0112      	lsls	r2, r2, #4
 800ecbe:	441a      	add	r2, r3
 800ecc0:	f107 0314 	add.w	r3, r7, #20
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	68b8      	ldr	r0, [r7, #8]
 800ecc8:	f7ff fbd7 	bl	800e47a <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	e000      	b.n	800ecd2 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800ecd0:	23ff      	movs	r3, #255	; 0xff
}
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	3728      	adds	r7, #40	; 0x28
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}
	...

0800ecdc <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 800ecdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecde:	b0a1      	sub	sp, #132	; 0x84
 800ece0:	af12      	add	r7, sp, #72	; 0x48
 800ece2:	4603      	mov	r3, r0
 800ece4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 800ece8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ecec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecf0:	4611      	mov	r1, r2
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 fa12 	bl	800f11c <SecureElementGetKeyByID>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d174      	bne.n	800ede8 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ecfe:	2300      	movs	r3, #0
 800ed00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ed04:	e06c      	b.n	800ede0 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 800ed06:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed0a:	4939      	ldr	r1, [pc, #228]	; (800edf0 <PrintKey+0x114>)
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	4413      	add	r3, r2
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	440b      	add	r3, r1
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ed1c:	429a      	cmp	r2, r3
 800ed1e:	d15a      	bne.n	800edd6 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 800ed20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ed24:	4932      	ldr	r1, [pc, #200]	; (800edf0 <PrintKey+0x114>)
 800ed26:	4613      	mov	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4413      	add	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	440b      	add	r3, r1
 800ed30:	3308      	adds	r3, #8
 800ed32:	6819      	ldr	r1, [r3, #0]
 800ed34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed36:	785b      	ldrb	r3, [r3, #1]
 800ed38:	461d      	mov	r5, r3
 800ed3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed3c:	789b      	ldrb	r3, [r3, #2]
 800ed3e:	461e      	mov	r6, r3
 800ed40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed42:	78db      	ldrb	r3, [r3, #3]
 800ed44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed48:	791b      	ldrb	r3, [r3, #4]
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4e:	795b      	ldrb	r3, [r3, #5]
 800ed50:	623b      	str	r3, [r7, #32]
 800ed52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed54:	799b      	ldrb	r3, [r3, #6]
 800ed56:	61fb      	str	r3, [r7, #28]
 800ed58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed5a:	79db      	ldrb	r3, [r3, #7]
 800ed5c:	61bb      	str	r3, [r7, #24]
 800ed5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed60:	7a1b      	ldrb	r3, [r3, #8]
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	7a5b      	ldrb	r3, [r3, #9]
 800ed68:	613b      	str	r3, [r7, #16]
 800ed6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed6c:	7a9b      	ldrb	r3, [r3, #10]
 800ed6e:	60fb      	str	r3, [r7, #12]
 800ed70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed72:	7adb      	ldrb	r3, [r3, #11]
 800ed74:	60bb      	str	r3, [r7, #8]
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	7b1b      	ldrb	r3, [r3, #12]
 800ed7a:	607b      	str	r3, [r7, #4]
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed7e:	7b5b      	ldrb	r3, [r3, #13]
 800ed80:	461c      	mov	r4, r3
 800ed82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed84:	7b9b      	ldrb	r3, [r3, #14]
 800ed86:	4618      	mov	r0, r3
 800ed88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed8a:	7bdb      	ldrb	r3, [r3, #15]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed90:	7c1b      	ldrb	r3, [r3, #16]
 800ed92:	9310      	str	r3, [sp, #64]	; 0x40
 800ed94:	920f      	str	r2, [sp, #60]	; 0x3c
 800ed96:	900e      	str	r0, [sp, #56]	; 0x38
 800ed98:	940d      	str	r4, [sp, #52]	; 0x34
 800ed9a:	687a      	ldr	r2, [r7, #4]
 800ed9c:	920c      	str	r2, [sp, #48]	; 0x30
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	920b      	str	r2, [sp, #44]	; 0x2c
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	920a      	str	r2, [sp, #40]	; 0x28
 800eda6:	693a      	ldr	r2, [r7, #16]
 800eda8:	9209      	str	r2, [sp, #36]	; 0x24
 800edaa:	697a      	ldr	r2, [r7, #20]
 800edac:	9208      	str	r2, [sp, #32]
 800edae:	69ba      	ldr	r2, [r7, #24]
 800edb0:	9207      	str	r2, [sp, #28]
 800edb2:	69fa      	ldr	r2, [r7, #28]
 800edb4:	9206      	str	r2, [sp, #24]
 800edb6:	6a3a      	ldr	r2, [r7, #32]
 800edb8:	9205      	str	r2, [sp, #20]
 800edba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edbc:	9204      	str	r2, [sp, #16]
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	9303      	str	r3, [sp, #12]
 800edc2:	9602      	str	r6, [sp, #8]
 800edc4:	9501      	str	r5, [sp, #4]
 800edc6:	9100      	str	r1, [sp, #0]
 800edc8:	4b0a      	ldr	r3, [pc, #40]	; (800edf4 <PrintKey+0x118>)
 800edca:	2200      	movs	r2, #0
 800edcc:	2100      	movs	r1, #0
 800edce:	2002      	movs	r0, #2
 800edd0:	f00f fbc6 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
 800edd4:	e008      	b.n	800ede8 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800edd6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800edda:	3301      	adds	r3, #1
 800eddc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ede0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ede4:	2b0a      	cmp	r3, #10
 800ede6:	d98e      	bls.n	800ed06 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 800ede8:	373c      	adds	r7, #60	; 0x3c
 800edea:	46bd      	mov	sp, r7
 800edec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edee:	bf00      	nop
 800edf0:	0801f924 	.word	0x0801f924
 800edf4:	0801f1bc 	.word	0x0801f1bc

0800edf8 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 800edf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800edfa:	b091      	sub	sp, #68	; 0x44
 800edfc:	af08      	add	r7, sp, #32
 800edfe:	4603      	mov	r3, r0
 800ee00:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 800ee02:	2300      	movs	r3, #0
 800ee04:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 800ee06:	f107 0310 	add.w	r3, r7, #16
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 fbf0 	bl	800f5f0 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 800ee10:	7c3b      	ldrb	r3, [r7, #16]
 800ee12:	7c7a      	ldrb	r2, [r7, #17]
 800ee14:	7cb9      	ldrb	r1, [r7, #18]
 800ee16:	7cf8      	ldrb	r0, [r7, #19]
 800ee18:	7d3c      	ldrb	r4, [r7, #20]
 800ee1a:	7d7d      	ldrb	r5, [r7, #21]
 800ee1c:	7dbe      	ldrb	r6, [r7, #22]
 800ee1e:	f897 c017 	ldrb.w	ip, [r7, #23]
 800ee22:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee26:	9606      	str	r6, [sp, #24]
 800ee28:	9505      	str	r5, [sp, #20]
 800ee2a:	9404      	str	r4, [sp, #16]
 800ee2c:	9003      	str	r0, [sp, #12]
 800ee2e:	9102      	str	r1, [sp, #8]
 800ee30:	9201      	str	r2, [sp, #4]
 800ee32:	9300      	str	r3, [sp, #0]
 800ee34:	4b24      	ldr	r3, [pc, #144]	; (800eec8 <PrintIds+0xd0>)
 800ee36:	2200      	movs	r2, #0
 800ee38:	2100      	movs	r1, #0
 800ee3a:	2002      	movs	r0, #2
 800ee3c:	f00f fb90 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 800ee40:	f107 0318 	add.w	r3, r7, #24
 800ee44:	4618      	mov	r0, r3
 800ee46:	f000 fc03 	bl	800f650 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 800ee4a:	7e3b      	ldrb	r3, [r7, #24]
 800ee4c:	7e7a      	ldrb	r2, [r7, #25]
 800ee4e:	7eb9      	ldrb	r1, [r7, #26]
 800ee50:	7ef8      	ldrb	r0, [r7, #27]
 800ee52:	7f3c      	ldrb	r4, [r7, #28]
 800ee54:	7f7d      	ldrb	r5, [r7, #29]
 800ee56:	7fbe      	ldrb	r6, [r7, #30]
 800ee58:	f897 c01f 	ldrb.w	ip, [r7, #31]
 800ee5c:	f8cd c01c 	str.w	ip, [sp, #28]
 800ee60:	9606      	str	r6, [sp, #24]
 800ee62:	9505      	str	r5, [sp, #20]
 800ee64:	9404      	str	r4, [sp, #16]
 800ee66:	9003      	str	r0, [sp, #12]
 800ee68:	9102      	str	r1, [sp, #8]
 800ee6a:	9201      	str	r2, [sp, #4]
 800ee6c:	9300      	str	r3, [sp, #0]
 800ee6e:	4b17      	ldr	r3, [pc, #92]	; (800eecc <PrintIds+0xd4>)
 800ee70:	2200      	movs	r2, #0
 800ee72:	2100      	movs	r1, #0
 800ee74:	2002      	movs	r0, #2
 800ee76:	f00f fb73 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 800ee7a:	f107 020c 	add.w	r2, r7, #12
 800ee7e:	79fb      	ldrb	r3, [r7, #7]
 800ee80:	4611      	mov	r1, r2
 800ee82:	4618      	mov	r0, r3
 800ee84:	f000 fc16 	bl	800f6b4 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800ee88:	f107 030c 	add.w	r3, r7, #12
 800ee8c:	3303      	adds	r3, #3
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	461a      	mov	r2, r3
 800ee92:	f107 030c 	add.w	r3, r7, #12
 800ee96:	3302      	adds	r3, #2
 800ee98:	781b      	ldrb	r3, [r3, #0]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	f107 030c 	add.w	r3, r7, #12
 800eea0:	3301      	adds	r3, #1
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	4618      	mov	r0, r3
 800eea6:	f107 030c 	add.w	r3, r7, #12
 800eeaa:	781b      	ldrb	r3, [r3, #0]
 800eeac:	9303      	str	r3, [sp, #12]
 800eeae:	9002      	str	r0, [sp, #8]
 800eeb0:	9101      	str	r1, [sp, #4]
 800eeb2:	9200      	str	r2, [sp, #0]
 800eeb4:	4b06      	ldr	r3, [pc, #24]	; (800eed0 <PrintIds+0xd8>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	2100      	movs	r1, #0
 800eeba:	2002      	movs	r0, #2
 800eebc:	f00f fb50 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 800eec0:	bf00      	nop
 800eec2:	3724      	adds	r7, #36	; 0x24
 800eec4:	46bd      	mov	sp, r7
 800eec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec8:	0801f218 	.word	0x0801f218
 800eecc:	0801f258 	.word	0x0801f258
 800eed0:	0801f298 	.word	0x0801f298

0800eed4 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800eed4:	b480      	push	{r7}
 800eed6:	b085      	sub	sp, #20
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	4603      	mov	r3, r0
 800eedc:	6039      	str	r1, [r7, #0]
 800eede:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800eee0:	2300      	movs	r3, #0
 800eee2:	73fb      	strb	r3, [r7, #15]
 800eee4:	e01a      	b.n	800ef1c <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800eee6:	4b12      	ldr	r3, [pc, #72]	; (800ef30 <GetKeyByID+0x5c>)
 800eee8:	6819      	ldr	r1, [r3, #0]
 800eeea:	7bfa      	ldrb	r2, [r7, #15]
 800eeec:	4613      	mov	r3, r2
 800eeee:	011b      	lsls	r3, r3, #4
 800eef0:	4413      	add	r3, r2
 800eef2:	440b      	add	r3, r1
 800eef4:	3318      	adds	r3, #24
 800eef6:	781b      	ldrb	r3, [r3, #0]
 800eef8:	79fa      	ldrb	r2, [r7, #7]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d10b      	bne.n	800ef16 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800eefe:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <GetKeyByID+0x5c>)
 800ef00:	6819      	ldr	r1, [r3, #0]
 800ef02:	7bfa      	ldrb	r2, [r7, #15]
 800ef04:	4613      	mov	r3, r2
 800ef06:	011b      	lsls	r3, r3, #4
 800ef08:	4413      	add	r3, r2
 800ef0a:	3318      	adds	r3, #24
 800ef0c:	18ca      	adds	r2, r1, r3
 800ef0e:	683b      	ldr	r3, [r7, #0]
 800ef10:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800ef12:	2300      	movs	r3, #0
 800ef14:	e006      	b.n	800ef24 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800ef16:	7bfb      	ldrb	r3, [r7, #15]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	73fb      	strb	r3, [r7, #15]
 800ef1c:	7bfb      	ldrb	r3, [r7, #15]
 800ef1e:	2b0a      	cmp	r3, #10
 800ef20:	d9e1      	bls.n	800eee6 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800ef22:	2303      	movs	r3, #3
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bc80      	pop	{r7}
 800ef2c:	4770      	bx	lr
 800ef2e:	bf00      	nop
 800ef30:	20000788 	.word	0x20000788

0800ef34 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 800ef34:	b590      	push	{r4, r7, lr}
 800ef36:	b0d1      	sub	sp, #324	; 0x144
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800ef3e:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800ef42:	6020      	str	r0, [r4, #0]
 800ef44:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 800ef48:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800ef4c:	6001      	str	r1, [r0, #0]
 800ef4e:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800ef52:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ef56:	600a      	str	r2, [r1, #0]
 800ef58:	461a      	mov	r2, r3
 800ef5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef5e:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef62:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800ef64:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef68:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d003      	beq.n	800ef7a <ComputeCmac+0x46>
 800ef72:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d101      	bne.n	800ef7e <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	e05d      	b.n	800f03a <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800ef7e:	f107 0314 	add.w	r3, r7, #20
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe ff02 	bl	800dd8c <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800ef88:	f107 0210 	add.w	r2, r7, #16
 800ef8c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ef90:	f2a3 133d 	subw	r3, r3, #317	; 0x13d
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	4611      	mov	r1, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7ff ff9b 	bl	800eed4 <GetKeyByID>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800efa4:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d144      	bne.n	800f036 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800efac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	f107 0314 	add.w	r3, r7, #20
 800efbc:	4611      	mov	r1, r2
 800efbe:	4618      	mov	r0, r3
 800efc0:	f7fe fefd 	bl	800ddbe <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800efc4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efc8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d009      	beq.n	800efe6 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 800efd2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efd6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800efda:	f107 0014 	add.w	r0, r7, #20
 800efde:	2210      	movs	r2, #16
 800efe0:	6819      	ldr	r1, [r3, #0]
 800efe2:	f7fe fefb 	bl	800dddc <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800efe6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800efea:	f5a3 729e 	sub.w	r2, r3, #316	; 0x13c
 800efee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800eff2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800eff6:	f107 0014 	add.w	r0, r7, #20
 800effa:	6812      	ldr	r2, [r2, #0]
 800effc:	6819      	ldr	r1, [r3, #0]
 800effe:	f7fe feed 	bl	800dddc <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800f002:	f107 0214 	add.w	r2, r7, #20
 800f006:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800f00a:	4611      	mov	r1, r2
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7fe ffa7 	bl	800df60 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 800f012:	f897 312c 	ldrb.w	r3, [r7, #300]	; 0x12c
 800f016:	461a      	mov	r2, r3
 800f018:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	431a      	orrs	r2, r3
 800f020:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800f024:	041b      	lsls	r3, r3, #16
 800f026:	431a      	orrs	r2, r3
 800f028:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800f02c:	061b      	lsls	r3, r3, #24
 800f02e:	431a      	orrs	r2, r3
 800f030:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f034:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800f036:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800f040:	46bd      	mov	sp, r7
 800f042:	bd90      	pop	{r4, r7, pc}

0800f044 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b082      	sub	sp, #8
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d101      	bne.n	800f056 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f052:	2302      	movs	r3, #2
 800f054:	e00a      	b.n	800f06c <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 800f056:	4a07      	ldr	r2, [pc, #28]	; (800f074 <SecureElementInit+0x30>)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 800f05c:	4b05      	ldr	r3, [pc, #20]	; (800f074 <SecureElementInit+0x30>)
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	22d8      	movs	r2, #216	; 0xd8
 800f062:	4905      	ldr	r1, [pc, #20]	; (800f078 <SecureElementInit+0x34>)
 800f064:	4618      	mov	r0, r3
 800f066:	f00a fed6 	bl	8019e16 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 800f06a:	2300      	movs	r3, #0
}
 800f06c:	4618      	mov	r0, r3
 800f06e:	3708      	adds	r7, #8
 800f070:	46bd      	mov	sp, r7
 800f072:	bd80      	pop	{r7, pc}
 800f074:	20000788 	.word	0x20000788
 800f078:	0801fb40 	.word	0x0801fb40

0800f07c <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b086      	sub	sp, #24
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
 800f084:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 800f086:	2300      	movs	r3, #0
 800f088:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 800f08a:	f107 030c 	add.w	r3, r7, #12
 800f08e:	4618      	mov	r0, r3
 800f090:	f000 faae 	bl	800f5f0 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 800f094:	f107 0308 	add.w	r3, r7, #8
 800f098:	4619      	mov	r1, r3
 800f09a:	2001      	movs	r0, #1
 800f09c:	f000 fb0a 	bl	800f6b4 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d024      	beq.n	800f0f0 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 800f0a6:	2300      	movs	r3, #0
 800f0a8:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	75bb      	strb	r3, [r7, #22]
 800f0ae:	e00c      	b.n	800f0ca <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 800f0b0:	7dbb      	ldrb	r3, [r7, #22]
 800f0b2:	3318      	adds	r3, #24
 800f0b4:	443b      	add	r3, r7
 800f0b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 800f0be:	2301      	movs	r3, #1
 800f0c0:	75fb      	strb	r3, [r7, #23]
                break;
 800f0c2:	e005      	b.n	800f0d0 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 800f0c4:	7dbb      	ldrb	r3, [r7, #22]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	75bb      	strb	r3, [r7, #22]
 800f0ca:	7dbb      	ldrb	r3, [r7, #22]
 800f0cc:	2b07      	cmp	r3, #7
 800f0ce:	d9ef      	bls.n	800f0b0 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 800f0d0:	7dfb      	ldrb	r3, [r7, #23]
 800f0d2:	f083 0301 	eor.w	r3, r3, #1
 800f0d6:	b2db      	uxtb	r3, r3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d009      	beq.n	800f0f0 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 800f0dc:	f107 020c 	add.w	r2, r7, #12
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4610      	mov	r0, r2
 800f0e4:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 800f0e6:	f107 030c 	add.w	r3, r7, #12
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fa68 	bl	800f5c0 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00c      	beq.n	800f110 <SecureElementInitMcuID+0x94>
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d109      	bne.n	800f110 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 800f0fc:	f107 0208 	add.w	r2, r7, #8
 800f100:	683b      	ldr	r3, [r7, #0]
 800f102:	4610      	mov	r0, r2
 800f104:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	4619      	mov	r1, r3
 800f10a:	2001      	movs	r0, #1
 800f10c:	f000 fab8 	bl	800f680 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f110:	2300      	movs	r3, #0
}
 800f112:	4618      	mov	r0, r3
 800f114:	3718      	adds	r7, #24
 800f116:	46bd      	mov	sp, r7
 800f118:	bd80      	pop	{r7, pc}
	...

0800f11c <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	6039      	str	r1, [r7, #0]
 800f126:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f128:	2300      	movs	r3, #0
 800f12a:	73fb      	strb	r3, [r7, #15]
 800f12c:	e01a      	b.n	800f164 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f12e:	4b12      	ldr	r3, [pc, #72]	; (800f178 <SecureElementGetKeyByID+0x5c>)
 800f130:	6819      	ldr	r1, [r3, #0]
 800f132:	7bfa      	ldrb	r2, [r7, #15]
 800f134:	4613      	mov	r3, r2
 800f136:	011b      	lsls	r3, r3, #4
 800f138:	4413      	add	r3, r2
 800f13a:	440b      	add	r3, r1
 800f13c:	3318      	adds	r3, #24
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	79fa      	ldrb	r2, [r7, #7]
 800f142:	429a      	cmp	r2, r3
 800f144:	d10b      	bne.n	800f15e <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800f146:	4b0c      	ldr	r3, [pc, #48]	; (800f178 <SecureElementGetKeyByID+0x5c>)
 800f148:	6819      	ldr	r1, [r3, #0]
 800f14a:	7bfa      	ldrb	r2, [r7, #15]
 800f14c:	4613      	mov	r3, r2
 800f14e:	011b      	lsls	r3, r3, #4
 800f150:	4413      	add	r3, r2
 800f152:	3318      	adds	r3, #24
 800f154:	18ca      	adds	r2, r1, r3
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800f15a:	2300      	movs	r3, #0
 800f15c:	e006      	b.n	800f16c <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f15e:	7bfb      	ldrb	r3, [r7, #15]
 800f160:	3301      	adds	r3, #1
 800f162:	73fb      	strb	r3, [r7, #15]
 800f164:	7bfb      	ldrb	r3, [r7, #15]
 800f166:	2b0a      	cmp	r3, #10
 800f168:	d9e1      	bls.n	800f12e <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f16a:	2303      	movs	r3, #3
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3714      	adds	r7, #20
 800f170:	46bd      	mov	sp, r7
 800f172:	bc80      	pop	{r7}
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	20000788 	.word	0x20000788

0800f17c <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 800f180:	2000      	movs	r0, #0
 800f182:	f7ff fdab 	bl	800ecdc <PrintKey>
    PrintKey( NWK_KEY );
 800f186:	2001      	movs	r0, #1
 800f188:	f7ff fda8 	bl	800ecdc <PrintKey>
    PrintKey( APP_S_KEY );
 800f18c:	2009      	movs	r0, #9
 800f18e:	f7ff fda5 	bl	800ecdc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f192:	2008      	movs	r0, #8
 800f194:	f7ff fda2 	bl	800ecdc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 800f198:	2000      	movs	r0, #0
 800f19a:	f7ff fe2d 	bl	800edf8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 800f1ae:	200b      	movs	r0, #11
 800f1b0:	f7ff fd94 	bl	800ecdc <PrintKey>
    PrintKey( MC_KE_KEY );
 800f1b4:	200c      	movs	r0, #12
 800f1b6:	f7ff fd91 	bl	800ecdc <PrintKey>
    PrintKey( APP_S_KEY );
 800f1ba:	2009      	movs	r0, #9
 800f1bc:	f7ff fd8e 	bl	800ecdc <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 800f1c0:	2008      	movs	r0, #8
 800f1c2:	f7ff fd8b 	bl	800ecdc <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 800f1c6:	200a      	movs	r0, #10
 800f1c8:	f7ff fd88 	bl	800ecdc <PrintKey>
    PrintIds( mode );
 800f1cc:	79fb      	ldrb	r3, [r7, #7]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7ff fe12 	bl	800edf8 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 800f1d4:	2300      	movs	r3, #0
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b088      	sub	sp, #32
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	6039      	str	r1, [r7, #0]
 800f1ea:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800f1ec:	683b      	ldr	r3, [r7, #0]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d101      	bne.n	800f1f6 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f1f2:	2302      	movs	r3, #2
 800f1f4:	e04c      	b.n	800f290 <SecureElementSetKey+0xb0>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	77fb      	strb	r3, [r7, #31]
 800f1fa:	e045      	b.n	800f288 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800f1fc:	4b26      	ldr	r3, [pc, #152]	; (800f298 <SecureElementSetKey+0xb8>)
 800f1fe:	6819      	ldr	r1, [r3, #0]
 800f200:	7ffa      	ldrb	r2, [r7, #31]
 800f202:	4613      	mov	r3, r2
 800f204:	011b      	lsls	r3, r3, #4
 800f206:	4413      	add	r3, r2
 800f208:	440b      	add	r3, r1
 800f20a:	3318      	adds	r3, #24
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	79fa      	ldrb	r2, [r7, #7]
 800f210:	429a      	cmp	r2, r3
 800f212:	d136      	bne.n	800f282 <SecureElementSetKey+0xa2>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 800f214:	79fb      	ldrb	r3, [r7, #7]
 800f216:	2b0d      	cmp	r3, #13
 800f218:	d123      	bne.n	800f262 <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800f21a:	2306      	movs	r3, #6
 800f21c:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 800f21e:	2300      	movs	r3, #0
 800f220:	60fb      	str	r3, [r7, #12]
 800f222:	f107 0310 	add.w	r3, r7, #16
 800f226:	2200      	movs	r2, #0
 800f228:	601a      	str	r2, [r3, #0]
 800f22a:	605a      	str	r2, [r3, #4]
 800f22c:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 800f22e:	f107 030c 	add.w	r3, r7, #12
 800f232:	220c      	movs	r2, #12
 800f234:	2110      	movs	r1, #16
 800f236:	6838      	ldr	r0, [r7, #0]
 800f238:	f000 f876 	bl	800f328 <SecureElementAesEncrypt>
 800f23c:	4603      	mov	r3, r0
 800f23e:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800f240:	4b15      	ldr	r3, [pc, #84]	; (800f298 <SecureElementSetKey+0xb8>)
 800f242:	6819      	ldr	r1, [r3, #0]
 800f244:	7ffa      	ldrb	r2, [r7, #31]
 800f246:	4613      	mov	r3, r2
 800f248:	011b      	lsls	r3, r3, #4
 800f24a:	4413      	add	r3, r2
 800f24c:	3318      	adds	r3, #24
 800f24e:	440b      	add	r3, r1
 800f250:	3301      	adds	r3, #1
 800f252:	f107 010c 	add.w	r1, r7, #12
 800f256:	2210      	movs	r2, #16
 800f258:	4618      	mov	r0, r3
 800f25a:	f00a fddc 	bl	8019e16 <memcpy1>
                return retval;
 800f25e:	7fbb      	ldrb	r3, [r7, #30]
 800f260:	e016      	b.n	800f290 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800f262:	4b0d      	ldr	r3, [pc, #52]	; (800f298 <SecureElementSetKey+0xb8>)
 800f264:	6819      	ldr	r1, [r3, #0]
 800f266:	7ffa      	ldrb	r2, [r7, #31]
 800f268:	4613      	mov	r3, r2
 800f26a:	011b      	lsls	r3, r3, #4
 800f26c:	4413      	add	r3, r2
 800f26e:	3318      	adds	r3, #24
 800f270:	440b      	add	r3, r1
 800f272:	3301      	adds	r3, #1
 800f274:	2210      	movs	r2, #16
 800f276:	6839      	ldr	r1, [r7, #0]
 800f278:	4618      	mov	r0, r3
 800f27a:	f00a fdcc 	bl	8019e16 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800f27e:	2300      	movs	r3, #0
 800f280:	e006      	b.n	800f290 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800f282:	7ffb      	ldrb	r3, [r7, #31]
 800f284:	3301      	adds	r3, #1
 800f286:	77fb      	strb	r3, [r7, #31]
 800f288:	7ffb      	ldrb	r3, [r7, #31]
 800f28a:	2b0a      	cmp	r3, #10
 800f28c:	d9b6      	bls.n	800f1fc <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f28e:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f290:	4618      	mov	r0, r3
 800f292:	3720      	adds	r7, #32
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	20000788 	.word	0x20000788

0800f29c <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b086      	sub	sp, #24
 800f2a0:	af02      	add	r7, sp, #8
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
 800f2a8:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 800f2aa:	78fb      	ldrb	r3, [r7, #3]
 800f2ac:	2b0b      	cmp	r3, #11
 800f2ae:	d901      	bls.n	800f2b4 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f2b0:	2303      	movs	r3, #3
 800f2b2:	e009      	b.n	800f2c8 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800f2b4:	78fa      	ldrb	r2, [r7, #3]
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	9300      	str	r3, [sp, #0]
 800f2ba:	4613      	mov	r3, r2
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	68f8      	ldr	r0, [r7, #12]
 800f2c2:	f7ff fe37 	bl	800ef34 <ComputeCmac>
 800f2c6:	4603      	mov	r3, r0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3710      	adds	r7, #16
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b088      	sub	sp, #32
 800f2d4:	af02      	add	r7, sp, #8
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	60b9      	str	r1, [r7, #8]
 800f2da:	607a      	str	r2, [r7, #4]
 800f2dc:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d101      	bne.n	800f2e8 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f2e4:	2302      	movs	r3, #2
 800f2e6:	e01b      	b.n	800f320 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800f2e8:	2306      	movs	r3, #6
 800f2ea:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800f2f0:	78fa      	ldrb	r2, [r7, #3]
 800f2f2:	f107 0310 	add.w	r3, r7, #16
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	68ba      	ldr	r2, [r7, #8]
 800f2fc:	68f9      	ldr	r1, [r7, #12]
 800f2fe:	2000      	movs	r0, #0
 800f300:	f7ff fe18 	bl	800ef34 <ComputeCmac>
 800f304:	4603      	mov	r3, r0
 800f306:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f308:	7dfb      	ldrb	r3, [r7, #23]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 800f30e:	7dfb      	ldrb	r3, [r7, #23]
 800f310:	e006      	b.n	800f320 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 800f312:	693b      	ldr	r3, [r7, #16]
 800f314:	687a      	ldr	r2, [r7, #4]
 800f316:	429a      	cmp	r2, r3
 800f318:	d001      	beq.n	800f31e <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800f31a:	2301      	movs	r3, #1
 800f31c:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800f31e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3718      	adds	r7, #24
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b0c2      	sub	sp, #264	; 0x108
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800f334:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 800f338:	6001      	str	r1, [r0, #0]
 800f33a:	4611      	mov	r1, r2
 800f33c:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f340:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f34a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f34e:	460a      	mov	r2, r1
 800f350:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d006      	beq.n	800f366 <SecureElementAesEncrypt+0x3e>
 800f358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f35c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d101      	bne.n	800f36a <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f366:	2302      	movs	r3, #2
 800f368:	e059      	b.n	800f41e <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 800f36a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f36e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f003 030f 	and.w	r3, r3, #15
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d001      	beq.n	800f380 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f37c:	2305      	movs	r3, #5
 800f37e:	e04e      	b.n	800f41e <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800f380:	f107 0314 	add.w	r3, r7, #20
 800f384:	22f0      	movs	r2, #240	; 0xf0
 800f386:	2100      	movs	r1, #0
 800f388:	4618      	mov	r0, r3
 800f38a:	f00a fd7f 	bl	8019e8c <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800f38e:	f107 0210 	add.w	r2, r7, #16
 800f392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f396:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800f39a:	781b      	ldrb	r3, [r3, #0]
 800f39c:	4611      	mov	r1, r2
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f7ff fd98 	bl	800eed4 <GetKeyByID>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800f3aa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d133      	bne.n	800f41a <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	3301      	adds	r3, #1
 800f3b6:	f107 0214 	add.w	r2, r7, #20
 800f3ba:	2110      	movs	r1, #16
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff fb65 	bl	800ea8c <lorawan_aes_set_key>

        uint8_t block = 0;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107

        while( size != 0 )
 800f3c8:	e020      	b.n	800f40c <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 800f3ca:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3ce:	68fa      	ldr	r2, [r7, #12]
 800f3d0:	18d0      	adds	r0, r2, r3
 800f3d2:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3d6:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f3da:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800f3de:	6812      	ldr	r2, [r2, #0]
 800f3e0:	4413      	add	r3, r2
 800f3e2:	f107 0214 	add.w	r2, r7, #20
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	f7ff fc2e 	bl	800ec48 <lorawan_aes_encrypt>
            block = block + 16;
 800f3ec:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
            size  = size - 16;
 800f3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f3fa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f3fe:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800f402:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800f406:	6812      	ldr	r2, [r2, #0]
 800f408:	3a10      	subs	r2, #16
 800f40a:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 800f40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800f410:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d1d7      	bne.n	800f3ca <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800f41a:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
}
 800f41e:	4618      	mov	r0, r3
 800f420:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
 800f430:	460b      	mov	r3, r1
 800f432:	70fb      	strb	r3, [r7, #3]
 800f434:	4613      	mov	r3, r2
 800f436:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d101      	bne.n	800f442 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f43e:	2302      	movs	r3, #2
 800f440:	e02e      	b.n	800f4a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800f442:	2306      	movs	r3, #6
 800f444:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 800f446:	78bb      	ldrb	r3, [r7, #2]
 800f448:	2b0c      	cmp	r3, #12
 800f44a:	d104      	bne.n	800f456 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800f44c:	78fb      	ldrb	r3, [r7, #3]
 800f44e:	2b0b      	cmp	r3, #11
 800f450:	d001      	beq.n	800f456 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800f452:	2303      	movs	r3, #3
 800f454:	e024      	b.n	800f4a0 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 800f456:	2300      	movs	r3, #0
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	f107 0310 	add.w	r3, r7, #16
 800f45e:	2200      	movs	r2, #0
 800f460:	601a      	str	r2, [r3, #0]
 800f462:	605a      	str	r2, [r3, #4]
 800f464:	609a      	str	r2, [r3, #8]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 800f466:	f107 030c 	add.w	r3, r7, #12
 800f46a:	78fa      	ldrb	r2, [r7, #3]
 800f46c:	2110      	movs	r1, #16
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f7ff ff5a 	bl	800f328 <SecureElementAesEncrypt>
 800f474:	4603      	mov	r3, r0
 800f476:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f478:	7ffb      	ldrb	r3, [r7, #31]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d001      	beq.n	800f482 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800f47e:	7ffb      	ldrb	r3, [r7, #31]
 800f480:	e00e      	b.n	800f4a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 800f482:	f107 020c 	add.w	r2, r7, #12
 800f486:	78bb      	ldrb	r3, [r7, #2]
 800f488:	4611      	mov	r1, r2
 800f48a:	4618      	mov	r0, r3
 800f48c:	f7ff fea8 	bl	800f1e0 <SecureElementSetKey>
 800f490:	4603      	mov	r3, r0
 800f492:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800f494:	7ffb      	ldrb	r3, [r7, #31]
 800f496:	2b00      	cmp	r3, #0
 800f498:	d001      	beq.n	800f49e <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800f49a:	7ffb      	ldrb	r3, [r7, #31]
 800f49c:	e000      	b.n	800f4a0 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f49e:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3720      	adds	r7, #32
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b086      	sub	sp, #24
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60b9      	str	r1, [r7, #8]
 800f4b0:	607b      	str	r3, [r7, #4]
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	73fb      	strb	r3, [r7, #15]
 800f4b6:	4613      	mov	r3, r2
 800f4b8:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <SecureElementProcessJoinAccept+0x24>
 800f4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d002      	beq.n	800f4cc <SecureElementProcessJoinAccept+0x24>
 800f4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d101      	bne.n	800f4d0 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f4cc:	2302      	movs	r3, #2
 800f4ce:	e05c      	b.n	800f58a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800f4d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4d4:	2b21      	cmp	r3, #33	; 0x21
 800f4d6:	d901      	bls.n	800f4dc <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800f4d8:	2305      	movs	r3, #5
 800f4da:	e056      	b.n	800f58a <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800f4e0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f4ec:	f00a fc93 	bl	8019e16 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	1c58      	adds	r0, r3, #1
 800f4f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	4619      	mov	r1, r3
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4fe:	3301      	adds	r3, #1
 800f500:	7dfa      	ldrb	r2, [r7, #23]
 800f502:	f7ff ff11 	bl	800f328 <SecureElementAesEncrypt>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800f50c:	2307      	movs	r3, #7
 800f50e:	e03c      	b.n	800f58a <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	330b      	adds	r3, #11
 800f514:	781b      	ldrb	r3, [r3, #0]
 800f516:	09db      	lsrs	r3, r3, #7
 800f518:	b2da      	uxtb	r2, r3
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 800f51e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f522:	3b04      	subs	r3, #4
 800f524:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f526:	4413      	add	r3, r2
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	4619      	mov	r1, r3
 800f52c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f530:	3b03      	subs	r3, #3
 800f532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f534:	4413      	add	r3, r2
 800f536:	781b      	ldrb	r3, [r3, #0]
 800f538:	021b      	lsls	r3, r3, #8
 800f53a:	ea41 0203 	orr.w	r2, r1, r3
 800f53e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f542:	3b02      	subs	r3, #2
 800f544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f546:	440b      	add	r3, r1
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	041b      	lsls	r3, r3, #16
 800f54c:	431a      	orrs	r2, r3
 800f54e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f552:	3b01      	subs	r3, #1
 800f554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f556:	440b      	add	r3, r1
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	061b      	lsls	r3, r3, #24
 800f55c:	4313      	orrs	r3, r2
 800f55e:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 800f560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	d10d      	bne.n	800f584 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800f568:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f56c:	3b04      	subs	r3, #4
 800f56e:	4619      	mov	r1, r3
 800f570:	2301      	movs	r3, #1
 800f572:	693a      	ldr	r2, [r7, #16]
 800f574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f576:	f7ff feab 	bl	800f2d0 <SecureElementVerifyAesCmac>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d003      	beq.n	800f588 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800f580:	2301      	movs	r3, #1
 800f582:	e002      	b.n	800f58a <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800f584:	2304      	movs	r3, #4
 800f586:	e000      	b.n	800f58a <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3718      	adds	r7, #24
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <SecureElementRandomNumber>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
SecureElementStatus_t SecureElementRandomNumber( uint32_t *randomNum )
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
    if( randomNum == NULL )
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <SecureElementRandomNumber+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5a2:	2302      	movs	r3, #2
 800f5a4:	e006      	b.n	800f5b4 <SecureElementRandomNumber+0x20>
    }
    *randomNum = Radio.Random();
 800f5a6:	4b05      	ldr	r3, [pc, #20]	; (800f5bc <SecureElementRandomNumber+0x28>)
 800f5a8:	695b      	ldr	r3, [r3, #20]
 800f5aa:	4798      	blx	r3
 800f5ac:	4602      	mov	r2, r0
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	601a      	str	r2, [r3, #0]
    return SECURE_ELEMENT_SUCCESS;
 800f5b2:	2300      	movs	r3, #0
}
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}
 800f5bc:	0801f9f0 	.word	0x0801f9f0

0800f5c0 <SecureElementSetDevEui>:
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d101      	bne.n	800f5d2 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5ce:	2302      	movs	r3, #2
 800f5d0:	e007      	b.n	800f5e2 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 800f5d2:	4b06      	ldr	r3, [pc, #24]	; (800f5ec <SecureElementSetDevEui+0x2c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2208      	movs	r2, #8
 800f5d8:	6879      	ldr	r1, [r7, #4]
 800f5da:	4618      	mov	r0, r3
 800f5dc:	f00a fc1b 	bl	8019e16 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f5e0:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20000788 	.word	0x20000788

0800f5f0 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	b082      	sub	sp, #8
 800f5f4:	af00      	add	r7, sp, #0
 800f5f6:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d101      	bne.n	800f602 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f5fe:	2302      	movs	r3, #2
 800f600:	e007      	b.n	800f612 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 800f602:	4b06      	ldr	r3, [pc, #24]	; (800f61c <SecureElementGetDevEui+0x2c>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2208      	movs	r2, #8
 800f608:	4619      	mov	r1, r3
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f00a fc03 	bl	8019e16 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f610:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}
 800f61a:	bf00      	nop
 800f61c:	20000788 	.word	0x20000788

0800f620 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d101      	bne.n	800f632 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f62e:	2302      	movs	r3, #2
 800f630:	e008      	b.n	800f644 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 800f632:	4b06      	ldr	r3, [pc, #24]	; (800f64c <SecureElementSetJoinEui+0x2c>)
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	3308      	adds	r3, #8
 800f638:	2208      	movs	r2, #8
 800f63a:	6879      	ldr	r1, [r7, #4]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f00a fbea 	bl	8019e16 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f642:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f644:	4618      	mov	r0, r3
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	20000788 	.word	0x20000788

0800f650 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 800f650:	b580      	push	{r7, lr}
 800f652:	b082      	sub	sp, #8
 800f654:	af00      	add	r7, sp, #0
 800f656:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f65e:	2302      	movs	r3, #2
 800f660:	e008      	b.n	800f674 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 800f662:	4b06      	ldr	r3, [pc, #24]	; (800f67c <SecureElementGetJoinEui+0x2c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	3308      	adds	r3, #8
 800f668:	2208      	movs	r2, #8
 800f66a:	4619      	mov	r1, r3
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f00a fbd2 	bl	8019e16 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800f672:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 800f674:	4618      	mov	r0, r3
 800f676:	3708      	adds	r7, #8
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}
 800f67c:	20000788 	.word	0x20000788

0800f680 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 800f680:	b480      	push	{r7}
 800f682:	b083      	sub	sp, #12
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	6039      	str	r1, [r7, #0]
 800f68a:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 800f68c:	79fb      	ldrb	r3, [r7, #7]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d104      	bne.n	800f69c <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 800f692:	4b07      	ldr	r3, [pc, #28]	; (800f6b0 <SecureElementSetDevAddr+0x30>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	683a      	ldr	r2, [r7, #0]
 800f698:	611a      	str	r2, [r3, #16]
 800f69a:	e003      	b.n	800f6a4 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 800f69c:	4b04      	ldr	r3, [pc, #16]	; (800f6b0 <SecureElementSetDevAddr+0x30>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	683a      	ldr	r2, [r7, #0]
 800f6a2:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 800f6a4:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	370c      	adds	r7, #12
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bc80      	pop	{r7}
 800f6ae:	4770      	bx	lr
 800f6b0:	20000788 	.word	0x20000788

0800f6b4 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 800f6b4:	b480      	push	{r7}
 800f6b6:	b083      	sub	sp, #12
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	6039      	str	r1, [r7, #0]
 800f6be:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d101      	bne.n	800f6ca <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800f6c6:	2302      	movs	r3, #2
 800f6c8:	e00e      	b.n	800f6e8 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 800f6ca:	79fb      	ldrb	r3, [r7, #7]
 800f6cc:	2b02      	cmp	r3, #2
 800f6ce:	d105      	bne.n	800f6dc <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 800f6d0:	4b08      	ldr	r3, [pc, #32]	; (800f6f4 <SecureElementGetDevAddr+0x40>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	691a      	ldr	r2, [r3, #16]
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	e004      	b.n	800f6e6 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 800f6dc:	4b05      	ldr	r3, [pc, #20]	; (800f6f4 <SecureElementGetDevAddr+0x40>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	695a      	ldr	r2, [r3, #20]
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 800f6e6:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	370c      	adds	r7, #12
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	bc80      	pop	{r7}
 800f6f0:	4770      	bx	lr
 800f6f2:	bf00      	nop
 800f6f4:	20000788 	.word	0x20000788

0800f6f8 <LmHandlerInit>:
static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity );
#endif /* LORAMAC_VERSION */

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800f702:	4a22      	ldr	r2, [pc, #136]	; (800f78c <LmHandlerInit+0x94>)
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800f708:	4b21      	ldr	r3, [pc, #132]	; (800f790 <LmHandlerInit+0x98>)
 800f70a:	4a22      	ldr	r2, [pc, #136]	; (800f794 <LmHandlerInit+0x9c>)
 800f70c:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800f70e:	4b20      	ldr	r3, [pc, #128]	; (800f790 <LmHandlerInit+0x98>)
 800f710:	4a21      	ldr	r2, [pc, #132]	; (800f798 <LmHandlerInit+0xa0>)
 800f712:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800f714:	4b1e      	ldr	r3, [pc, #120]	; (800f790 <LmHandlerInit+0x98>)
 800f716:	4a21      	ldr	r2, [pc, #132]	; (800f79c <LmHandlerInit+0xa4>)
 800f718:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800f71a:	4b1d      	ldr	r3, [pc, #116]	; (800f790 <LmHandlerInit+0x98>)
 800f71c:	4a20      	ldr	r2, [pc, #128]	; (800f7a0 <LmHandlerInit+0xa8>)
 800f71e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800f720:	4b1a      	ldr	r3, [pc, #104]	; (800f78c <LmHandlerInit+0x94>)
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	4a1f      	ldr	r2, [pc, #124]	; (800f7a4 <LmHandlerInit+0xac>)
 800f728:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800f72a:	4b18      	ldr	r3, [pc, #96]	; (800f78c <LmHandlerInit+0x94>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4a1c      	ldr	r2, [pc, #112]	; (800f7a4 <LmHandlerInit+0xac>)
 800f732:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800f734:	4b15      	ldr	r3, [pc, #84]	; (800f78c <LmHandlerInit+0x94>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	4a1a      	ldr	r2, [pc, #104]	; (800f7a4 <LmHandlerInit+0xac>)
 800f73c:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800f73e:	4b13      	ldr	r3, [pc, #76]	; (800f78c <LmHandlerInit+0x94>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68db      	ldr	r3, [r3, #12]
 800f744:	4a17      	ldr	r2, [pc, #92]	; (800f7a4 <LmHandlerInit+0xac>)
 800f746:	60d3      	str	r3, [r2, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800f748:	4b16      	ldr	r3, [pc, #88]	; (800f7a4 <LmHandlerInit+0xac>)
 800f74a:	4a17      	ldr	r2, [pc, #92]	; (800f7a8 <LmHandlerInit+0xb0>)
 800f74c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800f74e:	4b0f      	ldr	r3, [pc, #60]	; (800f78c <LmHandlerInit+0x94>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	4a13      	ldr	r2, [pc, #76]	; (800f7a4 <LmHandlerInit+0xac>)
 800f756:	6153      	str	r3, [r2, #20]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800f758:	4914      	ldr	r1, [pc, #80]	; (800f7ac <LmHandlerInit+0xb4>)
 800f75a:	2000      	movs	r0, #0
 800f75c:	f000 fd44 	bl	80101e8 <LmHandlerPackageRegister>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d002      	beq.n	800f76c <LmHandlerInit+0x74>
    {
        return LORAMAC_HANDLER_ERROR;
 800f766:	f04f 33ff 	mov.w	r3, #4294967295
 800f76a:	e00a      	b.n	800f782 <LmHandlerInit+0x8a>
    }

    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800f76c:	463b      	mov	r3, r7
 800f76e:	4618      	mov	r0, r3
 800f770:	f001 fa30 	bl	8010bd4 <LmhpPackagesRegistrationInit>
 800f774:	4603      	mov	r3, r0
 800f776:	2b00      	cmp	r3, #0
 800f778:	d002      	beq.n	800f780 <LmHandlerInit+0x88>
    {
        return LORAMAC_HANDLER_ERROR;
 800f77a:	f04f 33ff 	mov.w	r3, #4294967295
 800f77e:	e000      	b.n	800f782 <LmHandlerInit+0x8a>
    }

    return LORAMAC_HANDLER_SUCCESS;
 800f780:	2300      	movs	r3, #0
}
 800f782:	4618      	mov	r0, r3
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}
 800f78a:	bf00      	nop
 800f78c:	200007d0 	.word	0x200007d0
 800f790:	200007d4 	.word	0x200007d4
 800f794:	0800fead 	.word	0x0800fead
 800f798:	0800ff21 	.word	0x0800ff21
 800f79c:	08010001 	.word	0x08010001
 800f7a0:	08010155 	.word	0x08010155
 800f7a4:	200007e4 	.word	0x200007e4
 800f7a8:	080105a9 	.word	0x080105a9
 800f7ac:	20000098 	.word	0x20000098

0800f7b0 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b090      	sub	sp, #64	; 0x40
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800f7b8:	2218      	movs	r2, #24
 800f7ba:	6879      	ldr	r1, [r7, #4]
 800f7bc:	4852      	ldr	r0, [pc, #328]	; (800f908 <LmHandlerConfigure+0x158>)
 800f7be:	f00a fb2a 	bl	8019e16 <memcpy1>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800f7c2:	f7fe faa1 	bl	800dd08 <LoraInfo_GetPtr>
 800f7c6:	63f8      	str	r0, [r7, #60]	; 0x3c

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800f7c8:	4b4f      	ldr	r3, [pc, #316]	; (800f908 <LmHandlerConfigure+0x158>)
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	4093      	lsls	r3, r2
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	4013      	ands	r3, r2
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d106      	bne.n	800f7ec <LmHandlerConfigure+0x3c>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800f7de:	4b4b      	ldr	r3, [pc, #300]	; (800f90c <LmHandlerConfigure+0x15c>)
 800f7e0:	2201      	movs	r2, #1
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	f00e febb 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800f7ea:	e7fe      	b.n	800f7ea <LmHandlerConfigure+0x3a>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800f7ec:	4b46      	ldr	r3, [pc, #280]	; (800f908 <LmHandlerConfigure+0x158>)
 800f7ee:	781b      	ldrb	r3, [r3, #0]
 800f7f0:	461a      	mov	r2, r3
 800f7f2:	4947      	ldr	r1, [pc, #284]	; (800f910 <LmHandlerConfigure+0x160>)
 800f7f4:	4847      	ldr	r0, [pc, #284]	; (800f914 <LmHandlerConfigure+0x164>)
 800f7f6:	f004 fbc3 	bl	8013f80 <LoRaMacInitialization>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d002      	beq.n	800f806 <LmHandlerConfigure+0x56>
    {
        return LORAMAC_HANDLER_ERROR;
 800f800:	f04f 33ff 	mov.w	r3, #4294967295
 800f804:	e07c      	b.n	800f900 <LmHandlerConfigure+0x150>
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800f806:	2305      	movs	r3, #5
 800f808:	753b      	strb	r3, [r7, #20]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800f80a:	2300      	movs	r3, #0
 800f80c:	61bb      	str	r3, [r7, #24]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800f80e:	f107 0314 	add.w	r3, r7, #20
 800f812:	4618      	mov	r0, r3
 800f814:	f005 f902 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800f818:	4b3d      	ldr	r3, [pc, #244]	; (800f910 <LmHandlerConfigure+0x160>)
 800f81a:	689b      	ldr	r3, [r3, #8]
 800f81c:	4a3c      	ldr	r2, [pc, #240]	; (800f910 <LmHandlerConfigure+0x160>)
 800f81e:	68d2      	ldr	r2, [r2, #12]
 800f820:	4611      	mov	r1, r2
 800f822:	4618      	mov	r0, r3
 800f824:	f7ff fc2a 	bl	800f07c <SecureElementInitMcuID>
 800f828:	4603      	mov	r3, r0
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d002      	beq.n	800f834 <LmHandlerConfigure+0x84>
    {
        return LORAMAC_HANDLER_ERROR;
 800f82e:	f04f 33ff 	mov.w	r3, #4294967295
 800f832:	e065      	b.n	800f900 <LmHandlerConfigure+0x150>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800f834:	2306      	movs	r3, #6
 800f836:	753b      	strb	r3, [r7, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f838:	f107 0314 	add.w	r3, r7, #20
 800f83c:	4618      	mov	r0, r3
 800f83e:	f004 ff37 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800f842:	69bb      	ldr	r3, [r7, #24]
 800f844:	4a34      	ldr	r2, [pc, #208]	; (800f918 <LmHandlerConfigure+0x168>)
 800f846:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f848:	f107 0314 	add.w	r3, r7, #20
 800f84c:	4618      	mov	r0, r3
 800f84e:	f005 f8e5 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800f852:	2302      	movs	r3, #2
 800f854:	753b      	strb	r3, [r7, #20]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800f856:	4b30      	ldr	r3, [pc, #192]	; (800f918 <LmHandlerConfigure+0x168>)
 800f858:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f85a:	f107 0314 	add.w	r3, r7, #20
 800f85e:	4618      	mov	r0, r3
 800f860:	f004 ff26 	bl	80146b0 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800f864:	2303      	movs	r3, #3
 800f866:	753b      	strb	r3, [r7, #20]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800f868:	4b2c      	ldr	r3, [pc, #176]	; (800f91c <LmHandlerConfigure+0x16c>)
 800f86a:	61bb      	str	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800f86c:	f107 0314 	add.w	r3, r7, #20
 800f870:	4618      	mov	r0, r3
 800f872:	f004 ff1d 	bl	80146b0 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800f876:	f7ff fc81 	bl	800f17c <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800f87a:	230f      	movs	r3, #15
 800f87c:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800f87e:	2301      	movs	r3, #1
 800f880:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f882:	f107 0314 	add.w	r3, r7, #20
 800f886:	4618      	mov	r0, r3
 800f888:	f005 f8c8 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800f88c:	2310      	movs	r3, #16
 800f88e:	753b      	strb	r3, [r7, #20]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800f890:	2300      	movs	r3, #0
 800f892:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f894:	f107 0314 	add.w	r3, r7, #20
 800f898:	4618      	mov	r0, r3
 800f89a:	f005 f8bf 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800f89e:	2304      	movs	r3, #4
 800f8a0:	753b      	strb	r3, [r7, #20]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800f8a2:	4b19      	ldr	r3, [pc, #100]	; (800f908 <LmHandlerConfigure+0x158>)
 800f8a4:	789b      	ldrb	r3, [r3, #2]
 800f8a6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8a8:	f107 0314 	add.w	r3, r7, #20
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	f005 f8b5 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800f8b2:	2339      	movs	r3, #57	; 0x39
 800f8b4:	753b      	strb	r3, [r7, #20]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800f8b6:	4b14      	ldr	r3, [pc, #80]	; (800f908 <LmHandlerConfigure+0x158>)
 800f8b8:	695b      	ldr	r3, [r3, #20]
 800f8ba:	61bb      	str	r3, [r7, #24]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800f8bc:	f107 0314 	add.w	r3, r7, #20
 800f8c0:	4618      	mov	r0, r3
 800f8c2:	f005 f8ab 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800f8c6:	230f      	movs	r3, #15
 800f8c8:	733b      	strb	r3, [r7, #12]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800f8ca:	4b0f      	ldr	r3, [pc, #60]	; (800f908 <LmHandlerConfigure+0x158>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	f107 020c 	add.w	r2, r7, #12
 800f8d2:	4611      	mov	r1, r2
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f007 ff84 	bl	80177e2 <RegionGetPhyParam>
 800f8da:	4603      	mov	r3, r0
 800f8dc:	60bb      	str	r3, [r7, #8]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	bf14      	ite	ne
 800f8e4:	2301      	movne	r3, #1
 800f8e6:	2300      	moveq	r3, #0
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	4b07      	ldr	r3, [pc, #28]	; (800f908 <LmHandlerConfigure+0x158>)
 800f8ec:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800f8ee:	2014      	movs	r0, #20
 800f8f0:	f000 fac4 	bl	800fe7c <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800f8f4:	4b04      	ldr	r3, [pc, #16]	; (800f908 <LmHandlerConfigure+0x158>)
 800f8f6:	79db      	ldrb	r3, [r3, #7]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	f005 fe6b 	bl	80155d4 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3740      	adds	r7, #64	; 0x40
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	200007b8 	.word	0x200007b8
 800f90c:	0801f2c4 	.word	0x0801f2c4
 800f910:	200007e4 	.word	0x200007e4
 800f914:	200007d4 	.word	0x200007d4
 800f918:	2000078c 	.word	0x2000078c
 800f91c:	20000794 	.word	0x20000794

0800f920 <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800f920:	b580      	push	{r7, lr}
 800f922:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    /* Processes the LoRaMac events */
    LoRaMacProcess( );
 800f924:	f002 fb36 	bl	8011f94 <LoRaMacProcess>

    /* Call all packages process functions */
    LmHandlerPackagesProcess( );
 800f928:	f000 fd9c 	bl	8010464 <LmHandlerPackagesProcess>

    /* Check if a package transmission is pending. */
    /* If it is the case exit function earlier */
    if( LmHandlerPackageIsTxPending( ) == true )
 800f92c:	f000 fd6c 	bl	8010408 <LmHandlerPackageIsTxPending>
 800f930:	4603      	mov	r3, r0
 800f932:	2b00      	cmp	r3, #0
        {
            IsUplinkTxPending = false;
        }
    }
#endif /* LORAMAC_VERSION */
}
 800f934:	bd80      	pop	{r7, pc}
	...

0800f938 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800f938:	b480      	push	{r7}
 800f93a:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800f93c:	4b02      	ldr	r3, [pc, #8]	; (800f948 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800f93e:	681b      	ldr	r3, [r3, #0]
}
 800f940:	4618      	mov	r0, r3
 800f942:	46bd      	mov	sp, r7
 800f944:	bc80      	pop	{r7}
 800f946:	4770      	bx	lr
 800f948:	200007fc 	.word	0x200007fc

0800f94c <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b092      	sub	sp, #72	; 0x48
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	460a      	mov	r2, r1
 800f956:	71fb      	strb	r3, [r7, #7]
 800f958:	4613      	mov	r3, r2
 800f95a:	71bb      	strb	r3, [r7, #6]
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800f95c:	2301      	movs	r3, #1
 800f95e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800f962:	4b47      	ldr	r3, [pc, #284]	; (800fa80 <LmHandlerJoin+0x134>)
 800f964:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800f96e:	4b44      	ldr	r3, [pc, #272]	; (800fa80 <LmHandlerJoin+0x134>)
 800f970:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800f974:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

    if( mode == ACTIVATION_TYPE_OTAA )
 800f978:	79fb      	ldrb	r3, [r7, #7]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	d110      	bne.n	800f9a0 <LmHandlerJoin+0x54>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800f97e:	2302      	movs	r3, #2
 800f980:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800f984:	4b3f      	ldr	r3, [pc, #252]	; (800fa84 <LmHandlerJoin+0x138>)
 800f986:	2202      	movs	r2, #2
 800f988:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800f98a:	4a3e      	ldr	r2, [pc, #248]	; (800fa84 <LmHandlerJoin+0x138>)
 800f98c:	79bb      	ldrb	r3, [r7, #6]
 800f98e:	7213      	strb	r3, [r2, #8]
        LoRaMacStart();
 800f990:	f004 fda8 	bl	80144e4 <LoRaMacStart>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        /* Starts the OTAA join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
 800f994:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f998:	4618      	mov	r0, r3
 800f99a:	f005 fbd3 	bl	8015144 <LoRaMacMlmeRequest>
        /* Starts the join procedure */
        LoRaMacMlmeRequest( &mlmeReq );
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
#endif /* LORAMAC_VERSION */
}
 800f99e:	e06b      	b.n	800fa78 <LmHandlerJoin+0x12c>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800f9a6:	4b37      	ldr	r3, [pc, #220]	; (800fa84 <LmHandlerJoin+0x138>)
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	71da      	strb	r2, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800f9ac:	4b34      	ldr	r3, [pc, #208]	; (800fa80 <LmHandlerJoin+0x134>)
 800f9ae:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800f9b2:	4b34      	ldr	r3, [pc, #208]	; (800fa84 <LmHandlerJoin+0x138>)
 800f9b4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800f9b6:	4b32      	ldr	r3, [pc, #200]	; (800fa80 <LmHandlerJoin+0x134>)
 800f9b8:	f993 2005 	ldrsb.w	r2, [r3, #5]
 800f9bc:	4b31      	ldr	r3, [pc, #196]	; (800fa84 <LmHandlerJoin+0x138>)
 800f9be:	715a      	strb	r2, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800f9c0:	4b30      	ldr	r3, [pc, #192]	; (800fa84 <LmHandlerJoin+0x138>)
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800f9c6:	4a2f      	ldr	r2, [pc, #188]	; (800fa84 <LmHandlerJoin+0x138>)
 800f9c8:	79bb      	ldrb	r3, [r7, #6]
 800f9ca:	7213      	strb	r3, [r2, #8]
        if( CtxRestoreDone == false )
 800f9cc:	4b2e      	ldr	r3, [pc, #184]	; (800fa88 <LmHandlerJoin+0x13c>)
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	f083 0301 	eor.w	r3, r3, #1
 800f9d4:	b2db      	uxtb	r3, r3
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d034      	beq.n	800fa44 <LmHandlerJoin+0xf8>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800f9da:	231e      	movs	r3, #30
 800f9dc:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800f9de:	4b28      	ldr	r3, [pc, #160]	; (800fa80 <LmHandlerJoin+0x134>)
 800f9e0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9e4:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9e6:	f107 030c 	add.w	r3, r7, #12
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	f005 f816 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800f9f0:	231f      	movs	r3, #31
 800f9f2:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800f9f4:	4b22      	ldr	r3, [pc, #136]	; (800fa80 <LmHandlerJoin+0x134>)
 800f9f6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f9fa:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800f9fc:	f107 030c 	add.w	r3, r7, #12
 800fa00:	4618      	mov	r0, r3
 800fa02:	f005 f80b 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800fa06:	2321      	movs	r3, #33	; 0x21
 800fa08:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800fa0a:	4b1d      	ldr	r3, [pc, #116]	; (800fa80 <LmHandlerJoin+0x134>)
 800fa0c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa10:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa12:	f107 030c 	add.w	r3, r7, #12
 800fa16:	4618      	mov	r0, r3
 800fa18:	f005 f800 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800fa1c:	2320      	movs	r3, #32
 800fa1e:	733b      	strb	r3, [r7, #12]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800fa20:	4b17      	ldr	r3, [pc, #92]	; (800fa80 <LmHandlerJoin+0x134>)
 800fa22:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800fa26:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa28:	f107 030c 	add.w	r3, r7, #12
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f004 fff5 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800fa32:	2328      	movs	r3, #40	; 0x28
 800fa34:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800fa36:	4b15      	ldr	r3, [pc, #84]	; (800fa8c <LmHandlerJoin+0x140>)
 800fa38:	613b      	str	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800fa3a:	f107 030c 	add.w	r3, r7, #12
 800fa3e:	4618      	mov	r0, r3
 800fa40:	f004 ffec 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 800fa44:	f004 fd4e 	bl	80144e4 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800fa4c:	2301      	movs	r3, #1
 800fa4e:	743b      	strb	r3, [r7, #16]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800fa50:	f107 030c 	add.w	r3, r7, #12
 800fa54:	4618      	mov	r0, r3
 800fa56:	f004 ffe1 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
        if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800fa5a:	4b0d      	ldr	r3, [pc, #52]	; (800fa90 <LmHandlerJoin+0x144>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d004      	beq.n	800fa6e <LmHandlerJoin+0x122>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800fa64:	4b0a      	ldr	r3, [pc, #40]	; (800fa90 <LmHandlerJoin+0x144>)
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa6a:	4806      	ldr	r0, [pc, #24]	; (800fa84 <LmHandlerJoin+0x138>)
 800fa6c:	4798      	blx	r3
        LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800fa6e:	4b04      	ldr	r3, [pc, #16]	; (800fa80 <LmHandlerJoin+0x134>)
 800fa70:	785b      	ldrb	r3, [r3, #1]
 800fa72:	4618      	mov	r0, r3
 800fa74:	f000 f932 	bl	800fcdc <LmHandlerRequestClass>
}
 800fa78:	bf00      	nop
 800fa7a:	3748      	adds	r7, #72	; 0x48
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	200007b8 	.word	0x200007b8
 800fa84:	200000a4 	.word	0x200000a4
 800fa88:	200008f2 	.word	0x200008f2
 800fa8c:	01000300 	.word	0x01000300
 800fa90:	200007d0 	.word	0x200007d0

0800fa94 <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08c      	sub	sp, #48	; 0x30
 800fa98:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800fa9e:	1d3b      	adds	r3, r7, #4
 800faa0:	4618      	mov	r0, r3
 800faa2:	f004 fe05 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
 800faa6:	4603      	mov	r3, r0
 800faa8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    if( status == LORAMAC_STATUS_OK )
 800faac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d106      	bne.n	800fac2 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fab4:	7a3b      	ldrb	r3, [r7, #8]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d101      	bne.n	800fabe <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800faba:	2300      	movs	r3, #0
 800fabc:	e002      	b.n	800fac4 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800fabe:	2301      	movs	r3, #1
 800fac0:	e000      	b.n	800fac4 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800fac2:	2300      	movs	r3, #0
    }
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3730      	adds	r7, #48	; 0x30
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}

0800facc <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b08a      	sub	sp, #40	; 0x28
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
 800fad4:	460b      	mov	r3, r1
 800fad6:	70fb      	strb	r3, [r7, #3]
 800fad8:	4613      	mov	r3, r2
 800fada:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800fadc:	23ff      	movs	r3, #255	; 0xff
 800fade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800fae2:	f001 ffe3 	bl	8011aac <LoRaMacIsBusy>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800faec:	f06f 0301 	mvn.w	r3, #1
 800faf0:	e0be      	b.n	800fc70 <LmHandlerSend+0x1a4>
    }

    if( LoRaMacIsStopped() == true )
 800faf2:	f001 fff7 	bl	8011ae4 <LoRaMacIsStopped>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fafc:	f06f 0302 	mvn.w	r3, #2
 800fb00:	e0b6      	b.n	800fc70 <LmHandlerSend+0x1a4>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800fb02:	f7ff ffc7 	bl	800fa94 <LmHandlerJoinStatus>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b01      	cmp	r3, #1
 800fb0a:	d00a      	beq.n	800fb22 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800fb0c:	4b5a      	ldr	r3, [pc, #360]	; (800fc78 <LmHandlerSend+0x1ac>)
 800fb0e:	79db      	ldrb	r3, [r3, #7]
 800fb10:	4a59      	ldr	r2, [pc, #356]	; (800fc78 <LmHandlerSend+0x1ac>)
 800fb12:	7a12      	ldrb	r2, [r2, #8]
 800fb14:	4611      	mov	r1, r2
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff ff18 	bl	800f94c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fb1c:	f06f 0302 	mvn.w	r3, #2
 800fb20:	e0a6      	b.n	800fc70 <LmHandlerSend+0x1a4>
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true )
 800fb22:	4b56      	ldr	r3, [pc, #344]	; (800fc7c <LmHandlerSend+0x1b0>)
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	4798      	blx	r3
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d00d      	beq.n	800fb4c <LmHandlerSend+0x80>
        && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	781a      	ldrb	r2, [r3, #0]
 800fb34:	4b51      	ldr	r3, [pc, #324]	; (800fc7c <LmHandlerSend+0x1b0>)
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	781b      	ldrb	r3, [r3, #0]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d006      	beq.n	800fb4c <LmHandlerSend+0x80>
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d002      	beq.n	800fb4c <LmHandlerSend+0x80>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800fb46:	f06f 0303 	mvn.w	r3, #3
 800fb4a:	e091      	b.n	800fc70 <LmHandlerSend+0x1a4>
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800fb4c:	4a4c      	ldr	r2, [pc, #304]	; (800fc80 <LmHandlerSend+0x1b4>)
 800fb4e:	78fb      	ldrb	r3, [r7, #3]
 800fb50:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800fb52:	78fb      	ldrb	r3, [r7, #3]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	bf14      	ite	ne
 800fb58:	2301      	movne	r3, #1
 800fb5a:	2300      	moveq	r3, #0
 800fb5c:	b2db      	uxtb	r3, r3
 800fb5e:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800fb60:	4b48      	ldr	r3, [pc, #288]	; (800fc84 <LmHandlerSend+0x1b8>)
 800fb62:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fb66:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	785b      	ldrb	r3, [r3, #1]
 800fb6c:	f107 020c 	add.w	r2, r7, #12
 800fb70:	4611      	mov	r1, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f004 fd16 	bl	80145a4 <LoRaMacQueryTxPossible>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d009      	beq.n	800fb92 <LmHandlerSend+0xc6>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800fb82:	2300      	movs	r3, #0
 800fb84:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800fb86:	2300      	movs	r3, #0
 800fb88:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800fb8a:	23f9      	movs	r3, #249	; 0xf9
 800fb8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fb90:	e009      	b.n	800fba6 <LmHandlerSend+0xda>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	781b      	ldrb	r3, [r3, #0]
 800fb96:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	785b      	ldrb	r3, [r3, #1]
 800fb9c:	b29b      	uxth	r3, r3
 800fb9e:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	685b      	ldr	r3, [r3, #4]
 800fba4:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800fba6:	4b36      	ldr	r3, [pc, #216]	; (800fc80 <LmHandlerSend+0x1b4>)
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	3310      	adds	r3, #16
 800fbac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fbb0:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800fbb4:	4b33      	ldr	r3, [pc, #204]	; (800fc84 <LmHandlerSend+0x1b8>)
 800fbb6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800fbba:	4b31      	ldr	r3, [pc, #196]	; (800fc80 <LmHandlerSend+0x1b4>)
 800fbbc:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800fbbe:	78ba      	ldrb	r2, [r7, #2]
 800fbc0:	f107 0310 	add.w	r3, r7, #16
 800fbc4:	4611      	mov	r1, r2
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	f005 fc0e 	bl	80153e8 <LoRaMacMcpsRequest>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800fbd2:	6a3b      	ldr	r3, [r7, #32]
 800fbd4:	4a2c      	ldr	r2, [pc, #176]	; (800fc88 <LmHandlerSend+0x1bc>)
 800fbd6:	6013      	str	r3, [r2, #0]

    switch( status )
 800fbd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fbdc:	2b11      	cmp	r3, #17
 800fbde:	d840      	bhi.n	800fc62 <LmHandlerSend+0x196>
 800fbe0:	a201      	add	r2, pc, #4	; (adr r2, 800fbe8 <LmHandlerSend+0x11c>)
 800fbe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbe6:	bf00      	nop
 800fbe8:	0800fc31 	.word	0x0800fc31
 800fbec:	0800fc43 	.word	0x0800fc43
 800fbf0:	0800fc63 	.word	0x0800fc63
 800fbf4:	0800fc63 	.word	0x0800fc63
 800fbf8:	0800fc63 	.word	0x0800fc63
 800fbfc:	0800fc63 	.word	0x0800fc63
 800fc00:	0800fc63 	.word	0x0800fc63
 800fc04:	0800fc4b 	.word	0x0800fc4b
 800fc08:	0800fc63 	.word	0x0800fc63
 800fc0c:	0800fc63 	.word	0x0800fc63
 800fc10:	0800fc63 	.word	0x0800fc63
 800fc14:	0800fc5b 	.word	0x0800fc5b
 800fc18:	0800fc63 	.word	0x0800fc63
 800fc1c:	0800fc63 	.word	0x0800fc63
 800fc20:	0800fc43 	.word	0x0800fc43
 800fc24:	0800fc43 	.word	0x0800fc43
 800fc28:	0800fc43 	.word	0x0800fc43
 800fc2c:	0800fc53 	.word	0x0800fc53
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800fc30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc34:	f113 0f07 	cmn.w	r3, #7
 800fc38:	d017      	beq.n	800fc6a <LmHandlerSend+0x19e>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            }
            break;
 800fc40:	e013      	b.n	800fc6a <LmHandlerSend+0x19e>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800fc42:	23fe      	movs	r3, #254	; 0xfe
 800fc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc48:	e010      	b.n	800fc6c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fc4a:	23fd      	movs	r3, #253	; 0xfd
 800fc4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc50:	e00c      	b.n	800fc6c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800fc52:	23fb      	movs	r3, #251	; 0xfb
 800fc54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc58:	e008      	b.n	800fc6c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800fc5a:	23fa      	movs	r3, #250	; 0xfa
 800fc5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc60:	e004      	b.n	800fc6c <LmHandlerSend+0x1a0>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800fc62:	23ff      	movs	r3, #255	; 0xff
 800fc64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800fc68:	e000      	b.n	800fc6c <LmHandlerSend+0x1a0>
            break;
 800fc6a:	bf00      	nop
    }

    return lmhStatus;
 800fc6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3728      	adds	r7, #40	; 0x28
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	200000a4 	.word	0x200000a4
 800fc7c:	200007a4 	.word	0x200007a4
 800fc80:	200000b0 	.word	0x200000b0
 800fc84:	200007b8 	.word	0x200007b8
 800fc88:	200007fc 	.word	0x200007fc

0800fc8c <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800fc8c:	b580      	push	{r7, lr}
 800fc8e:	b086      	sub	sp, #24
 800fc90:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800fc92:	230a      	movs	r3, #10
 800fc94:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800fc96:	463b      	mov	r3, r7
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f005 fa53 	bl	8015144 <LoRaMacMlmeRequest>
 800fc9e:	4603      	mov	r3, r0
 800fca0:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	4a06      	ldr	r2, [pc, #24]	; (800fcc0 <LmHandlerDeviceTimeReq+0x34>)
 800fca6:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800fca8:	7dfb      	ldrb	r3, [r7, #23]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d101      	bne.n	800fcb2 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	e001      	b.n	800fcb6 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800fcb2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	200007fc 	.word	0x200007fc

0800fcc4 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800fcce:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	370c      	adds	r7, #12
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bc80      	pop	{r7}
 800fcda:	4770      	bx	lr

0800fcdc <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b08e      	sub	sp, #56	; 0x38
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	4603      	mov	r3, r0
 800fce4:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800fce6:	2300      	movs	r3, #0
 800fce8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( LoRaMacIsBusy() == true )
 800fcec:	f001 fede 	bl	8011aac <LoRaMacIsBusy>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800fcf6:	f06f 0301 	mvn.w	r3, #1
 800fcfa:	e071      	b.n	800fde0 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800fcfc:	f7ff feca 	bl	800fa94 <LmHandlerJoinStatus>
 800fd00:	4603      	mov	r3, r0
 800fd02:	2b01      	cmp	r3, #1
 800fd04:	d002      	beq.n	800fd0c <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800fd06:	f06f 0302 	mvn.w	r3, #2
 800fd0a:	e069      	b.n	800fde0 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fd10:	f107 030c 	add.w	r3, r7, #12
 800fd14:	4618      	mov	r0, r3
 800fd16:	f004 fccb 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d002      	beq.n	800fd26 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800fd20:	f04f 33ff 	mov.w	r3, #4294967295
 800fd24:	e05c      	b.n	800fde0 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800fd26:	7c3b      	ldrb	r3, [r7, #16]
 800fd28:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800fd2c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800fd30:	79fb      	ldrb	r3, [r7, #7]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d052      	beq.n	800fddc <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800fd36:	79fb      	ldrb	r3, [r7, #7]
 800fd38:	2b02      	cmp	r3, #2
 800fd3a:	d028      	beq.n	800fd8e <LmHandlerRequestClass+0xb2>
 800fd3c:	2b02      	cmp	r3, #2
 800fd3e:	dc48      	bgt.n	800fdd2 <LmHandlerRequestClass+0xf6>
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d002      	beq.n	800fd4a <LmHandlerRequestClass+0x6e>
 800fd44:	2b01      	cmp	r3, #1
 800fd46:	d01e      	beq.n	800fd86 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800fd48:	e043      	b.n	800fdd2 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800fd4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d041      	beq.n	800fdd6 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800fd52:	79fb      	ldrb	r3, [r7, #7]
 800fd54:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fd56:	f107 030c 	add.w	r3, r7, #12
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f004 fe5e 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
 800fd60:	4603      	mov	r3, r0
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d10b      	bne.n	800fd7e <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fd66:	4b20      	ldr	r3, [pc, #128]	; (800fde8 <LmHandlerRequestClass+0x10c>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d032      	beq.n	800fdd6 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fd70:	4b1d      	ldr	r3, [pc, #116]	; (800fde8 <LmHandlerRequestClass+0x10c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd76:	79fa      	ldrb	r2, [r7, #7]
 800fd78:	4610      	mov	r0, r2
 800fd7a:	4798      	blx	r3
                break;
 800fd7c:	e02b      	b.n	800fdd6 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fd7e:	23ff      	movs	r3, #255	; 0xff
 800fd80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd84:	e027      	b.n	800fdd6 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800fd86:	23ff      	movs	r3, #255	; 0xff
 800fd88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd8c:	e026      	b.n	800fddc <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800fd8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d003      	beq.n	800fd9e <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800fd96:	23ff      	movs	r3, #255	; 0xff
 800fd98:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fd9c:	e01d      	b.n	800fdda <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800fd9e:	79fb      	ldrb	r3, [r7, #7]
 800fda0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800fda2:	f107 030c 	add.w	r3, r7, #12
 800fda6:	4618      	mov	r0, r3
 800fda8:	f004 fe38 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d10b      	bne.n	800fdca <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800fdb2:	4b0d      	ldr	r3, [pc, #52]	; (800fde8 <LmHandlerRequestClass+0x10c>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d00e      	beq.n	800fdda <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800fdbc:	4b0a      	ldr	r3, [pc, #40]	; (800fde8 <LmHandlerRequestClass+0x10c>)
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdc2:	79fa      	ldrb	r2, [r7, #7]
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4798      	blx	r3
                break;
 800fdc8:	e007      	b.n	800fdda <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800fdca:	23ff      	movs	r3, #255	; 0xff
 800fdcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                break;
 800fdd0:	e003      	b.n	800fdda <LmHandlerRequestClass+0xfe>
                break;
 800fdd2:	bf00      	nop
 800fdd4:	e002      	b.n	800fddc <LmHandlerRequestClass+0x100>
                break;
 800fdd6:	bf00      	nop
 800fdd8:	e000      	b.n	800fddc <LmHandlerRequestClass+0x100>
                break;
 800fdda:	bf00      	nop
        }
    }
    return errorStatus;
 800fddc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fde0:	4618      	mov	r0, r3
 800fde2:	3738      	adds	r7, #56	; 0x38
 800fde4:	46bd      	mov	sp, r7
 800fde6:	bd80      	pop	{r7, pc}
 800fde8:	200007d0 	.word	0x200007d0

0800fdec <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b08c      	sub	sp, #48	; 0x30
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d102      	bne.n	800fe00 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fdfa:	f04f 33ff 	mov.w	r3, #4294967295
 800fdfe:	e010      	b.n	800fe22 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800fe00:	2300      	movs	r3, #0
 800fe02:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe04:	f107 0308 	add.w	r3, r7, #8
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f004 fc51 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d002      	beq.n	800fe1a <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe14:	f04f 33ff 	mov.w	r3, #4294967295
 800fe18:	e003      	b.n	800fe22 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800fe1a:	7b3a      	ldrb	r2, [r7, #12]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800fe20:	2300      	movs	r3, #0
}
 800fe22:	4618      	mov	r0, r3
 800fe24:	3730      	adds	r7, #48	; 0x30
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd80      	pop	{r7, pc}
	...

0800fe2c <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b08c      	sub	sp, #48	; 0x30
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d102      	bne.n	800fe40 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fe3e:	e016      	b.n	800fe6e <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800fe40:	231f      	movs	r3, #31
 800fe42:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800fe44:	f107 0308 	add.w	r3, r7, #8
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f004 fc31 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d002      	beq.n	800fe5a <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe54:	f04f 33ff 	mov.w	r3, #4294967295
 800fe58:	e009      	b.n	800fe6e <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800fe5a:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	f993 2000 	ldrsb.w	r2, [r3]
 800fe68:	4b03      	ldr	r3, [pc, #12]	; (800fe78 <LmHandlerGetTxDatarate+0x4c>)
 800fe6a:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800fe6c:	2300      	movs	r3, #0
}
 800fe6e:	4618      	mov	r0, r3
 800fe70:	3730      	adds	r7, #48	; 0x30
 800fe72:	46bd      	mov	sp, r7
 800fe74:	bd80      	pop	{r7, pc}
 800fe76:	bf00      	nop
 800fe78:	200007b8 	.word	0x200007b8

0800fe7c <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b08c      	sub	sp, #48	; 0x30
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800fe84:	2322      	movs	r3, #34	; 0x22
 800fe86:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800fe8c:	f107 0308 	add.w	r3, r7, #8
 800fe90:	4618      	mov	r0, r3
 800fe92:	f004 fdc3 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
 800fe96:	4603      	mov	r3, r0
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d002      	beq.n	800fea2 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800fe9c:	f04f 33ff 	mov.w	r3, #4294967295
 800fea0:	e000      	b.n	800fea4 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800fea2:	2300      	movs	r3, #0
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3730      	adds	r7, #48	; 0x30
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800feb4:	4b18      	ldr	r3, [pc, #96]	; (800ff18 <McpsConfirm+0x6c>)
 800feb6:	2201      	movs	r2, #1
 800feb8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	785a      	ldrb	r2, [r3, #1]
 800febe:	4b16      	ldr	r3, [pc, #88]	; (800ff18 <McpsConfirm+0x6c>)
 800fec0:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	789b      	ldrb	r3, [r3, #2]
 800fec6:	b25a      	sxtb	r2, r3
 800fec8:	4b13      	ldr	r3, [pc, #76]	; (800ff18 <McpsConfirm+0x6c>)
 800feca:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	68db      	ldr	r3, [r3, #12]
 800fed0:	4a11      	ldr	r2, [pc, #68]	; (800ff18 <McpsConfirm+0x6c>)
 800fed2:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800feda:	4b0f      	ldr	r3, [pc, #60]	; (800ff18 <McpsConfirm+0x6c>)
 800fedc:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	691b      	ldr	r3, [r3, #16]
 800fee2:	b2da      	uxtb	r2, r3
 800fee4:	4b0c      	ldr	r3, [pc, #48]	; (800ff18 <McpsConfirm+0x6c>)
 800fee6:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	791b      	ldrb	r3, [r3, #4]
 800feec:	461a      	mov	r2, r3
 800feee:	4b0a      	ldr	r3, [pc, #40]	; (800ff18 <McpsConfirm+0x6c>)
 800fef0:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800fef2:	4b0a      	ldr	r3, [pc, #40]	; (800ff1c <McpsConfirm+0x70>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d004      	beq.n	800ff06 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800fefc:	4b07      	ldr	r3, [pc, #28]	; (800ff1c <McpsConfirm+0x70>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff02:	4805      	ldr	r0, [pc, #20]	; (800ff18 <McpsConfirm+0x6c>)
 800ff04:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ff06:	6879      	ldr	r1, [r7, #4]
 800ff08:	2000      	movs	r0, #0
 800ff0a:	f000 f9eb 	bl	80102e4 <LmHandlerPackagesNotify>
}
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	200000b0 	.word	0x200000b0
 800ff1c:	200007d0 	.word	0x200007d0

0800ff20 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800ff20:	b580      	push	{r7, lr}
 800ff22:	b088      	sub	sp, #32
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
 800ff28:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	75fb      	strb	r3, [r7, #23]
    RxParams.IsMcpsIndication = 1;
 800ff2e:	4b32      	ldr	r3, [pc, #200]	; (800fff8 <McpsIndication+0xd8>)
 800ff30:	2201      	movs	r2, #1
 800ff32:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	785a      	ldrb	r2, [r3, #1]
 800ff38:	4b2f      	ldr	r3, [pc, #188]	; (800fff8 <McpsIndication+0xd8>)
 800ff3a:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800ff3c:	4b2e      	ldr	r3, [pc, #184]	; (800fff8 <McpsIndication+0xd8>)
 800ff3e:	785b      	ldrb	r3, [r3, #1]
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d155      	bne.n	800fff0 <McpsIndication+0xd0>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	791b      	ldrb	r3, [r3, #4]
 800ff48:	b25a      	sxtb	r2, r3
 800ff4a:	4b2b      	ldr	r3, [pc, #172]	; (800fff8 <McpsIndication+0xd8>)
 800ff4c:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff54:	b25a      	sxtb	r2, r3
 800ff56:	4b28      	ldr	r3, [pc, #160]	; (800fff8 <McpsIndication+0xd8>)
 800ff58:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ff5a:	683b      	ldr	r3, [r7, #0]
 800ff5c:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800ff60:	4b25      	ldr	r3, [pc, #148]	; (800fff8 <McpsIndication+0xd8>)
 800ff62:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800ff64:	683b      	ldr	r3, [r7, #0]
 800ff66:	78da      	ldrb	r2, [r3, #3]
 800ff68:	4b23      	ldr	r3, [pc, #140]	; (800fff8 <McpsIndication+0xd8>)
 800ff6a:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	691b      	ldr	r3, [r3, #16]
 800ff70:	4a21      	ldr	r2, [pc, #132]	; (800fff8 <McpsIndication+0xd8>)
 800ff72:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	78db      	ldrb	r3, [r3, #3]
 800ff78:	763b      	strb	r3, [r7, #24]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	7b1b      	ldrb	r3, [r3, #12]
 800ff7e:	767b      	strb	r3, [r7, #25]
    appData.Buffer = mcpsIndication->Buffer;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	689b      	ldr	r3, [r3, #8]
 800ff84:	61fb      	str	r3, [r7, #28]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800ff86:	4b1d      	ldr	r3, [pc, #116]	; (800fffc <McpsIndication+0xdc>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d007      	beq.n	800ffa0 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800ff90:	4b1a      	ldr	r3, [pc, #104]	; (800fffc <McpsIndication+0xdc>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff96:	f107 0218 	add.w	r2, r7, #24
 800ff9a:	4917      	ldr	r1, [pc, #92]	; (800fff8 <McpsIndication+0xd8>)
 800ff9c:	4610      	mov	r0, r2
 800ff9e:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800ffa0:	4b16      	ldr	r3, [pc, #88]	; (800fffc <McpsIndication+0xdc>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d007      	beq.n	800ffba <McpsIndication+0x9a>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	7e1b      	ldrb	r3, [r3, #24]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d003      	beq.n	800ffba <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800ffb2:	4b12      	ldr	r3, [pc, #72]	; (800fffc <McpsIndication+0xdc>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb8:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800ffba:	6879      	ldr	r1, [r7, #4]
 800ffbc:	2001      	movs	r0, #1
 800ffbe:	f000 f991 	bl	80102e4 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800ffc2:	f107 0317 	add.w	r3, r7, #23
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff ff10 	bl	800fdec <LmHandlerGetCurrentClass>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	795b      	ldrb	r3, [r3, #5]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00e      	beq.n	800fff2 <McpsIndication+0xd2>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */

        /* Send an empty message */
        LmHandlerAppData_t appData =
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	733b      	strb	r3, [r7, #12]
 800ffd8:	2300      	movs	r3, #0
 800ffda:	737b      	strb	r3, [r7, #13]
 800ffdc:	2300      	movs	r3, #0
 800ffde:	613b      	str	r3, [r7, #16]
        {
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
 800ffe0:	f107 030c 	add.w	r3, r7, #12
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f7ff fd6f 	bl	800facc <LmHandlerSend>
 800ffee:	e000      	b.n	800fff2 <McpsIndication+0xd2>
        return;
 800fff0:	bf00      	nop
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
    }
#endif /* LORAMAC_VERSION */
}
 800fff2:	3720      	adds	r7, #32
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}
 800fff8:	200000cc 	.word	0x200000cc
 800fffc:	200007d0 	.word	0x200007d0

08010000 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b08c      	sub	sp, #48	; 0x30
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 8010008:	4b4a      	ldr	r3, [pc, #296]	; (8010134 <MlmeConfirm+0x134>)
 801000a:	2200      	movs	r2, #0
 801000c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	785a      	ldrb	r2, [r3, #1]
 8010012:	4b48      	ldr	r3, [pc, #288]	; (8010134 <MlmeConfirm+0x134>)
 8010014:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 8010016:	4b48      	ldr	r3, [pc, #288]	; (8010138 <MlmeConfirm+0x138>)
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801001c:	2b00      	cmp	r3, #0
 801001e:	d004      	beq.n	801002a <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 8010020:	4b45      	ldr	r3, [pc, #276]	; (8010138 <MlmeConfirm+0x138>)
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010026:	4843      	ldr	r0, [pc, #268]	; (8010134 <MlmeConfirm+0x134>)
 8010028:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 801002a:	6879      	ldr	r1, [r7, #4]
 801002c:	2002      	movs	r0, #2
 801002e:	f000 f959 	bl	80102e4 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	781b      	ldrb	r3, [r3, #0]
 8010036:	3b01      	subs	r3, #1
 8010038:	2b0c      	cmp	r3, #12
 801003a:	d874      	bhi.n	8010126 <MlmeConfirm+0x126>
 801003c:	a201      	add	r2, pc, #4	; (adr r2, 8010044 <MlmeConfirm+0x44>)
 801003e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010042:	bf00      	nop
 8010044:	08010079 	.word	0x08010079
 8010048:	08010127 	.word	0x08010127
 801004c:	08010127 	.word	0x08010127
 8010050:	08010127 	.word	0x08010127
 8010054:	080100f5 	.word	0x080100f5
 8010058:	08010127 	.word	0x08010127
 801005c:	08010127 	.word	0x08010127
 8010060:	08010127 	.word	0x08010127
 8010064:	08010127 	.word	0x08010127
 8010068:	08010127 	.word	0x08010127
 801006c:	08010127 	.word	0x08010127
 8010070:	0801010d 	.word	0x0801010d
 8010074:	08010127 	.word	0x08010127
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 8010078:	2306      	movs	r3, #6
 801007a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 801007c:	f107 0308 	add.w	r3, r7, #8
 8010080:	4618      	mov	r0, r3
 8010082:	f004 fb15 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 8010086:	4b2d      	ldr	r3, [pc, #180]	; (801013c <MlmeConfirm+0x13c>)
 8010088:	79db      	ldrb	r3, [r3, #7]
 801008a:	68fa      	ldr	r2, [r7, #12]
 801008c:	4611      	mov	r1, r2
 801008e:	4618      	mov	r0, r3
 8010090:	f7ff faf6 	bl	800f680 <SecureElementSetDevAddr>
 8010094:	4603      	mov	r3, r0
 8010096:	2b00      	cmp	r3, #0
 8010098:	d102      	bne.n	80100a0 <MlmeConfirm+0xa0>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	4a28      	ldr	r2, [pc, #160]	; (8010140 <MlmeConfirm+0x140>)
 801009e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80100a0:	4828      	ldr	r0, [pc, #160]	; (8010144 <MlmeConfirm+0x144>)
 80100a2:	f7ff fec3 	bl	800fe2c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 80100a6:	4828      	ldr	r0, [pc, #160]	; (8010148 <MlmeConfirm+0x148>)
 80100a8:	f000 fa4e 	bl	8010548 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100ac:	4b21      	ldr	r3, [pc, #132]	; (8010134 <MlmeConfirm+0x134>)
 80100ae:	785b      	ldrb	r3, [r3, #1]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d108      	bne.n	80100c6 <MlmeConfirm+0xc6>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80100b4:	4b21      	ldr	r3, [pc, #132]	; (801013c <MlmeConfirm+0x13c>)
 80100b6:	2200      	movs	r2, #0
 80100b8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 80100ba:	4b24      	ldr	r3, [pc, #144]	; (801014c <MlmeConfirm+0x14c>)
 80100bc:	785b      	ldrb	r3, [r3, #1]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7ff fe0c 	bl	800fcdc <LmHandlerRequestClass>
 80100c4:	e002      	b.n	80100cc <MlmeConfirm+0xcc>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80100c6:	4b1d      	ldr	r3, [pc, #116]	; (801013c <MlmeConfirm+0x13c>)
 80100c8:	22ff      	movs	r2, #255	; 0xff
 80100ca:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 80100cc:	4b1a      	ldr	r3, [pc, #104]	; (8010138 <MlmeConfirm+0x138>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d004      	beq.n	80100e0 <MlmeConfirm+0xe0>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80100d6:	4b18      	ldr	r3, [pc, #96]	; (8010138 <MlmeConfirm+0x138>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100dc:	4817      	ldr	r0, [pc, #92]	; (801013c <MlmeConfirm+0x13c>)
 80100de:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 80100e0:	4b14      	ldr	r3, [pc, #80]	; (8010134 <MlmeConfirm+0x134>)
 80100e2:	785b      	ldrb	r3, [r3, #1]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d120      	bne.n	801012a <MlmeConfirm+0x12a>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 80100e8:	4b14      	ldr	r3, [pc, #80]	; (801013c <MlmeConfirm+0x13c>)
 80100ea:	79db      	ldrb	r3, [r3, #7]
 80100ec:	4618      	mov	r0, r3
 80100ee:	f7ff f859 	bl	800f1a4 <SecureElementPrintSessionKeys>
                }
            }
            break;
 80100f2:	e01a      	b.n	801012a <MlmeConfirm+0x12a>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 80100f4:	4b16      	ldr	r3, [pc, #88]	; (8010150 <MlmeConfirm+0x150>)
 80100f6:	2201      	movs	r2, #1
 80100f8:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	7a1a      	ldrb	r2, [r3, #8]
 80100fe:	4b14      	ldr	r3, [pc, #80]	; (8010150 <MlmeConfirm+0x150>)
 8010100:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7a5a      	ldrb	r2, [r3, #9]
 8010106:	4b12      	ldr	r3, [pc, #72]	; (8010150 <MlmeConfirm+0x150>)
 8010108:	74da      	strb	r2, [r3, #19]
            }
            break;
 801010a:	e00f      	b.n	801012c <MlmeConfirm+0x12c>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	785b      	ldrb	r3, [r3, #1]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d105      	bne.n	8010120 <MlmeConfirm+0x120>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 8010114:	4b0d      	ldr	r3, [pc, #52]	; (801014c <MlmeConfirm+0x14c>)
 8010116:	7c1b      	ldrb	r3, [r3, #16]
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff fdd3 	bl	800fcc4 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 801011e:	e005      	b.n	801012c <MlmeConfirm+0x12c>
                    LmHandlerDeviceTimeReq( );
 8010120:	f7ff fdb4 	bl	800fc8c <LmHandlerDeviceTimeReq>
            break;
 8010124:	e002      	b.n	801012c <MlmeConfirm+0x12c>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 8010126:	bf00      	nop
 8010128:	e000      	b.n	801012c <MlmeConfirm+0x12c>
            break;
 801012a:	bf00      	nop
    }
}
 801012c:	bf00      	nop
 801012e:	3730      	adds	r7, #48	; 0x30
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	200000b0 	.word	0x200000b0
 8010138:	200007d0 	.word	0x200007d0
 801013c:	200000a4 	.word	0x200000a4
 8010140:	2000078c 	.word	0x2000078c
 8010144:	200000a8 	.word	0x200000a8
 8010148:	200000a9 	.word	0x200000a9
 801014c:	200007b8 	.word	0x200007b8
 8010150:	200000cc 	.word	0x200000cc

08010154 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 801015e:	4b20      	ldr	r3, [pc, #128]	; (80101e0 <MlmeIndication+0x8c>)
 8010160:	2200      	movs	r2, #0
 8010162:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	785a      	ldrb	r2, [r3, #1]
 8010168:	4b1d      	ldr	r3, [pc, #116]	; (80101e0 <MlmeIndication+0x8c>)
 801016a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	789b      	ldrb	r3, [r3, #2]
 8010170:	b25a      	sxtb	r2, r3
 8010172:	4b1b      	ldr	r3, [pc, #108]	; (80101e0 <MlmeIndication+0x8c>)
 8010174:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	f9b3 3000 	ldrsh.w	r3, [r3]
 801017c:	b25a      	sxtb	r2, r3
 801017e:	4b18      	ldr	r3, [pc, #96]	; (80101e0 <MlmeIndication+0x8c>)
 8010180:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	f993 2002 	ldrsb.w	r2, [r3, #2]
 8010188:	4b15      	ldr	r3, [pc, #84]	; (80101e0 <MlmeIndication+0x8c>)
 801018a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	78da      	ldrb	r2, [r3, #3]
 8010190:	4b13      	ldr	r3, [pc, #76]	; (80101e0 <MlmeIndication+0x8c>)
 8010192:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	4a11      	ldr	r2, [pc, #68]	; (80101e0 <MlmeIndication+0x8c>)
 801019a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 801019c:	4b11      	ldr	r3, [pc, #68]	; (80101e4 <MlmeIndication+0x90>)
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d00d      	beq.n	80101c2 <MlmeIndication+0x6e>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b0b      	cmp	r3, #11
 80101ac:	d009      	beq.n	80101c2 <MlmeIndication+0x6e>
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	781b      	ldrb	r3, [r3, #0]
 80101b2:	2b0f      	cmp	r3, #15
 80101b4:	d005      	beq.n	80101c2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80101b6:	4b0b      	ldr	r3, [pc, #44]	; (80101e4 <MlmeIndication+0x90>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101bc:	4908      	ldr	r1, [pc, #32]	; (80101e0 <MlmeIndication+0x8c>)
 80101be:	2000      	movs	r0, #0
 80101c0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80101c2:	6879      	ldr	r1, [r7, #4]
 80101c4:	2003      	movs	r0, #3
 80101c6:	f000 f88d 	bl	80102e4 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	781b      	ldrb	r3, [r3, #0]
 80101ce:	2b0b      	cmp	r3, #11
 80101d0:	d001      	beq.n	80101d6 <MlmeIndication+0x82>
 80101d2:	2b0f      	cmp	r3, #15
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 80101d4:	e000      	b.n	80101d8 <MlmeIndication+0x84>
            break;
 80101d6:	bf00      	nop
    }
}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	200000cc 	.word	0x200000cc
 80101e4:	200007d0 	.word	0x200007d0

080101e8 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b084      	sub	sp, #16
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	4603      	mov	r3, r0
 80101f0:	6039      	str	r1, [r7, #0]
 80101f2:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 80101f4:	2300      	movs	r3, #0
 80101f6:	60fb      	str	r3, [r7, #12]
    switch( id )
 80101f8:	79fb      	ldrb	r3, [r7, #7]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d104      	bne.n	8010208 <LmHandlerPackageRegister+0x20>
    {
        case PACKAGE_ID_COMPLIANCE:
            {
                package = LmhpCompliancePackageFactory( );
 80101fe:	f000 f9dd 	bl	80105bc <LmhpCompliancePackageFactory>
 8010202:	4603      	mov	r3, r0
 8010204:	60fb      	str	r3, [r7, #12]
                break;
 8010206:	e00d      	b.n	8010224 <LmHandlerPackageRegister+0x3c>
            }
        default:
            {
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8010208:	f107 020c 	add.w	r2, r7, #12
 801020c:	79fb      	ldrb	r3, [r7, #7]
 801020e:	4611      	mov	r1, r2
 8010210:	4618      	mov	r0, r3
 8010212:	f000 fce9 	bl	8010be8 <LmhpPackagesRegister>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d002      	beq.n	8010222 <LmHandlerPackageRegister+0x3a>
                {
                    return LORAMAC_HANDLER_ERROR;
 801021c:	f04f 33ff 	mov.w	r3, #4294967295
 8010220:	e031      	b.n	8010286 <LmHandlerPackageRegister+0x9e>
                }
                break;
 8010222:	bf00      	nop
            }
    }
    if( package != NULL )
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d02b      	beq.n	8010282 <LmHandlerPackageRegister+0x9a>
    {
        LmHandlerPackages[id] = package;
 801022a:	79fb      	ldrb	r3, [r7, #7]
 801022c:	68fa      	ldr	r2, [r7, #12]
 801022e:	4918      	ldr	r1, [pc, #96]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 8010230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8010234:	79fb      	ldrb	r3, [r7, #7]
 8010236:	4a16      	ldr	r2, [pc, #88]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 8010238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801023c:	4a15      	ldr	r2, [pc, #84]	; (8010294 <LmHandlerPackageRegister+0xac>)
 801023e:	62da      	str	r2, [r3, #44]	; 0x2c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8010240:	79fb      	ldrb	r3, [r7, #7]
 8010242:	4a13      	ldr	r2, [pc, #76]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 8010244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010248:	4a13      	ldr	r2, [pc, #76]	; (8010298 <LmHandlerPackageRegister+0xb0>)
 801024a:	631a      	str	r2, [r3, #48]	; 0x30
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 801024c:	79fb      	ldrb	r3, [r7, #7]
 801024e:	4a10      	ldr	r2, [pc, #64]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 8010250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010254:	4a11      	ldr	r2, [pc, #68]	; (801029c <LmHandlerPackageRegister+0xb4>)
 8010256:	635a      	str	r2, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8010258:	4b11      	ldr	r3, [pc, #68]	; (80102a0 <LmHandlerPackageRegister+0xb8>)
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	79fb      	ldrb	r3, [r7, #7]
 801025e:	490c      	ldr	r1, [pc, #48]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 8010260:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010264:	6992      	ldr	r2, [r2, #24]
 8010266:	619a      	str	r2, [r3, #24]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	4a09      	ldr	r2, [pc, #36]	; (8010290 <LmHandlerPackageRegister+0xa8>)
 801026c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010270:	685b      	ldr	r3, [r3, #4]
 8010272:	4a0c      	ldr	r2, [pc, #48]	; (80102a4 <LmHandlerPackageRegister+0xbc>)
 8010274:	6851      	ldr	r1, [r2, #4]
 8010276:	4a0b      	ldr	r2, [pc, #44]	; (80102a4 <LmHandlerPackageRegister+0xbc>)
 8010278:	7852      	ldrb	r2, [r2, #1]
 801027a:	6838      	ldr	r0, [r7, #0]
 801027c:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 801027e:	2300      	movs	r3, #0
 8010280:	e001      	b.n	8010286 <LmHandlerPackageRegister+0x9e>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 8010282:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	bf00      	nop
 8010290:	200007a4 	.word	0x200007a4
 8010294:	0800f94d 	.word	0x0800f94d
 8010298:	0800facd 	.word	0x0800facd
 801029c:	0800fc8d 	.word	0x0800fc8d
 80102a0:	200007d0 	.word	0x200007d0
 80102a4:	200000e0 	.word	0x200000e0

080102a8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b082      	sub	sp, #8
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	4603      	mov	r3, r0
 80102b0:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 80102b2:	79fb      	ldrb	r3, [r7, #7]
 80102b4:	2b04      	cmp	r3, #4
 80102b6:	d80e      	bhi.n	80102d6 <LmHandlerPackageIsInitialized+0x2e>
 80102b8:	79fb      	ldrb	r3, [r7, #7]
 80102ba:	4a09      	ldr	r2, [pc, #36]	; (80102e0 <LmHandlerPackageIsInitialized+0x38>)
 80102bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c0:	689b      	ldr	r3, [r3, #8]
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	d007      	beq.n	80102d6 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 80102c6:	79fb      	ldrb	r3, [r7, #7]
 80102c8:	4a05      	ldr	r2, [pc, #20]	; (80102e0 <LmHandlerPackageIsInitialized+0x38>)
 80102ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102ce:	689b      	ldr	r3, [r3, #8]
 80102d0:	4798      	blx	r3
 80102d2:	4603      	mov	r3, r0
 80102d4:	e000      	b.n	80102d8 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 80102d6:	2300      	movs	r3, #0
    }
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	200007a4 	.word	0x200007a4

080102e4 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	4603      	mov	r3, r0
 80102ec:	6039      	str	r1, [r7, #0]
 80102ee:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
 80102f4:	e07c      	b.n	80103f0 <LmHandlerPackagesNotify+0x10c>
    {
        if( LmHandlerPackages[i] != NULL )
 80102f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80102fa:	4a42      	ldr	r2, [pc, #264]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 80102fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d06f      	beq.n	80103e4 <LmHandlerPackagesNotify+0x100>
        {
            switch( notifyType )
 8010304:	79fb      	ldrb	r3, [r7, #7]
 8010306:	2b03      	cmp	r3, #3
 8010308:	d863      	bhi.n	80103d2 <LmHandlerPackagesNotify+0xee>
 801030a:	a201      	add	r2, pc, #4	; (adr r2, 8010310 <LmHandlerPackagesNotify+0x2c>)
 801030c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010310:	08010321 	.word	0x08010321
 8010314:	08010343 	.word	0x08010343
 8010318:	0801038f 	.word	0x0801038f
 801031c:	080103b1 	.word	0x080103b1
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8010320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010324:	4a37      	ldr	r2, [pc, #220]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801032a:	69db      	ldr	r3, [r3, #28]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d052      	beq.n	80103d6 <LmHandlerPackagesNotify+0xf2>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 8010330:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010334:	4a33      	ldr	r2, [pc, #204]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801033a:	69db      	ldr	r3, [r3, #28]
 801033c:	6838      	ldr	r0, [r7, #0]
 801033e:	4798      	blx	r3
                        }
                        break;
 8010340:	e049      	b.n	80103d6 <LmHandlerPackagesNotify+0xf2>
                    }
                case PACKAGE_MCPS_INDICATION:
                    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010346:	4a2f      	ldr	r2, [pc, #188]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801034c:	6a1b      	ldr	r3, [r3, #32]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d043      	beq.n	80103da <LmHandlerPackagesNotify+0xf6>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8010352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010356:	4a2b      	ldr	r2, [pc, #172]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801035c:	781a      	ldrb	r2, [r3, #0]
 801035e:	683b      	ldr	r3, [r7, #0]
 8010360:	78db      	ldrb	r3, [r3, #3]
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 8010362:	429a      	cmp	r2, r3
 8010364:	d00a      	beq.n	801037c <LmHandlerPackagesNotify+0x98>
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
 8010366:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d135      	bne.n	80103da <LmHandlerPackagesNotify+0xf6>
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
 801036e:	4b25      	ldr	r3, [pc, #148]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	4798      	blx	r3
 8010376:	4603      	mov	r3, r0
 8010378:	2b00      	cmp	r3, #0
 801037a:	d02e      	beq.n	80103da <LmHandlerPackagesNotify+0xf6>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 801037c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010380:	4a20      	ldr	r2, [pc, #128]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010386:	6a1b      	ldr	r3, [r3, #32]
 8010388:	6838      	ldr	r0, [r7, #0]
 801038a:	4798      	blx	r3
                        }
                        break;
 801038c:	e025      	b.n	80103da <LmHandlerPackagesNotify+0xf6>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 801038e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010392:	4a1c      	ldr	r2, [pc, #112]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 8010394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039a:	2b00      	cmp	r3, #0
 801039c:	d01f      	beq.n	80103de <LmHandlerPackagesNotify+0xfa>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 801039e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103a2:	4a18      	ldr	r2, [pc, #96]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 80103a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103aa:	6838      	ldr	r0, [r7, #0]
 80103ac:	4798      	blx	r3
                        }
                        break;
 80103ae:	e016      	b.n	80103de <LmHandlerPackagesNotify+0xfa>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 80103b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103b4:	4a13      	ldr	r2, [pc, #76]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 80103b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d010      	beq.n	80103e2 <LmHandlerPackagesNotify+0xfe>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 80103c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103c4:	4a0f      	ldr	r2, [pc, #60]	; (8010404 <LmHandlerPackagesNotify+0x120>)
 80103c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103cc:	6838      	ldr	r0, [r7, #0]
 80103ce:	4798      	blx	r3
                        }
                        break;
 80103d0:	e007      	b.n	80103e2 <LmHandlerPackagesNotify+0xfe>
                    }
                default:
                    {
                        break;
 80103d2:	bf00      	nop
 80103d4:	e006      	b.n	80103e4 <LmHandlerPackagesNotify+0x100>
                        break;
 80103d6:	bf00      	nop
 80103d8:	e004      	b.n	80103e4 <LmHandlerPackagesNotify+0x100>
                        break;
 80103da:	bf00      	nop
 80103dc:	e002      	b.n	80103e4 <LmHandlerPackagesNotify+0x100>
                        break;
 80103de:	bf00      	nop
 80103e0:	e000      	b.n	80103e4 <LmHandlerPackagesNotify+0x100>
                        break;
 80103e2:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80103e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103e8:	b2db      	uxtb	r3, r3
 80103ea:	3301      	adds	r3, #1
 80103ec:	b2db      	uxtb	r3, r3
 80103ee:	73fb      	strb	r3, [r7, #15]
 80103f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103f4:	2b04      	cmp	r3, #4
 80103f6:	f77f af7e 	ble.w	80102f6 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 80103fa:	bf00      	nop
 80103fc:	bf00      	nop
 80103fe:	3710      	adds	r7, #16
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	200007a4 	.word	0x200007a4

08010408 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b082      	sub	sp, #8
 801040c:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801040e:	2300      	movs	r3, #0
 8010410:	71fb      	strb	r3, [r7, #7]
 8010412:	e01c      	b.n	801044e <LmHandlerPackageIsTxPending+0x46>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
 8010414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010418:	4a11      	ldr	r2, [pc, #68]	; (8010460 <LmHandlerPackageIsTxPending+0x58>)
 801041a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00f      	beq.n	8010442 <LmHandlerPackageIsTxPending+0x3a>
 8010422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00b      	beq.n	8010442 <LmHandlerPackageIsTxPending+0x3a>
#else
        if( LmHandlerPackages[i] != NULL )
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 801042a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801042e:	4a0c      	ldr	r2, [pc, #48]	; (8010460 <LmHandlerPackageIsTxPending+0x58>)
 8010430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010434:	691b      	ldr	r3, [r3, #16]
 8010436:	4798      	blx	r3
 8010438:	4603      	mov	r3, r0
 801043a:	2b00      	cmp	r3, #0
 801043c:	d001      	beq.n	8010442 <LmHandlerPackageIsTxPending+0x3a>
            {
                return true;
 801043e:	2301      	movs	r3, #1
 8010440:	e00a      	b.n	8010458 <LmHandlerPackageIsTxPending+0x50>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8010442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010446:	b2db      	uxtb	r3, r3
 8010448:	3301      	adds	r3, #1
 801044a:	b2db      	uxtb	r3, r3
 801044c:	71fb      	strb	r3, [r7, #7]
 801044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010452:	2b04      	cmp	r3, #4
 8010454:	ddde      	ble.n	8010414 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 8010456:	2300      	movs	r3, #0
}
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}
 8010460:	200007a4 	.word	0x200007a4

08010464 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 801046a:	2300      	movs	r3, #0
 801046c:	71fb      	strb	r3, [r7, #7]
 801046e:	e022      	b.n	80104b6 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8010470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010474:	4a14      	ldr	r2, [pc, #80]	; (80104c8 <LmHandlerPackagesProcess+0x64>)
 8010476:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d015      	beq.n	80104aa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 801047e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010482:	4a11      	ldr	r2, [pc, #68]	; (80104c8 <LmHandlerPackagesProcess+0x64>)
 8010484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010488:	695b      	ldr	r3, [r3, #20]
        if( ( LmHandlerPackages[i] != NULL ) &&
 801048a:	2b00      	cmp	r3, #0
 801048c:	d00d      	beq.n	80104aa <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 801048e:	79fb      	ldrb	r3, [r7, #7]
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff ff09 	bl	80102a8 <LmHandlerPackageIsInitialized>
 8010496:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8010498:	2b00      	cmp	r3, #0
 801049a:	d006      	beq.n	80104aa <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 801049c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104a0:	4a09      	ldr	r2, [pc, #36]	; (80104c8 <LmHandlerPackagesProcess+0x64>)
 80104a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a6:	695b      	ldr	r3, [r3, #20]
 80104a8:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80104aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	3301      	adds	r3, #1
 80104b2:	b2db      	uxtb	r3, r3
 80104b4:	71fb      	strb	r3, [r7, #7]
 80104b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104ba:	2b04      	cmp	r3, #4
 80104bc:	ddd8      	ble.n	8010470 <LmHandlerPackagesProcess+0xc>
        }
    }
}
 80104be:	bf00      	nop
 80104c0:	bf00      	nop
 80104c2:	3708      	adds	r7, #8
 80104c4:	46bd      	mov	sp, r7
 80104c6:	bd80      	pop	{r7, pc}
 80104c8:	200007a4 	.word	0x200007a4

080104cc <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
 80104cc:	b480      	push	{r7}
 80104ce:	b083      	sub	sp, #12
 80104d0:	af00      	add	r7, sp, #0
 80104d2:	4603      	mov	r3, r0
 80104d4:	6039      	str	r1, [r7, #0]
 80104d6:	71fb      	strb	r3, [r7, #7]
    if( featureVersion == NULL )
 80104d8:	683b      	ldr	r3, [r7, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d102      	bne.n	80104e4 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 80104de:	f04f 33ff 	mov.w	r3, #4294967295
 80104e2:	e00e      	b.n	8010502 <LmHandlerGetVersion+0x36>
    }

    switch( lmhType )
 80104e4:	79fb      	ldrb	r3, [r7, #7]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <LmHandlerGetVersion+0x24>
 80104ea:	2b01      	cmp	r3, #1
 80104ec:	d004      	beq.n	80104f8 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
            break;
 80104ee:	e007      	b.n	8010500 <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 80104f0:	683b      	ldr	r3, [r7, #0]
 80104f2:	4a06      	ldr	r2, [pc, #24]	; (801050c <LmHandlerGetVersion+0x40>)
 80104f4:	601a      	str	r2, [r3, #0]
            break;
 80104f6:	e003      	b.n	8010500 <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	4a05      	ldr	r2, [pc, #20]	; (8010510 <LmHandlerGetVersion+0x44>)
 80104fc:	601a      	str	r2, [r3, #0]
            break;
 80104fe:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 8010500:	2300      	movs	r3, #0
}
 8010502:	4618      	mov	r0, r3
 8010504:	370c      	adds	r7, #12
 8010506:	46bd      	mov	sp, r7
 8010508:	bc80      	pop	{r7}
 801050a:	4770      	bx	lr
 801050c:	01000300 	.word	0x01000300
 8010510:	01010003 	.word	0x01010003

08010514 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8010514:	b580      	push	{r7, lr}
 8010516:	af00      	add	r7, sp, #0
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8010518:	f005 f882 	bl	8015620 <LoRaMacDeInitialization>
 801051c:	4603      	mov	r3, r0
 801051e:	2b00      	cmp	r3, #0
 8010520:	d101      	bne.n	8010526 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 8010522:	2300      	movs	r3, #0
 8010524:	e001      	b.n	801052a <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010526:	f06f 0301 	mvn.w	r3, #1
    }
}
 801052a:	4618      	mov	r0, r3
 801052c:	bd80      	pop	{r7, pc}

0801052e <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 801052e:	b580      	push	{r7, lr}
 8010530:	af00      	add	r7, sp, #0
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8010532:	f004 f80d 	bl	8014550 <LoRaMacHalt>
 8010536:	4603      	mov	r3, r0
 8010538:	2b00      	cmp	r3, #0
 801053a:	d101      	bne.n	8010540 <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801053c:	2300      	movs	r3, #0
 801053e:	e001      	b.n	8010544 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8010540:	f06f 0301 	mvn.w	r3, #1
    }
}
 8010544:	4618      	mov	r0, r3
 8010546:	bd80      	pop	{r7, pc}

08010548 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 8010548:	b580      	push	{r7, lr}
 801054a:	b08c      	sub	sp, #48	; 0x30
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d102      	bne.n	801055c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 8010556:	f04f 33ff 	mov.w	r3, #4294967295
 801055a:	e016      	b.n	801058a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 801055c:	2320      	movs	r3, #32
 801055e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8010560:	f107 0308 	add.w	r3, r7, #8
 8010564:	4618      	mov	r0, r3
 8010566:	f004 f8a3 	bl	80146b0 <LoRaMacMibGetRequestConfirm>
 801056a:	4603      	mov	r3, r0
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 8010570:	f04f 33ff 	mov.w	r3, #4294967295
 8010574:	e009      	b.n	801058a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8010576:	f997 200c 	ldrsb.w	r2, [r7, #12]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f993 2000 	ldrsb.w	r2, [r3]
 8010584:	4b03      	ldr	r3, [pc, #12]	; (8010594 <LmHandlerGetTxPower+0x4c>)
 8010586:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 8010588:	2300      	movs	r3, #0
}
 801058a:	4618      	mov	r0, r3
 801058c:	3730      	adds	r7, #48	; 0x30
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	200007b8 	.word	0x200007b8

08010598 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8010598:	b480      	push	{r7}
 801059a:	af00      	add	r7, sp, #0
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
    }

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
 801059c:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 80105a0:	4618      	mov	r0, r3
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bc80      	pop	{r7}
 80105a6:	4770      	bx	lr

080105a8 <NvmDataMgmtEvent>:
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
static uint16_t NvmNotifyFlags = 0;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 80105a8:	b480      	push	{r7}
 80105aa:	b083      	sub	sp, #12
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	4603      	mov	r3, r0
 80105b0:	80fb      	strh	r3, [r7, #6]
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80105b2:	bf00      	nop
 80105b4:	370c      	adds	r7, #12
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bc80      	pop	{r7}
 80105ba:	4770      	bx	lr

080105bc <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate = NULL,                                   /* To be initialized by LmHandler */
    .OnPackageProcessEvent = NULL,                             /* To be initialized by LmHandler */
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 80105bc:	b480      	push	{r7}
 80105be:	af00      	add	r7, sp, #0
    return &LmhpCompliancePackage;
 80105c0:	4b02      	ldr	r3, [pc, #8]	; (80105cc <LmhpCompliancePackageFactory+0x10>)
}
 80105c2:	4618      	mov	r0, r3
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bc80      	pop	{r7}
 80105c8:	4770      	bx	lr
 80105ca:	bf00      	nop
 80105cc:	200000e8 	.word	0x200000e8

080105d0 <LmhpComplianceInit>:

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	4613      	mov	r3, r2
 80105dc:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d00f      	beq.n	8010604 <LmhpComplianceInit+0x34>
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d00c      	beq.n	8010604 <LmhpComplianceInit+0x34>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t * )params;
 80105ea:	4a0c      	ldr	r2, [pc, #48]	; (801061c <LmhpComplianceInit+0x4c>)
 80105ec:	68fb      	ldr	r3, [r7, #12]
 80105ee:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 80105f0:	4a0b      	ldr	r2, [pc, #44]	; (8010620 <LmhpComplianceInit+0x50>)
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	6093      	str	r3, [r2, #8]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 80105f6:	4a0a      	ldr	r2, [pc, #40]	; (8010620 <LmhpComplianceInit+0x50>)
 80105f8:	79fb      	ldrb	r3, [r7, #7]
 80105fa:	7153      	strb	r3, [r2, #5]
        ComplianceTestState.Initialized = true;
 80105fc:	4b08      	ldr	r3, [pc, #32]	; (8010620 <LmhpComplianceInit+0x50>)
 80105fe:	2201      	movs	r2, #1
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	e006      	b.n	8010612 <LmhpComplianceInit+0x42>
    }
    else
    {
        LmhpComplianceParams = NULL;
 8010604:	4b05      	ldr	r3, [pc, #20]	; (801061c <LmhpComplianceInit+0x4c>)
 8010606:	2200      	movs	r2, #0
 8010608:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 801060a:	4b05      	ldr	r3, [pc, #20]	; (8010620 <LmhpComplianceInit+0x50>)
 801060c:	2200      	movs	r2, #0
 801060e:	701a      	strb	r2, [r3, #0]
    }
}
 8010610:	bf00      	nop
 8010612:	bf00      	nop
 8010614:	3714      	adds	r7, #20
 8010616:	46bd      	mov	sp, r7
 8010618:	bc80      	pop	{r7}
 801061a:	4770      	bx	lr
 801061c:	20000920 	.word	0x20000920
 8010620:	2000090c 	.word	0x2000090c

08010624 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 8010624:	b480      	push	{r7}
 8010626:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 8010628:	4b02      	ldr	r3, [pc, #8]	; (8010634 <LmhpComplianceIsInitialized+0x10>)
 801062a:	781b      	ldrb	r3, [r3, #0]
}
 801062c:	4618      	mov	r0, r3
 801062e:	46bd      	mov	sp, r7
 8010630:	bc80      	pop	{r7}
 8010632:	4770      	bx	lr
 8010634:	2000090c 	.word	0x2000090c

08010638 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
 8010638:	b480      	push	{r7}
 801063a:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 801063c:	4b07      	ldr	r3, [pc, #28]	; (801065c <LmhpComplianceIsRunning+0x24>)
 801063e:	781b      	ldrb	r3, [r3, #0]
 8010640:	f083 0301 	eor.w	r3, r3, #1
 8010644:	b2db      	uxtb	r3, r3
 8010646:	2b00      	cmp	r3, #0
 8010648:	d001      	beq.n	801064e <LmhpComplianceIsRunning+0x16>
    {
        return false;
 801064a:	2300      	movs	r3, #0
 801064c:	e001      	b.n	8010652 <LmhpComplianceIsRunning+0x1a>
    }

    return ComplianceTestState.IsRunning;
 801064e:	4b03      	ldr	r3, [pc, #12]	; (801065c <LmhpComplianceIsRunning+0x24>)
 8010650:	785b      	ldrb	r3, [r3, #1]
}
 8010652:	4618      	mov	r0, r3
 8010654:	46bd      	mov	sp, r7
 8010656:	bc80      	pop	{r7}
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	2000090c 	.word	0x2000090c

08010660 <LmhpComplianceOnMcpsConfirm>:

static void LmhpComplianceOnMcpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 8010668:	4b0f      	ldr	r3, [pc, #60]	; (80106a8 <LmhpComplianceOnMcpsConfirm+0x48>)
 801066a:	781b      	ldrb	r3, [r3, #0]
 801066c:	f083 0301 	eor.w	r3, r3, #1
 8010670:	b2db      	uxtb	r3, r3
 8010672:	2b00      	cmp	r3, #0
 8010674:	d112      	bne.n	801069c <LmhpComplianceOnMcpsConfirm+0x3c>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010676:	4b0c      	ldr	r3, [pc, #48]	; (80106a8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010678:	785b      	ldrb	r3, [r3, #1]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d00f      	beq.n	801069e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	781b      	ldrb	r3, [r3, #0]
    if( ( ComplianceTestState.IsRunning == true ) &&
 8010682:	2b01      	cmp	r3, #1
 8010684:	d10b      	bne.n	801069e <LmhpComplianceOnMcpsConfirm+0x3e>
        ( mcpsConfirm->AckReceived != 0 ) )
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	791b      	ldrb	r3, [r3, #4]
        ( mcpsConfirm->McpsRequest == MCPS_CONFIRMED ) &&
 801068a:	2b00      	cmp	r3, #0
 801068c:	d007      	beq.n	801069e <LmhpComplianceOnMcpsConfirm+0x3e>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801068e:	4b06      	ldr	r3, [pc, #24]	; (80106a8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010690:	899b      	ldrh	r3, [r3, #12]
 8010692:	3301      	adds	r3, #1
 8010694:	b29a      	uxth	r2, r3
 8010696:	4b04      	ldr	r3, [pc, #16]	; (80106a8 <LmhpComplianceOnMcpsConfirm+0x48>)
 8010698:	819a      	strh	r2, [r3, #12]
 801069a:	e000      	b.n	801069e <LmhpComplianceOnMcpsConfirm+0x3e>
        return;
 801069c:	bf00      	nop
    }
}
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bc80      	pop	{r7}
 80106a4:	4770      	bx	lr
 80106a6:	bf00      	nop
 80106a8:	2000090c 	.word	0x2000090c

080106ac <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80106b4:	4b12      	ldr	r3, [pc, #72]	; (8010700 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	f083 0301 	eor.w	r3, r3, #1
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d116      	bne.n	80106f0 <LmhpComplianceOnMlmeConfirm+0x44>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 80106c2:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106c4:	785b      	ldrb	r3, [r3, #1]
 80106c6:	f083 0301 	eor.w	r3, r3, #1
 80106ca:	b2db      	uxtb	r3, r3
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d111      	bne.n	80106f4 <LmhpComplianceOnMlmeConfirm+0x48>
    {
        return;
    }

    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	781b      	ldrb	r3, [r3, #0]
 80106d4:	2b05      	cmp	r3, #5
 80106d6:	d10e      	bne.n	80106f6 <LmhpComplianceOnMlmeConfirm+0x4a>
    {
        ComplianceTestState.LinkCheck = true;
 80106d8:	4b09      	ldr	r3, [pc, #36]	; (8010700 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106da:	2201      	movs	r2, #1
 80106dc:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	7a1a      	ldrb	r2, [r3, #8]
 80106e2:	4b07      	ldr	r3, [pc, #28]	; (8010700 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106e4:	73da      	strb	r2, [r3, #15]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	7a5a      	ldrb	r2, [r3, #9]
 80106ea:	4b05      	ldr	r3, [pc, #20]	; (8010700 <LmhpComplianceOnMlmeConfirm+0x54>)
 80106ec:	741a      	strb	r2, [r3, #16]
 80106ee:	e002      	b.n	80106f6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106f0:	bf00      	nop
 80106f2:	e000      	b.n	80106f6 <LmhpComplianceOnMlmeConfirm+0x4a>
        return;
 80106f4:	bf00      	nop
    }
}
 80106f6:	370c      	adds	r7, #12
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bc80      	pop	{r7}
 80106fc:	4770      	bx	lr
 80106fe:	bf00      	nop
 8010700:	2000090c 	.word	0x2000090c

08010704 <LmhpComplianceTxProcess>:

static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b082      	sub	sp, #8
 8010708:	af00      	add	r7, sp, #0
    if( ComplianceTestState.Initialized == false )
 801070a:	4b36      	ldr	r3, [pc, #216]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801070c:	781b      	ldrb	r3, [r3, #0]
 801070e:	f083 0301 	eor.w	r3, r3, #1
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <LmhpComplianceTxProcess+0x1a>
    {
        return LORAMAC_HANDLER_ERROR;
 8010718:	f04f 33ff 	mov.w	r3, #4294967295
 801071c:	e05e      	b.n	80107dc <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.IsRunning == false )
 801071e:	4b31      	ldr	r3, [pc, #196]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010720:	785b      	ldrb	r3, [r3, #1]
 8010722:	f083 0301 	eor.w	r3, r3, #1
 8010726:	b2db      	uxtb	r3, r3
 8010728:	2b00      	cmp	r3, #0
 801072a:	d001      	beq.n	8010730 <LmhpComplianceTxProcess+0x2c>
    {
        return LORAMAC_HANDLER_SUCCESS;
 801072c:	2300      	movs	r3, #0
 801072e:	e055      	b.n	80107dc <LmhpComplianceTxProcess+0xd8>
    }

    if( ComplianceTestState.LinkCheck == true )
 8010730:	4b2c      	ldr	r3, [pc, #176]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010732:	7b9b      	ldrb	r3, [r3, #14]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d019      	beq.n	801076c <LmhpComplianceTxProcess+0x68>
    {
        ComplianceTestState.LinkCheck = false;
 8010738:	4b2a      	ldr	r3, [pc, #168]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801073a:	2200      	movs	r2, #0
 801073c:	739a      	strb	r2, [r3, #14]
        ComplianceTestState.DataBufferSize = 3;
 801073e:	4b29      	ldr	r3, [pc, #164]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010740:	2203      	movs	r2, #3
 8010742:	719a      	strb	r2, [r3, #6]
        ComplianceTestState.DataBuffer[0] = 5;
 8010744:	4b27      	ldr	r3, [pc, #156]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010746:	689b      	ldr	r3, [r3, #8]
 8010748:	2205      	movs	r2, #5
 801074a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 801074c:	4b25      	ldr	r3, [pc, #148]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801074e:	689b      	ldr	r3, [r3, #8]
 8010750:	3301      	adds	r3, #1
 8010752:	4a24      	ldr	r2, [pc, #144]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010754:	7bd2      	ldrb	r2, [r2, #15]
 8010756:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8010758:	4b22      	ldr	r3, [pc, #136]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	3302      	adds	r3, #2
 801075e:	4a21      	ldr	r2, [pc, #132]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010760:	7c12      	ldrb	r2, [r2, #16]
 8010762:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.State = 1;
 8010764:	4b1f      	ldr	r3, [pc, #124]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010766:	2201      	movs	r2, #1
 8010768:	709a      	strb	r2, [r3, #2]
 801076a:	e01c      	b.n	80107a6 <LmhpComplianceTxProcess+0xa2>
    }
    else
    {
        switch( ComplianceTestState.State )
 801076c:	4b1d      	ldr	r3, [pc, #116]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801076e:	789b      	ldrb	r3, [r3, #2]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d005      	beq.n	8010780 <LmhpComplianceTxProcess+0x7c>
 8010774:	2b04      	cmp	r3, #4
 8010776:	d116      	bne.n	80107a6 <LmhpComplianceTxProcess+0xa2>
        {
            case 4:
                ComplianceTestState.State = 1;
 8010778:	4b1a      	ldr	r3, [pc, #104]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801077a:	2201      	movs	r2, #1
 801077c:	709a      	strb	r2, [r3, #2]
                break;
 801077e:	e012      	b.n	80107a6 <LmhpComplianceTxProcess+0xa2>
            case 1:
                ComplianceTestState.DataBufferSize = 2;
 8010780:	4b18      	ldr	r3, [pc, #96]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010782:	2202      	movs	r2, #2
 8010784:	719a      	strb	r2, [r3, #6]
                ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8010786:	4b17      	ldr	r3, [pc, #92]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010788:	899b      	ldrh	r3, [r3, #12]
 801078a:	0a1b      	lsrs	r3, r3, #8
 801078c:	b29a      	uxth	r2, r3
 801078e:	4b15      	ldr	r3, [pc, #84]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010790:	689b      	ldr	r3, [r3, #8]
 8010792:	b2d2      	uxtb	r2, r2
 8010794:	701a      	strb	r2, [r3, #0]
                ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8010796:	4b13      	ldr	r3, [pc, #76]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 8010798:	899a      	ldrh	r2, [r3, #12]
 801079a:	4b12      	ldr	r3, [pc, #72]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 801079c:	689b      	ldr	r3, [r3, #8]
 801079e:	3301      	adds	r3, #1
 80107a0:	b2d2      	uxtb	r2, r2
 80107a2:	701a      	strb	r2, [r3, #0]
                break;
 80107a4:	bf00      	nop
        }
    }

    LmHandlerAppData_t appData =
 80107a6:	23e0      	movs	r3, #224	; 0xe0
 80107a8:	703b      	strb	r3, [r7, #0]
    {
        .Buffer = ComplianceTestState.DataBuffer,
        .BufferSize = ComplianceTestState.DataBufferSize,
 80107aa:	4b0e      	ldr	r3, [pc, #56]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 80107ac:	799b      	ldrb	r3, [r3, #6]
    LmHandlerAppData_t appData =
 80107ae:	707b      	strb	r3, [r7, #1]
        .Buffer = ComplianceTestState.DataBuffer,
 80107b0:	4b0c      	ldr	r3, [pc, #48]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 80107b2:	689b      	ldr	r3, [r3, #8]
    LmHandlerAppData_t appData =
 80107b4:	607b      	str	r3, [r7, #4]
        .Port = COMPLIANCE_PORT
    };

    /* Schedule next transmission */
    TimerStart( &ComplianceTxNextPacketTimer );
 80107b6:	480c      	ldr	r0, [pc, #48]	; (80107e8 <LmhpComplianceTxProcess+0xe4>)
 80107b8:	f00d fc5a 	bl	801e070 <UTIL_TIMER_Start>

    if( LmhpCompliancePackage.OnSendRequest == NULL)
 80107bc:	4b0b      	ldr	r3, [pc, #44]	; (80107ec <LmhpComplianceTxProcess+0xe8>)
 80107be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d102      	bne.n	80107ca <LmhpComplianceTxProcess+0xc6>
    {
        return LORAMAC_HANDLER_ERROR;
 80107c4:	f04f 33ff 	mov.w	r3, #4294967295
 80107c8:	e008      	b.n	80107dc <LmhpComplianceTxProcess+0xd8>
    }

    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, true );
 80107ca:	4b08      	ldr	r3, [pc, #32]	; (80107ec <LmhpComplianceTxProcess+0xe8>)
 80107cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107ce:	4a05      	ldr	r2, [pc, #20]	; (80107e4 <LmhpComplianceTxProcess+0xe0>)
 80107d0:	78d2      	ldrb	r2, [r2, #3]
 80107d2:	4611      	mov	r1, r2
 80107d4:	4638      	mov	r0, r7
 80107d6:	2201      	movs	r2, #1
 80107d8:	4798      	blx	r3
 80107da:	4603      	mov	r3, r0
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3708      	adds	r7, #8
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	2000090c 	.word	0x2000090c
 80107e8:	200008f4 	.word	0x200008f4
 80107ec:	200000e8 	.word	0x200000e8

080107f0 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t *mcpsIndication )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b0a4      	sub	sp, #144	; 0x90
 80107f4:	af02      	add	r7, sp, #8
 80107f6:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 80107f8:	4ba5      	ldr	r3, [pc, #660]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	f083 0301 	eor.w	r3, r3, #1
 8010800:	b2db      	uxtb	r3, r3
 8010802:	2b00      	cmp	r3, #0
 8010804:	f040 81c6 	bne.w	8010b94 <LmhpComplianceOnMcpsIndication+0x3a4>
    {
        return;
    }

    if( mcpsIndication->RxData == false )
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	7b5b      	ldrb	r3, [r3, #13]
 801080c:	f083 0301 	eor.w	r3, r3, #1
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b00      	cmp	r3, #0
 8010814:	f040 81c0 	bne.w	8010b98 <LmhpComplianceOnMcpsIndication+0x3a8>
    {
        return;
    }

    if( ( ComplianceTestState.IsRunning == true ) &&
 8010818:	4b9d      	ldr	r3, [pc, #628]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801081a:	785b      	ldrb	r3, [r3, #1]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d00c      	beq.n	801083a <LmhpComplianceOnMcpsIndication+0x4a>
        ( mcpsIndication->AckReceived == 0 ) )
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	7b9b      	ldrb	r3, [r3, #14]
 8010824:	f083 0301 	eor.w	r3, r3, #1
 8010828:	b2db      	uxtb	r3, r3
    if( ( ComplianceTestState.IsRunning == true ) &&
 801082a:	2b00      	cmp	r3, #0
 801082c:	d005      	beq.n	801083a <LmhpComplianceOnMcpsIndication+0x4a>
    {
        /* Increment the compliance certification protocol downlink counter */
        ComplianceTestState.DownLinkCounter++;
 801082e:	4b98      	ldr	r3, [pc, #608]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010830:	899b      	ldrh	r3, [r3, #12]
 8010832:	3301      	adds	r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	4b96      	ldr	r3, [pc, #600]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010838:	819a      	strh	r2, [r3, #12]
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	78db      	ldrb	r3, [r3, #3]
 801083e:	2be0      	cmp	r3, #224	; 0xe0
 8010840:	f040 81ac 	bne.w	8010b9c <LmhpComplianceOnMcpsIndication+0x3ac>
    {
        return;
    }

    if( ComplianceTestState.IsRunning == false )
 8010844:	4b92      	ldr	r3, [pc, #584]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010846:	785b      	ldrb	r3, [r3, #1]
 8010848:	f083 0301 	eor.w	r3, r3, #1
 801084c:	b2db      	uxtb	r3, r3
 801084e:	2b00      	cmp	r3, #0
 8010850:	d060      	beq.n	8010914 <LmhpComplianceOnMcpsIndication+0x124>
    {
        /* Check compliance test enable command (i) */
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	7b1b      	ldrb	r3, [r3, #12]
 8010856:	2b04      	cmp	r3, #4
 8010858:	f040 81a7 	bne.w	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	781b      	ldrb	r3, [r3, #0]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 8010862:	2b01      	cmp	r3, #1
 8010864:	f040 81a1 	bne.w	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	3301      	adds	r3, #1
 801086e:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 8010870:	2b01      	cmp	r3, #1
 8010872:	f040 819a 	bne.w	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	689b      	ldr	r3, [r3, #8]
 801087a:	3302      	adds	r3, #2
 801087c:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 801087e:	2b01      	cmp	r3, #1
 8010880:	f040 8193 	bne.w	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            ( mcpsIndication->Buffer[3] == 0x01 ) )
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	689b      	ldr	r3, [r3, #8]
 8010888:	3303      	adds	r3, #3
 801088a:	781b      	ldrb	r3, [r3, #0]
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 801088c:	2b01      	cmp	r3, #1
 801088e:	f040 818c 	bne.w	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
        {
            MibRequestConfirm_t mibReq;

            /* Initialize compliance test mode context */
            ComplianceTestState.IsTxConfirmed = false;
 8010892:	4b7f      	ldr	r3, [pc, #508]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010894:	2200      	movs	r2, #0
 8010896:	70da      	strb	r2, [r3, #3]
            ComplianceTestState.Port = 224;
 8010898:	4b7d      	ldr	r3, [pc, #500]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801089a:	22e0      	movs	r2, #224	; 0xe0
 801089c:	711a      	strb	r2, [r3, #4]
            ComplianceTestState.DataBufferSize = 2;
 801089e:	4b7c      	ldr	r3, [pc, #496]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a0:	2202      	movs	r2, #2
 80108a2:	719a      	strb	r2, [r3, #6]
            ComplianceTestState.DownLinkCounter = 0;
 80108a4:	4b7a      	ldr	r3, [pc, #488]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108a6:	2200      	movs	r2, #0
 80108a8:	819a      	strh	r2, [r3, #12]
            ComplianceTestState.LinkCheck = false;
 80108aa:	4b79      	ldr	r3, [pc, #484]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108ac:	2200      	movs	r2, #0
 80108ae:	739a      	strb	r2, [r3, #14]
            ComplianceTestState.DemodMargin = 0;
 80108b0:	4b77      	ldr	r3, [pc, #476]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108b2:	2200      	movs	r2, #0
 80108b4:	73da      	strb	r2, [r3, #15]
            ComplianceTestState.NbGateways = 0;
 80108b6:	4b76      	ldr	r3, [pc, #472]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108b8:	2200      	movs	r2, #0
 80108ba:	741a      	strb	r2, [r3, #16]
            ComplianceTestState.IsRunning = true;
 80108bc:	4b74      	ldr	r3, [pc, #464]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108be:	2201      	movs	r2, #1
 80108c0:	705a      	strb	r2, [r3, #1]
            ComplianceTestState.State = 1;
 80108c2:	4b73      	ldr	r3, [pc, #460]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80108c4:	2201      	movs	r2, #1
 80108c6:	709a      	strb	r2, [r3, #2]

            /* Enable ADR while in compliance test mode */
            mibReq.Type = MIB_ADR;
 80108c8:	2304      	movs	r3, #4
 80108ca:	733b      	strb	r3, [r7, #12]
            mibReq.Param.AdrEnable = true;
 80108cc:	2301      	movs	r3, #1
 80108ce:	743b      	strb	r3, [r7, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80108d0:	f107 030c 	add.w	r3, r7, #12
 80108d4:	4618      	mov	r0, r3
 80108d6:	f004 f8a1 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

            /* Disable duty cycle enforcement while in compliance test mode */
            LoRaMacTestSetDutyCycleOn( false );
 80108da:	2000      	movs	r0, #0
 80108dc:	f004 fe7a 	bl	80155d4 <LoRaMacTestSetDutyCycleOn>

            /* Stop peripherals */
            if( LmhpComplianceParams->StopPeripherals != NULL )
 80108e0:	4b6c      	ldr	r3, [pc, #432]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	685b      	ldr	r3, [r3, #4]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d003      	beq.n	80108f2 <LmhpComplianceOnMcpsIndication+0x102>
            {
                LmhpComplianceParams->StopPeripherals( );
 80108ea:	4b6a      	ldr	r3, [pc, #424]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	685b      	ldr	r3, [r3, #4]
 80108f0:	4798      	blx	r3
            }
            /* Initialize compliance protocol transmission timer */
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 80108f2:	2300      	movs	r3, #0
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	4b68      	ldr	r3, [pc, #416]	; (8010a98 <LmhpComplianceOnMcpsIndication+0x2a8>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	f04f 31ff 	mov.w	r1, #4294967295
 80108fe:	4867      	ldr	r0, [pc, #412]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010900:	f00d fb80 	bl	801e004 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 8010904:	f241 3188 	movw	r1, #5000	; 0x1388
 8010908:	4864      	ldr	r0, [pc, #400]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2ac>)
 801090a:	f00d fc8f 	bl	801e22c <UTIL_TIMER_SetPeriod>

            /* Confirm compliance test protocol activation */
            LmhpComplianceTxProcess( );
 801090e:	f7ff fef9 	bl	8010704 <LmhpComplianceTxProcess>
 8010912:	e14a      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
    }
    else
    {

        /* Parse compliance test protocol */
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	781a      	ldrb	r2, [r3, #0]
 801091a:	4b5d      	ldr	r3, [pc, #372]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801091c:	709a      	strb	r2, [r3, #2]
        switch( ComplianceTestState.State )
 801091e:	4b5c      	ldr	r3, [pc, #368]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010920:	789b      	ldrb	r3, [r3, #2]
 8010922:	2b0a      	cmp	r3, #10
 8010924:	f200 813c 	bhi.w	8010ba0 <LmhpComplianceOnMcpsIndication+0x3b0>
 8010928:	a201      	add	r2, pc, #4	; (adr r2, 8010930 <LmhpComplianceOnMcpsIndication+0x140>)
 801092a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801092e:	bf00      	nop
 8010930:	0801095d 	.word	0x0801095d
 8010934:	080109a7 	.word	0x080109a7
 8010938:	080109af 	.word	0x080109af
 801093c:	080109bd 	.word	0x080109bd
 8010940:	080109cb 	.word	0x080109cb
 8010944:	08010a23 	.word	0x08010a23
 8010948:	08010a35 	.word	0x08010a35
 801094c:	08010aa5 	.word	0x08010aa5
 8010950:	08010b4d 	.word	0x08010b4d
 8010954:	08010b5f 	.word	0x08010b5f
 8010958:	08010b79 	.word	0x08010b79
        {
            case 0: /* Check compliance test disable command (ii) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 801095c:	484f      	ldr	r0, [pc, #316]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2ac>)
 801095e:	f00d fbf5 	bl	801e14c <UTIL_TIMER_Stop>

                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010962:	4b4b      	ldr	r3, [pc, #300]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010964:	2200      	movs	r2, #0
 8010966:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010968:	4b49      	ldr	r3, [pc, #292]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 801096a:	2200      	movs	r2, #0
 801096c:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 801096e:	2304      	movs	r3, #4
 8010970:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010972:	4b48      	ldr	r3, [pc, #288]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 801097a:	f107 030c 	add.w	r3, r7, #12
 801097e:	4618      	mov	r0, r3
 8010980:	f004 f84c 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010984:	4b43      	ldr	r3, [pc, #268]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	785b      	ldrb	r3, [r3, #1]
 801098a:	4618      	mov	r0, r3
 801098c:	f004 fe22 	bl	80155d4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010990:	4b40      	ldr	r3, [pc, #256]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	689b      	ldr	r3, [r3, #8]
 8010996:	2b00      	cmp	r3, #0
 8010998:	f000 8104 	beq.w	8010ba4 <LmhpComplianceOnMcpsIndication+0x3b4>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 801099c:	4b3d      	ldr	r3, [pc, #244]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	4798      	blx	r3
                    }
                }
                break;
 80109a4:	e0fe      	b.n	8010ba4 <LmhpComplianceOnMcpsIndication+0x3b4>
            case 1: /* (iii, iv) */
                ComplianceTestState.DataBufferSize = 2;
 80109a6:	4b3a      	ldr	r3, [pc, #232]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109a8:	2202      	movs	r2, #2
 80109aa:	719a      	strb	r2, [r3, #6]
                break;
 80109ac:	e0fd      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 2: /* Enable confirmed messages (v) */
                ComplianceTestState.IsTxConfirmed = true;
 80109ae:	4b38      	ldr	r3, [pc, #224]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109b0:	2201      	movs	r2, #1
 80109b2:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109b4:	4b36      	ldr	r3, [pc, #216]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109b6:	2201      	movs	r2, #1
 80109b8:	709a      	strb	r2, [r3, #2]
                break;
 80109ba:	e0f6      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 3:  /* Disable confirmed messages (vi) */
                ComplianceTestState.IsTxConfirmed = false;
 80109bc:	4b34      	ldr	r3, [pc, #208]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109be:	2200      	movs	r2, #0
 80109c0:	70da      	strb	r2, [r3, #3]
                ComplianceTestState.State = 1;
 80109c2:	4b33      	ldr	r3, [pc, #204]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109c4:	2201      	movs	r2, #1
 80109c6:	709a      	strb	r2, [r3, #2]
                break;
 80109c8:	e0ef      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 4: /* (vii) */
                ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	7b1a      	ldrb	r2, [r3, #12]
 80109ce:	4b30      	ldr	r3, [pc, #192]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d0:	719a      	strb	r2, [r3, #6]

                ComplianceTestState.DataBuffer[0] = 4;
 80109d2:	4b2f      	ldr	r3, [pc, #188]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109d4:	689b      	ldr	r3, [r3, #8]
 80109d6:	2204      	movs	r2, #4
 80109d8:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109da:	2301      	movs	r3, #1
 80109dc:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80109e0:	e012      	b.n	8010a08 <LmhpComplianceOnMcpsIndication+0x218>
                {
                    ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	689a      	ldr	r2, [r3, #8]
 80109e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109ea:	4413      	add	r3, r2
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	4b28      	ldr	r3, [pc, #160]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 80109f0:	6899      	ldr	r1, [r3, #8]
 80109f2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80109f6:	440b      	add	r3, r1
 80109f8:	3201      	adds	r2, #1
 80109fa:	b2d2      	uxtb	r2, r2
 80109fc:	701a      	strb	r2, [r3, #0]
                for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80109fe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010a02:	3301      	adds	r3, #1
 8010a04:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8010a08:	4b21      	ldr	r3, [pc, #132]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a0a:	795a      	ldrb	r2, [r3, #5]
 8010a0c:	4b20      	ldr	r3, [pc, #128]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a0e:	799b      	ldrb	r3, [r3, #6]
 8010a10:	4293      	cmp	r3, r2
 8010a12:	bf28      	it	cs
 8010a14:	4613      	movcs	r3, r2
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d3e0      	bcc.n	80109e2 <LmhpComplianceOnMcpsIndication+0x1f2>
                }
                break;
 8010a20:	e0c3      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 5: /* (viii) */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_LINK_CHECK;
 8010a22:	2305      	movs	r3, #5
 8010a24:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

                    LoRaMacMlmeRequest( &mlmeReq );
 8010a28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	f004 fb89 	bl	8015144 <LoRaMacMlmeRequest>
                }
                break;
 8010a32:	e0ba      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 6: /* (ix) */
                {
                    MibRequestConfirm_t mibReq;

                    TimerStop( &ComplianceTxNextPacketTimer );
 8010a34:	4819      	ldr	r0, [pc, #100]	; (8010a9c <LmhpComplianceOnMcpsIndication+0x2ac>)
 8010a36:	f00d fb89 	bl	801e14c <UTIL_TIMER_Stop>

                    /* Disable TestMode and revert back to normal operation */
                    /* Disable compliance test mode and reset the downlink counter. */
                    ComplianceTestState.DownLinkCounter = 0;
 8010a3a:	4b15      	ldr	r3, [pc, #84]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a3c:	2200      	movs	r2, #0
 8010a3e:	819a      	strh	r2, [r3, #12]
                    ComplianceTestState.IsRunning = false;
 8010a40:	4b13      	ldr	r3, [pc, #76]	; (8010a90 <LmhpComplianceOnMcpsIndication+0x2a0>)
 8010a42:	2200      	movs	r2, #0
 8010a44:	705a      	strb	r2, [r3, #1]

                    /* Restore previous ADR setting */
                    mibReq.Type = MIB_ADR;
 8010a46:	2304      	movs	r3, #4
 8010a48:	733b      	strb	r3, [r7, #12]
                    mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8010a4a:	4b12      	ldr	r3, [pc, #72]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	781b      	ldrb	r3, [r3, #0]
 8010a50:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010a52:	f107 030c 	add.w	r3, r7, #12
 8010a56:	4618      	mov	r0, r3
 8010a58:	f003 ffe0 	bl	8014a1c <LoRaMacMibSetRequestConfirm>

                    /* Enable duty cycle enforcement */
                    LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8010a5c:	4b0d      	ldr	r3, [pc, #52]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	785b      	ldrb	r3, [r3, #1]
 8010a62:	4618      	mov	r0, r3
 8010a64:	f004 fdb6 	bl	80155d4 <LoRaMacTestSetDutyCycleOn>

                    /* Restart peripherals */
                    if( LmhpComplianceParams->StartPeripherals != NULL )
 8010a68:	4b0a      	ldr	r3, [pc, #40]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	689b      	ldr	r3, [r3, #8]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <LmhpComplianceOnMcpsIndication+0x28a>
                    {
                        LmhpComplianceParams->StartPeripherals( );
 8010a72:	4b08      	ldr	r3, [pc, #32]	; (8010a94 <LmhpComplianceOnMcpsIndication+0x2a4>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	689b      	ldr	r3, [r3, #8]
 8010a78:	4798      	blx	r3
                    }

                    if( LmhpCompliancePackage.OnJoinRequest != NULL )
 8010a7a:	4b09      	ldr	r3, [pc, #36]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	f000 8092 	beq.w	8010ba8 <LmhpComplianceOnMcpsIndication+0x3b8>
                    {
                        LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8010a84:	4b06      	ldr	r3, [pc, #24]	; (8010aa0 <LmhpComplianceOnMcpsIndication+0x2b0>)
 8010a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a88:	2101      	movs	r1, #1
 8010a8a:	2002      	movs	r0, #2
 8010a8c:	4798      	blx	r3
                    }
                }
                break;
 8010a8e:	e08b      	b.n	8010ba8 <LmhpComplianceOnMcpsIndication+0x3b8>
 8010a90:	2000090c 	.word	0x2000090c
 8010a94:	20000920 	.word	0x20000920
 8010a98:	08010bc1 	.word	0x08010bc1
 8010a9c:	200008f4 	.word	0x200008f4
 8010aa0:	200000e8 	.word	0x200000e8
            case 7: /* (x) */
                {
                    MlmeReq_t mlmeReq;
                    if( mcpsIndication->BufferSize == 3 )
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	7b1b      	ldrb	r3, [r3, #12]
 8010aa8:	2b03      	cmp	r3, #3
 8010aaa:	d113      	bne.n	8010ad4 <LmhpComplianceOnMcpsIndication+0x2e4>
                    {
                        mlmeReq.Type = MLME_TXCW;
 8010aac:	2306      	movs	r3, #6
 8010aae:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	689b      	ldr	r3, [r3, #8]
 8010ab6:	3301      	adds	r3, #1
 8010ab8:	781b      	ldrb	r3, [r3, #0]
 8010aba:	021b      	lsls	r3, r3, #8
 8010abc:	b21a      	sxth	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	689b      	ldr	r3, [r3, #8]
 8010ac2:	3302      	adds	r3, #2
 8010ac4:	781b      	ldrb	r3, [r3, #0]
 8010ac6:	b21b      	sxth	r3, r3
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	b21b      	sxth	r3, r3
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8010ad2:	e032      	b.n	8010b3a <LmhpComplianceOnMcpsIndication+0x34a>
                    }
                    else if( mcpsIndication->BufferSize == 7 )
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	7b1b      	ldrb	r3, [r3, #12]
 8010ad8:	2b07      	cmp	r3, #7
 8010ada:	d12e      	bne.n	8010b3a <LmhpComplianceOnMcpsIndication+0x34a>
                    {
                        mlmeReq.Type = MLME_TXCW_1;
 8010adc:	2307      	movs	r3, #7
 8010ade:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
                        mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	689b      	ldr	r3, [r3, #8]
 8010ae6:	3301      	adds	r3, #1
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	021b      	lsls	r3, r3, #8
 8010aec:	b21a      	sxth	r2, r3
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	689b      	ldr	r3, [r3, #8]
 8010af2:	3302      	adds	r3, #2
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	b21b      	sxth	r3, r3
 8010af8:	4313      	orrs	r3, r2
 8010afa:	b21b      	sxth	r3, r3
 8010afc:	b29b      	uxth	r3, r3
 8010afe:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                        mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	689b      	ldr	r3, [r3, #8]
 8010b06:	3303      	adds	r3, #3
 8010b08:	781b      	ldrb	r3, [r3, #0]
 8010b0a:	041a      	lsls	r2, r3, #16
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	689b      	ldr	r3, [r3, #8]
 8010b10:	3304      	adds	r3, #4
 8010b12:	781b      	ldrb	r3, [r3, #0]
 8010b14:	021b      	lsls	r3, r3, #8
 8010b16:	4313      	orrs	r3, r2
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	6892      	ldr	r2, [r2, #8]
 8010b1c:	3205      	adds	r2, #5
 8010b1e:	7812      	ldrb	r2, [r2, #0]
 8010b20:	4313      	orrs	r3, r2
 8010b22:	461a      	mov	r2, r3
 8010b24:	2364      	movs	r3, #100	; 0x64
 8010b26:	fb02 f303 	mul.w	r3, r2, r3
 8010b2a:	667b      	str	r3, [r7, #100]	; 0x64
                        mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	3306      	adds	r3, #6
 8010b32:	781b      	ldrb	r3, [r3, #0]
 8010b34:	b25b      	sxtb	r3, r3
 8010b36:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacMlmeRequest( &mlmeReq );
 8010b3a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8010b3e:	4618      	mov	r0, r3
 8010b40:	f004 fb00 	bl	8015144 <LoRaMacMlmeRequest>
                    ComplianceTestState.State = 1;
 8010b44:	4b1a      	ldr	r3, [pc, #104]	; (8010bb0 <LmhpComplianceOnMcpsIndication+0x3c0>)
 8010b46:	2201      	movs	r2, #1
 8010b48:	709a      	strb	r2, [r3, #2]
                }
                break;
 8010b4a:	e02e      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 8: /* Send DeviceTimeReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_DEVICE_TIME;
 8010b4c:	230a      	movs	r3, #10
 8010b4e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010b56:	4618      	mov	r0, r3
 8010b58:	f004 faf4 	bl	8015144 <LoRaMacMlmeRequest>
                }
                break;
 8010b5c:	e025      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 9: /* Switch end device Class */
                {
                    MibRequestConfirm_t mibReq;

                    mibReq.Type = MIB_DEVICE_CLASS;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	733b      	strb	r3, [r7, #12]
                    /* CLASS_A = 0, CLASS_B = 1, CLASS_C = 2 */
                    mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	689b      	ldr	r3, [r3, #8]
 8010b66:	3301      	adds	r3, #1
 8010b68:	781b      	ldrb	r3, [r3, #0]
 8010b6a:	743b      	strb	r3, [r7, #16]
                    LoRaMacMibSetRequestConfirm( &mibReq );
 8010b6c:	f107 030c 	add.w	r3, r7, #12
 8010b70:	4618      	mov	r0, r3
 8010b72:	f003 ff53 	bl	8014a1c <LoRaMacMibSetRequestConfirm>
                }
                break;
 8010b76:	e018      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            case 10: /* Send PingSlotInfoReq */
                {
                    MlmeReq_t mlmeReq;

                    mlmeReq.Type = MLME_PING_SLOT_INFO;
 8010b78:	230d      	movs	r3, #13
 8010b7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                    mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	785b      	ldrb	r3, [r3, #1]
 8010b84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

                    LoRaMacMlmeRequest( &mlmeReq );
 8010b88:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f004 fad9 	bl	8015144 <LoRaMacMlmeRequest>
                }
                break;
 8010b92:	e00a      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b94:	bf00      	nop
 8010b96:	e008      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b98:	bf00      	nop
 8010b9a:	e006      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
        return;
 8010b9c:	bf00      	nop
 8010b9e:	e004      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
            default:
                break;
 8010ba0:	bf00      	nop
 8010ba2:	e002      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010ba4:	bf00      	nop
 8010ba6:	e000      	b.n	8010baa <LmhpComplianceOnMcpsIndication+0x3ba>
                break;
 8010ba8:	bf00      	nop
        }
    }
}
 8010baa:	3788      	adds	r7, #136	; 0x88
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	2000090c 	.word	0x2000090c

08010bb4 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	af00      	add	r7, sp, #0
    /* Nothing to process */
}
 8010bb8:	bf00      	nop
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bc80      	pop	{r7}
 8010bbe:	4770      	bx	lr

08010bc0 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void *context )
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    LmhpComplianceTxProcess( );
 8010bc8:	f7ff fd9c 	bl	8010704 <LmhpComplianceTxProcess>
}
 8010bcc:	bf00      	nop
 8010bce:	3708      	adds	r7, #8
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd80      	pop	{r7, pc}

08010bd4 <LmhpPackagesRegistrationInit>:

/* Private variables ---------------------------------------------------------*/

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmhpPackagesRegistrationInit( Version_t *fwVersion )
{
 8010bd4:	b480      	push	{r7}
 8010bd6:	b083      	sub	sp, #12
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
        return LORAMAC_HANDLER_ERROR;
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
 8010bdc:	2300      	movs	r3, #0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	370c      	adds	r7, #12
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bc80      	pop	{r7}
 8010be6:	4770      	bx	lr

08010be8 <LmhpPackagesRegister>:

LmHandlerErrorStatus_t LmhpPackagesRegister( uint8_t id, LmhPackage_t **package )
{
 8010be8:	b480      	push	{r7}
 8010bea:	b083      	sub	sp, #12
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	6039      	str	r1, [r7, #0]
 8010bf2:	71fb      	strb	r3, [r7, #7]
                break;
            }
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
 8010bf4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	370c      	adds	r7, #12
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bc80      	pop	{r7}
 8010c00:	4770      	bx	lr
	...

08010c04 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 8010c04:	b590      	push	{r4, r7, lr}
 8010c06:	b083      	sub	sp, #12
 8010c08:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8010c0a:	f00d fbb9 	bl	801e380 <UTIL_TIMER_GetCurrentTime>
 8010c0e:	4603      	mov	r3, r0
 8010c10:	4a0f      	ldr	r2, [pc, #60]	; (8010c50 <OnRadioTxDone+0x4c>)
 8010c12:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8010c14:	4c0f      	ldr	r4, [pc, #60]	; (8010c54 <OnRadioTxDone+0x50>)
 8010c16:	463b      	mov	r3, r7
 8010c18:	4618      	mov	r0, r3
 8010c1a:	f00c fd2f 	bl	801d67c <SysTimeGet>
 8010c1e:	f504 734e 	add.w	r3, r4, #824	; 0x338
 8010c22:	463a      	mov	r2, r7
 8010c24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010c28:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 8010c2c:	4a0a      	ldr	r2, [pc, #40]	; (8010c58 <OnRadioTxDone+0x54>)
 8010c2e:	7813      	ldrb	r3, [r2, #0]
 8010c30:	f043 0310 	orr.w	r3, r3, #16
 8010c34:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010c36:	f003 f8e1 	bl	8013dfc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8010c3a:	4b08      	ldr	r3, [pc, #32]	; (8010c5c <OnRadioTxDone+0x58>)
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	2100      	movs	r1, #0
 8010c40:	2002      	movs	r0, #2
 8010c42:	f00d fc8d 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 8010c46:	bf00      	nop
 8010c48:	370c      	adds	r7, #12
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd90      	pop	{r4, r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	20001598 	.word	0x20001598
 8010c54:	20000924 	.word	0x20000924
 8010c58:	20001594 	.word	0x20001594
 8010c5c:	0801f310 	.word	0x0801f310

08010c60 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b084      	sub	sp, #16
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	60f8      	str	r0, [r7, #12]
 8010c68:	4608      	mov	r0, r1
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	461a      	mov	r2, r3
 8010c6e:	4603      	mov	r3, r0
 8010c70:	817b      	strh	r3, [r7, #10]
 8010c72:	460b      	mov	r3, r1
 8010c74:	813b      	strh	r3, [r7, #8]
 8010c76:	4613      	mov	r3, r2
 8010c78:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8010c7a:	f00d fb81 	bl	801e380 <UTIL_TIMER_GetCurrentTime>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	4a0f      	ldr	r2, [pc, #60]	; (8010cc0 <OnRadioRxDone+0x60>)
 8010c82:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 8010c84:	4a0e      	ldr	r2, [pc, #56]	; (8010cc0 <OnRadioRxDone+0x60>)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 8010c8a:	4a0d      	ldr	r2, [pc, #52]	; (8010cc0 <OnRadioRxDone+0x60>)
 8010c8c:	897b      	ldrh	r3, [r7, #10]
 8010c8e:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 8010c90:	4a0b      	ldr	r2, [pc, #44]	; (8010cc0 <OnRadioRxDone+0x60>)
 8010c92:	893b      	ldrh	r3, [r7, #8]
 8010c94:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 8010c96:	4a0a      	ldr	r2, [pc, #40]	; (8010cc0 <OnRadioRxDone+0x60>)
 8010c98:	79fb      	ldrb	r3, [r7, #7]
 8010c9a:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 8010c9c:	4a09      	ldr	r2, [pc, #36]	; (8010cc4 <OnRadioRxDone+0x64>)
 8010c9e:	7813      	ldrb	r3, [r2, #0]
 8010ca0:	f043 0308 	orr.w	r3, r3, #8
 8010ca4:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 8010ca6:	f003 f8a9 	bl	8013dfc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8010caa:	4b07      	ldr	r3, [pc, #28]	; (8010cc8 <OnRadioRxDone+0x68>)
 8010cac:	2201      	movs	r2, #1
 8010cae:	2100      	movs	r1, #0
 8010cb0:	2002      	movs	r0, #2
 8010cb2:	f00d fc55 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cb6:	bf00      	nop
 8010cb8:	3710      	adds	r7, #16
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	2000159c 	.word	0x2000159c
 8010cc4:	20001594 	.word	0x20001594
 8010cc8:	0801f320 	.word	0x0801f320

08010ccc <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8010cd0:	4a07      	ldr	r2, [pc, #28]	; (8010cf0 <OnRadioTxTimeout+0x24>)
 8010cd2:	7813      	ldrb	r3, [r2, #0]
 8010cd4:	f043 0304 	orr.w	r3, r3, #4
 8010cd8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010cda:	f003 f88f 	bl	8013dfc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8010cde:	4b05      	ldr	r3, [pc, #20]	; (8010cf4 <OnRadioTxTimeout+0x28>)
 8010ce0:	2201      	movs	r2, #1
 8010ce2:	2100      	movs	r1, #0
 8010ce4:	2002      	movs	r0, #2
 8010ce6:	f00d fc3b 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 8010cea:	bf00      	nop
 8010cec:	bd80      	pop	{r7, pc}
 8010cee:	bf00      	nop
 8010cf0:	20001594 	.word	0x20001594
 8010cf4:	0801f330 	.word	0x0801f330

08010cf8 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 8010cfc:	4a04      	ldr	r2, [pc, #16]	; (8010d10 <OnRadioRxError+0x18>)
 8010cfe:	7813      	ldrb	r3, [r2, #0]
 8010d00:	f043 0302 	orr.w	r3, r3, #2
 8010d04:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d06:	f003 f879 	bl	8013dfc <OnMacProcessNotify>
}
 8010d0a:	bf00      	nop
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	20001594 	.word	0x20001594

08010d14 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8010d18:	4a07      	ldr	r2, [pc, #28]	; (8010d38 <OnRadioRxTimeout+0x24>)
 8010d1a:	7813      	ldrb	r3, [r2, #0]
 8010d1c:	f043 0301 	orr.w	r3, r3, #1
 8010d20:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 8010d22:	f003 f86b 	bl	8013dfc <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8010d26:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <OnRadioRxTimeout+0x28>)
 8010d28:	2201      	movs	r2, #1
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	2002      	movs	r0, #2
 8010d2e:	f00d fc17 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 8010d32:	bf00      	nop
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	20001594 	.word	0x20001594
 8010d3c:	0801f340 	.word	0x0801f340

08010d40 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 8010d40:	b480      	push	{r7}
 8010d42:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d44:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <UpdateRxSlotIdleState+0x28>)
 8010d46:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d4a:	2b02      	cmp	r3, #2
 8010d4c:	d004      	beq.n	8010d58 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8010d4e:	4b07      	ldr	r3, [pc, #28]	; (8010d6c <UpdateRxSlotIdleState+0x2c>)
 8010d50:	2206      	movs	r2, #6
 8010d52:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8010d56:	e003      	b.n	8010d60 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <UpdateRxSlotIdleState+0x2c>)
 8010d5a:	2202      	movs	r2, #2
 8010d5c:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
}
 8010d60:	bf00      	nop
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bc80      	pop	{r7}
 8010d66:	4770      	bx	lr
 8010d68:	20000e2c 	.word	0x20000e2c
 8010d6c:	20000924 	.word	0x20000924

08010d70 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b092      	sub	sp, #72	; 0x48
 8010d74:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8010d76:	4b50      	ldr	r3, [pc, #320]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010d78:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d002      	beq.n	8010d86 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 8010d80:	4b4e      	ldr	r3, [pc, #312]	; (8010ebc <ProcessRadioTxDone+0x14c>)
 8010d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d84:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d86:	f3ef 8310 	mrs	r3, PRIMASK
 8010d8a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8010d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    CRITICAL_SECTION_BEGIN( );
 8010d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 8010d90:	b672      	cpsid	i
}
 8010d92:	bf00      	nop
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8010d94:	f00d faf4 	bl	801e380 <UTIL_TIMER_GetCurrentTime>
 8010d98:	4602      	mov	r2, r0
 8010d9a:	4b49      	ldr	r3, [pc, #292]	; (8010ec0 <ProcessRadioTxDone+0x150>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	1ad3      	subs	r3, r2, r3
 8010da0:	63bb      	str	r3, [r7, #56]	; 0x38
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 8010da2:	4b48      	ldr	r3, [pc, #288]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010da4:	f8d3 23b0 	ldr.w	r2, [r3, #944]	; 0x3b0
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	4619      	mov	r1, r3
 8010dae:	4846      	ldr	r0, [pc, #280]	; (8010ec8 <ProcessRadioTxDone+0x158>)
 8010db0:	f00d fa3c 	bl	801e22c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8010db4:	4844      	ldr	r0, [pc, #272]	; (8010ec8 <ProcessRadioTxDone+0x158>)
 8010db6:	f00d f95b 	bl	801e070 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 8010dba:	4b42      	ldr	r3, [pc, #264]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010dbc:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc2:	1ad3      	subs	r3, r2, r3
 8010dc4:	4619      	mov	r1, r3
 8010dc6:	4841      	ldr	r0, [pc, #260]	; (8010ecc <ProcessRadioTxDone+0x15c>)
 8010dc8:	f00d fa30 	bl	801e22c <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8010dcc:	483f      	ldr	r0, [pc, #252]	; (8010ecc <ProcessRadioTxDone+0x15c>)
 8010dce:	f00d f94f 	bl	801e070 <UTIL_TIMER_Start>
 8010dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010dd4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dd8:	f383 8810 	msr	PRIMASK, r3
}
 8010ddc:	bf00      	nop
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* DISABLE_LORAWAN_RX_WINDOW */

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8010dde:	4b36      	ldr	r3, [pc, #216]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010de0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d004      	beq.n	8010df2 <ProcessRadioTxDone+0x82>
 8010de8:	4b36      	ldr	r3, [pc, #216]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010dea:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d019      	beq.n	8010e26 <ProcessRadioTxDone+0xb6>
    {
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8010df2:	2316      	movs	r3, #22
 8010df4:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010df8:	4b2f      	ldr	r3, [pc, #188]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010dfa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010dfe:	f107 0220 	add.w	r2, r7, #32
 8010e02:	4611      	mov	r1, r2
 8010e04:	4618      	mov	r0, r3
 8010e06:	f006 fcec 	bl	80177e2 <RegionGetPhyParam>
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8010e0e:	4b2d      	ldr	r3, [pc, #180]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010e10:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	4413      	add	r3, r2
 8010e18:	4619      	mov	r1, r3
 8010e1a:	482d      	ldr	r0, [pc, #180]	; (8010ed0 <ProcessRadioTxDone+0x160>)
 8010e1c:	f00d fa06 	bl	801e22c <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8010e20:	482b      	ldr	r0, [pc, #172]	; (8010ed0 <ProcessRadioTxDone+0x160>)
 8010e22:	f00d f925 	bl	801e070 <UTIL_TIMER_Start>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8010e26:	4b26      	ldr	r3, [pc, #152]	; (8010ec0 <ProcessRadioTxDone+0x150>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a23      	ldr	r2, [pc, #140]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 8010e2e:	4b25      	ldr	r3, [pc, #148]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010e30:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8010e34:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8010e36:	4b22      	ldr	r3, [pc, #136]	; (8010ec0 <ProcessRadioTxDone+0x150>)
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e40:	4618      	mov	r0, r3
 8010e42:	f00c fc53 	bl	801d6ec <SysTimeGetMcuTime>
 8010e46:	4638      	mov	r0, r7
 8010e48:	4b1b      	ldr	r3, [pc, #108]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010e4a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 8010e4e:	9200      	str	r2, [sp, #0]
 8010e50:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8010e54:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010e58:	ca06      	ldmia	r2, {r1, r2}
 8010e5a:	f00c fba8 	bl	801d5ae <SysTimeSub>
 8010e5e:	f107 0314 	add.w	r3, r7, #20
 8010e62:	463a      	mov	r2, r7
 8010e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010e68:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8010e6c:	4b15      	ldr	r3, [pc, #84]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010e6e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8010e72:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 8010e74:	2301      	movs	r3, #1
 8010e76:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010e78:	4b0f      	ldr	r3, [pc, #60]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010e7a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d101      	bne.n	8010e86 <ProcessRadioTxDone+0x116>
    {
        txDone.Joined  = false;
 8010e82:	2300      	movs	r3, #0
 8010e84:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8010e86:	4b0c      	ldr	r3, [pc, #48]	; (8010eb8 <ProcessRadioTxDone+0x148>)
 8010e88:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010e8c:	f107 0208 	add.w	r2, r7, #8
 8010e90:	4611      	mov	r1, r2
 8010e92:	4618      	mov	r0, r3
 8010e94:	f006 fcbd 	bl	8017812 <RegionSetBandTxDone>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8010e98:	4b0a      	ldr	r3, [pc, #40]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010e9a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010e9e:	f083 0301 	eor.w	r3, r3, #1
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d003      	beq.n	8010eb0 <ProcessRadioTxDone+0x140>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010ea8:	4b06      	ldr	r3, [pc, #24]	; (8010ec4 <ProcessRadioTxDone+0x154>)
 8010eaa:	2200      	movs	r2, #0
 8010eac:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    }
#endif /* LORAMAC_VERSION */
}
 8010eb0:	bf00      	nop
 8010eb2:	3740      	adds	r7, #64	; 0x40
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	20000e2c 	.word	0x20000e2c
 8010ebc:	0801f9f0 	.word	0x0801f9f0
 8010ec0:	20001598 	.word	0x20001598
 8010ec4:	20000924 	.word	0x20000924
 8010ec8:	20000ca4 	.word	0x20000ca4
 8010ecc:	20000cbc 	.word	0x20000cbc
 8010ed0:	20000d18 	.word	0x20000d18

08010ed4 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8010ed8:	4b10      	ldr	r3, [pc, #64]	; (8010f1c <PrepareRxDoneAbort+0x48>)
 8010eda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ee2:	4a0e      	ldr	r2, [pc, #56]	; (8010f1c <PrepareRxDoneAbort+0x48>)
 8010ee4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    if( MacCtx.NodeAckRequested == true )
 8010ee8:	4b0c      	ldr	r3, [pc, #48]	; (8010f1c <PrepareRxDoneAbort+0x48>)
 8010eea:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
 8010ef2:	2000      	movs	r0, #0
 8010ef4:	f001 f950 	bl	8012198 <OnAckTimeoutTimerEvent>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 8010ef8:	4a08      	ldr	r2, [pc, #32]	; (8010f1c <PrepareRxDoneAbort+0x48>)
 8010efa:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010efe:	f043 0302 	orr.w	r3, r3, #2
 8010f02:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    MacCtx.MacFlags.Bits.MacDone = 1;
 8010f06:	4a05      	ldr	r2, [pc, #20]	; (8010f1c <PrepareRxDoneAbort+0x48>)
 8010f08:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8010f0c:	f043 0310 	orr.w	r3, r3, #16
 8010f10:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

    UpdateRxSlotIdleState( );
 8010f14:	f7ff ff14 	bl	8010d40 <UpdateRxSlotIdleState>
}
 8010f18:	bf00      	nop
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	20000924 	.word	0x20000924

08010f20 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 8010f20:	b5b0      	push	{r4, r5, r7, lr}
 8010f22:	b0aa      	sub	sp, #168	; 0xa8
 8010f24:	af04      	add	r7, sp, #16
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010f26:	2313      	movs	r3, #19
 8010f28:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 8010f2c:	4b78      	ldr	r3, [pc, #480]	; (8011110 <ProcessRadioRxDone+0x1f0>)
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    uint16_t size = RxDoneParams.Size;
 8010f34:	4b76      	ldr	r3, [pc, #472]	; (8011110 <ProcessRadioRxDone+0x1f0>)
 8010f36:	891b      	ldrh	r3, [r3, #8]
 8010f38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    int16_t rssi = RxDoneParams.Rssi;
 8010f3c:	4b74      	ldr	r3, [pc, #464]	; (8011110 <ProcessRadioRxDone+0x1f0>)
 8010f3e:	895b      	ldrh	r3, [r3, #10]
 8010f40:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
    int8_t snr = RxDoneParams.Snr;
 8010f44:	4b72      	ldr	r3, [pc, #456]	; (8011110 <ProcessRadioRxDone+0x1f0>)
 8010f46:	7b1b      	ldrb	r3, [r3, #12]
 8010f48:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

    uint8_t pktHeaderLen = 0;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    uint32_t downLinkCounter = 0;
 8010f52:	2300      	movs	r3, #0
 8010f54:	613b      	str	r3, [r7, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8010f56:	4b6f      	ldr	r3, [pc, #444]	; (8011114 <ProcessRadioRxDone+0x1f4>)
 8010f58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8010f5c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    uint8_t multicast = 0;
 8010f60:	2300      	movs	r3, #0
 8010f62:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8010f66:	2301      	movs	r3, #1
 8010f68:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 8010f72:	4b69      	ldr	r3, [pc, #420]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f74:	2200      	movs	r2, #0
 8010f76:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    MacCtx.RxStatus.Rssi = rssi;
 8010f7a:	4a67      	ldr	r2, [pc, #412]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f7c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8010f80:	f8a2 347c 	strh.w	r3, [r2, #1148]	; 0x47c
    MacCtx.RxStatus.Snr = snr;
 8010f84:	4a64      	ldr	r2, [pc, #400]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f86:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010f8a:	f882 347e 	strb.w	r3, [r2, #1150]	; 0x47e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8010f8e:	4b62      	ldr	r3, [pc, #392]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f90:	f893 2480 	ldrb.w	r2, [r3, #1152]	; 0x480
 8010f94:	4b60      	ldr	r3, [pc, #384]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f96:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
    MacCtx.McpsIndication.Port = 0;
 8010f9a:	4b5f      	ldr	r3, [pc, #380]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
    MacCtx.McpsIndication.Multicast = 0;
 8010fa2:	4b5d      	ldr	r3, [pc, #372]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8010faa:	4b5b      	ldr	r3, [pc, #364]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fac:	2200      	movs	r2, #0
 8010fae:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
    MacCtx.McpsIndication.Buffer = NULL;
 8010fb2:	4b59      	ldr	r3, [pc, #356]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    MacCtx.McpsIndication.BufferSize = 0;
 8010fba:	4b57      	ldr	r3, [pc, #348]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fbc:	2200      	movs	r2, #0
 8010fbe:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
    MacCtx.McpsIndication.RxData = false;
 8010fc2:	4b55      	ldr	r3, [pc, #340]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
    MacCtx.McpsIndication.AckReceived = false;
 8010fca:	4b53      	ldr	r3, [pc, #332]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fcc:	2200      	movs	r2, #0
 8010fce:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8010fd2:	4b51      	ldr	r3, [pc, #324]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fd4:	2200      	movs	r2, #0
 8010fd6:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8010fda:	4b4f      	ldr	r3, [pc, #316]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fdc:	2200      	movs	r2, #0
 8010fde:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.McpsIndication.DevAddress = 0;
 8010fe2:	4b4d      	ldr	r3, [pc, #308]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8010fea:	4b4b      	ldr	r3, [pc, #300]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8010fec:	2200      	movs	r2, #0
 8010fee:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 8010ff2:	4b4a      	ldr	r3, [pc, #296]	; (801111c <ProcessRadioRxDone+0x1fc>)
 8010ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff6:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
 8010ff8:	4849      	ldr	r0, [pc, #292]	; (8011120 <ProcessRadioRxDone+0x200>)
 8010ffa:	f00d f8a7 	bl	801e14c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8010ffe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011002:	4619      	mov	r1, r3
 8011004:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8011008:	f004 fc4b 	bl	80158a2 <LoRaMacClassBRxBeacon>
 801100c:	4603      	mov	r3, r0
 801100e:	2b00      	cmp	r3, #0
 8011010:	d00b      	beq.n	801102a <ProcessRadioRxDone+0x10a>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8011012:	4a41      	ldr	r2, [pc, #260]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8011014:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8011018:	f8a2 3472 	strh.w	r3, [r2, #1138]	; 0x472
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 801101c:	4a3e      	ldr	r2, [pc, #248]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 801101e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8011022:	f882 3474 	strb.w	r3, [r2, #1140]	; 0x474
        return;
 8011026:	f000 bc1f 	b.w	8011868 <ProcessRadioRxDone+0x948>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801102a:	4b3a      	ldr	r3, [pc, #232]	; (8011114 <ProcessRadioRxDone+0x1f4>)
 801102c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011030:	2b01      	cmp	r3, #1
 8011032:	d11e      	bne.n	8011072 <ProcessRadioRxDone+0x152>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 8011034:	f004 fc48 	bl	80158c8 <LoRaMacClassBIsPingExpected>
 8011038:	4603      	mov	r3, r0
 801103a:	2b00      	cmp	r3, #0
 801103c:	d00a      	beq.n	8011054 <ProcessRadioRxDone+0x134>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801103e:	2000      	movs	r0, #0
 8011040:	f004 fbf9 	bl	8015836 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8011044:	2000      	movs	r0, #0
 8011046:	f004 fc1a 	bl	801587e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 801104a:	4b33      	ldr	r3, [pc, #204]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 801104c:	2204      	movs	r2, #4
 801104e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
 8011052:	e00e      	b.n	8011072 <ProcessRadioRxDone+0x152>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011054:	f004 fc3f 	bl	80158d6 <LoRaMacClassBIsMulticastExpected>
 8011058:	4603      	mov	r3, r0
 801105a:	2b00      	cmp	r3, #0
 801105c:	d009      	beq.n	8011072 <ProcessRadioRxDone+0x152>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 801105e:	2000      	movs	r0, #0
 8011060:	f004 fbf3 	bl	801584a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011064:	2000      	movs	r0, #0
 8011066:	f004 fc13 	bl	8015890 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 801106a:	4b2b      	ldr	r3, [pc, #172]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 801106c:	2205      	movs	r2, #5
 801106e:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 8011072:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011076:	2b00      	cmp	r3, #0
 8011078:	d106      	bne.n	8011088 <ProcessRadioRxDone+0x168>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801107a:	4b27      	ldr	r3, [pc, #156]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 801107c:	2201      	movs	r2, #1
 801107e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
        PrepareRxDoneAbort( );
 8011082:	f7ff ff27 	bl	8010ed4 <PrepareRxDoneAbort>
        return;
 8011086:	e3ef      	b.n	8011868 <ProcessRadioRxDone+0x948>
    }

    macHdr.Value = payload[pktHeaderLen++];
 8011088:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 801108c:	1c5a      	adds	r2, r3, #1
 801108e:	f887 2086 	strb.w	r2, [r7, #134]	; 0x86
 8011092:	461a      	mov	r2, r3
 8011094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011098:	4413      	add	r3, r2
 801109a:	781b      	ldrb	r3, [r3, #0]
 801109c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 80110a0:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80110a4:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80110a8:	b2db      	uxtb	r3, r3
 80110aa:	3b01      	subs	r3, #1
 80110ac:	2b06      	cmp	r3, #6
 80110ae:	f200 83b4 	bhi.w	801181a <ProcessRadioRxDone+0x8fa>
 80110b2:	a201      	add	r2, pc, #4	; (adr r2, 80110b8 <ProcessRadioRxDone+0x198>)
 80110b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b8:	080110d5 	.word	0x080110d5
 80110bc:	0801181b 	.word	0x0801181b
 80110c0:	080112b5 	.word	0x080112b5
 80110c4:	0801181b 	.word	0x0801181b
 80110c8:	080112ad 	.word	0x080112ad
 80110cc:	0801181b 	.word	0x0801181b
 80110d0:	080117bf 	.word	0x080117bf
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 80110d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110d8:	2b10      	cmp	r3, #16
 80110da:	d806      	bhi.n	80110ea <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80110dc:	4b0e      	ldr	r3, [pc, #56]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 80110de:	2201      	movs	r2, #1
 80110e0:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 80110e4:	f7ff fef6 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 80110e8:	e3be      	b.n	8011868 <ProcessRadioRxDone+0x948>
            }
            macMsgJoinAccept.Buffer = payload;
 80110ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80110ee:	617b      	str	r3, [r7, #20]
            macMsgJoinAccept.BufSize = size;
 80110f0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80110f4:	b2db      	uxtb	r3, r3
 80110f6:	763b      	strb	r3, [r7, #24]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 80110f8:	4b06      	ldr	r3, [pc, #24]	; (8011114 <ProcessRadioRxDone+0x1f4>)
 80110fa:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d010      	beq.n	8011124 <ProcessRadioRxDone+0x204>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011102:	4b05      	ldr	r3, [pc, #20]	; (8011118 <ProcessRadioRxDone+0x1f8>)
 8011104:	2201      	movs	r2, #1
 8011106:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801110a:	f7ff fee3 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 801110e:	e3ab      	b.n	8011868 <ProcessRadioRxDone+0x948>
 8011110:	2000159c 	.word	0x2000159c
 8011114:	20000e2c 	.word	0x20000e2c
 8011118:	20000924 	.word	0x20000924
 801111c:	0801f9f0 	.word	0x0801f9f0
 8011120:	20000cbc 	.word	0x20000cbc
            }

            SecureElementGetJoinEui( joinEui );
 8011124:	1d3b      	adds	r3, r7, #4
 8011126:	4618      	mov	r0, r3
 8011128:	f7fe fa92 	bl	800f650 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 801112c:	f107 0214 	add.w	r2, r7, #20
 8011130:	1d3b      	adds	r3, r7, #4
 8011132:	4619      	mov	r1, r3
 8011134:	20ff      	movs	r0, #255	; 0xff
 8011136:	f005 fdd5 	bl	8016ce4 <LoRaMacCryptoHandleJoinAccept>
 801113a:	4603      	mov	r3, r0
 801113c:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 8011140:	2300      	movs	r3, #0
 8011142:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8011146:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801114a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801114e:	b2db      	uxtb	r3, r3
 8011150:	b25b      	sxtb	r3, r3
 8011152:	703b      	strb	r3, [r7, #0]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011154:	4bbb      	ldr	r3, [pc, #748]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011156:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 801115a:	707b      	strb	r3, [r7, #1]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 801115c:	4bb9      	ldr	r3, [pc, #740]	; (8011444 <ProcessRadioRxDone+0x524>)
 801115e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011162:	4639      	mov	r1, r7
 8011164:	2207      	movs	r2, #7
 8011166:	4618      	mov	r0, r3
 8011168:	f006 fb76 	bl	8017858 <RegionVerify>
 801116c:	4603      	mov	r3, r0
 801116e:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8011172:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011176:	2b00      	cmp	r3, #0
 8011178:	f040 808c 	bne.w	8011294 <ProcessRadioRxDone+0x374>
 801117c:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8011180:	2b00      	cmp	r3, #0
 8011182:	f000 8087 	beq.w	8011294 <ProcessRadioRxDone+0x374>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8011186:	7f7b      	ldrb	r3, [r7, #29]
 8011188:	461a      	mov	r2, r3
 801118a:	4bae      	ldr	r3, [pc, #696]	; (8011444 <ProcessRadioRxDone+0x524>)
 801118c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8011190:	4bac      	ldr	r3, [pc, #688]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011192:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8011196:	7fbb      	ldrb	r3, [r7, #30]
 8011198:	021b      	lsls	r3, r3, #8
 801119a:	4313      	orrs	r3, r2
 801119c:	4aa9      	ldr	r2, [pc, #676]	; (8011444 <ProcessRadioRxDone+0x524>)
 801119e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 80111a2:	4ba8      	ldr	r3, [pc, #672]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80111a8:	7ffb      	ldrb	r3, [r7, #31]
 80111aa:	041b      	lsls	r3, r3, #16
 80111ac:	4313      	orrs	r3, r2
 80111ae:	4aa5      	ldr	r2, [pc, #660]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 80111b4:	6a3b      	ldr	r3, [r7, #32]
 80111b6:	4aa3      	ldr	r2, [pc, #652]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 80111bc:	4ba1      	ldr	r3, [pc, #644]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80111c2:	4619      	mov	r1, r3
 80111c4:	2002      	movs	r0, #2
 80111c6:	f7fe fa5b 	bl	800f680 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 80111ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111ce:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80111d2:	b2db      	uxtb	r3, r3
 80111d4:	461a      	mov	r2, r3
 80111d6:	4b9b      	ldr	r3, [pc, #620]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111d8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	461a      	mov	r2, r3
 80111e8:	4b96      	ldr	r3, [pc, #600]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111ea:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 80111ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80111f2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80111f6:	b2db      	uxtb	r3, r3
 80111f8:	461a      	mov	r2, r3
 80111fa:	4b92      	ldr	r3, [pc, #584]	; (8011444 <ProcessRadioRxDone+0x524>)
 80111fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8011200:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8011204:	461a      	mov	r2, r3
 8011206:	4b8f      	ldr	r3, [pc, #572]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011208:	659a      	str	r2, [r3, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 801120a:	4b8e      	ldr	r3, [pc, #568]	; (8011444 <ProcessRadioRxDone+0x524>)
 801120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801120e:	2b00      	cmp	r3, #0
 8011210:	d102      	bne.n	8011218 <ProcessRadioRxDone+0x2f8>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8011212:	4b8c      	ldr	r3, [pc, #560]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011214:	2201      	movs	r2, #1
 8011216:	659a      	str	r2, [r3, #88]	; 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8011218:	4b8a      	ldr	r3, [pc, #552]	; (8011444 <ProcessRadioRxDone+0x524>)
 801121a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801121c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011220:	fb02 f303 	mul.w	r3, r2, r3
 8011224:	4a87      	ldr	r2, [pc, #540]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011226:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8011228:	4b86      	ldr	r3, [pc, #536]	; (8011444 <ProcessRadioRxDone+0x524>)
 801122a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801122c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8011230:	4a84      	ldr	r2, [pc, #528]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011232:	65d3      	str	r3, [r2, #92]	; 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8011234:	4b83      	ldr	r3, [pc, #524]	; (8011444 <ProcessRadioRxDone+0x524>)
 8011236:	2201      	movs	r2, #1
 8011238:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 801123c:	4b81      	ldr	r3, [pc, #516]	; (8011444 <ProcessRadioRxDone+0x524>)
 801123e:	2200      	movs	r2, #0
 8011240:	f883 212a 	strb.w	r2, [r3, #298]	; 0x12a
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8011244:	f107 0314 	add.w	r3, r7, #20
 8011248:	3312      	adds	r3, #18
 801124a:	67bb      	str	r3, [r7, #120]	; 0x78
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 801124c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011250:	b2db      	uxtb	r3, r3
 8011252:	3b11      	subs	r3, #17
 8011254:	b2db      	uxtb	r3, r3
 8011256:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 801125a:	4b7a      	ldr	r3, [pc, #488]	; (8011444 <ProcessRadioRxDone+0x524>)
 801125c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011260:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8011264:	4611      	mov	r1, r2
 8011266:	4618      	mov	r0, r3
 8011268:	f006 fb0d 	bl	8017886 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 801126c:	4b75      	ldr	r3, [pc, #468]	; (8011444 <ProcessRadioRxDone+0x524>)
 801126e:	2202      	movs	r2, #2
 8011270:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011274:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8011278:	4618      	mov	r0, r3
 801127a:	f005 f80d 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	f000 82d2 	beq.w	801182a <ProcessRadioRxDone+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8011286:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 801128a:	4619      	mov	r1, r3
 801128c:	2000      	movs	r0, #0
 801128e:	f004 ff77 	bl	8016180 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8011292:	e2ca      	b.n	801182a <ProcessRadioRxDone+0x90a>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011294:	2001      	movs	r0, #1
 8011296:	f004 ffff 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 801129a:	4603      	mov	r3, r0
 801129c:	2b00      	cmp	r3, #0
 801129e:	f000 82c3 	beq.w	8011828 <ProcessRadioRxDone+0x908>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 80112a2:	2101      	movs	r1, #1
 80112a4:	2007      	movs	r0, #7
 80112a6:	f004 ff6b 	bl	8016180 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 80112aa:	e2bd      	b.n	8011828 <ProcessRadioRxDone+0x908>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 80112ac:	4b66      	ldr	r3, [pc, #408]	; (8011448 <ProcessRadioRxDone+0x528>)
 80112ae:	2201      	movs	r2, #1
 80112b0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80112b4:	4b63      	ldr	r3, [pc, #396]	; (8011444 <ProcessRadioRxDone+0x524>)
 80112b6:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80112ba:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 80112be:	4b62      	ldr	r3, [pc, #392]	; (8011448 <ProcessRadioRxDone+0x528>)
 80112c0:	f893 341c 	ldrb.w	r3, [r3, #1052]	; 0x41c
 80112c4:	b25b      	sxtb	r3, r3
 80112c6:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 80112ca:	230d      	movs	r3, #13
 80112cc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80112d0:	4b5c      	ldr	r3, [pc, #368]	; (8011444 <ProcessRadioRxDone+0x524>)
 80112d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <ProcessRadioRxDone+0x3c0>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 80112da:	230e      	movs	r3, #14
 80112dc:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80112e0:	4b58      	ldr	r3, [pc, #352]	; (8011444 <ProcessRadioRxDone+0x524>)
 80112e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80112e6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80112ea:	4611      	mov	r1, r2
 80112ec:	4618      	mov	r0, r3
 80112ee:	f006 fa78 	bl	80177e2 <RegionGetPhyParam>
 80112f2:	4603      	mov	r3, r0
 80112f4:	66fb      	str	r3, [r7, #108]	; 0x6c
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 80112f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80112fa:	3b0d      	subs	r3, #13
 80112fc:	b29b      	uxth	r3, r3
 80112fe:	b21b      	sxth	r3, r3
 8011300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011304:	b21a      	sxth	r2, r3
 8011306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011308:	b21b      	sxth	r3, r3
 801130a:	429a      	cmp	r2, r3
 801130c:	dc03      	bgt.n	8011316 <ProcessRadioRxDone+0x3f6>
 801130e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011312:	2b0b      	cmp	r3, #11
 8011314:	d806      	bhi.n	8011324 <ProcessRadioRxDone+0x404>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011316:	4b4c      	ldr	r3, [pc, #304]	; (8011448 <ProcessRadioRxDone+0x528>)
 8011318:	2201      	movs	r2, #1
 801131a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 801131e:	f7ff fdd9 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 8011322:	e2a1      	b.n	8011868 <ProcessRadioRxDone+0x948>
            }
            macMsgData.Buffer = payload;
 8011324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011328:	63fb      	str	r3, [r7, #60]	; 0x3c
            macMsgData.BufSize = size;
 801132a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 801132e:	b2db      	uxtb	r3, r3
 8011330:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8011334:	4b45      	ldr	r3, [pc, #276]	; (801144c <ProcessRadioRxDone+0x52c>)
 8011336:	663b      	str	r3, [r7, #96]	; 0x60
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8011338:	23ff      	movs	r3, #255	; 0xff
 801133a:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 801133e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011342:	4618      	mov	r0, r3
 8011344:	f005 ffd0 	bl	80172e8 <LoRaMacParserData>
 8011348:	4603      	mov	r3, r0
 801134a:	2b00      	cmp	r3, #0
 801134c:	d006      	beq.n	801135c <ProcessRadioRxDone+0x43c>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801134e:	4b3e      	ldr	r3, [pc, #248]	; (8011448 <ProcessRadioRxDone+0x528>)
 8011350:	2201      	movs	r2, #1
 8011352:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011356:	f7ff fdbd 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 801135a:	e285      	b.n	8011868 <ProcessRadioRxDone+0x948>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 801135c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801135e:	4a3a      	ldr	r2, [pc, #232]	; (8011448 <ProcessRadioRxDone+0x528>)
 8011360:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8011364:	f107 020e 	add.w	r2, r7, #14
 8011368:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801136c:	4611      	mov	r1, r2
 801136e:	4618      	mov	r0, r3
 8011370:	f002 fc6b 	bl	8013c4a <DetermineFrameType>
 8011374:	4603      	mov	r3, r0
 8011376:	2b00      	cmp	r3, #0
 8011378:	d006      	beq.n	8011388 <ProcessRadioRxDone+0x468>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801137a:	4b33      	ldr	r3, [pc, #204]	; (8011448 <ProcessRadioRxDone+0x528>)
 801137c:	2201      	movs	r2, #1
 801137e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011382:	f7ff fda7 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 8011386:	e26f      	b.n	8011868 <ProcessRadioRxDone+0x948>
            }

            //Check if it is a multicast message
            multicast = 0;
 8011388:	2300      	movs	r3, #0
 801138a:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
            downLinkCounter = 0;
 801138e:	2300      	movs	r3, #0
 8011390:	613b      	str	r3, [r7, #16]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011392:	2300      	movs	r3, #0
 8011394:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 8011398:	e04f      	b.n	801143a <ProcessRadioRxDone+0x51a>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 801139a:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 801139e:	4929      	ldr	r1, [pc, #164]	; (8011444 <ProcessRadioRxDone+0x524>)
 80113a0:	4613      	mov	r3, r2
 80113a2:	005b      	lsls	r3, r3, #1
 80113a4:	4413      	add	r3, r2
 80113a6:	011b      	lsls	r3, r3, #4
 80113a8:	440b      	add	r3, r1
 80113aa:	33ec      	adds	r3, #236	; 0xec
 80113ac:	681a      	ldr	r2, [r3, #0]
 80113ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113b0:	429a      	cmp	r2, r3
 80113b2:	d13d      	bne.n	8011430 <ProcessRadioRxDone+0x510>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 80113b4:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113b8:	4922      	ldr	r1, [pc, #136]	; (8011444 <ProcessRadioRxDone+0x524>)
 80113ba:	4613      	mov	r3, r2
 80113bc:	005b      	lsls	r3, r3, #1
 80113be:	4413      	add	r3, r2
 80113c0:	011b      	lsls	r3, r3, #4
 80113c2:	440b      	add	r3, r1
 80113c4:	33e9      	adds	r3, #233	; 0xe9
 80113c6:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d031      	beq.n	8011430 <ProcessRadioRxDone+0x510>
                {
                    multicast = 1;
 80113cc:	2301      	movs	r3, #1
 80113ce:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 80113d2:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113d6:	491b      	ldr	r1, [pc, #108]	; (8011444 <ProcessRadioRxDone+0x524>)
 80113d8:	4613      	mov	r3, r2
 80113da:	005b      	lsls	r3, r3, #1
 80113dc:	4413      	add	r3, r2
 80113de:	011b      	lsls	r3, r3, #4
 80113e0:	440b      	add	r3, r1
 80113e2:	33ea      	adds	r3, #234	; 0xea
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 80113ea:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80113ee:	4915      	ldr	r1, [pc, #84]	; (8011444 <ProcessRadioRxDone+0x524>)
 80113f0:	4613      	mov	r3, r2
 80113f2:	005b      	lsls	r3, r3, #1
 80113f4:	4413      	add	r3, r2
 80113f6:	011b      	lsls	r3, r3, #4
 80113f8:	440b      	add	r3, r1
 80113fa:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	613b      	str	r3, [r7, #16]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8011404:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 8011408:	490e      	ldr	r1, [pc, #56]	; (8011444 <ProcessRadioRxDone+0x524>)
 801140a:	4613      	mov	r3, r2
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	4413      	add	r3, r2
 8011410:	011b      	lsls	r3, r3, #4
 8011412:	440b      	add	r3, r1
 8011414:	33ec      	adds	r3, #236	; 0xec
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 801141c:	4b09      	ldr	r3, [pc, #36]	; (8011444 <ProcessRadioRxDone+0x524>)
 801141e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011422:	2b02      	cmp	r3, #2
 8011424:	d114      	bne.n	8011450 <ProcessRadioRxDone+0x530>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8011426:	4b08      	ldr	r3, [pc, #32]	; (8011448 <ProcessRadioRxDone+0x528>)
 8011428:	2203      	movs	r2, #3
 801142a:	f883 247f 	strb.w	r2, [r3, #1151]	; 0x47f
                    }
                    break;
 801142e:	e00f      	b.n	8011450 <ProcessRadioRxDone+0x530>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011430:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8011434:	3301      	adds	r3, #1
 8011436:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 801143a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 801143e:	2b00      	cmp	r3, #0
 8011440:	d0ab      	beq.n	801139a <ProcessRadioRxDone+0x47a>
 8011442:	e006      	b.n	8011452 <ProcessRadioRxDone+0x532>
 8011444:	20000e2c 	.word	0x20000e2c
 8011448:	20000924 	.word	0x20000924
 801144c:	20000b5c 	.word	0x20000b5c
                    break;
 8011450:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8011452:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 8011456:	2b01      	cmp	r3, #1
 8011458:	d117      	bne.n	801148a <ProcessRadioRxDone+0x56a>
 801145a:	7bbb      	ldrb	r3, [r7, #14]
 801145c:	2b03      	cmp	r3, #3
 801145e:	d10d      	bne.n	801147c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011460:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011464:	f003 0320 	and.w	r3, r3, #32
 8011468:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 801146a:	2b00      	cmp	r3, #0
 801146c:	d106      	bne.n	801147c <ProcessRadioRxDone+0x55c>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 801146e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011476:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8011478:	2b00      	cmp	r3, #0
 801147a:	d006      	beq.n	801148a <ProcessRadioRxDone+0x56a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801147c:	4bb3      	ldr	r3, [pc, #716]	; (801174c <ProcessRadioRxDone+0x82c>)
 801147e:	2201      	movs	r2, #1
 8011480:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                PrepareRxDoneAbort( );
 8011484:	f7ff fd26 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 8011488:	e1ee      	b.n	8011868 <ProcessRadioRxDone+0x948>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            // Get maximum allowed counter difference
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 801148a:	2315      	movs	r3, #21
 801148c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011490:	4baf      	ldr	r3, [pc, #700]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011492:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8011496:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f006 f9a0 	bl	80177e2 <RegionGetPhyParam>
 80114a2:	4603      	mov	r3, r0
 80114a4:	66fb      	str	r3, [r7, #108]	; 0x6c

            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, phyParam.Value, &fCntID, &downLinkCounter );
 80114a6:	7bb9      	ldrb	r1, [r7, #14]
 80114a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	4da8      	ldr	r5, [pc, #672]	; (8011750 <ProcessRadioRxDone+0x830>)
 80114ae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80114b2:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 80114b6:	f107 0210 	add.w	r2, r7, #16
 80114ba:	9202      	str	r2, [sp, #8]
 80114bc:	f107 020f 	add.w	r2, r7, #15
 80114c0:	9201      	str	r2, [sp, #4]
 80114c2:	9300      	str	r3, [sp, #0]
 80114c4:	f8d5 3128 	ldr.w	r3, [r5, #296]	; 0x128
 80114c8:	4622      	mov	r2, r4
 80114ca:	f000 fe8d 	bl	80121e8 <GetFCntDown>
 80114ce:	4603      	mov	r3, r0
 80114d0:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80114d4:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d035      	beq.n	8011548 <ProcessRadioRxDone+0x628>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 80114dc:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80114e0:	2b07      	cmp	r3, #7
 80114e2:	d119      	bne.n	8011518 <ProcessRadioRxDone+0x5f8>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 80114e4:	4b99      	ldr	r3, [pc, #612]	; (801174c <ProcessRadioRxDone+0x82c>)
 80114e6:	2208      	movs	r2, #8
 80114e8:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 80114ec:	4b98      	ldr	r3, [pc, #608]	; (8011750 <ProcessRadioRxDone+0x830>)
 80114ee:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d11d      	bne.n	8011532 <ProcessRadioRxDone+0x612>
 80114f6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 80114fa:	f023 031f 	bic.w	r3, r3, #31
 80114fe:	b2db      	uxtb	r3, r3
 8011500:	2ba0      	cmp	r3, #160	; 0xa0
 8011502:	d116      	bne.n	8011532 <ProcessRadioRxDone+0x612>
 8011504:	4b92      	ldr	r3, [pc, #584]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011508:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801150a:	429a      	cmp	r2, r3
 801150c:	d111      	bne.n	8011532 <ProcessRadioRxDone+0x612>
                    {
                        Nvm.MacGroup1.SrvAckRequested = true;
 801150e:	4b90      	ldr	r3, [pc, #576]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011510:	2201      	movs	r2, #1
 8011512:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8011516:	e00c      	b.n	8011532 <ProcessRadioRxDone+0x612>
                    }
                }
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 8011518:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801151c:	2b08      	cmp	r3, #8
 801151e:	d104      	bne.n	801152a <ProcessRadioRxDone+0x60a>
                {
                    // Lost too many frames
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 8011520:	4b8a      	ldr	r3, [pc, #552]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011522:	220a      	movs	r2, #10
 8011524:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 8011528:	e003      	b.n	8011532 <ProcessRadioRxDone+0x612>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801152a:	4b88      	ldr	r3, [pc, #544]	; (801174c <ProcessRadioRxDone+0x82c>)
 801152c:	2201      	movs	r2, #1
 801152e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	4a85      	ldr	r2, [pc, #532]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011536:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	4a83      	ldr	r2, [pc, #524]	; (801174c <ProcessRadioRxDone+0x82c>)
 801153e:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
                PrepareRxDoneAbort( );
 8011542:	f7ff fcc7 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 8011546:	e18f      	b.n	8011868 <ProcessRadioRxDone+0x948>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8011548:	7bfa      	ldrb	r2, [r7, #15]
 801154a:	6939      	ldr	r1, [r7, #16]
 801154c:	f897 0092 	ldrb.w	r0, [r7, #146]	; 0x92
 8011550:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011554:	9300      	str	r3, [sp, #0]
 8011556:	460b      	mov	r3, r1
 8011558:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 801155c:	f005 fd24 	bl	8016fa8 <LoRaMacCryptoUnsecureMessage>
 8011560:	4603      	mov	r3, r0
 8011562:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011566:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 801156a:	2b00      	cmp	r3, #0
 801156c:	d00f      	beq.n	801158e <ProcessRadioRxDone+0x66e>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 801156e:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8011572:	2b02      	cmp	r3, #2
 8011574:	d104      	bne.n	8011580 <ProcessRadioRxDone+0x660>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 8011576:	4b75      	ldr	r3, [pc, #468]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011578:	220b      	movs	r2, #11
 801157a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
 801157e:	e003      	b.n	8011588 <ProcessRadioRxDone+0x668>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 8011580:	4b72      	ldr	r3, [pc, #456]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011582:	220c      	movs	r2, #12
 8011584:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                }
                PrepareRxDoneAbort( );
 8011588:	f7ff fca4 	bl	8010ed4 <PrepareRxDoneAbort>
                return;
 801158c:	e16c      	b.n	8011868 <ProcessRadioRxDone+0x948>
                PrepareRxDoneAbort( );
                return;
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 801158e:	4b6f      	ldr	r3, [pc, #444]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011590:	2200      	movs	r2, #0
 8011592:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Multicast = multicast;
 8011596:	4a6d      	ldr	r2, [pc, #436]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011598:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801159c:	f882 341a 	strb.w	r3, [r2, #1050]	; 0x41a
            MacCtx.McpsIndication.Buffer = NULL;
 80115a0:	4b6a      	ldr	r3, [pc, #424]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = 0;
 80115a8:	4b68      	ldr	r3, [pc, #416]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115aa:	2200      	movs	r2, #0
 80115ac:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	4a66      	ldr	r2, [pc, #408]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115b4:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	4a64      	ldr	r2, [pc, #400]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115bc:	f8c2 3460 	str.w	r3, [r2, #1120]	; 0x460
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115c0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115c4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	bf14      	ite	ne
 80115ce:	2301      	movne	r3, #1
 80115d0:	2300      	moveq	r3, #0
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	4b5d      	ldr	r3, [pc, #372]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115d6:	f883 2426 	strb.w	r2, [r3, #1062]	; 0x426

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80115da:	4b5c      	ldr	r3, [pc, #368]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115dc:	2200      	movs	r2, #0
 80115de:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80115e2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80115e6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80115ea:	b2db      	uxtb	r3, r3
 80115ec:	2b00      	cmp	r3, #0
 80115ee:	bf14      	ite	ne
 80115f0:	2301      	movne	r3, #1
 80115f2:	2300      	moveq	r3, #0
 80115f4:	b2da      	uxtb	r2, r3
 80115f6:	4b55      	ldr	r3, [pc, #340]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115f8:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 80115fc:	4b53      	ldr	r3, [pc, #332]	; (801174c <ProcessRadioRxDone+0x82c>)
 80115fe:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011602:	2b00      	cmp	r3, #0
 8011604:	d004      	beq.n	8011610 <ProcessRadioRxDone+0x6f0>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8011606:	4b51      	ldr	r3, [pc, #324]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011608:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 801160c:	2b01      	cmp	r3, #1
 801160e:	d102      	bne.n	8011616 <ProcessRadioRxDone+0x6f6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 8011610:	4b4f      	ldr	r3, [pc, #316]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011612:	2200      	movs	r2, #0
 8011614:	629a      	str	r2, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 8011616:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
 801161a:	2b01      	cmp	r3, #1
 801161c:	d104      	bne.n	8011628 <ProcessRadioRxDone+0x708>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 801161e:	4b4b      	ldr	r3, [pc, #300]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011620:	2202      	movs	r2, #2
 8011622:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011626:	e01f      	b.n	8011668 <ProcessRadioRxDone+0x748>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8011628:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 801162c:	f023 031f 	bic.w	r3, r3, #31
 8011630:	b2db      	uxtb	r3, r3
 8011632:	2ba0      	cmp	r3, #160	; 0xa0
 8011634:	d110      	bne.n	8011658 <ProcessRadioRxDone+0x738>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 8011636:	4b46      	ldr	r3, [pc, #280]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011638:	2201      	movs	r2, #1
 801163a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 801163e:	4b44      	ldr	r3, [pc, #272]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011640:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011644:	2b00      	cmp	r3, #0
 8011646:	d102      	bne.n	801164e <ProcessRadioRxDone+0x72e>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8011648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801164a:	4a41      	ldr	r2, [pc, #260]	; (8011750 <ProcessRadioRxDone+0x830>)
 801164c:	6353      	str	r3, [r2, #52]	; 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 801164e:	4b3f      	ldr	r3, [pc, #252]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011650:	2201      	movs	r2, #1
 8011652:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
 8011656:	e007      	b.n	8011668 <ProcessRadioRxDone+0x748>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 8011658:	4b3d      	ldr	r3, [pc, #244]	; (8011750 <ProcessRadioRxDone+0x830>)
 801165a:	2200      	movs	r2, #0
 801165c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8011660:	4b3a      	ldr	r3, [pc, #232]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011662:	2200      	movs	r2, #0
 8011664:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 8011668:	4b39      	ldr	r3, [pc, #228]	; (8011750 <ProcessRadioRxDone+0x830>)
 801166a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801166e:	2b00      	cmp	r3, #0
 8011670:	d106      	bne.n	8011680 <ProcessRadioRxDone+0x760>
 8011672:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011676:	f003 0310 	and.w	r3, r3, #16
 801167a:	b2db      	uxtb	r3, r3
 801167c:	2b00      	cmp	r3, #0
 801167e:	d008      	beq.n	8011692 <ProcessRadioRxDone+0x772>
 8011680:	4b33      	ldr	r3, [pc, #204]	; (8011750 <ProcessRadioRxDone+0x830>)
 8011682:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011686:	2b00      	cmp	r3, #0
 8011688:	d103      	bne.n	8011692 <ProcessRadioRxDone+0x772>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 801168a:	4b30      	ldr	r3, [pc, #192]	; (801174c <ProcessRadioRxDone+0x82c>)
 801168c:	2201      	movs	r2, #1
 801168e:	f883 241d 	strb.w	r2, [r3, #1053]	; 0x41d
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8011692:	4b2e      	ldr	r3, [pc, #184]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011694:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011698:	4a2c      	ldr	r2, [pc, #176]	; (801174c <ProcessRadioRxDone+0x82c>)
 801169a:	f892 2434 	ldrb.w	r2, [r2, #1076]	; 0x434
 801169e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80116a2:	4618      	mov	r0, r3
 80116a4:	f001 fef2 	bl	801348c <RemoveMacCommands>

            switch( fType )
 80116a8:	7bbb      	ldrb	r3, [r7, #14]
 80116aa:	2b03      	cmp	r3, #3
 80116ac:	d878      	bhi.n	80117a0 <ProcessRadioRxDone+0x880>
 80116ae:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <ProcessRadioRxDone+0x794>)
 80116b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b4:	080116c5 	.word	0x080116c5
 80116b8:	08011715 	.word	0x08011715
 80116bc:	08011755 	.word	0x08011755
 80116c0:	0801177b 	.word	0x0801177b
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 80116c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80116c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116cc:	b2db      	uxtb	r3, r3
 80116ce:	461c      	mov	r4, r3
 80116d0:	4b1e      	ldr	r3, [pc, #120]	; (801174c <ProcessRadioRxDone+0x82c>)
 80116d2:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 80116d6:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 80116da:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80116de:	f102 0010 	add.w	r0, r2, #16
 80116e2:	9300      	str	r3, [sp, #0]
 80116e4:	460b      	mov	r3, r1
 80116e6:	4622      	mov	r2, r4
 80116e8:	2100      	movs	r1, #0
 80116ea:	f000 fef7 	bl	80124dc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80116ee:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80116f2:	4b16      	ldr	r3, [pc, #88]	; (801174c <ProcessRadioRxDone+0x82c>)
 80116f4:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 80116f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80116fa:	4a14      	ldr	r2, [pc, #80]	; (801174c <ProcessRadioRxDone+0x82c>)
 80116fc:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8011700:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011704:	4b11      	ldr	r3, [pc, #68]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011706:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 801170a:	4b10      	ldr	r3, [pc, #64]	; (801174c <ProcessRadioRxDone+0x82c>)
 801170c:	2201      	movs	r2, #1
 801170e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 8011712:	e04c      	b.n	80117ae <ProcessRadioRxDone+0x88e>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8011714:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8011718:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801171c:	b2db      	uxtb	r3, r3
 801171e:	461c      	mov	r4, r3
 8011720:	4b0a      	ldr	r3, [pc, #40]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011722:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011726:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 801172a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801172e:	f102 0010 	add.w	r0, r2, #16
 8011732:	9300      	str	r3, [sp, #0]
 8011734:	460b      	mov	r3, r1
 8011736:	4622      	mov	r2, r4
 8011738:	2100      	movs	r1, #0
 801173a:	f000 fecf 	bl	80124dc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801173e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011742:	4b02      	ldr	r3, [pc, #8]	; (801174c <ProcessRadioRxDone+0x82c>)
 8011744:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011748:	e031      	b.n	80117ae <ProcessRadioRxDone+0x88e>
 801174a:	bf00      	nop
 801174c:	20000924 	.word	0x20000924
 8011750:	20000e2c 	.word	0x20000e2c
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 8011754:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8011756:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801175a:	4b45      	ldr	r3, [pc, #276]	; (8011870 <ProcessRadioRxDone+0x950>)
 801175c:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8011760:	f997 1087 	ldrsb.w	r1, [r7, #135]	; 0x87
 8011764:	9300      	str	r3, [sp, #0]
 8011766:	460b      	mov	r3, r1
 8011768:	2100      	movs	r1, #0
 801176a:	f000 feb7 	bl	80124dc <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801176e:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8011772:	4b3f      	ldr	r3, [pc, #252]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011774:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    break;
 8011778:	e019      	b.n	80117ae <ProcessRadioRxDone+0x88e>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 801177a:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 801177e:	4b3c      	ldr	r3, [pc, #240]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011780:	f883 241b 	strb.w	r2, [r3, #1051]	; 0x41b
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8011784:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011786:	4a3a      	ldr	r2, [pc, #232]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011788:	f8c2 3420 	str.w	r3, [r2, #1056]	; 0x420
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 801178c:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8011790:	4b37      	ldr	r3, [pc, #220]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011792:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
                    MacCtx.McpsIndication.RxData = true;
 8011796:	4b36      	ldr	r3, [pc, #216]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011798:	2201      	movs	r2, #1
 801179a:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
                    break;
 801179e:	e006      	b.n	80117ae <ProcessRadioRxDone+0x88e>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80117a0:	4b33      	ldr	r3, [pc, #204]	; (8011870 <ProcessRadioRxDone+0x950>)
 80117a2:	2201      	movs	r2, #1
 80117a4:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
                    PrepareRxDoneAbort( );
 80117a8:	f7ff fb94 	bl	8010ed4 <PrepareRxDoneAbort>
                    break;
 80117ac:	bf00      	nop
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80117ae:	4a30      	ldr	r2, [pc, #192]	; (8011870 <ProcessRadioRxDone+0x950>)
 80117b0:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80117b4:	f043 0302 	orr.w	r3, r3, #2
 80117b8:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481

            break;
 80117bc:	e035      	b.n	801182a <ProcessRadioRxDone+0x90a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80117be:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117c6:	18d1      	adds	r1, r2, r3
 80117c8:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80117d2:	1ad3      	subs	r3, r2, r3
 80117d4:	b29b      	uxth	r3, r3
 80117d6:	461a      	mov	r2, r3
 80117d8:	4826      	ldr	r0, [pc, #152]	; (8011874 <ProcessRadioRxDone+0x954>)
 80117da:	f008 fb1c 	bl	8019e16 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80117de:	4b24      	ldr	r3, [pc, #144]	; (8011870 <ProcessRadioRxDone+0x950>)
 80117e0:	2203      	movs	r2, #3
 80117e2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80117e6:	4b22      	ldr	r3, [pc, #136]	; (8011870 <ProcessRadioRxDone+0x950>)
 80117e8:	2200      	movs	r2, #0
 80117ea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80117ee:	4b20      	ldr	r3, [pc, #128]	; (8011870 <ProcessRadioRxDone+0x950>)
 80117f0:	4a20      	ldr	r2, [pc, #128]	; (8011874 <ProcessRadioRxDone+0x954>)
 80117f2:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80117f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80117fa:	b2da      	uxtb	r2, r3
 80117fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8011800:	1ad3      	subs	r3, r2, r3
 8011802:	b2da      	uxtb	r2, r3
 8011804:	4b1a      	ldr	r3, [pc, #104]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011806:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424

            MacCtx.MacFlags.Bits.McpsInd = 1;
 801180a:	4a19      	ldr	r2, [pc, #100]	; (8011870 <ProcessRadioRxDone+0x950>)
 801180c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011810:	f043 0302 	orr.w	r3, r3, #2
 8011814:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            break;
 8011818:	e007      	b.n	801182a <ProcessRadioRxDone+0x90a>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801181a:	4b15      	ldr	r3, [pc, #84]	; (8011870 <ProcessRadioRxDone+0x950>)
 801181c:	2201      	movs	r2, #1
 801181e:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
            PrepareRxDoneAbort( );
 8011822:	f7ff fb57 	bl	8010ed4 <PrepareRxDoneAbort>
            break;
 8011826:	e000      	b.n	801182a <ProcessRadioRxDone+0x90a>
            break;
 8011828:	bf00      	nop
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    // Verify if we need to disable the AckTimeoutTimer
    if( MacCtx.NodeAckRequested == true )
 801182a:	4b11      	ldr	r3, [pc, #68]	; (8011870 <ProcessRadioRxDone+0x950>)
 801182c:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8011830:	2b00      	cmp	r3, #0
 8011832:	d008      	beq.n	8011846 <ProcessRadioRxDone+0x926>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8011834:	4b0e      	ldr	r3, [pc, #56]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011836:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00b      	beq.n	8011856 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 801183e:	2000      	movs	r0, #0
 8011840:	f000 fcaa 	bl	8012198 <OnAckTimeoutTimerEvent>
 8011844:	e007      	b.n	8011856 <ProcessRadioRxDone+0x936>
        }
    }
    else
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8011846:	4b0c      	ldr	r3, [pc, #48]	; (8011878 <ProcessRadioRxDone+0x958>)
 8011848:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801184c:	2b02      	cmp	r3, #2
 801184e:	d102      	bne.n	8011856 <ProcessRadioRxDone+0x936>
        {
            OnAckTimeoutTimerEvent( NULL );
 8011850:	2000      	movs	r0, #0
 8011852:	f000 fca1 	bl	8012198 <OnAckTimeoutTimerEvent>
        }
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 8011856:	4a06      	ldr	r2, [pc, #24]	; (8011870 <ProcessRadioRxDone+0x950>)
 8011858:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801185c:	f043 0310 	orr.w	r3, r3, #16
 8011860:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 8011864:	f7ff fa6c 	bl	8010d40 <UpdateRxSlotIdleState>
}
 8011868:	3798      	adds	r7, #152	; 0x98
 801186a:	46bd      	mov	sp, r7
 801186c:	bdb0      	pop	{r4, r5, r7, pc}
 801186e:	bf00      	nop
 8011870:	20000924 	.word	0x20000924
 8011874:	20000b5c 	.word	0x20000b5c
 8011878:	20000e2c 	.word	0x20000e2c

0801187c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 801187c:	b580      	push	{r7, lr}
 801187e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8011880:	4b11      	ldr	r3, [pc, #68]	; (80118c8 <ProcessRadioTxTimeout+0x4c>)
 8011882:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011886:	2b02      	cmp	r3, #2
 8011888:	d002      	beq.n	8011890 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 801188a:	4b10      	ldr	r3, [pc, #64]	; (80118cc <ProcessRadioTxTimeout+0x50>)
 801188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801188e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 8011890:	f7ff fa56 	bl	8010d40 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8011894:	4b0e      	ldr	r3, [pc, #56]	; (80118d0 <ProcessRadioTxTimeout+0x54>)
 8011896:	2202      	movs	r2, #2
 8011898:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 801189c:	2002      	movs	r0, #2
 801189e:	f004 fcc7 	bl	8016230 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 80118a2:	4b0b      	ldr	r3, [pc, #44]	; (80118d0 <ProcessRadioTxTimeout+0x54>)
 80118a4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d003      	beq.n	80118b4 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
 80118ac:	4b08      	ldr	r3, [pc, #32]	; (80118d0 <ProcessRadioTxTimeout+0x54>)
 80118ae:	2201      	movs	r2, #1
 80118b0:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 80118b4:	4a06      	ldr	r2, [pc, #24]	; (80118d0 <ProcessRadioTxTimeout+0x54>)
 80118b6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80118ba:	f043 0310 	orr.w	r3, r3, #16
 80118be:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
}
 80118c2:	bf00      	nop
 80118c4:	bd80      	pop	{r7, pc}
 80118c6:	bf00      	nop
 80118c8:	20000e2c 	.word	0x20000e2c
 80118cc:	0801f9f0 	.word	0x0801f9f0
 80118d0:	20000924 	.word	0x20000924

080118d4 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4603      	mov	r3, r0
 80118dc:	460a      	mov	r2, r1
 80118de:	71fb      	strb	r3, [r7, #7]
 80118e0:	4613      	mov	r3, r2
 80118e2:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80118e8:	4b40      	ldr	r3, [pc, #256]	; (80119ec <HandleRadioRxErrorTimeout+0x118>)
 80118ea:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80118ee:	2b02      	cmp	r3, #2
 80118f0:	d002      	beq.n	80118f8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 80118f2:	4b3f      	ldr	r3, [pc, #252]	; (80119f0 <HandleRadioRxErrorTimeout+0x11c>)
 80118f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118f6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80118f8:	f003 ffdf 	bl	80158ba <LoRaMacClassBIsBeaconExpected>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d007      	beq.n	8011912 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8011902:	2002      	movs	r0, #2
 8011904:	f003 ff8d 	bl	8015822 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8011908:	2000      	movs	r0, #0
 801190a:	f003 ffaf 	bl	801586c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 801190e:	2301      	movs	r3, #1
 8011910:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8011912:	4b36      	ldr	r3, [pc, #216]	; (80119ec <HandleRadioRxErrorTimeout+0x118>)
 8011914:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8011918:	2b01      	cmp	r3, #1
 801191a:	d119      	bne.n	8011950 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801191c:	f003 ffd4 	bl	80158c8 <LoRaMacClassBIsPingExpected>
 8011920:	4603      	mov	r3, r0
 8011922:	2b00      	cmp	r3, #0
 8011924:	d007      	beq.n	8011936 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011926:	2000      	movs	r0, #0
 8011928:	f003 ff85 	bl	8015836 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 801192c:	2000      	movs	r0, #0
 801192e:	f003 ffa6 	bl	801587e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 8011932:	2301      	movs	r3, #1
 8011934:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 8011936:	f003 ffce 	bl	80158d6 <LoRaMacClassBIsMulticastExpected>
 801193a:	4603      	mov	r3, r0
 801193c:	2b00      	cmp	r3, #0
 801193e:	d007      	beq.n	8011950 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8011940:	2000      	movs	r0, #0
 8011942:	f003 ff82 	bl	801584a <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8011946:	2000      	movs	r0, #0
 8011948:	f003 ffa2 	bl	8015890 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 801194c:	2301      	movs	r3, #1
 801194e:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 8011950:	7bfb      	ldrb	r3, [r7, #15]
 8011952:	f083 0301 	eor.w	r3, r3, #1
 8011956:	b2db      	uxtb	r3, r3
 8011958:	2b00      	cmp	r3, #0
 801195a:	d040      	beq.n	80119de <HandleRadioRxErrorTimeout+0x10a>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801195c:	4b25      	ldr	r3, [pc, #148]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 801195e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8011962:	2b00      	cmp	r3, #0
 8011964:	d122      	bne.n	80119ac <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 8011966:	4b23      	ldr	r3, [pc, #140]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 8011968:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801196c:	2b00      	cmp	r3, #0
 801196e:	d003      	beq.n	8011978 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8011970:	4a20      	ldr	r2, [pc, #128]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 8011972:	79fb      	ldrb	r3, [r7, #7]
 8011974:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8011978:	79fb      	ldrb	r3, [r7, #7]
 801197a:	4618      	mov	r0, r3
 801197c:	f004 fc58 	bl	8016230 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8011980:	4b1a      	ldr	r3, [pc, #104]	; (80119ec <HandleRadioRxErrorTimeout+0x118>)
 8011982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011984:	4618      	mov	r0, r3
 8011986:	f00c fd0d 	bl	801e3a4 <UTIL_TIMER_GetElapsedTime>
 801198a:	4602      	mov	r2, r0
 801198c:	4b19      	ldr	r3, [pc, #100]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 801198e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 8011992:	429a      	cmp	r2, r3
 8011994:	d323      	bcc.n	80119de <HandleRadioRxErrorTimeout+0x10a>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 8011996:	4818      	ldr	r0, [pc, #96]	; (80119f8 <HandleRadioRxErrorTimeout+0x124>)
 8011998:	f00c fbd8 	bl	801e14c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 801199c:	4a15      	ldr	r2, [pc, #84]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 801199e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119a2:	f043 0310 	orr.w	r3, r3, #16
 80119a6:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80119aa:	e018      	b.n	80119de <HandleRadioRxErrorTimeout+0x10a>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 80119ac:	4b11      	ldr	r3, [pc, #68]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 80119ae:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d003      	beq.n	80119be <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80119b6:	4a0f      	ldr	r2, [pc, #60]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 80119b8:	79bb      	ldrb	r3, [r7, #6]
 80119ba:	f882 3435 	strb.w	r3, [r2, #1077]	; 0x435
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80119be:	79bb      	ldrb	r3, [r7, #6]
 80119c0:	4618      	mov	r0, r3
 80119c2:	f004 fc35 	bl	8016230 <LoRaMacConfirmQueueSetStatusCmn>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80119c6:	4b09      	ldr	r3, [pc, #36]	; (80119ec <HandleRadioRxErrorTimeout+0x118>)
 80119c8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80119cc:	2b02      	cmp	r3, #2
 80119ce:	d006      	beq.n	80119de <HandleRadioRxErrorTimeout+0x10a>
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
 80119d0:	4a08      	ldr	r2, [pc, #32]	; (80119f4 <HandleRadioRxErrorTimeout+0x120>)
 80119d2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80119d6:	f043 0310 	orr.w	r3, r3, #16
 80119da:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.MacFlags.Bits.MacDone = 1;
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 80119de:	f7ff f9af 	bl	8010d40 <UpdateRxSlotIdleState>
}
 80119e2:	bf00      	nop
 80119e4:	3710      	adds	r7, #16
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	20000e2c 	.word	0x20000e2c
 80119f0:	0801f9f0 	.word	0x0801f9f0
 80119f4:	20000924 	.word	0x20000924
 80119f8:	20000cbc 	.word	0x20000cbc

080119fc <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8011a00:	2106      	movs	r1, #6
 8011a02:	2005      	movs	r0, #5
 8011a04:	f7ff ff66 	bl	80118d4 <HandleRadioRxErrorTimeout>
}
 8011a08:	bf00      	nop
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8011a10:	2104      	movs	r1, #4
 8011a12:	2003      	movs	r0, #3
 8011a14:	f7ff ff5e 	bl	80118d4 <HandleRadioRxErrorTimeout>
}
 8011a18:	bf00      	nop
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b084      	sub	sp, #16
 8011a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011a22:	f3ef 8310 	mrs	r3, PRIMASK
 8011a26:	607b      	str	r3, [r7, #4]
  return(result);
 8011a28:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 8011a2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011a2c:	b672      	cpsid	i
}
 8011a2e:	bf00      	nop
    events = LoRaMacRadioEvents;
 8011a30:	4b1d      	ldr	r3, [pc, #116]	; (8011aa8 <LoRaMacHandleIrqEvents+0x8c>)
 8011a32:	681b      	ldr	r3, [r3, #0]
 8011a34:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 8011a36:	4b1c      	ldr	r3, [pc, #112]	; (8011aa8 <LoRaMacHandleIrqEvents+0x8c>)
 8011a38:	2200      	movs	r2, #0
 8011a3a:	601a      	str	r2, [r3, #0]
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011a40:	68bb      	ldr	r3, [r7, #8]
 8011a42:	f383 8810 	msr	PRIMASK, r3
}
 8011a46:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d027      	beq.n	8011a9e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 8011a4e:	783b      	ldrb	r3, [r7, #0]
 8011a50:	f003 0310 	and.w	r3, r3, #16
 8011a54:	b2db      	uxtb	r3, r3
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d001      	beq.n	8011a5e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 8011a5a:	f7ff f989 	bl	8010d70 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 8011a5e:	783b      	ldrb	r3, [r7, #0]
 8011a60:	f003 0308 	and.w	r3, r3, #8
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d001      	beq.n	8011a6e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 8011a6a:	f7ff fa59 	bl	8010f20 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 8011a6e:	783b      	ldrb	r3, [r7, #0]
 8011a70:	f003 0304 	and.w	r3, r3, #4
 8011a74:	b2db      	uxtb	r3, r3
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 8011a7a:	f7ff feff 	bl	801187c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 8011a7e:	783b      	ldrb	r3, [r7, #0]
 8011a80:	f003 0302 	and.w	r3, r3, #2
 8011a84:	b2db      	uxtb	r3, r3
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d001      	beq.n	8011a8e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 8011a8a:	f7ff ffb7 	bl	80119fc <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 8011a8e:	783b      	ldrb	r3, [r7, #0]
 8011a90:	f003 0301 	and.w	r3, r3, #1
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d001      	beq.n	8011a9e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 8011a9a:	f7ff ffb7 	bl	8011a0c <ProcessRadioRxTimeout>
        }
    }
}
 8011a9e:	bf00      	nop
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	20001594 	.word	0x20001594

08011aac <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 8011aac:	b480      	push	{r7}
 8011aae:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011ab0:	4b0b      	ldr	r3, [pc, #44]	; (8011ae0 <LoRaMacIsBusy+0x34>)
 8011ab2:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ab6:	2b01      	cmp	r3, #1
 8011ab8:	d101      	bne.n	8011abe <LoRaMacIsBusy+0x12>
    {
        return false;
 8011aba:	2300      	movs	r3, #0
 8011abc:	e00c      	b.n	8011ad8 <LoRaMacIsBusy+0x2c>
    {
        return true;
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011abe:	4b08      	ldr	r3, [pc, #32]	; (8011ae0 <LoRaMacIsBusy+0x34>)
 8011ac0:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d106      	bne.n	8011ad6 <LoRaMacIsBusy+0x2a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8011ac8:	4b05      	ldr	r3, [pc, #20]	; (8011ae0 <LoRaMacIsBusy+0x34>)
 8011aca:	f893 3482 	ldrb.w	r3, [r3, #1154]	; 0x482
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d101      	bne.n	8011ad6 <LoRaMacIsBusy+0x2a>
    {
        return false;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	e000      	b.n	8011ad8 <LoRaMacIsBusy+0x2c>
    }
    return true;
 8011ad6:	2301      	movs	r3, #1
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bc80      	pop	{r7}
 8011ade:	4770      	bx	lr
 8011ae0:	20000924 	.word	0x20000924

08011ae4 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 8011ae4:	b480      	push	{r7}
 8011ae6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 8011ae8:	4b05      	ldr	r3, [pc, #20]	; (8011b00 <LoRaMacIsStopped+0x1c>)
 8011aea:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011aee:	2b01      	cmp	r3, #1
 8011af0:	d101      	bne.n	8011af6 <LoRaMacIsStopped+0x12>
    {
        return true;
 8011af2:	2301      	movs	r3, #1
 8011af4:	e000      	b.n	8011af8 <LoRaMacIsStopped+0x14>
    }
    return false;
 8011af6:	2300      	movs	r3, #0
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bc80      	pop	{r7}
 8011afe:	4770      	bx	lr
 8011b00:	20000924 	.word	0x20000924

08011b04 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 8011b04:	b480      	push	{r7}
 8011b06:	b083      	sub	sp, #12
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 8011b0e:	4a04      	ldr	r2, [pc, #16]	; (8011b20 <LoRaMacEnableRequests+0x1c>)
 8011b10:	79fb      	ldrb	r3, [r7, #7]
 8011b12:	f882 3482 	strb.w	r3, [r2, #1154]	; 0x482
}
 8011b16:	bf00      	nop
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bc80      	pop	{r7}
 8011b1e:	4770      	bx	lr
 8011b20:	20000924 	.word	0x20000924

08011b24 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 8011b2a:	4b2c      	ldr	r3, [pc, #176]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b2c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b30:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 8011b32:	4b2a      	ldr	r3, [pc, #168]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b34:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d14a      	bne.n	8011bd2 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011b3c:	4b27      	ldr	r3, [pc, #156]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b3e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b42:	f003 0301 	and.w	r3, r3, #1
 8011b46:	b2db      	uxtb	r3, r3
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d006      	beq.n	8011b5a <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8011b4c:	4a23      	ldr	r2, [pc, #140]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b4e:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b52:	f36f 0300 	bfc	r3, #0, #1
 8011b56:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011b5a:	4b20      	ldr	r3, [pc, #128]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b5c:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011b60:	f003 0304 	and.w	r3, r3, #4
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d006      	beq.n	8011b78 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8011b6a:	4a1c      	ldr	r2, [pc, #112]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b6c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011b70:	f36f 0382 	bfc	r3, #2, #1
 8011b74:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011b78:	2001      	movs	r0, #1
 8011b7a:	f7ff ffc3 	bl	8011b04 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 8011b7e:	793b      	ldrb	r3, [r7, #4]
 8011b80:	f003 0301 	and.w	r3, r3, #1
 8011b84:	b2db      	uxtb	r3, r3
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d005      	beq.n	8011b96 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8011b8a:	4b14      	ldr	r3, [pc, #80]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011b8c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4813      	ldr	r0, [pc, #76]	; (8011be0 <LoRaMacHandleRequestEvents+0xbc>)
 8011b94:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 8011b96:	793b      	ldrb	r3, [r7, #4]
 8011b98:	f003 0304 	and.w	r3, r3, #4
 8011b9c:	b2db      	uxtb	r3, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d00e      	beq.n	8011bc0 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8011ba2:	4810      	ldr	r0, [pc, #64]	; (8011be4 <LoRaMacHandleRequestEvents+0xc0>)
 8011ba4:	f004 fb92 	bl	80162cc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8011ba8:	f004 fbe2 	bl	8016370 <LoRaMacConfirmQueueGetCnt>
 8011bac:	4603      	mov	r3, r0
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d006      	beq.n	8011bc0 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011bb2:	4a0a      	ldr	r2, [pc, #40]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011bb4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bb8:	f043 0304 	orr.w	r3, r3, #4
 8011bbc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 8011bc0:	f003 fea7 	bl	8015912 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 8011bc4:	4a05      	ldr	r2, [pc, #20]	; (8011bdc <LoRaMacHandleRequestEvents+0xb8>)
 8011bc6:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011bca:	f36f 1304 	bfc	r3, #4, #1
 8011bce:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8011bd2:	bf00      	nop
 8011bd4:	3708      	adds	r7, #8
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	20000924 	.word	0x20000924
 8011be0:	20000d58 	.word	0x20000d58
 8011be4:	20000d6c 	.word	0x20000d6c

08011be8 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8011bec:	4b16      	ldr	r3, [pc, #88]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011bee:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011bf2:	f003 0308 	and.w	r3, r3, #8
 8011bf6:	b2db      	uxtb	r3, r3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00d      	beq.n	8011c18 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8011bfc:	4a12      	ldr	r2, [pc, #72]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011bfe:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c02:	f36f 03c3 	bfc	r3, #3, #1
 8011c06:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8011c0a:	4b0f      	ldr	r3, [pc, #60]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011c0c:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c10:	68db      	ldr	r3, [r3, #12]
 8011c12:	490e      	ldr	r1, [pc, #56]	; (8011c4c <LoRaMacHandleIndicationEvents+0x64>)
 8011c14:	480e      	ldr	r0, [pc, #56]	; (8011c50 <LoRaMacHandleIndicationEvents+0x68>)
 8011c16:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8011c18:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011c1a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c1e:	f003 0302 	and.w	r3, r3, #2
 8011c22:	b2db      	uxtb	r3, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00d      	beq.n	8011c44 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8011c28:	4a07      	ldr	r2, [pc, #28]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011c2a:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011c2e:	f36f 0341 	bfc	r3, #1, #1
 8011c32:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8011c36:	4b04      	ldr	r3, [pc, #16]	; (8011c48 <LoRaMacHandleIndicationEvents+0x60>)
 8011c38:	f8d3 3344 	ldr.w	r3, [r3, #836]	; 0x344
 8011c3c:	685b      	ldr	r3, [r3, #4]
 8011c3e:	4903      	ldr	r1, [pc, #12]	; (8011c4c <LoRaMacHandleIndicationEvents+0x64>)
 8011c40:	4804      	ldr	r0, [pc, #16]	; (8011c54 <LoRaMacHandleIndicationEvents+0x6c>)
 8011c42:	4798      	blx	r3
    }
}
 8011c44:	bf00      	nop
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	20000924 	.word	0x20000924
 8011c4c:	20000da0 	.word	0x20000da0
 8011c50:	20000d80 	.word	0x20000d80
 8011c54:	20000d3c 	.word	0x20000d3c

08011c58 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8011c5e:	4b32      	ldr	r3, [pc, #200]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c60:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011c64:	f003 0301 	and.w	r3, r3, #1
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d058      	beq.n	8011d20 <LoRaMacHandleMcpsRequest+0xc8>
    {
        bool stopRetransmission = false;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 8011c72:	2300      	movs	r3, #0
 8011c74:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c76:	4b2c      	ldr	r3, [pc, #176]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c78:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d004      	beq.n	8011c8a <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 8011c80:	4b29      	ldr	r3, [pc, #164]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c82:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 8011c86:	2b03      	cmp	r3, #3
 8011c88:	d104      	bne.n	8011c94 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 8011c8a:	f002 f82d 	bl	8013ce8 <CheckRetransUnconfirmedUplink>
 8011c8e:	4603      	mov	r3, r0
 8011c90:	71fb      	strb	r3, [r7, #7]
 8011c92:	e020      	b.n	8011cd6 <LoRaMacHandleMcpsRequest+0x7e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 8011c94:	4b24      	ldr	r3, [pc, #144]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011c96:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8011c9a:	2b01      	cmp	r3, #1
 8011c9c:	d11b      	bne.n	8011cd6 <LoRaMacHandleMcpsRequest+0x7e>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( MacCtx.AckTimeoutRetry == true )
 8011c9e:	4b22      	ldr	r3, [pc, #136]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ca0:	f893 340f 	ldrb.w	r3, [r3, #1039]	; 0x40f
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d014      	beq.n	8011cd2 <LoRaMacHandleMcpsRequest+0x7a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 8011ca8:	f002 f84a 	bl	8013d40 <CheckRetransConfirmedUplink>
 8011cac:	4603      	mov	r3, r0
 8011cae:	71fb      	strb	r3, [r7, #7]

                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 8011cb0:	4b1e      	ldr	r3, [pc, #120]	; (8011d2c <LoRaMacHandleMcpsRequest+0xd4>)
 8011cb2:	f893 312a 	ldrb.w	r3, [r3, #298]	; 0x12a
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d10d      	bne.n	8011cd6 <LoRaMacHandleMcpsRequest+0x7e>
                {
                    if( stopRetransmission == false )
 8011cba:	79fb      	ldrb	r3, [r7, #7]
 8011cbc:	f083 0301 	eor.w	r3, r3, #1
 8011cc0:	b2db      	uxtb	r3, r3
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d002      	beq.n	8011ccc <LoRaMacHandleMcpsRequest+0x74>
                    {
                        AckTimeoutRetriesProcess( );
 8011cc6:	f002 f8cd 	bl	8013e64 <AckTimeoutRetriesProcess>
 8011cca:	e004      	b.n	8011cd6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                    else
                    {
                        AckTimeoutRetriesFinalize( );
 8011ccc:	f002 f908 	bl	8013ee0 <AckTimeoutRetriesFinalize>
 8011cd0:	e001      	b.n	8011cd6 <LoRaMacHandleMcpsRequest+0x7e>
                    }
                }
            }
            else
            {
                waitForRetransmission = true;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	71bb      	strb	r3, [r7, #6]
                waitForRetransmission = true;
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 8011cd6:	79fb      	ldrb	r3, [r7, #7]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d00d      	beq.n	8011cf8 <LoRaMacHandleMcpsRequest+0xa0>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 8011cdc:	4814      	ldr	r0, [pc, #80]	; (8011d30 <LoRaMacHandleMcpsRequest+0xd8>)
 8011cde:	f00c fa35 	bl	801e14c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8011ce2:	4b11      	ldr	r3, [pc, #68]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011ce4:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011ce8:	f023 0320 	bic.w	r3, r3, #32
 8011cec:	4a0e      	ldr	r2, [pc, #56]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011cee:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            StopRetransmission( );
 8011cf2:	f002 f847 	bl	8013d84 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 8011cf6:	e013      	b.n	8011d20 <LoRaMacHandleMcpsRequest+0xc8>
        else if( waitForRetransmission == false )
 8011cf8:	79bb      	ldrb	r3, [r7, #6]
 8011cfa:	f083 0301 	eor.w	r3, r3, #1
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d00d      	beq.n	8011d20 <LoRaMacHandleMcpsRequest+0xc8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 8011d04:	4a08      	ldr	r2, [pc, #32]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d06:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011d0a:	f36f 1304 	bfc	r3, #4, #1
 8011d0e:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
            MacCtx.AckTimeoutRetry = false;
 8011d12:	4b05      	ldr	r3, [pc, #20]	; (8011d28 <LoRaMacHandleMcpsRequest+0xd0>)
 8011d14:	2200      	movs	r2, #0
 8011d16:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
            OnTxDelayedTimerEvent( NULL );
 8011d1a:	2000      	movs	r0, #0
 8011d1c:	f000 f992 	bl	8012044 <OnTxDelayedTimerEvent>
}
 8011d20:	bf00      	nop
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	20000924 	.word	0x20000924
 8011d2c:	20000e2c 	.word	0x20000e2c
 8011d30:	20000c8c 	.word	0x20000c8c

08011d34 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011d38:	4b1b      	ldr	r3, [pc, #108]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d3a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011d3e:	f003 0304 	and.w	r3, r3, #4
 8011d42:	b2db      	uxtb	r3, r3
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d02c      	beq.n	8011da2 <LoRaMacHandleMlmeRequest+0x6e>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8011d48:	2001      	movs	r0, #1
 8011d4a:	f004 faa5 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d012      	beq.n	8011d7a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 8011d54:	2001      	movs	r0, #1
 8011d56:	f004 fa41 	bl	80161dc <LoRaMacConfirmQueueGetStatus>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d103      	bne.n	8011d68 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 8011d60:	4b11      	ldr	r3, [pc, #68]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d62:	2200      	movs	r2, #0
 8011d64:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d68:	4b0f      	ldr	r3, [pc, #60]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d6a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d6e:	f023 0302 	bic.w	r3, r3, #2
 8011d72:	4a0d      	ldr	r2, [pc, #52]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d74:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 8011d78:	e013      	b.n	8011da2 <LoRaMacHandleMlmeRequest+0x6e>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d7a:	2006      	movs	r0, #6
 8011d7c:	f004 fa8c 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d105      	bne.n	8011d92 <LoRaMacHandleMlmeRequest+0x5e>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8011d86:	2007      	movs	r0, #7
 8011d88:	f004 fa86 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8011d8c:	4603      	mov	r3, r0
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d007      	beq.n	8011da2 <LoRaMacHandleMlmeRequest+0x6e>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011d92:	4b05      	ldr	r3, [pc, #20]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d94:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011d98:	f023 0302 	bic.w	r3, r3, #2
 8011d9c:	4a02      	ldr	r2, [pc, #8]	; (8011da8 <LoRaMacHandleMlmeRequest+0x74>)
 8011d9e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 8011da2:	bf00      	nop
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20000924 	.word	0x20000924

08011dac <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011db0:	200c      	movs	r0, #12
 8011db2:	f004 fa71 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8011db6:	4603      	mov	r3, r0
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d019      	beq.n	8011df0 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8011dbc:	4b0e      	ldr	r3, [pc, #56]	; (8011df8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dbe:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dc2:	f003 0301 	and.w	r3, r3, #1
 8011dc6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d111      	bne.n	8011df0 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8011dcc:	4b0a      	ldr	r3, [pc, #40]	; (8011df8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dce:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011dd2:	f003 0304 	and.w	r3, r3, #4
 8011dd6:	b2db      	uxtb	r3, r3
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d009      	beq.n	8011df0 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011ddc:	4b06      	ldr	r3, [pc, #24]	; (8011df8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011dde:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011de2:	f023 0302 	bic.w	r3, r3, #2
 8011de6:	4a04      	ldr	r2, [pc, #16]	; (8011df8 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 8011de8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 8011dec:	2301      	movs	r3, #1
 8011dee:	e000      	b.n	8011df2 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	20000924 	.word	0x20000924

08011dfc <LoRaMacCheckForRxAbort>:
    return false;
}
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 8011dfc:	b480      	push	{r7}
 8011dfe:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8011e00:	4b0d      	ldr	r3, [pc, #52]	; (8011e38 <LoRaMacCheckForRxAbort+0x3c>)
 8011e02:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d00f      	beq.n	8011e2e <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8011e0e:	4b0a      	ldr	r3, [pc, #40]	; (8011e38 <LoRaMacCheckForRxAbort+0x3c>)
 8011e10:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e18:	4a07      	ldr	r2, [pc, #28]	; (8011e38 <LoRaMacCheckForRxAbort+0x3c>)
 8011e1a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8011e1e:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <LoRaMacCheckForRxAbort+0x3c>)
 8011e20:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e24:	f023 0302 	bic.w	r3, r3, #2
 8011e28:	4a03      	ldr	r2, [pc, #12]	; (8011e38 <LoRaMacCheckForRxAbort+0x3c>)
 8011e2a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 8011e2e:	bf00      	nop
 8011e30:	46bd      	mov	sp, r7
 8011e32:	bc80      	pop	{r7}
 8011e34:	4770      	bx	lr
 8011e36:	bf00      	nop
 8011e38:	20000924 	.word	0x20000924

08011e3c <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 8011e44:	2300      	movs	r3, #0
 8011e46:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8011e48:	2300      	movs	r3, #0
 8011e4a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 8011e4c:	4b50      	ldr	r3, [pc, #320]	; (8011f90 <LoRaMacHandleNvm+0x154>)
 8011e4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	f040 8098 	bne.w	8011f88 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2124      	movs	r1, #36	; 0x24
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f008 f82f 	bl	8019ec0 <Crc32>
 8011e62:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e68:	68ba      	ldr	r2, [r7, #8]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d006      	beq.n	8011e7c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	68ba      	ldr	r2, [r7, #8]
 8011e72:	625a      	str	r2, [r3, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8011e74:	89fb      	ldrh	r3, [r7, #14]
 8011e76:	f043 0301 	orr.w	r3, r3, #1
 8011e7a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	3328      	adds	r3, #40	; 0x28
 8011e80:	211c      	movs	r1, #28
 8011e82:	4618      	mov	r0, r3
 8011e84:	f008 f81c 	bl	8019ec0 <Crc32>
 8011e88:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e8e:	68ba      	ldr	r2, [r7, #8]
 8011e90:	429a      	cmp	r2, r3
 8011e92:	d006      	beq.n	8011ea2 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	645a      	str	r2, [r3, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8011e9a:	89fb      	ldrh	r3, [r7, #14]
 8011e9c:	f043 0302 	orr.w	r3, r3, #2
 8011ea0:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	3348      	adds	r3, #72	; 0x48
 8011ea6:	21fc      	movs	r1, #252	; 0xfc
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f008 f809 	bl	8019ec0 <Crc32>
 8011eae:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 8011eb6:	68ba      	ldr	r2, [r7, #8]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d007      	beq.n	8011ecc <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	68ba      	ldr	r2, [r7, #8]
 8011ec0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8011ec4:	89fb      	ldrh	r3, [r7, #14]
 8011ec6:	f043 0304 	orr.w	r3, r3, #4
 8011eca:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8011ed2:	21d4      	movs	r1, #212	; 0xd4
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	f007 fff3 	bl	8019ec0 <Crc32>
 8011eda:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8011ee2:	68ba      	ldr	r2, [r7, #8]
 8011ee4:	429a      	cmp	r2, r3
 8011ee6:	d007      	beq.n	8011ef8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	68ba      	ldr	r2, [r7, #8]
 8011eec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8011ef0:	89fb      	ldrh	r3, [r7, #14]
 8011ef2:	f043 0308 	orr.w	r3, r3, #8
 8011ef6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8011efe:	2190      	movs	r1, #144	; 0x90
 8011f00:	4618      	mov	r0, r3
 8011f02:	f007 ffdd 	bl	8019ec0 <Crc32>
 8011f06:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8011f0e:	68ba      	ldr	r2, [r7, #8]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d007      	beq.n	8011f24 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	68ba      	ldr	r2, [r7, #8]
 8011f18:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8011f1c:	89fb      	ldrh	r3, [r7, #14]
 8011f1e:	f043 0310 	orr.w	r3, r3, #16
 8011f22:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f503 732d 	add.w	r3, r3, #692	; 0x2b4
 8011f2a:	f44f 6193 	mov.w	r1, #1176	; 0x498
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f007 ffc6 	bl	8019ec0 <Crc32>
 8011f34:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 374c 	ldr.w	r3, [r3, #1868]	; 0x74c
 8011f3c:	68ba      	ldr	r2, [r7, #8]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d007      	beq.n	8011f52 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	68ba      	ldr	r2, [r7, #8]
 8011f46:	f8c3 274c 	str.w	r2, [r3, #1868]	; 0x74c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8011f4a:	89fb      	ldrh	r3, [r7, #14]
 8011f4c:	f043 0320 	orr.w	r3, r3, #32
 8011f50:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	f503 63ea 	add.w	r3, r3, #1872	; 0x750
 8011f58:	2114      	movs	r1, #20
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f007 ffb0 	bl	8019ec0 <Crc32>
 8011f60:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f8d3 3764 	ldr.w	r3, [r3, #1892]	; 0x764
 8011f68:	68ba      	ldr	r2, [r7, #8]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d007      	beq.n	8011f7e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	f8c3 2764 	str.w	r2, [r3, #1892]	; 0x764
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8011f76:	89fb      	ldrh	r3, [r7, #14]
 8011f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011f7c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 8011f7e:	89fb      	ldrh	r3, [r7, #14]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f001 ff51 	bl	8013e28 <CallNvmDataChangeCallback>
 8011f86:	e000      	b.n	8011f8a <LoRaMacHandleNvm+0x14e>
        return;
 8011f88:	bf00      	nop
}
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}
 8011f90:	20000924 	.word	0x20000924

08011f94 <LoRaMacProcess>:
    return false;
}
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 8011f94:	b580      	push	{r7, lr}
 8011f96:	b082      	sub	sp, #8
 8011f98:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 8011f9e:	f7ff fd3d 	bl	8011a1c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 8011fa2:	f003 fd1a 	bl	80159da <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8011fa6:	4b25      	ldr	r3, [pc, #148]	; (801203c <LoRaMacProcess+0xa8>)
 8011fa8:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8011fac:	f003 0310 	and.w	r3, r3, #16
 8011fb0:	b2db      	uxtb	r3, r3
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d023      	beq.n	8011ffe <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 8011fb6:	2000      	movs	r0, #0
 8011fb8:	f7ff fda4 	bl	8011b04 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 8011fbc:	f7ff ff1e 	bl	8011dfc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 8011fc0:	f001 ffc2 	bl	8013f48 <IsRequestPending>
 8011fc4:	4603      	mov	r3, r0
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d006      	beq.n	8011fd8 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 8011fca:	f7ff feef 	bl	8011dac <LoRaMacCheckForBeaconAcquisition>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	461a      	mov	r2, r3
 8011fd2:	79fb      	ldrb	r3, [r7, #7]
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 8011fd8:	79fb      	ldrb	r3, [r7, #7]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d103      	bne.n	8011fe6 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 8011fde:	f7ff fea9 	bl	8011d34 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 8011fe2:	f7ff fe39 	bl	8011c58 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 8011fe6:	f7ff fd9d 	bl	8011b24 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8011fea:	2001      	movs	r0, #1
 8011fec:	f7ff fd8a 	bl	8011b04 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011ff0:	4a12      	ldr	r2, [pc, #72]	; (801203c <LoRaMacProcess+0xa8>)
 8011ff2:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8011ff6:	f043 0320 	orr.w	r3, r3, #32
 8011ffa:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    LoRaMacHandleIndicationEvents( );
 8011ffe:	f7ff fdf3 	bl	8011be8 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8012002:	4b0e      	ldr	r3, [pc, #56]	; (801203c <LoRaMacProcess+0xa8>)
 8012004:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012008:	2b02      	cmp	r3, #2
 801200a:	d101      	bne.n	8012010 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 801200c:	f001 fbb8 	bl	8013780 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 8012010:	4b0a      	ldr	r3, [pc, #40]	; (801203c <LoRaMacProcess+0xa8>)
 8012012:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8012016:	f003 0320 	and.w	r3, r3, #32
 801201a:	b2db      	uxtb	r3, r3
 801201c:	2b00      	cmp	r3, #0
 801201e:	d009      	beq.n	8012034 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 8012020:	4a06      	ldr	r2, [pc, #24]	; (801203c <LoRaMacProcess+0xa8>)
 8012022:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8012026:	f36f 1345 	bfc	r3, #5, #1
 801202a:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
        LoRaMacHandleNvm( &Nvm );
 801202e:	4804      	ldr	r0, [pc, #16]	; (8012040 <LoRaMacProcess+0xac>)
 8012030:	f7ff ff04 	bl	8011e3c <LoRaMacHandleNvm>
    }
}
 8012034:	bf00      	nop
 8012036:	3708      	adds	r7, #8
 8012038:	46bd      	mov	sp, r7
 801203a:	bd80      	pop	{r7, pc}
 801203c:	20000924 	.word	0x20000924
 8012040:	20000e2c 	.word	0x20000e2c

08012044 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 801204c:	4817      	ldr	r0, [pc, #92]	; (80120ac <OnTxDelayedTimerEvent+0x68>)
 801204e:	f00c f87d 	bl	801e14c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8012052:	4b17      	ldr	r3, [pc, #92]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 8012054:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8012058:	f023 0320 	bic.w	r3, r3, #32
 801205c:	4a14      	ldr	r2, [pc, #80]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 801205e:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 8012062:	2001      	movs	r0, #1
 8012064:	f001 f8e4 	bl	8013230 <ScheduleTx>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d018      	beq.n	80120a0 <OnTxDelayedTimerEvent+0x5c>
 801206e:	2b0b      	cmp	r3, #11
 8012070:	d016      	beq.n	80120a0 <OnTxDelayedTimerEvent+0x5c>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012072:	4b10      	ldr	r3, [pc, #64]	; (80120b4 <OnTxDelayedTimerEvent+0x70>)
 8012074:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012078:	b2da      	uxtb	r2, r3
 801207a:	4b0d      	ldr	r3, [pc, #52]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 801207c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8012080:	4b0b      	ldr	r3, [pc, #44]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 8012082:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8012086:	4b0a      	ldr	r3, [pc, #40]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 8012088:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 801208c:	4b08      	ldr	r3, [pc, #32]	; (80120b0 <OnTxDelayedTimerEvent+0x6c>)
 801208e:	2209      	movs	r2, #9
 8012090:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8012094:	2009      	movs	r0, #9
 8012096:	f004 f8cb 	bl	8016230 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 801209a:	f001 fe73 	bl	8013d84 <StopRetransmission>
            break;
 801209e:	e000      	b.n	80120a2 <OnTxDelayedTimerEvent+0x5e>
            break;
 80120a0:	bf00      	nop
        }
    }
}
 80120a2:	bf00      	nop
 80120a4:	3708      	adds	r7, #8
 80120a6:	46bd      	mov	sp, r7
 80120a8:	bd80      	pop	{r7, pc}
 80120aa:	bf00      	nop
 80120ac:	20000c8c 	.word	0x20000c8c
 80120b0:	20000924 	.word	0x20000924
 80120b4:	20000e2c 	.word	0x20000e2c

080120b8 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 80120b8:	b580      	push	{r7, lr}
 80120ba:	b082      	sub	sp, #8
 80120bc:	af00      	add	r7, sp, #0
 80120be:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 80120c0:	4b14      	ldr	r3, [pc, #80]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120c2:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 80120c6:	4b13      	ldr	r3, [pc, #76]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120c8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 80120cc:	4b12      	ldr	r3, [pc, #72]	; (8012118 <OnRxWindow1TimerEvent+0x60>)
 80120ce:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80120d2:	b25a      	sxtb	r2, r3
 80120d4:	4b0f      	ldr	r3, [pc, #60]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120d6:	f883 23bb 	strb.w	r2, [r3, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80120da:	4b0f      	ldr	r3, [pc, #60]	; (8012118 <OnRxWindow1TimerEvent+0x60>)
 80120dc:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80120e0:	4b0c      	ldr	r3, [pc, #48]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120e2:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80120e6:	4b0c      	ldr	r3, [pc, #48]	; (8012118 <OnRxWindow1TimerEvent+0x60>)
 80120e8:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 80120ec:	4b09      	ldr	r3, [pc, #36]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120ee:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 80120f2:	4b08      	ldr	r3, [pc, #32]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120f4:	2200      	movs	r2, #0
 80120f6:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 80120fa:	4b06      	ldr	r3, [pc, #24]	; (8012114 <OnRxWindow1TimerEvent+0x5c>)
 80120fc:	2200      	movs	r2, #0
 80120fe:	f883 23cb 	strb.w	r2, [r3, #971]	; 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8012102:	4906      	ldr	r1, [pc, #24]	; (801211c <OnRxWindow1TimerEvent+0x64>)
 8012104:	4806      	ldr	r0, [pc, #24]	; (8012120 <OnRxWindow1TimerEvent+0x68>)
 8012106:	f001 fb07 	bl	8013718 <RxWindowSetup>
}
 801210a:	bf00      	nop
 801210c:	3708      	adds	r7, #8
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}
 8012112:	bf00      	nop
 8012114:	20000924 	.word	0x20000924
 8012118:	20000e2c 	.word	0x20000e2c
 801211c:	20000cdc 	.word	0x20000cdc
 8012120:	20000ca4 	.word	0x20000ca4

08012124 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b082      	sub	sp, #8
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 801212c:	4b16      	ldr	r3, [pc, #88]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 801212e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012132:	2b00      	cmp	r3, #0
 8012134:	d023      	beq.n	801217e <OnRxWindow2TimerEvent+0x5a>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8012136:	4b14      	ldr	r3, [pc, #80]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 8012138:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 801213c:	4b12      	ldr	r3, [pc, #72]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 801213e:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8012142:	4b12      	ldr	r3, [pc, #72]	; (801218c <OnRxWindow2TimerEvent+0x68>)
 8012144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012146:	4a10      	ldr	r2, [pc, #64]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 8012148:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801214c:	4b0f      	ldr	r3, [pc, #60]	; (801218c <OnRxWindow2TimerEvent+0x68>)
 801214e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8012152:	4b0d      	ldr	r3, [pc, #52]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 8012154:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012158:	4b0c      	ldr	r3, [pc, #48]	; (801218c <OnRxWindow2TimerEvent+0x68>)
 801215a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801215e:	4b0a      	ldr	r3, [pc, #40]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 8012160:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8012164:	4b08      	ldr	r3, [pc, #32]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 8012166:	2200      	movs	r2, #0
 8012168:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 801216c:	4b06      	ldr	r3, [pc, #24]	; (8012188 <OnRxWindow2TimerEvent+0x64>)
 801216e:	2201      	movs	r2, #1
 8012170:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8012174:	4906      	ldr	r1, [pc, #24]	; (8012190 <OnRxWindow2TimerEvent+0x6c>)
 8012176:	4807      	ldr	r0, [pc, #28]	; (8012194 <OnRxWindow2TimerEvent+0x70>)
 8012178:	f001 face 	bl	8013718 <RxWindowSetup>
 801217c:	e000      	b.n	8012180 <OnRxWindow2TimerEvent+0x5c>
        return;
 801217e:	bf00      	nop
}
 8012180:	3708      	adds	r7, #8
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	20000924 	.word	0x20000924
 801218c:	20000e2c 	.word	0x20000e2c
 8012190:	20000cf0 	.word	0x20000cf0
 8012194:	20000cbc 	.word	0x20000cbc

08012198 <OnAckTimeoutTimerEvent>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void OnAckTimeoutTimerEvent( void* context )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b082      	sub	sp, #8
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.AckTimeoutTimer );
 80121a0:	480e      	ldr	r0, [pc, #56]	; (80121dc <OnAckTimeoutTimerEvent+0x44>)
 80121a2:	f00b ffd3 	bl	801e14c <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 80121a6:	4b0e      	ldr	r3, [pc, #56]	; (80121e0 <OnAckTimeoutTimerEvent+0x48>)
 80121a8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d003      	beq.n	80121b8 <OnAckTimeoutTimerEvent+0x20>
    {
        MacCtx.AckTimeoutRetry = true;
 80121b0:	4b0b      	ldr	r3, [pc, #44]	; (80121e0 <OnAckTimeoutTimerEvent+0x48>)
 80121b2:	2201      	movs	r2, #1
 80121b4:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80121b8:	4b0a      	ldr	r3, [pc, #40]	; (80121e4 <OnAckTimeoutTimerEvent+0x4c>)
 80121ba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d106      	bne.n	80121d0 <OnAckTimeoutTimerEvent+0x38>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 80121c2:	4a07      	ldr	r2, [pc, #28]	; (80121e0 <OnAckTimeoutTimerEvent+0x48>)
 80121c4:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80121c8:	f043 0310 	orr.w	r3, r3, #16
 80121cc:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
    OnMacProcessNotify( );
 80121d0:	f001 fe14 	bl	8013dfc <OnMacProcessNotify>
}
 80121d4:	bf00      	nop
 80121d6:	3708      	adds	r7, #8
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	20000d18 	.word	0x20000d18
 80121e0:	20000924 	.word	0x20000924
 80121e4:	20000e2c 	.word	0x20000e2c

080121e8 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          uint16_t maxFCntGap, FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	60ba      	str	r2, [r7, #8]
 80121f0:	607b      	str	r3, [r7, #4]
 80121f2:	4603      	mov	r3, r0
 80121f4:	73fb      	strb	r3, [r7, #15]
 80121f6:	460b      	mov	r3, r1
 80121f8:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d005      	beq.n	801220c <GetFCntDown+0x24>
 8012200:	69fb      	ldr	r3, [r7, #28]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d002      	beq.n	801220c <GetFCntDown+0x24>
 8012206:	6a3b      	ldr	r3, [r7, #32]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801220c:	230a      	movs	r3, #10
 801220e:	e029      	b.n	8012264 <GetFCntDown+0x7c>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 8012210:	7bfb      	ldrb	r3, [r7, #15]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d016      	beq.n	8012244 <GetFCntDown+0x5c>
 8012216:	2b01      	cmp	r3, #1
 8012218:	d118      	bne.n	801224c <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 801221a:	79bb      	ldrb	r3, [r7, #6]
 801221c:	2b01      	cmp	r3, #1
 801221e:	d10d      	bne.n	801223c <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8012220:	7bbb      	ldrb	r3, [r7, #14]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d002      	beq.n	801222c <GetFCntDown+0x44>
 8012226:	7bbb      	ldrb	r3, [r7, #14]
 8012228:	2b03      	cmp	r3, #3
 801222a:	d103      	bne.n	8012234 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 801222c:	69fb      	ldr	r3, [r7, #28]
 801222e:	2202      	movs	r2, #2
 8012230:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 8012232:	e00d      	b.n	8012250 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 8012234:	69fb      	ldr	r3, [r7, #28]
 8012236:	2201      	movs	r2, #1
 8012238:	701a      	strb	r2, [r3, #0]
            break;
 801223a:	e009      	b.n	8012250 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 801223c:	69fb      	ldr	r3, [r7, #28]
 801223e:	2203      	movs	r2, #3
 8012240:	701a      	strb	r2, [r3, #0]
            break;
 8012242:	e005      	b.n	8012250 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 8012244:	69fb      	ldr	r3, [r7, #28]
 8012246:	2204      	movs	r2, #4
 8012248:	701a      	strb	r2, [r3, #0]
            break;
 801224a:	e001      	b.n	8012250 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 801224c:	2305      	movs	r3, #5
 801224e:	e009      	b.n	8012264 <GetFCntDown+0x7c>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 8012250:	69fb      	ldr	r3, [r7, #28]
 8012252:	7818      	ldrb	r0, [r3, #0]
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	89db      	ldrh	r3, [r3, #14]
 8012258:	461a      	mov	r2, r3
 801225a:	8b39      	ldrh	r1, [r7, #24]
 801225c:	6a3b      	ldr	r3, [r7, #32]
 801225e:	f004 fc25 	bl	8016aac <LoRaMacCryptoGetFCntDown>
 8012262:	4603      	mov	r3, r0
}
 8012264:	4618      	mov	r0, r3
 8012266:	3710      	adds	r7, #16
 8012268:	46bd      	mov	sp, r7
 801226a:	bd80      	pop	{r7, pc}

0801226c <SwitchClass>:
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 801226c:	b5b0      	push	{r4, r5, r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
 8012272:	4603      	mov	r3, r0
 8012274:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012276:	2303      	movs	r3, #3
 8012278:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 801227a:	4b6d      	ldr	r3, [pc, #436]	; (8012430 <SwitchClass+0x1c4>)
 801227c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012280:	2b02      	cmp	r3, #2
 8012282:	f000 80b9 	beq.w	80123f8 <SwitchClass+0x18c>
 8012286:	2b02      	cmp	r3, #2
 8012288:	f300 80cc 	bgt.w	8012424 <SwitchClass+0x1b8>
 801228c:	2b00      	cmp	r3, #0
 801228e:	d003      	beq.n	8012298 <SwitchClass+0x2c>
 8012290:	2b01      	cmp	r3, #1
 8012292:	f000 80a3 	beq.w	80123dc <SwitchClass+0x170>
 8012296:	e0c5      	b.n	8012424 <SwitchClass+0x1b8>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 8012298:	79fb      	ldrb	r3, [r7, #7]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d109      	bne.n	80122b2 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801229e:	4b64      	ldr	r3, [pc, #400]	; (8012430 <SwitchClass+0x1c4>)
 80122a0:	4a63      	ldr	r2, [pc, #396]	; (8012430 <SwitchClass+0x1c4>)
 80122a2:	3374      	adds	r3, #116	; 0x74
 80122a4:	326c      	adds	r2, #108	; 0x6c
 80122a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122aa:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 80122ae:	2300      	movs	r3, #0
 80122b0:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 80122b2:	79fb      	ldrb	r3, [r7, #7]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d10c      	bne.n	80122d2 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 80122b8:	79fb      	ldrb	r3, [r7, #7]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f003 fb2f 	bl	801591e <LoRaMacClassBSwitchClass>
 80122c0:	4603      	mov	r3, r0
 80122c2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 80122c4:	7bfb      	ldrb	r3, [r7, #15]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d103      	bne.n	80122d2 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 80122ca:	4a59      	ldr	r2, [pc, #356]	; (8012430 <SwitchClass+0x1c4>)
 80122cc:	79fb      	ldrb	r3, [r7, #7]
 80122ce:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
                }
            }

            if( deviceClass == CLASS_C )
 80122d2:	79fb      	ldrb	r3, [r7, #7]
 80122d4:	2b02      	cmp	r3, #2
 80122d6:	f040 80a0 	bne.w	801241a <SwitchClass+0x1ae>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80122da:	4a55      	ldr	r2, [pc, #340]	; (8012430 <SwitchClass+0x1c4>)
 80122dc:	79fb      	ldrb	r3, [r7, #7]
 80122de:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80122e2:	4a54      	ldr	r2, [pc, #336]	; (8012434 <SwitchClass+0x1c8>)
 80122e4:	4b53      	ldr	r3, [pc, #332]	; (8012434 <SwitchClass+0x1c8>)
 80122e6:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 80122ea:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 80122ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80122f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80122f2:	682b      	ldr	r3, [r5, #0]
 80122f4:	6023      	str	r3, [r4, #0]
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80122f6:	4b4f      	ldr	r3, [pc, #316]	; (8012434 <SwitchClass+0x1c8>)
 80122f8:	2202      	movs	r2, #2
 80122fa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80122fe:	2300      	movs	r3, #0
 8012300:	73bb      	strb	r3, [r7, #14]
 8012302:	e05b      	b.n	80123bc <SwitchClass+0x150>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012304:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012308:	4949      	ldr	r1, [pc, #292]	; (8012430 <SwitchClass+0x1c4>)
 801230a:	4613      	mov	r3, r2
 801230c:	005b      	lsls	r3, r3, #1
 801230e:	4413      	add	r3, r2
 8012310:	011b      	lsls	r3, r3, #4
 8012312:	440b      	add	r3, r1
 8012314:	33e9      	adds	r3, #233	; 0xe9
 8012316:	781b      	ldrb	r3, [r3, #0]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d049      	beq.n	80123b0 <SwitchClass+0x144>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 801231c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012320:	4943      	ldr	r1, [pc, #268]	; (8012430 <SwitchClass+0x1c4>)
 8012322:	4613      	mov	r3, r2
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4413      	add	r3, r2
 8012328:	011b      	lsls	r3, r3, #4
 801232a:	440b      	add	r3, r1
 801232c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012330:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 8012332:	2b02      	cmp	r3, #2
 8012334:	d13c      	bne.n	80123b0 <SwitchClass+0x144>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 8012336:	f997 200e 	ldrsb.w	r2, [r7, #14]
 801233a:	493d      	ldr	r1, [pc, #244]	; (8012430 <SwitchClass+0x1c4>)
 801233c:	4613      	mov	r3, r2
 801233e:	005b      	lsls	r3, r3, #1
 8012340:	4413      	add	r3, r2
 8012342:	011b      	lsls	r3, r3, #4
 8012344:	440b      	add	r3, r1
 8012346:	f503 7382 	add.w	r3, r3, #260	; 0x104
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	4a38      	ldr	r2, [pc, #224]	; (8012430 <SwitchClass+0x1c4>)
 801234e:	6753      	str	r3, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 8012350:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8012354:	4936      	ldr	r1, [pc, #216]	; (8012430 <SwitchClass+0x1c4>)
 8012356:	4613      	mov	r3, r2
 8012358:	005b      	lsls	r3, r3, #1
 801235a:	4413      	add	r3, r2
 801235c:	011b      	lsls	r3, r3, #4
 801235e:	440b      	add	r3, r1
 8012360:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8012364:	f993 3000 	ldrsb.w	r3, [r3]
 8012368:	b2da      	uxtb	r2, r3
 801236a:	4b31      	ldr	r3, [pc, #196]	; (8012430 <SwitchClass+0x1c4>)
 801236c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8012370:	4b30      	ldr	r3, [pc, #192]	; (8012434 <SwitchClass+0x1c8>)
 8012372:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8012376:	4b2f      	ldr	r3, [pc, #188]	; (8012434 <SwitchClass+0x1c8>)
 8012378:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 801237c:	4b2c      	ldr	r3, [pc, #176]	; (8012430 <SwitchClass+0x1c4>)
 801237e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012380:	4a2c      	ldr	r2, [pc, #176]	; (8012434 <SwitchClass+0x1c8>)
 8012382:	f8c2 33e4 	str.w	r3, [r2, #996]	; 0x3e4
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8012386:	4b2a      	ldr	r3, [pc, #168]	; (8012430 <SwitchClass+0x1c4>)
 8012388:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801238c:	4b29      	ldr	r3, [pc, #164]	; (8012434 <SwitchClass+0x1c8>)
 801238e:	f883 23f0 	strb.w	r2, [r3, #1008]	; 0x3f0
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8012392:	4b27      	ldr	r3, [pc, #156]	; (8012430 <SwitchClass+0x1c4>)
 8012394:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8012398:	4b26      	ldr	r3, [pc, #152]	; (8012434 <SwitchClass+0x1c8>)
 801239a:	f883 23f1 	strb.w	r2, [r3, #1009]	; 0x3f1
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 801239e:	4b25      	ldr	r3, [pc, #148]	; (8012434 <SwitchClass+0x1c8>)
 80123a0:	2203      	movs	r2, #3
 80123a2:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80123a6:	4b23      	ldr	r3, [pc, #140]	; (8012434 <SwitchClass+0x1c8>)
 80123a8:	2201      	movs	r2, #1
 80123aa:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
                        break;
 80123ae:	e009      	b.n	80123c4 <SwitchClass+0x158>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80123b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	3301      	adds	r3, #1
 80123b8:	b2db      	uxtb	r3, r3
 80123ba:	73bb      	strb	r3, [r7, #14]
 80123bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	dd9f      	ble.n	8012304 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 80123c4:	4b1b      	ldr	r3, [pc, #108]	; (8012434 <SwitchClass+0x1c8>)
 80123c6:	2200      	movs	r2, #0
 80123c8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 80123cc:	4b1a      	ldr	r3, [pc, #104]	; (8012438 <SwitchClass+0x1cc>)
 80123ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 80123d2:	f001 f9d5 	bl	8013780 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 80123d6:	2300      	movs	r3, #0
 80123d8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 80123da:	e01e      	b.n	801241a <SwitchClass+0x1ae>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 80123dc:	79fb      	ldrb	r3, [r7, #7]
 80123de:	4618      	mov	r0, r3
 80123e0:	f003 fa9d 	bl	801591e <LoRaMacClassBSwitchClass>
 80123e4:	4603      	mov	r3, r0
 80123e6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 80123e8:	7bfb      	ldrb	r3, [r7, #15]
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d117      	bne.n	801241e <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 80123ee:	4a10      	ldr	r2, [pc, #64]	; (8012430 <SwitchClass+0x1c4>)
 80123f0:	79fb      	ldrb	r3, [r7, #7]
 80123f2:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118
            }
            break;
 80123f6:	e012      	b.n	801241e <SwitchClass+0x1b2>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 80123f8:	79fb      	ldrb	r3, [r7, #7]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d111      	bne.n	8012422 <SwitchClass+0x1b6>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 80123fe:	4b0d      	ldr	r3, [pc, #52]	; (8012434 <SwitchClass+0x1c8>)
 8012400:	2206      	movs	r2, #6
 8012402:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480

                Nvm.MacGroup2.DeviceClass = deviceClass;
 8012406:	4a0a      	ldr	r2, [pc, #40]	; (8012430 <SwitchClass+0x1c4>)
 8012408:	79fb      	ldrb	r3, [r7, #7]
 801240a:	f882 3118 	strb.w	r3, [r2, #280]	; 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 801240e:	4b0a      	ldr	r3, [pc, #40]	; (8012438 <SwitchClass+0x1cc>)
 8012410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012412:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 8012414:	2300      	movs	r3, #0
 8012416:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 8012418:	e003      	b.n	8012422 <SwitchClass+0x1b6>
            break;
 801241a:	bf00      	nop
 801241c:	e002      	b.n	8012424 <SwitchClass+0x1b8>
            break;
 801241e:	bf00      	nop
 8012420:	e000      	b.n	8012424 <SwitchClass+0x1b8>
            break;
 8012422:	bf00      	nop
        }
    }

    return status;
 8012424:	7bfb      	ldrb	r3, [r7, #15]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bdb0      	pop	{r4, r5, r7, pc}
 801242e:	bf00      	nop
 8012430:	20000e2c 	.word	0x20000e2c
 8012434:	20000924 	.word	0x20000924
 8012438:	0801f9f0 	.word	0x0801f9f0

0801243c <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 801243c:	b580      	push	{r7, lr}
 801243e:	b086      	sub	sp, #24
 8012440:	af00      	add	r7, sp, #0
 8012442:	4603      	mov	r3, r0
 8012444:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012446:	4b10      	ldr	r3, [pc, #64]	; (8012488 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012448:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801244c:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 801244e:	79fb      	ldrb	r3, [r7, #7]
 8012450:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8012452:	230d      	movs	r3, #13
 8012454:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8012456:	4b0c      	ldr	r3, [pc, #48]	; (8012488 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012458:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801245c:	2b00      	cmp	r3, #0
 801245e:	d001      	beq.n	8012464 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8012460:	230e      	movs	r3, #14
 8012462:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012464:	4b08      	ldr	r3, [pc, #32]	; (8012488 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 8012466:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801246a:	f107 0210 	add.w	r2, r7, #16
 801246e:	4611      	mov	r1, r2
 8012470:	4618      	mov	r0, r3
 8012472:	f005 f9b6 	bl	80177e2 <RegionGetPhyParam>
 8012476:	4603      	mov	r3, r0
 8012478:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	b2db      	uxtb	r3, r3
}
 801247e:	4618      	mov	r0, r3
 8012480:	3718      	adds	r7, #24
 8012482:	46bd      	mov	sp, r7
 8012484:	bd80      	pop	{r7, pc}
 8012486:	bf00      	nop
 8012488:	20000e2c 	.word	0x20000e2c

0801248c <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	4603      	mov	r3, r0
 8012494:	71fb      	strb	r3, [r7, #7]
 8012496:	460b      	mov	r3, r1
 8012498:	71bb      	strb	r3, [r7, #6]
 801249a:	4613      	mov	r3, r2
 801249c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 801249e:	2300      	movs	r3, #0
 80124a0:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80124a6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80124aa:	4618      	mov	r0, r3
 80124ac:	f7ff ffc6 	bl	801243c <GetMaxAppPayloadWithoutFOptsLength>
 80124b0:	4603      	mov	r3, r0
 80124b2:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	b29a      	uxth	r2, r3
 80124b8:	797b      	ldrb	r3, [r7, #5]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	4413      	add	r3, r2
 80124be:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80124c0:	89ba      	ldrh	r2, [r7, #12]
 80124c2:	89fb      	ldrh	r3, [r7, #14]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d804      	bhi.n	80124d2 <ValidatePayloadLength+0x46>
 80124c8:	89bb      	ldrh	r3, [r7, #12]
 80124ca:	2bff      	cmp	r3, #255	; 0xff
 80124cc:	d801      	bhi.n	80124d2 <ValidatePayloadLength+0x46>
    {
        return true;
 80124ce:	2301      	movs	r3, #1
 80124d0:	e000      	b.n	80124d4 <ValidatePayloadLength+0x48>
    }
    return false;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 80124dc:	b590      	push	{r4, r7, lr}
 80124de:	b0a5      	sub	sp, #148	; 0x94
 80124e0:	af02      	add	r7, sp, #8
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	4608      	mov	r0, r1
 80124e6:	4611      	mov	r1, r2
 80124e8:	461a      	mov	r2, r3
 80124ea:	4603      	mov	r3, r0
 80124ec:	70fb      	strb	r3, [r7, #3]
 80124ee:	460b      	mov	r3, r1
 80124f0:	70bb      	strb	r3, [r7, #2]
 80124f2:	4613      	mov	r3, r2
 80124f4:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 80124f6:	2300      	movs	r3, #0
 80124f8:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    bool adrBlockFound = false;
 80124fc:	2300      	movs	r3, #0
 80124fe:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8012502:	2300      	movs	r3, #0
 8012504:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 8012508:	f000 bc6d 	b.w	8012de6 <ProcessMacCommands+0x90a>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 801250c:	78fb      	ldrb	r3, [r7, #3]
 801250e:	687a      	ldr	r2, [r7, #4]
 8012510:	4413      	add	r3, r2
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	4618      	mov	r0, r3
 8012516:	f003 fce7 	bl	8015ee8 <LoRaMacCommandsGetCmdSize>
 801251a:	4603      	mov	r3, r0
 801251c:	461a      	mov	r2, r3
 801251e:	78fb      	ldrb	r3, [r7, #3]
 8012520:	441a      	add	r2, r3
 8012522:	78bb      	ldrb	r3, [r7, #2]
 8012524:	429a      	cmp	r2, r3
 8012526:	f300 8464 	bgt.w	8012df2 <ProcessMacCommands+0x916>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 801252a:	78fb      	ldrb	r3, [r7, #3]
 801252c:	1c5a      	adds	r2, r3, #1
 801252e:	70fa      	strb	r2, [r7, #3]
 8012530:	461a      	mov	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	4413      	add	r3, r2
 8012536:	781b      	ldrb	r3, [r3, #0]
 8012538:	3b02      	subs	r3, #2
 801253a:	2b11      	cmp	r3, #17
 801253c:	f200 845b 	bhi.w	8012df6 <ProcessMacCommands+0x91a>
 8012540:	a201      	add	r2, pc, #4	; (adr r2, 8012548 <ProcessMacCommands+0x6c>)
 8012542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012546:	bf00      	nop
 8012548:	08012591 	.word	0x08012591
 801254c:	080125d3 	.word	0x080125d3
 8012550:	080126ef 	.word	0x080126ef
 8012554:	0801272d 	.word	0x0801272d
 8012558:	08012819 	.word	0x08012819
 801255c:	08012875 	.word	0x08012875
 8012560:	08012931 	.word	0x08012931
 8012564:	08012987 	.word	0x08012987
 8012568:	08012a6d 	.word	0x08012a6d
 801256c:	08012df7 	.word	0x08012df7
 8012570:	08012df7 	.word	0x08012df7
 8012574:	08012b11 	.word	0x08012b11
 8012578:	08012df7 	.word	0x08012df7
 801257c:	08012df7 	.word	0x08012df7
 8012580:	08012c27 	.word	0x08012c27
 8012584:	08012c5b 	.word	0x08012c5b
 8012588:	08012ceb 	.word	0x08012ceb
 801258c:	08012d61 	.word	0x08012d61
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8012590:	2005      	movs	r0, #5
 8012592:	f003 fe81 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8012596:	4603      	mov	r3, r0
 8012598:	2b00      	cmp	r3, #0
 801259a:	f000 8424 	beq.w	8012de6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 801259e:	2105      	movs	r1, #5
 80125a0:	2000      	movs	r0, #0
 80125a2:	f003 fded 	bl	8016180 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80125a6:	78fb      	ldrb	r3, [r7, #3]
 80125a8:	1c5a      	adds	r2, r3, #1
 80125aa:	70fa      	strb	r2, [r7, #3]
 80125ac:	461a      	mov	r2, r3
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4413      	add	r3, r2
 80125b2:	781a      	ldrb	r2, [r3, #0]
 80125b4:	4bac      	ldr	r3, [pc, #688]	; (8012868 <ProcessMacCommands+0x38c>)
 80125b6:	f883 2450 	strb.w	r2, [r3, #1104]	; 0x450
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80125ba:	78fb      	ldrb	r3, [r7, #3]
 80125bc:	1c5a      	adds	r2, r3, #1
 80125be:	70fa      	strb	r2, [r7, #3]
 80125c0:	461a      	mov	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4413      	add	r3, r2
 80125c6:	781a      	ldrb	r2, [r3, #0]
 80125c8:	4ba7      	ldr	r3, [pc, #668]	; (8012868 <ProcessMacCommands+0x38c>)
 80125ca:	f883 2451 	strb.w	r2, [r3, #1105]	; 0x451
                }
                break;
 80125ce:	f000 bc0a 	b.w	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 80125d2:	2300      	movs	r3, #0
 80125d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 80125d8:	2300      	movs	r3, #0
 80125da:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
                uint8_t linkAdrNbRep = 0;
 80125de:	2300      	movs	r3, #0
 80125e0:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 80125e4:	2300      	movs	r3, #0
 80125e6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

                // The end node is allowed to process one block of LinkAdrRequests.
                // It must ignore subsequent blocks
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                if( adrBlockFound == false )
 80125ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80125ee:	f083 0301 	eor.w	r3, r3, #1
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d078      	beq.n	80126ea <ProcessMacCommands+0x20e>
                {
                    adrBlockFound = true;
 80125f8:	2301      	movs	r3, #1
 80125fa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

                    // Fill parameter structure
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80125fe:	78fb      	ldrb	r3, [r7, #3]
 8012600:	3b01      	subs	r3, #1
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	4413      	add	r3, r2
 8012606:	65fb      	str	r3, [r7, #92]	; 0x5c
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8012608:	78ba      	ldrb	r2, [r7, #2]
 801260a:	78fb      	ldrb	r3, [r7, #3]
 801260c:	1ad3      	subs	r3, r2, r3
 801260e:	b2db      	uxtb	r3, r3
 8012610:	3301      	adds	r3, #1
 8012612:	b2db      	uxtb	r3, r3
 8012614:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8012618:	4b94      	ldr	r3, [pc, #592]	; (801286c <ProcessMacCommands+0x390>)
 801261a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801261e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012622:	4b92      	ldr	r3, [pc, #584]	; (801286c <ProcessMacCommands+0x390>)
 8012624:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012628:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801262c:	4b8f      	ldr	r3, [pc, #572]	; (801286c <ProcessMacCommands+0x390>)
 801262e:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012632:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012636:	4b8d      	ldr	r3, [pc, #564]	; (801286c <ProcessMacCommands+0x390>)
 8012638:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801263c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8012640:	4b8a      	ldr	r3, [pc, #552]	; (801286c <ProcessMacCommands+0x390>)
 8012642:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012646:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 801264a:	4b88      	ldr	r3, [pc, #544]	; (801286c <ProcessMacCommands+0x390>)
 801264c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012650:	65bb      	str	r3, [r7, #88]	; 0x58

                    // Process the ADR requests
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 8012652:	4b86      	ldr	r3, [pc, #536]	; (801286c <ProcessMacCommands+0x390>)
 8012654:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8012658:	f107 0456 	add.w	r4, r7, #86	; 0x56
 801265c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8012660:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012668:	9301      	str	r3, [sp, #4]
 801266a:	f107 0355 	add.w	r3, r7, #85	; 0x55
 801266e:	9300      	str	r3, [sp, #0]
 8012670:	4623      	mov	r3, r4
 8012672:	f005 f973 	bl	801795c <RegionLinkAdrReq>
 8012676:	4603      	mov	r3, r0
 8012678:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                                               &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                    if( ( status & 0x07 ) == 0x07 )
 801267c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012680:	f003 0307 	and.w	r3, r3, #7
 8012684:	2b07      	cmp	r3, #7
 8012686:	d10e      	bne.n	80126a6 <ProcessMacCommands+0x1ca>
                    {
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 8012688:	f997 2057 	ldrsb.w	r2, [r7, #87]	; 0x57
 801268c:	4b77      	ldr	r3, [pc, #476]	; (801286c <ProcessMacCommands+0x390>)
 801268e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8012692:	f997 2056 	ldrsb.w	r2, [r7, #86]	; 0x56
 8012696:	4b75      	ldr	r3, [pc, #468]	; (801286c <ProcessMacCommands+0x390>)
 8012698:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 801269c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80126a0:	4b72      	ldr	r3, [pc, #456]	; (801286c <ProcessMacCommands+0x390>)
 80126a2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
                    }

                    // Add the answers to the buffer
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126a6:	2300      	movs	r3, #0
 80126a8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126ac:	e00b      	b.n	80126c6 <ProcessMacCommands+0x1ea>
                    {
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80126ae:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 80126b2:	2201      	movs	r2, #1
 80126b4:	4619      	mov	r1, r3
 80126b6:	2003      	movs	r0, #3
 80126b8:	f003 fab6 	bl	8015c28 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80126bc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80126c0:	3301      	adds	r3, #1
 80126c2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 80126c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80126ca:	4a69      	ldr	r2, [pc, #420]	; (8012870 <ProcessMacCommands+0x394>)
 80126cc:	fba2 2303 	umull	r2, r3, r2, r3
 80126d0:	089b      	lsrs	r3, r3, #2
 80126d2:	b2db      	uxtb	r3, r3
 80126d4:	f897 2086 	ldrb.w	r2, [r7, #134]	; 0x86
 80126d8:	429a      	cmp	r2, r3
 80126da:	d3e8      	bcc.n	80126ae <ProcessMacCommands+0x1d2>
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
 80126dc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80126e0:	78fb      	ldrb	r3, [r7, #3]
 80126e2:	4413      	add	r3, r2
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	3b01      	subs	r3, #1
 80126e8:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 80126ea:	bf00      	nop
 80126ec:	e37b      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 80126ee:	78fb      	ldrb	r3, [r7, #3]
 80126f0:	1c5a      	adds	r2, r3, #1
 80126f2:	70fa      	strb	r2, [r7, #3]
 80126f4:	461a      	mov	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	4413      	add	r3, r2
 80126fa:	781b      	ldrb	r3, [r3, #0]
 80126fc:	f003 030f 	and.w	r3, r3, #15
 8012700:	b2da      	uxtb	r2, r3
 8012702:	4b5a      	ldr	r3, [pc, #360]	; (801286c <ProcessMacCommands+0x390>)
 8012704:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8012708:	4b58      	ldr	r3, [pc, #352]	; (801286c <ProcessMacCommands+0x390>)
 801270a:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 801270e:	461a      	mov	r2, r3
 8012710:	2301      	movs	r3, #1
 8012712:	4093      	lsls	r3, r2
 8012714:	b29a      	uxth	r2, r3
 8012716:	4b55      	ldr	r3, [pc, #340]	; (801286c <ProcessMacCommands+0x390>)
 8012718:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 801271c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012720:	2200      	movs	r2, #0
 8012722:	4619      	mov	r1, r3
 8012724:	2004      	movs	r0, #4
 8012726:	f003 fa7f 	bl	8015c28 <LoRaMacCommandsAddCmd>
                break;
 801272a:	e35c      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 801272c:	2307      	movs	r3, #7
 801272e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8012732:	78fb      	ldrb	r3, [r7, #3]
 8012734:	687a      	ldr	r2, [r7, #4]
 8012736:	4413      	add	r3, r2
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	091b      	lsrs	r3, r3, #4
 801273c:	b2db      	uxtb	r3, r3
 801273e:	b25b      	sxtb	r3, r3
 8012740:	f003 0307 	and.w	r3, r3, #7
 8012744:	b25b      	sxtb	r3, r3
 8012746:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 801274a:	78fb      	ldrb	r3, [r7, #3]
 801274c:	687a      	ldr	r2, [r7, #4]
 801274e:	4413      	add	r3, r2
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	b25b      	sxtb	r3, r3
 8012754:	f003 030f 	and.w	r3, r3, #15
 8012758:	b25b      	sxtb	r3, r3
 801275a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
                macIndex++;
 801275e:	78fb      	ldrb	r3, [r7, #3]
 8012760:	3301      	adds	r3, #1
 8012762:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8012764:	78fb      	ldrb	r3, [r7, #3]
 8012766:	1c5a      	adds	r2, r3, #1
 8012768:	70fa      	strb	r2, [r7, #3]
 801276a:	461a      	mov	r2, r3
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	4413      	add	r3, r2
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012774:	78fb      	ldrb	r3, [r7, #3]
 8012776:	1c5a      	adds	r2, r3, #1
 8012778:	70fa      	strb	r2, [r7, #3]
 801277a:	461a      	mov	r2, r3
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	4413      	add	r3, r2
 8012780:	781b      	ldrb	r3, [r3, #0]
 8012782:	021a      	lsls	r2, r3, #8
 8012784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012786:	4313      	orrs	r3, r2
 8012788:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 801278a:	78fb      	ldrb	r3, [r7, #3]
 801278c:	1c5a      	adds	r2, r3, #1
 801278e:	70fa      	strb	r2, [r7, #3]
 8012790:	461a      	mov	r2, r3
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	4413      	add	r3, r2
 8012796:	781b      	ldrb	r3, [r3, #0]
 8012798:	041a      	lsls	r2, r3, #16
 801279a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801279c:	4313      	orrs	r3, r2
 801279e:	653b      	str	r3, [r7, #80]	; 0x50
                rxParamSetupReq.Frequency *= 100;
 80127a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127a2:	2264      	movs	r2, #100	; 0x64
 80127a4:	fb02 f303 	mul.w	r3, r2, r3
 80127a8:	653b      	str	r3, [r7, #80]	; 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80127aa:	4b30      	ldr	r3, [pc, #192]	; (801286c <ProcessMacCommands+0x390>)
 80127ac:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80127b0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80127b4:	4611      	mov	r1, r2
 80127b6:	4618      	mov	r0, r3
 80127b8:	f005 f8ea 	bl	8017990 <RegionRxParamSetupReq>
 80127bc:	4603      	mov	r3, r0
 80127be:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( status & 0x07 ) == 0x07 )
 80127c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80127c6:	f003 0307 	and.w	r3, r3, #7
 80127ca:	2b07      	cmp	r3, #7
 80127cc:	d117      	bne.n	80127fe <ProcessMacCommands+0x322>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80127ce:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	4b25      	ldr	r3, [pc, #148]	; (801286c <ProcessMacCommands+0x390>)
 80127d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80127da:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	4b22      	ldr	r3, [pc, #136]	; (801286c <ProcessMacCommands+0x390>)
 80127e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80127e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127e8:	4a20      	ldr	r2, [pc, #128]	; (801286c <ProcessMacCommands+0x390>)
 80127ea:	66d3      	str	r3, [r2, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80127ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127ee:	4a1f      	ldr	r2, [pc, #124]	; (801286c <ProcessMacCommands+0x390>)
 80127f0:	6753      	str	r3, [r2, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80127f2:	f997 304d 	ldrsb.w	r3, [r7, #77]	; 0x4d
 80127f6:	b2da      	uxtb	r2, r3
 80127f8:	4b1c      	ldr	r3, [pc, #112]	; (801286c <ProcessMacCommands+0x390>)
 80127fa:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
                }
                macCmdPayload[0] = status;
 80127fe:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012802:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8012806:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801280a:	2201      	movs	r2, #1
 801280c:	4619      	mov	r1, r3
 801280e:	2005      	movs	r0, #5
 8012810:	f003 fa0a 	bl	8015c28 <LoRaMacCommandsAddCmd>
                break;
 8012814:	bf00      	nop
 8012816:	e2e6      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8012818:	23ff      	movs	r3, #255	; 0xff
 801281a:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 801281e:	4b12      	ldr	r3, [pc, #72]	; (8012868 <ProcessMacCommands+0x38c>)
 8012820:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8012824:	2b00      	cmp	r3, #0
 8012826:	d00d      	beq.n	8012844 <ProcessMacCommands+0x368>
 8012828:	4b0f      	ldr	r3, [pc, #60]	; (8012868 <ProcessMacCommands+0x38c>)
 801282a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d007      	beq.n	8012844 <ProcessMacCommands+0x368>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8012834:	4b0c      	ldr	r3, [pc, #48]	; (8012868 <ProcessMacCommands+0x38c>)
 8012836:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	4798      	blx	r3
 801283e:	4603      	mov	r3, r0
 8012840:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
                }
                macCmdPayload[0] = batteryLevel;
 8012844:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8012848:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 801284c:	787b      	ldrb	r3, [r7, #1]
 801284e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012852:	b2db      	uxtb	r3, r3
 8012854:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8012858:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801285c:	2202      	movs	r2, #2
 801285e:	4619      	mov	r1, r3
 8012860:	2006      	movs	r0, #6
 8012862:	f003 f9e1 	bl	8015c28 <LoRaMacCommandsAddCmd>
                break;
 8012866:	e2be      	b.n	8012de6 <ProcessMacCommands+0x90a>
 8012868:	20000924 	.word	0x20000924
 801286c:	20000e2c 	.word	0x20000e2c
 8012870:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 8012874:	2303      	movs	r3, #3
 8012876:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 801287a:	78fb      	ldrb	r3, [r7, #3]
 801287c:	1c5a      	adds	r2, r3, #1
 801287e:	70fa      	strb	r2, [r7, #3]
 8012880:	461a      	mov	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	4413      	add	r3, r2
 8012886:	781b      	ldrb	r3, [r3, #0]
 8012888:	b25b      	sxtb	r3, r3
 801288a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
                newChannelReq.NewChannel = &chParam;
 801288e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8012892:	647b      	str	r3, [r7, #68]	; 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8012894:	78fb      	ldrb	r3, [r7, #3]
 8012896:	1c5a      	adds	r2, r3, #1
 8012898:	70fa      	strb	r2, [r7, #3]
 801289a:	461a      	mov	r2, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	4413      	add	r3, r2
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 80128a4:	78fb      	ldrb	r3, [r7, #3]
 80128a6:	1c5a      	adds	r2, r3, #1
 80128a8:	70fa      	strb	r2, [r7, #3]
 80128aa:	461a      	mov	r2, r3
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	4413      	add	r3, r2
 80128b0:	781b      	ldrb	r3, [r3, #0]
 80128b2:	021a      	lsls	r2, r3, #8
 80128b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b6:	4313      	orrs	r3, r2
 80128b8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 80128ba:	78fb      	ldrb	r3, [r7, #3]
 80128bc:	1c5a      	adds	r2, r3, #1
 80128be:	70fa      	strb	r2, [r7, #3]
 80128c0:	461a      	mov	r2, r3
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	4413      	add	r3, r2
 80128c6:	781b      	ldrb	r3, [r3, #0]
 80128c8:	041a      	lsls	r2, r3, #16
 80128ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128cc:	4313      	orrs	r3, r2
 80128ce:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Frequency *= 100;
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	2264      	movs	r2, #100	; 0x64
 80128d4:	fb02 f303 	mul.w	r3, r2, r3
 80128d8:	63bb      	str	r3, [r7, #56]	; 0x38
                chParam.Rx1Frequency = 0;
 80128da:	2300      	movs	r3, #0
 80128dc:	63fb      	str	r3, [r7, #60]	; 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 80128de:	78fb      	ldrb	r3, [r7, #3]
 80128e0:	1c5a      	adds	r2, r3, #1
 80128e2:	70fa      	strb	r2, [r7, #3]
 80128e4:	461a      	mov	r2, r3
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4413      	add	r3, r2
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	b25b      	sxtb	r3, r3
 80128ee:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 80128f2:	4b85      	ldr	r3, [pc, #532]	; (8012b08 <ProcessMacCommands+0x62c>)
 80128f4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80128f8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80128fc:	4611      	mov	r1, r2
 80128fe:	4618      	mov	r0, r3
 8012900:	f005 f859 	bl	80179b6 <RegionNewChannelReq>
 8012904:	4603      	mov	r3, r0
 8012906:	b2db      	uxtb	r3, r3
 8012908:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 801290c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012910:	b25b      	sxtb	r3, r3
 8012912:	2b00      	cmp	r3, #0
 8012914:	db0a      	blt.n	801292c <ProcessMacCommands+0x450>
                {
                    macCmdPayload[0] = status;
 8012916:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801291a:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 801291e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012922:	2201      	movs	r2, #1
 8012924:	4619      	mov	r1, r3
 8012926:	2007      	movs	r0, #7
 8012928:	f003 f97e 	bl	8015c28 <LoRaMacCommandsAddCmd>
                }
                break;
 801292c:	bf00      	nop
 801292e:	e25a      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 8012930:	78fb      	ldrb	r3, [r7, #3]
 8012932:	1c5a      	adds	r2, r3, #1
 8012934:	70fa      	strb	r2, [r7, #3]
 8012936:	461a      	mov	r2, r3
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	4413      	add	r3, r2
 801293c:	781b      	ldrb	r3, [r3, #0]
 801293e:	f003 030f 	and.w	r3, r3, #15
 8012942:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84

                if( delay == 0 )
 8012946:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801294a:	2b00      	cmp	r3, #0
 801294c:	d104      	bne.n	8012958 <ProcessMacCommands+0x47c>
                {
                    delay++;
 801294e:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8012952:	3301      	adds	r3, #1
 8012954:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8012958:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801295c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012960:	fb02 f303 	mul.w	r3, r2, r3
 8012964:	461a      	mov	r2, r3
 8012966:	4b68      	ldr	r3, [pc, #416]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012968:	659a      	str	r2, [r3, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 801296a:	4b67      	ldr	r3, [pc, #412]	; (8012b08 <ProcessMacCommands+0x62c>)
 801296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801296e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8012972:	4a65      	ldr	r2, [pc, #404]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012974:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8012976:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801297a:	2200      	movs	r2, #0
 801297c:	4619      	mov	r1, r3
 801297e:	2008      	movs	r0, #8
 8012980:	f003 f952 	bl	8015c28 <LoRaMacCommandsAddCmd>
                break;
 8012984:	e22f      	b.n	8012de6 <ProcessMacCommands+0x90a>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 8012986:	78fb      	ldrb	r3, [r7, #3]
 8012988:	1c5a      	adds	r2, r3, #1
 801298a:	70fa      	strb	r2, [r7, #3]
 801298c:	461a      	mov	r2, r3
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	4413      	add	r3, r2
 8012992:	781b      	ldrb	r3, [r3, #0]
 8012994:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 8012998:	2300      	movs	r3, #0
 801299a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 801299e:	2300      	movs	r3, #0
 80129a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80129a4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129a8:	f003 0320 	and.w	r3, r3, #32
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d002      	beq.n	80129b6 <ProcessMacCommands+0x4da>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 80129b0:	2301      	movs	r3, #1
 80129b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80129b6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129ba:	f003 0310 	and.w	r3, r3, #16
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d002      	beq.n	80129c8 <ProcessMacCommands+0x4ec>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 80129c2:	2301      	movs	r3, #1
 80129c4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80129c8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 80129cc:	f003 030f 	and.w	r3, r3, #15
 80129d0:	b2db      	uxtb	r3, r3
 80129d2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80129d6:	4b4c      	ldr	r3, [pc, #304]	; (8012b08 <ProcessMacCommands+0x62c>)
 80129d8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80129dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80129e0:	4611      	mov	r1, r2
 80129e2:	4618      	mov	r0, r3
 80129e4:	f004 fffa 	bl	80179dc <RegionTxParamSetupReq>
 80129e8:	4603      	mov	r3, r0
 80129ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129ee:	d03b      	beq.n	8012a68 <ProcessMacCommands+0x58c>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80129f0:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 80129f4:	4b44      	ldr	r3, [pc, #272]	; (8012b08 <ProcessMacCommands+0x62c>)
 80129f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 80129fa:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80129fe:	4b42      	ldr	r3, [pc, #264]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a00:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8012a04:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8012a08:	461a      	mov	r2, r3
 8012a0a:	4b40      	ldr	r3, [pc, #256]	; (8012b0c <ProcessMacCommands+0x630>)
 8012a0c:	5c9b      	ldrb	r3, [r3, r2]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7ee f8ee 	bl	8000bf0 <__aeabi_ui2f>
 8012a14:	4603      	mov	r3, r0
 8012a16:	4a3c      	ldr	r2, [pc, #240]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8012a1c:	2302      	movs	r3, #2
 8012a1e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012a22:	4b39      	ldr	r3, [pc, #228]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a24:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012a28:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8012a2c:	4b36      	ldr	r3, [pc, #216]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a2e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012a32:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a36:	4611      	mov	r1, r2
 8012a38:	4618      	mov	r0, r3
 8012a3a:	f004 fed2 	bl	80177e2 <RegionGetPhyParam>
 8012a3e:	4603      	mov	r3, r0
 8012a40:	62bb      	str	r3, [r7, #40]	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a44:	b25a      	sxtb	r2, r3
 8012a46:	4b30      	ldr	r3, [pc, #192]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a48:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	bfb8      	it	lt
 8012a50:	4613      	movlt	r3, r2
 8012a52:	b25a      	sxtb	r2, r3
 8012a54:	4b2c      	ldr	r3, [pc, #176]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012a56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8012a5a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012a5e:	2200      	movs	r2, #0
 8012a60:	4619      	mov	r1, r3
 8012a62:	2009      	movs	r0, #9
 8012a64:	f003 f8e0 	bl	8015c28 <LoRaMacCommandsAddCmd>
                }
                break;
 8012a68:	bf00      	nop
 8012a6a:	e1bc      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 8012a6c:	2303      	movs	r3, #3
 8012a6e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 8012a72:	78fb      	ldrb	r3, [r7, #3]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	70fa      	strb	r2, [r7, #3]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8012a84:	78fb      	ldrb	r3, [r7, #3]
 8012a86:	1c5a      	adds	r2, r3, #1
 8012a88:	70fa      	strb	r2, [r7, #3]
 8012a8a:	461a      	mov	r2, r3
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	4413      	add	r3, r2
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8012a94:	78fb      	ldrb	r3, [r7, #3]
 8012a96:	1c5a      	adds	r2, r3, #1
 8012a98:	70fa      	strb	r2, [r7, #3]
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	021a      	lsls	r2, r3, #8
 8012aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa6:	4313      	orrs	r3, r2
 8012aa8:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8012aaa:	78fb      	ldrb	r3, [r7, #3]
 8012aac:	1c5a      	adds	r2, r3, #1
 8012aae:	70fa      	strb	r2, [r7, #3]
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	781b      	ldrb	r3, [r3, #0]
 8012ab8:	041a      	lsls	r2, r3, #16
 8012aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abc:	4313      	orrs	r3, r2
 8012abe:	627b      	str	r3, [r7, #36]	; 0x24
                dlChannelReq.Rx1Frequency *= 100;
 8012ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac2:	2264      	movs	r2, #100	; 0x64
 8012ac4:	fb02 f303 	mul.w	r3, r2, r3
 8012ac8:	627b      	str	r3, [r7, #36]	; 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8012aca:	4b0f      	ldr	r3, [pc, #60]	; (8012b08 <ProcessMacCommands+0x62c>)
 8012acc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012ad0:	f107 0220 	add.w	r2, r7, #32
 8012ad4:	4611      	mov	r1, r2
 8012ad6:	4618      	mov	r0, r3
 8012ad8:	f004 ff93 	bl	8017a02 <RegionDlChannelReq>
 8012adc:	4603      	mov	r3, r0
 8012ade:	b2db      	uxtb	r3, r3
 8012ae0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                if( ( int8_t )status >= 0 )
 8012ae4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012ae8:	b25b      	sxtb	r3, r3
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	db0a      	blt.n	8012b04 <ProcessMacCommands+0x628>
                {
                    macCmdPayload[0] = status;
 8012aee:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8012af2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8012af6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012afa:	2201      	movs	r2, #1
 8012afc:	4619      	mov	r1, r3
 8012afe:	200a      	movs	r0, #10
 8012b00:	f003 f892 	bl	8015c28 <LoRaMacCommandsAddCmd>
                }
                break;
 8012b04:	bf00      	nop
 8012b06:	e16e      	b.n	8012de6 <ProcessMacCommands+0x90a>
 8012b08:	20000e2c 	.word	0x20000e2c
 8012b0c:	0801f9a8 	.word	0x0801f9a8
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8012b10:	200a      	movs	r0, #10
 8012b12:	f003 fbc1 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f000 8164 	beq.w	8012de6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8012b1e:	210a      	movs	r1, #10
 8012b20:	2000      	movs	r0, #0
 8012b22:	f003 fb2d 	bl	8016180 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 8012b26:	f107 0318 	add.w	r3, r7, #24
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	601a      	str	r2, [r3, #0]
 8012b2e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 8012b30:	f107 0310 	add.w	r3, r7, #16
 8012b34:	2200      	movs	r2, #0
 8012b36:	601a      	str	r2, [r3, #0]
 8012b38:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 8012b3a:	f107 0308 	add.w	r3, r7, #8
 8012b3e:	2200      	movs	r2, #0
 8012b40:	601a      	str	r2, [r3, #0]
 8012b42:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8012b44:	78fb      	ldrb	r3, [r7, #3]
 8012b46:	1c5a      	adds	r2, r3, #1
 8012b48:	70fa      	strb	r2, [r7, #3]
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4413      	add	r3, r2
 8012b50:	781b      	ldrb	r3, [r3, #0]
 8012b52:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8012b54:	78fb      	ldrb	r3, [r7, #3]
 8012b56:	1c5a      	adds	r2, r3, #1
 8012b58:	70fa      	strb	r2, [r7, #3]
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	687b      	ldr	r3, [r7, #4]
 8012b5e:	4413      	add	r3, r2
 8012b60:	781b      	ldrb	r3, [r3, #0]
 8012b62:	021a      	lsls	r2, r3, #8
 8012b64:	69bb      	ldr	r3, [r7, #24]
 8012b66:	4313      	orrs	r3, r2
 8012b68:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8012b6a:	78fb      	ldrb	r3, [r7, #3]
 8012b6c:	1c5a      	adds	r2, r3, #1
 8012b6e:	70fa      	strb	r2, [r7, #3]
 8012b70:	461a      	mov	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	4413      	add	r3, r2
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	041a      	lsls	r2, r3, #16
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	4313      	orrs	r3, r2
 8012b7e:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8012b80:	78fb      	ldrb	r3, [r7, #3]
 8012b82:	1c5a      	adds	r2, r3, #1
 8012b84:	70fa      	strb	r2, [r7, #3]
 8012b86:	461a      	mov	r2, r3
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	061a      	lsls	r2, r3, #24
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	4313      	orrs	r3, r2
 8012b94:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8012b96:	78fb      	ldrb	r3, [r7, #3]
 8012b98:	1c5a      	adds	r2, r3, #1
 8012b9a:	70fa      	strb	r2, [r7, #3]
 8012b9c:	461a      	mov	r2, r3
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	4413      	add	r3, r2
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	b21b      	sxth	r3, r3
 8012ba6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8012ba8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8012bac:	461a      	mov	r2, r3
 8012bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012bb2:	fb02 f303 	mul.w	r3, r2, r3
 8012bb6:	121b      	asrs	r3, r3, #8
 8012bb8:	b21b      	sxth	r3, r3
 8012bba:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 8012bbc:	f107 0310 	add.w	r3, r7, #16
 8012bc0:	f107 0218 	add.w	r2, r7, #24
 8012bc4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012bc8:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8012bcc:	693a      	ldr	r2, [r7, #16]
 8012bce:	4b8c      	ldr	r3, [pc, #560]	; (8012e00 <ProcessMacCommands+0x924>)
 8012bd0:	4413      	add	r3, r2
 8012bd2:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 8012bd4:	f107 0308 	add.w	r3, r7, #8
 8012bd8:	4618      	mov	r0, r3
 8012bda:	f00a fd4f 	bl	801d67c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8012bde:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8012be2:	4b88      	ldr	r3, [pc, #544]	; (8012e04 <ProcessMacCommands+0x928>)
 8012be4:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8012be8:	9200      	str	r2, [sp, #0]
 8012bea:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8012bee:	f107 0210 	add.w	r2, r7, #16
 8012bf2:	ca06      	ldmia	r2, {r1, r2}
 8012bf4:	f00a fcdb 	bl	801d5ae <SysTimeSub>
 8012bf8:	f107 0010 	add.w	r0, r7, #16
 8012bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012bfe:	9300      	str	r3, [sp, #0]
 8012c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c02:	f107 0208 	add.w	r2, r7, #8
 8012c06:	ca06      	ldmia	r2, {r1, r2}
 8012c08:	f00a fc98 	bl	801d53c <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 8012c0c:	f107 0310 	add.w	r3, r7, #16
 8012c10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012c14:	f00a fd04 	bl	801d620 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8012c18:	f002 febf 	bl	801599a <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8012c1c:	4b79      	ldr	r3, [pc, #484]	; (8012e04 <ProcessMacCommands+0x928>)
 8012c1e:	2201      	movs	r2, #1
 8012c20:	f883 2430 	strb.w	r2, [r3, #1072]	; 0x430
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 8012c24:	e0df      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8012c26:	200d      	movs	r0, #13
 8012c28:	f003 fb36 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	f000 80d9 	beq.w	8012de6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8012c34:	210d      	movs	r1, #13
 8012c36:	2000      	movs	r0, #0
 8012c38:	f003 faa2 	bl	8016180 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8012c3c:	4b71      	ldr	r3, [pc, #452]	; (8012e04 <ProcessMacCommands+0x928>)
 8012c3e:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c42:	2b04      	cmp	r3, #4
 8012c44:	f000 80cf 	beq.w	8012de6 <ProcessMacCommands+0x90a>
 8012c48:	4b6e      	ldr	r3, [pc, #440]	; (8012e04 <ProcessMacCommands+0x928>)
 8012c4a:	f893 3480 	ldrb.w	r3, [r3, #1152]	; 0x480
 8012c4e:	2b05      	cmp	r3, #5
 8012c50:	f000 80c9 	beq.w	8012de6 <ProcessMacCommands+0x90a>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 8012c54:	f002 fe82 	bl	801595c <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 8012c58:	e0c5      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 8012c5a:	2303      	movs	r3, #3
 8012c5c:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                uint32_t frequency = 0;
 8012c60:	2300      	movs	r3, #0
 8012c62:	67bb      	str	r3, [r7, #120]	; 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 8012c64:	78fb      	ldrb	r3, [r7, #3]
 8012c66:	1c5a      	adds	r2, r3, #1
 8012c68:	70fa      	strb	r2, [r7, #3]
 8012c6a:	461a      	mov	r2, r3
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	4413      	add	r3, r2
 8012c70:	781b      	ldrb	r3, [r3, #0]
 8012c72:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012c74:	78fb      	ldrb	r3, [r7, #3]
 8012c76:	1c5a      	adds	r2, r3, #1
 8012c78:	70fa      	strb	r2, [r7, #3]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	4413      	add	r3, r2
 8012c80:	781b      	ldrb	r3, [r3, #0]
 8012c82:	021b      	lsls	r3, r3, #8
 8012c84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c86:	4313      	orrs	r3, r2
 8012c88:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012c8a:	78fb      	ldrb	r3, [r7, #3]
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	70fa      	strb	r2, [r7, #3]
 8012c90:	461a      	mov	r2, r3
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	4413      	add	r3, r2
 8012c96:	781b      	ldrb	r3, [r3, #0]
 8012c98:	041b      	lsls	r3, r3, #16
 8012c9a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c9c:	4313      	orrs	r3, r2
 8012c9e:	67bb      	str	r3, [r7, #120]	; 0x78
                frequency *= 100;
 8012ca0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012ca2:	2264      	movs	r2, #100	; 0x64
 8012ca4:	fb02 f303 	mul.w	r3, r2, r3
 8012ca8:	67bb      	str	r3, [r7, #120]	; 0x78
                datarate = payload[macIndex++] & 0x0F;
 8012caa:	78fb      	ldrb	r3, [r7, #3]
 8012cac:	1c5a      	adds	r2, r3, #1
 8012cae:	70fa      	strb	r2, [r7, #3]
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	781b      	ldrb	r3, [r3, #0]
 8012cb8:	f003 030f 	and.w	r3, r3, #15
 8012cbc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8012cc0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012cc4:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f002 fe4e 	bl	8015968 <LoRaMacClassBPingSlotChannelReq>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
                macCmdPayload[0] = status;
 8012cd2:	f897 307c 	ldrb.w	r3, [r7, #124]	; 0x7c
 8012cd6:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8012cda:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012cde:	2201      	movs	r2, #1
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	2011      	movs	r0, #17
 8012ce4:	f002 ffa0 	bl	8015c28 <LoRaMacCommandsAddCmd>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
#endif /* LORAMAC_VERSION */
                break;
 8012ce8:	e07d      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8012cea:	200e      	movs	r0, #14
 8012cec:	f003 fad4 	bl	8016298 <LoRaMacConfirmQueueIsCmdActive>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d077      	beq.n	8012de6 <ProcessMacCommands+0x90a>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8012cf6:	210e      	movs	r1, #14
 8012cf8:	2000      	movs	r0, #0
 8012cfa:	f003 fa41 	bl	8016180 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 8012cfe:	2300      	movs	r3, #0
 8012d00:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    uint8_t beaconTimingChannel = 0;
 8012d04:	2300      	movs	r3, #0
 8012d06:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8012d0a:	78fb      	ldrb	r3, [r7, #3]
 8012d0c:	1c5a      	adds	r2, r3, #1
 8012d0e:	70fa      	strb	r2, [r7, #3]
 8012d10:	461a      	mov	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4413      	add	r3, r2
 8012d16:	781b      	ldrb	r3, [r3, #0]
 8012d18:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8012d1c:	78fb      	ldrb	r3, [r7, #3]
 8012d1e:	1c5a      	adds	r2, r3, #1
 8012d20:	70fa      	strb	r2, [r7, #3]
 8012d22:	461a      	mov	r2, r3
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	4413      	add	r3, r2
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	021b      	lsls	r3, r3, #8
 8012d2c:	b21a      	sxth	r2, r3
 8012d2e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	; 0x7e
 8012d32:	4313      	orrs	r3, r2
 8012d34:	b21b      	sxth	r3, r3
 8012d36:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
                    beaconTimingChannel = payload[macIndex++];
 8012d3a:	78fb      	ldrb	r3, [r7, #3]
 8012d3c:	1c5a      	adds	r2, r3, #1
 8012d3e:	70fa      	strb	r2, [r7, #3]
 8012d40:	461a      	mov	r2, r3
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	4413      	add	r3, r2
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8012d4c:	4b2e      	ldr	r3, [pc, #184]	; (8012e08 <ProcessMacCommands+0x92c>)
 8012d4e:	681a      	ldr	r2, [r3, #0]
 8012d50:	f897 107d 	ldrb.w	r1, [r7, #125]	; 0x7d
 8012d54:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f002 fe11 	bl	8015980 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 8012d5e:	e042      	b.n	8012de6 <ProcessMacCommands+0x90a>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 8012d60:	2300      	movs	r3, #0
 8012d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 8012d66:	78fb      	ldrb	r3, [r7, #3]
 8012d68:	1c5a      	adds	r2, r3, #1
 8012d6a:	70fa      	strb	r2, [r7, #3]
 8012d6c:	461a      	mov	r2, r3
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	4413      	add	r3, r2
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8012d78:	78fb      	ldrb	r3, [r7, #3]
 8012d7a:	1c5a      	adds	r2, r3, #1
 8012d7c:	70fa      	strb	r2, [r7, #3]
 8012d7e:	461a      	mov	r2, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	4413      	add	r3, r2
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	021b      	lsls	r3, r3, #8
 8012d88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012d8c:	4313      	orrs	r3, r2
 8012d8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8012d92:	78fb      	ldrb	r3, [r7, #3]
 8012d94:	1c5a      	adds	r2, r3, #1
 8012d96:	70fa      	strb	r2, [r7, #3]
 8012d98:	461a      	mov	r2, r3
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	781b      	ldrb	r3, [r3, #0]
 8012da0:	041b      	lsls	r3, r3, #16
 8012da2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012da6:	4313      	orrs	r3, r2
 8012da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    frequency *= 100;
 8012dac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012db0:	2264      	movs	r2, #100	; 0x64
 8012db2:	fb02 f303 	mul.w	r3, r2, r3
 8012db6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8012dba:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012dbe:	f002 fdf2 	bl	80159a6 <LoRaMacClassBBeaconFreqReq>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d003      	beq.n	8012dd0 <ProcessMacCommands+0x8f4>
                    {
                        macCmdPayload[0] = 1;
 8012dc8:	2301      	movs	r3, #1
 8012dca:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8012dce:	e002      	b.n	8012dd6 <ProcessMacCommands+0x8fa>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8012dd6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012dda:	2201      	movs	r2, #1
 8012ddc:	4619      	mov	r1, r3
 8012dde:	2013      	movs	r0, #19
 8012de0:	f002 ff22 	bl	8015c28 <LoRaMacCommandsAddCmd>
                }
                break;
 8012de4:	bf00      	nop
    while( macIndex < commandsSize )
 8012de6:	78fa      	ldrb	r2, [r7, #3]
 8012de8:	78bb      	ldrb	r3, [r7, #2]
 8012dea:	429a      	cmp	r2, r3
 8012dec:	f4ff ab8e 	bcc.w	801250c <ProcessMacCommands+0x30>
 8012df0:	e002      	b.n	8012df8 <ProcessMacCommands+0x91c>
            return;
 8012df2:	bf00      	nop
 8012df4:	e000      	b.n	8012df8 <ProcessMacCommands+0x91c>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 8012df6:	bf00      	nop
        }
    }
}
 8012df8:	378c      	adds	r7, #140	; 0x8c
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd90      	pop	{r4, r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	12d53d80 	.word	0x12d53d80
 8012e04:	20000924 	.word	0x20000924
 8012e08:	2000159c 	.word	0x2000159c

08012e0c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b08e      	sub	sp, #56	; 0x38
 8012e10:	af02      	add	r7, sp, #8
 8012e12:	60f8      	str	r0, [r7, #12]
 8012e14:	607a      	str	r2, [r7, #4]
 8012e16:	461a      	mov	r2, r3
 8012e18:	460b      	mov	r3, r1
 8012e1a:	72fb      	strb	r3, [r7, #11]
 8012e1c:	4613      	mov	r3, r2
 8012e1e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8012e20:	2303      	movs	r3, #3
 8012e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012e26:	4b65      	ldr	r3, [pc, #404]	; (8012fbc <Send+0x1b0>)
 8012e28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8012e2c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 8012e30:	4b62      	ldr	r3, [pc, #392]	; (8012fbc <Send+0x1b0>)
 8012e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012e36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012e3a:	4b60      	ldr	r3, [pc, #384]	; (8012fbc <Send+0x1b0>)
 8012e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e3e:	62bb      	str	r3, [r7, #40]	; 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8012e40:	4b5e      	ldr	r3, [pc, #376]	; (8012fbc <Send+0x1b0>)
 8012e42:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d101      	bne.n	8012e4e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 8012e4a:	2307      	movs	r3, #7
 8012e4c:	e0b1      	b.n	8012fb2 <Send+0x1a6>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 8012e4e:	4b5b      	ldr	r3, [pc, #364]	; (8012fbc <Send+0x1b0>)
 8012e50:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d102      	bne.n	8012e5e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 8012e58:	4b58      	ldr	r3, [pc, #352]	; (8012fbc <Send+0x1b0>)
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    fCtrl.Value = 0;
 8012e5e:	2300      	movs	r3, #0
 8012e60:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 8012e64:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e68:	f36f 0303 	bfc	r3, #0, #4
 8012e6c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 8012e70:	4b52      	ldr	r3, [pc, #328]	; (8012fbc <Send+0x1b0>)
 8012e72:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 8012e76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e7a:	f362 13c7 	bfi	r3, r2, #7, #1
 8012e7e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8012e82:	4b4e      	ldr	r3, [pc, #312]	; (8012fbc <Send+0x1b0>)
 8012e84:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d106      	bne.n	8012e9a <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 8012e8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e90:	f043 0310 	orr.w	r3, r3, #16
 8012e94:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012e98:	e005      	b.n	8012ea6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 8012e9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012e9e:	f36f 1304 	bfc	r3, #4, #1
 8012ea2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 8012ea6:	4b45      	ldr	r3, [pc, #276]	; (8012fbc <Send+0x1b0>)
 8012ea8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d005      	beq.n	8012ebc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 8012eb0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012eb4:	f043 0320 	orr.w	r3, r3, #32
 8012eb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 8012ebc:	2301      	movs	r3, #1
 8012ebe:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 8012ec0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012ec4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	bf14      	ite	ne
 8012ece:	2301      	movne	r3, #1
 8012ed0:	2300      	moveq	r3, #0
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8012ed6:	4b39      	ldr	r3, [pc, #228]	; (8012fbc <Send+0x1b0>)
 8012ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eda:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8012edc:	4b37      	ldr	r3, [pc, #220]	; (8012fbc <Send+0x1b0>)
 8012ede:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8012ee2:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8012ee4:	4b35      	ldr	r3, [pc, #212]	; (8012fbc <Send+0x1b0>)
 8012ee6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8012eea:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8012eec:	4b33      	ldr	r3, [pc, #204]	; (8012fbc <Send+0x1b0>)
 8012eee:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8012ef2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8012ef6:	4b31      	ldr	r3, [pc, #196]	; (8012fbc <Send+0x1b0>)
 8012ef8:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8012efc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8012f00:	4b2e      	ldr	r3, [pc, #184]	; (8012fbc <Send+0x1b0>)
 8012f02:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8012f06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 8012f0a:	4b2c      	ldr	r3, [pc, #176]	; (8012fbc <Send+0x1b0>)
 8012f0c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 8012f14:	4b29      	ldr	r3, [pc, #164]	; (8012fbc <Send+0x1b0>)
 8012f16:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8012f1a:	617b      	str	r3, [r7, #20]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 8012f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012f20:	f107 0014 	add.w	r0, r7, #20
 8012f24:	4a26      	ldr	r2, [pc, #152]	; (8012fc0 <Send+0x1b4>)
 8012f26:	4927      	ldr	r1, [pc, #156]	; (8012fc4 <Send+0x1b8>)
 8012f28:	f002 fc58 	bl	80157dc <LoRaMacAdrCalcNext>
 8012f2c:	4603      	mov	r3, r0
 8012f2e:	461a      	mov	r2, r3
 8012f30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012f34:	f362 1386 	bfi	r3, r2, #6, #1
 8012f38:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 8012f3c:	7afa      	ldrb	r2, [r7, #11]
 8012f3e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8012f42:	893b      	ldrh	r3, [r7, #8]
 8012f44:	9300      	str	r3, [sp, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	68f8      	ldr	r0, [r7, #12]
 8012f4a:	f000 fc5d 	bl	8013808 <PrepareFrame>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 8012f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d003      	beq.n	8012f64 <Send+0x158>
 8012f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f60:	2b0a      	cmp	r3, #10
 8012f62:	d107      	bne.n	8012f74 <Send+0x168>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 8012f64:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 f961 	bl	8013230 <ScheduleTx>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 8012f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d00a      	beq.n	8012f92 <Send+0x186>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 8012f7c:	4a0f      	ldr	r2, [pc, #60]	; (8012fbc <Send+0x1b0>)
 8012f7e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8012f82:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 8012f86:	4a0d      	ldr	r2, [pc, #52]	; (8012fbc <Send+0x1b0>)
 8012f88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012f8c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
 8012f90:	e00d      	b.n	8012fae <Send+0x1a2>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 8012f92:	4b0a      	ldr	r3, [pc, #40]	; (8012fbc <Send+0x1b0>)
 8012f94:	2200      	movs	r2, #0
 8012f96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 8012f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f9c:	4a07      	ldr	r2, [pc, #28]	; (8012fbc <Send+0x1b0>)
 8012f9e:	6293      	str	r3, [r2, #40]	; 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 8012fa0:	f002 fee8 	bl	8015d74 <LoRaMacCommandsRemoveNoneStickyCmds>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d001      	beq.n	8012fae <Send+0x1a2>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012faa:	2313      	movs	r3, #19
 8012fac:	e001      	b.n	8012fb2 <Send+0x1a6>
        }
    }
    return status;
 8012fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3730      	adds	r7, #48	; 0x30
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	bd80      	pop	{r7, pc}
 8012fba:	bf00      	nop
 8012fbc:	20000e2c 	.word	0x20000e2c
 8012fc0:	20000e64 	.word	0x20000e64
 8012fc4:	20000e65 	.word	0x20000e65

08012fc8 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 8012fc8:	b580      	push	{r7, lr}
 8012fca:	b084      	sub	sp, #16
 8012fcc:	af00      	add	r7, sp, #0
 8012fce:	4603      	mov	r3, r0
 8012fd0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 8012fda:	2301      	movs	r3, #1
 8012fdc:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	2bff      	cmp	r3, #255	; 0xff
 8012fe2:	d11f      	bne.n	8013024 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 8012fe4:	2000      	movs	r0, #0
 8012fe6:	f7ff f941 	bl	801226c <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8012fea:	4b15      	ldr	r3, [pc, #84]	; (8013040 <SendReJoinReq+0x78>)
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8012ff2:	4b13      	ldr	r3, [pc, #76]	; (8013040 <SendReJoinReq+0x78>)
 8012ff4:	4a13      	ldr	r2, [pc, #76]	; (8013044 <SendReJoinReq+0x7c>)
 8012ff6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8012ffa:	4b11      	ldr	r3, [pc, #68]	; (8013040 <SendReJoinReq+0x78>)
 8012ffc:	22ff      	movs	r2, #255	; 0xff
 8012ffe:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 8013002:	7b3b      	ldrb	r3, [r7, #12]
 8013004:	f36f 1347 	bfc	r3, #5, #3
 8013008:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 801300a:	7b3a      	ldrb	r2, [r7, #12]
 801300c:	4b0c      	ldr	r3, [pc, #48]	; (8013040 <SendReJoinReq+0x78>)
 801300e:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 8013012:	480d      	ldr	r0, [pc, #52]	; (8013048 <SendReJoinReq+0x80>)
 8013014:	f7fc fb1c 	bl	800f650 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 8013018:	480c      	ldr	r0, [pc, #48]	; (801304c <SendReJoinReq+0x84>)
 801301a:	f7fc fae9 	bl	800f5f0 <SecureElementGetDevEui>

            allowDelayedTx = false;
 801301e:	2300      	movs	r3, #0
 8013020:	73fb      	strb	r3, [r7, #15]

            break;
 8013022:	e002      	b.n	801302a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013024:	2302      	movs	r3, #2
 8013026:	73bb      	strb	r3, [r7, #14]
            break;
 8013028:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 801302a:	7bfb      	ldrb	r3, [r7, #15]
 801302c:	4618      	mov	r0, r3
 801302e:	f000 f8ff 	bl	8013230 <ScheduleTx>
 8013032:	4603      	mov	r3, r0
 8013034:	73bb      	strb	r3, [r7, #14]
    return status;
 8013036:	7bbb      	ldrb	r3, [r7, #14]
}
 8013038:	4618      	mov	r0, r3
 801303a:	3710      	adds	r7, #16
 801303c:	46bd      	mov	sp, r7
 801303e:	bd80      	pop	{r7, pc}
 8013040:	20000924 	.word	0x20000924
 8013044:	20000926 	.word	0x20000926
 8013048:	20000a32 	.word	0x20000a32
 801304c:	20000a3a 	.word	0x20000a3a

08013050 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 8013050:	b580      	push	{r7, lr}
 8013052:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8013054:	f002 fc31 	bl	80158ba <LoRaMacClassBIsBeaconExpected>
 8013058:	4603      	mov	r3, r0
 801305a:	2b00      	cmp	r3, #0
 801305c:	d001      	beq.n	8013062 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 801305e:	230e      	movs	r3, #14
 8013060:	e013      	b.n	801308a <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013062:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <CheckForClassBCollision+0x40>)
 8013064:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013068:	2b01      	cmp	r3, #1
 801306a:	d10d      	bne.n	8013088 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 801306c:	f002 fc2c 	bl	80158c8 <LoRaMacClassBIsPingExpected>
 8013070:	4603      	mov	r3, r0
 8013072:	2b00      	cmp	r3, #0
 8013074:	d001      	beq.n	801307a <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013076:	230f      	movs	r3, #15
 8013078:	e007      	b.n	801308a <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 801307a:	f002 fc2c 	bl	80158d6 <LoRaMacClassBIsMulticastExpected>
 801307e:	4603      	mov	r3, r0
 8013080:	2b00      	cmp	r3, #0
 8013082:	d001      	beq.n	8013088 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8013084:	230f      	movs	r3, #15
 8013086:	e000      	b.n	801308a <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	bd80      	pop	{r7, pc}
 801308e:	bf00      	nop
 8013090:	20000e2c 	.word	0x20000e2c

08013094 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 8013094:	b590      	push	{r4, r7, lr}
 8013096:	b083      	sub	sp, #12
 8013098:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 801309a:	4b2d      	ldr	r3, [pc, #180]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 801309c:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130a0:	4b2b      	ldr	r3, [pc, #172]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130a2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80130a6:	4b2a      	ldr	r3, [pc, #168]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130a8:	f893 107d 	ldrb.w	r1, [r3, #125]	; 0x7d
 80130ac:	4b28      	ldr	r3, [pc, #160]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130ae:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 80130b2:	4b27      	ldr	r3, [pc, #156]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130b4:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 80130b8:	b25b      	sxtb	r3, r3
 80130ba:	f004 fcf9 	bl	8017ab0 <RegionApplyDrOffset>
 80130be:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130c0:	b259      	sxtb	r1, r3
 80130c2:	4b23      	ldr	r3, [pc, #140]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130c4:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130c8:	4b21      	ldr	r3, [pc, #132]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130cc:	4821      	ldr	r0, [pc, #132]	; (8013154 <ComputeRxWindowParameters+0xc0>)
 80130ce:	9000      	str	r0, [sp, #0]
 80130d0:	4620      	mov	r0, r4
 80130d2:	f004 fbfd 	bl	80178d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130d6:	4b1e      	ldr	r3, [pc, #120]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130d8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 80130dc:	4b1c      	ldr	r3, [pc, #112]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130de:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80130e2:	b259      	sxtb	r1, r3
 80130e4:	4b1a      	ldr	r3, [pc, #104]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130e6:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80130ea:	4b19      	ldr	r3, [pc, #100]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130ee:	4c1a      	ldr	r4, [pc, #104]	; (8013158 <ComputeRxWindowParameters+0xc4>)
 80130f0:	9400      	str	r4, [sp, #0]
 80130f2:	f004 fbed 	bl	80178d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80130f6:	4b16      	ldr	r3, [pc, #88]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 80130f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80130fa:	4a18      	ldr	r2, [pc, #96]	; (801315c <ComputeRxWindowParameters+0xc8>)
 80130fc:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 8013100:	4413      	add	r3, r2
 8013102:	4a16      	ldr	r2, [pc, #88]	; (801315c <ComputeRxWindowParameters+0xc8>)
 8013104:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013108:	4b11      	ldr	r3, [pc, #68]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 801310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801310c:	4a13      	ldr	r2, [pc, #76]	; (801315c <ComputeRxWindowParameters+0xc8>)
 801310e:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013112:	4413      	add	r3, r2
 8013114:	4a11      	ldr	r2, [pc, #68]	; (801315c <ComputeRxWindowParameters+0xc8>)
 8013116:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 801311a:	4b10      	ldr	r3, [pc, #64]	; (801315c <ComputeRxWindowParameters+0xc8>)
 801311c:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 8013120:	2b04      	cmp	r3, #4
 8013122:	d011      	beq.n	8013148 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8013124:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 8013126:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8013128:	4a0c      	ldr	r2, [pc, #48]	; (801315c <ComputeRxWindowParameters+0xc8>)
 801312a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	; 0x3c4
 801312e:	4413      	add	r3, r2
 8013130:	4a0a      	ldr	r2, [pc, #40]	; (801315c <ComputeRxWindowParameters+0xc8>)
 8013132:	f8c2 33b0 	str.w	r3, [r2, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8013136:	4b06      	ldr	r3, [pc, #24]	; (8013150 <ComputeRxWindowParameters+0xbc>)
 8013138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801313a:	4a08      	ldr	r2, [pc, #32]	; (801315c <ComputeRxWindowParameters+0xc8>)
 801313c:	f8d2 23d8 	ldr.w	r2, [r2, #984]	; 0x3d8
 8013140:	4413      	add	r3, r2
 8013142:	4a06      	ldr	r2, [pc, #24]	; (801315c <ComputeRxWindowParameters+0xc8>)
 8013144:	f8c2 33b4 	str.w	r3, [r2, #948]	; 0x3b4
    }
}
 8013148:	bf00      	nop
 801314a:	3704      	adds	r7, #4
 801314c:	46bd      	mov	sp, r7
 801314e:	bd90      	pop	{r4, r7, pc}
 8013150:	20000e2c 	.word	0x20000e2c
 8013154:	20000cdc 	.word	0x20000cdc
 8013158:	20000cf0 	.word	0x20000cf0
 801315c:	20000924 	.word	0x20000924

08013160 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 8013166:	2300      	movs	r3, #0
 8013168:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 801316a:	4b13      	ldr	r3, [pc, #76]	; (80131b8 <VerifyTxFrame+0x58>)
 801316c:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8013170:	2b00      	cmp	r3, #0
 8013172:	d01b      	beq.n	80131ac <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8013174:	1d3b      	adds	r3, r7, #4
 8013176:	4618      	mov	r0, r3
 8013178:	f002 fe4c 	bl	8015e14 <LoRaMacCommandsGetSizeSerializedCmds>
 801317c:	4603      	mov	r3, r0
 801317e:	2b00      	cmp	r3, #0
 8013180:	d001      	beq.n	8013186 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8013182:	2313      	movs	r3, #19
 8013184:	e013      	b.n	80131ae <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8013186:	4b0d      	ldr	r3, [pc, #52]	; (80131bc <VerifyTxFrame+0x5c>)
 8013188:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801318c:	4a0a      	ldr	r2, [pc, #40]	; (80131b8 <VerifyTxFrame+0x58>)
 801318e:	f992 1039 	ldrsb.w	r1, [r2, #57]	; 0x39
 8013192:	687a      	ldr	r2, [r7, #4]
 8013194:	b2d2      	uxtb	r2, r2
 8013196:	4618      	mov	r0, r3
 8013198:	f7ff f978 	bl	801248c <ValidatePayloadLength>
 801319c:	4603      	mov	r3, r0
 801319e:	f083 0301 	eor.w	r3, r3, #1
 80131a2:	b2db      	uxtb	r3, r3
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d001      	beq.n	80131ac <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 80131a8:	2308      	movs	r3, #8
 80131aa:	e000      	b.n	80131ae <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 80131ac:	2300      	movs	r3, #0
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	20000e2c 	.word	0x20000e2c
 80131bc:	20000924 	.word	0x20000924

080131c0 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b082      	sub	sp, #8
 80131c4:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <SerializeTxFrame+0x68>)
 80131c8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d002      	beq.n	80131d6 <SerializeTxFrame+0x16>
 80131d0:	2b04      	cmp	r3, #4
 80131d2:	d011      	beq.n	80131f8 <SerializeTxFrame+0x38>
 80131d4:	e021      	b.n	801321a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80131d6:	4815      	ldr	r0, [pc, #84]	; (801322c <SerializeTxFrame+0x6c>)
 80131d8:	f004 f97a 	bl	80174d0 <LoRaMacSerializerJoinRequest>
 80131dc:	4603      	mov	r3, r0
 80131de:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 80131e0:	79fb      	ldrb	r3, [r7, #7]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80131e6:	2311      	movs	r3, #17
 80131e8:	e01a      	b.n	8013220 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80131ea:	4b0f      	ldr	r3, [pc, #60]	; (8013228 <SerializeTxFrame+0x68>)
 80131ec:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80131f0:	b29a      	uxth	r2, r3
 80131f2:	4b0d      	ldr	r3, [pc, #52]	; (8013228 <SerializeTxFrame+0x68>)
 80131f4:	801a      	strh	r2, [r3, #0]
            break;
 80131f6:	e012      	b.n	801321e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 80131f8:	480c      	ldr	r0, [pc, #48]	; (801322c <SerializeTxFrame+0x6c>)
 80131fa:	f004 f9eb 	bl	80175d4 <LoRaMacSerializerData>
 80131fe:	4603      	mov	r3, r0
 8013200:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8013202:	79fb      	ldrb	r3, [r7, #7]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d001      	beq.n	801320c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8013208:	2311      	movs	r3, #17
 801320a:	e009      	b.n	8013220 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 801320c:	4b06      	ldr	r3, [pc, #24]	; (8013228 <SerializeTxFrame+0x68>)
 801320e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013212:	b29a      	uxth	r2, r3
 8013214:	4b04      	ldr	r3, [pc, #16]	; (8013228 <SerializeTxFrame+0x68>)
 8013216:	801a      	strh	r2, [r3, #0]
            break;
 8013218:	e001      	b.n	801321e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 801321a:	2303      	movs	r3, #3
 801321c:	e000      	b.n	8013220 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 801321e:	2300      	movs	r3, #0
}
 8013220:	4618      	mov	r0, r3
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	20000924 	.word	0x20000924
 801322c:	20000a2c 	.word	0x20000a2c

08013230 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b090      	sub	sp, #64	; 0x40
 8013234:	af02      	add	r7, sp, #8
 8013236:	4603      	mov	r3, r0
 8013238:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 801323a:	2303      	movs	r3, #3
 801323c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8013240:	f7ff ff06 	bl	8013050 <CheckForClassBCollision>
 8013244:	4603      	mov	r3, r0
 8013246:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 801324a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801324e:	2b00      	cmp	r3, #0
 8013250:	d002      	beq.n	8013258 <ScheduleTx+0x28>
    {
        return status;
 8013252:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013256:	e092      	b.n	801337e <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 8013258:	f000 f8fe 	bl	8013458 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 801325c:	f7ff ffb0 	bl	80131c0 <SerializeTxFrame>
 8013260:	4603      	mov	r3, r0
 8013262:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013266:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801326a:	2b00      	cmp	r3, #0
 801326c:	d002      	beq.n	8013274 <ScheduleTx+0x44>
    {
        return status;
 801326e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013272:	e084      	b.n	801337e <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8013274:	4b44      	ldr	r3, [pc, #272]	; (8013388 <ScheduleTx+0x158>)
 8013276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013278:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801327a:	4b43      	ldr	r3, [pc, #268]	; (8013388 <ScheduleTx+0x158>)
 801327c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013280:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8013282:	4b41      	ldr	r3, [pc, #260]	; (8013388 <ScheduleTx+0x158>)
 8013284:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8013288:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 801328a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801328e:	4618      	mov	r0, r3
 8013290:	f00a fa2c 	bl	801d6ec <SysTimeGetMcuTime>
 8013294:	4638      	mov	r0, r7
 8013296:	4b3c      	ldr	r3, [pc, #240]	; (8013388 <ScheduleTx+0x158>)
 8013298:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 801329c:	9200      	str	r2, [sp, #0]
 801329e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80132a2:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80132a6:	ca06      	ldmia	r2, {r1, r2}
 80132a8:	f00a f981 	bl	801d5ae <SysTimeSub>
 80132ac:	f107 0320 	add.w	r3, r7, #32
 80132b0:	463a      	mov	r2, r7
 80132b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80132b6:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 80132ba:	4b33      	ldr	r3, [pc, #204]	; (8013388 <ScheduleTx+0x158>)
 80132bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132be:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 80132c0:	2300      	movs	r3, #0
 80132c2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    nextChan.Joined = true;
 80132c6:	2301      	movs	r3, #1
 80132c8:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80132ca:	4b30      	ldr	r3, [pc, #192]	; (801338c <ScheduleTx+0x15c>)
 80132cc:	881b      	ldrh	r3, [r3, #0]
 80132ce:	857b      	strh	r3, [r7, #42]	; 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80132d0:	4b2d      	ldr	r3, [pc, #180]	; (8013388 <ScheduleTx+0x158>)
 80132d2:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d104      	bne.n	80132e4 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80132da:	2301      	movs	r3, #1
 80132dc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
        nextChan.Joined = false;
 80132e0:	2300      	movs	r3, #0
 80132e2:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80132e4:	4b28      	ldr	r3, [pc, #160]	; (8013388 <ScheduleTx+0x158>)
 80132e6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80132ea:	f107 0114 	add.w	r1, r7, #20
 80132ee:	4b28      	ldr	r3, [pc, #160]	; (8013390 <ScheduleTx+0x160>)
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	4b28      	ldr	r3, [pc, #160]	; (8013394 <ScheduleTx+0x164>)
 80132f4:	4a28      	ldr	r2, [pc, #160]	; (8013398 <ScheduleTx+0x168>)
 80132f6:	f004 fbb1 	bl	8017a5c <RegionNextChannel>
 80132fa:	4603      	mov	r3, r0
 80132fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if( status != LORAMAC_STATUS_OK )
 8013300:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013304:	2b00      	cmp	r3, #0
 8013306:	d025      	beq.n	8013354 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 8013308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801330c:	2b0b      	cmp	r3, #11
 801330e:	d11e      	bne.n	801334e <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 8013310:	4b1e      	ldr	r3, [pc, #120]	; (801338c <ScheduleTx+0x15c>)
 8013312:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013316:	2b00      	cmp	r3, #0
 8013318:	d01c      	beq.n	8013354 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 801331a:	7bfb      	ldrb	r3, [r7, #15]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d013      	beq.n	8013348 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8013320:	4b1a      	ldr	r3, [pc, #104]	; (801338c <ScheduleTx+0x15c>)
 8013322:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013326:	f043 0320 	orr.w	r3, r3, #32
 801332a:	4a18      	ldr	r2, [pc, #96]	; (801338c <ScheduleTx+0x15c>)
 801332c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8013330:	4b16      	ldr	r3, [pc, #88]	; (801338c <ScheduleTx+0x15c>)
 8013332:	f8d3 3484 	ldr.w	r3, [r3, #1156]	; 0x484
 8013336:	4619      	mov	r1, r3
 8013338:	4818      	ldr	r0, [pc, #96]	; (801339c <ScheduleTx+0x16c>)
 801333a:	f00a ff77 	bl	801e22c <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 801333e:	4817      	ldr	r0, [pc, #92]	; (801339c <ScheduleTx+0x16c>)
 8013340:	f00a fe96 	bl	801e070 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 8013344:	2300      	movs	r3, #0
 8013346:	e01a      	b.n	801337e <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 8013348:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801334c:	e017      	b.n	801337e <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 801334e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013352:	e014      	b.n	801337e <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8013354:	f7ff fe9e 	bl	8013094 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 8013358:	f7ff ff02 	bl	8013160 <VerifyTxFrame>
 801335c:	4603      	mov	r3, r0
 801335e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if( status != LORAMAC_STATUS_OK )
 8013362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013366:	2b00      	cmp	r3, #0
 8013368:	d002      	beq.n	8013370 <ScheduleTx+0x140>
    {
        return status;
 801336a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801336e:	e006      	b.n	801337e <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8013370:	4b06      	ldr	r3, [pc, #24]	; (801338c <ScheduleTx+0x15c>)
 8013372:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013376:	4618      	mov	r0, r3
 8013378:	f000 fb62 	bl	8013a40 <SendFrameOnChannel>
 801337c:	4603      	mov	r3, r0
}
 801337e:	4618      	mov	r0, r3
 8013380:	3738      	adds	r7, #56	; 0x38
 8013382:	46bd      	mov	sp, r7
 8013384:	bd80      	pop	{r7, pc}
 8013386:	bf00      	nop
 8013388:	20000e2c 	.word	0x20000e2c
 801338c:	20000924 	.word	0x20000924
 8013390:	20000e5c 	.word	0x20000e5c
 8013394:	20000da8 	.word	0x20000da8
 8013398:	20000d35 	.word	0x20000d35
 801339c:	20000c8c 	.word	0x20000c8c

080133a0 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b084      	sub	sp, #16
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	4603      	mov	r3, r0
 80133a8:	460a      	mov	r2, r1
 80133aa:	71fb      	strb	r3, [r7, #7]
 80133ac:	4613      	mov	r3, r2
 80133ae:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 80133b0:	2313      	movs	r3, #19
 80133b2:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 80133b8:	4b25      	ldr	r3, [pc, #148]	; (8013450 <SecureFrame+0xb0>)
 80133ba:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d002      	beq.n	80133c8 <SecureFrame+0x28>
 80133c2:	2b04      	cmp	r3, #4
 80133c4:	d011      	beq.n	80133ea <SecureFrame+0x4a>
 80133c6:	e03b      	b.n	8013440 <SecureFrame+0xa0>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80133c8:	4822      	ldr	r0, [pc, #136]	; (8013454 <SecureFrame+0xb4>)
 80133ca:	f003 fc47 	bl	8016c5c <LoRaMacCryptoPrepareJoinRequest>
 80133ce:	4603      	mov	r3, r0
 80133d0:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80133d2:	7bfb      	ldrb	r3, [r7, #15]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d001      	beq.n	80133dc <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80133d8:	2311      	movs	r3, #17
 80133da:	e034      	b.n	8013446 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80133dc:	4b1c      	ldr	r3, [pc, #112]	; (8013450 <SecureFrame+0xb0>)
 80133de:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80133e2:	b29a      	uxth	r2, r3
 80133e4:	4b1a      	ldr	r3, [pc, #104]	; (8013450 <SecureFrame+0xb0>)
 80133e6:	801a      	strh	r2, [r3, #0]
            break;
 80133e8:	e02c      	b.n	8013444 <SecureFrame+0xa4>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80133ea:	f107 0308 	add.w	r3, r7, #8
 80133ee:	4618      	mov	r0, r3
 80133f0:	f003 fb44 	bl	8016a7c <LoRaMacCryptoGetFCntUp>
 80133f4:	4603      	mov	r3, r0
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d001      	beq.n	80133fe <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80133fa:	2312      	movs	r3, #18
 80133fc:	e023      	b.n	8013446 <SecureFrame+0xa6>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 80133fe:	4b14      	ldr	r3, [pc, #80]	; (8013450 <SecureFrame+0xb0>)
 8013400:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013404:	2b00      	cmp	r3, #0
 8013406:	d104      	bne.n	8013412 <SecureFrame+0x72>
 8013408:	4b11      	ldr	r3, [pc, #68]	; (8013450 <SecureFrame+0xb0>)
 801340a:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 801340e:	2b01      	cmp	r3, #1
 8013410:	d902      	bls.n	8013418 <SecureFrame+0x78>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 8013412:	68bb      	ldr	r3, [r7, #8]
 8013414:	3b01      	subs	r3, #1
 8013416:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8013418:	68b8      	ldr	r0, [r7, #8]
 801341a:	79ba      	ldrb	r2, [r7, #6]
 801341c:	79f9      	ldrb	r1, [r7, #7]
 801341e:	4b0d      	ldr	r3, [pc, #52]	; (8013454 <SecureFrame+0xb4>)
 8013420:	f003 fd4a 	bl	8016eb8 <LoRaMacCryptoSecureMessage>
 8013424:	4603      	mov	r3, r0
 8013426:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8013428:	7bfb      	ldrb	r3, [r7, #15]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d001      	beq.n	8013432 <SecureFrame+0x92>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 801342e:	2311      	movs	r3, #17
 8013430:	e009      	b.n	8013446 <SecureFrame+0xa6>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8013432:	4b07      	ldr	r3, [pc, #28]	; (8013450 <SecureFrame+0xb0>)
 8013434:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8013438:	b29a      	uxth	r2, r3
 801343a:	4b05      	ldr	r3, [pc, #20]	; (8013450 <SecureFrame+0xb0>)
 801343c:	801a      	strh	r2, [r3, #0]
            break;
 801343e:	e001      	b.n	8013444 <SecureFrame+0xa4>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8013440:	2303      	movs	r3, #3
 8013442:	e000      	b.n	8013446 <SecureFrame+0xa6>
    }
    return LORAMAC_STATUS_OK;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	3710      	adds	r7, #16
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	20000924 	.word	0x20000924
 8013454:	20000a2c 	.word	0x20000a2c

08013458 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 8013458:	b480      	push	{r7}
 801345a:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 801345c:	4b09      	ldr	r3, [pc, #36]	; (8013484 <CalculateBackOff+0x2c>)
 801345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013460:	2b00      	cmp	r3, #0
 8013462:	d10a      	bne.n	801347a <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8013464:	4b07      	ldr	r3, [pc, #28]	; (8013484 <CalculateBackOff+0x2c>)
 8013466:	f8b3 311e 	ldrh.w	r3, [r3, #286]	; 0x11e
 801346a:	3b01      	subs	r3, #1
 801346c:	4a06      	ldr	r2, [pc, #24]	; (8013488 <CalculateBackOff+0x30>)
 801346e:	f8d2 2414 	ldr.w	r2, [r2, #1044]	; 0x414
 8013472:	fb02 f303 	mul.w	r3, r2, r3
 8013476:	4a03      	ldr	r2, [pc, #12]	; (8013484 <CalculateBackOff+0x2c>)
 8013478:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 801347a:	bf00      	nop
 801347c:	46bd      	mov	sp, r7
 801347e:	bc80      	pop	{r7}
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop
 8013484:	20000e2c 	.word	0x20000e2c
 8013488:	20000924 	.word	0x20000924

0801348c <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	4603      	mov	r3, r0
 8013494:	7139      	strb	r1, [r7, #4]
 8013496:	71fb      	strb	r3, [r7, #7]
 8013498:	4613      	mov	r3, r2
 801349a:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 801349c:	79fb      	ldrb	r3, [r7, #7]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d002      	beq.n	80134a8 <RemoveMacCommands+0x1c>
 80134a2:	79fb      	ldrb	r3, [r7, #7]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d10d      	bne.n	80134c4 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 80134a8:	79bb      	ldrb	r3, [r7, #6]
 80134aa:	2b01      	cmp	r3, #1
 80134ac:	d108      	bne.n	80134c0 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 80134ae:	793b      	ldrb	r3, [r7, #4]
 80134b0:	f003 0320 	and.w	r3, r3, #32
 80134b4:	b2db      	uxtb	r3, r3
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d004      	beq.n	80134c4 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 80134ba:	f002 fc7f 	bl	8015dbc <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 80134be:	e001      	b.n	80134c4 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 80134c0:	f002 fc7c 	bl	8015dbc <LoRaMacCommandsRemoveStickyAnsCmds>
}
 80134c4:	bf00      	nop
 80134c6:	3708      	adds	r7, #8
 80134c8:	46bd      	mov	sp, r7
 80134ca:	bd80      	pop	{r7, pc}

080134cc <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 80134cc:	b5b0      	push	{r4, r5, r7, lr}
 80134ce:	b090      	sub	sp, #64	; 0x40
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	4603      	mov	r3, r0
 80134d4:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	f083 0301 	eor.w	r3, r3, #1
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	2b00      	cmp	r3, #0
 80134e0:	d003      	beq.n	80134ea <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 80134e2:	4b80      	ldr	r3, [pc, #512]	; (80136e4 <ResetMacParameters+0x218>)
 80134e4:	2200      	movs	r2, #0
 80134e6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 80134ea:	4b7e      	ldr	r3, [pc, #504]	; (80136e4 <ResetMacParameters+0x218>)
 80134ec:	2200      	movs	r2, #0
 80134ee:	629a      	str	r2, [r3, #40]	; 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 80134f0:	4b7d      	ldr	r3, [pc, #500]	; (80136e8 <ResetMacParameters+0x21c>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
 80134f8:	4b7b      	ldr	r3, [pc, #492]	; (80136e8 <ResetMacParameters+0x21c>)
 80134fa:	2201      	movs	r2, #1
 80134fc:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013500:	4b79      	ldr	r3, [pc, #484]	; (80136e8 <ResetMacParameters+0x21c>)
 8013502:	2201      	movs	r2, #1
 8013504:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetry = false;
 8013508:	4b77      	ldr	r3, [pc, #476]	; (80136e8 <ResetMacParameters+0x21c>)
 801350a:	2200      	movs	r2, #0
 801350c:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 8013510:	4b74      	ldr	r3, [pc, #464]	; (80136e4 <ResetMacParameters+0x218>)
 8013512:	2200      	movs	r2, #0
 8013514:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8013518:	4b72      	ldr	r3, [pc, #456]	; (80136e4 <ResetMacParameters+0x218>)
 801351a:	2201      	movs	r2, #1
 801351c:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8013520:	4b70      	ldr	r3, [pc, #448]	; (80136e4 <ResetMacParameters+0x218>)
 8013522:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8013526:	4b6f      	ldr	r3, [pc, #444]	; (80136e4 <ResetMacParameters+0x218>)
 8013528:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 801352c:	4b6d      	ldr	r3, [pc, #436]	; (80136e4 <ResetMacParameters+0x218>)
 801352e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8013532:	4b6c      	ldr	r3, [pc, #432]	; (80136e4 <ResetMacParameters+0x218>)
 8013534:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8013538:	4b6a      	ldr	r3, [pc, #424]	; (80136e4 <ResetMacParameters+0x218>)
 801353a:	f893 20b1 	ldrb.w	r2, [r3, #177]	; 0xb1
 801353e:	4b69      	ldr	r3, [pc, #420]	; (80136e4 <ResetMacParameters+0x218>)
 8013540:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8013544:	4b67      	ldr	r3, [pc, #412]	; (80136e4 <ResetMacParameters+0x218>)
 8013546:	4a67      	ldr	r2, [pc, #412]	; (80136e4 <ResetMacParameters+0x218>)
 8013548:	336c      	adds	r3, #108	; 0x6c
 801354a:	32b4      	adds	r2, #180	; 0xb4
 801354c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013550:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8013554:	4b63      	ldr	r3, [pc, #396]	; (80136e4 <ResetMacParameters+0x218>)
 8013556:	4a63      	ldr	r2, [pc, #396]	; (80136e4 <ResetMacParameters+0x218>)
 8013558:	3374      	adds	r3, #116	; 0x74
 801355a:	32bc      	adds	r2, #188	; 0xbc
 801355c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013560:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8013564:	4b5f      	ldr	r3, [pc, #380]	; (80136e4 <ResetMacParameters+0x218>)
 8013566:	f893 20c4 	ldrb.w	r2, [r3, #196]	; 0xc4
 801356a:	4b5e      	ldr	r3, [pc, #376]	; (80136e4 <ResetMacParameters+0x218>)
 801356c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 8013570:	4b5c      	ldr	r3, [pc, #368]	; (80136e4 <ResetMacParameters+0x218>)
 8013572:	f893 20c5 	ldrb.w	r2, [r3, #197]	; 0xc5
 8013576:	4b5b      	ldr	r3, [pc, #364]	; (80136e4 <ResetMacParameters+0x218>)
 8013578:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 801357c:	4b59      	ldr	r3, [pc, #356]	; (80136e4 <ResetMacParameters+0x218>)
 801357e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8013582:	4a58      	ldr	r2, [pc, #352]	; (80136e4 <ResetMacParameters+0x218>)
 8013584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8013588:	4b56      	ldr	r3, [pc, #344]	; (80136e4 <ResetMacParameters+0x218>)
 801358a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801358e:	4a55      	ldr	r2, [pc, #340]	; (80136e4 <ResetMacParameters+0x218>)
 8013590:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 8013594:	4b53      	ldr	r3, [pc, #332]	; (80136e4 <ResetMacParameters+0x218>)
 8013596:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 801359a:	4b52      	ldr	r3, [pc, #328]	; (80136e4 <ResetMacParameters+0x218>)
 801359c:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80135a0:	4b50      	ldr	r3, [pc, #320]	; (80136e4 <ResetMacParameters+0x218>)
 80135a2:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80135a6:	4b4f      	ldr	r3, [pc, #316]	; (80136e4 <ResetMacParameters+0x218>)
 80135a8:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

    MacCtx.NodeAckRequested = false;
 80135ac:	4b4e      	ldr	r3, [pc, #312]	; (80136e8 <ResetMacParameters+0x21c>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    Nvm.MacGroup1.SrvAckRequested = false;
 80135b4:	4b4b      	ldr	r3, [pc, #300]	; (80136e4 <ResetMacParameters+0x218>)
 80135b6:	2200      	movs	r2, #0
 80135b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
    Nvm.MacGroup2.DownlinkReceived = false;
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 80135bc:	4b49      	ldr	r3, [pc, #292]	; (80136e4 <ResetMacParameters+0x218>)
 80135be:	2200      	movs	r2, #0
 80135c0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 80135c4:	4b47      	ldr	r3, [pc, #284]	; (80136e4 <ResetMacParameters+0x218>)
 80135c6:	2200      	movs	r2, #0
 80135c8:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinType = 0;
 80135cc:	4b45      	ldr	r3, [pc, #276]	; (80136e4 <ResetMacParameters+0x218>)
 80135ce:	2200      	movs	r2, #0
 80135d0:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 80135d4:	4b43      	ldr	r3, [pc, #268]	; (80136e4 <ResetMacParameters+0x218>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 80135dc:	4b41      	ldr	r3, [pc, #260]	; (80136e4 <ResetMacParameters+0x218>)
 80135de:	2200      	movs	r2, #0
 80135e0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 80135e4:	4b3f      	ldr	r3, [pc, #252]	; (80136e4 <ResetMacParameters+0x218>)
 80135e6:	2200      	movs	r2, #0
 80135e8:	f883 2141 	strb.w	r2, [r3, #321]	; 0x141
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 80135ec:	4b3d      	ldr	r3, [pc, #244]	; (80136e4 <ResetMacParameters+0x218>)
 80135ee:	2200      	movs	r2, #0
 80135f0:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 80135f4:	4b3b      	ldr	r3, [pc, #236]	; (80136e4 <ResetMacParameters+0x218>)
 80135f6:	2200      	movs	r2, #0
 80135f8:	f883 2143 	strb.w	r2, [r3, #323]	; 0x143

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80135fc:	2301      	movs	r3, #1
 80135fe:	753b      	strb	r3, [r7, #20]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8013600:	4b3a      	ldr	r3, [pc, #232]	; (80136ec <ResetMacParameters+0x220>)
 8013602:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8013604:	4b3a      	ldr	r3, [pc, #232]	; (80136f0 <ResetMacParameters+0x224>)
 8013606:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013608:	4b36      	ldr	r3, [pc, #216]	; (80136e4 <ResetMacParameters+0x218>)
 801360a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801360e:	f107 020c 	add.w	r2, r7, #12
 8013612:	4611      	mov	r1, r2
 8013614:	4618      	mov	r0, r3
 8013616:	f004 f90d 	bl	8017834 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801361a:	4b33      	ldr	r3, [pc, #204]	; (80136e8 <ResetMacParameters+0x21c>)
 801361c:	2200      	movs	r2, #0
 801361e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8013622:	4b31      	ldr	r3, [pc, #196]	; (80136e8 <ResetMacParameters+0x21c>)
 8013624:	f893 2411 	ldrb.w	r2, [r3, #1041]	; 0x411
 8013628:	4b2f      	ldr	r3, [pc, #188]	; (80136e8 <ResetMacParameters+0x21c>)
 801362a:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 801362e:	4b2d      	ldr	r3, [pc, #180]	; (80136e4 <ResetMacParameters+0x218>)
 8013630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013632:	4a2d      	ldr	r2, [pc, #180]	; (80136e8 <ResetMacParameters+0x21c>)
 8013634:	f8c2 33d0 	str.w	r3, [r2, #976]	; 0x3d0
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8013638:	4b2a      	ldr	r3, [pc, #168]	; (80136e4 <ResetMacParameters+0x218>)
 801363a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801363e:	4b2a      	ldr	r3, [pc, #168]	; (80136e8 <ResetMacParameters+0x21c>)
 8013640:	f883 23dc 	strb.w	r2, [r3, #988]	; 0x3dc
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8013644:	4b27      	ldr	r3, [pc, #156]	; (80136e4 <ResetMacParameters+0x218>)
 8013646:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 801364a:	4b27      	ldr	r3, [pc, #156]	; (80136e8 <ResetMacParameters+0x21c>)
 801364c:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
    MacCtx.RxWindow2Config.RxContinuous = false;
 8013650:	4b25      	ldr	r3, [pc, #148]	; (80136e8 <ResetMacParameters+0x21c>)
 8013652:	2200      	movs	r2, #0
 8013654:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 8013658:	4b23      	ldr	r3, [pc, #140]	; (80136e8 <ResetMacParameters+0x21c>)
 801365a:	2201      	movs	r2, #1
 801365c:	f883 23df 	strb.w	r2, [r3, #991]	; 0x3df
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8013660:	4a21      	ldr	r2, [pc, #132]	; (80136e8 <ResetMacParameters+0x21c>)
 8013662:	4b21      	ldr	r3, [pc, #132]	; (80136e8 <ResetMacParameters+0x21c>)
 8013664:	f502 7478 	add.w	r4, r2, #992	; 0x3e0
 8013668:	f503 7573 	add.w	r5, r3, #972	; 0x3cc
 801366c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801366e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013670:	682b      	ldr	r3, [r5, #0]
 8013672:	6023      	str	r3, [r4, #0]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8013674:	4b1c      	ldr	r3, [pc, #112]	; (80136e8 <ResetMacParameters+0x21c>)
 8013676:	2201      	movs	r2, #1
 8013678:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 801367c:	4b1a      	ldr	r3, [pc, #104]	; (80136e8 <ResetMacParameters+0x21c>)
 801367e:	2202      	movs	r2, #2
 8013680:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8013684:	2300      	movs	r3, #0
 8013686:	63bb      	str	r3, [r7, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 8013688:	2300      	movs	r3, #0
 801368a:	63fb      	str	r3, [r7, #60]	; 0x3c

    if( MacCtx.MacCallbacks != NULL )
 801368c:	4b16      	ldr	r3, [pc, #88]	; (80136e8 <ResetMacParameters+0x21c>)
 801368e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013692:	2b00      	cmp	r3, #0
 8013694:	d009      	beq.n	80136aa <ResetMacParameters+0x1de>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8013696:	4b14      	ldr	r3, [pc, #80]	; (80136e8 <ResetMacParameters+0x21c>)
 8013698:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 801369c:	685b      	ldr	r3, [r3, #4]
 801369e:	63bb      	str	r3, [r7, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 80136a0:	4b11      	ldr	r3, [pc, #68]	; (80136e8 <ResetMacParameters+0x21c>)
 80136a2:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80136a6:	695b      	ldr	r3, [r3, #20]
 80136a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 80136aa:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <ResetMacParameters+0x228>)
 80136ac:	61bb      	str	r3, [r7, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 80136ae:	4b12      	ldr	r3, [pc, #72]	; (80136f8 <ResetMacParameters+0x22c>)
 80136b0:	61fb      	str	r3, [r7, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 80136b2:	4b12      	ldr	r3, [pc, #72]	; (80136fc <ResetMacParameters+0x230>)
 80136b4:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 80136b6:	4b12      	ldr	r3, [pc, #72]	; (8013700 <ResetMacParameters+0x234>)
 80136b8:	627b      	str	r3, [r7, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 80136ba:	4b12      	ldr	r3, [pc, #72]	; (8013704 <ResetMacParameters+0x238>)
 80136bc:	62bb      	str	r3, [r7, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 80136be:	4b12      	ldr	r3, [pc, #72]	; (8013708 <ResetMacParameters+0x23c>)
 80136c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 80136c2:	4b12      	ldr	r3, [pc, #72]	; (801370c <ResetMacParameters+0x240>)
 80136c4:	633b      	str	r3, [r7, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 80136c6:	4b12      	ldr	r3, [pc, #72]	; (8013710 <ResetMacParameters+0x244>)
 80136c8:	637b      	str	r3, [r7, #52]	; 0x34
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 80136ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80136ce:	f107 0318 	add.w	r3, r7, #24
 80136d2:	4a10      	ldr	r2, [pc, #64]	; (8013714 <ResetMacParameters+0x248>)
 80136d4:	4618      	mov	r0, r3
 80136d6:	f002 f899 	bl	801580c <LoRaMacClassBInit>
}
 80136da:	bf00      	nop
 80136dc:	3740      	adds	r7, #64	; 0x40
 80136de:	46bd      	mov	sp, r7
 80136e0:	bdb0      	pop	{r4, r5, r7, pc}
 80136e2:	bf00      	nop
 80136e4:	20000e2c 	.word	0x20000e2c
 80136e8:	20000924 	.word	0x20000924
 80136ec:	2000104c 	.word	0x2000104c
 80136f0:	200010e0 	.word	0x200010e0
 80136f4:	20000d80 	.word	0x20000d80
 80136f8:	20000d3c 	.word	0x20000d3c
 80136fc:	20000d6c 	.word	0x20000d6c
 8013700:	20000da5 	.word	0x20000da5
 8013704:	20000f10 	.word	0x20000f10
 8013708:	20000e74 	.word	0x20000e74
 801370c:	20000e78 	.word	0x20000e78
 8013710:	20000f14 	.word	0x20000f14
 8013714:	2000157c 	.word	0x2000157c

08013718 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b082      	sub	sp, #8
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 8013722:	6878      	ldr	r0, [r7, #4]
 8013724:	f00a fd12 	bl	801e14c <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8013728:	4b11      	ldr	r3, [pc, #68]	; (8013770 <RxWindowSetup+0x58>)
 801372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801372c:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801372e:	4b11      	ldr	r3, [pc, #68]	; (8013774 <RxWindowSetup+0x5c>)
 8013730:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013734:	4a10      	ldr	r2, [pc, #64]	; (8013778 <RxWindowSetup+0x60>)
 8013736:	6839      	ldr	r1, [r7, #0]
 8013738:	4618      	mov	r0, r3
 801373a:	f004 f8e3 	bl	8017904 <RegionRxConfig>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d010      	beq.n	8013766 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8013744:	4b0d      	ldr	r3, [pc, #52]	; (801377c <RxWindowSetup+0x64>)
 8013746:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 801374a:	4b0c      	ldr	r3, [pc, #48]	; (801377c <RxWindowSetup+0x64>)
 801374c:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 8013750:	4b07      	ldr	r3, [pc, #28]	; (8013770 <RxWindowSetup+0x58>)
 8013752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013754:	4a07      	ldr	r2, [pc, #28]	; (8013774 <RxWindowSetup+0x5c>)
 8013756:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8013758:	4610      	mov	r0, r2
 801375a:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	7cda      	ldrb	r2, [r3, #19]
 8013760:	4b06      	ldr	r3, [pc, #24]	; (801377c <RxWindowSetup+0x64>)
 8013762:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 8013766:	bf00      	nop
 8013768:	3708      	adds	r7, #8
 801376a:	46bd      	mov	sp, r7
 801376c:	bd80      	pop	{r7, pc}
 801376e:	bf00      	nop
 8013770:	0801f9f0 	.word	0x0801f9f0
 8013774:	20000e2c 	.word	0x20000e2c
 8013778:	20000d40 	.word	0x20000d40
 801377c:	20000924 	.word	0x20000924

08013780 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b083      	sub	sp, #12
 8013784:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013786:	4b1b      	ldr	r3, [pc, #108]	; (80137f4 <OpenContinuousRxCWindow+0x74>)
 8013788:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 801378c:	4b19      	ldr	r3, [pc, #100]	; (80137f4 <OpenContinuousRxCWindow+0x74>)
 801378e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8013792:	b259      	sxtb	r1, r3
 8013794:	4b17      	ldr	r3, [pc, #92]	; (80137f4 <OpenContinuousRxCWindow+0x74>)
 8013796:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 801379a:	4b16      	ldr	r3, [pc, #88]	; (80137f4 <OpenContinuousRxCWindow+0x74>)
 801379c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801379e:	4c16      	ldr	r4, [pc, #88]	; (80137f8 <OpenContinuousRxCWindow+0x78>)
 80137a0:	9400      	str	r4, [sp, #0]
 80137a2:	f004 f895 	bl	80178d0 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80137a6:	4b15      	ldr	r3, [pc, #84]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137a8:	2202      	movs	r2, #2
 80137aa:	f883 23f3 	strb.w	r2, [r3, #1011]	; 0x3f3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80137ae:	4b13      	ldr	r3, [pc, #76]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137b0:	2201      	movs	r2, #1
 80137b2:	f883 23f2 	strb.w	r2, [r3, #1010]	; 0x3f2

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80137b6:	4b0f      	ldr	r3, [pc, #60]	; (80137f4 <OpenContinuousRxCWindow+0x74>)
 80137b8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80137bc:	4a10      	ldr	r2, [pc, #64]	; (8013800 <OpenContinuousRxCWindow+0x80>)
 80137be:	490e      	ldr	r1, [pc, #56]	; (80137f8 <OpenContinuousRxCWindow+0x78>)
 80137c0:	4618      	mov	r0, r3
 80137c2:	f004 f89f 	bl	8017904 <RegionRxConfig>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d00f      	beq.n	80137ec <OpenContinuousRxCWindow+0x6c>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80137cc:	4b0b      	ldr	r3, [pc, #44]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137ce:	f893 241c 	ldrb.w	r2, [r3, #1052]	; 0x41c
 80137d2:	4b0a      	ldr	r3, [pc, #40]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137d4:	f883 245e 	strb.w	r2, [r3, #1118]	; 0x45e
        Radio.Rx( 0 ); // Continuous mode
 80137d8:	4b0a      	ldr	r3, [pc, #40]	; (8013804 <OpenContinuousRxCWindow+0x84>)
 80137da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137dc:	2000      	movs	r0, #0
 80137de:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 80137e0:	4b06      	ldr	r3, [pc, #24]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137e2:	f893 23f3 	ldrb.w	r2, [r3, #1011]	; 0x3f3
 80137e6:	4b05      	ldr	r3, [pc, #20]	; (80137fc <OpenContinuousRxCWindow+0x7c>)
 80137e8:	f883 2480 	strb.w	r2, [r3, #1152]	; 0x480
    }
}
 80137ec:	bf00      	nop
 80137ee:	3704      	adds	r7, #4
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd90      	pop	{r4, r7, pc}
 80137f4:	20000e2c 	.word	0x20000e2c
 80137f8:	20000d04 	.word	0x20000d04
 80137fc:	20000924 	.word	0x20000924
 8013800:	20000d40 	.word	0x20000d40
 8013804:	0801f9f0 	.word	0x0801f9f0

08013808 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8013808:	b580      	push	{r7, lr}
 801380a:	b088      	sub	sp, #32
 801380c:	af00      	add	r7, sp, #0
 801380e:	60f8      	str	r0, [r7, #12]
 8013810:	60b9      	str	r1, [r7, #8]
 8013812:	603b      	str	r3, [r7, #0]
 8013814:	4613      	mov	r3, r2
 8013816:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8013818:	4b82      	ldr	r3, [pc, #520]	; (8013a24 <PrepareFrame+0x21c>)
 801381a:	2200      	movs	r2, #0
 801381c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 801381e:	4b81      	ldr	r3, [pc, #516]	; (8013a24 <PrepareFrame+0x21c>)
 8013820:	2200      	movs	r2, #0
 8013822:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    uint32_t fCntUp = 0;
 8013826:	2300      	movs	r3, #0
 8013828:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 801382a:	2300      	movs	r3, #0
 801382c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 801382e:	2300      	movs	r3, #0
 8013830:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	2b00      	cmp	r3, #0
 8013836:	d101      	bne.n	801383c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 8013838:	2300      	movs	r3, #0
 801383a:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 801383c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801383e:	461a      	mov	r2, r3
 8013840:	6839      	ldr	r1, [r7, #0]
 8013842:	4879      	ldr	r0, [pc, #484]	; (8013a28 <PrepareFrame+0x220>)
 8013844:	f006 fae7 	bl	8019e16 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 8013848:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801384a:	b2da      	uxtb	r2, r3
 801384c:	4b75      	ldr	r3, [pc, #468]	; (8013a24 <PrepareFrame+0x21c>)
 801384e:	f883 2237 	strb.w	r2, [r3, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	781a      	ldrb	r2, [r3, #0]
 8013856:	4b73      	ldr	r3, [pc, #460]	; (8013a24 <PrepareFrame+0x21c>)
 8013858:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8013862:	b2db      	uxtb	r3, r3
 8013864:	2b07      	cmp	r3, #7
 8013866:	f000 80b9 	beq.w	80139dc <PrepareFrame+0x1d4>
 801386a:	2b07      	cmp	r3, #7
 801386c:	f300 80d0 	bgt.w	8013a10 <PrepareFrame+0x208>
 8013870:	2b02      	cmp	r3, #2
 8013872:	d006      	beq.n	8013882 <PrepareFrame+0x7a>
 8013874:	2b04      	cmp	r3, #4
 8013876:	f040 80cb 	bne.w	8013a10 <PrepareFrame+0x208>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 801387a:	4b6a      	ldr	r3, [pc, #424]	; (8013a24 <PrepareFrame+0x21c>)
 801387c:	2201      	movs	r2, #1
 801387e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 8013882:	4b68      	ldr	r3, [pc, #416]	; (8013a24 <PrepareFrame+0x21c>)
 8013884:	2204      	movs	r2, #4
 8013886:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 801388a:	4b66      	ldr	r3, [pc, #408]	; (8013a24 <PrepareFrame+0x21c>)
 801388c:	4a67      	ldr	r2, [pc, #412]	; (8013a2c <PrepareFrame+0x224>)
 801388e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8013892:	4b64      	ldr	r3, [pc, #400]	; (8013a24 <PrepareFrame+0x21c>)
 8013894:	22ff      	movs	r2, #255	; 0xff
 8013896:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 801389a:	68fb      	ldr	r3, [r7, #12]
 801389c:	781a      	ldrb	r2, [r3, #0]
 801389e:	4b61      	ldr	r3, [pc, #388]	; (8013a24 <PrepareFrame+0x21c>)
 80138a0:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 80138a4:	4a5f      	ldr	r2, [pc, #380]	; (8013a24 <PrepareFrame+0x21c>)
 80138a6:	79fb      	ldrb	r3, [r7, #7]
 80138a8:	f882 3128 	strb.w	r3, [r2, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 80138ac:	4b60      	ldr	r3, [pc, #384]	; (8013a30 <PrepareFrame+0x228>)
 80138ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80138b2:	4a5c      	ldr	r2, [pc, #368]	; (8013a24 <PrepareFrame+0x21c>)
 80138b4:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	781a      	ldrb	r2, [r3, #0]
 80138bc:	4b59      	ldr	r3, [pc, #356]	; (8013a24 <PrepareFrame+0x21c>)
 80138be:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 80138c2:	4b58      	ldr	r3, [pc, #352]	; (8013a24 <PrepareFrame+0x21c>)
 80138c4:	f893 2237 	ldrb.w	r2, [r3, #567]	; 0x237
 80138c8:	4b56      	ldr	r3, [pc, #344]	; (8013a24 <PrepareFrame+0x21c>)
 80138ca:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 80138ce:	4b55      	ldr	r3, [pc, #340]	; (8013a24 <PrepareFrame+0x21c>)
 80138d0:	4a55      	ldr	r2, [pc, #340]	; (8013a28 <PrepareFrame+0x220>)
 80138d2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80138d6:	f107 0318 	add.w	r3, r7, #24
 80138da:	4618      	mov	r0, r3
 80138dc:	f003 f8ce 	bl	8016a7c <LoRaMacCryptoGetFCntUp>
 80138e0:	4603      	mov	r3, r0
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d001      	beq.n	80138ea <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80138e6:	2312      	movs	r3, #18
 80138e8:	e098      	b.n	8013a1c <PrepareFrame+0x214>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 80138ea:	69bb      	ldr	r3, [r7, #24]
 80138ec:	b29a      	uxth	r2, r3
 80138ee:	4b4d      	ldr	r3, [pc, #308]	; (8013a24 <PrepareFrame+0x21c>)
 80138f0:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
 80138f4:	4b4b      	ldr	r3, [pc, #300]	; (8013a24 <PrepareFrame+0x21c>)
 80138f6:	2200      	movs	r2, #0
 80138f8:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 80138fc:	4b49      	ldr	r3, [pc, #292]	; (8013a24 <PrepareFrame+0x21c>)
 80138fe:	2200      	movs	r2, #0
 8013900:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 8013904:	69bb      	ldr	r3, [r7, #24]
 8013906:	4a47      	ldr	r2, [pc, #284]	; (8013a24 <PrepareFrame+0x21c>)
 8013908:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801390c:	f107 0314 	add.w	r3, r7, #20
 8013910:	4618      	mov	r0, r3
 8013912:	f002 fa7f 	bl	8015e14 <LoRaMacCommandsGetSizeSerializedCmds>
 8013916:	4603      	mov	r3, r0
 8013918:	2b00      	cmp	r3, #0
 801391a:	d001      	beq.n	8013920 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801391c:	2313      	movs	r3, #19
 801391e:	e07d      	b.n	8013a1c <PrepareFrame+0x214>
            }

            if( macCmdsSize > 0 )
 8013920:	697b      	ldr	r3, [r7, #20]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d076      	beq.n	8013a14 <PrepareFrame+0x20c>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 8013926:	4b42      	ldr	r3, [pc, #264]	; (8013a30 <PrepareFrame+0x228>)
 8013928:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 801392c:	4618      	mov	r0, r3
 801392e:	f7fe fd85 	bl	801243c <GetMaxAppPayloadWithoutFOptsLength>
 8013932:	4603      	mov	r3, r0
 8013934:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 8013936:	4b3b      	ldr	r3, [pc, #236]	; (8013a24 <PrepareFrame+0x21c>)
 8013938:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 801393c:	2b00      	cmp	r3, #0
 801393e:	d01d      	beq.n	801397c <PrepareFrame+0x174>
 8013940:	697b      	ldr	r3, [r7, #20]
 8013942:	2b0f      	cmp	r3, #15
 8013944:	d81a      	bhi.n	801397c <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 8013946:	f107 0314 	add.w	r3, r7, #20
 801394a:	4a3a      	ldr	r2, [pc, #232]	; (8013a34 <PrepareFrame+0x22c>)
 801394c:	4619      	mov	r1, r3
 801394e:	200f      	movs	r0, #15
 8013950:	f002 fa76 	bl	8015e40 <LoRaMacCommandsSerializeCmds>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d001      	beq.n	801395e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801395a:	2313      	movs	r3, #19
 801395c:	e05e      	b.n	8013a1c <PrepareFrame+0x214>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	f003 030f 	and.w	r3, r3, #15
 8013964:	b2d9      	uxtb	r1, r3
 8013966:	68ba      	ldr	r2, [r7, #8]
 8013968:	7813      	ldrb	r3, [r2, #0]
 801396a:	f361 0303 	bfi	r3, r1, #0, #4
 801396e:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8013970:	68bb      	ldr	r3, [r7, #8]
 8013972:	781a      	ldrb	r2, [r3, #0]
 8013974:	4b2b      	ldr	r3, [pc, #172]	; (8013a24 <PrepareFrame+0x21c>)
 8013976:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 801397a:	e04b      	b.n	8013a14 <PrepareFrame+0x20c>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 801397c:	4b29      	ldr	r3, [pc, #164]	; (8013a24 <PrepareFrame+0x21c>)
 801397e:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013982:	2b00      	cmp	r3, #0
 8013984:	d010      	beq.n	80139a8 <PrepareFrame+0x1a0>
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	2b0f      	cmp	r3, #15
 801398a:	d90d      	bls.n	80139a8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 801398c:	7ffb      	ldrb	r3, [r7, #31]
 801398e:	f107 0114 	add.w	r1, r7, #20
 8013992:	4a29      	ldr	r2, [pc, #164]	; (8013a38 <PrepareFrame+0x230>)
 8013994:	4618      	mov	r0, r3
 8013996:	f002 fa53 	bl	8015e40 <LoRaMacCommandsSerializeCmds>
 801399a:	4603      	mov	r3, r0
 801399c:	2b00      	cmp	r3, #0
 801399e:	d001      	beq.n	80139a4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139a0:	2313      	movs	r3, #19
 80139a2:	e03b      	b.n	8013a1c <PrepareFrame+0x214>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 80139a4:	230a      	movs	r3, #10
 80139a6:	e039      	b.n	8013a1c <PrepareFrame+0x214>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 80139a8:	7ffb      	ldrb	r3, [r7, #31]
 80139aa:	f107 0114 	add.w	r1, r7, #20
 80139ae:	4a22      	ldr	r2, [pc, #136]	; (8013a38 <PrepareFrame+0x230>)
 80139b0:	4618      	mov	r0, r3
 80139b2:	f002 fa45 	bl	8015e40 <LoRaMacCommandsSerializeCmds>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d001      	beq.n	80139c0 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80139bc:	2313      	movs	r3, #19
 80139be:	e02d      	b.n	8013a1c <PrepareFrame+0x214>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 80139c0:	4b18      	ldr	r3, [pc, #96]	; (8013a24 <PrepareFrame+0x21c>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 80139c8:	4b16      	ldr	r3, [pc, #88]	; (8013a24 <PrepareFrame+0x21c>)
 80139ca:	4a1b      	ldr	r2, [pc, #108]	; (8013a38 <PrepareFrame+0x230>)
 80139cc:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	b2da      	uxtb	r2, r3
 80139d4:	4b13      	ldr	r3, [pc, #76]	; (8013a24 <PrepareFrame+0x21c>)
 80139d6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
            break;
 80139da:	e01b      	b.n	8013a14 <PrepareFrame+0x20c>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d01a      	beq.n	8013a18 <PrepareFrame+0x210>
 80139e2:	4b10      	ldr	r3, [pc, #64]	; (8013a24 <PrepareFrame+0x21c>)
 80139e4:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d015      	beq.n	8013a18 <PrepareFrame+0x210>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 80139ec:	4813      	ldr	r0, [pc, #76]	; (8013a3c <PrepareFrame+0x234>)
 80139ee:	4b0d      	ldr	r3, [pc, #52]	; (8013a24 <PrepareFrame+0x21c>)
 80139f0:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 80139f4:	b29b      	uxth	r3, r3
 80139f6:	461a      	mov	r2, r3
 80139f8:	6839      	ldr	r1, [r7, #0]
 80139fa:	f006 fa0c 	bl	8019e16 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 80139fe:	4b09      	ldr	r3, [pc, #36]	; (8013a24 <PrepareFrame+0x21c>)
 8013a00:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	3301      	adds	r3, #1
 8013a08:	b29a      	uxth	r2, r3
 8013a0a:	4b06      	ldr	r3, [pc, #24]	; (8013a24 <PrepareFrame+0x21c>)
 8013a0c:	801a      	strh	r2, [r3, #0]
            }
            break;
 8013a0e:	e003      	b.n	8013a18 <PrepareFrame+0x210>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8013a10:	2302      	movs	r3, #2
 8013a12:	e003      	b.n	8013a1c <PrepareFrame+0x214>
            break;
 8013a14:	bf00      	nop
 8013a16:	e000      	b.n	8013a1a <PrepareFrame+0x212>
            break;
 8013a18:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 8013a1a:	2300      	movs	r3, #0
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3720      	adds	r7, #32
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	20000924 	.word	0x20000924
 8013a28:	20000a5c 	.word	0x20000a5c
 8013a2c:	20000926 	.word	0x20000926
 8013a30:	20000e2c 	.word	0x20000e2c
 8013a34:	20000a3c 	.word	0x20000a3c
 8013a38:	20000dac 	.word	0x20000dac
 8013a3c:	20000927 	.word	0x20000927

08013a40 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b08a      	sub	sp, #40	; 0x28
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	4603      	mov	r3, r0
 8013a48:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8013a4a:	2303      	movs	r3, #3
 8013a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 8013a50:	2300      	movs	r3, #0
 8013a52:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 8013a54:	79fb      	ldrb	r3, [r7, #7]
 8013a56:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a58:	4b48      	ldr	r3, [pc, #288]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a5a:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013a5e:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013a60:	4b46      	ldr	r3, [pc, #280]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a62:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013a66:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013a68:	4b44      	ldr	r3, [pc, #272]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013a6e:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013a70:	4b42      	ldr	r3, [pc, #264]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013a76:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8013a78:	4b41      	ldr	r3, [pc, #260]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013a7a:	881b      	ldrh	r3, [r3, #0]
 8013a7c:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8013a7e:	4b3f      	ldr	r3, [pc, #252]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a80:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8013a84:	f107 020f 	add.w	r2, r7, #15
 8013a88:	f107 0110 	add.w	r1, r7, #16
 8013a8c:	4b3d      	ldr	r3, [pc, #244]	; (8013b84 <SendFrameOnChannel+0x144>)
 8013a8e:	f003 ff4e 	bl	801792e <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8013a92:	4b3b      	ldr	r3, [pc, #236]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013a94:	2201      	movs	r2, #1
 8013a96:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013a9a:	4b38      	ldr	r3, [pc, #224]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013a9c:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013aa0:	b2da      	uxtb	r2, r3
 8013aa2:	4b37      	ldr	r3, [pc, #220]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013aa4:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
    MacCtx.McpsConfirm.TxPower = txPower;
 8013aa8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013aac:	4b34      	ldr	r3, [pc, #208]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013aae:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
    MacCtx.McpsConfirm.Channel = channel;
 8013ab2:	79fb      	ldrb	r3, [r7, #7]
 8013ab4:	4a32      	ldr	r2, [pc, #200]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013ab6:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013aba:	4b31      	ldr	r3, [pc, #196]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013abc:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ac0:	4a2f      	ldr	r2, [pc, #188]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013ac2:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8013ac6:	4b2e      	ldr	r3, [pc, #184]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013ac8:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013acc:	4a2c      	ldr	r2, [pc, #176]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013ace:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8013ad2:	f001 ff07 	bl	80158e4 <LoRaMacClassBIsBeaconModeActive>
 8013ad6:	4603      	mov	r3, r0
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d00b      	beq.n	8013af4 <SendFrameOnChannel+0xb4>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8013adc:	4b28      	ldr	r3, [pc, #160]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013ade:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f001 ff69 	bl	80159ba <LoRaMacClassBIsUplinkCollision>
 8013ae8:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8013aea:	6a3b      	ldr	r3, [r7, #32]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d001      	beq.n	8013af4 <SendFrameOnChannel+0xb4>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8013af0:	2310      	movs	r3, #16
 8013af2:	e03e      	b.n	8013b72 <SendFrameOnChannel+0x132>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8013af4:	4b21      	ldr	r3, [pc, #132]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013af6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d101      	bne.n	8013b02 <SendFrameOnChannel+0xc2>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8013afe:	f001 ff66 	bl	80159ce <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8013b02:	f001 ff00 	bl	8015906 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8013b06:	4b1d      	ldr	r3, [pc, #116]	; (8013b7c <SendFrameOnChannel+0x13c>)
 8013b08:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013b0c:	b2db      	uxtb	r3, r3
 8013b0e:	4a1c      	ldr	r2, [pc, #112]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b10:	f892 2411 	ldrb.w	r2, [r2, #1041]	; 0x411
 8013b14:	4611      	mov	r1, r2
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff fc42 	bl	80133a0 <SecureFrame>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if( status != LORAMAC_STATUS_OK )
 8013b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <SendFrameOnChannel+0xf0>
    {
        return status;
 8013b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b2e:	e020      	b.n	8013b72 <SendFrameOnChannel+0x132>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013b30:	4b13      	ldr	r3, [pc, #76]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b32:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013b36:	f043 0302 	orr.w	r3, r3, #2
 8013b3a:	4a11      	ldr	r2, [pc, #68]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b3c:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( MacCtx.NodeAckRequested == false )
 8013b40:	4b0f      	ldr	r3, [pc, #60]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b42:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8013b46:	f083 0301 	eor.w	r3, r3, #1
 8013b4a:	b2db      	uxtb	r3, r3
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d007      	beq.n	8013b60 <SendFrameOnChannel+0x120>
    {
        MacCtx.ChannelsNbTransCounter++;
 8013b50:	4b0b      	ldr	r3, [pc, #44]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b52:	f893 340c 	ldrb.w	r3, [r3, #1036]	; 0x40c
 8013b56:	3301      	adds	r3, #1
 8013b58:	b2da      	uxtb	r2, r3
 8013b5a:	4b09      	ldr	r3, [pc, #36]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b5c:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
    MacCtx.ResponseTimeoutStartTime = 0;
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8013b60:	4b09      	ldr	r3, [pc, #36]	; (8013b88 <SendFrameOnChannel+0x148>)
 8013b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b64:	4a06      	ldr	r2, [pc, #24]	; (8013b80 <SendFrameOnChannel+0x140>)
 8013b66:	8812      	ldrh	r2, [r2, #0]
 8013b68:	b2d2      	uxtb	r2, r2
 8013b6a:	4611      	mov	r1, r2
 8013b6c:	4807      	ldr	r0, [pc, #28]	; (8013b8c <SendFrameOnChannel+0x14c>)
 8013b6e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3728      	adds	r7, #40	; 0x28
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}
 8013b7a:	bf00      	nop
 8013b7c:	20000e2c 	.word	0x20000e2c
 8013b80:	20000924 	.word	0x20000924
 8013b84:	20000d38 	.word	0x20000d38
 8013b88:	0801f9f0 	.word	0x0801f9f0
 8013b8c:	20000926 	.word	0x20000926

08013b90 <SetTxContinuousWave>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout )
{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b086      	sub	sp, #24
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	4603      	mov	r3, r0
 8013b98:	80fb      	strh	r3, [r7, #6]
    ContinuousWaveParams_t continuousWave;

    continuousWave.Channel = MacCtx.Channel;
 8013b9a:	4b16      	ldr	r3, [pc, #88]	; (8013bf4 <SetTxContinuousWave+0x64>)
 8013b9c:	f893 3411 	ldrb.w	r3, [r3, #1041]	; 0x411
 8013ba0:	723b      	strb	r3, [r7, #8]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013ba2:	4b15      	ldr	r3, [pc, #84]	; (8013bf8 <SetTxContinuousWave+0x68>)
 8013ba4:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013ba8:	727b      	strb	r3, [r7, #9]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8013baa:	4b13      	ldr	r3, [pc, #76]	; (8013bf8 <SetTxContinuousWave+0x68>)
 8013bac:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 8013bb0:	72bb      	strb	r3, [r7, #10]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8013bb2:	4b11      	ldr	r3, [pc, #68]	; (8013bf8 <SetTxContinuousWave+0x68>)
 8013bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013bb8:	60fb      	str	r3, [r7, #12]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8013bba:	4b0f      	ldr	r3, [pc, #60]	; (8013bf8 <SetTxContinuousWave+0x68>)
 8013bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bc0:	613b      	str	r3, [r7, #16]
    continuousWave.Timeout = timeout;
 8013bc2:	88fb      	ldrh	r3, [r7, #6]
 8013bc4:	82bb      	strh	r3, [r7, #20]

    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8013bc6:	4b0c      	ldr	r3, [pc, #48]	; (8013bf8 <SetTxContinuousWave+0x68>)
 8013bc8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013bcc:	f107 0208 	add.w	r2, r7, #8
 8013bd0:	4611      	mov	r1, r2
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f003 ff5a 	bl	8017a8c <RegionSetContinuousWave>

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013bd8:	4b06      	ldr	r3, [pc, #24]	; (8013bf4 <SetTxContinuousWave+0x64>)
 8013bda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013bde:	f043 0302 	orr.w	r3, r3, #2
 8013be2:	4a04      	ldr	r2, [pc, #16]	; (8013bf4 <SetTxContinuousWave+0x64>)
 8013be4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013be8:	2300      	movs	r3, #0
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3718      	adds	r7, #24
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	20000924 	.word	0x20000924
 8013bf8:	20000e2c 	.word	0x20000e2c

08013bfc <SetTxContinuousWave1>:

static LoRaMacStatus_t SetTxContinuousWave1( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b082      	sub	sp, #8
 8013c00:	af00      	add	r7, sp, #0
 8013c02:	4603      	mov	r3, r0
 8013c04:	6039      	str	r1, [r7, #0]
 8013c06:	80fb      	strh	r3, [r7, #6]
 8013c08:	4613      	mov	r3, r2
 8013c0a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8013c0c:	4b09      	ldr	r3, [pc, #36]	; (8013c34 <SetTxContinuousWave1+0x38>)
 8013c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c10:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8013c14:	88fa      	ldrh	r2, [r7, #6]
 8013c16:	6838      	ldr	r0, [r7, #0]
 8013c18:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8013c1a:	4b07      	ldr	r3, [pc, #28]	; (8013c38 <SetTxContinuousWave1+0x3c>)
 8013c1c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013c20:	f043 0302 	orr.w	r3, r3, #2
 8013c24:	4a04      	ldr	r2, [pc, #16]	; (8013c38 <SetTxContinuousWave1+0x3c>)
 8013c26:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8013c2a:	2300      	movs	r3, #0
}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3708      	adds	r7, #8
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	0801f9f0 	.word	0x0801f9f0
 8013c38:	20000924 	.word	0x20000924

08013c3c <RestoreNvmData>:
    return LORAMAC_STATUS_OK;
}
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	af00      	add	r7, sp, #0
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 8013c40:	2300      	movs	r3, #0
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bc80      	pop	{r7}
 8013c48:	4770      	bx	lr

08013c4a <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8013c4a:	b480      	push	{r7}
 8013c4c:	b083      	sub	sp, #12
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	6078      	str	r0, [r7, #4]
 8013c52:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d002      	beq.n	8013c60 <DetermineFrameType+0x16>
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d101      	bne.n	8013c64 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013c60:	2303      	movs	r3, #3
 8013c62:	e03b      	b.n	8013cdc <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	7b1b      	ldrb	r3, [r3, #12]
 8013c68:	f003 030f 	and.w	r3, r3, #15
 8013c6c:	b2db      	uxtb	r3, r3
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d008      	beq.n	8013c84 <DetermineFrameType+0x3a>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d003      	beq.n	8013c84 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	2200      	movs	r2, #0
 8013c80:	701a      	strb	r2, [r3, #0]
 8013c82:	e02a      	b.n	8013cda <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d103      	bne.n	8013c96 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2201      	movs	r2, #1
 8013c92:	701a      	strb	r2, [r3, #0]
 8013c94:	e021      	b.n	8013cda <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	7b1b      	ldrb	r3, [r3, #12]
 8013c9a:	f003 030f 	and.w	r3, r3, #15
 8013c9e:	b2db      	uxtb	r3, r3
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d108      	bne.n	8013cb6 <DetermineFrameType+0x6c>
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d103      	bne.n	8013cb6 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8013cae:	683b      	ldr	r3, [r7, #0]
 8013cb0:	2202      	movs	r2, #2
 8013cb2:	701a      	strb	r2, [r3, #0]
 8013cb4:	e011      	b.n	8013cda <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	7b1b      	ldrb	r3, [r3, #12]
 8013cba:	f003 030f 	and.w	r3, r3, #15
 8013cbe:	b2db      	uxtb	r3, r3
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d108      	bne.n	8013cd6 <DetermineFrameType+0x8c>
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d003      	beq.n	8013cd6 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	2203      	movs	r2, #3
 8013cd2:	701a      	strb	r2, [r3, #0]
 8013cd4:	e001      	b.n	8013cda <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8013cd6:	2318      	movs	r3, #24
 8013cd8:	e000      	b.n	8013cdc <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8013cda:	2300      	movs	r3, #0
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	370c      	adds	r7, #12
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bc80      	pop	{r7}
 8013ce4:	4770      	bx	lr
	...

08013ce8 <CheckRetransUnconfirmedUplink>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CheckRetransUnconfirmedUplink( void )
{
 8013ce8:	b480      	push	{r7}
 8013cea:	af00      	add	r7, sp, #0
    // Unconfirmed uplink, when all retransmissions are done.
    if( MacCtx.ChannelsNbTransCounter >=
 8013cec:	4b12      	ldr	r3, [pc, #72]	; (8013d38 <CheckRetransUnconfirmedUplink+0x50>)
 8013cee:	f893 240c 	ldrb.w	r2, [r3, #1036]	; 0x40c
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8013cf2:	4b12      	ldr	r3, [pc, #72]	; (8013d3c <CheckRetransUnconfirmedUplink+0x54>)
 8013cf4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
    if( MacCtx.ChannelsNbTransCounter >=
 8013cf8:	429a      	cmp	r2, r3
 8013cfa:	d301      	bcc.n	8013d00 <CheckRetransUnconfirmedUplink+0x18>
    {
        return true;
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e016      	b.n	8013d2e <CheckRetransUnconfirmedUplink+0x46>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d00:	4b0d      	ldr	r3, [pc, #52]	; (8013d38 <CheckRetransUnconfirmedUplink+0x50>)
 8013d02:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d06:	f003 0302 	and.w	r3, r3, #2
 8013d0a:	b2db      	uxtb	r3, r3
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00d      	beq.n	8013d2c <CheckRetransUnconfirmedUplink+0x44>
    {
        // For Class A stop in each case
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8013d10:	4b0a      	ldr	r3, [pc, #40]	; (8013d3c <CheckRetransUnconfirmedUplink+0x54>)
 8013d12:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d101      	bne.n	8013d1e <CheckRetransUnconfirmedUplink+0x36>
        {
            return true;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	e007      	b.n	8013d2e <CheckRetransUnconfirmedUplink+0x46>
        }
        else
        {// For Class B & C stop only if the frame was received in RX1 window
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8013d1e:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <CheckRetransUnconfirmedUplink+0x50>)
 8013d20:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d101      	bne.n	8013d2c <CheckRetransUnconfirmedUplink+0x44>
            {
                return true;
 8013d28:	2301      	movs	r3, #1
 8013d2a:	e000      	b.n	8013d2e <CheckRetransUnconfirmedUplink+0x46>
            }
        }
    }
    return false;
 8013d2c:	2300      	movs	r3, #0
}
 8013d2e:	4618      	mov	r0, r3
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bc80      	pop	{r7}
 8013d34:	4770      	bx	lr
 8013d36:	bf00      	nop
 8013d38:	20000924 	.word	0x20000924
 8013d3c:	20000e2c 	.word	0x20000e2c

08013d40 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8013d40:	b480      	push	{r7}
 8013d42:	af00      	add	r7, sp, #0
    // Confirmed uplink, when all retransmissions ( tries to get a ack ) are done.
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d44:	4b0e      	ldr	r3, [pc, #56]	; (8013d80 <CheckRetransConfirmedUplink+0x40>)
 8013d46:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
        MacCtx.AckTimeoutRetries )
 8013d4a:	4b0d      	ldr	r3, [pc, #52]	; (8013d80 <CheckRetransConfirmedUplink+0x40>)
 8013d4c:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
    if( MacCtx.AckTimeoutRetriesCounter >=
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d301      	bcc.n	8013d58 <CheckRetransConfirmedUplink+0x18>
    {
        return true;
 8013d54:	2301      	movs	r3, #1
 8013d56:	e00f      	b.n	8013d78 <CheckRetransConfirmedUplink+0x38>
    }
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8013d58:	4b09      	ldr	r3, [pc, #36]	; (8013d80 <CheckRetransConfirmedUplink+0x40>)
 8013d5a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d5e:	f003 0302 	and.w	r3, r3, #2
 8013d62:	b2db      	uxtb	r3, r3
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d006      	beq.n	8013d76 <CheckRetransConfirmedUplink+0x36>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8013d68:	4b05      	ldr	r3, [pc, #20]	; (8013d80 <CheckRetransConfirmedUplink+0x40>)
 8013d6a:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d001      	beq.n	8013d76 <CheckRetransConfirmedUplink+0x36>
        {
            return true;
 8013d72:	2301      	movs	r3, #1
 8013d74:	e000      	b.n	8013d78 <CheckRetransConfirmedUplink+0x38>
        }
    }
    return false;
 8013d76:	2300      	movs	r3, #0
}
 8013d78:	4618      	mov	r0, r3
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bc80      	pop	{r7}
 8013d7e:	4770      	bx	lr
 8013d80:	20000924 	.word	0x20000924

08013d84 <StopRetransmission>:
    return counter;
}
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8013d84:	b480      	push	{r7}
 8013d86:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d88:	4b1a      	ldr	r3, [pc, #104]	; (8013df4 <StopRetransmission+0x70>)
 8013d8a:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013d8e:	f003 0302 	and.w	r3, r3, #2
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d009      	beq.n	8013dac <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013d98:	4b16      	ldr	r3, [pc, #88]	; (8013df4 <StopRetransmission+0x70>)
 8013d9a:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d00e      	beq.n	8013dc0 <StopRetransmission+0x3c>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8013da2:	4b14      	ldr	r3, [pc, #80]	; (8013df4 <StopRetransmission+0x70>)
 8013da4:	f893 347f 	ldrb.w	r3, [r3, #1151]	; 0x47f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8013da8:	2b01      	cmp	r3, #1
 8013daa:	d009      	beq.n	8013dc0 <StopRetransmission+0x3c>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8013dac:	4b12      	ldr	r3, [pc, #72]	; (8013df8 <StopRetransmission+0x74>)
 8013dae:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8013db2:	2b00      	cmp	r3, #0
 8013db4:	d004      	beq.n	8013dc0 <StopRetransmission+0x3c>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
 8013db6:	4b10      	ldr	r3, [pc, #64]	; (8013df8 <StopRetransmission+0x74>)
 8013db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013dba:	3301      	adds	r3, #1
 8013dbc:	4a0e      	ldr	r2, [pc, #56]	; (8013df8 <StopRetransmission+0x74>)
 8013dbe:	6293      	str	r3, [r2, #40]	; 0x28
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8013dc0:	4b0c      	ldr	r3, [pc, #48]	; (8013df4 <StopRetransmission+0x70>)
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	f883 240c 	strb.w	r2, [r3, #1036]	; 0x40c
    MacCtx.NodeAckRequested = false;
 8013dc8:	4b0a      	ldr	r3, [pc, #40]	; (8013df4 <StopRetransmission+0x70>)
 8013dca:	2200      	movs	r2, #0
 8013dcc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
 8013dd0:	4b08      	ldr	r3, [pc, #32]	; (8013df4 <StopRetransmission+0x70>)
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8013dd8:	4b06      	ldr	r3, [pc, #24]	; (8013df4 <StopRetransmission+0x70>)
 8013dda:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8013dde:	f023 0302 	bic.w	r3, r3, #2
 8013de2:	4a04      	ldr	r2, [pc, #16]	; (8013df4 <StopRetransmission+0x70>)
 8013de4:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return true;
 8013de8:	2301      	movs	r3, #1
}
 8013dea:	4618      	mov	r0, r3
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bc80      	pop	{r7}
 8013df0:	4770      	bx	lr
 8013df2:	bf00      	nop
 8013df4:	20000924 	.word	0x20000924
 8013df8:	20000e2c 	.word	0x20000e2c

08013dfc <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8013e00:	4b08      	ldr	r3, [pc, #32]	; (8013e24 <OnMacProcessNotify+0x28>)
 8013e02:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d00a      	beq.n	8013e20 <OnMacProcessNotify+0x24>
 8013e0a:	4b06      	ldr	r3, [pc, #24]	; (8013e24 <OnMacProcessNotify+0x28>)
 8013e0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e10:	695b      	ldr	r3, [r3, #20]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d004      	beq.n	8013e20 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8013e16:	4b03      	ldr	r3, [pc, #12]	; (8013e24 <OnMacProcessNotify+0x28>)
 8013e18:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e1c:	695b      	ldr	r3, [r3, #20]
 8013e1e:	4798      	blx	r3
    }
}
 8013e20:	bf00      	nop
 8013e22:	bd80      	pop	{r7, pc}
 8013e24:	20000924 	.word	0x20000924

08013e28 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b082      	sub	sp, #8
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	4603      	mov	r3, r0
 8013e30:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8013e32:	4b0b      	ldr	r3, [pc, #44]	; (8013e60 <CallNvmDataChangeCallback+0x38>)
 8013e34:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00c      	beq.n	8013e56 <CallNvmDataChangeCallback+0x2e>
 8013e3c:	4b08      	ldr	r3, [pc, #32]	; (8013e60 <CallNvmDataChangeCallback+0x38>)
 8013e3e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e42:	691b      	ldr	r3, [r3, #16]
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d006      	beq.n	8013e56 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8013e48:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <CallNvmDataChangeCallback+0x38>)
 8013e4a:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 8013e4e:	691b      	ldr	r3, [r3, #16]
 8013e50:	88fa      	ldrh	r2, [r7, #6]
 8013e52:	4610      	mov	r0, r2
 8013e54:	4798      	blx	r3
    }
}
 8013e56:	bf00      	nop
 8013e58:	3708      	adds	r7, #8
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
 8013e5e:	bf00      	nop
 8013e60:	20000924 	.word	0x20000924

08013e64 <AckTimeoutRetriesProcess>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static void AckTimeoutRetriesProcess( void )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b084      	sub	sp, #16
 8013e68:	af00      	add	r7, sp, #0
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 8013e6a:	4b1b      	ldr	r3, [pc, #108]	; (8013ed8 <AckTimeoutRetriesProcess+0x74>)
 8013e6c:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013e70:	4b19      	ldr	r3, [pc, #100]	; (8013ed8 <AckTimeoutRetriesProcess+0x74>)
 8013e72:	f893 340d 	ldrb.w	r3, [r3, #1037]	; 0x40d
 8013e76:	429a      	cmp	r2, r3
 8013e78:	d229      	bcs.n	8013ece <AckTimeoutRetriesProcess+0x6a>
    {
        MacCtx.AckTimeoutRetriesCounter++;
 8013e7a:	4b17      	ldr	r3, [pc, #92]	; (8013ed8 <AckTimeoutRetriesProcess+0x74>)
 8013e7c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e80:	3301      	adds	r3, #1
 8013e82:	b2da      	uxtb	r2, r3
 8013e84:	4b14      	ldr	r3, [pc, #80]	; (8013ed8 <AckTimeoutRetriesProcess+0x74>)
 8013e86:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8013e8a:	4b13      	ldr	r3, [pc, #76]	; (8013ed8 <AckTimeoutRetriesProcess+0x74>)
 8013e8c:	f893 340e 	ldrb.w	r3, [r3, #1038]	; 0x40e
 8013e90:	f003 0301 	and.w	r3, r3, #1
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d019      	beq.n	8013ece <AckTimeoutRetriesProcess+0x6a>
        {
            GetPhyParams_t getPhy;
            PhyParam_t phyParam;

            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8013e9a:	2322      	movs	r3, #34	; 0x22
 8013e9c:	723b      	strb	r3, [r7, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8013e9e:	4b0f      	ldr	r3, [pc, #60]	; (8013edc <AckTimeoutRetriesProcess+0x78>)
 8013ea0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8013ea4:	72bb      	strb	r3, [r7, #10]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8013ea6:	4b0d      	ldr	r3, [pc, #52]	; (8013edc <AckTimeoutRetriesProcess+0x78>)
 8013ea8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8013eac:	727b      	strb	r3, [r7, #9]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8013eae:	4b0b      	ldr	r3, [pc, #44]	; (8013edc <AckTimeoutRetriesProcess+0x78>)
 8013eb0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013eb4:	f107 0208 	add.w	r2, r7, #8
 8013eb8:	4611      	mov	r1, r2
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f003 fc91 	bl	80177e2 <RegionGetPhyParam>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	607b      	str	r3, [r7, #4]
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	b25a      	sxtb	r2, r3
 8013ec8:	4b04      	ldr	r3, [pc, #16]	; (8013edc <AckTimeoutRetriesProcess+0x78>)
 8013eca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        }
    }
}
 8013ece:	bf00      	nop
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	20000924 	.word	0x20000924
 8013edc:	20000e2c 	.word	0x20000e2c

08013ee0 <AckTimeoutRetriesFinalize>:

static void AckTimeoutRetriesFinalize( void )
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b084      	sub	sp, #16
 8013ee4:	af00      	add	r7, sp, #0
    if( MacCtx.McpsConfirm.AckReceived == false )
 8013ee6:	4b14      	ldr	r3, [pc, #80]	; (8013f38 <AckTimeoutRetriesFinalize+0x58>)
 8013ee8:	f893 3438 	ldrb.w	r3, [r3, #1080]	; 0x438
 8013eec:	f083 0301 	eor.w	r3, r3, #1
 8013ef0:	b2db      	uxtb	r3, r3
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d015      	beq.n	8013f22 <AckTimeoutRetriesFinalize+0x42>
    {
        InitDefaultsParams_t params;
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8013ef6:	2302      	movs	r3, #2
 8013ef8:	733b      	strb	r3, [r7, #12]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8013efa:	4b10      	ldr	r3, [pc, #64]	; (8013f3c <AckTimeoutRetriesFinalize+0x5c>)
 8013efc:	607b      	str	r3, [r7, #4]
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8013efe:	4b10      	ldr	r3, [pc, #64]	; (8013f40 <AckTimeoutRetriesFinalize+0x60>)
 8013f00:	60bb      	str	r3, [r7, #8]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8013f02:	4b10      	ldr	r3, [pc, #64]	; (8013f44 <AckTimeoutRetriesFinalize+0x64>)
 8013f04:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8013f08:	1d3a      	adds	r2, r7, #4
 8013f0a:	4611      	mov	r1, r2
 8013f0c:	4618      	mov	r0, r3
 8013f0e:	f003 fc91 	bl	8017834 <RegionInitDefaults>

        MacCtx.NodeAckRequested = false;
 8013f12:	4b09      	ldr	r3, [pc, #36]	; (8013f38 <AckTimeoutRetriesFinalize+0x58>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        MacCtx.McpsConfirm.AckReceived = false;
 8013f1a:	4b07      	ldr	r3, [pc, #28]	; (8013f38 <AckTimeoutRetriesFinalize+0x58>)
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
    }
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8013f22:	4b05      	ldr	r3, [pc, #20]	; (8013f38 <AckTimeoutRetriesFinalize+0x58>)
 8013f24:	f893 240e 	ldrb.w	r2, [r3, #1038]	; 0x40e
 8013f28:	4b03      	ldr	r3, [pc, #12]	; (8013f38 <AckTimeoutRetriesFinalize+0x58>)
 8013f2a:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
}
 8013f2e:	bf00      	nop
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	20000924 	.word	0x20000924
 8013f3c:	2000104c 	.word	0x2000104c
 8013f40:	200010e0 	.word	0x200010e0
 8013f44:	20000e2c 	.word	0x20000e2c

08013f48 <IsRequestPending>:
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8013f48:	b480      	push	{r7}
 8013f4a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f4c:	4b0b      	ldr	r3, [pc, #44]	; (8013f7c <IsRequestPending+0x34>)
 8013f4e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f52:	f003 0304 	and.w	r3, r3, #4
 8013f56:	b2db      	uxtb	r3, r3
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d107      	bne.n	8013f6c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8013f5c:	4b07      	ldr	r3, [pc, #28]	; (8013f7c <IsRequestPending+0x34>)
 8013f5e:	f893 3481 	ldrb.w	r3, [r3, #1153]	; 0x481
 8013f62:	f003 0301 	and.w	r3, r3, #1
 8013f66:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d001      	beq.n	8013f70 <IsRequestPending+0x28>
    {
        return 1;
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e000      	b.n	8013f72 <IsRequestPending+0x2a>
    }
    return 0;
 8013f70:	2300      	movs	r3, #0
}
 8013f72:	4618      	mov	r0, r3
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bc80      	pop	{r7}
 8013f78:	4770      	bx	lr
 8013f7a:	bf00      	nop
 8013f7c:	20000924 	.word	0x20000924

08013f80 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8013f80:	b590      	push	{r4, r7, lr}
 8013f82:	b08f      	sub	sp, #60	; 0x3c
 8013f84:	af02      	add	r7, sp, #8
 8013f86:	6178      	str	r0, [r7, #20]
 8013f88:	6139      	str	r1, [r7, #16]
 8013f8a:	4613      	mov	r3, r2
 8013f8c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d002      	beq.n	8013f9a <LoRaMacInitialization+0x1a>
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d101      	bne.n	8013f9e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013f9a:	2303      	movs	r3, #3
 8013f9c:	e273      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d00b      	beq.n	8013fbe <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d007      	beq.n	8013fbe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fae:	697b      	ldr	r3, [r7, #20]
 8013fb0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d003      	beq.n	8013fbe <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d101      	bne.n	8013fc2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013fbe:	2303      	movs	r3, #3
 8013fc0:	e261      	b.n	8014486 <LoRaMacInitialization+0x506>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8013fc2:	7bfb      	ldrb	r3, [r7, #15]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f003 fbfc 	bl	80177c2 <RegionIsActive>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	f083 0301 	eor.w	r3, r3, #1
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d001      	beq.n	8013fda <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8013fd6:	2309      	movs	r3, #9
 8013fd8:	e255      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8013fda:	6978      	ldr	r0, [r7, #20]
 8013fdc:	f002 f852 	bl	8016084 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8013fe0:	f44f 62ed 	mov.w	r2, #1896	; 0x768
 8013fe4:	2100      	movs	r1, #0
 8013fe6:	48c7      	ldr	r0, [pc, #796]	; (8014304 <LoRaMacInitialization+0x384>)
 8013fe8:	f005 ff50 	bl	8019e8c <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8013fec:	f44f 62a1 	mov.w	r2, #1288	; 0x508
 8013ff0:	2100      	movs	r1, #0
 8013ff2:	48c5      	ldr	r0, [pc, #788]	; (8014308 <LoRaMacInitialization+0x388>)
 8013ff4:	f005 ff4a 	bl	8019e8c <memset1>

    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
 8013ff8:	4bc3      	ldr	r3, [pc, #780]	; (8014308 <LoRaMacInitialization+0x388>)
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e
    MacCtx.AckTimeoutRetries = 1;
 8014000:	4bc1      	ldr	r3, [pc, #772]	; (8014308 <LoRaMacInitialization+0x388>)
 8014002:	2201      	movs	r2, #1
 8014004:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8014008:	4abe      	ldr	r2, [pc, #760]	; (8014304 <LoRaMacInitialization+0x384>)
 801400a:	7bfb      	ldrb	r3, [r7, #15]
 801400c:	f882 3048 	strb.w	r3, [r2, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8014010:	4bbc      	ldr	r3, [pc, #752]	; (8014304 <LoRaMacInitialization+0x384>)
 8014012:	2200      	movs	r2, #0
 8014014:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 8014018:	4bba      	ldr	r3, [pc, #744]	; (8014304 <LoRaMacInitialization+0x384>)
 801401a:	2200      	movs	r2, #0
 801401c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8014020:	4bb8      	ldr	r3, [pc, #736]	; (8014304 <LoRaMacInitialization+0x384>)
 8014022:	4aba      	ldr	r2, [pc, #744]	; (801430c <LoRaMacInitialization+0x38c>)
 8014024:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    params.Bands = &RegionBands;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8014028:	230f      	movs	r3, #15
 801402a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801402e:	4bb5      	ldr	r3, [pc, #724]	; (8014304 <LoRaMacInitialization+0x384>)
 8014030:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014034:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014038:	4611      	mov	r1, r2
 801403a:	4618      	mov	r0, r3
 801403c:	f003 fbd1 	bl	80177e2 <RegionGetPhyParam>
 8014040:	4603      	mov	r3, r0
 8014042:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8014044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014046:	2b00      	cmp	r3, #0
 8014048:	bf14      	ite	ne
 801404a:	2301      	movne	r3, #1
 801404c:	2300      	moveq	r3, #0
 801404e:	b2da      	uxtb	r2, r3
 8014050:	4bac      	ldr	r3, [pc, #688]	; (8014304 <LoRaMacInitialization+0x384>)
 8014052:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8014056:	230a      	movs	r3, #10
 8014058:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801405c:	4ba9      	ldr	r3, [pc, #676]	; (8014304 <LoRaMacInitialization+0x384>)
 801405e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014062:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014066:	4611      	mov	r1, r2
 8014068:	4618      	mov	r0, r3
 801406a:	f003 fbba 	bl	80177e2 <RegionGetPhyParam>
 801406e:	4603      	mov	r3, r0
 8014070:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8014072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014074:	b25a      	sxtb	r2, r3
 8014076:	4ba3      	ldr	r3, [pc, #652]	; (8014304 <LoRaMacInitialization+0x384>)
 8014078:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 801407c:	2306      	movs	r3, #6
 801407e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014082:	4ba0      	ldr	r3, [pc, #640]	; (8014304 <LoRaMacInitialization+0x384>)
 8014084:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014088:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801408c:	4611      	mov	r1, r2
 801408e:	4618      	mov	r0, r3
 8014090:	f003 fba7 	bl	80177e2 <RegionGetPhyParam>
 8014094:	4603      	mov	r3, r0
 8014096:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	b25a      	sxtb	r2, r3
 801409c:	4b99      	ldr	r3, [pc, #612]	; (8014304 <LoRaMacInitialization+0x384>)
 801409e:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 80140a2:	2310      	movs	r3, #16
 80140a4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140a8:	4b96      	ldr	r3, [pc, #600]	; (8014304 <LoRaMacInitialization+0x384>)
 80140aa:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140b2:	4611      	mov	r1, r2
 80140b4:	4618      	mov	r0, r3
 80140b6:	f003 fb94 	bl	80177e2 <RegionGetPhyParam>
 80140ba:	4603      	mov	r3, r0
 80140bc:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 80140be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c0:	4a90      	ldr	r2, [pc, #576]	; (8014304 <LoRaMacInitialization+0x384>)
 80140c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 80140c6:	2311      	movs	r3, #17
 80140c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140cc:	4b8d      	ldr	r3, [pc, #564]	; (8014304 <LoRaMacInitialization+0x384>)
 80140ce:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140d6:	4611      	mov	r1, r2
 80140d8:	4618      	mov	r0, r3
 80140da:	f003 fb82 	bl	80177e2 <RegionGetPhyParam>
 80140de:	4603      	mov	r3, r0
 80140e0:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 80140e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e4:	4a87      	ldr	r2, [pc, #540]	; (8014304 <LoRaMacInitialization+0x384>)
 80140e6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 80140ea:	2312      	movs	r3, #18
 80140ec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80140f0:	4b84      	ldr	r3, [pc, #528]	; (8014304 <LoRaMacInitialization+0x384>)
 80140f2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80140f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80140fa:	4611      	mov	r1, r2
 80140fc:	4618      	mov	r0, r3
 80140fe:	f003 fb70 	bl	80177e2 <RegionGetPhyParam>
 8014102:	4603      	mov	r3, r0
 8014104:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8014106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014108:	4a7e      	ldr	r2, [pc, #504]	; (8014304 <LoRaMacInitialization+0x384>)
 801410a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 801410e:	2313      	movs	r3, #19
 8014110:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014114:	4b7b      	ldr	r3, [pc, #492]	; (8014304 <LoRaMacInitialization+0x384>)
 8014116:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801411a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801411e:	4611      	mov	r1, r2
 8014120:	4618      	mov	r0, r3
 8014122:	f003 fb5e 	bl	80177e2 <RegionGetPhyParam>
 8014126:	4603      	mov	r3, r0
 8014128:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 801412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412c:	4a75      	ldr	r2, [pc, #468]	; (8014304 <LoRaMacInitialization+0x384>)
 801412e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8014132:	2314      	movs	r3, #20
 8014134:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014138:	4b72      	ldr	r3, [pc, #456]	; (8014304 <LoRaMacInitialization+0x384>)
 801413a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801413e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014142:	4611      	mov	r1, r2
 8014144:	4618      	mov	r0, r3
 8014146:	f003 fb4c 	bl	80177e2 <RegionGetPhyParam>
 801414a:	4603      	mov	r3, r0
 801414c:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 801414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014150:	4a6c      	ldr	r2, [pc, #432]	; (8014304 <LoRaMacInitialization+0x384>)
 8014152:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8014156:	2317      	movs	r3, #23
 8014158:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801415c:	4b69      	ldr	r3, [pc, #420]	; (8014304 <LoRaMacInitialization+0x384>)
 801415e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014162:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014166:	4611      	mov	r1, r2
 8014168:	4618      	mov	r0, r3
 801416a:	f003 fb3a 	bl	80177e2 <RegionGetPhyParam>
 801416e:	4603      	mov	r3, r0
 8014170:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8014172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014174:	b2da      	uxtb	r2, r3
 8014176:	4b63      	ldr	r3, [pc, #396]	; (8014304 <LoRaMacInitialization+0x384>)
 8014178:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 801417c:	2318      	movs	r3, #24
 801417e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014182:	4b60      	ldr	r3, [pc, #384]	; (8014304 <LoRaMacInitialization+0x384>)
 8014184:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014188:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801418c:	4611      	mov	r1, r2
 801418e:	4618      	mov	r0, r3
 8014190:	f003 fb27 	bl	80177e2 <RegionGetPhyParam>
 8014194:	4603      	mov	r3, r0
 8014196:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8014198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419a:	4a5a      	ldr	r2, [pc, #360]	; (8014304 <LoRaMacInitialization+0x384>)
 801419c:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80141a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a2:	4a58      	ldr	r2, [pc, #352]	; (8014304 <LoRaMacInitialization+0x384>)
 80141a4:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80141a8:	2319      	movs	r3, #25
 80141aa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141ae:	4b55      	ldr	r3, [pc, #340]	; (8014304 <LoRaMacInitialization+0x384>)
 80141b0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141b4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141b8:	4611      	mov	r1, r2
 80141ba:	4618      	mov	r0, r3
 80141bc:	f003 fb11 	bl	80177e2 <RegionGetPhyParam>
 80141c0:	4603      	mov	r3, r0
 80141c2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 80141c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c6:	b2da      	uxtb	r2, r3
 80141c8:	4b4e      	ldr	r3, [pc, #312]	; (8014304 <LoRaMacInitialization+0x384>)
 80141ca:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 80141ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141d0:	b2da      	uxtb	r2, r3
 80141d2:	4b4c      	ldr	r3, [pc, #304]	; (8014304 <LoRaMacInitialization+0x384>)
 80141d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 80141d8:	231e      	movs	r3, #30
 80141da:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80141de:	4b49      	ldr	r3, [pc, #292]	; (8014304 <LoRaMacInitialization+0x384>)
 80141e0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80141e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80141e8:	4611      	mov	r1, r2
 80141ea:	4618      	mov	r0, r3
 80141ec:	f003 faf9 	bl	80177e2 <RegionGetPhyParam>
 80141f0:	4603      	mov	r3, r0
 80141f2:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	b2da      	uxtb	r2, r3
 80141f8:	4b42      	ldr	r3, [pc, #264]	; (8014304 <LoRaMacInitialization+0x384>)
 80141fa:	f883 20c4 	strb.w	r2, [r3, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 80141fe:	231f      	movs	r3, #31
 8014200:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014204:	4b3f      	ldr	r3, [pc, #252]	; (8014304 <LoRaMacInitialization+0x384>)
 8014206:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801420a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801420e:	4611      	mov	r1, r2
 8014210:	4618      	mov	r0, r3
 8014212:	f003 fae6 	bl	80177e2 <RegionGetPhyParam>
 8014216:	4603      	mov	r3, r0
 8014218:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 801421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421c:	b2da      	uxtb	r2, r3
 801421e:	4b39      	ldr	r3, [pc, #228]	; (8014304 <LoRaMacInitialization+0x384>)
 8014220:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8014224:	2320      	movs	r3, #32
 8014226:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801422a:	4b36      	ldr	r3, [pc, #216]	; (8014304 <LoRaMacInitialization+0x384>)
 801422c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014230:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014234:	4611      	mov	r1, r2
 8014236:	4618      	mov	r0, r3
 8014238:	f003 fad3 	bl	80177e2 <RegionGetPhyParam>
 801423c:	4603      	mov	r3, r0
 801423e:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8014240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014242:	4a30      	ldr	r2, [pc, #192]	; (8014304 <LoRaMacInitialization+0x384>)
 8014244:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8014248:	2321      	movs	r3, #33	; 0x21
 801424a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801424e:	4b2d      	ldr	r3, [pc, #180]	; (8014304 <LoRaMacInitialization+0x384>)
 8014250:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014254:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014258:	4611      	mov	r1, r2
 801425a:	4618      	mov	r0, r3
 801425c:	f003 fac1 	bl	80177e2 <RegionGetPhyParam>
 8014260:	4603      	mov	r3, r0
 8014262:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8014264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014266:	4a27      	ldr	r2, [pc, #156]	; (8014304 <LoRaMacInitialization+0x384>)
 8014268:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 801426c:	230b      	movs	r3, #11
 801426e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014272:	4b24      	ldr	r3, [pc, #144]	; (8014304 <LoRaMacInitialization+0x384>)
 8014274:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014278:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801427c:	4611      	mov	r1, r2
 801427e:	4618      	mov	r0, r3
 8014280:	f003 faaf 	bl	80177e2 <RegionGetPhyParam>
 8014284:	4603      	mov	r3, r0
 8014286:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 8014288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801428a:	b29a      	uxth	r2, r3
 801428c:	4b1d      	ldr	r3, [pc, #116]	; (8014304 <LoRaMacInitialization+0x384>)
 801428e:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8014292:	230c      	movs	r3, #12
 8014294:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014298:	4b1a      	ldr	r3, [pc, #104]	; (8014304 <LoRaMacInitialization+0x384>)
 801429a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801429e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80142a2:	4611      	mov	r1, r2
 80142a4:	4618      	mov	r0, r3
 80142a6:	f003 fa9c 	bl	80177e2 <RegionGetPhyParam>
 80142aa:	4603      	mov	r3, r0
 80142ac:	627b      	str	r3, [r7, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 80142ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142b0:	b29a      	uxth	r2, r3
 80142b2:	4b14      	ldr	r3, [pc, #80]	; (8014304 <LoRaMacInitialization+0x384>)
 80142b4:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 80142b8:	4b12      	ldr	r3, [pc, #72]	; (8014304 <LoRaMacInitialization+0x384>)
 80142ba:	2201      	movs	r2, #1
 80142bc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 80142c0:	4b10      	ldr	r3, [pc, #64]	; (8014304 <LoRaMacInitialization+0x384>)
 80142c2:	220a      	movs	r2, #10
 80142c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 80142c8:	4b0e      	ldr	r3, [pc, #56]	; (8014304 <LoRaMacInitialization+0x384>)
 80142ca:	2206      	movs	r2, #6
 80142cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 80142d0:	4b0c      	ldr	r3, [pc, #48]	; (8014304 <LoRaMacInitialization+0x384>)
 80142d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80142d6:	4a0b      	ldr	r2, [pc, #44]	; (8014304 <LoRaMacInitialization+0x384>)
 80142d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 80142da:	4b0a      	ldr	r3, [pc, #40]	; (8014304 <LoRaMacInitialization+0x384>)
 80142dc:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 80142e0:	4b08      	ldr	r3, [pc, #32]	; (8014304 <LoRaMacInitialization+0x384>)
 80142e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80142e6:	4b07      	ldr	r3, [pc, #28]	; (8014304 <LoRaMacInitialization+0x384>)
 80142e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80142ec:	4a05      	ldr	r2, [pc, #20]	; (8014304 <LoRaMacInitialization+0x384>)
 80142ee:	6553      	str	r3, [r2, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80142f0:	4b04      	ldr	r3, [pc, #16]	; (8014304 <LoRaMacInitialization+0x384>)
 80142f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80142f6:	4a03      	ldr	r2, [pc, #12]	; (8014304 <LoRaMacInitialization+0x384>)
 80142f8:	6593      	str	r3, [r2, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80142fa:	4b02      	ldr	r3, [pc, #8]	; (8014304 <LoRaMacInitialization+0x384>)
 80142fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014300:	e006      	b.n	8014310 <LoRaMacInitialization+0x390>
 8014302:	bf00      	nop
 8014304:	20000e2c 	.word	0x20000e2c
 8014308:	20000924 	.word	0x20000924
 801430c:	01000300 	.word	0x01000300
 8014310:	4a5f      	ldr	r2, [pc, #380]	; (8014490 <LoRaMacInitialization+0x510>)
 8014312:	65d3      	str	r3, [r2, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8014314:	4b5e      	ldr	r3, [pc, #376]	; (8014490 <LoRaMacInitialization+0x510>)
 8014316:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801431a:	4a5d      	ldr	r2, [pc, #372]	; (8014490 <LoRaMacInitialization+0x510>)
 801431c:	6613      	str	r3, [r2, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801431e:	4b5c      	ldr	r3, [pc, #368]	; (8014490 <LoRaMacInitialization+0x510>)
 8014320:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014324:	4a5a      	ldr	r2, [pc, #360]	; (8014490 <LoRaMacInitialization+0x510>)
 8014326:	6653      	str	r3, [r2, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8014328:	4b59      	ldr	r3, [pc, #356]	; (8014490 <LoRaMacInitialization+0x510>)
 801432a:	f893 20b0 	ldrb.w	r2, [r3, #176]	; 0xb0
 801432e:	4b58      	ldr	r3, [pc, #352]	; (8014490 <LoRaMacInitialization+0x510>)
 8014330:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8014334:	2300      	movs	r3, #0
 8014336:	f887 3020 	strb.w	r3, [r7, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 801433a:	4b56      	ldr	r3, [pc, #344]	; (8014494 <LoRaMacInitialization+0x514>)
 801433c:	61bb      	str	r3, [r7, #24]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 801433e:	4b56      	ldr	r3, [pc, #344]	; (8014498 <LoRaMacInitialization+0x518>)
 8014340:	61fb      	str	r3, [r7, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8014342:	4b53      	ldr	r3, [pc, #332]	; (8014490 <LoRaMacInitialization+0x510>)
 8014344:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014348:	f107 0218 	add.w	r2, r7, #24
 801434c:	4611      	mov	r1, r2
 801434e:	4618      	mov	r0, r3
 8014350:	f003 fa70 	bl	8017834 <RegionInitDefaults>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 8014354:	4a51      	ldr	r2, [pc, #324]	; (801449c <LoRaMacInitialization+0x51c>)
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
    ResetMacParameters( false );
 801435c:	2000      	movs	r0, #0
 801435e:	f7ff f8b5 	bl	80134cc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8014362:	4b4b      	ldr	r3, [pc, #300]	; (8014490 <LoRaMacInitialization+0x510>)
 8014364:	2201      	movs	r2, #1
 8014366:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 801436a:	4a4c      	ldr	r2, [pc, #304]	; (801449c <LoRaMacInitialization+0x51c>)
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 8014372:	4b4a      	ldr	r3, [pc, #296]	; (801449c <LoRaMacInitialization+0x51c>)
 8014374:	2200      	movs	r2, #0
 8014376:	f883 2481 	strb.w	r2, [r3, #1153]	; 0x481
    MacCtx.MacState = LORAMAC_STOPPED;
 801437a:	4b48      	ldr	r3, [pc, #288]	; (801449c <LoRaMacInitialization+0x51c>)
 801437c:	2201      	movs	r2, #1
 801437e:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8014382:	4b43      	ldr	r3, [pc, #268]	; (8014490 <LoRaMacInitialization+0x510>)
 8014384:	2200      	movs	r2, #0
 8014386:	62da      	str	r2, [r3, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8014388:	4b41      	ldr	r3, [pc, #260]	; (8014490 <LoRaMacInitialization+0x510>)
 801438a:	2200      	movs	r2, #0
 801438c:	631a      	str	r2, [r3, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 801438e:	2300      	movs	r3, #0
 8014390:	9300      	str	r3, [sp, #0]
 8014392:	4b43      	ldr	r3, [pc, #268]	; (80144a0 <LoRaMacInitialization+0x520>)
 8014394:	2200      	movs	r2, #0
 8014396:	f04f 31ff 	mov.w	r1, #4294967295
 801439a:	4842      	ldr	r0, [pc, #264]	; (80144a4 <LoRaMacInitialization+0x524>)
 801439c:	f009 fe32 	bl	801e004 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 80143a0:	2300      	movs	r3, #0
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	4b40      	ldr	r3, [pc, #256]	; (80144a8 <LoRaMacInitialization+0x528>)
 80143a6:	2200      	movs	r2, #0
 80143a8:	f04f 31ff 	mov.w	r1, #4294967295
 80143ac:	483f      	ldr	r0, [pc, #252]	; (80144ac <LoRaMacInitialization+0x52c>)
 80143ae:	f009 fe29 	bl	801e004 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 80143b2:	2300      	movs	r3, #0
 80143b4:	9300      	str	r3, [sp, #0]
 80143b6:	4b3e      	ldr	r3, [pc, #248]	; (80144b0 <LoRaMacInitialization+0x530>)
 80143b8:	2200      	movs	r2, #0
 80143ba:	f04f 31ff 	mov.w	r1, #4294967295
 80143be:	483d      	ldr	r0, [pc, #244]	; (80144b4 <LoRaMacInitialization+0x534>)
 80143c0:	f009 fe20 	bl	801e004 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 80143c4:	2300      	movs	r3, #0
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	4b3b      	ldr	r3, [pc, #236]	; (80144b8 <LoRaMacInitialization+0x538>)
 80143ca:	2200      	movs	r2, #0
 80143cc:	f04f 31ff 	mov.w	r1, #4294967295
 80143d0:	483a      	ldr	r0, [pc, #232]	; (80144bc <LoRaMacInitialization+0x53c>)
 80143d2:	f009 fe17 	bl	801e004 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 80143d6:	4c2e      	ldr	r4, [pc, #184]	; (8014490 <LoRaMacInitialization+0x510>)
 80143d8:	463b      	mov	r3, r7
 80143da:	4618      	mov	r0, r3
 80143dc:	f009 f986 	bl	801d6ec <SysTimeGetMcuTime>
 80143e0:	f504 7390 	add.w	r3, r4, #288	; 0x120
 80143e4:	463a      	mov	r2, r7
 80143e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80143ea:	e883 0003 	stmia.w	r3, {r0, r1}
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80143ee:	4b2b      	ldr	r3, [pc, #172]	; (801449c <LoRaMacInitialization+0x51c>)
 80143f0:	4a33      	ldr	r2, [pc, #204]	; (80144c0 <LoRaMacInitialization+0x540>)
 80143f2:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80143f6:	4b29      	ldr	r3, [pc, #164]	; (801449c <LoRaMacInitialization+0x51c>)
 80143f8:	4a32      	ldr	r2, [pc, #200]	; (80144c4 <LoRaMacInitialization+0x544>)
 80143fa:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80143fe:	4b27      	ldr	r3, [pc, #156]	; (801449c <LoRaMacInitialization+0x51c>)
 8014400:	4a31      	ldr	r2, [pc, #196]	; (80144c8 <LoRaMacInitialization+0x548>)
 8014402:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 8014406:	4b25      	ldr	r3, [pc, #148]	; (801449c <LoRaMacInitialization+0x51c>)
 8014408:	4a30      	ldr	r2, [pc, #192]	; (80144cc <LoRaMacInitialization+0x54c>)
 801440a:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 801440e:	4b23      	ldr	r3, [pc, #140]	; (801449c <LoRaMacInitialization+0x51c>)
 8014410:	4a2f      	ldr	r2, [pc, #188]	; (80144d0 <LoRaMacInitialization+0x550>)
 8014412:	f8c3 2358 	str.w	r2, [r3, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 8014416:	4b2f      	ldr	r3, [pc, #188]	; (80144d4 <LoRaMacInitialization+0x554>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	482f      	ldr	r0, [pc, #188]	; (80144d8 <LoRaMacInitialization+0x558>)
 801441c:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 801441e:	482f      	ldr	r0, [pc, #188]	; (80144dc <LoRaMacInitialization+0x55c>)
 8014420:	f7fa fe10 	bl	800f044 <SecureElementInit>
 8014424:	4603      	mov	r3, r0
 8014426:	2b00      	cmp	r3, #0
 8014428:	d001      	beq.n	801442e <LoRaMacInitialization+0x4ae>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801442a:	2311      	movs	r3, #17
 801442c:	e02b      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 801442e:	4818      	ldr	r0, [pc, #96]	; (8014490 <LoRaMacInitialization+0x510>)
 8014430:	f002 fae8 	bl	8016a04 <LoRaMacCryptoInit>
 8014434:	4603      	mov	r3, r0
 8014436:	2b00      	cmp	r3, #0
 8014438:	d001      	beq.n	801443e <LoRaMacInitialization+0x4be>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801443a:	2311      	movs	r3, #17
 801443c:	e023      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 801443e:	f001 fbe3 	bl	8015c08 <LoRaMacCommandsInit>
 8014442:	4603      	mov	r3, r0
 8014444:	2b00      	cmp	r3, #0
 8014446:	d001      	beq.n	801444c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8014448:	2313      	movs	r3, #19
 801444a:	e01c      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 801444c:	4824      	ldr	r0, [pc, #144]	; (80144e0 <LoRaMacInitialization+0x560>)
 801444e:	f002 fba3 	bl	8016b98 <LoRaMacCryptoSetMulticastReference>
 8014452:	4603      	mov	r3, r0
 8014454:	2b00      	cmp	r3, #0
 8014456:	d001      	beq.n	801445c <LoRaMacInitialization+0x4dc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8014458:	2311      	movs	r3, #17
 801445a:	e014      	b.n	8014486 <LoRaMacInitialization+0x506>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 801445c:	4b1d      	ldr	r3, [pc, #116]	; (80144d4 <LoRaMacInitialization+0x554>)
 801445e:	695b      	ldr	r3, [r3, #20]
 8014460:	4798      	blx	r3
 8014462:	4603      	mov	r3, r0
 8014464:	4618      	mov	r0, r3
 8014466:	f005 fcb1 	bl	8019dcc <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801446a:	4b1a      	ldr	r3, [pc, #104]	; (80144d4 <LoRaMacInitialization+0x554>)
 801446c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801446e:	4a08      	ldr	r2, [pc, #32]	; (8014490 <LoRaMacInitialization+0x510>)
 8014470:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014474:	4610      	mov	r0, r2
 8014476:	4798      	blx	r3
    Radio.Sleep( );
 8014478:	4b16      	ldr	r3, [pc, #88]	; (80144d4 <LoRaMacInitialization+0x554>)
 801447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801447c:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 801447e:	2001      	movs	r0, #1
 8014480:	f7fd fb40 	bl	8011b04 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3734      	adds	r7, #52	; 0x34
 801448a:	46bd      	mov	sp, r7
 801448c:	bd90      	pop	{r4, r7, pc}
 801448e:	bf00      	nop
 8014490:	20000e2c 	.word	0x20000e2c
 8014494:	2000104c 	.word	0x2000104c
 8014498:	200010e0 	.word	0x200010e0
 801449c:	20000924 	.word	0x20000924
 80144a0:	08012045 	.word	0x08012045
 80144a4:	20000c8c 	.word	0x20000c8c
 80144a8:	080120b9 	.word	0x080120b9
 80144ac:	20000ca4 	.word	0x20000ca4
 80144b0:	08012125 	.word	0x08012125
 80144b4:	20000cbc 	.word	0x20000cbc
 80144b8:	08012199 	.word	0x08012199
 80144bc:	20000d18 	.word	0x20000d18
 80144c0:	08010c05 	.word	0x08010c05
 80144c4:	08010c61 	.word	0x08010c61
 80144c8:	08010cf9 	.word	0x08010cf9
 80144cc:	08010ccd 	.word	0x08010ccd
 80144d0:	08010d15 	.word	0x08010d15
 80144d4:	0801f9f0 	.word	0x0801f9f0
 80144d8:	20000c70 	.word	0x20000c70
 80144dc:	20000f74 	.word	0x20000f74
 80144e0:	20000f14 	.word	0x20000f14

080144e4 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 80144e4:	b580      	push	{r7, lr}
 80144e6:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 80144e8:	4b04      	ldr	r3, [pc, #16]	; (80144fc <LoRaMacStart+0x18>)
 80144ea:	2200      	movs	r2, #0
 80144ec:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 80144f0:	f7fc fc26 	bl	8010d40 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 80144f4:	2300      	movs	r3, #0
}
 80144f6:	4618      	mov	r0, r3
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	bf00      	nop
 80144fc:	20000924 	.word	0x20000924

08014500 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 8014504:	f7fd fad2 	bl	8011aac <LoRaMacIsBusy>
 8014508:	4603      	mov	r3, r0
 801450a:	f083 0301 	eor.w	r3, r3, #1
 801450e:	b2db      	uxtb	r3, r3
 8014510:	2b00      	cmp	r3, #0
 8014512:	d00d      	beq.n	8014530 <LoRaMacStop+0x30>
    {
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8014514:	4b0b      	ldr	r3, [pc, #44]	; (8014544 <LoRaMacStop+0x44>)
 8014516:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 801451a:	2b02      	cmp	r3, #2
 801451c:	d102      	bne.n	8014524 <LoRaMacStop+0x24>
        {
            Radio.Sleep( );
 801451e:	4b0a      	ldr	r3, [pc, #40]	; (8014548 <LoRaMacStop+0x48>)
 8014520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014522:	4798      	blx	r3
        }
        MacCtx.MacState = LORAMAC_STOPPED;
 8014524:	4b09      	ldr	r3, [pc, #36]	; (801454c <LoRaMacStop+0x4c>)
 8014526:	2201      	movs	r2, #1
 8014528:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 801452c:	2300      	movs	r3, #0
 801452e:	e007      	b.n	8014540 <LoRaMacStop+0x40>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8014530:	4b06      	ldr	r3, [pc, #24]	; (801454c <LoRaMacStop+0x4c>)
 8014532:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014536:	2b01      	cmp	r3, #1
 8014538:	d101      	bne.n	801453e <LoRaMacStop+0x3e>
    {
        return LORAMAC_STATUS_OK;
 801453a:	2300      	movs	r3, #0
 801453c:	e000      	b.n	8014540 <LoRaMacStop+0x40>
    }
    return LORAMAC_STATUS_BUSY;
 801453e:	2301      	movs	r3, #1
}
 8014540:	4618      	mov	r0, r3
 8014542:	bd80      	pop	{r7, pc}
 8014544:	20000e2c 	.word	0x20000e2c
 8014548:	0801f9f0 	.word	0x0801f9f0
 801454c:	20000924 	.word	0x20000924

08014550 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 8014550:	b580      	push	{r7, lr}
 8014552:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 8014554:	480d      	ldr	r0, [pc, #52]	; (801458c <LoRaMacHalt+0x3c>)
 8014556:	f009 fdf9 	bl	801e14c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 801455a:	480d      	ldr	r0, [pc, #52]	; (8014590 <LoRaMacHalt+0x40>)
 801455c:	f009 fdf6 	bl	801e14c <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 8014560:	480c      	ldr	r0, [pc, #48]	; (8014594 <LoRaMacHalt+0x44>)
 8014562:	f009 fdf3 	bl	801e14c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
 8014566:	480c      	ldr	r0, [pc, #48]	; (8014598 <LoRaMacHalt+0x48>)
 8014568:	f009 fdf0 	bl	801e14c <UTIL_TIMER_Stop>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 801456c:	f001 f9cb 	bl	8015906 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 8014570:	4b0a      	ldr	r3, [pc, #40]	; (801459c <LoRaMacHalt+0x4c>)
 8014572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014574:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8014576:	4b0a      	ldr	r3, [pc, #40]	; (80145a0 <LoRaMacHalt+0x50>)
 8014578:	2200      	movs	r2, #0
 801457a:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801457e:	4b08      	ldr	r3, [pc, #32]	; (80145a0 <LoRaMacHalt+0x50>)
 8014580:	2201      	movs	r2, #1
 8014582:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return LORAMAC_STATUS_OK;
 8014586:	2300      	movs	r3, #0
}
 8014588:	4618      	mov	r0, r3
 801458a:	bd80      	pop	{r7, pc}
 801458c:	20000c8c 	.word	0x20000c8c
 8014590:	20000ca4 	.word	0x20000ca4
 8014594:	20000cbc 	.word	0x20000cbc
 8014598:	20000d18 	.word	0x20000d18
 801459c:	0801f9f0 	.word	0x0801f9f0
 80145a0:	20000924 	.word	0x20000924

080145a4 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b08a      	sub	sp, #40	; 0x28
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	4603      	mov	r3, r0
 80145ac:	6039      	str	r1, [r7, #0]
 80145ae:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145b0:	4b3e      	ldr	r3, [pc, #248]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145b4:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80145b6:	4b3d      	ldr	r3, [pc, #244]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145b8:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 80145bc:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80145be:	4b3b      	ldr	r3, [pc, #236]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145c0:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 80145c4:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 80145c6:	2300      	movs	r3, #0
 80145c8:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d101      	bne.n	80145d4 <LoRaMacQueryTxPossible+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80145d0:	2303      	movs	r3, #3
 80145d2:	e066      	b.n	80146a2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
 80145d4:	4b35      	ldr	r3, [pc, #212]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145d6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 80145da:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 80145dc:	2300      	movs	r3, #0
 80145de:	763b      	strb	r3, [r7, #24]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80145e0:	4b32      	ldr	r3, [pc, #200]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145e2:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80145e6:	767b      	strb	r3, [r7, #25]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80145e8:	4b30      	ldr	r3, [pc, #192]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145ec:	61fb      	str	r3, [r7, #28]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80145ee:	4b2f      	ldr	r3, [pc, #188]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145f0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80145f4:	843b      	strh	r3, [r7, #32]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80145f6:	4b2d      	ldr	r3, [pc, #180]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 80145f8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80145fc:	847b      	strh	r3, [r7, #34]	; 0x22
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80145fe:	4b2b      	ldr	r3, [pc, #172]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 8014600:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8014604:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8014608:	4b28      	ldr	r3, [pc, #160]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 801460a:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801460e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014612:	4b26      	ldr	r3, [pc, #152]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 8014614:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014618:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    adrNext.Region = Nvm.MacGroup2.Region;
 801461c:	4b23      	ldr	r3, [pc, #140]	; (80146ac <LoRaMacQueryTxPossible+0x108>)
 801461e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 8014626:	f107 0310 	add.w	r3, r7, #16
 801462a:	f107 020e 	add.w	r2, r7, #14
 801462e:	f107 010f 	add.w	r1, r7, #15
 8014632:	f107 0014 	add.w	r0, r7, #20
 8014636:	f001 f8d1 	bl	80157dc <LoRaMacAdrCalcNext>
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 801463a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801463e:	4618      	mov	r0, r3
 8014640:	f7fd fefc 	bl	801243c <GetMaxAppPayloadWithoutFOptsLength>
 8014644:	4603      	mov	r3, r0
 8014646:	461a      	mov	r2, r3
 8014648:	683b      	ldr	r3, [r7, #0]
 801464a:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 801464c:	f107 0308 	add.w	r3, r7, #8
 8014650:	4618      	mov	r0, r3
 8014652:	f001 fbdf 	bl	8015e14 <LoRaMacCommandsGetSizeSerializedCmds>
 8014656:	4603      	mov	r3, r0
 8014658:	2b00      	cmp	r3, #0
 801465a:	d001      	beq.n	8014660 <LoRaMacQueryTxPossible+0xbc>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801465c:	2313      	movs	r3, #19
 801465e:	e020      	b.n	80146a2 <LoRaMacQueryTxPossible+0xfe>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 8014660:	68bb      	ldr	r3, [r7, #8]
 8014662:	2b0f      	cmp	r3, #15
 8014664:	d819      	bhi.n	801469a <LoRaMacQueryTxPossible+0xf6>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	785b      	ldrb	r3, [r3, #1]
 801466a:	461a      	mov	r2, r3
 801466c:	68bb      	ldr	r3, [r7, #8]
 801466e:	429a      	cmp	r2, r3
 8014670:	d313      	bcc.n	801469a <LoRaMacQueryTxPossible+0xf6>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	785a      	ldrb	r2, [r3, #1]
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	b2db      	uxtb	r3, r3
 801467a:	1ad3      	subs	r3, r2, r3
 801467c:	b2da      	uxtb	r2, r3
 801467e:	683b      	ldr	r3, [r7, #0]
 8014680:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8014682:	683b      	ldr	r3, [r7, #0]
 8014684:	785b      	ldrb	r3, [r3, #1]
 8014686:	4619      	mov	r1, r3
 8014688:	79fa      	ldrb	r2, [r7, #7]
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	4413      	add	r3, r2
 801468e:	4299      	cmp	r1, r3
 8014690:	d301      	bcc.n	8014696 <LoRaMacQueryTxPossible+0xf2>
        {
            return LORAMAC_STATUS_OK;
 8014692:	2300      	movs	r3, #0
 8014694:	e005      	b.n	80146a2 <LoRaMacQueryTxPossible+0xfe>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8014696:	2308      	movs	r3, #8
 8014698:	e003      	b.n	80146a2 <LoRaMacQueryTxPossible+0xfe>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	2200      	movs	r2, #0
 801469e:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 80146a0:	2308      	movs	r3, #8
    }
}
 80146a2:	4618      	mov	r0, r3
 80146a4:	3728      	adds	r7, #40	; 0x28
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	20000e2c 	.word	0x20000e2c

080146b0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 80146b0:	b590      	push	{r4, r7, lr}
 80146b2:	b087      	sub	sp, #28
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80146b8:	2300      	movs	r3, #0
 80146ba:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d101      	bne.n	80146c6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80146c2:	2303      	movs	r3, #3
 80146c4:	e1a4      	b.n	8014a10 <LoRaMacMibGetRequestConfirm+0x360>
    }

    switch( mibGet->Type )
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	781b      	ldrb	r3, [r3, #0]
 80146ca:	2b3f      	cmp	r3, #63	; 0x3f
 80146cc:	f200 8199 	bhi.w	8014a02 <LoRaMacMibGetRequestConfirm+0x352>
 80146d0:	a201      	add	r2, pc, #4	; (adr r2, 80146d8 <LoRaMacMibGetRequestConfirm+0x28>)
 80146d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146d6:	bf00      	nop
 80146d8:	080147d9 	.word	0x080147d9
 80146dc:	080147e5 	.word	0x080147e5
 80146e0:	080147f1 	.word	0x080147f1
 80146e4:	080147fd 	.word	0x080147fd
 80146e8:	08014809 	.word	0x08014809
 80146ec:	08014815 	.word	0x08014815
 80146f0:	08014821 	.word	0x08014821
 80146f4:	08014a03 	.word	0x08014a03
 80146f8:	08014a03 	.word	0x08014a03
 80146fc:	08014a03 	.word	0x08014a03
 8014700:	08014a03 	.word	0x08014a03
 8014704:	08014a03 	.word	0x08014a03
 8014708:	08014a03 	.word	0x08014a03
 801470c:	08014a03 	.word	0x08014a03
 8014710:	08014a03 	.word	0x08014a03
 8014714:	08014835 	.word	0x08014835
 8014718:	08014841 	.word	0x08014841
 801471c:	0801484d 	.word	0x0801484d
 8014720:	0801486f 	.word	0x0801486f
 8014724:	08014881 	.word	0x08014881
 8014728:	08014893 	.word	0x08014893
 801472c:	080148a5 	.word	0x080148a5
 8014730:	080148d9 	.word	0x080148d9
 8014734:	080148b7 	.word	0x080148b7
 8014738:	080148fb 	.word	0x080148fb
 801473c:	08014907 	.word	0x08014907
 8014740:	08014911 	.word	0x08014911
 8014744:	0801491b 	.word	0x0801491b
 8014748:	08014925 	.word	0x08014925
 801474c:	0801492f 	.word	0x0801492f
 8014750:	08014939 	.word	0x08014939
 8014754:	08014945 	.word	0x08014945
 8014758:	0801495d 	.word	0x0801495d
 801475c:	08014951 	.word	0x08014951
 8014760:	08014969 	.word	0x08014969
 8014764:	08014973 	.word	0x08014973
 8014768:	0801497f 	.word	0x0801497f
 801476c:	0801499b 	.word	0x0801499b
 8014770:	0801498b 	.word	0x0801498b
 8014774:	08014993 	.word	0x08014993
 8014778:	08014a03 	.word	0x08014a03
 801477c:	080149a7 	.word	0x080149a7
 8014780:	08014a03 	.word	0x08014a03
 8014784:	08014a03 	.word	0x08014a03
 8014788:	08014a03 	.word	0x08014a03
 801478c:	08014a03 	.word	0x08014a03
 8014790:	08014a03 	.word	0x08014a03
 8014794:	08014a03 	.word	0x08014a03
 8014798:	08014a03 	.word	0x08014a03
 801479c:	08014a03 	.word	0x08014a03
 80147a0:	08014a03 	.word	0x08014a03
 80147a4:	08014a03 	.word	0x08014a03
 80147a8:	08014a03 	.word	0x08014a03
 80147ac:	08014a03 	.word	0x08014a03
 80147b0:	08014a03 	.word	0x08014a03
 80147b4:	08014a03 	.word	0x08014a03
 80147b8:	08014a03 	.word	0x08014a03
 80147bc:	080149bb 	.word	0x080149bb
 80147c0:	080149c7 	.word	0x080149c7
 80147c4:	080149d3 	.word	0x080149d3
 80147c8:	080149df 	.word	0x080149df
 80147cc:	080149eb 	.word	0x080149eb
 80147d0:	080149f7 	.word	0x080149f7
 80147d4:	080149fd 	.word	0x080149fd
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80147d8:	4b8f      	ldr	r3, [pc, #572]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80147da:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	711a      	strb	r2, [r3, #4]
            break;
 80147e2:	e114      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80147e4:	4b8c      	ldr	r3, [pc, #560]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80147e6:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	711a      	strb	r2, [r3, #4]
            break;
 80147ee:	e10e      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	685b      	ldr	r3, [r3, #4]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7fa fefb 	bl	800f5f0 <SecureElementGetDevEui>
            break;
 80147fa:	e108      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	f7fa ff25 	bl	800f650 <SecureElementGetJoinEui>
            break;
 8014806:	e102      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8014808:	4b83      	ldr	r3, [pc, #524]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801480a:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	711a      	strb	r2, [r3, #4]
            break;
 8014812:	e0fc      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 8014814:	4b80      	ldr	r3, [pc, #512]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014816:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	605a      	str	r2, [r3, #4]
            break;
 801481e:	e0f6      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 8014820:	4b7d      	ldr	r3, [pc, #500]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014822:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	3304      	adds	r3, #4
 801482a:	4619      	mov	r1, r3
 801482c:	4610      	mov	r0, r2
 801482e:	f7fa ff41 	bl	800f6b4 <SecureElementGetDevAddr>
            break;
 8014832:	e0ec      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 8014834:	4b78      	ldr	r3, [pc, #480]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014836:	f893 2119 	ldrb.w	r2, [r3, #281]	; 0x119
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	711a      	strb	r2, [r3, #4]
            break;
 801483e:	e0e6      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8014840:	4b75      	ldr	r3, [pc, #468]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014842:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	711a      	strb	r2, [r3, #4]
            break;
 801484a:	e0e0      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 801484c:	231d      	movs	r3, #29
 801484e:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8014850:	4b71      	ldr	r3, [pc, #452]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014852:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014856:	f107 0210 	add.w	r2, r7, #16
 801485a:	4611      	mov	r1, r2
 801485c:	4618      	mov	r0, r3
 801485e:	f002 ffc0 	bl	80177e2 <RegionGetPhyParam>
 8014862:	4603      	mov	r3, r0
 8014864:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 8014866:	68fa      	ldr	r2, [r7, #12]
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	605a      	str	r2, [r3, #4]
            break;
 801486c:	e0cf      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	4a69      	ldr	r2, [pc, #420]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014872:	3304      	adds	r3, #4
 8014874:	326c      	adds	r2, #108	; 0x6c
 8014876:	e892 0003 	ldmia.w	r2, {r0, r1}
 801487a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801487e:	e0c6      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	4a65      	ldr	r2, [pc, #404]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014884:	3304      	adds	r3, #4
 8014886:	32b4      	adds	r2, #180	; 0xb4
 8014888:	e892 0003 	ldmia.w	r2, {r0, r1}
 801488c:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014890:	e0bd      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	4a60      	ldr	r2, [pc, #384]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014896:	3304      	adds	r3, #4
 8014898:	3274      	adds	r2, #116	; 0x74
 801489a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801489e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148a2:	e0b4      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	4a5c      	ldr	r2, [pc, #368]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80148a8:	3304      	adds	r3, #4
 80148aa:	32bc      	adds	r2, #188	; 0xbc
 80148ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148b0:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80148b4:	e0ab      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80148b6:	231b      	movs	r3, #27
 80148b8:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148ba:	4b57      	ldr	r3, [pc, #348]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80148bc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148c0:	f107 0210 	add.w	r2, r7, #16
 80148c4:	4611      	mov	r1, r2
 80148c6:	4618      	mov	r0, r3
 80148c8:	f002 ff8b 	bl	80177e2 <RegionGetPhyParam>
 80148cc:	4603      	mov	r3, r0
 80148ce:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 80148d0:	68fa      	ldr	r2, [r7, #12]
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	605a      	str	r2, [r3, #4]
            break;
 80148d6:	e09a      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80148d8:	231a      	movs	r3, #26
 80148da:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80148dc:	4b4e      	ldr	r3, [pc, #312]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80148de:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80148e2:	f107 0210 	add.w	r2, r7, #16
 80148e6:	4611      	mov	r1, r2
 80148e8:	4618      	mov	r0, r3
 80148ea:	f002 ff7a 	bl	80177e2 <RegionGetPhyParam>
 80148ee:	4603      	mov	r3, r0
 80148f0:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80148f2:	68fa      	ldr	r2, [r7, #12]
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	605a      	str	r2, [r3, #4]
            break;
 80148f8:	e089      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80148fa:	4b47      	ldr	r3, [pc, #284]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80148fc:	f893 2068 	ldrb.w	r2, [r3, #104]	; 0x68
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	711a      	strb	r2, [r3, #4]
            break;
 8014904:	e083      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8014906:	4b44      	ldr	r3, [pc, #272]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014908:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	605a      	str	r2, [r3, #4]
            break;
 801490e:	e07e      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8014910:	4b41      	ldr	r3, [pc, #260]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014912:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	605a      	str	r2, [r3, #4]
            break;
 8014918:	e079      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801491a:	4b3f      	ldr	r3, [pc, #252]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801491c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	605a      	str	r2, [r3, #4]
            break;
 8014922:	e074      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8014924:	4b3c      	ldr	r3, [pc, #240]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014926:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	605a      	str	r2, [r3, #4]
            break;
 801492c:	e06f      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801492e:	4b3a      	ldr	r3, [pc, #232]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014930:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	605a      	str	r2, [r3, #4]
            break;
 8014936:	e06a      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8014938:	4b37      	ldr	r3, [pc, #220]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801493a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	711a      	strb	r2, [r3, #4]
            break;
 8014942:	e064      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8014944:	4b34      	ldr	r3, [pc, #208]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014946:	f993 2039 	ldrsb.w	r2, [r3, #57]	; 0x39
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	711a      	strb	r2, [r3, #4]
            break;
 801494e:	e05e      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8014950:	4b31      	ldr	r3, [pc, #196]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014952:	f993 20dc 	ldrsb.w	r2, [r3, #220]	; 0xdc
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	711a      	strb	r2, [r3, #4]
            break;
 801495a:	e058      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 801495c:	4b2e      	ldr	r3, [pc, #184]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801495e:	f993 2038 	ldrsb.w	r2, [r3, #56]	; 0x38
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	711a      	strb	r2, [r3, #4]
            break;
 8014966:	e052      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8014968:	4b2b      	ldr	r3, [pc, #172]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801496a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	605a      	str	r2, [r3, #4]
            break;
 8014970:	e04d      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8014972:	4b29      	ldr	r3, [pc, #164]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014974:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	711a      	strb	r2, [r3, #4]
            break;
 801497c:	e047      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801497e:	4b26      	ldr	r3, [pc, #152]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 8014980:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	605a      	str	r2, [r3, #4]
            break;
 8014988:	e041      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	4a22      	ldr	r2, [pc, #136]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801498e:	605a      	str	r2, [r3, #4]
            break;
 8014990:	e03d      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
#else
            mibGet->Param.BackupContexts = NULL;
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	2200      	movs	r2, #0
 8014996:	605a      	str	r2, [r3, #4]
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 8014998:	e039      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 801499a:	4b1f      	ldr	r3, [pc, #124]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 801499c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	605a      	str	r2, [r3, #4]
            break;
 80149a4:	e033      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	4a1b      	ldr	r2, [pc, #108]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149aa:	f8d2 2128 	ldr.w	r2, [r2, #296]	; 0x128
 80149ae:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 80149b0:	687c      	ldr	r4, [r7, #4]
 80149b2:	f003 f89f 	bl	8017af4 <RegionGetVersion>
 80149b6:	60a0      	str	r0, [r4, #8]
            break;
 80149b8:	e029      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 80149ba:	4b17      	ldr	r3, [pc, #92]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149bc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	605a      	str	r2, [r3, #4]
            break;
 80149c4:	e023      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80149c6:	4b14      	ldr	r3, [pc, #80]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149c8:	f8b3 2088 	ldrh.w	r2, [r3, #136]	; 0x88
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	809a      	strh	r2, [r3, #4]
            break;
 80149d0:	e01d      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80149d2:	4b11      	ldr	r3, [pc, #68]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149d4:	f8b3 208a 	ldrh.w	r2, [r3, #138]	; 0x8a
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	809a      	strh	r2, [r3, #4]
            break;
 80149dc:	e017      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80149de:	4b0e      	ldr	r3, [pc, #56]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149e0:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	; 0xd0
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	809a      	strh	r2, [r3, #4]
            break;
 80149e8:	e011      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80149ea:	4b0b      	ldr	r3, [pc, #44]	; (8014a18 <LoRaMacMibGetRequestConfirm+0x368>)
 80149ec:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	; 0xd2
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	809a      	strh	r2, [r3, #4]
            break;
 80149f4:	e00b      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149f6:	2318      	movs	r3, #24
 80149f8:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80149fa:	e008      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80149fc:	2318      	movs	r3, #24
 80149fe:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 8014a00:	e005      	b.n	8014a0e <LoRaMacMibGetRequestConfirm+0x35e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f000 ff96 	bl	8015934 <LoRaMacClassBMibGetRequestConfirm>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	75fb      	strb	r3, [r7, #23]
            break;
 8014a0c:	bf00      	nop
        }
    }
    return status;
 8014a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a10:	4618      	mov	r0, r3
 8014a12:	371c      	adds	r7, #28
 8014a14:	46bd      	mov	sp, r7
 8014a16:	bd90      	pop	{r4, r7, pc}
 8014a18:	20000e2c 	.word	0x20000e2c

08014a1c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b086      	sub	sp, #24
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8014a24:	2300      	movs	r3, #0
 8014a26:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d101      	bne.n	8014a32 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8014a2e:	2303      	movs	r3, #3
 8014a30:	e382      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8014a32:	4bbb      	ldr	r3, [pc, #748]	; (8014d20 <LoRaMacMibSetRequestConfirm+0x304>)
 8014a34:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8014a38:	f003 0302 	and.w	r3, r3, #2
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d001      	beq.n	8014a44 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8014a40:	2301      	movs	r3, #1
 8014a42:	e379      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
    }

    switch( mibSet->Type )
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	781b      	ldrb	r3, [r3, #0]
 8014a48:	2b3f      	cmp	r3, #63	; 0x3f
 8014a4a:	f200 8353 	bhi.w	80150f4 <LoRaMacMibSetRequestConfirm+0x6d8>
 8014a4e:	a201      	add	r2, pc, #4	; (adr r2, 8014a54 <LoRaMacMibSetRequestConfirm+0x38>)
 8014a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a54:	08014b55 	.word	0x08014b55
 8014a58:	08014b65 	.word	0x08014b65
 8014a5c:	08014b7f 	.word	0x08014b7f
 8014a60:	08014b97 	.word	0x08014b97
 8014a64:	08014baf 	.word	0x08014baf
 8014a68:	08014bbb 	.word	0x08014bbb
 8014a6c:	08014bc7 	.word	0x08014bc7
 8014a70:	08014bf1 	.word	0x08014bf1
 8014a74:	08014c17 	.word	0x08014c17
 8014a78:	08014c3d 	.word	0x08014c3d
 8014a7c:	08014c63 	.word	0x08014c63
 8014a80:	08014c89 	.word	0x08014c89
 8014a84:	08014caf 	.word	0x08014caf
 8014a88:	08014cd5 	.word	0x08014cd5
 8014a8c:	08014cfb 	.word	0x08014cfb
 8014a90:	08014d29 	.word	0x08014d29
 8014a94:	08014d49 	.word	0x08014d49
 8014a98:	080150f5 	.word	0x080150f5
 8014a9c:	08014d55 	.word	0x08014d55
 8014aa0:	08014dc5 	.word	0x08014dc5
 8014aa4:	08014e05 	.word	0x08014e05
 8014aa8:	08014e67 	.word	0x08014e67
 8014aac:	08014ed7 	.word	0x08014ed7
 8014ab0:	08014ea7 	.word	0x08014ea7
 8014ab4:	08014f07 	.word	0x08014f07
 8014ab8:	08014f29 	.word	0x08014f29
 8014abc:	08014f33 	.word	0x08014f33
 8014ac0:	08014f3d 	.word	0x08014f3d
 8014ac4:	08014f47 	.word	0x08014f47
 8014ac8:	08014f51 	.word	0x08014f51
 8014acc:	08014f5b 	.word	0x08014f5b
 8014ad0:	08014f8d 	.word	0x08014f8d
 8014ad4:	08015001 	.word	0x08015001
 8014ad8:	08014fc7 	.word	0x08014fc7
 8014adc:	08015033 	.word	0x08015033
 8014ae0:	08015049 	.word	0x08015049
 8014ae4:	08015061 	.word	0x08015061
 8014ae8:	0801506d 	.word	0x0801506d
 8014aec:	08015079 	.word	0x08015079
 8014af0:	080150f5 	.word	0x080150f5
 8014af4:	08015083 	.word	0x08015083
 8014af8:	080150f5 	.word	0x080150f5
 8014afc:	080150f5 	.word	0x080150f5
 8014b00:	080150f5 	.word	0x080150f5
 8014b04:	080150f5 	.word	0x080150f5
 8014b08:	080150f5 	.word	0x080150f5
 8014b0c:	080150f5 	.word	0x080150f5
 8014b10:	080150f5 	.word	0x080150f5
 8014b14:	080150f5 	.word	0x080150f5
 8014b18:	080150f5 	.word	0x080150f5
 8014b1c:	080150f5 	.word	0x080150f5
 8014b20:	080150f5 	.word	0x080150f5
 8014b24:	080150f5 	.word	0x080150f5
 8014b28:	080150f5 	.word	0x080150f5
 8014b2c:	080150f5 	.word	0x080150f5
 8014b30:	080150f5 	.word	0x080150f5
 8014b34:	080150f5 	.word	0x080150f5
 8014b38:	080150ad 	.word	0x080150ad
 8014b3c:	080150b9 	.word	0x080150b9
 8014b40:	080150c5 	.word	0x080150c5
 8014b44:	080150d1 	.word	0x080150d1
 8014b48:	080150dd 	.word	0x080150dd
 8014b4c:	080150e9 	.word	0x080150e9
 8014b50:	080150ef 	.word	0x080150ef
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	791b      	ldrb	r3, [r3, #4]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	f7fd fb87 	bl	801226c <SwitchClass>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	75fb      	strb	r3, [r7, #23]
            break;
 8014b62:	e2e8      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	791b      	ldrb	r3, [r3, #4]
 8014b68:	2b02      	cmp	r3, #2
 8014b6a:	d005      	beq.n	8014b78 <LoRaMacMibSetRequestConfirm+0x15c>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	791a      	ldrb	r2, [r3, #4]
 8014b70:	4b6c      	ldr	r3, [pc, #432]	; (8014d24 <LoRaMacMibSetRequestConfirm+0x308>)
 8014b72:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014b76:	e2de      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b78:	2303      	movs	r3, #3
 8014b7a:	75fb      	strb	r3, [r7, #23]
            break;
 8014b7c:	e2db      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	685b      	ldr	r3, [r3, #4]
 8014b82:	4618      	mov	r0, r3
 8014b84:	f7fa fd1c 	bl	800f5c0 <SecureElementSetDevEui>
 8014b88:	4603      	mov	r3, r0
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	f000 82b8 	beq.w	8015100 <LoRaMacMibSetRequestConfirm+0x6e4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014b90:	2303      	movs	r3, #3
 8014b92:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014b94:	e2b4      	b.n	8015100 <LoRaMacMibSetRequestConfirm+0x6e4>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	685b      	ldr	r3, [r3, #4]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fa fd40 	bl	800f620 <SecureElementSetJoinEui>
 8014ba0:	4603      	mov	r3, r0
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	f000 82ae 	beq.w	8015104 <LoRaMacMibSetRequestConfirm+0x6e8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ba8:	2303      	movs	r3, #3
 8014baa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014bac:	e2aa      	b.n	8015104 <LoRaMacMibSetRequestConfirm+0x6e8>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	791a      	ldrb	r2, [r3, #4]
 8014bb2:	4b5c      	ldr	r3, [pc, #368]	; (8014d24 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bb4:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
            break;
 8014bb8:	e2bd      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	4a59      	ldr	r2, [pc, #356]	; (8014d24 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            break;
 8014bc4:	e2b7      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8014bc6:	4b57      	ldr	r3, [pc, #348]	; (8014d24 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bc8:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	685b      	ldr	r3, [r3, #4]
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	4610      	mov	r0, r2
 8014bd4:	f7fa fd54 	bl	800f680 <SecureElementSetDevAddr>
 8014bd8:	4603      	mov	r3, r0
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d002      	beq.n	8014be4 <LoRaMacMibSetRequestConfirm+0x1c8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014bde:	2303      	movs	r3, #3
 8014be0:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 8014be2:	e2a8      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	685b      	ldr	r3, [r3, #4]
 8014be8:	4a4e      	ldr	r2, [pc, #312]	; (8014d24 <LoRaMacMibSetRequestConfirm+0x308>)
 8014bea:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
            break;
 8014bee:	e2a2      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	685b      	ldr	r3, [r3, #4]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d00b      	beq.n	8014c10 <LoRaMacMibSetRequestConfirm+0x1f4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	4619      	mov	r1, r3
 8014bfe:	2000      	movs	r0, #0
 8014c00:	f001 fff4 	bl	8016bec <LoRaMacCryptoSetKey>
 8014c04:	4603      	mov	r3, r0
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	f000 827e 	beq.w	8015108 <LoRaMacMibSetRequestConfirm+0x6ec>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c0c:	2311      	movs	r3, #17
 8014c0e:	e293      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c10:	2303      	movs	r3, #3
 8014c12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c14:	e278      	b.n	8015108 <LoRaMacMibSetRequestConfirm+0x6ec>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	685b      	ldr	r3, [r3, #4]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d00b      	beq.n	8014c36 <LoRaMacMibSetRequestConfirm+0x21a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	685b      	ldr	r3, [r3, #4]
 8014c22:	4619      	mov	r1, r3
 8014c24:	2001      	movs	r0, #1
 8014c26:	f001 ffe1 	bl	8016bec <LoRaMacCryptoSetKey>
 8014c2a:	4603      	mov	r3, r0
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	f000 826d 	beq.w	801510c <LoRaMacMibSetRequestConfirm+0x6f0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c32:	2311      	movs	r3, #17
 8014c34:	e280      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c36:	2303      	movs	r3, #3
 8014c38:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c3a:	e267      	b.n	801510c <LoRaMacMibSetRequestConfirm+0x6f0>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	685b      	ldr	r3, [r3, #4]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d00b      	beq.n	8014c5c <LoRaMacMibSetRequestConfirm+0x240>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	685b      	ldr	r3, [r3, #4]
 8014c48:	4619      	mov	r1, r3
 8014c4a:	2008      	movs	r0, #8
 8014c4c:	f001 ffce 	bl	8016bec <LoRaMacCryptoSetKey>
 8014c50:	4603      	mov	r3, r0
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	f000 825c 	beq.w	8015110 <LoRaMacMibSetRequestConfirm+0x6f4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c58:	2311      	movs	r3, #17
 8014c5a:	e26d      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c5c:	2303      	movs	r3, #3
 8014c5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c60:	e256      	b.n	8015110 <LoRaMacMibSetRequestConfirm+0x6f4>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	685b      	ldr	r3, [r3, #4]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d00b      	beq.n	8014c82 <LoRaMacMibSetRequestConfirm+0x266>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	685b      	ldr	r3, [r3, #4]
 8014c6e:	4619      	mov	r1, r3
 8014c70:	2009      	movs	r0, #9
 8014c72:	f001 ffbb 	bl	8016bec <LoRaMacCryptoSetKey>
 8014c76:	4603      	mov	r3, r0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f000 824b 	beq.w	8015114 <LoRaMacMibSetRequestConfirm+0x6f8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014c7e:	2311      	movs	r3, #17
 8014c80:	e25a      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014c82:	2303      	movs	r3, #3
 8014c84:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014c86:	e245      	b.n	8015114 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d00b      	beq.n	8014ca8 <LoRaMacMibSetRequestConfirm+0x28c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	4619      	mov	r1, r3
 8014c96:	200c      	movs	r0, #12
 8014c98:	f001 ffa8 	bl	8016bec <LoRaMacCryptoSetKey>
 8014c9c:	4603      	mov	r3, r0
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	f000 823a 	beq.w	8015118 <LoRaMacMibSetRequestConfirm+0x6fc>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014ca4:	2311      	movs	r3, #17
 8014ca6:	e247      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ca8:	2303      	movs	r3, #3
 8014caa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cac:	e234      	b.n	8015118 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	685b      	ldr	r3, [r3, #4]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d00b      	beq.n	8014cce <LoRaMacMibSetRequestConfirm+0x2b2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	685b      	ldr	r3, [r3, #4]
 8014cba:	4619      	mov	r1, r3
 8014cbc:	200d      	movs	r0, #13
 8014cbe:	f001 ff95 	bl	8016bec <LoRaMacCryptoSetKey>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f000 8229 	beq.w	801511c <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cca:	2311      	movs	r3, #17
 8014ccc:	e234      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cce:	2303      	movs	r3, #3
 8014cd0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cd2:	e223      	b.n	801511c <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	685b      	ldr	r3, [r3, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d00b      	beq.n	8014cf4 <LoRaMacMibSetRequestConfirm+0x2d8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	200e      	movs	r0, #14
 8014ce4:	f001 ff82 	bl	8016bec <LoRaMacCryptoSetKey>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f000 8218 	beq.w	8015120 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014cf0:	2311      	movs	r3, #17
 8014cf2:	e221      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014cf4:	2303      	movs	r3, #3
 8014cf6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014cf8:	e212      	b.n	8015120 <LoRaMacMibSetRequestConfirm+0x704>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	685b      	ldr	r3, [r3, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d00b      	beq.n	8014d1a <LoRaMacMibSetRequestConfirm+0x2fe>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	685b      	ldr	r3, [r3, #4]
 8014d06:	4619      	mov	r1, r3
 8014d08:	200f      	movs	r0, #15
 8014d0a:	f001 ff6f 	bl	8016bec <LoRaMacCryptoSetKey>
 8014d0e:	4603      	mov	r3, r0
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	f000 8207 	beq.w	8015124 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8014d16:	2311      	movs	r3, #17
 8014d18:	e20e      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d1a:	2303      	movs	r3, #3
 8014d1c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014d1e:	e201      	b.n	8015124 <LoRaMacMibSetRequestConfirm+0x708>
 8014d20:	20000924 	.word	0x20000924
 8014d24:	20000e2c 	.word	0x20000e2c
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	791a      	ldrb	r2, [r3, #4]
 8014d2c:	4bb2      	ldr	r3, [pc, #712]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d2e:	f883 2119 	strb.w	r2, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8014d32:	4bb2      	ldr	r3, [pc, #712]	; (8014ffc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d36:	4ab0      	ldr	r2, [pc, #704]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d38:	f892 2119 	ldrb.w	r2, [r2, #281]	; 0x119
 8014d3c:	4610      	mov	r0, r2
 8014d3e:	4798      	blx	r3
            Radio.Sleep( );
 8014d40:	4bae      	ldr	r3, [pc, #696]	; (8014ffc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d44:	4798      	blx	r3
            break;
 8014d46:	e1f6      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	791a      	ldrb	r2, [r3, #4]
 8014d4c:	4baa      	ldr	r3, [pc, #680]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d4e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            break;
 8014d52:	e1f0      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	7a1b      	ldrb	r3, [r3, #8]
 8014d58:	b25b      	sxtb	r3, r3
 8014d5a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014d5c:	4ba6      	ldr	r3, [pc, #664]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d5e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014d62:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8014d64:	4ba4      	ldr	r3, [pc, #656]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d66:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d6a:	f107 0108 	add.w	r1, r7, #8
 8014d6e:	2207      	movs	r2, #7
 8014d70:	4618      	mov	r0, r3
 8014d72:	f002 fd71 	bl	8017858 <RegionVerify>
 8014d76:	4603      	mov	r3, r0
 8014d78:	f083 0301 	eor.w	r3, r3, #1
 8014d7c:	b2db      	uxtb	r3, r3
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d002      	beq.n	8014d88 <LoRaMacMibSetRequestConfirm+0x36c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014d82:	2303      	movs	r3, #3
 8014d84:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 8014d86:	e1d6      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8014d8e:	4b9a      	ldr	r3, [pc, #616]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014d90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014d94:	f107 0108 	add.w	r1, r7, #8
 8014d98:	2200      	movs	r2, #0
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f002 fd5c 	bl	8017858 <RegionVerify>
 8014da0:	4603      	mov	r3, r0
 8014da2:	f083 0301 	eor.w	r3, r3, #1
 8014da6:	b2db      	uxtb	r3, r3
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d002      	beq.n	8014db2 <LoRaMacMibSetRequestConfirm+0x396>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dac:	2303      	movs	r3, #3
 8014dae:	75fb      	strb	r3, [r7, #23]
            break;
 8014db0:	e1c1      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8014db2:	4b91      	ldr	r3, [pc, #580]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014db4:	687a      	ldr	r2, [r7, #4]
 8014db6:	336c      	adds	r3, #108	; 0x6c
 8014db8:	3204      	adds	r2, #4
 8014dba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014dbe:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8014dc2:	e1b8      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7a1b      	ldrb	r3, [r3, #8]
 8014dc8:	b25b      	sxtb	r3, r3
 8014dca:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014dcc:	4b8a      	ldr	r3, [pc, #552]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dce:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014dd2:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014dd4:	4b88      	ldr	r3, [pc, #544]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dd6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014dda:	f107 0108 	add.w	r1, r7, #8
 8014dde:	2207      	movs	r2, #7
 8014de0:	4618      	mov	r0, r3
 8014de2:	f002 fd39 	bl	8017858 <RegionVerify>
 8014de6:	4603      	mov	r3, r0
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d008      	beq.n	8014dfe <LoRaMacMibSetRequestConfirm+0x3e2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8014dec:	4b82      	ldr	r3, [pc, #520]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014dee:	687a      	ldr	r2, [r7, #4]
 8014df0:	33b4      	adds	r3, #180	; 0xb4
 8014df2:	3204      	adds	r2, #4
 8014df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014df8:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014dfc:	e19b      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014dfe:	2303      	movs	r3, #3
 8014e00:	75fb      	strb	r3, [r7, #23]
            break;
 8014e02:	e198      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	7a1b      	ldrb	r3, [r3, #8]
 8014e08:	b25b      	sxtb	r3, r3
 8014e0a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e0c:	4b7a      	ldr	r3, [pc, #488]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e0e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e12:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e14:	4b78      	ldr	r3, [pc, #480]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e16:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e1a:	f107 0108 	add.w	r1, r7, #8
 8014e1e:	2207      	movs	r2, #7
 8014e20:	4618      	mov	r0, r3
 8014e22:	f002 fd19 	bl	8017858 <RegionVerify>
 8014e26:	4603      	mov	r3, r0
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d019      	beq.n	8014e60 <LoRaMacMibSetRequestConfirm+0x444>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8014e2c:	4b72      	ldr	r3, [pc, #456]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e2e:	687a      	ldr	r2, [r7, #4]
 8014e30:	3374      	adds	r3, #116	; 0x74
 8014e32:	3204      	adds	r2, #4
 8014e34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e38:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8014e3c:	4b6e      	ldr	r3, [pc, #440]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e3e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8014e42:	2b02      	cmp	r3, #2
 8014e44:	f040 8170 	bne.w	8015128 <LoRaMacMibSetRequestConfirm+0x70c>
 8014e48:	4b6b      	ldr	r3, [pc, #428]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e4a:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	f000 816a 	beq.w	8015128 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8014e54:	4b69      	ldr	r3, [pc, #420]	; (8014ffc <LoRaMacMibSetRequestConfirm+0x5e0>)
 8014e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e58:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8014e5a:	f7fe fc91 	bl	8013780 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e5e:	e163      	b.n	8015128 <LoRaMacMibSetRequestConfirm+0x70c>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014e60:	2303      	movs	r3, #3
 8014e62:	75fb      	strb	r3, [r7, #23]
            break;
 8014e64:	e160      	b.n	8015128 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	7a1b      	ldrb	r3, [r3, #8]
 8014e6a:	b25b      	sxtb	r3, r3
 8014e6c:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8014e6e:	4b62      	ldr	r3, [pc, #392]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e70:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8014e74:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8014e76:	4b60      	ldr	r3, [pc, #384]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e78:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014e7c:	f107 0108 	add.w	r1, r7, #8
 8014e80:	2207      	movs	r2, #7
 8014e82:	4618      	mov	r0, r3
 8014e84:	f002 fce8 	bl	8017858 <RegionVerify>
 8014e88:	4603      	mov	r3, r0
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d008      	beq.n	8014ea0 <LoRaMacMibSetRequestConfirm+0x484>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8014e8e:	4b5a      	ldr	r3, [pc, #360]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014e90:	687a      	ldr	r2, [r7, #4]
 8014e92:	33bc      	adds	r3, #188	; 0xbc
 8014e94:	3204      	adds	r2, #4
 8014e96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014e9a:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014e9e:	e14a      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ea0:	2303      	movs	r3, #3
 8014ea2:	75fb      	strb	r3, [r7, #23]
            break;
 8014ea4:	e147      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	685b      	ldr	r3, [r3, #4]
 8014eaa:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8014eac:	2301      	movs	r3, #1
 8014eae:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014eb0:	4b51      	ldr	r3, [pc, #324]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014eb2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014eb6:	f107 020c 	add.w	r2, r7, #12
 8014eba:	4611      	mov	r1, r2
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f002 fcf4 	bl	80178aa <RegionChanMaskSet>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	f083 0301 	eor.w	r3, r3, #1
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	f000 812e 	beq.w	801512c <LoRaMacMibSetRequestConfirm+0x710>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ed0:	2303      	movs	r3, #3
 8014ed2:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014ed4:	e12a      	b.n	801512c <LoRaMacMibSetRequestConfirm+0x710>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	685b      	ldr	r3, [r3, #4]
 8014eda:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8014edc:	2300      	movs	r3, #0
 8014ede:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8014ee0:	4b45      	ldr	r3, [pc, #276]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014ee2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014ee6:	f107 020c 	add.w	r2, r7, #12
 8014eea:	4611      	mov	r1, r2
 8014eec:	4618      	mov	r0, r3
 8014eee:	f002 fcdc 	bl	80178aa <RegionChanMaskSet>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	f083 0301 	eor.w	r3, r3, #1
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	f000 8118 	beq.w	8015130 <LoRaMacMibSetRequestConfirm+0x714>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f00:	2303      	movs	r3, #3
 8014f02:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8014f04:	e114      	b.n	8015130 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	791b      	ldrb	r3, [r3, #4]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d009      	beq.n	8014f22 <LoRaMacMibSetRequestConfirm+0x506>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8014f12:	2b0f      	cmp	r3, #15
 8014f14:	d805      	bhi.n	8014f22 <LoRaMacMibSetRequestConfirm+0x506>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	791a      	ldrb	r2, [r3, #4]
 8014f1a:	4b37      	ldr	r3, [pc, #220]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f1c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f20:	e109      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f22:	2303      	movs	r3, #3
 8014f24:	75fb      	strb	r3, [r7, #23]
            break;
 8014f26:	e106      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	4a32      	ldr	r2, [pc, #200]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f2e:	6553      	str	r3, [r2, #84]	; 0x54
            break;
 8014f30:	e101      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	4a30      	ldr	r2, [pc, #192]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f38:	6593      	str	r3, [r2, #88]	; 0x58
            break;
 8014f3a:	e0fc      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	4a2d      	ldr	r2, [pc, #180]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f42:	65d3      	str	r3, [r2, #92]	; 0x5c
            break;
 8014f44:	e0f7      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	685b      	ldr	r3, [r3, #4]
 8014f4a:	4a2b      	ldr	r2, [pc, #172]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f4c:	6613      	str	r3, [r2, #96]	; 0x60
            break;
 8014f4e:	e0f2      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	685b      	ldr	r3, [r3, #4]
 8014f54:	4a28      	ldr	r2, [pc, #160]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f56:	6653      	str	r3, [r2, #100]	; 0x64
            break;
 8014f58:	e0ed      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f60:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8014f62:	4b25      	ldr	r3, [pc, #148]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014f68:	f107 0108 	add.w	r1, r7, #8
 8014f6c:	2206      	movs	r2, #6
 8014f6e:	4618      	mov	r0, r3
 8014f70:	f002 fc72 	bl	8017858 <RegionVerify>
 8014f74:	4603      	mov	r3, r0
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d005      	beq.n	8014f86 <LoRaMacMibSetRequestConfirm+0x56a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8014f7a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014f7e:	4b1e      	ldr	r3, [pc, #120]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f80:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014f84:	e0d7      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014f86:	2303      	movs	r3, #3
 8014f88:	75fb      	strb	r3, [r7, #23]
            break;
 8014f8a:	e0d4      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014f92:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8014f94:	4b18      	ldr	r3, [pc, #96]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f96:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8014f9a:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8014f9c:	4b16      	ldr	r3, [pc, #88]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014f9e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fa2:	f107 0108 	add.w	r1, r7, #8
 8014fa6:	2205      	movs	r2, #5
 8014fa8:	4618      	mov	r0, r3
 8014faa:	f002 fc55 	bl	8017858 <RegionVerify>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d005      	beq.n	8014fc0 <LoRaMacMibSetRequestConfirm+0x5a4>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8014fb4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fb8:	4b0f      	ldr	r3, [pc, #60]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014fbe:	e0ba      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014fc0:	2303      	movs	r3, #3
 8014fc2:	75fb      	strb	r3, [r7, #23]
            break;
 8014fc4:	e0b7      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014fcc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8014fce:	4b0a      	ldr	r3, [pc, #40]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fd0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014fd4:	f107 0108 	add.w	r1, r7, #8
 8014fd8:	220a      	movs	r2, #10
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f002 fc3c 	bl	8017858 <RegionVerify>
 8014fe0:	4603      	mov	r3, r0
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d005      	beq.n	8014ff2 <LoRaMacMibSetRequestConfirm+0x5d6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8014fe6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8014fea:	4b03      	ldr	r3, [pc, #12]	; (8014ff8 <LoRaMacMibSetRequestConfirm+0x5dc>)
 8014fec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8014ff0:	e0a1      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	75fb      	strb	r3, [r7, #23]
            break;
 8014ff6:	e09e      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
 8014ff8:	20000e2c 	.word	0x20000e2c
 8014ffc:	0801f9f0 	.word	0x0801f9f0
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8015006:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8015008:	4b4d      	ldr	r3, [pc, #308]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 801500a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801500e:	f107 0108 	add.w	r1, r7, #8
 8015012:	2209      	movs	r2, #9
 8015014:	4618      	mov	r0, r3
 8015016:	f002 fc1f 	bl	8017858 <RegionVerify>
 801501a:	4603      	mov	r3, r0
 801501c:	2b00      	cmp	r3, #0
 801501e:	d005      	beq.n	801502c <LoRaMacMibSetRequestConfirm+0x610>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8015020:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015024:	4b46      	ldr	r3, [pc, #280]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 801502a:	e084      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801502c:	2303      	movs	r3, #3
 801502e:	75fb      	strb	r3, [r7, #23]
            break;
 8015030:	e081      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	685b      	ldr	r3, [r3, #4]
 8015036:	4a42      	ldr	r2, [pc, #264]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 801503c:	4b40      	ldr	r3, [pc, #256]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 801503e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015042:	4a3f      	ldr	r2, [pc, #252]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015044:	64d3      	str	r3, [r2, #76]	; 0x4c
            break;
 8015046:	e076      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	791a      	ldrb	r2, [r3, #4]
 801504c:	4b3c      	ldr	r3, [pc, #240]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 801504e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8015052:	4b3b      	ldr	r3, [pc, #236]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015054:	f893 2098 	ldrb.w	r2, [r3, #152]	; 0x98
 8015058:	4b39      	ldr	r3, [pc, #228]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 801505a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            break;
 801505e:	e06a      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	4a36      	ldr	r2, [pc, #216]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015066:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            break;
 801506a:	e064      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	685b      	ldr	r3, [r3, #4]
 8015070:	4a33      	ldr	r2, [pc, #204]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 8015072:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            break;
 8015076:	e05e      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8015078:	f7fe fde0 	bl	8013c3c <RestoreNvmData>
 801507c:	4603      	mov	r3, r0
 801507e:	75fb      	strb	r3, [r7, #23]
            break;
 8015080:	e059      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	799b      	ldrb	r3, [r3, #6]
 8015086:	2b01      	cmp	r3, #1
 8015088:	d80d      	bhi.n	80150a6 <LoRaMacMibSetRequestConfirm+0x68a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 801508a:	4a2d      	ldr	r2, [pc, #180]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6858      	ldr	r0, [r3, #4]
 8015098:	f001 fce0 	bl	8016a5c <LoRaMacCryptoSetLrWanVersion>
 801509c:	4603      	mov	r3, r0
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d048      	beq.n	8015134 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80150a2:	2311      	movs	r3, #17
 80150a4:	e048      	b.n	8015138 <LoRaMacMibSetRequestConfirm+0x71c>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80150a6:	2303      	movs	r3, #3
 80150a8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80150aa:	e043      	b.n	8015134 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	685b      	ldr	r3, [r3, #4]
 80150b0:	4a23      	ldr	r2, [pc, #140]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 80150b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
            break;
 80150b6:	e03e      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	889a      	ldrh	r2, [r3, #4]
 80150bc:	4b20      	ldr	r3, [pc, #128]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 80150be:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
            break;
 80150c2:	e038      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	889a      	ldrh	r2, [r3, #4]
 80150c8:	4b1d      	ldr	r3, [pc, #116]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 80150ca:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
            break;
 80150ce:	e032      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	889a      	ldrh	r2, [r3, #4]
 80150d4:	4b1a      	ldr	r3, [pc, #104]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 80150d6:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
            break;
 80150da:	e02c      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	889a      	ldrh	r2, [r3, #4]
 80150e0:	4b17      	ldr	r3, [pc, #92]	; (8015140 <LoRaMacMibSetRequestConfirm+0x724>)
 80150e2:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
            break;
 80150e6:	e026      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150e8:	2318      	movs	r3, #24
 80150ea:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150ec:	e023      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 80150ee:	2318      	movs	r3, #24
 80150f0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 80150f2:	e020      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 80150f4:	6878      	ldr	r0, [r7, #4]
 80150f6:	f000 fc27 	bl	8015948 <LoRaMacMibClassBSetRequestConfirm>
 80150fa:	4603      	mov	r3, r0
 80150fc:	75fb      	strb	r3, [r7, #23]
            break;
 80150fe:	e01a      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015100:	bf00      	nop
 8015102:	e018      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015104:	bf00      	nop
 8015106:	e016      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015108:	bf00      	nop
 801510a:	e014      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801510c:	bf00      	nop
 801510e:	e012      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015110:	bf00      	nop
 8015112:	e010      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015114:	bf00      	nop
 8015116:	e00e      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015118:	bf00      	nop
 801511a:	e00c      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801511c:	bf00      	nop
 801511e:	e00a      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015120:	bf00      	nop
 8015122:	e008      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015124:	bf00      	nop
 8015126:	e006      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015128:	bf00      	nop
 801512a:	e004      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 801512c:	bf00      	nop
 801512e:	e002      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015130:	bf00      	nop
 8015132:	e000      	b.n	8015136 <LoRaMacMibSetRequestConfirm+0x71a>
            break;
 8015134:	bf00      	nop
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
    }
#endif /* LORAMAC_VERSION */
    return status;
 8015136:	7dfb      	ldrb	r3, [r7, #23]
}
 8015138:	4618      	mov	r0, r3
 801513a:	3718      	adds	r7, #24
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	20000e2c 	.word	0x20000e2c

08015144 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b086      	sub	sp, #24
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 801514c:	2302      	movs	r3, #2
 801514e:	75fb      	strb	r3, [r7, #23]
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8015150:	2300      	movs	r3, #0
 8015152:	81bb      	strh	r3, [r7, #12]

    if( mlmeRequest == NULL )
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d101      	bne.n	801515e <LoRaMacMlmeRequest+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801515a:	2303      	movs	r3, #3
 801515c:	e13a      	b.n	80153d4 <LoRaMacMlmeRequest+0x290>
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 801515e:	f7fc fca5 	bl	8011aac <LoRaMacIsBusy>
 8015162:	4603      	mov	r3, r0
 8015164:	2b00      	cmp	r3, #0
 8015166:	d001      	beq.n	801516c <LoRaMacMlmeRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8015168:	2301      	movs	r3, #1
 801516a:	e133      	b.n	80153d4 <LoRaMacMlmeRequest+0x290>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 801516c:	f001 f90c 	bl	8016388 <LoRaMacConfirmQueueIsFull>
 8015170:	4603      	mov	r3, r0
 8015172:	2b00      	cmp	r3, #0
 8015174:	d001      	beq.n	801517a <LoRaMacMlmeRequest+0x36>
    {
        return LORAMAC_STATUS_BUSY;
 8015176:	2301      	movs	r3, #1
 8015178:	e12c      	b.n	80153d4 <LoRaMacMlmeRequest+0x290>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 801517a:	f001 f8f9 	bl	8016370 <LoRaMacConfirmQueueGetCnt>
 801517e:	4603      	mov	r3, r0
 8015180:	2b00      	cmp	r3, #0
 8015182:	d104      	bne.n	801518e <LoRaMacMlmeRequest+0x4a>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8015184:	2214      	movs	r2, #20
 8015186:	2100      	movs	r1, #0
 8015188:	4894      	ldr	r0, [pc, #592]	; (80153dc <LoRaMacMlmeRequest+0x298>)
 801518a:	f004 fe7f 	bl	8019e8c <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801518e:	4b94      	ldr	r3, [pc, #592]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 8015190:	2201      	movs	r2, #1
 8015192:	f883 2449 	strb.w	r2, [r3, #1097]	; 0x449

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8015196:	4a92      	ldr	r2, [pc, #584]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 8015198:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 801519c:	f043 0304 	orr.w	r3, r3, #4
 80151a0:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    queueElement.Request = mlmeRequest->Type;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	781b      	ldrb	r3, [r3, #0]
 80151a8:	743b      	strb	r3, [r7, #16]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80151aa:	2301      	movs	r3, #1
 80151ac:	747b      	strb	r3, [r7, #17]
    queueElement.RestrictCommonReadyToHandle = false;
 80151ae:	2300      	movs	r3, #0
 80151b0:	74fb      	strb	r3, [r7, #19]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	3b01      	subs	r3, #1
 80151b8:	2b0d      	cmp	r3, #13
 80151ba:	f200 80e1 	bhi.w	8015380 <LoRaMacMlmeRequest+0x23c>
 80151be:	a201      	add	r2, pc, #4	; (adr r2, 80151c4 <LoRaMacMlmeRequest+0x80>)
 80151c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151c4:	080151fd 	.word	0x080151fd
 80151c8:	08015381 	.word	0x08015381
 80151cc:	08015381 	.word	0x08015381
 80151d0:	08015381 	.word	0x08015381
 80151d4:	08015275 	.word	0x08015275
 80151d8:	08015293 	.word	0x08015293
 80151dc:	080152a3 	.word	0x080152a3
 80151e0:	08015381 	.word	0x08015381
 80151e4:	08015381 	.word	0x08015381
 80151e8:	080152bf 	.word	0x080152bf
 80151ec:	08015381 	.word	0x08015381
 80151f0:	08015355 	.word	0x08015355
 80151f4:	080152f5 	.word	0x080152f5
 80151f8:	08015337 	.word	0x08015337
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 80151fc:	4b78      	ldr	r3, [pc, #480]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 80151fe:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8015202:	f003 0320 	and.w	r3, r3, #32
 8015206:	2b00      	cmp	r3, #0
 8015208:	d001      	beq.n	801520e <LoRaMacMlmeRequest+0xca>
            {
                return LORAMAC_STATUS_BUSY;
 801520a:	2301      	movs	r3, #1
 801520c:	e0e2      	b.n	80153d4 <LoRaMacMlmeRequest+0x290>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            ResetMacParameters( false );
 801520e:	2000      	movs	r0, #0
 8015210:	f7fe f95c 	bl	80134cc <ResetMacParameters>

            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8015214:	4b73      	ldr	r3, [pc, #460]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 8015216:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	795b      	ldrb	r3, [r3, #5]
 801521e:	b25b      	sxtb	r3, r3
 8015220:	2200      	movs	r2, #0
 8015222:	4619      	mov	r1, r3
 8015224:	f002 fc00 	bl	8017a28 <RegionAlternateDr>
 8015228:	4603      	mov	r3, r0
 801522a:	461a      	mov	r2, r3
 801522c:	4b6d      	ldr	r3, [pc, #436]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 801522e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
            Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f993 2006 	ldrsb.w	r2, [r3, #6]
 8015238:	4b6a      	ldr	r3, [pc, #424]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 801523a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 801523e:	2307      	movs	r3, #7
 8015240:	747b      	strb	r3, [r7, #17]

            status = SendReJoinReq( JOIN_REQ );
 8015242:	20ff      	movs	r0, #255	; 0xff
 8015244:	f7fd fec0 	bl	8012fc8 <SendReJoinReq>
 8015248:	4603      	mov	r3, r0
 801524a:	75fb      	strb	r3, [r7, #23]

            if( status != LORAMAC_STATUS_OK )
 801524c:	7dfb      	ldrb	r3, [r7, #23]
 801524e:	2b00      	cmp	r3, #0
 8015250:	f000 8098 	beq.w	8015384 <LoRaMacMlmeRequest+0x240>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8015254:	4b63      	ldr	r3, [pc, #396]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 8015256:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	795b      	ldrb	r3, [r3, #5]
 801525e:	b25b      	sxtb	r3, r3
 8015260:	2201      	movs	r2, #1
 8015262:	4619      	mov	r1, r3
 8015264:	f002 fbe0 	bl	8017a28 <RegionAlternateDr>
 8015268:	4603      	mov	r3, r0
 801526a:	461a      	mov	r2, r3
 801526c:	4b5d      	ldr	r3, [pc, #372]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 801526e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8015272:	e087      	b.n	8015384 <LoRaMacMlmeRequest+0x240>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015274:	2300      	movs	r3, #0
 8015276:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8015278:	f107 030c 	add.w	r3, r7, #12
 801527c:	2200      	movs	r2, #0
 801527e:	4619      	mov	r1, r3
 8015280:	2002      	movs	r0, #2
 8015282:	f000 fcd1 	bl	8015c28 <LoRaMacCommandsAddCmd>
 8015286:	4603      	mov	r3, r0
 8015288:	2b00      	cmp	r3, #0
 801528a:	d07d      	beq.n	8015388 <LoRaMacMlmeRequest+0x244>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801528c:	2313      	movs	r3, #19
 801528e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015290:	e07a      	b.n	8015388 <LoRaMacMlmeRequest+0x244>
        }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	889b      	ldrh	r3, [r3, #4]
 8015296:	4618      	mov	r0, r3
 8015298:	f7fe fc7a 	bl	8013b90 <SetTxContinuousWave>
 801529c:	4603      	mov	r3, r0
 801529e:	75fb      	strb	r3, [r7, #23]
            break;
 80152a0:	e079      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
        }
        case MLME_TXCW_1:
        {

            status = SetTxContinuousWave1( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	8898      	ldrh	r0, [r3, #4]
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	6899      	ldr	r1, [r3, #8]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80152b0:	b2db      	uxtb	r3, r3
 80152b2:	461a      	mov	r2, r3
 80152b4:	f7fe fca2 	bl	8013bfc <SetTxContinuousWave1>
 80152b8:	4603      	mov	r3, r0
 80152ba:	75fb      	strb	r3, [r7, #23]
            break;
 80152bc:	e06b      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80152be:	2300      	movs	r3, #0
 80152c0:	75fb      	strb	r3, [r7, #23]
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 80152c2:	f107 0308 	add.w	r3, r7, #8
 80152c6:	4619      	mov	r1, r3
 80152c8:	200d      	movs	r0, #13
 80152ca:	f000 fd2d 	bl	8015d28 <LoRaMacCommandsGetCmd>
 80152ce:	4603      	mov	r3, r0
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d102      	bne.n	80152da <LoRaMacMlmeRequest+0x196>
            {
                status = LORAMAC_STATUS_OK;
 80152d4:	2300      	movs	r3, #0
 80152d6:	75fb      	strb	r3, [r7, #23]
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 80152d8:	e058      	b.n	801538c <LoRaMacMlmeRequest+0x248>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80152da:	f107 030c 	add.w	r3, r7, #12
 80152de:	2200      	movs	r2, #0
 80152e0:	4619      	mov	r1, r3
 80152e2:	200d      	movs	r0, #13
 80152e4:	f000 fca0 	bl	8015c28 <LoRaMacCommandsAddCmd>
 80152e8:	4603      	mov	r3, r0
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d04e      	beq.n	801538c <LoRaMacMlmeRequest+0x248>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80152ee:	2313      	movs	r3, #19
 80152f0:	75fb      	strb	r3, [r7, #23]
            break;
 80152f2:	e04b      	b.n	801538c <LoRaMacMlmeRequest+0x248>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 80152f4:	4b3b      	ldr	r3, [pc, #236]	; (80153e4 <LoRaMacMlmeRequest+0x2a0>)
 80152f6:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	d148      	bne.n	8015390 <LoRaMacMlmeRequest+0x24c>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	791b      	ldrb	r3, [r3, #4]
 8015302:	75bb      	strb	r3, [r7, #22]

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	791b      	ldrb	r3, [r3, #4]
 8015308:	f3c3 0302 	ubfx	r3, r3, #0, #3
 801530c:	b2db      	uxtb	r3, r3
 801530e:	4618      	mov	r0, r3
 8015310:	f000 faef 	bl	80158f2 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8015314:	7dbb      	ldrb	r3, [r7, #22]
 8015316:	733b      	strb	r3, [r7, #12]
                status = LORAMAC_STATUS_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	75fb      	strb	r3, [r7, #23]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801531c:	f107 030c 	add.w	r3, r7, #12
 8015320:	2201      	movs	r2, #1
 8015322:	4619      	mov	r1, r3
 8015324:	2010      	movs	r0, #16
 8015326:	f000 fc7f 	bl	8015c28 <LoRaMacCommandsAddCmd>
 801532a:	4603      	mov	r3, r0
 801532c:	2b00      	cmp	r3, #0
 801532e:	d02f      	beq.n	8015390 <LoRaMacMlmeRequest+0x24c>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8015330:	2313      	movs	r3, #19
 8015332:	75fb      	strb	r3, [r7, #23]
                }
            }
            break;
 8015334:	e02c      	b.n	8015390 <LoRaMacMlmeRequest+0x24c>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 8015336:	2300      	movs	r3, #0
 8015338:	75fb      	strb	r3, [r7, #23]
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 801533a:	f107 030c 	add.w	r3, r7, #12
 801533e:	2200      	movs	r2, #0
 8015340:	4619      	mov	r1, r3
 8015342:	2012      	movs	r0, #18
 8015344:	f000 fc70 	bl	8015c28 <LoRaMacCommandsAddCmd>
 8015348:	4603      	mov	r3, r0
 801534a:	2b00      	cmp	r3, #0
 801534c:	d022      	beq.n	8015394 <LoRaMacMlmeRequest+0x250>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801534e:	2313      	movs	r3, #19
 8015350:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8015352:	e01f      	b.n	8015394 <LoRaMacMlmeRequest+0x250>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 8015354:	2301      	movs	r3, #1
 8015356:	74fb      	strb	r3, [r7, #19]

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8015358:	f000 fa81 	bl	801585e <LoRaMacClassBIsAcquisitionInProgress>
 801535c:	4603      	mov	r3, r0
 801535e:	f083 0301 	eor.w	r3, r3, #1
 8015362:	b2db      	uxtb	r3, r3
 8015364:	2b00      	cmp	r3, #0
 8015366:	d008      	beq.n	801537a <LoRaMacMlmeRequest+0x236>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8015368:	2000      	movs	r0, #0
 801536a:	f000 fa5a 	bl	8015822 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 801536e:	2000      	movs	r0, #0
 8015370:	f000 fa7c 	bl	801586c <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 8015374:	2300      	movs	r3, #0
 8015376:	75fb      	strb	r3, [r7, #23]
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8015378:	e00d      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
                status = LORAMAC_STATUS_BUSY;
 801537a:	2301      	movs	r3, #1
 801537c:	75fb      	strb	r3, [r7, #23]
            break;
 801537e:	e00a      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
        }
        default:
            break;
 8015380:	bf00      	nop
 8015382:	e008      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
            break;
 8015384:	bf00      	nop
 8015386:	e006      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
            break;
 8015388:	bf00      	nop
 801538a:	e004      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
            break;
 801538c:	bf00      	nop
 801538e:	e002      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
            break;
 8015390:	bf00      	nop
 8015392:	e000      	b.n	8015396 <LoRaMacMlmeRequest+0x252>
            break;
 8015394:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8015396:	4b12      	ldr	r3, [pc, #72]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 8015398:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 80153a0:	7dfb      	ldrb	r3, [r7, #23]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d010      	beq.n	80153c8 <LoRaMacMlmeRequest+0x284>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 80153a6:	f000 ffe3 	bl	8016370 <LoRaMacConfirmQueueGetCnt>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d110      	bne.n	80153d2 <LoRaMacMlmeRequest+0x28e>
        {
            MacCtx.NodeAckRequested = false;
 80153b0:	4b0b      	ldr	r3, [pc, #44]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 80153b2:	2200      	movs	r2, #0
 80153b4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 80153b8:	4a09      	ldr	r2, [pc, #36]	; (80153e0 <LoRaMacMlmeRequest+0x29c>)
 80153ba:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80153be:	f36f 0382 	bfc	r3, #2, #1
 80153c2:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80153c6:	e004      	b.n	80153d2 <LoRaMacMlmeRequest+0x28e>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 80153c8:	f107 0310 	add.w	r3, r7, #16
 80153cc:	4618      	mov	r0, r3
 80153ce:	f000 fe7b 	bl	80160c8 <LoRaMacConfirmQueueAdd>
    }
    return status;
 80153d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80153d4:	4618      	mov	r0, r3
 80153d6:	3718      	adds	r7, #24
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}
 80153dc:	20000d6c 	.word	0x20000d6c
 80153e0:	20000924 	.word	0x20000924
 80153e4:	20000e2c 	.word	0x20000e2c

080153e8 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b08c      	sub	sp, #48	; 0x30
 80153ec:	af02      	add	r7, sp, #8
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	460b      	mov	r3, r1
 80153f2:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 80153f4:	2302      	movs	r3, #2
 80153f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 80153fa:	2300      	movs	r3, #0
 80153fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    void* fBuffer = NULL;
 8015400:	2300      	movs	r3, #0
 8015402:	623b      	str	r3, [r7, #32]
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8015404:	2300      	movs	r3, #0
 8015406:	777b      	strb	r3, [r7, #29]
    bool readyToSend = false;
 8015408:	2300      	movs	r3, #0
 801540a:	773b      	strb	r3, [r7, #28]

    if( mcpsRequest == NULL )
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d101      	bne.n	8015416 <LoRaMacMcpsRequest+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8015412:	2303      	movs	r3, #3
 8015414:	e0d4      	b.n	80155c0 <LoRaMacMcpsRequest+0x1d8>
    }
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    if( LoRaMacIsBusy( ) == true )
 8015416:	f7fc fb49 	bl	8011aac <LoRaMacIsBusy>
 801541a:	4603      	mov	r3, r0
 801541c:	2b00      	cmp	r3, #0
 801541e:	d001      	beq.n	8015424 <LoRaMacMcpsRequest+0x3c>
    {
        return LORAMAC_STATUS_BUSY;
 8015420:	2301      	movs	r3, #1
 8015422:	e0cd      	b.n	80155c0 <LoRaMacMcpsRequest+0x1d8>
    }

    macHdr.Value = 0;
 8015424:	2300      	movs	r3, #0
 8015426:	733b      	strb	r3, [r7, #12]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8015428:	2214      	movs	r2, #20
 801542a:	2100      	movs	r1, #0
 801542c:	4866      	ldr	r0, [pc, #408]	; (80155c8 <LoRaMacMcpsRequest+0x1e0>)
 801542e:	f004 fd2d 	bl	8019e8c <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8015432:	4b66      	ldr	r3, [pc, #408]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 8015434:	2201      	movs	r2, #1
 8015436:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435

    // AckTimeoutRetriesCounter must be reset every time a new request (unconfirmed or confirmed) is performed.
    MacCtx.AckTimeoutRetriesCounter = 1;
 801543a:	4b64      	ldr	r3, [pc, #400]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 801543c:	2201      	movs	r2, #1
 801543e:	f883 240e 	strb.w	r2, [r3, #1038]	; 0x40e

    switch( mcpsRequest->Type )
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	781b      	ldrb	r3, [r3, #0]
 8015446:	2b03      	cmp	r3, #3
 8015448:	d03d      	beq.n	80154c6 <LoRaMacMcpsRequest+0xde>
 801544a:	2b03      	cmp	r3, #3
 801544c:	dc4f      	bgt.n	80154ee <LoRaMacMcpsRequest+0x106>
 801544e:	2b00      	cmp	r3, #0
 8015450:	d002      	beq.n	8015458 <LoRaMacMcpsRequest+0x70>
 8015452:	2b01      	cmp	r3, #1
 8015454:	d019      	beq.n	801548a <LoRaMacMcpsRequest+0xa2>
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
            datarate = mcpsRequest->Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8015456:	e04a      	b.n	80154ee <LoRaMacMcpsRequest+0x106>
            readyToSend = true;
 8015458:	2301      	movs	r3, #1
 801545a:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 801545c:	4b5b      	ldr	r3, [pc, #364]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 801545e:	2201      	movs	r2, #1
 8015460:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8015464:	7b3b      	ldrb	r3, [r7, #12]
 8015466:	2202      	movs	r2, #2
 8015468:	f362 1347 	bfi	r3, r2, #5, #3
 801546c:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Unconfirmed.fPort;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	791b      	ldrb	r3, [r3, #4]
 8015472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Unconfirmed.fBuffer;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	689b      	ldr	r3, [r3, #8]
 801547a:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Unconfirmed.fBufferSize;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	899b      	ldrh	r3, [r3, #12]
 8015480:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Unconfirmed.Datarate;
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	7b9b      	ldrb	r3, [r3, #14]
 8015486:	777b      	strb	r3, [r7, #29]
            break;
 8015488:	e032      	b.n	80154f0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 801548a:	2301      	movs	r3, #1
 801548c:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	7bdb      	ldrb	r3, [r3, #15]
 8015492:	2b08      	cmp	r3, #8
 8015494:	bf28      	it	cs
 8015496:	2308      	movcs	r3, #8
 8015498:	b2da      	uxtb	r2, r3
 801549a:	4b4c      	ldr	r3, [pc, #304]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 801549c:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 80154a0:	7b3b      	ldrb	r3, [r7, #12]
 80154a2:	2204      	movs	r2, #4
 80154a4:	f362 1347 	bfi	r3, r2, #5, #3
 80154a8:	733b      	strb	r3, [r7, #12]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	791b      	ldrb	r3, [r3, #4]
 80154ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	689b      	ldr	r3, [r3, #8]
 80154b6:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	899b      	ldrh	r3, [r3, #12]
 80154bc:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	7b9b      	ldrb	r3, [r3, #14]
 80154c2:	777b      	strb	r3, [r7, #29]
            break;
 80154c4:	e014      	b.n	80154f0 <LoRaMacMcpsRequest+0x108>
            readyToSend = true;
 80154c6:	2301      	movs	r3, #1
 80154c8:	773b      	strb	r3, [r7, #28]
            MacCtx.AckTimeoutRetries = 1;
 80154ca:	4b40      	ldr	r3, [pc, #256]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 80154cc:	2201      	movs	r2, #1
 80154ce:	f883 240d 	strb.w	r2, [r3, #1037]	; 0x40d
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 80154d2:	7b3b      	ldrb	r3, [r7, #12]
 80154d4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80154d8:	733b      	strb	r3, [r7, #12]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	685b      	ldr	r3, [r3, #4]
 80154de:	623b      	str	r3, [r7, #32]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	891b      	ldrh	r3, [r3, #8]
 80154e4:	83fb      	strh	r3, [r7, #30]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	7a9b      	ldrb	r3, [r3, #10]
 80154ea:	777b      	strb	r3, [r7, #29]
            break;
 80154ec:	e000      	b.n	80154f0 <LoRaMacMcpsRequest+0x108>
            break;
 80154ee:	bf00      	nop
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80154f0:	2302      	movs	r3, #2
 80154f2:	753b      	strb	r3, [r7, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80154f4:	4b36      	ldr	r3, [pc, #216]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 80154f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80154fa:	75bb      	strb	r3, [r7, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80154fc:	4b34      	ldr	r3, [pc, #208]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 80154fe:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8015502:	f107 0214 	add.w	r2, r7, #20
 8015506:	4611      	mov	r1, r2
 8015508:	4618      	mov	r0, r3
 801550a:	f002 f96a 	bl	80177e2 <RegionGetPhyParam>
 801550e:	4603      	mov	r3, r0
 8015510:	613b      	str	r3, [r7, #16]
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8015512:	693b      	ldr	r3, [r7, #16]
 8015514:	b25b      	sxtb	r3, r3
 8015516:	f997 201d 	ldrsb.w	r2, [r7, #29]
 801551a:	4293      	cmp	r3, r2
 801551c:	bfb8      	it	lt
 801551e:	4613      	movlt	r3, r2
 8015520:	777b      	strb	r3, [r7, #29]

    if( readyToSend == true )
 8015522:	7f3b      	ldrb	r3, [r7, #28]
 8015524:	2b00      	cmp	r3, #0
 8015526:	d044      	beq.n	80155b2 <LoRaMacMcpsRequest+0x1ca>
    {
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 8015528:	4b29      	ldr	r3, [pc, #164]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 801552a:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 801552e:	f083 0301 	eor.w	r3, r3, #1
 8015532:	b2db      	uxtb	r3, r3
 8015534:	2b00      	cmp	r3, #0
 8015536:	d019      	beq.n	801556c <LoRaMacMcpsRequest+0x184>
        {
            verify.DatarateParams.Datarate = datarate;
 8015538:	7f7b      	ldrb	r3, [r7, #29]
 801553a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801553c:	4b24      	ldr	r3, [pc, #144]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 801553e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8015542:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8015544:	4b22      	ldr	r3, [pc, #136]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 8015546:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801554a:	f107 0108 	add.w	r1, r7, #8
 801554e:	2205      	movs	r2, #5
 8015550:	4618      	mov	r0, r3
 8015552:	f002 f981 	bl	8017858 <RegionVerify>
 8015556:	4603      	mov	r3, r0
 8015558:	2b00      	cmp	r3, #0
 801555a:	d005      	beq.n	8015568 <LoRaMacMcpsRequest+0x180>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801555c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8015560:	4b1b      	ldr	r3, [pc, #108]	; (80155d0 <LoRaMacMcpsRequest+0x1e8>)
 8015562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8015566:	e001      	b.n	801556c <LoRaMacMcpsRequest+0x184>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8015568:	2303      	movs	r3, #3
 801556a:	e029      	b.n	80155c0 <LoRaMacMcpsRequest+0x1d8>
            }
        }

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 801556c:	8bfa      	ldrh	r2, [r7, #30]
 801556e:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8015572:	f107 000c 	add.w	r0, r7, #12
 8015576:	78fb      	ldrb	r3, [r7, #3]
 8015578:	9300      	str	r3, [sp, #0]
 801557a:	4613      	mov	r3, r2
 801557c:	6a3a      	ldr	r2, [r7, #32]
 801557e:	f7fd fc45 	bl	8012e0c <Send>
 8015582:	4603      	mov	r3, r0
 8015584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if( status == LORAMAC_STATUS_OK )
 8015588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801558c:	2b00      	cmp	r3, #0
 801558e:	d10c      	bne.n	80155aa <LoRaMacMcpsRequest+0x1c2>
        {
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	781a      	ldrb	r2, [r3, #0]
 8015594:	4b0d      	ldr	r3, [pc, #52]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 8015596:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
            MacCtx.MacFlags.Bits.McpsReq = 1;
 801559a:	4a0c      	ldr	r2, [pc, #48]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 801559c:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 80155a0:	f043 0301 	orr.w	r3, r3, #1
 80155a4:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
 80155a8:	e003      	b.n	80155b2 <LoRaMacMcpsRequest+0x1ca>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80155aa:	4b08      	ldr	r3, [pc, #32]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 80155ac:	2200      	movs	r2, #0
 80155ae:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80155b2:	4b06      	ldr	r3, [pc, #24]	; (80155cc <LoRaMacMcpsRequest+0x1e4>)
 80155b4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	611a      	str	r2, [r3, #16]

    return status;
 80155bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80155c0:	4618      	mov	r0, r3
 80155c2:	3728      	adds	r7, #40	; 0x28
 80155c4:	46bd      	mov	sp, r7
 80155c6:	bd80      	pop	{r7, pc}
 80155c8:	20000d58 	.word	0x20000d58
 80155cc:	20000924 	.word	0x20000924
 80155d0:	20000e2c 	.word	0x20000e2c

080155d4 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80155d4:	b580      	push	{r7, lr}
 80155d6:	b084      	sub	sp, #16
 80155d8:	af00      	add	r7, sp, #0
 80155da:	4603      	mov	r3, r0
 80155dc:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80155de:	79fb      	ldrb	r3, [r7, #7]
 80155e0:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80155e2:	4b0d      	ldr	r3, [pc, #52]	; (8015618 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155e4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80155e8:	f107 010c 	add.w	r1, r7, #12
 80155ec:	220f      	movs	r2, #15
 80155ee:	4618      	mov	r0, r3
 80155f0:	f002 f932 	bl	8017858 <RegionVerify>
 80155f4:	4603      	mov	r3, r0
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d00a      	beq.n	8015610 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 80155fa:	4a07      	ldr	r2, [pc, #28]	; (8015618 <LoRaMacTestSetDutyCycleOn+0x44>)
 80155fc:	79fb      	ldrb	r3, [r7, #7]
 80155fe:	f882 311c 	strb.w	r3, [r2, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8015602:	4a06      	ldr	r2, [pc, #24]	; (801561c <LoRaMacTestSetDutyCycleOn+0x48>)
 8015604:	f892 3481 	ldrb.w	r3, [r2, #1153]	; 0x481
 8015608:	f043 0320 	orr.w	r3, r3, #32
 801560c:	f882 3481 	strb.w	r3, [r2, #1153]	; 0x481
    }
}
 8015610:	bf00      	nop
 8015612:	3710      	adds	r7, #16
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	20000e2c 	.word	0x20000e2c
 801561c:	20000924 	.word	0x20000924

08015620 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8015620:	b580      	push	{r7, lr}
 8015622:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8015624:	f7fe ff6c 	bl	8014500 <LoRaMacStop>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	d115      	bne.n	801565a <LoRaMacDeInitialization+0x3a>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 801562e:	480c      	ldr	r0, [pc, #48]	; (8015660 <LoRaMacDeInitialization+0x40>)
 8015630:	f008 fd8c 	bl	801e14c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8015634:	480b      	ldr	r0, [pc, #44]	; (8015664 <LoRaMacDeInitialization+0x44>)
 8015636:	f008 fd89 	bl	801e14c <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801563a:	480b      	ldr	r0, [pc, #44]	; (8015668 <LoRaMacDeInitialization+0x48>)
 801563c:	f008 fd86 	bl	801e14c <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
 8015640:	480a      	ldr	r0, [pc, #40]	; (801566c <LoRaMacDeInitialization+0x4c>)
 8015642:	f008 fd83 	bl	801e14c <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8015646:	f000 f95e 	bl	8015906 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( false );
 801564a:	2000      	movs	r0, #0
 801564c:	f7fd ff3e 	bl	80134cc <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 8015650:	4b07      	ldr	r3, [pc, #28]	; (8015670 <LoRaMacDeInitialization+0x50>)
 8015652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015654:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8015656:	2300      	movs	r3, #0
 8015658:	e000      	b.n	801565c <LoRaMacDeInitialization+0x3c>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 801565a:	2301      	movs	r3, #1
    }
}
 801565c:	4618      	mov	r0, r3
 801565e:	bd80      	pop	{r7, pc}
 8015660:	20000c8c 	.word	0x20000c8c
 8015664:	20000ca4 	.word	0x20000ca4
 8015668:	20000cbc 	.word	0x20000cbc
 801566c:	20000d18 	.word	0x20000d18
 8015670:	0801f9f0 	.word	0x0801f9f0

08015674 <CalcNextV10X>:
#include "LoRaMacAdr.h"
#include "LoRaMacVersion.h"

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
static bool CalcNextV10X( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b08c      	sub	sp, #48	; 0x30
 8015678:	af00      	add	r7, sp, #0
 801567a:	60f8      	str	r0, [r7, #12]
 801567c:	60b9      	str	r1, [r7, #8]
 801567e:	607a      	str	r2, [r7, #4]
 8015680:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 8015682:	2300      	movs	r3, #0
 8015684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    int8_t datarate = adrNext->Datarate;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	7c1b      	ldrb	r3, [r3, #16]
 801568c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    int8_t txPower = adrNext->TxPower;
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	7c5b      	ldrb	r3, [r3, #17]
 8015694:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	689a      	ldr	r2, [r3, #8]
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	795b      	ldrb	r3, [r3, #5]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	f000 808b 	beq.w	80157c0 <CalcNextV10X+0x14c>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80156aa:	2302      	movs	r3, #2
 80156ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	7c9b      	ldrb	r3, [r3, #18]
 80156b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	7cdb      	ldrb	r3, [r3, #19]
 80156bc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156c0:	4611      	mov	r1, r2
 80156c2:	4618      	mov	r0, r3
 80156c4:	f002 f88d 	bl	80177e2 <RegionGetPhyParam>
 80156c8:	4603      	mov	r3, r0
 80156ca:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80156cc:	6a3b      	ldr	r3, [r7, #32]
 80156ce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
        datarate = MAX( datarate, minTxDatarate );
 80156d2:	f997 202c 	ldrsb.w	r2, [r7, #44]	; 0x2c
 80156d6:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 80156da:	4293      	cmp	r3, r2
 80156dc:	bfb8      	it	lt
 80156de:	4613      	movlt	r3, r2
 80156e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        if( datarate == minTxDatarate )
 80156e4:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 80156e8:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d106      	bne.n	80156fe <CalcNextV10X+0x8a>
        {
            *adrAckCounter = 0;
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	2200      	movs	r2, #0
 80156f4:	601a      	str	r2, [r3, #0]
            adrAckReq = false;
 80156f6:	2300      	movs	r3, #0
 80156f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80156fc:	e060      	b.n	80157c0 <CalcNextV10X+0x14c>
        }
        else
        {
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	68fa      	ldr	r2, [r7, #12]
 8015704:	8992      	ldrh	r2, [r2, #12]
 8015706:	4293      	cmp	r3, r2
 8015708:	d303      	bcc.n	8015712 <CalcNextV10X+0x9e>
            {
                adrAckReq = true;
 801570a:	2301      	movs	r3, #1
 801570c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015710:	e002      	b.n	8015718 <CalcNextV10X+0xa4>
            }
            else
            {
                adrAckReq = false;
 8015712:	2300      	movs	r3, #0
 8015714:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            }
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	689b      	ldr	r3, [r3, #8]
 801571c:	68fa      	ldr	r2, [r7, #12]
 801571e:	8992      	ldrh	r2, [r2, #12]
 8015720:	4611      	mov	r1, r2
 8015722:	68fa      	ldr	r2, [r7, #12]
 8015724:	89d2      	ldrh	r2, [r2, #14]
 8015726:	440a      	add	r2, r1
 8015728:	4293      	cmp	r3, r2
 801572a:	d349      	bcc.n	80157c0 <CalcNextV10X+0x14c>
            {
                // Set TX Power to maximum
                getPhy.Attribute = PHY_MAX_TX_POWER;
 801572c:	2308      	movs	r3, #8
 801572e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	7cdb      	ldrb	r3, [r3, #19]
 8015736:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801573a:	4611      	mov	r1, r2
 801573c:	4618      	mov	r0, r3
 801573e:	f002 f850 	bl	80177e2 <RegionGetPhyParam>
 8015742:	4603      	mov	r3, r0
 8015744:	623b      	str	r3, [r7, #32]
                txPower = phyParam.Value;
 8015746:	6a3b      	ldr	r3, [r7, #32]
 8015748:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	689b      	ldr	r3, [r3, #8]
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	89d2      	ldrh	r2, [r2, #14]
 8015754:	fbb3 f1f2 	udiv	r1, r3, r2
 8015758:	fb01 f202 	mul.w	r2, r1, r2
 801575c:	1a9b      	subs	r3, r3, r2
 801575e:	2b01      	cmp	r3, #1
 8015760:	d12e      	bne.n	80157c0 <CalcNextV10X+0x14c>
                {
                    // Decrease the datarate
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8015762:	2322      	movs	r3, #34	; 0x22
 8015764:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
                    getPhy.Datarate = datarate;
 8015768:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 801576c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	7c9b      	ldrb	r3, [r3, #18]
 8015774:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	7cdb      	ldrb	r3, [r3, #19]
 801577c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015780:	4611      	mov	r1, r2
 8015782:	4618      	mov	r0, r3
 8015784:	f002 f82d 	bl	80177e2 <RegionGetPhyParam>
 8015788:	4603      	mov	r3, r0
 801578a:	623b      	str	r3, [r7, #32]
                    datarate = phyParam.Value;
 801578c:	6a3b      	ldr	r3, [r7, #32]
 801578e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

                    if( datarate == minTxDatarate )
 8015792:	f997 202e 	ldrsb.w	r2, [r7, #46]	; 0x2e
 8015796:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 801579a:	429a      	cmp	r2, r3
 801579c:	d110      	bne.n	80157c0 <CalcNextV10X+0x14c>
                    {
                        // We must set adrAckReq to false as soon as we reach the lowest datarate
                        adrAckReq = false;
 801579e:	2300      	movs	r3, #0
 80157a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                        if( adrNext->UpdateChanMask == true )
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	791b      	ldrb	r3, [r3, #4]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d009      	beq.n	80157c0 <CalcNextV10X+0x14c>
                        {
                            InitDefaultsParams_t params;
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 80157ac:	2302      	movs	r3, #2
 80157ae:	773b      	strb	r3, [r7, #28]
                            RegionInitDefaults( adrNext->Region, &params );
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	7cdb      	ldrb	r3, [r3, #19]
 80157b4:	f107 0214 	add.w	r2, r7, #20
 80157b8:	4611      	mov	r1, r2
 80157ba:	4618      	mov	r0, r3
 80157bc:	f002 f83a 	bl	8017834 <RegionInitDefaults>
                }
            }
        }
    }

    *drOut = datarate;
 80157c0:	68bb      	ldr	r3, [r7, #8]
 80157c2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80157c6:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80157ce:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80157d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80157d4:	4618      	mov	r0, r3
 80157d6:	3730      	adds	r7, #48	; 0x30
 80157d8:	46bd      	mov	sp, r7
 80157da:	bd80      	pop	{r7, pc}

080157dc <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 80157dc:	b580      	push	{r7, lr}
 80157de:	b084      	sub	sp, #16
 80157e0:	af00      	add	r7, sp, #0
 80157e2:	60f8      	str	r0, [r7, #12]
 80157e4:	60b9      	str	r1, [r7, #8]
 80157e6:	607a      	str	r2, [r7, #4]
 80157e8:	603b      	str	r3, [r7, #0]
    if( adrNext->Version.Fields.Minor == 0 )
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	789b      	ldrb	r3, [r3, #2]
 80157ee:	2b00      	cmp	r3, #0
 80157f0:	d107      	bne.n	8015802 <LoRaMacAdrCalcNext+0x26>
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	687a      	ldr	r2, [r7, #4]
 80157f6:	68b9      	ldr	r1, [r7, #8]
 80157f8:	68f8      	ldr	r0, [r7, #12]
 80157fa:	f7ff ff3b 	bl	8015674 <CalcNextV10X>
 80157fe:	4603      	mov	r3, r0
 8015800:	e000      	b.n	8015804 <LoRaMacAdrCalcNext+0x28>
    }
    return false;
 8015802:	2300      	movs	r3, #0
}
 8015804:	4618      	mov	r0, r3
 8015806:	3710      	adds	r7, #16
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 801580c:	b480      	push	{r7}
 801580e:	b085      	sub	sp, #20
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015818:	bf00      	nop
 801581a:	3714      	adds	r7, #20
 801581c:	46bd      	mov	sp, r7
 801581e:	bc80      	pop	{r7}
 8015820:	4770      	bx	lr

08015822 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 8015822:	b480      	push	{r7}
 8015824:	b083      	sub	sp, #12
 8015826:	af00      	add	r7, sp, #0
 8015828:	4603      	mov	r3, r0
 801582a:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801582c:	bf00      	nop
 801582e:	370c      	adds	r7, #12
 8015830:	46bd      	mov	sp, r7
 8015832:	bc80      	pop	{r7}
 8015834:	4770      	bx	lr

08015836 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8015836:	b480      	push	{r7}
 8015838:	b083      	sub	sp, #12
 801583a:	af00      	add	r7, sp, #0
 801583c:	4603      	mov	r3, r0
 801583e:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015840:	bf00      	nop
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	bc80      	pop	{r7}
 8015848:	4770      	bx	lr

0801584a <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801584a:	b480      	push	{r7}
 801584c:	b083      	sub	sp, #12
 801584e:	af00      	add	r7, sp, #0
 8015850:	4603      	mov	r3, r0
 8015852:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015854:	bf00      	nop
 8015856:	370c      	adds	r7, #12
 8015858:	46bd      	mov	sp, r7
 801585a:	bc80      	pop	{r7}
 801585c:	4770      	bx	lr

0801585e <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 801585e:	b480      	push	{r7}
 8015860:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8015862:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015864:	4618      	mov	r0, r3
 8015866:	46bd      	mov	sp, r7
 8015868:	bc80      	pop	{r7}
 801586a:	4770      	bx	lr

0801586c <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801586c:	b480      	push	{r7}
 801586e:	b083      	sub	sp, #12
 8015870:	af00      	add	r7, sp, #0
 8015872:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015874:	bf00      	nop
 8015876:	370c      	adds	r7, #12
 8015878:	46bd      	mov	sp, r7
 801587a:	bc80      	pop	{r7}
 801587c:	4770      	bx	lr

0801587e <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 801587e:	b480      	push	{r7}
 8015880:	b083      	sub	sp, #12
 8015882:	af00      	add	r7, sp, #0
 8015884:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015886:	bf00      	nop
 8015888:	370c      	adds	r7, #12
 801588a:	46bd      	mov	sp, r7
 801588c:	bc80      	pop	{r7}
 801588e:	4770      	bx	lr

08015890 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8015890:	b480      	push	{r7}
 8015892:	b083      	sub	sp, #12
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015898:	bf00      	nop
 801589a:	370c      	adds	r7, #12
 801589c:	46bd      	mov	sp, r7
 801589e:	bc80      	pop	{r7}
 80158a0:	4770      	bx	lr

080158a2 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 80158a2:	b480      	push	{r7}
 80158a4:	b083      	sub	sp, #12
 80158a6:	af00      	add	r7, sp, #0
 80158a8:	6078      	str	r0, [r7, #4]
 80158aa:	460b      	mov	r3, r1
 80158ac:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 80158ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158b0:	4618      	mov	r0, r3
 80158b2:	370c      	adds	r7, #12
 80158b4:	46bd      	mov	sp, r7
 80158b6:	bc80      	pop	{r7}
 80158b8:	4770      	bx	lr

080158ba <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 80158ba:	b480      	push	{r7}
 80158bc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158be:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158c0:	4618      	mov	r0, r3
 80158c2:	46bd      	mov	sp, r7
 80158c4:	bc80      	pop	{r7}
 80158c6:	4770      	bx	lr

080158c8 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 80158c8:	b480      	push	{r7}
 80158ca:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158cc:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ce:	4618      	mov	r0, r3
 80158d0:	46bd      	mov	sp, r7
 80158d2:	bc80      	pop	{r7}
 80158d4:	4770      	bx	lr

080158d6 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80158d6:	b480      	push	{r7}
 80158d8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158da:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158dc:	4618      	mov	r0, r3
 80158de:	46bd      	mov	sp, r7
 80158e0:	bc80      	pop	{r7}
 80158e2:	4770      	bx	lr

080158e4 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80158e4:	b480      	push	{r7}
 80158e6:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80158e8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	46bd      	mov	sp, r7
 80158ee:	bc80      	pop	{r7}
 80158f0:	4770      	bx	lr

080158f2 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80158f2:	b480      	push	{r7}
 80158f4:	b083      	sub	sp, #12
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	4603      	mov	r3, r0
 80158fa:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80158fc:	bf00      	nop
 80158fe:	370c      	adds	r7, #12
 8015900:	46bd      	mov	sp, r7
 8015902:	bc80      	pop	{r7}
 8015904:	4770      	bx	lr

08015906 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 8015906:	b480      	push	{r7}
 8015908:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801590a:	bf00      	nop
 801590c:	46bd      	mov	sp, r7
 801590e:	bc80      	pop	{r7}
 8015910:	4770      	bx	lr

08015912 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 8015912:	b480      	push	{r7}
 8015914:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015916:	bf00      	nop
 8015918:	46bd      	mov	sp, r7
 801591a:	bc80      	pop	{r7}
 801591c:	4770      	bx	lr

0801591e <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 801591e:	b480      	push	{r7}
 8015920:	b083      	sub	sp, #12
 8015922:	af00      	add	r7, sp, #0
 8015924:	4603      	mov	r3, r0
 8015926:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015928:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801592a:	4618      	mov	r0, r3
 801592c:	370c      	adds	r7, #12
 801592e:	46bd      	mov	sp, r7
 8015930:	bc80      	pop	{r7}
 8015932:	4770      	bx	lr

08015934 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8015934:	b480      	push	{r7}
 8015936:	b083      	sub	sp, #12
 8015938:	af00      	add	r7, sp, #0
 801593a:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801593c:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801593e:	4618      	mov	r0, r3
 8015940:	370c      	adds	r7, #12
 8015942:	46bd      	mov	sp, r7
 8015944:	bc80      	pop	{r7}
 8015946:	4770      	bx	lr

08015948 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 8015948:	b480      	push	{r7}
 801594a:	b083      	sub	sp, #12
 801594c:	af00      	add	r7, sp, #0
 801594e:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8015950:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015952:	4618      	mov	r0, r3
 8015954:	370c      	adds	r7, #12
 8015956:	46bd      	mov	sp, r7
 8015958:	bc80      	pop	{r7}
 801595a:	4770      	bx	lr

0801595c <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801595c:	b480      	push	{r7}
 801595e:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015960:	bf00      	nop
 8015962:	46bd      	mov	sp, r7
 8015964:	bc80      	pop	{r7}
 8015966:	4770      	bx	lr

08015968 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	4603      	mov	r3, r0
 8015970:	6039      	str	r1, [r7, #0]
 8015972:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8015974:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015976:	4618      	mov	r0, r3
 8015978:	370c      	adds	r7, #12
 801597a:	46bd      	mov	sp, r7
 801597c:	bc80      	pop	{r7}
 801597e:	4770      	bx	lr

08015980 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8015980:	b480      	push	{r7}
 8015982:	b083      	sub	sp, #12
 8015984:	af00      	add	r7, sp, #0
 8015986:	4603      	mov	r3, r0
 8015988:	603a      	str	r2, [r7, #0]
 801598a:	80fb      	strh	r3, [r7, #6]
 801598c:	460b      	mov	r3, r1
 801598e:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8015990:	bf00      	nop
 8015992:	370c      	adds	r7, #12
 8015994:	46bd      	mov	sp, r7
 8015996:	bc80      	pop	{r7}
 8015998:	4770      	bx	lr

0801599a <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801599a:	b480      	push	{r7}
 801599c:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801599e:	bf00      	nop
 80159a0:	46bd      	mov	sp, r7
 80159a2:	bc80      	pop	{r7}
 80159a4:	4770      	bx	lr

080159a6 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 80159a6:	b480      	push	{r7}
 80159a8:	b083      	sub	sp, #12
 80159aa:	af00      	add	r7, sp, #0
 80159ac:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 80159ae:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	bc80      	pop	{r7}
 80159b8:	4770      	bx	lr

080159ba <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 80159ba:	b480      	push	{r7}
 80159bc:	b083      	sub	sp, #12
 80159be:	af00      	add	r7, sp, #0
 80159c0:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 80159c2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159c4:	4618      	mov	r0, r3
 80159c6:	370c      	adds	r7, #12
 80159c8:	46bd      	mov	sp, r7
 80159ca:	bc80      	pop	{r7}
 80159cc:	4770      	bx	lr

080159ce <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80159ce:	b480      	push	{r7}
 80159d0:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159d2:	bf00      	nop
 80159d4:	46bd      	mov	sp, r7
 80159d6:	bc80      	pop	{r7}
 80159d8:	4770      	bx	lr

080159da <LoRaMacClassBProcess>:
#endif /* LORAMAC_CLASSB_ENABLED */
}
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80159da:	b480      	push	{r7}
 80159dc:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80159de:	bf00      	nop
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bc80      	pop	{r7}
 80159e4:	4770      	bx	lr

080159e6 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80159e6:	b480      	push	{r7}
 80159e8:	b085      	sub	sp, #20
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80159f2:	2300      	movs	r3, #0
 80159f4:	81fb      	strh	r3, [r7, #14]
 80159f6:	e00a      	b.n	8015a0e <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80159f8:	89fb      	ldrh	r3, [r7, #14]
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	4413      	add	r3, r2
 80159fe:	781b      	ldrb	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d001      	beq.n	8015a08 <IsSlotFree+0x22>
        {
            return false;
 8015a04:	2300      	movs	r3, #0
 8015a06:	e006      	b.n	8015a16 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8015a08:	89fb      	ldrh	r3, [r7, #14]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	81fb      	strh	r3, [r7, #14]
 8015a0e:	89fb      	ldrh	r3, [r7, #14]
 8015a10:	2b0f      	cmp	r3, #15
 8015a12:	d9f1      	bls.n	80159f8 <IsSlotFree+0x12>
        }
    }
    return true;
 8015a14:	2301      	movs	r3, #1
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3714      	adds	r7, #20
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bc80      	pop	{r7}
 8015a1e:	4770      	bx	lr

08015a20 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b082      	sub	sp, #8
 8015a24:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 8015a26:	2300      	movs	r3, #0
 8015a28:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a2a:	e007      	b.n	8015a3c <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8015a2c:	79fb      	ldrb	r3, [r7, #7]
 8015a2e:	3301      	adds	r3, #1
 8015a30:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 8015a32:	79fb      	ldrb	r3, [r7, #7]
 8015a34:	2b0f      	cmp	r3, #15
 8015a36:	d101      	bne.n	8015a3c <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	e012      	b.n	8015a62 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8015a3c:	79fb      	ldrb	r3, [r7, #7]
 8015a3e:	011b      	lsls	r3, r3, #4
 8015a40:	3308      	adds	r3, #8
 8015a42:	4a0a      	ldr	r2, [pc, #40]	; (8015a6c <MallocNewMacCommandSlot+0x4c>)
 8015a44:	4413      	add	r3, r2
 8015a46:	4618      	mov	r0, r3
 8015a48:	f7ff ffcd 	bl	80159e6 <IsSlotFree>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	f083 0301 	eor.w	r3, r3, #1
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d1e9      	bne.n	8015a2c <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8015a58:	79fb      	ldrb	r3, [r7, #7]
 8015a5a:	011b      	lsls	r3, r3, #4
 8015a5c:	3308      	adds	r3, #8
 8015a5e:	4a03      	ldr	r2, [pc, #12]	; (8015a6c <MallocNewMacCommandSlot+0x4c>)
 8015a60:	4413      	add	r3, r2
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	3708      	adds	r7, #8
 8015a66:	46bd      	mov	sp, r7
 8015a68:	bd80      	pop	{r7, pc}
 8015a6a:	bf00      	nop
 8015a6c:	200015ac 	.word	0x200015ac

08015a70 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b082      	sub	sp, #8
 8015a74:	af00      	add	r7, sp, #0
 8015a76:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d101      	bne.n	8015a82 <FreeMacCommandSlot+0x12>
    {
        return false;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	e005      	b.n	8015a8e <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8015a82:	2210      	movs	r2, #16
 8015a84:	2100      	movs	r1, #0
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f004 fa00 	bl	8019e8c <memset1>

    return true;
 8015a8c:	2301      	movs	r3, #1
}
 8015a8e:	4618      	mov	r0, r3
 8015a90:	3708      	adds	r7, #8
 8015a92:	46bd      	mov	sp, r7
 8015a94:	bd80      	pop	{r7, pc}

08015a96 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 8015a96:	b480      	push	{r7}
 8015a98:	b083      	sub	sp, #12
 8015a9a:	af00      	add	r7, sp, #0
 8015a9c:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d101      	bne.n	8015aa8 <LinkedListInit+0x12>
    {
        return false;
 8015aa4:	2300      	movs	r3, #0
 8015aa6:	e006      	b.n	8015ab6 <LinkedListInit+0x20>
    }

    list->First = NULL;
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	2200      	movs	r2, #0
 8015aac:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8015aae:	687b      	ldr	r3, [r7, #4]
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	605a      	str	r2, [r3, #4]

    return true;
 8015ab4:	2301      	movs	r3, #1
}
 8015ab6:	4618      	mov	r0, r3
 8015ab8:	370c      	adds	r7, #12
 8015aba:	46bd      	mov	sp, r7
 8015abc:	bc80      	pop	{r7}
 8015abe:	4770      	bx	lr

08015ac0 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b083      	sub	sp, #12
 8015ac4:	af00      	add	r7, sp, #0
 8015ac6:	6078      	str	r0, [r7, #4]
 8015ac8:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d002      	beq.n	8015ad6 <LinkedListAdd+0x16>
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d101      	bne.n	8015ada <LinkedListAdd+0x1a>
    {
        return false;
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	e015      	b.n	8015b06 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d102      	bne.n	8015ae8 <LinkedListAdd+0x28>
    {
        list->First = element;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	683a      	ldr	r2, [r7, #0]
 8015ae6:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	685b      	ldr	r3, [r3, #4]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d003      	beq.n	8015af8 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	685b      	ldr	r3, [r3, #4]
 8015af4:	683a      	ldr	r2, [r7, #0]
 8015af6:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	2200      	movs	r2, #0
 8015afc:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	683a      	ldr	r2, [r7, #0]
 8015b02:	605a      	str	r2, [r3, #4]

    return true;
 8015b04:	2301      	movs	r3, #1
}
 8015b06:	4618      	mov	r0, r3
 8015b08:	370c      	adds	r7, #12
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bc80      	pop	{r7}
 8015b0e:	4770      	bx	lr

08015b10 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b10:	b480      	push	{r7}
 8015b12:	b085      	sub	sp, #20
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d002      	beq.n	8015b26 <LinkedListGetPrevious+0x16>
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d101      	bne.n	8015b2a <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 8015b26:	2300      	movs	r3, #0
 8015b28:	e016      	b.n	8015b58 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8015b30:	683a      	ldr	r2, [r7, #0]
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	429a      	cmp	r2, r3
 8015b36:	d00c      	beq.n	8015b52 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b38:	e002      	b.n	8015b40 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8015b40:	68fb      	ldr	r3, [r7, #12]
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d007      	beq.n	8015b56 <LinkedListGetPrevious+0x46>
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	683a      	ldr	r2, [r7, #0]
 8015b4c:	429a      	cmp	r2, r3
 8015b4e:	d1f4      	bne.n	8015b3a <LinkedListGetPrevious+0x2a>
 8015b50:	e001      	b.n	8015b56 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 8015b52:	2300      	movs	r3, #0
 8015b54:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 8015b56:	68fb      	ldr	r3, [r7, #12]
}
 8015b58:	4618      	mov	r0, r3
 8015b5a:	3714      	adds	r7, #20
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	bc80      	pop	{r7}
 8015b60:	4770      	bx	lr

08015b62 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b084      	sub	sp, #16
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
 8015b6a:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d002      	beq.n	8015b78 <LinkedListRemove+0x16>
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d101      	bne.n	8015b7c <LinkedListRemove+0x1a>
    {
        return false;
 8015b78:	2300      	movs	r3, #0
 8015b7a:	e020      	b.n	8015bbe <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8015b7c:	6839      	ldr	r1, [r7, #0]
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f7ff ffc6 	bl	8015b10 <LinkedListGetPrevious>
 8015b84:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	683a      	ldr	r2, [r7, #0]
 8015b8c:	429a      	cmp	r2, r3
 8015b8e:	d103      	bne.n	8015b98 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8015b90:	683b      	ldr	r3, [r7, #0]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	685b      	ldr	r3, [r3, #4]
 8015b9c:	683a      	ldr	r2, [r7, #0]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d102      	bne.n	8015ba8 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	68fa      	ldr	r2, [r7, #12]
 8015ba6:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8015ba8:	68fb      	ldr	r3, [r7, #12]
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	d003      	beq.n	8015bb6 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8015bae:	683b      	ldr	r3, [r7, #0]
 8015bb0:	681a      	ldr	r2, [r3, #0]
 8015bb2:	68fb      	ldr	r3, [r7, #12]
 8015bb4:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 8015bb6:	683b      	ldr	r3, [r7, #0]
 8015bb8:	2200      	movs	r2, #0
 8015bba:	601a      	str	r2, [r3, #0]

    return true;
 8015bbc:	2301      	movs	r3, #1
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3710      	adds	r7, #16
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}

08015bc6 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 8015bc6:	b480      	push	{r7}
 8015bc8:	b083      	sub	sp, #12
 8015bca:	af00      	add	r7, sp, #0
 8015bcc:	4603      	mov	r3, r0
 8015bce:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 8015bd0:	79fb      	ldrb	r3, [r7, #7]
 8015bd2:	2b05      	cmp	r3, #5
 8015bd4:	d004      	beq.n	8015be0 <IsSticky+0x1a>
 8015bd6:	2b05      	cmp	r3, #5
 8015bd8:	db04      	blt.n	8015be4 <IsSticky+0x1e>
 8015bda:	3b08      	subs	r3, #8
 8015bdc:	2b02      	cmp	r3, #2
 8015bde:	d801      	bhi.n	8015be4 <IsSticky+0x1e>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 8015be0:	2301      	movs	r3, #1
 8015be2:	e000      	b.n	8015be6 <IsSticky+0x20>
        default:
            return false;
 8015be4:	2300      	movs	r3, #0
    }
}
 8015be6:	4618      	mov	r0, r3
 8015be8:	370c      	adds	r7, #12
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bc80      	pop	{r7}
 8015bee:	4770      	bx	lr

08015bf0 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 8015bfa:	2300      	movs	r3, #0
    }
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bc80      	pop	{r7}
 8015c04:	4770      	bx	lr
	...

08015c08 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8015c0c:	22fc      	movs	r2, #252	; 0xfc
 8015c0e:	2100      	movs	r1, #0
 8015c10:	4804      	ldr	r0, [pc, #16]	; (8015c24 <LoRaMacCommandsInit+0x1c>)
 8015c12:	f004 f93b 	bl	8019e8c <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8015c16:	4803      	ldr	r0, [pc, #12]	; (8015c24 <LoRaMacCommandsInit+0x1c>)
 8015c18:	f7ff ff3d 	bl	8015a96 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	200015ac 	.word	0x200015ac

08015c28 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b086      	sub	sp, #24
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	60b9      	str	r1, [r7, #8]
 8015c32:	607a      	str	r2, [r7, #4]
 8015c34:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8015c36:	68bb      	ldr	r3, [r7, #8]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d101      	bne.n	8015c40 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015c3c:	2301      	movs	r3, #1
 8015c3e:	e03b      	b.n	8015cb8 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8015c40:	f7ff feee 	bl	8015a20 <MallocNewMacCommandSlot>
 8015c44:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d101      	bne.n	8015c50 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8015c4c:	2302      	movs	r3, #2
 8015c4e:	e033      	b.n	8015cb8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8015c50:	6979      	ldr	r1, [r7, #20]
 8015c52:	481b      	ldr	r0, [pc, #108]	; (8015cc0 <LoRaMacCommandsAddCmd+0x98>)
 8015c54:	f7ff ff34 	bl	8015ac0 <LinkedListAdd>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	f083 0301 	eor.w	r3, r3, #1
 8015c5e:	b2db      	uxtb	r3, r3
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d001      	beq.n	8015c68 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015c64:	2305      	movs	r3, #5
 8015c66:	e027      	b.n	8015cb8 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	7bfa      	ldrb	r2, [r7, #15]
 8015c6c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8015c6e:	697b      	ldr	r3, [r7, #20]
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	3305      	adds	r3, #5
 8015c78:	687a      	ldr	r2, [r7, #4]
 8015c7a:	b292      	uxth	r2, r2
 8015c7c:	68b9      	ldr	r1, [r7, #8]
 8015c7e:	4618      	mov	r0, r3
 8015c80:	f004 f8c9 	bl	8019e16 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8015c84:	7bfb      	ldrb	r3, [r7, #15]
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7ff ff9d 	bl	8015bc6 <IsSticky>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	461a      	mov	r2, r3
 8015c90:	697b      	ldr	r3, [r7, #20]
 8015c92:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
 8015c96:	4618      	mov	r0, r3
 8015c98:	f7ff ffaa 	bl	8015bf0 <IsConfirmationRequired>
 8015c9c:	4603      	mov	r3, r0
 8015c9e:	461a      	mov	r2, r3
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8015ca4:	4b06      	ldr	r3, [pc, #24]	; (8015cc0 <LoRaMacCommandsAddCmd+0x98>)
 8015ca6:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	4413      	add	r3, r2
 8015cae:	3301      	adds	r3, #1
 8015cb0:	4a03      	ldr	r2, [pc, #12]	; (8015cc0 <LoRaMacCommandsAddCmd+0x98>)
 8015cb2:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    return LORAMAC_COMMANDS_SUCCESS;
 8015cb6:	2300      	movs	r3, #0
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3718      	adds	r7, #24
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}
 8015cc0:	200015ac 	.word	0x200015ac

08015cc4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b082      	sub	sp, #8
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d101      	bne.n	8015cd6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	e021      	b.n	8015d1a <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8015cd6:	6879      	ldr	r1, [r7, #4]
 8015cd8:	4812      	ldr	r0, [pc, #72]	; (8015d24 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cda:	f7ff ff42 	bl	8015b62 <LinkedListRemove>
 8015cde:	4603      	mov	r3, r0
 8015ce0:	f083 0301 	eor.w	r3, r3, #1
 8015ce4:	b2db      	uxtb	r3, r3
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d001      	beq.n	8015cee <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015cea:	2303      	movs	r3, #3
 8015cec:	e015      	b.n	8015d1a <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8015cee:	4b0d      	ldr	r3, [pc, #52]	; (8015d24 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cf0:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	689b      	ldr	r3, [r3, #8]
 8015cf8:	1ad3      	subs	r3, r2, r3
 8015cfa:	3b01      	subs	r3, #1
 8015cfc:	4a09      	ldr	r2, [pc, #36]	; (8015d24 <LoRaMacCommandsRemoveCmd+0x60>)
 8015cfe:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8015d02:	6878      	ldr	r0, [r7, #4]
 8015d04:	f7ff feb4 	bl	8015a70 <FreeMacCommandSlot>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	f083 0301 	eor.w	r3, r3, #1
 8015d0e:	b2db      	uxtb	r3, r3
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d001      	beq.n	8015d18 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8015d14:	2305      	movs	r3, #5
 8015d16:	e000      	b.n	8015d1a <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
 8015d22:	bf00      	nop
 8015d24:	200015ac 	.word	0x200015ac

08015d28 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 8015d28:	b480      	push	{r7}
 8015d2a:	b085      	sub	sp, #20
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	4603      	mov	r3, r0
 8015d30:	6039      	str	r1, [r7, #0]
 8015d32:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d34:	4b0e      	ldr	r3, [pc, #56]	; (8015d70 <LoRaMacCommandsGetCmd+0x48>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d3a:	e002      	b.n	8015d42 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d004      	beq.n	8015d52 <LoRaMacCommandsGetCmd+0x2a>
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	791b      	ldrb	r3, [r3, #4]
 8015d4c:	79fa      	ldrb	r2, [r7, #7]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d1f4      	bne.n	8015d3c <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 8015d52:	683b      	ldr	r3, [r7, #0]
 8015d54:	68fa      	ldr	r2, [r7, #12]
 8015d56:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d101      	bne.n	8015d62 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8015d5e:	2303      	movs	r3, #3
 8015d60:	e000      	b.n	8015d64 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8015d62:	2300      	movs	r3, #0
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3714      	adds	r7, #20
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bc80      	pop	{r7}
 8015d6c:	4770      	bx	lr
 8015d6e:	bf00      	nop
 8015d70:	200015ac 	.word	0x200015ac

08015d74 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015d7a:	4b0f      	ldr	r3, [pc, #60]	; (8015db8 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8015d7c:	681b      	ldr	r3, [r3, #0]
 8015d7e:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015d80:	e012      	b.n	8015da8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	7b1b      	ldrb	r3, [r3, #12]
 8015d86:	f083 0301 	eor.w	r3, r3, #1
 8015d8a:	b2db      	uxtb	r3, r3
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d008      	beq.n	8015da2 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f7ff ff94 	bl	8015cc4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	607b      	str	r3, [r7, #4]
 8015da0:	e002      	b.n	8015da8 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d1e9      	bne.n	8015d82 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015dae:	2300      	movs	r3, #0
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}
 8015db8:	200015ac 	.word	0x200015ac

08015dbc <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8015dbc:	b580      	push	{r7, lr}
 8015dbe:	b082      	sub	sp, #8
 8015dc0:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8015dc2:	4b13      	ldr	r3, [pc, #76]	; (8015e10 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8015dc8:	e01a      	b.n	8015e00 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	681b      	ldr	r3, [r3, #0]
 8015dce:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	791b      	ldrb	r3, [r3, #4]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7ff fef6 	bl	8015bc6 <IsSticky>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d00d      	beq.n	8015dfc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	791b      	ldrb	r3, [r3, #4]
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7ff ff03 	bl	8015bf0 <IsConfirmationRequired>
 8015dea:	4603      	mov	r3, r0
 8015dec:	f083 0301 	eor.w	r3, r3, #1
 8015df0:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d002      	beq.n	8015dfc <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8015df6:	6878      	ldr	r0, [r7, #4]
 8015df8:	f7ff ff64 	bl	8015cc4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d1e1      	bne.n	8015dca <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8015e06:	2300      	movs	r3, #0
}
 8015e08:	4618      	mov	r0, r3
 8015e0a:	3708      	adds	r7, #8
 8015e0c:	46bd      	mov	sp, r7
 8015e0e:	bd80      	pop	{r7, pc}
 8015e10:	200015ac 	.word	0x200015ac

08015e14 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8015e14:	b480      	push	{r7}
 8015e16:	b083      	sub	sp, #12
 8015e18:	af00      	add	r7, sp, #0
 8015e1a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d101      	bne.n	8015e26 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e22:	2301      	movs	r3, #1
 8015e24:	e005      	b.n	8015e32 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8015e26:	4b05      	ldr	r3, [pc, #20]	; (8015e3c <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8015e28:	f8d3 20f8 	ldr.w	r2, [r3, #248]	; 0xf8
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8015e30:	2300      	movs	r3, #0
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	370c      	adds	r7, #12
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bc80      	pop	{r7}
 8015e3a:	4770      	bx	lr
 8015e3c:	200015ac 	.word	0x200015ac

08015e40 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b088      	sub	sp, #32
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	60f8      	str	r0, [r7, #12]
 8015e48:	60b9      	str	r1, [r7, #8]
 8015e4a:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8015e4c:	4b25      	ldr	r3, [pc, #148]	; (8015ee4 <LoRaMacCommandsSerializeCmds+0xa4>)
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8015e52:	2300      	movs	r3, #0
 8015e54:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d002      	beq.n	8015e62 <LoRaMacCommandsSerializeCmds+0x22>
 8015e5c:	68bb      	ldr	r3, [r7, #8]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d126      	bne.n	8015eb0 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8015e62:	2301      	movs	r3, #1
 8015e64:	e039      	b.n	8015eda <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8015e66:	7efb      	ldrb	r3, [r7, #27]
 8015e68:	68fa      	ldr	r2, [r7, #12]
 8015e6a:	1ad2      	subs	r2, r2, r3
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	689b      	ldr	r3, [r3, #8]
 8015e70:	3301      	adds	r3, #1
 8015e72:	429a      	cmp	r2, r3
 8015e74:	d320      	bcc.n	8015eb8 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8015e76:	7efb      	ldrb	r3, [r7, #27]
 8015e78:	1c5a      	adds	r2, r3, #1
 8015e7a:	76fa      	strb	r2, [r7, #27]
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	4413      	add	r3, r2
 8015e82:	69fa      	ldr	r2, [r7, #28]
 8015e84:	7912      	ldrb	r2, [r2, #4]
 8015e86:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8015e88:	7efb      	ldrb	r3, [r7, #27]
 8015e8a:	687a      	ldr	r2, [r7, #4]
 8015e8c:	18d0      	adds	r0, r2, r3
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	1d59      	adds	r1, r3, #5
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	689b      	ldr	r3, [r3, #8]
 8015e96:	b29b      	uxth	r3, r3
 8015e98:	461a      	mov	r2, r3
 8015e9a:	f003 ffbc 	bl	8019e16 <memcpy1>
            itr += curElement->PayloadSize;
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	b2da      	uxtb	r2, r3
 8015ea4:	7efb      	ldrb	r3, [r7, #27]
 8015ea6:	4413      	add	r3, r2
 8015ea8:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8015eaa:	69fb      	ldr	r3, [r7, #28]
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d1d7      	bne.n	8015e66 <LoRaMacCommandsSerializeCmds+0x26>
 8015eb6:	e009      	b.n	8015ecc <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8015eb8:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8015eba:	e007      	b.n	8015ecc <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8015ebc:	69fb      	ldr	r3, [r7, #28]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8015ec2:	69f8      	ldr	r0, [r7, #28]
 8015ec4:	f7ff fefe 	bl	8015cc4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8015ec8:	697b      	ldr	r3, [r7, #20]
 8015eca:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8015ecc:	69fb      	ldr	r3, [r7, #28]
 8015ece:	2b00      	cmp	r3, #0
 8015ed0:	d1f4      	bne.n	8015ebc <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8015ed2:	68b8      	ldr	r0, [r7, #8]
 8015ed4:	f7ff ff9e 	bl	8015e14 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8015ed8:	2300      	movs	r3, #0
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3720      	adds	r7, #32
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	200015ac 	.word	0x200015ac

08015ee8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8015ee8:	b480      	push	{r7}
 8015eea:	b085      	sub	sp, #20
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	4603      	mov	r3, r0
 8015ef0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8015ef6:	79fb      	ldrb	r3, [r7, #7]
 8015ef8:	3b02      	subs	r3, #2
 8015efa:	2b11      	cmp	r3, #17
 8015efc:	d850      	bhi.n	8015fa0 <LoRaMacCommandsGetCmdSize+0xb8>
 8015efe:	a201      	add	r2, pc, #4	; (adr r2, 8015f04 <LoRaMacCommandsGetCmdSize+0x1c>)
 8015f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015f04:	08015f4d 	.word	0x08015f4d
 8015f08:	08015f53 	.word	0x08015f53
 8015f0c:	08015f59 	.word	0x08015f59
 8015f10:	08015f5f 	.word	0x08015f5f
 8015f14:	08015f65 	.word	0x08015f65
 8015f18:	08015f6b 	.word	0x08015f6b
 8015f1c:	08015f71 	.word	0x08015f71
 8015f20:	08015f77 	.word	0x08015f77
 8015f24:	08015f7d 	.word	0x08015f7d
 8015f28:	08015fa1 	.word	0x08015fa1
 8015f2c:	08015fa1 	.word	0x08015fa1
 8015f30:	08015f83 	.word	0x08015f83
 8015f34:	08015fa1 	.word	0x08015fa1
 8015f38:	08015fa1 	.word	0x08015fa1
 8015f3c:	08015f89 	.word	0x08015f89
 8015f40:	08015f8f 	.word	0x08015f8f
 8015f44:	08015f95 	.word	0x08015f95
 8015f48:	08015f9b 	.word	0x08015f9b
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8015f4c:	2303      	movs	r3, #3
 8015f4e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f50:	e027      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8015f52:	2305      	movs	r3, #5
 8015f54:	73fb      	strb	r3, [r7, #15]
            break;
 8015f56:	e024      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8015f58:	2302      	movs	r3, #2
 8015f5a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f5c:	e021      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8015f5e:	2305      	movs	r3, #5
 8015f60:	73fb      	strb	r3, [r7, #15]
            break;
 8015f62:	e01e      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8015f64:	2301      	movs	r3, #1
 8015f66:	73fb      	strb	r3, [r7, #15]
            break;
 8015f68:	e01b      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8015f6a:	2306      	movs	r3, #6
 8015f6c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f6e:	e018      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8015f70:	2302      	movs	r3, #2
 8015f72:	73fb      	strb	r3, [r7, #15]
            break;
 8015f74:	e015      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8015f76:	2302      	movs	r3, #2
 8015f78:	73fb      	strb	r3, [r7, #15]
            break;
 8015f7a:	e012      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8015f7c:	2305      	movs	r3, #5
 8015f7e:	73fb      	strb	r3, [r7, #15]
            break;
 8015f80:	e00f      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8015f82:	2306      	movs	r3, #6
 8015f84:	73fb      	strb	r3, [r7, #15]
            break;
 8015f86:	e00c      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8015f88:	2301      	movs	r3, #1
 8015f8a:	73fb      	strb	r3, [r7, #15]
            break;
 8015f8c:	e009      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8015f8e:	2305      	movs	r3, #5
 8015f90:	73fb      	strb	r3, [r7, #15]
            break;
 8015f92:	e006      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8015f94:	2304      	movs	r3, #4
 8015f96:	73fb      	strb	r3, [r7, #15]
            break;
 8015f98:	e003      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8015f9a:	2304      	movs	r3, #4
 8015f9c:	73fb      	strb	r3, [r7, #15]
            break;
 8015f9e:	e000      	b.n	8015fa2 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8015fa0:	bf00      	nop
        }
    }
    return cidSize;
 8015fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	3714      	adds	r7, #20
 8015fa8:	46bd      	mov	sp, r7
 8015faa:	bc80      	pop	{r7}
 8015fac:	4770      	bx	lr
 8015fae:	bf00      	nop

08015fb0 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	4a07      	ldr	r2, [pc, #28]	; (8015fd8 <IncreaseBufferPointer+0x28>)
 8015fbc:	4293      	cmp	r3, r2
 8015fbe:	d102      	bne.n	8015fc6 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8015fc0:	4b06      	ldr	r3, [pc, #24]	; (8015fdc <IncreaseBufferPointer+0x2c>)
 8015fc2:	607b      	str	r3, [r7, #4]
 8015fc4:	e002      	b.n	8015fcc <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	3304      	adds	r3, #4
 8015fca:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8015fcc:	687b      	ldr	r3, [r7, #4]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bc80      	pop	{r7}
 8015fd6:	4770      	bx	lr
 8015fd8:	200016c4 	.word	0x200016c4
 8015fdc:	200016b4 	.word	0x200016b4

08015fe0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8015fe0:	b480      	push	{r7}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	4603      	mov	r3, r0
 8015fe8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8015fea:	79fb      	ldrb	r3, [r7, #7]
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d101      	bne.n	8015ff4 <IsListEmpty+0x14>
    {
        return true;
 8015ff0:	2301      	movs	r3, #1
 8015ff2:	e000      	b.n	8015ff6 <IsListEmpty+0x16>
    }
    return false;
 8015ff4:	2300      	movs	r3, #0
}
 8015ff6:	4618      	mov	r0, r3
 8015ff8:	370c      	adds	r7, #12
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	bc80      	pop	{r7}
 8015ffe:	4770      	bx	lr

08016000 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8016000:	b480      	push	{r7}
 8016002:	b083      	sub	sp, #12
 8016004:	af00      	add	r7, sp, #0
 8016006:	4603      	mov	r3, r0
 8016008:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 801600a:	79fb      	ldrb	r3, [r7, #7]
 801600c:	2b04      	cmp	r3, #4
 801600e:	d901      	bls.n	8016014 <IsListFull+0x14>
    {
        return true;
 8016010:	2301      	movs	r3, #1
 8016012:	e000      	b.n	8016016 <IsListFull+0x16>
    }
    return false;
 8016014:	2300      	movs	r3, #0
}
 8016016:	4618      	mov	r0, r3
 8016018:	370c      	adds	r7, #12
 801601a:	46bd      	mov	sp, r7
 801601c:	bc80      	pop	{r7}
 801601e:	4770      	bx	lr

08016020 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b086      	sub	sp, #24
 8016024:	af00      	add	r7, sp, #0
 8016026:	4603      	mov	r3, r0
 8016028:	60b9      	str	r1, [r7, #8]
 801602a:	607a      	str	r2, [r7, #4]
 801602c:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801602e:	68bb      	ldr	r3, [r7, #8]
 8016030:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016032:	4b13      	ldr	r3, [pc, #76]	; (8016080 <GetElement+0x60>)
 8016034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016038:	4618      	mov	r0, r3
 801603a:	f7ff ffd1 	bl	8015fe0 <IsListEmpty>
 801603e:	4603      	mov	r3, r0
 8016040:	2b00      	cmp	r3, #0
 8016042:	d001      	beq.n	8016048 <GetElement+0x28>
    {
        return NULL;
 8016044:	2300      	movs	r3, #0
 8016046:	e017      	b.n	8016078 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016048:	2300      	movs	r3, #0
 801604a:	74fb      	strb	r3, [r7, #19]
 801604c:	e00d      	b.n	801606a <GetElement+0x4a>
    {
        if( element->Request == request )
 801604e:	697b      	ldr	r3, [r7, #20]
 8016050:	781b      	ldrb	r3, [r3, #0]
 8016052:	7bfa      	ldrb	r2, [r7, #15]
 8016054:	429a      	cmp	r2, r3
 8016056:	d101      	bne.n	801605c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	e00d      	b.n	8016078 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 801605c:	6978      	ldr	r0, [r7, #20]
 801605e:	f7ff ffa7 	bl	8015fb0 <IncreaseBufferPointer>
 8016062:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8016064:	7cfb      	ldrb	r3, [r7, #19]
 8016066:	3301      	adds	r3, #1
 8016068:	74fb      	strb	r3, [r7, #19]
 801606a:	4b05      	ldr	r3, [pc, #20]	; (8016080 <GetElement+0x60>)
 801606c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016070:	7cfa      	ldrb	r2, [r7, #19]
 8016072:	429a      	cmp	r2, r3
 8016074:	d3eb      	bcc.n	801604e <GetElement+0x2e>
    }

    return NULL;
 8016076:	2300      	movs	r3, #0
}
 8016078:	4618      	mov	r0, r3
 801607a:	3718      	adds	r7, #24
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	200016a8 	.word	0x200016a8

08016084 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b082      	sub	sp, #8
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 801608c:	4a0c      	ldr	r2, [pc, #48]	; (80160c0 <LoRaMacConfirmQueueInit+0x3c>)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8016092:	4b0b      	ldr	r3, [pc, #44]	; (80160c0 <LoRaMacConfirmQueueInit+0x3c>)
 8016094:	2200      	movs	r2, #0
 8016096:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801609a:	4b09      	ldr	r3, [pc, #36]	; (80160c0 <LoRaMacConfirmQueueInit+0x3c>)
 801609c:	4a09      	ldr	r2, [pc, #36]	; (80160c4 <LoRaMacConfirmQueueInit+0x40>)
 801609e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80160a0:	4b07      	ldr	r3, [pc, #28]	; (80160c0 <LoRaMacConfirmQueueInit+0x3c>)
 80160a2:	4a08      	ldr	r2, [pc, #32]	; (80160c4 <LoRaMacConfirmQueueInit+0x40>)
 80160a4:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80160a6:	2214      	movs	r2, #20
 80160a8:	21ff      	movs	r1, #255	; 0xff
 80160aa:	4806      	ldr	r0, [pc, #24]	; (80160c4 <LoRaMacConfirmQueueInit+0x40>)
 80160ac:	f003 feee 	bl	8019e8c <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80160b0:	4b03      	ldr	r3, [pc, #12]	; (80160c0 <LoRaMacConfirmQueueInit+0x3c>)
 80160b2:	2201      	movs	r2, #1
 80160b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80160b8:	bf00      	nop
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}
 80160c0:	200016a8 	.word	0x200016a8
 80160c4:	200016b4 	.word	0x200016b4

080160c8 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80160d0:	4b19      	ldr	r3, [pc, #100]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 80160d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7ff ff92 	bl	8016000 <IsListFull>
 80160dc:	4603      	mov	r3, r0
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d001      	beq.n	80160e6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 80160e2:	2300      	movs	r3, #0
 80160e4:	e023      	b.n	801612e <LoRaMacConfirmQueueAdd+0x66>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 80160e6:	4b14      	ldr	r3, [pc, #80]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	687a      	ldr	r2, [r7, #4]
 80160ec:	7812      	ldrb	r2, [r2, #0]
 80160ee:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 80160f0:	4b11      	ldr	r3, [pc, #68]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 80160f2:	689b      	ldr	r3, [r3, #8]
 80160f4:	687a      	ldr	r2, [r7, #4]
 80160f6:	7852      	ldrb	r2, [r2, #1]
 80160f8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 80160fa:	4b0f      	ldr	r3, [pc, #60]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 80160fc:	689b      	ldr	r3, [r3, #8]
 80160fe:	687a      	ldr	r2, [r7, #4]
 8016100:	78d2      	ldrb	r2, [r2, #3]
 8016102:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 8016104:	4b0c      	ldr	r3, [pc, #48]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 8016106:	689b      	ldr	r3, [r3, #8]
 8016108:	2200      	movs	r2, #0
 801610a:	709a      	strb	r2, [r3, #2]
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801610c:	4b0a      	ldr	r3, [pc, #40]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 801610e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016112:	3301      	adds	r3, #1
 8016114:	b2da      	uxtb	r2, r3
 8016116:	4b08      	ldr	r3, [pc, #32]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 8016118:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801611c:	4b06      	ldr	r3, [pc, #24]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 801611e:	689b      	ldr	r3, [r3, #8]
 8016120:	4618      	mov	r0, r3
 8016122:	f7ff ff45 	bl	8015fb0 <IncreaseBufferPointer>
 8016126:	4603      	mov	r3, r0
 8016128:	4a03      	ldr	r2, [pc, #12]	; (8016138 <LoRaMacConfirmQueueAdd+0x70>)
 801612a:	6093      	str	r3, [r2, #8]

    return true;
 801612c:	2301      	movs	r3, #1
}
 801612e:	4618      	mov	r0, r3
 8016130:	3708      	adds	r7, #8
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}
 8016136:	bf00      	nop
 8016138:	200016a8 	.word	0x200016a8

0801613c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 801613c:	b580      	push	{r7, lr}
 801613e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8016140:	4b0e      	ldr	r3, [pc, #56]	; (801617c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016146:	4618      	mov	r0, r3
 8016148:	f7ff ff4a 	bl	8015fe0 <IsListEmpty>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d001      	beq.n	8016156 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8016152:	2300      	movs	r3, #0
 8016154:	e010      	b.n	8016178 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8016156:	4b09      	ldr	r3, [pc, #36]	; (801617c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016158:	f893 3020 	ldrb.w	r3, [r3, #32]
 801615c:	3b01      	subs	r3, #1
 801615e:	b2da      	uxtb	r2, r3
 8016160:	4b06      	ldr	r3, [pc, #24]	; (801617c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016162:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8016166:	4b05      	ldr	r3, [pc, #20]	; (801617c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	4618      	mov	r0, r3
 801616c:	f7ff ff20 	bl	8015fb0 <IncreaseBufferPointer>
 8016170:	4603      	mov	r3, r0
 8016172:	4a02      	ldr	r2, [pc, #8]	; (801617c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8016174:	6053      	str	r3, [r2, #4]

    return true;
 8016176:	2301      	movs	r3, #1
}
 8016178:	4618      	mov	r0, r3
 801617a:	bd80      	pop	{r7, pc}
 801617c:	200016a8 	.word	0x200016a8

08016180 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b084      	sub	sp, #16
 8016184:	af00      	add	r7, sp, #0
 8016186:	4603      	mov	r3, r0
 8016188:	460a      	mov	r2, r1
 801618a:	71fb      	strb	r3, [r7, #7]
 801618c:	4613      	mov	r3, r2
 801618e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8016190:	2300      	movs	r3, #0
 8016192:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016194:	4b10      	ldr	r3, [pc, #64]	; (80161d8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8016196:	f893 3020 	ldrb.w	r3, [r3, #32]
 801619a:	4618      	mov	r0, r3
 801619c:	f7ff ff20 	bl	8015fe0 <IsListEmpty>
 80161a0:	4603      	mov	r3, r0
 80161a2:	f083 0301 	eor.w	r3, r3, #1
 80161a6:	b2db      	uxtb	r3, r3
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d011      	beq.n	80161d0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80161ac:	4b0a      	ldr	r3, [pc, #40]	; (80161d8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161ae:	6859      	ldr	r1, [r3, #4]
 80161b0:	4b09      	ldr	r3, [pc, #36]	; (80161d8 <LoRaMacConfirmQueueSetStatus+0x58>)
 80161b2:	689a      	ldr	r2, [r3, #8]
 80161b4:	79bb      	ldrb	r3, [r7, #6]
 80161b6:	4618      	mov	r0, r3
 80161b8:	f7ff ff32 	bl	8016020 <GetElement>
 80161bc:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d005      	beq.n	80161d0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	79fa      	ldrb	r2, [r7, #7]
 80161c8:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	2201      	movs	r2, #1
 80161ce:	709a      	strb	r2, [r3, #2]
        }
    }
}
 80161d0:	bf00      	nop
 80161d2:	3710      	adds	r7, #16
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	200016a8 	.word	0x200016a8

080161dc <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b084      	sub	sp, #16
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	4603      	mov	r3, r0
 80161e4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 80161e6:	2300      	movs	r3, #0
 80161e8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80161ea:	4b10      	ldr	r3, [pc, #64]	; (801622c <LoRaMacConfirmQueueGetStatus+0x50>)
 80161ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80161f0:	4618      	mov	r0, r3
 80161f2:	f7ff fef5 	bl	8015fe0 <IsListEmpty>
 80161f6:	4603      	mov	r3, r0
 80161f8:	f083 0301 	eor.w	r3, r3, #1
 80161fc:	b2db      	uxtb	r3, r3
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d00e      	beq.n	8016220 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8016202:	4b0a      	ldr	r3, [pc, #40]	; (801622c <LoRaMacConfirmQueueGetStatus+0x50>)
 8016204:	6859      	ldr	r1, [r3, #4]
 8016206:	4b09      	ldr	r3, [pc, #36]	; (801622c <LoRaMacConfirmQueueGetStatus+0x50>)
 8016208:	689a      	ldr	r2, [r3, #8]
 801620a:	79fb      	ldrb	r3, [r7, #7]
 801620c:	4618      	mov	r0, r3
 801620e:	f7ff ff07 	bl	8016020 <GetElement>
 8016212:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	2b00      	cmp	r3, #0
 8016218:	d002      	beq.n	8016220 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 801621a:	68fb      	ldr	r3, [r7, #12]
 801621c:	785b      	ldrb	r3, [r3, #1]
 801621e:	e000      	b.n	8016222 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8016220:	2301      	movs	r3, #1
}
 8016222:	4618      	mov	r0, r3
 8016224:	3710      	adds	r7, #16
 8016226:	46bd      	mov	sp, r7
 8016228:	bd80      	pop	{r7, pc}
 801622a:	bf00      	nop
 801622c:	200016a8 	.word	0x200016a8

08016230 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b084      	sub	sp, #16
 8016234:	af00      	add	r7, sp, #0
 8016236:	4603      	mov	r3, r0
 8016238:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801623a:	4b16      	ldr	r3, [pc, #88]	; (8016294 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801623c:	685b      	ldr	r3, [r3, #4]
 801623e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8016240:	4a14      	ldr	r2, [pc, #80]	; (8016294 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016242:	79fb      	ldrb	r3, [r7, #7]
 8016244:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8016248:	4b12      	ldr	r3, [pc, #72]	; (8016294 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801624a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801624e:	4618      	mov	r0, r3
 8016250:	f7ff fec6 	bl	8015fe0 <IsListEmpty>
 8016254:	4603      	mov	r3, r0
 8016256:	f083 0301 	eor.w	r3, r3, #1
 801625a:	b2db      	uxtb	r3, r3
 801625c:	2b00      	cmp	r3, #0
 801625e:	d015      	beq.n	801628c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	79fa      	ldrb	r2, [r7, #7]
 8016264:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	78db      	ldrb	r3, [r3, #3]
 801626a:	f083 0301 	eor.w	r3, r3, #1
 801626e:	b2db      	uxtb	r3, r3
 8016270:	2b00      	cmp	r3, #0
 8016272:	d002      	beq.n	801627a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8016274:	68fb      	ldr	r3, [r7, #12]
 8016276:	2201      	movs	r2, #1
 8016278:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801627a:	68f8      	ldr	r0, [r7, #12]
 801627c:	f7ff fe98 	bl	8015fb0 <IncreaseBufferPointer>
 8016280:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8016282:	4b04      	ldr	r3, [pc, #16]	; (8016294 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8016284:	689b      	ldr	r3, [r3, #8]
 8016286:	68fa      	ldr	r2, [r7, #12]
 8016288:	429a      	cmp	r2, r3
 801628a:	d1e9      	bne.n	8016260 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801628c:	bf00      	nop
 801628e:	3710      	adds	r7, #16
 8016290:	46bd      	mov	sp, r7
 8016292:	bd80      	pop	{r7, pc}
 8016294:	200016a8 	.word	0x200016a8

08016298 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8016298:	b580      	push	{r7, lr}
 801629a:	b082      	sub	sp, #8
 801629c:	af00      	add	r7, sp, #0
 801629e:	4603      	mov	r3, r0
 80162a0:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80162a2:	4b09      	ldr	r3, [pc, #36]	; (80162c8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162a4:	6859      	ldr	r1, [r3, #4]
 80162a6:	4b08      	ldr	r3, [pc, #32]	; (80162c8 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80162a8:	689a      	ldr	r2, [r3, #8]
 80162aa:	79fb      	ldrb	r3, [r7, #7]
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7ff feb7 	bl	8016020 <GetElement>
 80162b2:	4603      	mov	r3, r0
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d001      	beq.n	80162bc <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 80162b8:	2301      	movs	r3, #1
 80162ba:	e000      	b.n	80162be <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 80162bc:	2300      	movs	r3, #0
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
 80162c6:	bf00      	nop
 80162c8:	200016a8 	.word	0x200016a8

080162cc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 80162cc:	b580      	push	{r7, lr}
 80162ce:	b084      	sub	sp, #16
 80162d0:	af00      	add	r7, sp, #0
 80162d2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80162d4:	4b25      	ldr	r3, [pc, #148]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80162da:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80162dc:	2300      	movs	r3, #0
 80162de:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 80162e0:	f107 0308 	add.w	r3, r7, #8
 80162e4:	2204      	movs	r2, #4
 80162e6:	2100      	movs	r1, #0
 80162e8:	4618      	mov	r0, r3
 80162ea:	f003 fdcf 	bl	8019e8c <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 80162ee:	2300      	movs	r3, #0
 80162f0:	73fb      	strb	r3, [r7, #15]
 80162f2:	e032      	b.n	801635a <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80162f4:	4b1d      	ldr	r3, [pc, #116]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80162fe:	4b1b      	ldr	r3, [pc, #108]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016300:	685b      	ldr	r3, [r3, #4]
 8016302:	785a      	ldrb	r2, [r3, #1]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8016308:	4b18      	ldr	r3, [pc, #96]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801630a:	685b      	ldr	r3, [r3, #4]
 801630c:	789b      	ldrb	r3, [r3, #2]
 801630e:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 8016310:	7b7b      	ldrb	r3, [r7, #13]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d005      	beq.n	8016322 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8016316:	4b15      	ldr	r3, [pc, #84]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016318:	681b      	ldr	r3, [r3, #0]
 801631a:	689b      	ldr	r3, [r3, #8]
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	4798      	blx	r3
 8016320:	e00b      	b.n	801633a <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8016322:	4b12      	ldr	r3, [pc, #72]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801632a:	4b10      	ldr	r3, [pc, #64]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 801632c:	685b      	ldr	r3, [r3, #4]
 801632e:	785b      	ldrb	r3, [r3, #1]
 8016330:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8016332:	4b0e      	ldr	r3, [pc, #56]	; (801636c <LoRaMacConfirmQueueHandleCb+0xa0>)
 8016334:	685b      	ldr	r3, [r3, #4]
 8016336:	78db      	ldrb	r3, [r3, #3]
 8016338:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801633a:	f7ff feff 	bl	801613c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801633e:	7b7b      	ldrb	r3, [r7, #13]
 8016340:	f083 0301 	eor.w	r3, r3, #1
 8016344:	b2db      	uxtb	r3, r3
 8016346:	2b00      	cmp	r3, #0
 8016348:	d004      	beq.n	8016354 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801634a:	f107 0308 	add.w	r3, r7, #8
 801634e:	4618      	mov	r0, r3
 8016350:	f7ff feba 	bl	80160c8 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8016354:	7bfb      	ldrb	r3, [r7, #15]
 8016356:	3301      	adds	r3, #1
 8016358:	73fb      	strb	r3, [r7, #15]
 801635a:	7bfa      	ldrb	r2, [r7, #15]
 801635c:	7bbb      	ldrb	r3, [r7, #14]
 801635e:	429a      	cmp	r2, r3
 8016360:	d3c8      	bcc.n	80162f4 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8016362:	bf00      	nop
 8016364:	bf00      	nop
 8016366:	3710      	adds	r7, #16
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}
 801636c:	200016a8 	.word	0x200016a8

08016370 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8016370:	b480      	push	{r7}
 8016372:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8016374:	4b03      	ldr	r3, [pc, #12]	; (8016384 <LoRaMacConfirmQueueGetCnt+0x14>)
 8016376:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801637a:	4618      	mov	r0, r3
 801637c:	46bd      	mov	sp, r7
 801637e:	bc80      	pop	{r7}
 8016380:	4770      	bx	lr
 8016382:	bf00      	nop
 8016384:	200016a8 	.word	0x200016a8

08016388 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 8016388:	b580      	push	{r7, lr}
 801638a:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801638c:	4b06      	ldr	r3, [pc, #24]	; (80163a8 <LoRaMacConfirmQueueIsFull+0x20>)
 801638e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016392:	4618      	mov	r0, r3
 8016394:	f7ff fe34 	bl	8016000 <IsListFull>
 8016398:	4603      	mov	r3, r0
 801639a:	2b00      	cmp	r3, #0
 801639c:	d001      	beq.n	80163a2 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 801639e:	2301      	movs	r3, #1
 80163a0:	e000      	b.n	80163a4 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80163a2:	2300      	movs	r3, #0
    }
}
 80163a4:	4618      	mov	r0, r3
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	200016a8 	.word	0x200016a8

080163ac <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b08e      	sub	sp, #56	; 0x38
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	607b      	str	r3, [r7, #4]
 80163b6:	460b      	mov	r3, r1
 80163b8:	817b      	strh	r3, [r7, #10]
 80163ba:	4613      	mov	r3, r2
 80163bc:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d101      	bne.n	80163c8 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80163c4:	230a      	movs	r3, #10
 80163c6:	e086      	b.n	80164d6 <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 80163c8:	2300      	movs	r3, #0
 80163ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint16_t ctr = 1;
 80163ce:	2301      	movs	r3, #1
 80163d0:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint8_t sBlock[16] = { 0 };
 80163d2:	2300      	movs	r3, #0
 80163d4:	623b      	str	r3, [r7, #32]
 80163d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80163da:	2200      	movs	r2, #0
 80163dc:	601a      	str	r2, [r3, #0]
 80163de:	605a      	str	r2, [r3, #4]
 80163e0:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80163e2:	2300      	movs	r3, #0
 80163e4:	613b      	str	r3, [r7, #16]
 80163e6:	f107 0314 	add.w	r3, r7, #20
 80163ea:	2200      	movs	r2, #0
 80163ec:	601a      	str	r2, [r3, #0]
 80163ee:	605a      	str	r2, [r3, #4]
 80163f0:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80163f2:	2301      	movs	r3, #1
 80163f4:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80163f6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80163fa:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	b2db      	uxtb	r3, r3
 8016400:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	0a1b      	lsrs	r3, r3, #8
 8016406:	b2db      	uxtb	r3, r3
 8016408:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	0c1b      	lsrs	r3, r3, #16
 801640e:	b2db      	uxtb	r3, r3
 8016410:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	0e1b      	lsrs	r3, r3, #24
 8016416:	b2db      	uxtb	r3, r3
 8016418:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 801641a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801641c:	b2db      	uxtb	r3, r3
 801641e:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8016420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016422:	0a1b      	lsrs	r3, r3, #8
 8016424:	b2db      	uxtb	r3, r3
 8016426:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8016428:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801642a:	0c1b      	lsrs	r3, r3, #16
 801642c:	b2db      	uxtb	r3, r3
 801642e:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8016430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016432:	0e1b      	lsrs	r3, r3, #24
 8016434:	b2db      	uxtb	r3, r3
 8016436:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8016438:	e048      	b.n	80164cc <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 801643a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801643c:	b2db      	uxtb	r3, r3
 801643e:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8016440:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016442:	3301      	adds	r3, #1
 8016444:	86bb      	strh	r3, [r7, #52]	; 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 8016446:	f107 0320 	add.w	r3, r7, #32
 801644a:	7a7a      	ldrb	r2, [r7, #9]
 801644c:	f107 0010 	add.w	r0, r7, #16
 8016450:	2110      	movs	r1, #16
 8016452:	f7f8 ff69 	bl	800f328 <SecureElementAesEncrypt>
 8016456:	4603      	mov	r3, r0
 8016458:	2b00      	cmp	r3, #0
 801645a:	d001      	beq.n	8016460 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801645c:	230f      	movs	r3, #15
 801645e:	e03a      	b.n	80164d6 <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8016460:	2300      	movs	r3, #0
 8016462:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8016466:	e01e      	b.n	80164a6 <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8016468:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801646c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8016470:	4413      	add	r3, r2
 8016472:	461a      	mov	r2, r3
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	4413      	add	r3, r2
 8016478:	7819      	ldrb	r1, [r3, #0]
 801647a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801647e:	3338      	adds	r3, #56	; 0x38
 8016480:	443b      	add	r3, r7
 8016482:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8016486:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 801648a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801648e:	4403      	add	r3, r0
 8016490:	4618      	mov	r0, r3
 8016492:	68fb      	ldr	r3, [r7, #12]
 8016494:	4403      	add	r3, r0
 8016496:	404a      	eors	r2, r1
 8016498:	b2d2      	uxtb	r2, r2
 801649a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801649c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164a0:	3301      	adds	r3, #1
 80164a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80164a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80164aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80164ae:	2a10      	cmp	r2, #16
 80164b0:	bfa8      	it	ge
 80164b2:	2210      	movge	r2, #16
 80164b4:	b212      	sxth	r2, r2
 80164b6:	4293      	cmp	r3, r2
 80164b8:	dbd6      	blt.n	8016468 <PayloadEncrypt+0xbc>
        }
        size -= 16;
 80164ba:	897b      	ldrh	r3, [r7, #10]
 80164bc:	3b10      	subs	r3, #16
 80164be:	b29b      	uxth	r3, r3
 80164c0:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 80164c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80164c6:	3310      	adds	r3, #16
 80164c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    while( size > 0 )
 80164cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	dcb2      	bgt.n	801643a <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80164d4:	2300      	movs	r3, #0
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3738      	adds	r7, #56	; 0x38
 80164da:	46bd      	mov	sp, r7
 80164dc:	bd80      	pop	{r7, pc}

080164de <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80164de:	b490      	push	{r4, r7}
 80164e0:	b082      	sub	sp, #8
 80164e2:	af00      	add	r7, sp, #0
 80164e4:	4604      	mov	r4, r0
 80164e6:	4608      	mov	r0, r1
 80164e8:	4611      	mov	r1, r2
 80164ea:	461a      	mov	r2, r3
 80164ec:	4623      	mov	r3, r4
 80164ee:	80fb      	strh	r3, [r7, #6]
 80164f0:	4603      	mov	r3, r0
 80164f2:	717b      	strb	r3, [r7, #5]
 80164f4:	460b      	mov	r3, r1
 80164f6:	713b      	strb	r3, [r7, #4]
 80164f8:	4613      	mov	r3, r2
 80164fa:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80164fc:	69bb      	ldr	r3, [r7, #24]
 80164fe:	2b00      	cmp	r3, #0
 8016500:	d101      	bne.n	8016506 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016502:	230a      	movs	r3, #10
 8016504:	e04e      	b.n	80165a4 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	2249      	movs	r2, #73	; 0x49
 801650a:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 801650c:	69bb      	ldr	r3, [r7, #24]
 801650e:	3301      	adds	r3, #1
 8016510:	2200      	movs	r2, #0
 8016512:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	3302      	adds	r3, #2
 8016518:	2200      	movs	r2, #0
 801651a:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 801651c:	69bb      	ldr	r3, [r7, #24]
 801651e:	3303      	adds	r3, #3
 8016520:	2200      	movs	r2, #0
 8016522:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 8016524:	69bb      	ldr	r3, [r7, #24]
 8016526:	3304      	adds	r3, #4
 8016528:	2200      	movs	r2, #0
 801652a:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 801652c:	69bb      	ldr	r3, [r7, #24]
 801652e:	3305      	adds	r3, #5
 8016530:	78fa      	ldrb	r2, [r7, #3]
 8016532:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 8016534:	69bb      	ldr	r3, [r7, #24]
 8016536:	3306      	adds	r3, #6
 8016538:	693a      	ldr	r2, [r7, #16]
 801653a:	b2d2      	uxtb	r2, r2
 801653c:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	0a1a      	lsrs	r2, r3, #8
 8016542:	69bb      	ldr	r3, [r7, #24]
 8016544:	3307      	adds	r3, #7
 8016546:	b2d2      	uxtb	r2, r2
 8016548:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801654a:	693b      	ldr	r3, [r7, #16]
 801654c:	0c1a      	lsrs	r2, r3, #16
 801654e:	69bb      	ldr	r3, [r7, #24]
 8016550:	3308      	adds	r3, #8
 8016552:	b2d2      	uxtb	r2, r2
 8016554:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	0e1a      	lsrs	r2, r3, #24
 801655a:	69bb      	ldr	r3, [r7, #24]
 801655c:	3309      	adds	r3, #9
 801655e:	b2d2      	uxtb	r2, r2
 8016560:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	330a      	adds	r3, #10
 8016566:	697a      	ldr	r2, [r7, #20]
 8016568:	b2d2      	uxtb	r2, r2
 801656a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801656c:	697b      	ldr	r3, [r7, #20]
 801656e:	0a1a      	lsrs	r2, r3, #8
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	330b      	adds	r3, #11
 8016574:	b2d2      	uxtb	r2, r2
 8016576:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8016578:	697b      	ldr	r3, [r7, #20]
 801657a:	0c1a      	lsrs	r2, r3, #16
 801657c:	69bb      	ldr	r3, [r7, #24]
 801657e:	330c      	adds	r3, #12
 8016580:	b2d2      	uxtb	r2, r2
 8016582:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8016584:	697b      	ldr	r3, [r7, #20]
 8016586:	0e1a      	lsrs	r2, r3, #24
 8016588:	69bb      	ldr	r3, [r7, #24]
 801658a:	330d      	adds	r3, #13
 801658c:	b2d2      	uxtb	r2, r2
 801658e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8016590:	69bb      	ldr	r3, [r7, #24]
 8016592:	330e      	adds	r3, #14
 8016594:	2200      	movs	r2, #0
 8016596:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	330f      	adds	r3, #15
 801659c:	88fa      	ldrh	r2, [r7, #6]
 801659e:	b2d2      	uxtb	r2, r2
 80165a0:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80165a2:	2300      	movs	r3, #0
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3708      	adds	r7, #8
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bc90      	pop	{r4, r7}
 80165ac:	4770      	bx	lr

080165ae <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80165ae:	b590      	push	{r4, r7, lr}
 80165b0:	b08b      	sub	sp, #44	; 0x2c
 80165b2:	af04      	add	r7, sp, #16
 80165b4:	6078      	str	r0, [r7, #4]
 80165b6:	4608      	mov	r0, r1
 80165b8:	4611      	mov	r1, r2
 80165ba:	461a      	mov	r2, r3
 80165bc:	4603      	mov	r3, r0
 80165be:	807b      	strh	r3, [r7, #2]
 80165c0:	460b      	mov	r3, r1
 80165c2:	707b      	strb	r3, [r7, #1]
 80165c4:	4613      	mov	r3, r2
 80165c6:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d002      	beq.n	80165d4 <ComputeCmacB0+0x26>
 80165ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d101      	bne.n	80165d8 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80165d4:	230a      	movs	r3, #10
 80165d6:	e024      	b.n	8016622 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80165d8:	887b      	ldrh	r3, [r7, #2]
 80165da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80165de:	d901      	bls.n	80165e4 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80165e0:	230e      	movs	r3, #14
 80165e2:	e01e      	b.n	8016622 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80165e4:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 80165e8:	783a      	ldrb	r2, [r7, #0]
 80165ea:	7879      	ldrb	r1, [r7, #1]
 80165ec:	8878      	ldrh	r0, [r7, #2]
 80165ee:	f107 0308 	add.w	r3, r7, #8
 80165f2:	9302      	str	r3, [sp, #8]
 80165f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f6:	9301      	str	r3, [sp, #4]
 80165f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165fa:	9300      	str	r3, [sp, #0]
 80165fc:	4623      	mov	r3, r4
 80165fe:	f7ff ff6e 	bl	80164de <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 8016602:	887a      	ldrh	r2, [r7, #2]
 8016604:	7879      	ldrb	r1, [r7, #1]
 8016606:	f107 0008 	add.w	r0, r7, #8
 801660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801660c:	9300      	str	r3, [sp, #0]
 801660e:	460b      	mov	r3, r1
 8016610:	6879      	ldr	r1, [r7, #4]
 8016612:	f7f8 fe43 	bl	800f29c <SecureElementComputeAesCmac>
 8016616:	4603      	mov	r3, r0
 8016618:	2b00      	cmp	r3, #0
 801661a:	d001      	beq.n	8016620 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801661c:	230f      	movs	r3, #15
 801661e:	e000      	b.n	8016622 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016620:	2300      	movs	r3, #0
}
 8016622:	4618      	mov	r0, r3
 8016624:	371c      	adds	r7, #28
 8016626:	46bd      	mov	sp, r7
 8016628:	bd90      	pop	{r4, r7, pc}

0801662a <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 801662a:	b590      	push	{r4, r7, lr}
 801662c:	b0cd      	sub	sp, #308	; 0x134
 801662e:	af04      	add	r7, sp, #16
 8016630:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8016634:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8016638:	6020      	str	r0, [r4, #0]
 801663a:	460c      	mov	r4, r1
 801663c:	4610      	mov	r0, r2
 801663e:	4619      	mov	r1, r3
 8016640:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016644:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016648:	4622      	mov	r2, r4
 801664a:	801a      	strh	r2, [r3, #0]
 801664c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016650:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016654:	4602      	mov	r2, r0
 8016656:	701a      	strb	r2, [r3, #0]
 8016658:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801665c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8016660:	460a      	mov	r2, r1
 8016662:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8016664:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8016668:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d101      	bne.n	8016676 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016672:	230a      	movs	r3, #10
 8016674:	e063      	b.n	801673e <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8016676:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801667a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 801667e:	881b      	ldrh	r3, [r3, #0]
 8016680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016684:	d901      	bls.n	801668a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8016686:	230e      	movs	r3, #14
 8016688:	e059      	b.n	801673e <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801668a:	f107 030c 	add.w	r3, r7, #12
 801668e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8016692:	2100      	movs	r1, #0
 8016694:	4618      	mov	r0, r3
 8016696:	f003 fbf9 	bl	8019e8c <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801669a:	f897 4130 	ldrb.w	r4, [r7, #304]	; 0x130
 801669e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80166a6:	781a      	ldrb	r2, [r3, #0]
 80166a8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166ac:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 80166b0:	7819      	ldrb	r1, [r3, #0]
 80166b2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166b6:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 80166ba:	8818      	ldrh	r0, [r3, #0]
 80166bc:	f107 030c 	add.w	r3, r7, #12
 80166c0:	9302      	str	r3, [sp, #8]
 80166c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80166c6:	9301      	str	r3, [sp, #4]
 80166c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80166cc:	9300      	str	r3, [sp, #0]
 80166ce:	4623      	mov	r3, r4
 80166d0:	f7ff ff05 	bl	80164de <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 80166d4:	f107 030c 	add.w	r3, r7, #12
 80166d8:	3310      	adds	r3, #16
 80166da:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80166de:	f5a2 728f 	sub.w	r2, r2, #286	; 0x11e
 80166e2:	8812      	ldrh	r2, [r2, #0]
 80166e4:	f507 7190 	add.w	r1, r7, #288	; 0x120
 80166e8:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 80166ec:	6809      	ldr	r1, [r1, #0]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f003 fb91 	bl	8019e16 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80166f4:	2306      	movs	r3, #6
 80166f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80166fa:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80166fe:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 8016702:	881b      	ldrh	r3, [r3, #0]
 8016704:	3310      	adds	r3, #16
 8016706:	4619      	mov	r1, r3
 8016708:	f507 7390 	add.w	r3, r7, #288	; 0x120
 801670c:	f2a3 131f 	subw	r3, r3, #287	; 0x11f
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	f107 000c 	add.w	r0, r7, #12
 8016716:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801671a:	f7f8 fdd9 	bl	800f2d0 <SecureElementVerifyAesCmac>
 801671e:	4603      	mov	r3, r0
 8016720:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016724:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016728:	2b00      	cmp	r3, #0
 801672a:	d101      	bne.n	8016730 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 801672c:	2300      	movs	r3, #0
 801672e:	e006      	b.n	801673e <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8016730:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8016734:	2b01      	cmp	r3, #1
 8016736:	d101      	bne.n	801673c <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8016738:	2301      	movs	r3, #1
 801673a:	e000      	b.n	801673e <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801673c:	230f      	movs	r3, #15
}
 801673e:	4618      	mov	r0, r3
 8016740:	f507 7792 	add.w	r7, r7, #292	; 0x124
 8016744:	46bd      	mov	sp, r7
 8016746:	bd90      	pop	{r4, r7, pc}

08016748 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8016748:	b480      	push	{r7}
 801674a:	b085      	sub	sp, #20
 801674c:	af00      	add	r7, sp, #0
 801674e:	4603      	mov	r3, r0
 8016750:	6039      	str	r1, [r7, #0]
 8016752:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016754:	2300      	movs	r3, #0
 8016756:	73fb      	strb	r3, [r7, #15]
 8016758:	e011      	b.n	801677e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801675a:	7bfb      	ldrb	r3, [r7, #15]
 801675c:	4a0c      	ldr	r2, [pc, #48]	; (8016790 <GetKeyAddrItem+0x48>)
 801675e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016762:	79fa      	ldrb	r2, [r7, #7]
 8016764:	429a      	cmp	r2, r3
 8016766:	d107      	bne.n	8016778 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8016768:	7bfb      	ldrb	r3, [r7, #15]
 801676a:	009b      	lsls	r3, r3, #2
 801676c:	4a08      	ldr	r2, [pc, #32]	; (8016790 <GetKeyAddrItem+0x48>)
 801676e:	441a      	add	r2, r3
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8016774:	2300      	movs	r3, #0
 8016776:	e006      	b.n	8016786 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8016778:	7bfb      	ldrb	r3, [r7, #15]
 801677a:	3301      	adds	r3, #1
 801677c:	73fb      	strb	r3, [r7, #15]
 801677e:	7bfb      	ldrb	r3, [r7, #15]
 8016780:	2b01      	cmp	r3, #1
 8016782:	d9ea      	bls.n	801675a <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8016784:	230c      	movs	r3, #12
}
 8016786:	4618      	mov	r0, r3
 8016788:	3714      	adds	r7, #20
 801678a:	46bd      	mov	sp, r7
 801678c:	bc80      	pop	{r7}
 801678e:	4770      	bx	lr
 8016790:	20000124 	.word	0x20000124

08016794 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b088      	sub	sp, #32
 8016798:	af00      	add	r7, sp, #0
 801679a:	60b9      	str	r1, [r7, #8]
 801679c:	607a      	str	r2, [r7, #4]
 801679e:	461a      	mov	r2, r3
 80167a0:	4603      	mov	r3, r0
 80167a2:	73fb      	strb	r3, [r7, #15]
 80167a4:	4613      	mov	r3, r2
 80167a6:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80167a8:	2300      	movs	r3, #0
 80167aa:	613b      	str	r3, [r7, #16]
 80167ac:	f107 0314 	add.w	r3, r7, #20
 80167b0:	2200      	movs	r2, #0
 80167b2:	601a      	str	r2, [r3, #0]
 80167b4:	605a      	str	r2, [r3, #4]
 80167b6:	609a      	str	r2, [r3, #8]

    switch( keyID )
 80167b8:	7bfb      	ldrb	r3, [r7, #15]
 80167ba:	2b08      	cmp	r3, #8
 80167bc:	d002      	beq.n	80167c4 <DeriveSessionKey10x+0x30>
 80167be:	2b09      	cmp	r3, #9
 80167c0:	d003      	beq.n	80167ca <DeriveSessionKey10x+0x36>
 80167c2:	e005      	b.n	80167d0 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 80167c4:	2301      	movs	r3, #1
 80167c6:	743b      	strb	r3, [r7, #16]
            break;
 80167c8:	e004      	b.n	80167d4 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 80167ca:	2302      	movs	r3, #2
 80167cc:	743b      	strb	r3, [r7, #16]
            break;
 80167ce:	e001      	b.n	80167d4 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 80167d0:	230b      	movs	r3, #11
 80167d2:	e02a      	b.n	801682a <DeriveSessionKey10x+0x96>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80167d4:	68bb      	ldr	r3, [r7, #8]
 80167d6:	b2db      	uxtb	r3, r3
 80167d8:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80167da:	68bb      	ldr	r3, [r7, #8]
 80167dc:	0a1b      	lsrs	r3, r3, #8
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80167e2:	68bb      	ldr	r3, [r7, #8]
 80167e4:	0c1b      	lsrs	r3, r3, #16
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	0a1b      	lsrs	r3, r3, #8
 80167f4:	b2db      	uxtb	r3, r3
 80167f6:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	0c1b      	lsrs	r3, r3, #16
 80167fc:	b2db      	uxtb	r3, r3
 80167fe:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8016800:	89bb      	ldrh	r3, [r7, #12]
 8016802:	b2db      	uxtb	r3, r3
 8016804:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 8016806:	89bb      	ldrh	r3, [r7, #12]
 8016808:	0a1b      	lsrs	r3, r3, #8
 801680a:	b29b      	uxth	r3, r3
 801680c:	b2db      	uxtb	r3, r3
 801680e:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8016810:	7bfa      	ldrb	r2, [r7, #15]
 8016812:	f107 0310 	add.w	r3, r7, #16
 8016816:	2101      	movs	r1, #1
 8016818:	4618      	mov	r0, r3
 801681a:	f7f8 fe05 	bl	800f428 <SecureElementDeriveAndStoreKey>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d001      	beq.n	8016828 <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016824:	230f      	movs	r3, #15
 8016826:	e000      	b.n	801682a <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016828:	2300      	movs	r3, #0
}
 801682a:	4618      	mov	r0, r3
 801682c:	3720      	adds	r7, #32
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
	...

08016834 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8016834:	b480      	push	{r7}
 8016836:	b083      	sub	sp, #12
 8016838:	af00      	add	r7, sp, #0
 801683a:	4603      	mov	r3, r0
 801683c:	6039      	str	r1, [r7, #0]
 801683e:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8016840:	683b      	ldr	r3, [r7, #0]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d101      	bne.n	801684a <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016846:	230a      	movs	r3, #10
 8016848:	e029      	b.n	801689e <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801684a:	79fb      	ldrb	r3, [r7, #7]
 801684c:	3b01      	subs	r3, #1
 801684e:	2b03      	cmp	r3, #3
 8016850:	d822      	bhi.n	8016898 <GetLastFcntDown+0x64>
 8016852:	a201      	add	r2, pc, #4	; (adr r2, 8016858 <GetLastFcntDown+0x24>)
 8016854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016858:	08016869 	.word	0x08016869
 801685c:	08016875 	.word	0x08016875
 8016860:	08016881 	.word	0x08016881
 8016864:	0801688d 	.word	0x0801688d
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8016868:	4b0f      	ldr	r3, [pc, #60]	; (80168a8 <GetLastFcntDown+0x74>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	691a      	ldr	r2, [r3, #16]
 801686e:	683b      	ldr	r3, [r7, #0]
 8016870:	601a      	str	r2, [r3, #0]
            break;
 8016872:	e013      	b.n	801689c <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8016874:	4b0c      	ldr	r3, [pc, #48]	; (80168a8 <GetLastFcntDown+0x74>)
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	695a      	ldr	r2, [r3, #20]
 801687a:	683b      	ldr	r3, [r7, #0]
 801687c:	601a      	str	r2, [r3, #0]
            break;
 801687e:	e00d      	b.n	801689c <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8016880:	4b09      	ldr	r3, [pc, #36]	; (80168a8 <GetLastFcntDown+0x74>)
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	699a      	ldr	r2, [r3, #24]
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	601a      	str	r2, [r3, #0]
            break;
 801688a:	e007      	b.n	801689c <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 801688c:	4b06      	ldr	r3, [pc, #24]	; (80168a8 <GetLastFcntDown+0x74>)
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	69da      	ldr	r2, [r3, #28]
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	601a      	str	r2, [r3, #0]
            break;
 8016896:	e001      	b.n	801689c <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8016898:	2305      	movs	r3, #5
 801689a:	e000      	b.n	801689e <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	370c      	adds	r7, #12
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bc80      	pop	{r7}
 80168a6:	4770      	bx	lr
 80168a8:	200016cc 	.word	0x200016cc

080168ac <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168ac:	b580      	push	{r7, lr}
 80168ae:	b084      	sub	sp, #16
 80168b0:	af00      	add	r7, sp, #0
 80168b2:	4603      	mov	r3, r0
 80168b4:	6039      	str	r1, [r7, #0]
 80168b6:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80168b8:	2300      	movs	r3, #0
 80168ba:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80168bc:	f107 020c 	add.w	r2, r7, #12
 80168c0:	79fb      	ldrb	r3, [r7, #7]
 80168c2:	4611      	mov	r1, r2
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7ff ffb5 	bl	8016834 <GetLastFcntDown>
 80168ca:	4603      	mov	r3, r0
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <CheckFCntDown+0x28>
    {
        return false;
 80168d0:	2300      	movs	r3, #0
 80168d2:	e00a      	b.n	80168ea <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	683a      	ldr	r2, [r7, #0]
 80168d8:	429a      	cmp	r2, r3
 80168da:	d803      	bhi.n	80168e4 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 80168dc:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80168de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168e2:	d101      	bne.n	80168e8 <CheckFCntDown+0x3c>
    {
        return true;
 80168e4:	2301      	movs	r3, #1
 80168e6:	e000      	b.n	80168ea <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80168e8:	2300      	movs	r3, #0
    }
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3710      	adds	r7, #16
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
	...

080168f4 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80168f4:	b480      	push	{r7}
 80168f6:	b083      	sub	sp, #12
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	4603      	mov	r3, r0
 80168fc:	6039      	str	r1, [r7, #0]
 80168fe:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8016900:	79fb      	ldrb	r3, [r7, #7]
 8016902:	3b01      	subs	r3, #1
 8016904:	2b03      	cmp	r3, #3
 8016906:	d82b      	bhi.n	8016960 <UpdateFCntDown+0x6c>
 8016908:	a201      	add	r2, pc, #4	; (adr r2, 8016910 <UpdateFCntDown+0x1c>)
 801690a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801690e:	bf00      	nop
 8016910:	08016921 	.word	0x08016921
 8016914:	08016933 	.word	0x08016933
 8016918:	08016945 	.word	0x08016945
 801691c:	08016957 	.word	0x08016957
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8016920:	4b12      	ldr	r3, [pc, #72]	; (801696c <UpdateFCntDown+0x78>)
 8016922:	681b      	ldr	r3, [r3, #0]
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8016928:	4b10      	ldr	r3, [pc, #64]	; (801696c <UpdateFCntDown+0x78>)
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	683a      	ldr	r2, [r7, #0]
 801692e:	621a      	str	r2, [r3, #32]
            break;
 8016930:	e017      	b.n	8016962 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8016932:	4b0e      	ldr	r3, [pc, #56]	; (801696c <UpdateFCntDown+0x78>)
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	683a      	ldr	r2, [r7, #0]
 8016938:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 801693a:	4b0c      	ldr	r3, [pc, #48]	; (801696c <UpdateFCntDown+0x78>)
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	683a      	ldr	r2, [r7, #0]
 8016940:	621a      	str	r2, [r3, #32]
            break;
 8016942:	e00e      	b.n	8016962 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8016944:	4b09      	ldr	r3, [pc, #36]	; (801696c <UpdateFCntDown+0x78>)
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	683a      	ldr	r2, [r7, #0]
 801694a:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 801694c:	4b07      	ldr	r3, [pc, #28]	; (801696c <UpdateFCntDown+0x78>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	683a      	ldr	r2, [r7, #0]
 8016952:	621a      	str	r2, [r3, #32]
            break;
 8016954:	e005      	b.n	8016962 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8016956:	4b05      	ldr	r3, [pc, #20]	; (801696c <UpdateFCntDown+0x78>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	683a      	ldr	r2, [r7, #0]
 801695c:	61da      	str	r2, [r3, #28]
            break;
 801695e:	e000      	b.n	8016962 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8016960:	bf00      	nop
    }
}
 8016962:	bf00      	nop
 8016964:	370c      	adds	r7, #12
 8016966:	46bd      	mov	sp, r7
 8016968:	bc80      	pop	{r7}
 801696a:	4770      	bx	lr
 801696c:	200016cc 	.word	0x200016cc

08016970 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8016970:	b480      	push	{r7}
 8016972:	b083      	sub	sp, #12
 8016974:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8016976:	4b18      	ldr	r3, [pc, #96]	; (80169d8 <ResetFCnts+0x68>)
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	2200      	movs	r2, #0
 801697c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801697e:	4b16      	ldr	r3, [pc, #88]	; (80169d8 <ResetFCnts+0x68>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	f04f 32ff 	mov.w	r2, #4294967295
 8016986:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016988:	4b13      	ldr	r3, [pc, #76]	; (80169d8 <ResetFCnts+0x68>)
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	f04f 32ff 	mov.w	r2, #4294967295
 8016990:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016992:	4b11      	ldr	r3, [pc, #68]	; (80169d8 <ResetFCnts+0x68>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	f04f 32ff 	mov.w	r2, #4294967295
 801699a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801699c:	4b0e      	ldr	r3, [pc, #56]	; (80169d8 <ResetFCnts+0x68>)
 801699e:	681a      	ldr	r2, [r3, #0]
 80169a0:	4b0d      	ldr	r3, [pc, #52]	; (80169d8 <ResetFCnts+0x68>)
 80169a2:	681b      	ldr	r3, [r3, #0]
 80169a4:	6992      	ldr	r2, [r2, #24]
 80169a6:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169a8:	2300      	movs	r3, #0
 80169aa:	607b      	str	r3, [r7, #4]
 80169ac:	e00b      	b.n	80169c6 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 80169ae:	4b0a      	ldr	r3, [pc, #40]	; (80169d8 <ResetFCnts+0x68>)
 80169b0:	681a      	ldr	r2, [r3, #0]
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	3306      	adds	r3, #6
 80169b6:	009b      	lsls	r3, r3, #2
 80169b8:	4413      	add	r3, r2
 80169ba:	f04f 32ff 	mov.w	r2, #4294967295
 80169be:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	3301      	adds	r3, #1
 80169c4:	607b      	str	r3, [r7, #4]
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	ddf0      	ble.n	80169ae <ResetFCnts+0x3e>
    }
}
 80169cc:	bf00      	nop
 80169ce:	bf00      	nop
 80169d0:	370c      	adds	r7, #12
 80169d2:	46bd      	mov	sp, r7
 80169d4:	bc80      	pop	{r7}
 80169d6:	4770      	bx	lr
 80169d8:	200016cc 	.word	0x200016cc

080169dc <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 80169dc:	b480      	push	{r7}
 80169de:	b083      	sub	sp, #12
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 80169e4:	4b06      	ldr	r3, [pc, #24]	; (8016a00 <IsJoinNonce10xOk+0x24>)
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	689b      	ldr	r3, [r3, #8]
 80169ea:	687a      	ldr	r2, [r7, #4]
 80169ec:	429a      	cmp	r2, r3
 80169ee:	bf8c      	ite	hi
 80169f0:	2301      	movhi	r3, #1
 80169f2:	2300      	movls	r3, #0
 80169f4:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 80169f6:	4618      	mov	r0, r3
 80169f8:	370c      	adds	r7, #12
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bc80      	pop	{r7}
 80169fe:	4770      	bx	lr
 8016a00:	200016cc 	.word	0x200016cc

08016a04 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8016a04:	b580      	push	{r7, lr}
 8016a06:	b082      	sub	sp, #8
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d101      	bne.n	8016a16 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8016a12:	2309      	movs	r3, #9
 8016a14:	e01c      	b.n	8016a50 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8016a16:	4a10      	ldr	r2, [pc, #64]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8016a1c:	4b0e      	ldr	r3, [pc, #56]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	2228      	movs	r2, #40	; 0x28
 8016a22:	2100      	movs	r1, #0
 8016a24:	4618      	mov	r0, r3
 8016a26:	f003 fa31 	bl	8019e8c <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8016a2a:	4b0b      	ldr	r3, [pc, #44]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	2201      	movs	r2, #1
 8016a30:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8016a32:	4b09      	ldr	r3, [pc, #36]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2201      	movs	r2, #1
 8016a38:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8016a3a:	4b07      	ldr	r3, [pc, #28]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2201      	movs	r2, #1
 8016a40:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8016a42:	4b05      	ldr	r3, [pc, #20]	; (8016a58 <LoRaMacCryptoInit+0x54>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	2200      	movs	r2, #0
 8016a48:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8016a4a:	f7ff ff91 	bl	8016970 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8016a4e:	2300      	movs	r3, #0
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3708      	adds	r7, #8
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}
 8016a58:	200016cc 	.word	0x200016cc

08016a5c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8016a5c:	b480      	push	{r7}
 8016a5e:	b083      	sub	sp, #12
 8016a60:	af00      	add	r7, sp, #0
 8016a62:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8016a64:	4b04      	ldr	r3, [pc, #16]	; (8016a78 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	687a      	ldr	r2, [r7, #4]
 8016a6a:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8016a6c:	2300      	movs	r3, #0
}
 8016a6e:	4618      	mov	r0, r3
 8016a70:	370c      	adds	r7, #12
 8016a72:	46bd      	mov	sp, r7
 8016a74:	bc80      	pop	{r7}
 8016a76:	4770      	bx	lr
 8016a78:	200016cc 	.word	0x200016cc

08016a7c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8016a7c:	b480      	push	{r7}
 8016a7e:	b083      	sub	sp, #12
 8016a80:	af00      	add	r7, sp, #0
 8016a82:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d101      	bne.n	8016a8e <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016a8a:	230a      	movs	r3, #10
 8016a8c:	e006      	b.n	8016a9c <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8016a8e:	4b06      	ldr	r3, [pc, #24]	; (8016aa8 <LoRaMacCryptoGetFCntUp+0x2c>)
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	68db      	ldr	r3, [r3, #12]
 8016a94:	1c5a      	adds	r2, r3, #1
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8016a9a:	2300      	movs	r3, #0
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	370c      	adds	r7, #12
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	bc80      	pop	{r7}
 8016aa4:	4770      	bx	lr
 8016aa6:	bf00      	nop
 8016aa8:	200016cc 	.word	0x200016cc

08016aac <LoRaMacCryptoGetFCntDown>:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint16_t maxFCntGap, uint32_t frameFcnt, uint32_t* currentDown )
{
 8016aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8016ab0:	b08a      	sub	sp, #40	; 0x28
 8016ab2:	af00      	add	r7, sp, #0
 8016ab4:	613a      	str	r2, [r7, #16]
 8016ab6:	60fb      	str	r3, [r7, #12]
 8016ab8:	4603      	mov	r3, r0
 8016aba:	75fb      	strb	r3, [r7, #23]
 8016abc:	460b      	mov	r3, r1
 8016abe:	82bb      	strh	r3, [r7, #20]
    uint32_t lastDown = 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	61fb      	str	r3, [r7, #28]
    int32_t fCntDiff = 0;
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	627b      	str	r3, [r7, #36]	; 0x24
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8016ac8:	2313      	movs	r3, #19
 8016aca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    if( currentDown == NULL )
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d101      	bne.n	8016ad8 <LoRaMacCryptoGetFCntDown+0x2c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ad4:	230a      	movs	r3, #10
 8016ad6:	e057      	b.n	8016b88 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8016ad8:	f107 021c 	add.w	r2, r7, #28
 8016adc:	7dfb      	ldrb	r3, [r7, #23]
 8016ade:	4611      	mov	r1, r2
 8016ae0:	4618      	mov	r0, r3
 8016ae2:	f7ff fea7 	bl	8016834 <GetLastFcntDown>
 8016ae6:	4603      	mov	r3, r0
 8016ae8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8016aec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d002      	beq.n	8016afa <LoRaMacCryptoGetFCntDown+0x4e>
    {
        return cryptoStatus;
 8016af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016af8:	e046      	b.n	8016b88 <LoRaMacCryptoGetFCntDown+0xdc>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8016afa:	69fb      	ldr	r3, [r7, #28]
 8016afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016b00:	d103      	bne.n	8016b0a <LoRaMacCryptoGetFCntDown+0x5e>
    {
        *currentDown = frameFcnt;
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	693a      	ldr	r2, [r7, #16]
 8016b06:	601a      	str	r2, [r3, #0]
 8016b08:	e01e      	b.n	8016b48 <LoRaMacCryptoGetFCntDown+0x9c>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8016b0a:	69fb      	ldr	r3, [r7, #28]
 8016b0c:	b29b      	uxth	r3, r3
 8016b0e:	693a      	ldr	r2, [r7, #16]
 8016b10:	1ad3      	subs	r3, r2, r3
 8016b12:	627b      	str	r3, [r7, #36]	; 0x24

        if( fCntDiff > 0 )
 8016b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	dd05      	ble.n	8016b26 <LoRaMacCryptoGetFCntDown+0x7a>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8016b1a:	69fa      	ldr	r2, [r7, #28]
 8016b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b1e:	441a      	add	r2, r3
 8016b20:	68fb      	ldr	r3, [r7, #12]
 8016b22:	601a      	str	r2, [r3, #0]
 8016b24:	e010      	b.n	8016b48 <LoRaMacCryptoGetFCntDown+0x9c>
        }
        else if( fCntDiff == 0 )
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d104      	bne.n	8016b36 <LoRaMacCryptoGetFCntDown+0x8a>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8016b2c:	69fa      	ldr	r2, [r7, #28]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8016b32:	2307      	movs	r3, #7
 8016b34:	e028      	b.n	8016b88 <LoRaMacCryptoGetFCntDown+0xdc>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8016b36:	69fb      	ldr	r3, [r7, #28]
 8016b38:	0c1b      	lsrs	r3, r3, #16
 8016b3a:	041b      	lsls	r3, r3, #16
 8016b3c:	693a      	ldr	r2, [r7, #16]
 8016b3e:	4413      	add	r3, r2
 8016b40:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	601a      	str	r2, [r3, #0]
        }
    }

    // For LoRaWAN 1.0.X only, check maxFCntGap
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8016b48:	4b12      	ldr	r3, [pc, #72]	; (8016b94 <LoRaMacCryptoGetFCntDown+0xe8>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	789b      	ldrb	r3, [r3, #2]
 8016b4e:	2b00      	cmp	r3, #0
 8016b50:	d119      	bne.n	8016b86 <LoRaMacCryptoGetFCntDown+0xda>
    {
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 8016b52:	68fb      	ldr	r3, [r7, #12]
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	2200      	movs	r2, #0
 8016b58:	603b      	str	r3, [r7, #0]
 8016b5a:	607a      	str	r2, [r7, #4]
 8016b5c:	69fb      	ldr	r3, [r7, #28]
 8016b5e:	2200      	movs	r2, #0
 8016b60:	469a      	mov	sl, r3
 8016b62:	4693      	mov	fp, r2
 8016b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b68:	4611      	mov	r1, r2
 8016b6a:	ebb1 040a 	subs.w	r4, r1, sl
 8016b6e:	eb63 050b 	sbc.w	r5, r3, fp
 8016b72:	8abb      	ldrh	r3, [r7, #20]
 8016b74:	2200      	movs	r2, #0
 8016b76:	4698      	mov	r8, r3
 8016b78:	4691      	mov	r9, r2
 8016b7a:	4544      	cmp	r4, r8
 8016b7c:	eb75 0309 	sbcs.w	r3, r5, r9
 8016b80:	db01      	blt.n	8016b86 <LoRaMacCryptoGetFCntDown+0xda>
        {
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 8016b82:	2308      	movs	r3, #8
 8016b84:	e000      	b.n	8016b88 <LoRaMacCryptoGetFCntDown+0xdc>
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016b86:	2300      	movs	r3, #0
}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3728      	adds	r7, #40	; 0x28
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016b92:	bf00      	nop
 8016b94:	200016cc 	.word	0x200016cc

08016b98 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8016b98:	b480      	push	{r7}
 8016b9a:	b085      	sub	sp, #20
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d101      	bne.n	8016baa <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ba6:	230a      	movs	r3, #10
 8016ba8:	e019      	b.n	8016bde <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016baa:	2300      	movs	r3, #0
 8016bac:	60fb      	str	r3, [r7, #12]
 8016bae:	e012      	b.n	8016bd6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8016bb0:	4b0d      	ldr	r3, [pc, #52]	; (8016be8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8016bb2:	6819      	ldr	r1, [r3, #0]
 8016bb4:	68fa      	ldr	r2, [r7, #12]
 8016bb6:	4613      	mov	r3, r2
 8016bb8:	005b      	lsls	r3, r3, #1
 8016bba:	4413      	add	r3, r2
 8016bbc:	011b      	lsls	r3, r3, #4
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	4413      	add	r3, r2
 8016bc4:	68fa      	ldr	r2, [r7, #12]
 8016bc6:	3206      	adds	r2, #6
 8016bc8:	0092      	lsls	r2, r2, #2
 8016bca:	440a      	add	r2, r1
 8016bcc:	3204      	adds	r2, #4
 8016bce:	625a      	str	r2, [r3, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	60fb      	str	r3, [r7, #12]
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	dde9      	ble.n	8016bb0 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016bdc:	2300      	movs	r3, #0
}
 8016bde:	4618      	mov	r0, r3
 8016be0:	3714      	adds	r7, #20
 8016be2:	46bd      	mov	sp, r7
 8016be4:	bc80      	pop	{r7}
 8016be6:	4770      	bx	lr
 8016be8:	200016cc 	.word	0x200016cc

08016bec <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8016bec:	b580      	push	{r7, lr}
 8016bee:	b082      	sub	sp, #8
 8016bf0:	af00      	add	r7, sp, #0
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	6039      	str	r1, [r7, #0]
 8016bf6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8016bf8:	79fb      	ldrb	r3, [r7, #7]
 8016bfa:	6839      	ldr	r1, [r7, #0]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7f8 faef 	bl	800f1e0 <SecureElementSetKey>
 8016c02:	4603      	mov	r3, r0
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d001      	beq.n	8016c0c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c08:	230f      	movs	r3, #15
 8016c0a:	e021      	b.n	8016c50 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8016c0c:	79fb      	ldrb	r3, [r7, #7]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d11d      	bne.n	8016c4e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c12:	4b11      	ldr	r3, [pc, #68]	; (8016c58 <LoRaMacCryptoSetKey+0x6c>)
 8016c14:	681b      	ldr	r3, [r3, #0]
 8016c16:	789b      	ldrb	r3, [r3, #2]
 8016c18:	210b      	movs	r1, #11
 8016c1a:	4618      	mov	r0, r3
 8016c1c:	f000 fa5e 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016c20:	4603      	mov	r3, r0
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d001      	beq.n	8016c2a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c26:	230f      	movs	r3, #15
 8016c28:	e012      	b.n	8016c50 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c2a:	210c      	movs	r1, #12
 8016c2c:	2000      	movs	r0, #0
 8016c2e:	f000 fa55 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016c32:	4603      	mov	r3, r0
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d001      	beq.n	8016c3c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c38:	230f      	movs	r3, #15
 8016c3a:	e009      	b.n	8016c50 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8016c3c:	210a      	movs	r1, #10
 8016c3e:	2000      	movs	r0, #0
 8016c40:	f000 fa4c 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016c44:	4603      	mov	r3, r0
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d001      	beq.n	8016c4e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016c4a:	230f      	movs	r3, #15
 8016c4c:	e000      	b.n	8016c50 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8016c4e:	2300      	movs	r3, #0
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3708      	adds	r7, #8
 8016c54:	46bd      	mov	sp, r7
 8016c56:	bd80      	pop	{r7, pc}
 8016c58:	200016cc 	.word	0x200016cc

08016c5c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b086      	sub	sp, #24
 8016c60:	af02      	add	r7, sp, #8
 8016c62:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	d101      	bne.n	8016c6e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016c6a:	230a      	movs	r3, #10
 8016c6c:	e033      	b.n	8016cd6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8016c6e:	2301      	movs	r3, #1
 8016c70:	73fb      	strb	r3, [r7, #15]

    // Add device nonce
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
 8016c72:	2300      	movs	r3, #0
 8016c74:	60bb      	str	r3, [r7, #8]
    SecureElementRandomNumber( &devNonce );
 8016c76:	f107 0308 	add.w	r3, r7, #8
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f7f8 fc8a 	bl	800f594 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 8016c80:	68ba      	ldr	r2, [r7, #8]
 8016c82:	4b17      	ldr	r3, [pc, #92]	; (8016ce0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	b292      	uxth	r2, r2
 8016c88:	809a      	strh	r2, [r3, #4]
#else
    CryptoNvm->DevNonce++;
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8016c8a:	4b15      	ldr	r3, [pc, #84]	; (8016ce0 <LoRaMacCryptoPrepareJoinRequest+0x84>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	889a      	ldrh	r2, [r3, #4]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016c94:	6878      	ldr	r0, [r7, #4]
 8016c96:	f000 fc1b 	bl	80174d0 <LoRaMacSerializerJoinRequest>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d001      	beq.n	8016ca4 <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016ca0:	2311      	movs	r3, #17
 8016ca2:	e018      	b.n	8016cd6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6819      	ldr	r1, [r3, #0]
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	3318      	adds	r3, #24
 8016cac:	7bfa      	ldrb	r2, [r7, #15]
 8016cae:	9300      	str	r3, [sp, #0]
 8016cb0:	4613      	mov	r3, r2
 8016cb2:	2213      	movs	r2, #19
 8016cb4:	2000      	movs	r0, #0
 8016cb6:	f7f8 faf1 	bl	800f29c <SecureElementComputeAesCmac>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <LoRaMacCryptoPrepareJoinRequest+0x68>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016cc0:	230f      	movs	r3, #15
 8016cc2:	e008      	b.n	8016cd6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 fc03 	bl	80174d0 <LoRaMacSerializerJoinRequest>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d001      	beq.n	8016cd4 <LoRaMacCryptoPrepareJoinRequest+0x78>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016cd0:	2311      	movs	r3, #17
 8016cd2:	e000      	b.n	8016cd6 <LoRaMacCryptoPrepareJoinRequest+0x7a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8016cd4:	2300      	movs	r3, #0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3710      	adds	r7, #16
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}
 8016cde:	bf00      	nop
 8016ce0:	200016cc 	.word	0x200016cc

08016ce4 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8016ce4:	b590      	push	{r4, r7, lr}
 8016ce6:	b097      	sub	sp, #92	; 0x5c
 8016ce8:	af04      	add	r7, sp, #16
 8016cea:	4603      	mov	r3, r0
 8016cec:	60b9      	str	r1, [r7, #8]
 8016cee:	607a      	str	r2, [r7, #4]
 8016cf0:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d002      	beq.n	8016cfe <LoRaMacCryptoHandleJoinAccept+0x1a>
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d101      	bne.n	8016d02 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016cfe:	230a      	movs	r3, #10
 8016d00:	e0d3      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016d02:	2313      	movs	r3, #19
 8016d04:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8016d08:	2300      	movs	r3, #0
 8016d0a:	617b      	str	r3, [r7, #20]
 8016d0c:	f107 0318 	add.w	r3, r7, #24
 8016d10:	221d      	movs	r2, #29
 8016d12:	2100      	movs	r1, #0
 8016d14:	4618      	mov	r0, r3
 8016d16:	f007 fe9b 	bl	801ea50 <memset>
    uint8_t versionMinor         = 0;
 8016d1a:	2300      	movs	r3, #0
 8016d1c:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8016d1e:	4b65      	ldr	r3, [pc, #404]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	889b      	ldrh	r3, [r3, #4]
 8016d24:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681c      	ldr	r4, [r3, #0]
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	791b      	ldrb	r3, [r3, #4]
 8016d30:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8016d34:	7bf8      	ldrb	r0, [r7, #15]
 8016d36:	f107 0213 	add.w	r2, r7, #19
 8016d3a:	9202      	str	r2, [sp, #8]
 8016d3c:	f107 0214 	add.w	r2, r7, #20
 8016d40:	9201      	str	r2, [sp, #4]
 8016d42:	9300      	str	r3, [sp, #0]
 8016d44:	4623      	mov	r3, r4
 8016d46:	460a      	mov	r2, r1
 8016d48:	68b9      	ldr	r1, [r7, #8]
 8016d4a:	f7f8 fbad 	bl	800f4a8 <SecureElementProcessJoinAccept>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d001      	beq.n	8016d58 <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8016d54:	230f      	movs	r3, #15
 8016d56:	e0a8      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	6818      	ldr	r0, [r3, #0]
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	791b      	ldrb	r3, [r3, #4]
 8016d60:	b29a      	uxth	r2, r3
 8016d62:	f107 0314 	add.w	r3, r7, #20
 8016d66:	4619      	mov	r1, r3
 8016d68:	f003 f855 	bl	8019e16 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016d6c:	6878      	ldr	r0, [r7, #4]
 8016d6e:	f000 f9f0 	bl	8017152 <LoRaMacParserJoinAccept>
 8016d72:	4603      	mov	r3, r0
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d001      	beq.n	8016d7c <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016d78:	2310      	movs	r3, #16
 8016d7a:	e096      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	799b      	ldrb	r3, [r3, #6]
 8016d86:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	79db      	ldrb	r3, [r3, #7]
 8016d8c:	021b      	lsls	r3, r3, #8
 8016d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d90:	4313      	orrs	r3, r2
 8016d92:	63fb      	str	r3, [r7, #60]	; 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	7a1b      	ldrb	r3, [r3, #8]
 8016d98:	041b      	lsls	r3, r3, #16
 8016d9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016d9c:	4313      	orrs	r3, r2
 8016d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8016da0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016da2:	f7ff fe1b 	bl	80169dc <IsJoinNonce10xOk>
 8016da6:	4603      	mov	r3, r0
 8016da8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    }

    if( isJoinNonceOk == true )
 8016dac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d010      	beq.n	8016dd6 <LoRaMacCryptoHandleJoinAccept+0xf2>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8016db4:	4b3f      	ldr	r3, [pc, #252]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016dba:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8016dbc:	7cfb      	ldrb	r3, [r7, #19]
 8016dbe:	210b      	movs	r1, #11
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f000 f98b 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dcc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d005      	beq.n	8016de0 <LoRaMacCryptoHandleJoinAccept+0xfc>
 8016dd4:	e001      	b.n	8016dda <LoRaMacCryptoHandleJoinAccept+0xf6>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8016dd6:	2303      	movs	r3, #3
 8016dd8:	e067      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        return retval;
 8016dda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dde:	e064      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8016de0:	210c      	movs	r1, #12
 8016de2:	2000      	movs	r0, #0
 8016de4:	f000 f97a 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016de8:	4603      	mov	r3, r0
 8016dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016dee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d002      	beq.n	8016dfc <LoRaMacCryptoHandleJoinAccept+0x118>
    {
        return retval;
 8016df6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016dfa:	e056      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8016dfc:	210a      	movs	r1, #10
 8016dfe:	2000      	movs	r0, #0
 8016e00:	f000 f96c 	bl	80170dc <LoRaMacCryptoDeriveLifeTimeKey>
 8016e04:	4603      	mov	r3, r0
 8016e06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d002      	beq.n	8016e18 <LoRaMacCryptoHandleJoinAccept+0x134>
    {
        return retval;
 8016e12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e16:	e048      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	7a5b      	ldrb	r3, [r3, #9]
 8016e1c:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	7a9b      	ldrb	r3, [r3, #10]
 8016e22:	021b      	lsls	r3, r3, #8
 8016e24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e26:	4313      	orrs	r3, r2
 8016e28:	63bb      	str	r3, [r7, #56]	; 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	7adb      	ldrb	r3, [r3, #11]
 8016e2e:	041b      	lsls	r3, r3, #16
 8016e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e32:	4313      	orrs	r3, r2
 8016e34:	63bb      	str	r3, [r7, #56]	; 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8016e36:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e3e:	2009      	movs	r0, #9
 8016e40:	f7ff fca8 	bl	8016794 <DeriveSessionKey10x>
 8016e44:	4603      	mov	r3, r0
 8016e46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <LoRaMacCryptoHandleJoinAccept+0x174>
        {
            return retval;
 8016e52:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e56:	e028      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8016e58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016e5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016e5e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016e60:	2008      	movs	r0, #8
 8016e62:	f7ff fc97 	bl	8016794 <DeriveSessionKey10x>
 8016e66:	4603      	mov	r3, r0
 8016e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016e6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d002      	beq.n	8016e7a <LoRaMacCryptoHandleJoinAccept+0x196>
        {
            return retval;
 8016e74:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8016e78:	e017      	b.n	8016eaa <LoRaMacCryptoHandleJoinAccept+0x1c6>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8016e7a:	4b0e      	ldr	r3, [pc, #56]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	7cfa      	ldrb	r2, [r7, #19]
 8016e80:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8016e82:	4b0c      	ldr	r3, [pc, #48]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	2200      	movs	r2, #0
 8016e88:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e8a:	4b0a      	ldr	r3, [pc, #40]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e8c:	681b      	ldr	r3, [r3, #0]
 8016e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016e92:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e94:	4b07      	ldr	r3, [pc, #28]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	f04f 32ff 	mov.w	r2, #4294967295
 8016e9c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8016e9e:	4b05      	ldr	r3, [pc, #20]	; (8016eb4 <LoRaMacCryptoHandleJoinAccept+0x1d0>)
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ea6:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8016ea8:	2300      	movs	r3, #0
}
 8016eaa:	4618      	mov	r0, r3
 8016eac:	374c      	adds	r7, #76	; 0x4c
 8016eae:	46bd      	mov	sp, r7
 8016eb0:	bd90      	pop	{r4, r7, pc}
 8016eb2:	bf00      	nop
 8016eb4:	200016cc 	.word	0x200016cc

08016eb8 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8016eb8:	b590      	push	{r4, r7, lr}
 8016eba:	b08b      	sub	sp, #44	; 0x2c
 8016ebc:	af04      	add	r7, sp, #16
 8016ebe:	60f8      	str	r0, [r7, #12]
 8016ec0:	607b      	str	r3, [r7, #4]
 8016ec2:	460b      	mov	r3, r1
 8016ec4:	72fb      	strb	r3, [r7, #11]
 8016ec6:	4613      	mov	r3, r2
 8016ec8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016eca:	2313      	movs	r3, #19
 8016ecc:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016ece:	2309      	movs	r3, #9
 8016ed0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d101      	bne.n	8016edc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016ed8:	230a      	movs	r3, #10
 8016eda:	e05f      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8016edc:	4b31      	ldr	r3, [pc, #196]	; (8016fa4 <LoRaMacCryptoSecureMessage+0xec>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	68db      	ldr	r3, [r3, #12]
 8016ee2:	68fa      	ldr	r2, [r7, #12]
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d201      	bcs.n	8016eec <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016ee8:	2306      	movs	r3, #6
 8016eea:	e057      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d101      	bne.n	8016efa <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016ef6:	2308      	movs	r3, #8
 8016ef8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8016efa:	4b2a      	ldr	r3, [pc, #168]	; (8016fa4 <LoRaMacCryptoSecureMessage+0xec>)
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	68db      	ldr	r3, [r3, #12]
 8016f00:	68fa      	ldr	r2, [r7, #12]
 8016f02:	429a      	cmp	r2, r3
 8016f04:	d916      	bls.n	8016f34 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016f0a:	687b      	ldr	r3, [r7, #4]
 8016f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f10:	b219      	sxth	r1, r3
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	689c      	ldr	r4, [r3, #8]
 8016f16:	7dfa      	ldrb	r2, [r7, #23]
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	9301      	str	r3, [sp, #4]
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	9300      	str	r3, [sp, #0]
 8016f20:	4623      	mov	r3, r4
 8016f22:	f7ff fa43 	bl	80163ac <PayloadEncrypt>
 8016f26:	4603      	mov	r3, r0
 8016f28:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f2a:	7dbb      	ldrb	r3, [r7, #22]
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d001      	beq.n	8016f34 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8016f30:	7dbb      	ldrb	r3, [r7, #22]
 8016f32:	e033      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f34:	6878      	ldr	r0, [r7, #4]
 8016f36:	f000 fb4d 	bl	80175d4 <LoRaMacSerializerData>
 8016f3a:	4603      	mov	r3, r0
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d001      	beq.n	8016f44 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f40:	2311      	movs	r3, #17
 8016f42:	e02b      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8016f44:	2308      	movs	r3, #8
 8016f46:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6818      	ldr	r0, [r3, #0]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	791b      	ldrb	r3, [r3, #4]
 8016f50:	b29b      	uxth	r3, r3
 8016f52:	3b04      	subs	r3, #4
 8016f54:	b299      	uxth	r1, r3
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	689b      	ldr	r3, [r3, #8]
 8016f5a:	687a      	ldr	r2, [r7, #4]
 8016f5c:	322c      	adds	r2, #44	; 0x2c
 8016f5e:	7dfc      	ldrb	r4, [r7, #23]
 8016f60:	9203      	str	r2, [sp, #12]
 8016f62:	68fa      	ldr	r2, [r7, #12]
 8016f64:	9202      	str	r2, [sp, #8]
 8016f66:	9301      	str	r3, [sp, #4]
 8016f68:	2300      	movs	r3, #0
 8016f6a:	9300      	str	r3, [sp, #0]
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	4622      	mov	r2, r4
 8016f70:	f7ff fb1d 	bl	80165ae <ComputeCmacB0>
 8016f74:	4603      	mov	r3, r0
 8016f76:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8016f78:	7dbb      	ldrb	r3, [r7, #22]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d001      	beq.n	8016f82 <LoRaMacCryptoSecureMessage+0xca>
        {
            return retval;
 8016f7e:	7dbb      	ldrb	r3, [r7, #22]
 8016f80:	e00c      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8016f82:	6878      	ldr	r0, [r7, #4]
 8016f84:	f000 fb26 	bl	80175d4 <LoRaMacSerializerData>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d001      	beq.n	8016f92 <LoRaMacCryptoSecureMessage+0xda>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8016f8e:	2311      	movs	r3, #17
 8016f90:	e004      	b.n	8016f9c <LoRaMacCryptoSecureMessage+0xe4>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8016f92:	4b04      	ldr	r3, [pc, #16]	; (8016fa4 <LoRaMacCryptoSecureMessage+0xec>)
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	68fa      	ldr	r2, [r7, #12]
 8016f98:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8016f9a:	2300      	movs	r3, #0
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	371c      	adds	r7, #28
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd90      	pop	{r4, r7, pc}
 8016fa4:	200016cc 	.word	0x200016cc

08016fa8 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8016fa8:	b590      	push	{r4, r7, lr}
 8016faa:	b08b      	sub	sp, #44	; 0x2c
 8016fac:	af04      	add	r7, sp, #16
 8016fae:	60b9      	str	r1, [r7, #8]
 8016fb0:	607b      	str	r3, [r7, #4]
 8016fb2:	4603      	mov	r3, r0
 8016fb4:	73fb      	strb	r3, [r7, #15]
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8016fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d101      	bne.n	8016fc4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8016fc0:	230a      	movs	r3, #10
 8016fc2:	e084      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8016fc4:	7bbb      	ldrb	r3, [r7, #14]
 8016fc6:	6879      	ldr	r1, [r7, #4]
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7ff fc6f 	bl	80168ac <CheckFCntDown>
 8016fce:	4603      	mov	r3, r0
 8016fd0:	f083 0301 	eor.w	r3, r3, #1
 8016fd4:	b2db      	uxtb	r3, r3
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d001      	beq.n	8016fde <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8016fda:	2306      	movs	r3, #6
 8016fdc:	e077      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8016fde:	2313      	movs	r3, #19
 8016fe0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8016fe2:	2309      	movs	r3, #9
 8016fe4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8016fe6:	2308      	movs	r3, #8
 8016fe8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8016fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016fec:	f000 f97c 	bl	80172e8 <LoRaMacParserData>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d001      	beq.n	8016ffa <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8016ff6:	2310      	movs	r3, #16
 8016ff8:	e069      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8016ffa:	f107 0210 	add.w	r2, r7, #16
 8016ffe:	7bfb      	ldrb	r3, [r7, #15]
 8017000:	4611      	mov	r1, r2
 8017002:	4618      	mov	r0, r3
 8017004:	f7ff fba0 	bl	8016748 <GetKeyAddrItem>
 8017008:	4603      	mov	r3, r0
 801700a:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801700c:	7d7b      	ldrb	r3, [r7, #21]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d001      	beq.n	8017016 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8017012:	7d7b      	ldrb	r3, [r7, #21]
 8017014:	e05b      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8017016:	693b      	ldr	r3, [r7, #16]
 8017018:	785b      	ldrb	r3, [r3, #1]
 801701a:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 801701c:	693b      	ldr	r3, [r7, #16]
 801701e:	789b      	ldrb	r3, [r3, #2]
 8017020:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8017022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017024:	689b      	ldr	r3, [r3, #8]
 8017026:	68ba      	ldr	r2, [r7, #8]
 8017028:	429a      	cmp	r2, r3
 801702a:	d001      	beq.n	8017030 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801702c:	2302      	movs	r3, #2
 801702e:	e04e      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8017030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017032:	7b1b      	ldrb	r3, [r3, #12]
 8017034:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8017038:	b2db      	uxtb	r3, r3
 801703a:	2b00      	cmp	r3, #0
 801703c:	bf14      	ite	ne
 801703e:	2301      	movne	r3, #1
 8017040:	2300      	moveq	r3, #0
 8017042:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8017044:	4b24      	ldr	r3, [pc, #144]	; (80170d8 <LoRaMacCryptoUnsecureMessage+0x130>)
 8017046:	681b      	ldr	r3, [r3, #0]
 8017048:	789b      	ldrb	r3, [r3, #2]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d101      	bne.n	8017052 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801704e:	2300      	movs	r3, #0
 8017050:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8017052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017054:	6818      	ldr	r0, [r3, #0]
 8017056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017058:	791b      	ldrb	r3, [r3, #4]
 801705a:	b29b      	uxth	r3, r3
 801705c:	3b04      	subs	r3, #4
 801705e:	b299      	uxth	r1, r3
 8017060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017064:	7dbc      	ldrb	r4, [r7, #22]
 8017066:	7d3a      	ldrb	r2, [r7, #20]
 8017068:	9303      	str	r3, [sp, #12]
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	9302      	str	r3, [sp, #8]
 801706e:	68bb      	ldr	r3, [r7, #8]
 8017070:	9301      	str	r3, [sp, #4]
 8017072:	2301      	movs	r3, #1
 8017074:	9300      	str	r3, [sp, #0]
 8017076:	4623      	mov	r3, r4
 8017078:	f7ff fad7 	bl	801662a <VerifyCmacB0>
 801707c:	4603      	mov	r3, r0
 801707e:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8017080:	7d7b      	ldrb	r3, [r7, #21]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d001      	beq.n	801708a <LoRaMacCryptoUnsecureMessage+0xe2>
    {
        return retval;
 8017086:	7d7b      	ldrb	r3, [r7, #21]
 8017088:	e021      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 801708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801708c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8017090:	2b00      	cmp	r3, #0
 8017092:	d101      	bne.n	8017098 <LoRaMacCryptoUnsecureMessage+0xf0>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8017094:	2308      	movs	r3, #8
 8017096:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8017098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801709e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80170a2:	b219      	sxth	r1, r3
 80170a4:	7dfa      	ldrb	r2, [r7, #23]
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	9301      	str	r3, [sp, #4]
 80170aa:	2301      	movs	r3, #1
 80170ac:	9300      	str	r3, [sp, #0]
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	f7ff f97c 	bl	80163ac <PayloadEncrypt>
 80170b4:	4603      	mov	r3, r0
 80170b6:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80170b8:	7d7b      	ldrb	r3, [r7, #21]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d001      	beq.n	80170c2 <LoRaMacCryptoUnsecureMessage+0x11a>
    {
        return retval;
 80170be:	7d7b      	ldrb	r3, [r7, #21]
 80170c0:	e005      	b.n	80170ce <LoRaMacCryptoUnsecureMessage+0x126>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80170c2:	7bbb      	ldrb	r3, [r7, #14]
 80170c4:	6879      	ldr	r1, [r7, #4]
 80170c6:	4618      	mov	r0, r3
 80170c8:	f7ff fc14 	bl	80168f4 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80170cc:	2300      	movs	r3, #0
}
 80170ce:	4618      	mov	r0, r3
 80170d0:	371c      	adds	r7, #28
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd90      	pop	{r4, r7, pc}
 80170d6:	bf00      	nop
 80170d8:	200016cc 	.word	0x200016cc

080170dc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b088      	sub	sp, #32
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	4603      	mov	r3, r0
 80170e4:	460a      	mov	r2, r1
 80170e6:	71fb      	strb	r3, [r7, #7]
 80170e8:	4613      	mov	r3, r2
 80170ea:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80170ec:	2300      	movs	r3, #0
 80170ee:	60fb      	str	r3, [r7, #12]
 80170f0:	f107 0310 	add.w	r3, r7, #16
 80170f4:	2200      	movs	r2, #0
 80170f6:	601a      	str	r2, [r3, #0]
 80170f8:	605a      	str	r2, [r3, #4]
 80170fa:	609a      	str	r2, [r3, #8]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80170fc:	2300      	movs	r3, #0
 80170fe:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8017100:	79bb      	ldrb	r3, [r7, #6]
 8017102:	2b0c      	cmp	r3, #12
 8017104:	d00b      	beq.n	801711e <LoRaMacCryptoDeriveLifeTimeKey+0x42>
 8017106:	2b0c      	cmp	r3, #12
 8017108:	dc0f      	bgt.n	801712a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
 801710a:	2b0a      	cmp	r3, #10
 801710c:	d00a      	beq.n	8017124 <LoRaMacCryptoDeriveLifeTimeKey+0x48>
 801710e:	2b0b      	cmp	r3, #11
 8017110:	d10b      	bne.n	801712a <LoRaMacCryptoDeriveLifeTimeKey+0x4e>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8017112:	79fb      	ldrb	r3, [r7, #7]
 8017114:	2b01      	cmp	r3, #1
 8017116:	d10a      	bne.n	801712e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
            {
                compBase[0] = 0x20;
 8017118:	2320      	movs	r3, #32
 801711a:	733b      	strb	r3, [r7, #12]
            }
            break;
 801711c:	e007      	b.n	801712e <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 801711e:	230b      	movs	r3, #11
 8017120:	77fb      	strb	r3, [r7, #31]
            break;
 8017122:	e005      	b.n	8017130 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8017124:	2330      	movs	r3, #48	; 0x30
 8017126:	733b      	strb	r3, [r7, #12]
            break;
 8017128:	e002      	b.n	8017130 <LoRaMacCryptoDeriveLifeTimeKey+0x54>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801712a:	230b      	movs	r3, #11
 801712c:	e00d      	b.n	801714a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
            break;
 801712e:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8017130:	79ba      	ldrb	r2, [r7, #6]
 8017132:	7ff9      	ldrb	r1, [r7, #31]
 8017134:	f107 030c 	add.w	r3, r7, #12
 8017138:	4618      	mov	r0, r3
 801713a:	f7f8 f975 	bl	800f428 <SecureElementDeriveAndStoreKey>
 801713e:	4603      	mov	r3, r0
 8017140:	2b00      	cmp	r3, #0
 8017142:	d001      	beq.n	8017148 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8017144:	230f      	movs	r3, #15
 8017146:	e000      	b.n	801714a <LoRaMacCryptoDeriveLifeTimeKey+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8017148:	2300      	movs	r3, #0
}
 801714a:	4618      	mov	r0, r3
 801714c:	3720      	adds	r7, #32
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b084      	sub	sp, #16
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2b00      	cmp	r3, #0
 801715e:	d003      	beq.n	8017168 <LoRaMacParserJoinAccept+0x16>
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d101      	bne.n	801716c <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8017168:	2302      	movs	r3, #2
 801716a:	e0b9      	b.n	80172e0 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 801716c:	2300      	movs	r3, #0
 801716e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681a      	ldr	r2, [r3, #0]
 8017174:	89fb      	ldrh	r3, [r7, #14]
 8017176:	1c59      	adds	r1, r3, #1
 8017178:	81f9      	strh	r1, [r7, #14]
 801717a:	4413      	add	r3, r2
 801717c:	781a      	ldrb	r2, [r3, #0]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	1d98      	adds	r0, r3, #6
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	89fb      	ldrh	r3, [r7, #14]
 801718c:	4413      	add	r3, r2
 801718e:	2203      	movs	r2, #3
 8017190:	4619      	mov	r1, r3
 8017192:	f002 fe40 	bl	8019e16 <memcpy1>
    bufItr = bufItr + 3;
 8017196:	89fb      	ldrh	r3, [r7, #14]
 8017198:	3303      	adds	r3, #3
 801719a:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 801719c:	687b      	ldr	r3, [r7, #4]
 801719e:	f103 0009 	add.w	r0, r3, #9
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	681a      	ldr	r2, [r3, #0]
 80171a6:	89fb      	ldrh	r3, [r7, #14]
 80171a8:	4413      	add	r3, r2
 80171aa:	2203      	movs	r2, #3
 80171ac:	4619      	mov	r1, r3
 80171ae:	f002 fe32 	bl	8019e16 <memcpy1>
    bufItr = bufItr + 3;
 80171b2:	89fb      	ldrh	r3, [r7, #14]
 80171b4:	3303      	adds	r3, #3
 80171b6:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	681a      	ldr	r2, [r3, #0]
 80171bc:	89fb      	ldrh	r3, [r7, #14]
 80171be:	1c59      	adds	r1, r3, #1
 80171c0:	81f9      	strh	r1, [r7, #14]
 80171c2:	4413      	add	r3, r2
 80171c4:	781b      	ldrb	r3, [r3, #0]
 80171c6:	461a      	mov	r2, r3
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	89fb      	ldrh	r3, [r7, #14]
 80171d2:	1c59      	adds	r1, r3, #1
 80171d4:	81f9      	strh	r1, [r7, #14]
 80171d6:	4413      	add	r3, r2
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	021a      	lsls	r2, r3, #8
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	68db      	ldr	r3, [r3, #12]
 80171e0:	431a      	orrs	r2, r3
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	681a      	ldr	r2, [r3, #0]
 80171ea:	89fb      	ldrh	r3, [r7, #14]
 80171ec:	1c59      	adds	r1, r3, #1
 80171ee:	81f9      	strh	r1, [r7, #14]
 80171f0:	4413      	add	r3, r2
 80171f2:	781b      	ldrb	r3, [r3, #0]
 80171f4:	041a      	lsls	r2, r3, #16
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	68db      	ldr	r3, [r3, #12]
 80171fa:	431a      	orrs	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	89fb      	ldrh	r3, [r7, #14]
 8017206:	1c59      	adds	r1, r3, #1
 8017208:	81f9      	strh	r1, [r7, #14]
 801720a:	4413      	add	r3, r2
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	061a      	lsls	r2, r3, #24
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	68db      	ldr	r3, [r3, #12]
 8017214:	431a      	orrs	r2, r3
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	681a      	ldr	r2, [r3, #0]
 801721e:	89fb      	ldrh	r3, [r7, #14]
 8017220:	1c59      	adds	r1, r3, #1
 8017222:	81f9      	strh	r1, [r7, #14]
 8017224:	4413      	add	r3, r2
 8017226:	781a      	ldrb	r2, [r3, #0]
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	681a      	ldr	r2, [r3, #0]
 8017230:	89fb      	ldrh	r3, [r7, #14]
 8017232:	1c59      	adds	r1, r3, #1
 8017234:	81f9      	strh	r1, [r7, #14]
 8017236:	4413      	add	r3, r2
 8017238:	781a      	ldrb	r2, [r3, #0]
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	791b      	ldrb	r3, [r3, #4]
 8017242:	1f1a      	subs	r2, r3, #4
 8017244:	89fb      	ldrh	r3, [r7, #14]
 8017246:	1ad3      	subs	r3, r2, r3
 8017248:	2b10      	cmp	r3, #16
 801724a:	d10e      	bne.n	801726a <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	f103 0012 	add.w	r0, r3, #18
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681a      	ldr	r2, [r3, #0]
 8017256:	89fb      	ldrh	r3, [r7, #14]
 8017258:	4413      	add	r3, r2
 801725a:	2210      	movs	r2, #16
 801725c:	4619      	mov	r1, r3
 801725e:	f002 fdda 	bl	8019e16 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8017262:	89fb      	ldrh	r3, [r7, #14]
 8017264:	3310      	adds	r3, #16
 8017266:	81fb      	strh	r3, [r7, #14]
 8017268:	e008      	b.n	801727c <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	791b      	ldrb	r3, [r3, #4]
 801726e:	1f1a      	subs	r2, r3, #4
 8017270:	89fb      	ldrh	r3, [r7, #14]
 8017272:	1ad3      	subs	r3, r2, r3
 8017274:	2b00      	cmp	r3, #0
 8017276:	dd01      	ble.n	801727c <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8017278:	2301      	movs	r3, #1
 801727a:	e031      	b.n	80172e0 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681a      	ldr	r2, [r3, #0]
 8017280:	89fb      	ldrh	r3, [r7, #14]
 8017282:	1c59      	adds	r1, r3, #1
 8017284:	81f9      	strh	r1, [r7, #14]
 8017286:	4413      	add	r3, r2
 8017288:	781b      	ldrb	r3, [r3, #0]
 801728a:	461a      	mov	r2, r3
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	681a      	ldr	r2, [r3, #0]
 8017294:	89fb      	ldrh	r3, [r7, #14]
 8017296:	1c59      	adds	r1, r3, #1
 8017298:	81f9      	strh	r1, [r7, #14]
 801729a:	4413      	add	r3, r2
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	021a      	lsls	r2, r3, #8
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172a4:	431a      	orrs	r2, r3
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681a      	ldr	r2, [r3, #0]
 80172ae:	89fb      	ldrh	r3, [r7, #14]
 80172b0:	1c59      	adds	r1, r3, #1
 80172b2:	81f9      	strh	r1, [r7, #14]
 80172b4:	4413      	add	r3, r2
 80172b6:	781b      	ldrb	r3, [r3, #0]
 80172b8:	041a      	lsls	r2, r3, #16
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172be:	431a      	orrs	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	625a      	str	r2, [r3, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681a      	ldr	r2, [r3, #0]
 80172c8:	89fb      	ldrh	r3, [r7, #14]
 80172ca:	1c59      	adds	r1, r3, #1
 80172cc:	81f9      	strh	r1, [r7, #14]
 80172ce:	4413      	add	r3, r2
 80172d0:	781b      	ldrb	r3, [r3, #0]
 80172d2:	061a      	lsls	r2, r3, #24
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80172d8:	431a      	orrs	r2, r3
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	625a      	str	r2, [r3, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 80172de:	2300      	movs	r3, #0
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3710      	adds	r7, #16
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}

080172e8 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d003      	beq.n	80172fe <LoRaMacParserData+0x16>
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d101      	bne.n	8017302 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80172fe:	2302      	movs	r3, #2
 8017300:	e0e2      	b.n	80174c8 <LoRaMacParserData+0x1e0>
    }

    uint16_t bufItr = 0;
 8017302:	2300      	movs	r3, #0
 8017304:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681a      	ldr	r2, [r3, #0]
 801730a:	89fb      	ldrh	r3, [r7, #14]
 801730c:	1c59      	adds	r1, r3, #1
 801730e:	81f9      	strh	r1, [r7, #14]
 8017310:	4413      	add	r3, r2
 8017312:	781a      	ldrb	r2, [r3, #0]
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681a      	ldr	r2, [r3, #0]
 801731c:	89fb      	ldrh	r3, [r7, #14]
 801731e:	1c59      	adds	r1, r3, #1
 8017320:	81f9      	strh	r1, [r7, #14]
 8017322:	4413      	add	r3, r2
 8017324:	781b      	ldrb	r3, [r3, #0]
 8017326:	461a      	mov	r2, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681a      	ldr	r2, [r3, #0]
 8017330:	89fb      	ldrh	r3, [r7, #14]
 8017332:	1c59      	adds	r1, r3, #1
 8017334:	81f9      	strh	r1, [r7, #14]
 8017336:	4413      	add	r3, r2
 8017338:	781b      	ldrb	r3, [r3, #0]
 801733a:	021a      	lsls	r2, r3, #8
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	689b      	ldr	r3, [r3, #8]
 8017340:	431a      	orrs	r2, r3
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681a      	ldr	r2, [r3, #0]
 801734a:	89fb      	ldrh	r3, [r7, #14]
 801734c:	1c59      	adds	r1, r3, #1
 801734e:	81f9      	strh	r1, [r7, #14]
 8017350:	4413      	add	r3, r2
 8017352:	781b      	ldrb	r3, [r3, #0]
 8017354:	041a      	lsls	r2, r3, #16
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	689b      	ldr	r3, [r3, #8]
 801735a:	431a      	orrs	r2, r3
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681a      	ldr	r2, [r3, #0]
 8017364:	89fb      	ldrh	r3, [r7, #14]
 8017366:	1c59      	adds	r1, r3, #1
 8017368:	81f9      	strh	r1, [r7, #14]
 801736a:	4413      	add	r3, r2
 801736c:	781b      	ldrb	r3, [r3, #0]
 801736e:	061a      	lsls	r2, r3, #24
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	689b      	ldr	r3, [r3, #8]
 8017374:	431a      	orrs	r2, r3
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681a      	ldr	r2, [r3, #0]
 801737e:	89fb      	ldrh	r3, [r7, #14]
 8017380:	1c59      	adds	r1, r3, #1
 8017382:	81f9      	strh	r1, [r7, #14]
 8017384:	4413      	add	r3, r2
 8017386:	781a      	ldrb	r2, [r3, #0]
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	681a      	ldr	r2, [r3, #0]
 8017390:	89fb      	ldrh	r3, [r7, #14]
 8017392:	1c59      	adds	r1, r3, #1
 8017394:	81f9      	strh	r1, [r7, #14]
 8017396:	4413      	add	r3, r2
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	b29a      	uxth	r2, r3
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	681a      	ldr	r2, [r3, #0]
 80173a4:	89fb      	ldrh	r3, [r7, #14]
 80173a6:	1c59      	adds	r1, r3, #1
 80173a8:	81f9      	strh	r1, [r7, #14]
 80173aa:	4413      	add	r3, r2
 80173ac:	781b      	ldrb	r3, [r3, #0]
 80173ae:	0219      	lsls	r1, r3, #8
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	89db      	ldrh	r3, [r3, #14]
 80173b4:	b21a      	sxth	r2, r3
 80173b6:	b20b      	sxth	r3, r1
 80173b8:	4313      	orrs	r3, r2
 80173ba:	b21b      	sxth	r3, r3
 80173bc:	b29a      	uxth	r2, r3
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f103 0010 	add.w	r0, r3, #16
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681a      	ldr	r2, [r3, #0]
 80173cc:	89fb      	ldrh	r3, [r7, #14]
 80173ce:	18d1      	adds	r1, r2, r3
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	7b1b      	ldrb	r3, [r3, #12]
 80173d4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	b29b      	uxth	r3, r3
 80173dc:	461a      	mov	r2, r3
 80173de:	f002 fd1a 	bl	8019e16 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	7b1b      	ldrb	r3, [r3, #12]
 80173e6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80173ea:	b2db      	uxtb	r3, r3
 80173ec:	b29a      	uxth	r2, r3
 80173ee:	89fb      	ldrh	r3, [r7, #14]
 80173f0:	4413      	add	r3, r2
 80173f2:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	2200      	movs	r2, #0
 80173f8:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	2200      	movs	r2, #0
 8017400:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	791b      	ldrb	r3, [r3, #4]
 8017408:	461a      	mov	r2, r3
 801740a:	89fb      	ldrh	r3, [r7, #14]
 801740c:	1ad3      	subs	r3, r2, r3
 801740e:	2b04      	cmp	r3, #4
 8017410:	dd28      	ble.n	8017464 <LoRaMacParserData+0x17c>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681a      	ldr	r2, [r3, #0]
 8017416:	89fb      	ldrh	r3, [r7, #14]
 8017418:	1c59      	adds	r1, r3, #1
 801741a:	81f9      	strh	r1, [r7, #14]
 801741c:	4413      	add	r3, r2
 801741e:	781a      	ldrb	r2, [r3, #0]
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	791a      	ldrb	r2, [r3, #4]
 801742a:	89fb      	ldrh	r3, [r7, #14]
 801742c:	b2db      	uxtb	r3, r3
 801742e:	1ad3      	subs	r3, r2, r3
 8017430:	b2db      	uxtb	r3, r3
 8017432:	3b04      	subs	r3, #4
 8017434:	b2da      	uxtb	r2, r3
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	681a      	ldr	r2, [r3, #0]
 8017444:	89fb      	ldrh	r3, [r7, #14]
 8017446:	18d1      	adds	r1, r2, r3
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801744e:	b29b      	uxth	r3, r3
 8017450:	461a      	mov	r2, r3
 8017452:	f002 fce0 	bl	8019e16 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801745c:	b29a      	uxth	r2, r3
 801745e:	89fb      	ldrh	r3, [r7, #14]
 8017460:	4413      	add	r3, r2
 8017462:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	681a      	ldr	r2, [r3, #0]
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	791b      	ldrb	r3, [r3, #4]
 801746c:	3b04      	subs	r3, #4
 801746e:	4413      	add	r3, r2
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	461a      	mov	r2, r3
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	6819      	ldr	r1, [r3, #0]
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	791b      	ldrb	r3, [r3, #4]
 8017484:	3b03      	subs	r3, #3
 8017486:	440b      	add	r3, r1
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	021b      	lsls	r3, r3, #8
 801748c:	431a      	orrs	r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	6819      	ldr	r1, [r3, #0]
 801749a:	687b      	ldr	r3, [r7, #4]
 801749c:	791b      	ldrb	r3, [r3, #4]
 801749e:	3b02      	subs	r3, #2
 80174a0:	440b      	add	r3, r1
 80174a2:	781b      	ldrb	r3, [r3, #0]
 80174a4:	041b      	lsls	r3, r3, #16
 80174a6:	431a      	orrs	r2, r3
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	62da      	str	r2, [r3, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6819      	ldr	r1, [r3, #0]
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	791b      	ldrb	r3, [r3, #4]
 80174b8:	3b01      	subs	r3, #1
 80174ba:	440b      	add	r3, r1
 80174bc:	781b      	ldrb	r3, [r3, #0]
 80174be:	061b      	lsls	r3, r3, #24
 80174c0:	431a      	orrs	r2, r3
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	62da      	str	r2, [r3, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80174c6:	2300      	movs	r3, #0
}
 80174c8:	4618      	mov	r0, r3
 80174ca:	3710      	adds	r7, #16
 80174cc:	46bd      	mov	sp, r7
 80174ce:	bd80      	pop	{r7, pc}

080174d0 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80174d0:	b580      	push	{r7, lr}
 80174d2:	b084      	sub	sp, #16
 80174d4:	af00      	add	r7, sp, #0
 80174d6:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d003      	beq.n	80174e6 <LoRaMacSerializerJoinRequest+0x16>
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d101      	bne.n	80174ea <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80174e6:	2301      	movs	r3, #1
 80174e8:	e070      	b.n	80175cc <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80174ea:	2300      	movs	r3, #0
 80174ec:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	791b      	ldrb	r3, [r3, #4]
 80174f2:	2b16      	cmp	r3, #22
 80174f4:	d801      	bhi.n	80174fa <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80174f6:	2302      	movs	r3, #2
 80174f8:	e068      	b.n	80175cc <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681a      	ldr	r2, [r3, #0]
 80174fe:	89fb      	ldrh	r3, [r7, #14]
 8017500:	1c59      	adds	r1, r3, #1
 8017502:	81f9      	strh	r1, [r7, #14]
 8017504:	4413      	add	r3, r2
 8017506:	687a      	ldr	r2, [r7, #4]
 8017508:	7952      	ldrb	r2, [r2, #5]
 801750a:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681a      	ldr	r2, [r3, #0]
 8017510:	89fb      	ldrh	r3, [r7, #14]
 8017512:	18d0      	adds	r0, r2, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	3306      	adds	r3, #6
 8017518:	2208      	movs	r2, #8
 801751a:	4619      	mov	r1, r3
 801751c:	f002 fc96 	bl	8019e4c <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8017520:	89fb      	ldrh	r3, [r7, #14]
 8017522:	3308      	adds	r3, #8
 8017524:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681a      	ldr	r2, [r3, #0]
 801752a:	89fb      	ldrh	r3, [r7, #14]
 801752c:	18d0      	adds	r0, r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	330e      	adds	r3, #14
 8017532:	2208      	movs	r2, #8
 8017534:	4619      	mov	r1, r3
 8017536:	f002 fc89 	bl	8019e4c <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 801753a:	89fb      	ldrh	r3, [r7, #14]
 801753c:	3308      	adds	r3, #8
 801753e:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	8ad9      	ldrh	r1, [r3, #22]
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	681a      	ldr	r2, [r3, #0]
 8017548:	89fb      	ldrh	r3, [r7, #14]
 801754a:	1c58      	adds	r0, r3, #1
 801754c:	81f8      	strh	r0, [r7, #14]
 801754e:	4413      	add	r3, r2
 8017550:	b2ca      	uxtb	r2, r1
 8017552:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	8adb      	ldrh	r3, [r3, #22]
 8017558:	0a1b      	lsrs	r3, r3, #8
 801755a:	b299      	uxth	r1, r3
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681a      	ldr	r2, [r3, #0]
 8017560:	89fb      	ldrh	r3, [r7, #14]
 8017562:	1c58      	adds	r0, r3, #1
 8017564:	81f8      	strh	r0, [r7, #14]
 8017566:	4413      	add	r3, r2
 8017568:	b2ca      	uxtb	r2, r1
 801756a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	6999      	ldr	r1, [r3, #24]
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681a      	ldr	r2, [r3, #0]
 8017574:	89fb      	ldrh	r3, [r7, #14]
 8017576:	1c58      	adds	r0, r3, #1
 8017578:	81f8      	strh	r0, [r7, #14]
 801757a:	4413      	add	r3, r2
 801757c:	b2ca      	uxtb	r2, r1
 801757e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	699b      	ldr	r3, [r3, #24]
 8017584:	0a19      	lsrs	r1, r3, #8
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	89fb      	ldrh	r3, [r7, #14]
 801758c:	1c58      	adds	r0, r3, #1
 801758e:	81f8      	strh	r0, [r7, #14]
 8017590:	4413      	add	r3, r2
 8017592:	b2ca      	uxtb	r2, r1
 8017594:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	699b      	ldr	r3, [r3, #24]
 801759a:	0c19      	lsrs	r1, r3, #16
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	89fb      	ldrh	r3, [r7, #14]
 80175a2:	1c58      	adds	r0, r3, #1
 80175a4:	81f8      	strh	r0, [r7, #14]
 80175a6:	4413      	add	r3, r2
 80175a8:	b2ca      	uxtb	r2, r1
 80175aa:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	699b      	ldr	r3, [r3, #24]
 80175b0:	0e19      	lsrs	r1, r3, #24
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	681a      	ldr	r2, [r3, #0]
 80175b6:	89fb      	ldrh	r3, [r7, #14]
 80175b8:	1c58      	adds	r0, r3, #1
 80175ba:	81f8      	strh	r0, [r7, #14]
 80175bc:	4413      	add	r3, r2
 80175be:	b2ca      	uxtb	r2, r1
 80175c0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80175c2:	89fb      	ldrh	r3, [r7, #14]
 80175c4:	b2da      	uxtb	r2, r3
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80175ca:	2300      	movs	r3, #0
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3710      	adds	r7, #16
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d003      	beq.n	80175ea <LoRaMacSerializerData+0x16>
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	681b      	ldr	r3, [r3, #0]
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d101      	bne.n	80175ee <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80175ea:	2301      	movs	r3, #1
 80175ec:	e0e5      	b.n	80177ba <LoRaMacSerializerData+0x1e6>
    }

    uint16_t bufItr = 0;
 80175ee:	2300      	movs	r3, #0
 80175f0:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80175f2:	2308      	movs	r3, #8
 80175f4:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	7b1b      	ldrb	r3, [r3, #12]
 80175fa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80175fe:	b2db      	uxtb	r3, r3
 8017600:	b29a      	uxth	r2, r3
 8017602:	89bb      	ldrh	r3, [r7, #12]
 8017604:	4413      	add	r3, r2
 8017606:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801760e:	2b00      	cmp	r3, #0
 8017610:	d002      	beq.n	8017618 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8017612:	89bb      	ldrh	r3, [r7, #12]
 8017614:	3301      	adds	r3, #1
 8017616:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801761e:	b29a      	uxth	r2, r3
 8017620:	89bb      	ldrh	r3, [r7, #12]
 8017622:	4413      	add	r3, r2
 8017624:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8017626:	89bb      	ldrh	r3, [r7, #12]
 8017628:	3304      	adds	r3, #4
 801762a:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	791b      	ldrb	r3, [r3, #4]
 8017630:	b29b      	uxth	r3, r3
 8017632:	89ba      	ldrh	r2, [r7, #12]
 8017634:	429a      	cmp	r2, r3
 8017636:	d901      	bls.n	801763c <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8017638:	2302      	movs	r3, #2
 801763a:	e0be      	b.n	80177ba <LoRaMacSerializerData+0x1e6>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	89fb      	ldrh	r3, [r7, #14]
 8017642:	1c59      	adds	r1, r3, #1
 8017644:	81f9      	strh	r1, [r7, #14]
 8017646:	4413      	add	r3, r2
 8017648:	687a      	ldr	r2, [r7, #4]
 801764a:	7952      	ldrb	r2, [r2, #5]
 801764c:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	6899      	ldr	r1, [r3, #8]
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681a      	ldr	r2, [r3, #0]
 8017656:	89fb      	ldrh	r3, [r7, #14]
 8017658:	1c58      	adds	r0, r3, #1
 801765a:	81f8      	strh	r0, [r7, #14]
 801765c:	4413      	add	r3, r2
 801765e:	b2ca      	uxtb	r2, r1
 8017660:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	689b      	ldr	r3, [r3, #8]
 8017666:	0a19      	lsrs	r1, r3, #8
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	89fb      	ldrh	r3, [r7, #14]
 801766e:	1c58      	adds	r0, r3, #1
 8017670:	81f8      	strh	r0, [r7, #14]
 8017672:	4413      	add	r3, r2
 8017674:	b2ca      	uxtb	r2, r1
 8017676:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	0c19      	lsrs	r1, r3, #16
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681a      	ldr	r2, [r3, #0]
 8017682:	89fb      	ldrh	r3, [r7, #14]
 8017684:	1c58      	adds	r0, r3, #1
 8017686:	81f8      	strh	r0, [r7, #14]
 8017688:	4413      	add	r3, r2
 801768a:	b2ca      	uxtb	r2, r1
 801768c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	689b      	ldr	r3, [r3, #8]
 8017692:	0e19      	lsrs	r1, r3, #24
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	681a      	ldr	r2, [r3, #0]
 8017698:	89fb      	ldrh	r3, [r7, #14]
 801769a:	1c58      	adds	r0, r3, #1
 801769c:	81f8      	strh	r0, [r7, #14]
 801769e:	4413      	add	r3, r2
 80176a0:	b2ca      	uxtb	r2, r1
 80176a2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681a      	ldr	r2, [r3, #0]
 80176a8:	89fb      	ldrh	r3, [r7, #14]
 80176aa:	1c59      	adds	r1, r3, #1
 80176ac:	81f9      	strh	r1, [r7, #14]
 80176ae:	4413      	add	r3, r2
 80176b0:	687a      	ldr	r2, [r7, #4]
 80176b2:	7b12      	ldrb	r2, [r2, #12]
 80176b4:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	89d9      	ldrh	r1, [r3, #14]
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	89fb      	ldrh	r3, [r7, #14]
 80176c0:	1c58      	adds	r0, r3, #1
 80176c2:	81f8      	strh	r0, [r7, #14]
 80176c4:	4413      	add	r3, r2
 80176c6:	b2ca      	uxtb	r2, r1
 80176c8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	89db      	ldrh	r3, [r3, #14]
 80176ce:	0a1b      	lsrs	r3, r3, #8
 80176d0:	b299      	uxth	r1, r3
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	681a      	ldr	r2, [r3, #0]
 80176d6:	89fb      	ldrh	r3, [r7, #14]
 80176d8:	1c58      	adds	r0, r3, #1
 80176da:	81f8      	strh	r0, [r7, #14]
 80176dc:	4413      	add	r3, r2
 80176de:	b2ca      	uxtb	r2, r1
 80176e0:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681a      	ldr	r2, [r3, #0]
 80176e6:	89fb      	ldrh	r3, [r7, #14]
 80176e8:	18d0      	adds	r0, r2, r3
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f103 0110 	add.w	r1, r3, #16
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	7b1b      	ldrb	r3, [r3, #12]
 80176f4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80176f8:	b2db      	uxtb	r3, r3
 80176fa:	b29b      	uxth	r3, r3
 80176fc:	461a      	mov	r2, r3
 80176fe:	f002 fb8a 	bl	8019e16 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	7b1b      	ldrb	r3, [r3, #12]
 8017706:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801770a:	b2db      	uxtb	r3, r3
 801770c:	b29a      	uxth	r2, r3
 801770e:	89fb      	ldrh	r3, [r7, #14]
 8017710:	4413      	add	r3, r2
 8017712:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801771a:	2b00      	cmp	r3, #0
 801771c:	d009      	beq.n	8017732 <LoRaMacSerializerData+0x15e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681a      	ldr	r2, [r3, #0]
 8017722:	89fb      	ldrh	r3, [r7, #14]
 8017724:	1c59      	adds	r1, r3, #1
 8017726:	81f9      	strh	r1, [r7, #14]
 8017728:	4413      	add	r3, r2
 801772a:	687a      	ldr	r2, [r7, #4]
 801772c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017730:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681a      	ldr	r2, [r3, #0]
 8017736:	89fb      	ldrh	r3, [r7, #14]
 8017738:	18d0      	adds	r0, r2, r3
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017744:	b29b      	uxth	r3, r3
 8017746:	461a      	mov	r2, r3
 8017748:	f002 fb65 	bl	8019e16 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017752:	b29a      	uxth	r2, r3
 8017754:	89fb      	ldrh	r3, [r7, #14]
 8017756:	4413      	add	r3, r2
 8017758:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	681a      	ldr	r2, [r3, #0]
 8017762:	89fb      	ldrh	r3, [r7, #14]
 8017764:	1c58      	adds	r0, r3, #1
 8017766:	81f8      	strh	r0, [r7, #14]
 8017768:	4413      	add	r3, r2
 801776a:	b2ca      	uxtb	r2, r1
 801776c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 801776e:	687b      	ldr	r3, [r7, #4]
 8017770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017772:	0a19      	lsrs	r1, r3, #8
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	681a      	ldr	r2, [r3, #0]
 8017778:	89fb      	ldrh	r3, [r7, #14]
 801777a:	1c58      	adds	r0, r3, #1
 801777c:	81f8      	strh	r0, [r7, #14]
 801777e:	4413      	add	r3, r2
 8017780:	b2ca      	uxtb	r2, r1
 8017782:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017788:	0c19      	lsrs	r1, r3, #16
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681a      	ldr	r2, [r3, #0]
 801778e:	89fb      	ldrh	r3, [r7, #14]
 8017790:	1c58      	adds	r0, r3, #1
 8017792:	81f8      	strh	r0, [r7, #14]
 8017794:	4413      	add	r3, r2
 8017796:	b2ca      	uxtb	r2, r1
 8017798:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801779e:	0e19      	lsrs	r1, r3, #24
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681a      	ldr	r2, [r3, #0]
 80177a4:	89fb      	ldrh	r3, [r7, #14]
 80177a6:	1c58      	adds	r0, r3, #1
 80177a8:	81f8      	strh	r0, [r7, #14]
 80177aa:	4413      	add	r3, r2
 80177ac:	b2ca      	uxtb	r2, r1
 80177ae:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80177b0:	89fb      	ldrh	r3, [r7, #14]
 80177b2:	b2da      	uxtb	r2, r3
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80177b8:	2300      	movs	r3, #0
}
 80177ba:	4618      	mov	r0, r3
 80177bc:	3710      	adds	r7, #16
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd80      	pop	{r7, pc}

080177c2 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80177c2:	b480      	push	{r7}
 80177c4:	b083      	sub	sp, #12
 80177c6:	af00      	add	r7, sp, #0
 80177c8:	4603      	mov	r3, r0
 80177ca:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80177cc:	79fb      	ldrb	r3, [r7, #7]
 80177ce:	2b05      	cmp	r3, #5
 80177d0:	d101      	bne.n	80177d6 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80177d2:	2301      	movs	r3, #1
 80177d4:	e000      	b.n	80177d8 <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80177d6:	2300      	movs	r3, #0
        }
    }
}
 80177d8:	4618      	mov	r0, r3
 80177da:	370c      	adds	r7, #12
 80177dc:	46bd      	mov	sp, r7
 80177de:	bc80      	pop	{r7}
 80177e0:	4770      	bx	lr

080177e2 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80177e2:	b580      	push	{r7, lr}
 80177e4:	b084      	sub	sp, #16
 80177e6:	af00      	add	r7, sp, #0
 80177e8:	4603      	mov	r3, r0
 80177ea:	6039      	str	r1, [r7, #0]
 80177ec:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80177ee:	2300      	movs	r3, #0
 80177f0:	60bb      	str	r3, [r7, #8]
    switch( region )
 80177f2:	79fb      	ldrb	r3, [r7, #7]
 80177f4:	2b05      	cmp	r3, #5
 80177f6:	d105      	bne.n	8017804 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80177f8:	6838      	ldr	r0, [r7, #0]
 80177fa:	f001 f995 	bl	8018b28 <RegionEU868GetPhyParam>
 80177fe:	4603      	mov	r3, r0
 8017800:	60fb      	str	r3, [r7, #12]
 8017802:	e001      	b.n	8017808 <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	60fb      	str	r3, [r7, #12]
        }
    }
}
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	4618      	mov	r0, r3
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}

08017812 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8017812:	b580      	push	{r7, lr}
 8017814:	b082      	sub	sp, #8
 8017816:	af00      	add	r7, sp, #0
 8017818:	4603      	mov	r3, r0
 801781a:	6039      	str	r1, [r7, #0]
 801781c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801781e:	79fb      	ldrb	r3, [r7, #7]
 8017820:	2b05      	cmp	r3, #5
 8017822:	d103      	bne.n	801782c <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8017824:	6838      	ldr	r0, [r7, #0]
 8017826:	f001 facb 	bl	8018dc0 <RegionEU868SetBandTxDone>
 801782a:	e000      	b.n	801782e <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801782c:	bf00      	nop
        }
    }
}
 801782e:	3708      	adds	r7, #8
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}

08017834 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b082      	sub	sp, #8
 8017838:	af00      	add	r7, sp, #0
 801783a:	4603      	mov	r3, r0
 801783c:	6039      	str	r1, [r7, #0]
 801783e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017840:	79fb      	ldrb	r3, [r7, #7]
 8017842:	2b05      	cmp	r3, #5
 8017844:	d103      	bne.n	801784e <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8017846:	6838      	ldr	r0, [r7, #0]
 8017848:	f001 fae6 	bl	8018e18 <RegionEU868InitDefaults>
 801784c:	e000      	b.n	8017850 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801784e:	bf00      	nop
        }
    }
}
 8017850:	bf00      	nop
 8017852:	3708      	adds	r7, #8
 8017854:	46bd      	mov	sp, r7
 8017856:	bd80      	pop	{r7, pc}

08017858 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b082      	sub	sp, #8
 801785c:	af00      	add	r7, sp, #0
 801785e:	4603      	mov	r3, r0
 8017860:	6039      	str	r1, [r7, #0]
 8017862:	71fb      	strb	r3, [r7, #7]
 8017864:	4613      	mov	r3, r2
 8017866:	71bb      	strb	r3, [r7, #6]
    switch( region )
 8017868:	79fb      	ldrb	r3, [r7, #7]
 801786a:	2b05      	cmp	r3, #5
 801786c:	d106      	bne.n	801787c <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 801786e:	79bb      	ldrb	r3, [r7, #6]
 8017870:	4619      	mov	r1, r3
 8017872:	6838      	ldr	r0, [r7, #0]
 8017874:	f001 fb6e 	bl	8018f54 <RegionEU868Verify>
 8017878:	4603      	mov	r3, r0
 801787a:	e000      	b.n	801787e <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801787c:	2300      	movs	r3, #0
        }
    }
}
 801787e:	4618      	mov	r0, r3
 8017880:	3708      	adds	r7, #8
 8017882:	46bd      	mov	sp, r7
 8017884:	bd80      	pop	{r7, pc}

08017886 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 8017886:	b580      	push	{r7, lr}
 8017888:	b082      	sub	sp, #8
 801788a:	af00      	add	r7, sp, #0
 801788c:	4603      	mov	r3, r0
 801788e:	6039      	str	r1, [r7, #0]
 8017890:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017892:	79fb      	ldrb	r3, [r7, #7]
 8017894:	2b05      	cmp	r3, #5
 8017896:	d103      	bne.n	80178a0 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 8017898:	6838      	ldr	r0, [r7, #0]
 801789a:	f001 fbd7 	bl	801904c <RegionEU868ApplyCFList>
 801789e:	e000      	b.n	80178a2 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80178a0:	bf00      	nop
        }
    }
}
 80178a2:	bf00      	nop
 80178a4:	3708      	adds	r7, #8
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}

080178aa <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80178aa:	b580      	push	{r7, lr}
 80178ac:	b082      	sub	sp, #8
 80178ae:	af00      	add	r7, sp, #0
 80178b0:	4603      	mov	r3, r0
 80178b2:	6039      	str	r1, [r7, #0]
 80178b4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80178b6:	79fb      	ldrb	r3, [r7, #7]
 80178b8:	2b05      	cmp	r3, #5
 80178ba:	d104      	bne.n	80178c6 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80178bc:	6838      	ldr	r0, [r7, #0]
 80178be:	f001 fc39 	bl	8019134 <RegionEU868ChanMaskSet>
 80178c2:	4603      	mov	r3, r0
 80178c4:	e000      	b.n	80178c8 <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80178c6:	2300      	movs	r3, #0
        }
    }
}
 80178c8:	4618      	mov	r0, r3
 80178ca:	3708      	adds	r7, #8
 80178cc:	46bd      	mov	sp, r7
 80178ce:	bd80      	pop	{r7, pc}

080178d0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	603b      	str	r3, [r7, #0]
 80178d8:	4603      	mov	r3, r0
 80178da:	71fb      	strb	r3, [r7, #7]
 80178dc:	460b      	mov	r3, r1
 80178de:	71bb      	strb	r3, [r7, #6]
 80178e0:	4613      	mov	r3, r2
 80178e2:	717b      	strb	r3, [r7, #5]
    switch( region )
 80178e4:	79fb      	ldrb	r3, [r7, #7]
 80178e6:	2b05      	cmp	r3, #5
 80178e8:	d107      	bne.n	80178fa <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 80178ea:	7979      	ldrb	r1, [r7, #5]
 80178ec:	f997 0006 	ldrsb.w	r0, [r7, #6]
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	683a      	ldr	r2, [r7, #0]
 80178f4:	f001 fc48 	bl	8019188 <RegionEU868ComputeRxWindowParameters>
 80178f8:	e000      	b.n	80178fc <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 80178fa:	bf00      	nop
        }
    }
}
 80178fc:	bf00      	nop
 80178fe:	3708      	adds	r7, #8
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b084      	sub	sp, #16
 8017908:	af00      	add	r7, sp, #0
 801790a:	4603      	mov	r3, r0
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
 8017910:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017912:	7bfb      	ldrb	r3, [r7, #15]
 8017914:	2b05      	cmp	r3, #5
 8017916:	d105      	bne.n	8017924 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8017918:	6879      	ldr	r1, [r7, #4]
 801791a:	68b8      	ldr	r0, [r7, #8]
 801791c:	f001 fc8e 	bl	801923c <RegionEU868RxConfig>
 8017920:	4603      	mov	r3, r0
 8017922:	e000      	b.n	8017926 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8017924:	2300      	movs	r3, #0
        }
    }
}
 8017926:	4618      	mov	r0, r3
 8017928:	3710      	adds	r7, #16
 801792a:	46bd      	mov	sp, r7
 801792c:	bd80      	pop	{r7, pc}

0801792e <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 801792e:	b580      	push	{r7, lr}
 8017930:	b084      	sub	sp, #16
 8017932:	af00      	add	r7, sp, #0
 8017934:	60b9      	str	r1, [r7, #8]
 8017936:	607a      	str	r2, [r7, #4]
 8017938:	603b      	str	r3, [r7, #0]
 801793a:	4603      	mov	r3, r0
 801793c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801793e:	7bfb      	ldrb	r3, [r7, #15]
 8017940:	2b05      	cmp	r3, #5
 8017942:	d106      	bne.n	8017952 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	6879      	ldr	r1, [r7, #4]
 8017948:	68b8      	ldr	r0, [r7, #8]
 801794a:	f001 fd47 	bl	80193dc <RegionEU868TxConfig>
 801794e:	4603      	mov	r3, r0
 8017950:	e000      	b.n	8017954 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8017952:	2300      	movs	r3, #0
        }
    }
}
 8017954:	4618      	mov	r0, r3
 8017956:	3710      	adds	r7, #16
 8017958:	46bd      	mov	sp, r7
 801795a:	bd80      	pop	{r7, pc}

0801795c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801795c:	b580      	push	{r7, lr}
 801795e:	b086      	sub	sp, #24
 8017960:	af02      	add	r7, sp, #8
 8017962:	60b9      	str	r1, [r7, #8]
 8017964:	607a      	str	r2, [r7, #4]
 8017966:	603b      	str	r3, [r7, #0]
 8017968:	4603      	mov	r3, r0
 801796a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801796c:	7bfb      	ldrb	r3, [r7, #15]
 801796e:	2b05      	cmp	r3, #5
 8017970:	d109      	bne.n	8017986 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8017972:	69fb      	ldr	r3, [r7, #28]
 8017974:	9300      	str	r3, [sp, #0]
 8017976:	69bb      	ldr	r3, [r7, #24]
 8017978:	683a      	ldr	r2, [r7, #0]
 801797a:	6879      	ldr	r1, [r7, #4]
 801797c:	68b8      	ldr	r0, [r7, #8]
 801797e:	f001 fdfd 	bl	801957c <RegionEU868LinkAdrReq>
 8017982:	4603      	mov	r3, r0
 8017984:	e000      	b.n	8017988 <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8017986:	2300      	movs	r3, #0
        }
    }
}
 8017988:	4618      	mov	r0, r3
 801798a:	3710      	adds	r7, #16
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}

08017990 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8017990:	b580      	push	{r7, lr}
 8017992:	b082      	sub	sp, #8
 8017994:	af00      	add	r7, sp, #0
 8017996:	4603      	mov	r3, r0
 8017998:	6039      	str	r1, [r7, #0]
 801799a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801799c:	79fb      	ldrb	r3, [r7, #7]
 801799e:	2b05      	cmp	r3, #5
 80179a0:	d104      	bne.n	80179ac <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80179a2:	6838      	ldr	r0, [r7, #0]
 80179a4:	f001 ff0c 	bl	80197c0 <RegionEU868RxParamSetupReq>
 80179a8:	4603      	mov	r3, r0
 80179aa:	e000      	b.n	80179ae <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179ac:	2300      	movs	r3, #0
        }
    }
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3708      	adds	r7, #8
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}

080179b6 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80179b6:	b580      	push	{r7, lr}
 80179b8:	b082      	sub	sp, #8
 80179ba:	af00      	add	r7, sp, #0
 80179bc:	4603      	mov	r3, r0
 80179be:	6039      	str	r1, [r7, #0]
 80179c0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179c2:	79fb      	ldrb	r3, [r7, #7]
 80179c4:	2b05      	cmp	r3, #5
 80179c6:	d104      	bne.n	80179d2 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80179c8:	6838      	ldr	r0, [r7, #0]
 80179ca:	f001 ff37 	bl	801983c <RegionEU868NewChannelReq>
 80179ce:	4603      	mov	r3, r0
 80179d0:	e000      	b.n	80179d4 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80179d2:	2300      	movs	r3, #0
        }
    }
}
 80179d4:	4618      	mov	r0, r3
 80179d6:	3708      	adds	r7, #8
 80179d8:	46bd      	mov	sp, r7
 80179da:	bd80      	pop	{r7, pc}

080179dc <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	b082      	sub	sp, #8
 80179e0:	af00      	add	r7, sp, #0
 80179e2:	4603      	mov	r3, r0
 80179e4:	6039      	str	r1, [r7, #0]
 80179e6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80179e8:	79fb      	ldrb	r3, [r7, #7]
 80179ea:	2b05      	cmp	r3, #5
 80179ec:	d104      	bne.n	80179f8 <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80179ee:	6838      	ldr	r0, [r7, #0]
 80179f0:	f001 ff82 	bl	80198f8 <RegionEU868TxParamSetupReq>
 80179f4:	4603      	mov	r3, r0
 80179f6:	e000      	b.n	80179fa <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80179f8:	2300      	movs	r3, #0
        }
    }
}
 80179fa:	4618      	mov	r0, r3
 80179fc:	3708      	adds	r7, #8
 80179fe:	46bd      	mov	sp, r7
 8017a00:	bd80      	pop	{r7, pc}

08017a02 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8017a02:	b580      	push	{r7, lr}
 8017a04:	b082      	sub	sp, #8
 8017a06:	af00      	add	r7, sp, #0
 8017a08:	4603      	mov	r3, r0
 8017a0a:	6039      	str	r1, [r7, #0]
 8017a0c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a0e:	79fb      	ldrb	r3, [r7, #7]
 8017a10:	2b05      	cmp	r3, #5
 8017a12:	d104      	bne.n	8017a1e <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8017a14:	6838      	ldr	r0, [r7, #0]
 8017a16:	f001 ff7b 	bl	8019910 <RegionEU868DlChannelReq>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	e000      	b.n	8017a20 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8017a1e:	2300      	movs	r3, #0
        }
    }
}
 8017a20:	4618      	mov	r0, r3
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b082      	sub	sp, #8
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	4603      	mov	r3, r0
 8017a30:	71fb      	strb	r3, [r7, #7]
 8017a32:	460b      	mov	r3, r1
 8017a34:	71bb      	strb	r3, [r7, #6]
 8017a36:	4613      	mov	r3, r2
 8017a38:	717b      	strb	r3, [r7, #5]
    switch( region )
 8017a3a:	79fb      	ldrb	r3, [r7, #7]
 8017a3c:	2b05      	cmp	r3, #5
 8017a3e:	d108      	bne.n	8017a52 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8017a40:	797a      	ldrb	r2, [r7, #5]
 8017a42:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017a46:	4611      	mov	r1, r2
 8017a48:	4618      	mov	r0, r3
 8017a4a:	f001 ffab 	bl	80199a4 <RegionEU868AlternateDr>
 8017a4e:	4603      	mov	r3, r0
 8017a50:	e000      	b.n	8017a54 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8017a52:	2300      	movs	r3, #0
        }
    }
}
 8017a54:	4618      	mov	r0, r3
 8017a56:	3708      	adds	r7, #8
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}

08017a5c <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b084      	sub	sp, #16
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	60b9      	str	r1, [r7, #8]
 8017a64:	607a      	str	r2, [r7, #4]
 8017a66:	603b      	str	r3, [r7, #0]
 8017a68:	4603      	mov	r3, r0
 8017a6a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8017a6c:	7bfb      	ldrb	r3, [r7, #15]
 8017a6e:	2b05      	cmp	r3, #5
 8017a70:	d107      	bne.n	8017a82 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8017a72:	69bb      	ldr	r3, [r7, #24]
 8017a74:	683a      	ldr	r2, [r7, #0]
 8017a76:	6879      	ldr	r1, [r7, #4]
 8017a78:	68b8      	ldr	r0, [r7, #8]
 8017a7a:	f001 ffa3 	bl	80199c4 <RegionEU868NextChannel>
 8017a7e:	4603      	mov	r3, r0
 8017a80:	e000      	b.n	8017a84 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8017a82:	2309      	movs	r3, #9
        }
    }
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3710      	adds	r7, #16
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}

08017a8c <RegionSetContinuousWave>:
    }
}

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b082      	sub	sp, #8
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	4603      	mov	r3, r0
 8017a94:	6039      	str	r1, [r7, #0]
 8017a96:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8017a98:	79fb      	ldrb	r3, [r7, #7]
 8017a9a:	2b05      	cmp	r3, #5
 8017a9c:	d103      	bne.n	8017aa6 <RegionSetContinuousWave+0x1a>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 8017a9e:	6838      	ldr	r0, [r7, #0]
 8017aa0:	f002 f90a 	bl	8019cb8 <RegionEU868SetContinuousWave>
 8017aa4:	e000      	b.n	8017aa8 <RegionSetContinuousWave+0x1c>
        IN865_SET_CONTINUOUS_WAVE( );
        US915_SET_CONTINUOUS_WAVE( );
        RU864_SET_CONTINUOUS_WAVE( );
        default:
        {
            break;
 8017aa6:	bf00      	nop
        }
    }
}
 8017aa8:	bf00      	nop
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}

08017ab0 <RegionApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8017ab0:	b590      	push	{r4, r7, lr}
 8017ab2:	b083      	sub	sp, #12
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	4604      	mov	r4, r0
 8017ab8:	4608      	mov	r0, r1
 8017aba:	4611      	mov	r1, r2
 8017abc:	461a      	mov	r2, r3
 8017abe:	4623      	mov	r3, r4
 8017ac0:	71fb      	strb	r3, [r7, #7]
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	71bb      	strb	r3, [r7, #6]
 8017ac6:	460b      	mov	r3, r1
 8017ac8:	717b      	strb	r3, [r7, #5]
 8017aca:	4613      	mov	r3, r2
 8017acc:	713b      	strb	r3, [r7, #4]
    switch( region )
 8017ace:	79fb      	ldrb	r3, [r7, #7]
 8017ad0:	2b05      	cmp	r3, #5
 8017ad2:	d109      	bne.n	8017ae8 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8017ad4:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8017ad8:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017adc:	79bb      	ldrb	r3, [r7, #6]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f002 f938 	bl	8019d54 <RegionEU868ApplyDrOffset>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	e000      	b.n	8017aea <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8017ae8:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8017aea:	4618      	mov	r0, r3
 8017aec:	370c      	adds	r7, #12
 8017aee:	46bd      	mov	sp, r7
 8017af0:	bd90      	pop	{r4, r7, pc}
	...

08017af4 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8017af4:	b480      	push	{r7}
 8017af6:	b083      	sub	sp, #12
 8017af8:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8017afa:	4b04      	ldr	r3, [pc, #16]	; (8017b0c <RegionGetVersion+0x18>)
 8017afc:	607b      	str	r3, [r7, #4]

    return version;
 8017afe:	687b      	ldr	r3, [r7, #4]
}
 8017b00:	4618      	mov	r0, r3
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	bc80      	pop	{r7}
 8017b08:	4770      	bx	lr
 8017b0a:	bf00      	nop
 8017b0c:	01010003 	.word	0x01010003

08017b10 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017b10:	b480      	push	{r7}
 8017b12:	b087      	sub	sp, #28
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	60f8      	str	r0, [r7, #12]
 8017b18:	4608      	mov	r0, r1
 8017b1a:	4639      	mov	r1, r7
 8017b1c:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b20:	4603      	mov	r3, r0
 8017b22:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b24:	68fb      	ldr	r3, [r7, #12]
 8017b26:	881b      	ldrh	r3, [r3, #0]
 8017b28:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8017b2a:	7afb      	ldrb	r3, [r7, #11]
 8017b2c:	f083 0301 	eor.w	r3, r3, #1
 8017b30:	b2db      	uxtb	r3, r3
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d01b      	beq.n	8017b6e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b36:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b3a:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8017b3c:	683b      	ldr	r3, [r7, #0]
 8017b3e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8017b42:	d202      	bcs.n	8017b4a <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8017b44:	2364      	movs	r3, #100	; 0x64
 8017b46:	82bb      	strh	r3, [r7, #20]
 8017b48:	e00b      	b.n	8017b62 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8017b4a:	683b      	ldr	r3, [r7, #0]
 8017b4c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8017b50:	4293      	cmp	r3, r2
 8017b52:	d803      	bhi.n	8017b5c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8017b54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017b58:	82bb      	strh	r3, [r7, #20]
 8017b5a:	e002      	b.n	8017b62 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8017b5c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017b60:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8017b62:	8aba      	ldrh	r2, [r7, #20]
 8017b64:	8afb      	ldrh	r3, [r7, #22]
 8017b66:	4293      	cmp	r3, r2
 8017b68:	bf38      	it	cc
 8017b6a:	4613      	movcc	r3, r2
 8017b6c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8017b6e:	8afb      	ldrh	r3, [r7, #22]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d101      	bne.n	8017b78 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8017b74:	2301      	movs	r3, #1
 8017b76:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8017b78:	8afb      	ldrh	r3, [r7, #22]
}
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	371c      	adds	r7, #28
 8017b7e:	46bd      	mov	sp, r7
 8017b80:	bc80      	pop	{r7}
 8017b82:	4770      	bx	lr

08017b84 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b08e      	sub	sp, #56	; 0x38
 8017b88:	af02      	add	r7, sp, #8
 8017b8a:	60f8      	str	r0, [r7, #12]
 8017b8c:	4608      	mov	r0, r1
 8017b8e:	4639      	mov	r1, r7
 8017b90:	e881 000c 	stmia.w	r1, {r2, r3}
 8017b94:	4603      	mov	r3, r0
 8017b96:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	881b      	ldrh	r3, [r3, #0]
 8017b9c:	857b      	strh	r3, [r7, #42]	; 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017b9e:	4b4b      	ldr	r3, [pc, #300]	; (8017ccc <SetMaxTimeCredits+0x148>)
 8017ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8017ba2:	463b      	mov	r3, r7
 8017ba4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017ba8:	f005 fdc0 	bl	801d72c <SysTimeToMs>
 8017bac:	6278      	str	r0, [r7, #36]	; 0x24
    SysTime_t timeDiff = { 0 };
 8017bae:	f107 0314 	add.w	r3, r7, #20
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	601a      	str	r2, [r3, #0]
 8017bb6:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017bb8:	7af9      	ldrb	r1, [r7, #11]
 8017bba:	463b      	mov	r3, r7
 8017bbc:	cb0c      	ldmia	r3, {r2, r3}
 8017bbe:	68f8      	ldr	r0, [r7, #12]
 8017bc0:	f7ff ffa6 	bl	8017b10 <GetDutyCycle>
 8017bc4:	4603      	mov	r3, r0
 8017bc6:	857b      	strh	r3, [r7, #42]	; 0x2a

    if( joined == false )
 8017bc8:	7afb      	ldrb	r3, [r7, #11]
 8017bca:	f083 0301 	eor.w	r3, r3, #1
 8017bce:	b2db      	uxtb	r3, r3
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d062      	beq.n	8017c9a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8017bd4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017bd6:	2b64      	cmp	r3, #100	; 0x64
 8017bd8:	d105      	bne.n	8017be6 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8017bda:	4b3c      	ldr	r3, [pc, #240]	; (8017ccc <SetMaxTimeCredits+0x148>)
 8017bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bde:	68fb      	ldr	r3, [r7, #12]
 8017be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017be2:	609a      	str	r2, [r3, #8]
 8017be4:	e00b      	b.n	8017bfe <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8017be6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017be8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017bec:	d105      	bne.n	8017bfa <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8017bee:	4b38      	ldr	r3, [pc, #224]	; (8017cd0 <SetMaxTimeCredits+0x14c>)
 8017bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017bf6:	609a      	str	r2, [r3, #8]
 8017bf8:	e001      	b.n	8017bfe <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8017bfa:	4b36      	ldr	r3, [pc, #216]	; (8017cd4 <SetMaxTimeCredits+0x150>)
 8017bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8017bfe:	68fb      	ldr	r3, [r7, #12]
 8017c00:	689a      	ldr	r2, [r3, #8]
 8017c02:	f107 031c 	add.w	r3, r7, #28
 8017c06:	4611      	mov	r1, r2
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f005 fdb7 	bl	801d77c <SysTimeFromMs>
 8017c0e:	f107 0014 	add.w	r0, r7, #20
 8017c12:	6a3b      	ldr	r3, [r7, #32]
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	69fb      	ldr	r3, [r7, #28]
 8017c18:	463a      	mov	r2, r7
 8017c1a:	ca06      	ldmia	r2, {r1, r2}
 8017c1c:	f005 fcc7 	bl	801d5ae <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c20:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c24:	f083 0301 	eor.w	r3, r3, #1
 8017c28:	b2db      	uxtb	r3, r3
 8017c2a:	2b00      	cmp	r3, #0
 8017c2c:	d006      	beq.n	8017c3c <SetMaxTimeCredits+0xb8>
 8017c2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8017c32:	f083 0301 	eor.w	r3, r3, #1
 8017c36:	b2db      	uxtb	r3, r3
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d108      	bne.n	8017c4e <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8017c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d103      	bne.n	8017c4e <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8017c46:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8017c48:	4a23      	ldr	r2, [pc, #140]	; (8017cd8 <SetMaxTimeCredits+0x154>)
 8017c4a:	4293      	cmp	r3, r2
 8017c4c:	d92f      	bls.n	8017cae <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8017c4e:	68fb      	ldr	r3, [r7, #12]
 8017c50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017c52:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8017c54:	683b      	ldr	r3, [r7, #0]
 8017c56:	4a21      	ldr	r2, [pc, #132]	; (8017cdc <SetMaxTimeCredits+0x158>)
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	d928      	bls.n	8017cae <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8017c5c:	683b      	ldr	r3, [r7, #0]
 8017c5e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8017c62:	3b30      	subs	r3, #48	; 0x30
 8017c64:	4a1e      	ldr	r2, [pc, #120]	; (8017ce0 <SetMaxTimeCredits+0x15c>)
 8017c66:	fba2 2303 	umull	r2, r3, r2, r3
 8017c6a:	0c1b      	lsrs	r3, r3, #16
 8017c6c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	4a1c      	ldr	r2, [pc, #112]	; (8017ce4 <SetMaxTimeCredits+0x160>)
 8017c72:	fb02 f303 	mul.w	r3, r2, r3
 8017c76:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 8017c7e:	3330      	adds	r3, #48	; 0x30
 8017c80:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8017c82:	2300      	movs	r3, #0
 8017c84:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8017c86:	f107 0314 	add.w	r3, r7, #20
 8017c8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017c8e:	f005 fd4d 	bl	801d72c <SysTimeToMs>
 8017c92:	4602      	mov	r2, r0
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	609a      	str	r2, [r3, #8]
 8017c98:	e009      	b.n	8017cae <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8017c9a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8017c9e:	f083 0301 	eor.w	r3, r3, #1
 8017ca2:	b2db      	uxtb	r3, r3
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d002      	beq.n	8017cae <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cac:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8017cae:	68fb      	ldr	r3, [r7, #12]
 8017cb0:	685b      	ldr	r3, [r3, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d102      	bne.n	8017cbc <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8017cb6:	68fb      	ldr	r3, [r7, #12]
 8017cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cba:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8017cbc:	68fb      	ldr	r3, [r7, #12]
 8017cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017cc0:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8017cc2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
}
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	3730      	adds	r7, #48	; 0x30
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	001b7740 	.word	0x001b7740
 8017cd0:	0112a880 	.word	0x0112a880
 8017cd4:	02932e00 	.word	0x02932e00
 8017cd8:	0001517f 	.word	0x0001517f
 8017cdc:	0001ec2f 	.word	0x0001ec2f
 8017ce0:	c22e4507 	.word	0xc22e4507
 8017ce4:	00015180 	.word	0x00015180

08017ce8 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b086      	sub	sp, #24
 8017cec:	af02      	add	r7, sp, #8
 8017cee:	6078      	str	r0, [r7, #4]
 8017cf0:	4608      	mov	r0, r1
 8017cf2:	4611      	mov	r1, r2
 8017cf4:	461a      	mov	r2, r3
 8017cf6:	4603      	mov	r3, r0
 8017cf8:	70fb      	strb	r3, [r7, #3]
 8017cfa:	460b      	mov	r3, r1
 8017cfc:	70bb      	strb	r3, [r7, #2]
 8017cfe:	4613      	mov	r3, r2
 8017d00:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8017d02:	78f9      	ldrb	r1, [r7, #3]
 8017d04:	787b      	ldrb	r3, [r7, #1]
 8017d06:	9301      	str	r3, [sp, #4]
 8017d08:	78bb      	ldrb	r3, [r7, #2]
 8017d0a:	9300      	str	r3, [sp, #0]
 8017d0c:	f107 0318 	add.w	r3, r7, #24
 8017d10:	cb0c      	ldmia	r3, {r2, r3}
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7ff ff36 	bl	8017b84 <SetMaxTimeCredits>
 8017d18:	4603      	mov	r3, r0
 8017d1a:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8017d1c:	78fb      	ldrb	r3, [r7, #3]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d00a      	beq.n	8017d38 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	685b      	ldr	r3, [r3, #4]
 8017d26:	4618      	mov	r0, r3
 8017d28:	f006 fb3c 	bl	801e3a4 <UTIL_TIMER_GetElapsedTime>
 8017d2c:	4602      	mov	r2, r0
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	68db      	ldr	r3, [r3, #12]
 8017d32:	441a      	add	r2, r3
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	68da      	ldr	r2, [r3, #12]
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	691b      	ldr	r3, [r3, #16]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	d903      	bls.n	8017d4c <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	691a      	ldr	r2, [r3, #16]
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	6a3a      	ldr	r2, [r7, #32]
 8017d50:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8017d52:	89fb      	ldrh	r3, [r7, #14]
}
 8017d54:	4618      	mov	r0, r3
 8017d56:	3710      	adds	r7, #16
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	bd80      	pop	{r7, pc}

08017d5c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8017d5c:	b480      	push	{r7}
 8017d5e:	b085      	sub	sp, #20
 8017d60:	af00      	add	r7, sp, #0
 8017d62:	4603      	mov	r3, r0
 8017d64:	460a      	mov	r2, r1
 8017d66:	80fb      	strh	r3, [r7, #6]
 8017d68:	4613      	mov	r3, r2
 8017d6a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8017d70:	2300      	movs	r3, #0
 8017d72:	73bb      	strb	r3, [r7, #14]
 8017d74:	e011      	b.n	8017d9a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8017d76:	88fa      	ldrh	r2, [r7, #6]
 8017d78:	7bbb      	ldrb	r3, [r7, #14]
 8017d7a:	2101      	movs	r1, #1
 8017d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8017d80:	401a      	ands	r2, r3
 8017d82:	7bbb      	ldrb	r3, [r7, #14]
 8017d84:	2101      	movs	r1, #1
 8017d86:	fa01 f303 	lsl.w	r3, r1, r3
 8017d8a:	429a      	cmp	r2, r3
 8017d8c:	d102      	bne.n	8017d94 <CountChannels+0x38>
        {
            nbActiveBits++;
 8017d8e:	7bfb      	ldrb	r3, [r7, #15]
 8017d90:	3301      	adds	r3, #1
 8017d92:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8017d94:	7bbb      	ldrb	r3, [r7, #14]
 8017d96:	3301      	adds	r3, #1
 8017d98:	73bb      	strb	r3, [r7, #14]
 8017d9a:	7bba      	ldrb	r2, [r7, #14]
 8017d9c:	797b      	ldrb	r3, [r7, #5]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d3e9      	bcc.n	8017d76 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8017da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8017da4:	4618      	mov	r0, r3
 8017da6:	3714      	adds	r7, #20
 8017da8:	46bd      	mov	sp, r7
 8017daa:	bc80      	pop	{r7}
 8017dac:	4770      	bx	lr

08017dae <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8017dae:	b580      	push	{r7, lr}
 8017db0:	b084      	sub	sp, #16
 8017db2:	af00      	add	r7, sp, #0
 8017db4:	6039      	str	r1, [r7, #0]
 8017db6:	4611      	mov	r1, r2
 8017db8:	461a      	mov	r2, r3
 8017dba:	4603      	mov	r3, r0
 8017dbc:	71fb      	strb	r3, [r7, #7]
 8017dbe:	460b      	mov	r3, r1
 8017dc0:	71bb      	strb	r3, [r7, #6]
 8017dc2:	4613      	mov	r3, r2
 8017dc4:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8017dc6:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8017dca:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8017dce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	f000 f85d 	bl	8017e92 <RegionCommonValueInRange>
 8017dd8:	4603      	mov	r3, r0
 8017dda:	2b00      	cmp	r3, #0
 8017ddc:	d101      	bne.n	8017de2 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8017dde:	2300      	movs	r3, #0
 8017de0:	e053      	b.n	8017e8a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017de2:	2300      	movs	r3, #0
 8017de4:	73fb      	strb	r3, [r7, #15]
 8017de6:	2300      	movs	r3, #0
 8017de8:	73bb      	strb	r3, [r7, #14]
 8017dea:	e049      	b.n	8017e80 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8017dec:	2300      	movs	r3, #0
 8017dee:	737b      	strb	r3, [r7, #13]
 8017df0:	e03d      	b.n	8017e6e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8017df2:	7bbb      	ldrb	r3, [r7, #14]
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	683a      	ldr	r2, [r7, #0]
 8017df8:	4413      	add	r3, r2
 8017dfa:	881b      	ldrh	r3, [r3, #0]
 8017dfc:	461a      	mov	r2, r3
 8017dfe:	7b7b      	ldrb	r3, [r7, #13]
 8017e00:	fa42 f303 	asr.w	r3, r2, r3
 8017e04:	f003 0301 	and.w	r3, r3, #1
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d02d      	beq.n	8017e68 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e0c:	7bfa      	ldrb	r2, [r7, #15]
 8017e0e:	7b7b      	ldrb	r3, [r7, #13]
 8017e10:	4413      	add	r3, r2
 8017e12:	461a      	mov	r2, r3
 8017e14:	4613      	mov	r3, r2
 8017e16:	005b      	lsls	r3, r3, #1
 8017e18:	4413      	add	r3, r2
 8017e1a:	009b      	lsls	r3, r3, #2
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	69fb      	ldr	r3, [r7, #28]
 8017e20:	4413      	add	r3, r2
 8017e22:	7a1b      	ldrb	r3, [r3, #8]
 8017e24:	f343 0303 	sbfx	r3, r3, #0, #4
 8017e28:	b25b      	sxtb	r3, r3
 8017e2a:	f003 030f 	and.w	r3, r3, #15
 8017e2e:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8017e30:	7bfa      	ldrb	r2, [r7, #15]
 8017e32:	7b7b      	ldrb	r3, [r7, #13]
 8017e34:	4413      	add	r3, r2
 8017e36:	461a      	mov	r2, r3
 8017e38:	4613      	mov	r3, r2
 8017e3a:	005b      	lsls	r3, r3, #1
 8017e3c:	4413      	add	r3, r2
 8017e3e:	009b      	lsls	r3, r3, #2
 8017e40:	461a      	mov	r2, r3
 8017e42:	69fb      	ldr	r3, [r7, #28]
 8017e44:	4413      	add	r3, r2
 8017e46:	7a1b      	ldrb	r3, [r3, #8]
 8017e48:	f343 1303 	sbfx	r3, r3, #4, #4
 8017e4c:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8017e4e:	f003 030f 	and.w	r3, r3, #15
 8017e52:	b25a      	sxtb	r2, r3
 8017e54:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017e58:	4618      	mov	r0, r3
 8017e5a:	f000 f81a 	bl	8017e92 <RegionCommonValueInRange>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b01      	cmp	r3, #1
 8017e62:	d101      	bne.n	8017e68 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8017e64:	2301      	movs	r3, #1
 8017e66:	e010      	b.n	8017e8a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8017e68:	7b7b      	ldrb	r3, [r7, #13]
 8017e6a:	3301      	adds	r3, #1
 8017e6c:	737b      	strb	r3, [r7, #13]
 8017e6e:	7b7b      	ldrb	r3, [r7, #13]
 8017e70:	2b0f      	cmp	r3, #15
 8017e72:	d9be      	bls.n	8017df2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8017e74:	7bfb      	ldrb	r3, [r7, #15]
 8017e76:	3310      	adds	r3, #16
 8017e78:	73fb      	strb	r3, [r7, #15]
 8017e7a:	7bbb      	ldrb	r3, [r7, #14]
 8017e7c:	3301      	adds	r3, #1
 8017e7e:	73bb      	strb	r3, [r7, #14]
 8017e80:	7bfa      	ldrb	r2, [r7, #15]
 8017e82:	79fb      	ldrb	r3, [r7, #7]
 8017e84:	429a      	cmp	r2, r3
 8017e86:	d3b1      	bcc.n	8017dec <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8017e88:	2300      	movs	r3, #0
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3710      	adds	r7, #16
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}

08017e92 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8017e92:	b480      	push	{r7}
 8017e94:	b083      	sub	sp, #12
 8017e96:	af00      	add	r7, sp, #0
 8017e98:	4603      	mov	r3, r0
 8017e9a:	71fb      	strb	r3, [r7, #7]
 8017e9c:	460b      	mov	r3, r1
 8017e9e:	71bb      	strb	r3, [r7, #6]
 8017ea0:	4613      	mov	r3, r2
 8017ea2:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8017ea4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017ea8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8017eac:	429a      	cmp	r2, r3
 8017eae:	db07      	blt.n	8017ec0 <RegionCommonValueInRange+0x2e>
 8017eb0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8017eb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8017eb8:	429a      	cmp	r2, r3
 8017eba:	dc01      	bgt.n	8017ec0 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8017ebc:	2301      	movs	r3, #1
 8017ebe:	e000      	b.n	8017ec2 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8017ec0:	2300      	movs	r3, #0
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	370c      	adds	r7, #12
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bc80      	pop	{r7}
 8017eca:	4770      	bx	lr

08017ecc <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8017ecc:	b480      	push	{r7}
 8017ece:	b085      	sub	sp, #20
 8017ed0:	af00      	add	r7, sp, #0
 8017ed2:	6078      	str	r0, [r7, #4]
 8017ed4:	460b      	mov	r3, r1
 8017ed6:	70fb      	strb	r3, [r7, #3]
 8017ed8:	4613      	mov	r3, r2
 8017eda:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8017edc:	78fb      	ldrb	r3, [r7, #3]
 8017ede:	091b      	lsrs	r3, r3, #4
 8017ee0:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8017ee2:	78bb      	ldrb	r3, [r7, #2]
 8017ee4:	091b      	lsrs	r3, r3, #4
 8017ee6:	b2db      	uxtb	r3, r3
 8017ee8:	7bfa      	ldrb	r2, [r7, #15]
 8017eea:	429a      	cmp	r2, r3
 8017eec:	d803      	bhi.n	8017ef6 <RegionCommonChanDisable+0x2a>
 8017eee:	78fa      	ldrb	r2, [r7, #3]
 8017ef0:	78bb      	ldrb	r3, [r7, #2]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d301      	bcc.n	8017efa <RegionCommonChanDisable+0x2e>
    {
        return false;
 8017ef6:	2300      	movs	r3, #0
 8017ef8:	e017      	b.n	8017f2a <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8017efa:	7bfb      	ldrb	r3, [r7, #15]
 8017efc:	005b      	lsls	r3, r3, #1
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	4413      	add	r3, r2
 8017f02:	881b      	ldrh	r3, [r3, #0]
 8017f04:	b21a      	sxth	r2, r3
 8017f06:	78fb      	ldrb	r3, [r7, #3]
 8017f08:	f003 030f 	and.w	r3, r3, #15
 8017f0c:	2101      	movs	r1, #1
 8017f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8017f12:	b21b      	sxth	r3, r3
 8017f14:	43db      	mvns	r3, r3
 8017f16:	b21b      	sxth	r3, r3
 8017f18:	4013      	ands	r3, r2
 8017f1a:	b219      	sxth	r1, r3
 8017f1c:	7bfb      	ldrb	r3, [r7, #15]
 8017f1e:	005b      	lsls	r3, r3, #1
 8017f20:	687a      	ldr	r2, [r7, #4]
 8017f22:	4413      	add	r3, r2
 8017f24:	b28a      	uxth	r2, r1
 8017f26:	801a      	strh	r2, [r3, #0]

    return true;
 8017f28:	2301      	movs	r3, #1
}
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	3714      	adds	r7, #20
 8017f2e:	46bd      	mov	sp, r7
 8017f30:	bc80      	pop	{r7}
 8017f32:	4770      	bx	lr

08017f34 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b084      	sub	sp, #16
 8017f38:	af00      	add	r7, sp, #0
 8017f3a:	6078      	str	r0, [r7, #4]
 8017f3c:	460b      	mov	r3, r1
 8017f3e:	70fb      	strb	r3, [r7, #3]
 8017f40:	4613      	mov	r3, r2
 8017f42:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8017f44:	2300      	movs	r3, #0
 8017f46:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d101      	bne.n	8017f52 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8017f4e:	2300      	movs	r3, #0
 8017f50:	e018      	b.n	8017f84 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f52:	78fb      	ldrb	r3, [r7, #3]
 8017f54:	73bb      	strb	r3, [r7, #14]
 8017f56:	e010      	b.n	8017f7a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8017f58:	7bbb      	ldrb	r3, [r7, #14]
 8017f5a:	005b      	lsls	r3, r3, #1
 8017f5c:	687a      	ldr	r2, [r7, #4]
 8017f5e:	4413      	add	r3, r2
 8017f60:	881b      	ldrh	r3, [r3, #0]
 8017f62:	2110      	movs	r1, #16
 8017f64:	4618      	mov	r0, r3
 8017f66:	f7ff fef9 	bl	8017d5c <CountChannels>
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	461a      	mov	r2, r3
 8017f6e:	7bfb      	ldrb	r3, [r7, #15]
 8017f70:	4413      	add	r3, r2
 8017f72:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8017f74:	7bbb      	ldrb	r3, [r7, #14]
 8017f76:	3301      	adds	r3, #1
 8017f78:	73bb      	strb	r3, [r7, #14]
 8017f7a:	7bba      	ldrb	r2, [r7, #14]
 8017f7c:	78bb      	ldrb	r3, [r7, #2]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d3ea      	bcc.n	8017f58 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8017f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8017f84:	4618      	mov	r0, r3
 8017f86:	3710      	adds	r7, #16
 8017f88:	46bd      	mov	sp, r7
 8017f8a:	bd80      	pop	{r7, pc}

08017f8c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8017f8c:	b480      	push	{r7}
 8017f8e:	b087      	sub	sp, #28
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	60f8      	str	r0, [r7, #12]
 8017f94:	60b9      	str	r1, [r7, #8]
 8017f96:	4613      	mov	r3, r2
 8017f98:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d016      	beq.n	8017fce <RegionCommonChanMaskCopy+0x42>
 8017fa0:	68bb      	ldr	r3, [r7, #8]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d013      	beq.n	8017fce <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	75fb      	strb	r3, [r7, #23]
 8017faa:	e00c      	b.n	8017fc6 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8017fac:	7dfb      	ldrb	r3, [r7, #23]
 8017fae:	005b      	lsls	r3, r3, #1
 8017fb0:	68ba      	ldr	r2, [r7, #8]
 8017fb2:	441a      	add	r2, r3
 8017fb4:	7dfb      	ldrb	r3, [r7, #23]
 8017fb6:	005b      	lsls	r3, r3, #1
 8017fb8:	68f9      	ldr	r1, [r7, #12]
 8017fba:	440b      	add	r3, r1
 8017fbc:	8812      	ldrh	r2, [r2, #0]
 8017fbe:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8017fc0:	7dfb      	ldrb	r3, [r7, #23]
 8017fc2:	3301      	adds	r3, #1
 8017fc4:	75fb      	strb	r3, [r7, #23]
 8017fc6:	7dfa      	ldrb	r2, [r7, #23]
 8017fc8:	79fb      	ldrb	r3, [r7, #7]
 8017fca:	429a      	cmp	r2, r3
 8017fcc:	d3ee      	bcc.n	8017fac <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8017fce:	bf00      	nop
 8017fd0:	371c      	adds	r7, #28
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bc80      	pop	{r7}
 8017fd6:	4770      	bx	lr

08017fd8 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8017fd8:	b082      	sub	sp, #8
 8017fda:	b580      	push	{r7, lr}
 8017fdc:	b086      	sub	sp, #24
 8017fde:	af00      	add	r7, sp, #0
 8017fe0:	60f8      	str	r0, [r7, #12]
 8017fe2:	60b9      	str	r1, [r7, #8]
 8017fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8017fea:	79f9      	ldrb	r1, [r7, #7]
 8017fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017ff0:	cb0c      	ldmia	r3, {r2, r3}
 8017ff2:	68f8      	ldr	r0, [r7, #12]
 8017ff4:	f7ff fd8c 	bl	8017b10 <GetDutyCycle>
 8017ff8:	4603      	mov	r3, r0
 8017ffa:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	68da      	ldr	r2, [r3, #12]
 8018000:	8afb      	ldrh	r3, [r7, #22]
 8018002:	68b9      	ldr	r1, [r7, #8]
 8018004:	fb01 f303 	mul.w	r3, r1, r3
 8018008:	429a      	cmp	r2, r3
 801800a:	d909      	bls.n	8018020 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 801800c:	68fb      	ldr	r3, [r7, #12]
 801800e:	68da      	ldr	r2, [r3, #12]
 8018010:	8afb      	ldrh	r3, [r7, #22]
 8018012:	68b9      	ldr	r1, [r7, #8]
 8018014:	fb01 f303 	mul.w	r3, r1, r3
 8018018:	1ad2      	subs	r2, r2, r3
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801801e:	e002      	b.n	8018026 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	2200      	movs	r2, #0
 8018024:	60da      	str	r2, [r3, #12]
}
 8018026:	bf00      	nop
 8018028:	3718      	adds	r7, #24
 801802a:	46bd      	mov	sp, r7
 801802c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8018030:	b002      	add	sp, #8
 8018032:	4770      	bx	lr

08018034 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8018034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018036:	b08f      	sub	sp, #60	; 0x3c
 8018038:	af04      	add	r7, sp, #16
 801803a:	6039      	str	r1, [r7, #0]
 801803c:	4611      	mov	r1, r2
 801803e:	461a      	mov	r2, r3
 8018040:	4603      	mov	r3, r0
 8018042:	71fb      	strb	r3, [r7, #7]
 8018044:	460b      	mov	r3, r1
 8018046:	71bb      	strb	r3, [r7, #6]
 8018048:	4613      	mov	r3, r2
 801804a:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 801804c:	f04f 33ff 	mov.w	r3, #4294967295
 8018050:	627b      	str	r3, [r7, #36]	; 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8018052:	f006 f995 	bl	801e380 <UTIL_TIMER_GetCurrentTime>
 8018056:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8018058:	2300      	movs	r3, #0
 801805a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801805c:	2301      	movs	r3, #1
 801805e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8018060:	2300      	movs	r3, #0
 8018062:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8018066:	2300      	movs	r3, #0
 8018068:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801806c:	e0ba      	b.n	80181e4 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801806e:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018072:	4613      	mov	r3, r2
 8018074:	005b      	lsls	r3, r3, #1
 8018076:	4413      	add	r3, r2
 8018078:	00db      	lsls	r3, r3, #3
 801807a:	461a      	mov	r2, r3
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	189c      	adds	r4, r3, r2
 8018080:	f897 6040 	ldrb.w	r6, [r7, #64]	; 0x40
 8018084:	797a      	ldrb	r2, [r7, #5]
 8018086:	79fd      	ldrb	r5, [r7, #7]
 8018088:	69fb      	ldr	r3, [r7, #28]
 801808a:	9302      	str	r3, [sp, #8]
 801808c:	46ec      	mov	ip, sp
 801808e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8018092:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018096:	e88c 0003 	stmia.w	ip, {r0, r1}
 801809a:	4633      	mov	r3, r6
 801809c:	4629      	mov	r1, r5
 801809e:	4620      	mov	r0, r4
 80180a0:	f7ff fe22 	bl	8017ce8 <UpdateTimeCredits>
 80180a4:	4603      	mov	r3, r0
 80180a6:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 80180a8:	8afa      	ldrh	r2, [r7, #22]
 80180aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80180ac:	fb02 f303 	mul.w	r3, r2, r3
 80180b0:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180b2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180b6:	4613      	mov	r3, r2
 80180b8:	005b      	lsls	r3, r3, #1
 80180ba:	4413      	add	r3, r2
 80180bc:	00db      	lsls	r3, r3, #3
 80180be:	461a      	mov	r2, r3
 80180c0:	683b      	ldr	r3, [r7, #0]
 80180c2:	4413      	add	r3, r2
 80180c4:	68db      	ldr	r3, [r3, #12]
 80180c6:	69ba      	ldr	r2, [r7, #24]
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d908      	bls.n	80180de <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180cc:	797b      	ldrb	r3, [r7, #5]
 80180ce:	f083 0301 	eor.w	r3, r3, #1
 80180d2:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d013      	beq.n	8018100 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80180d8:	79fb      	ldrb	r3, [r7, #7]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d010      	beq.n	8018100 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 80180de:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80180e2:	4613      	mov	r3, r2
 80180e4:	005b      	lsls	r3, r3, #1
 80180e6:	4413      	add	r3, r2
 80180e8:	00db      	lsls	r3, r3, #3
 80180ea:	461a      	mov	r2, r3
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	4413      	add	r3, r2
 80180f0:	2201      	movs	r2, #1
 80180f2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80180f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80180f8:	3301      	adds	r3, #1
 80180fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80180fe:	e06c      	b.n	80181da <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8018100:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018104:	4613      	mov	r3, r2
 8018106:	005b      	lsls	r3, r3, #1
 8018108:	4413      	add	r3, r2
 801810a:	00db      	lsls	r3, r3, #3
 801810c:	461a      	mov	r2, r3
 801810e:	683b      	ldr	r3, [r7, #0]
 8018110:	4413      	add	r3, r2
 8018112:	2200      	movs	r2, #0
 8018114:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 8018116:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801811a:	4613      	mov	r3, r2
 801811c:	005b      	lsls	r3, r3, #1
 801811e:	4413      	add	r3, r2
 8018120:	00db      	lsls	r3, r3, #3
 8018122:	461a      	mov	r2, r3
 8018124:	683b      	ldr	r3, [r7, #0]
 8018126:	4413      	add	r3, r2
 8018128:	691b      	ldr	r3, [r3, #16]
 801812a:	69ba      	ldr	r2, [r7, #24]
 801812c:	429a      	cmp	r2, r3
 801812e:	d815      	bhi.n	801815c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8018130:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8018134:	4613      	mov	r3, r2
 8018136:	005b      	lsls	r3, r3, #1
 8018138:	4413      	add	r3, r2
 801813a:	00db      	lsls	r3, r3, #3
 801813c:	461a      	mov	r2, r3
 801813e:	683b      	ldr	r3, [r7, #0]
 8018140:	4413      	add	r3, r2
 8018142:	68db      	ldr	r3, [r3, #12]
 8018144:	69ba      	ldr	r2, [r7, #24]
 8018146:	1ad3      	subs	r3, r2, r3
 8018148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801814a:	4293      	cmp	r3, r2
 801814c:	bf28      	it	cs
 801814e:	4613      	movcs	r3, r2
 8018150:	627b      	str	r3, [r7, #36]	; 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8018152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018156:	3301      	adds	r3, #1
 8018158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801815c:	79fb      	ldrb	r3, [r7, #7]
 801815e:	f083 0301 	eor.w	r3, r3, #1
 8018162:	b2db      	uxtb	r3, r3
 8018164:	2b00      	cmp	r3, #0
 8018166:	d038      	beq.n	80181da <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8018168:	2300      	movs	r3, #0
 801816a:	60fb      	str	r3, [r7, #12]
 801816c:	2300      	movs	r3, #0
 801816e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8018170:	8afb      	ldrh	r3, [r7, #22]
 8018172:	2b64      	cmp	r3, #100	; 0x64
 8018174:	d103      	bne.n	801817e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8018176:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 801817a:	60fb      	str	r3, [r7, #12]
 801817c:	e009      	b.n	8018192 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801817e:	8afb      	ldrh	r3, [r7, #22]
 8018180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8018184:	d103      	bne.n	801818e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8018186:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 801818a:	60fb      	str	r3, [r7, #12]
 801818c:	e001      	b.n	8018192 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801818e:	4b1e      	ldr	r3, [pc, #120]	; (8018208 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018190:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8018192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018194:	4a1c      	ldr	r2, [pc, #112]	; (8018208 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8018196:	4293      	cmp	r3, r2
 8018198:	d90e      	bls.n	80181b8 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801819a:	68fa      	ldr	r2, [r7, #12]
 801819c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801819e:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80181a2:	3b30      	subs	r3, #48	; 0x30
 80181a4:	4919      	ldr	r1, [pc, #100]	; (801820c <RegionCommonUpdateBandTimeOff+0x1d8>)
 80181a6:	fba1 1303 	umull	r1, r3, r1, r3
 80181aa:	0c1b      	lsrs	r3, r3, #16
 80181ac:	3301      	adds	r3, #1
 80181ae:	4918      	ldr	r1, [pc, #96]	; (8018210 <RegionCommonUpdateBandTimeOff+0x1dc>)
 80181b0:	fb01 f303 	mul.w	r3, r1, r3
 80181b4:	4413      	add	r3, r2
 80181b6:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 80181b8:	f107 000c 	add.w	r0, r7, #12
 80181bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181be:	9300      	str	r3, [sp, #0]
 80181c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181c2:	f107 020c 	add.w	r2, r7, #12
 80181c6:	ca06      	ldmia	r2, {r1, r2}
 80181c8:	f005 f9f1 	bl	801d5ae <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 80181cc:	f107 030c 	add.w	r3, r7, #12
 80181d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80181d4:	f005 faaa 	bl	801d72c <SysTimeToMs>
 80181d8:	6278      	str	r0, [r7, #36]	; 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 80181da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80181de:	3301      	adds	r3, #1
 80181e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80181e4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80181e8:	79bb      	ldrb	r3, [r7, #6]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	f4ff af3f 	bcc.w	801806e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80181f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d102      	bne.n	80181fe <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80181f8:	f04f 33ff 	mov.w	r3, #4294967295
 80181fc:	e000      	b.n	8018200 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80181fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018200:	4618      	mov	r0, r3
 8018202:	372c      	adds	r7, #44	; 0x2c
 8018204:	46bd      	mov	sp, r7
 8018206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018208:	0001ec30 	.word	0x0001ec30
 801820c:	c22e4507 	.word	0xc22e4507
 8018210:	00015180 	.word	0x00015180

08018214 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8018214:	b480      	push	{r7}
 8018216:	b085      	sub	sp, #20
 8018218:	af00      	add	r7, sp, #0
 801821a:	6078      	str	r0, [r7, #4]
 801821c:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 801821e:	2300      	movs	r3, #0
 8018220:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	781b      	ldrb	r3, [r3, #0]
 8018226:	2b03      	cmp	r3, #3
 8018228:	d13f      	bne.n	80182aa <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	3301      	adds	r3, #1
 801822e:	781b      	ldrb	r3, [r3, #0]
 8018230:	b25a      	sxtb	r2, r3
 8018232:	683b      	ldr	r3, [r7, #0]
 8018234:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8018236:	683b      	ldr	r3, [r7, #0]
 8018238:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801823c:	f003 030f 	and.w	r3, r3, #15
 8018240:	b25a      	sxtb	r2, r3
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8018246:	683b      	ldr	r3, [r7, #0]
 8018248:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801824c:	b2db      	uxtb	r3, r3
 801824e:	091b      	lsrs	r3, r3, #4
 8018250:	b2db      	uxtb	r3, r3
 8018252:	b25a      	sxtb	r2, r3
 8018254:	683b      	ldr	r3, [r7, #0]
 8018256:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	3302      	adds	r3, #2
 801825c:	781b      	ldrb	r3, [r3, #0]
 801825e:	b29a      	uxth	r2, r3
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8018264:	683b      	ldr	r3, [r7, #0]
 8018266:	889b      	ldrh	r3, [r3, #4]
 8018268:	b21a      	sxth	r2, r3
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	3303      	adds	r3, #3
 801826e:	781b      	ldrb	r3, [r3, #0]
 8018270:	021b      	lsls	r3, r3, #8
 8018272:	b21b      	sxth	r3, r3
 8018274:	4313      	orrs	r3, r2
 8018276:	b21b      	sxth	r3, r3
 8018278:	b29a      	uxth	r2, r3
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	791a      	ldrb	r2, [r3, #4]
 8018282:	683b      	ldr	r3, [r7, #0]
 8018284:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8018286:	683b      	ldr	r3, [r7, #0]
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	091b      	lsrs	r3, r3, #4
 801828c:	b2db      	uxtb	r3, r3
 801828e:	f003 0307 	and.w	r3, r3, #7
 8018292:	b2da      	uxtb	r2, r3
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8018298:	683b      	ldr	r3, [r7, #0]
 801829a:	781b      	ldrb	r3, [r3, #0]
 801829c:	f003 030f 	and.w	r3, r3, #15
 80182a0:	b2da      	uxtb	r2, r3
 80182a2:	683b      	ldr	r3, [r7, #0]
 80182a4:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 80182a6:	2305      	movs	r3, #5
 80182a8:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 80182aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80182ac:	4618      	mov	r0, r3
 80182ae:	3714      	adds	r7, #20
 80182b0:	46bd      	mov	sp, r7
 80182b2:	bc80      	pop	{r7}
 80182b4:	4770      	bx	lr

080182b6 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80182b6:	b5b0      	push	{r4, r5, r7, lr}
 80182b8:	b088      	sub	sp, #32
 80182ba:	af02      	add	r7, sp, #8
 80182bc:	60f8      	str	r0, [r7, #12]
 80182be:	60b9      	str	r1, [r7, #8]
 80182c0:	607a      	str	r2, [r7, #4]
 80182c2:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	791b      	ldrb	r3, [r3, #4]
 80182c8:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	799b      	ldrb	r3, [r3, #6]
 80182ce:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	79db      	ldrb	r3, [r3, #7]
 80182d4:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	7a1b      	ldrb	r3, [r3, #8]
 80182da:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80182dc:	68fb      	ldr	r3, [r7, #12]
 80182de:	795b      	ldrb	r3, [r3, #5]
 80182e0:	f083 0301 	eor.w	r3, r3, #1
 80182e4:	b2db      	uxtb	r3, r3
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d008      	beq.n	80182fc <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80182ea:	68fb      	ldr	r3, [r7, #12]
 80182ec:	7adb      	ldrb	r3, [r3, #11]
 80182ee:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80182f0:	68fb      	ldr	r3, [r7, #12]
 80182f2:	7a5b      	ldrb	r3, [r3, #9]
 80182f4:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80182f6:	68fb      	ldr	r3, [r7, #12]
 80182f8:	7a9b      	ldrb	r3, [r3, #10]
 80182fa:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80182fc:	7dfb      	ldrb	r3, [r7, #23]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d04a      	beq.n	8018398 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8018302:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8018306:	2b0f      	cmp	r3, #15
 8018308:	d103      	bne.n	8018312 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	7a5b      	ldrb	r3, [r3, #9]
 801830e:	75bb      	strb	r3, [r7, #22]
 8018310:	e01d      	b.n	801834e <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018312:	68fb      	ldr	r3, [r7, #12]
 8018314:	7b18      	ldrb	r0, [r3, #12]
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	6919      	ldr	r1, [r3, #16]
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	f993 5014 	ldrsb.w	r5, [r3, #20]
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8018326:	68fa      	ldr	r2, [r7, #12]
 8018328:	6992      	ldr	r2, [r2, #24]
 801832a:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801832e:	9201      	str	r2, [sp, #4]
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	462b      	mov	r3, r5
 8018334:	4622      	mov	r2, r4
 8018336:	f7ff fd3a 	bl	8017dae <RegionCommonChanVerifyDr>
 801833a:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 801833c:	f083 0301 	eor.w	r3, r3, #1
 8018340:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8018342:	2b00      	cmp	r3, #0
 8018344:	d003      	beq.n	801834e <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8018346:	7dfb      	ldrb	r3, [r7, #23]
 8018348:	f023 0302 	bic.w	r3, r3, #2
 801834c:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801834e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8018352:	2b0f      	cmp	r3, #15
 8018354:	d103      	bne.n	801835e <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	7a9b      	ldrb	r3, [r3, #10]
 801835a:	757b      	strb	r3, [r7, #21]
 801835c:	e01c      	b.n	8018398 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801836a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801836e:	4618      	mov	r0, r3
 8018370:	f7ff fd8f 	bl	8017e92 <RegionCommonValueInRange>
 8018374:	4603      	mov	r3, r0
 8018376:	2b00      	cmp	r3, #0
 8018378:	d10e      	bne.n	8018398 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8018380:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8018384:	429a      	cmp	r2, r3
 8018386:	da03      	bge.n	8018390 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	7f5b      	ldrb	r3, [r3, #29]
 801838c:	757b      	strb	r3, [r7, #21]
 801838e:	e003      	b.n	8018398 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8018390:	7dfb      	ldrb	r3, [r7, #23]
 8018392:	f023 0304 	bic.w	r3, r3, #4
 8018396:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8018398:	7dfb      	ldrb	r3, [r7, #23]
 801839a:	2b07      	cmp	r3, #7
 801839c:	d105      	bne.n	80183aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801839e:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d101      	bne.n	80183aa <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80183a6:	2301      	movs	r3, #1
 80183a8:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	7dba      	ldrb	r2, [r7, #22]
 80183ae:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	7d7a      	ldrb	r2, [r7, #21]
 80183b4:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80183b6:	7d3a      	ldrb	r2, [r7, #20]
 80183b8:	683b      	ldr	r3, [r7, #0]
 80183ba:	701a      	strb	r2, [r3, #0]

    return status;
 80183bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80183be:	4618      	mov	r0, r3
 80183c0:	3718      	adds	r7, #24
 80183c2:	46bd      	mov	sp, r7
 80183c4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080183c8 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80183c8:	b480      	push	{r7}
 80183ca:	b083      	sub	sp, #12
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	4603      	mov	r3, r0
 80183d0:	6039      	str	r1, [r7, #0]
 80183d2:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80183d4:	79fb      	ldrb	r3, [r7, #7]
 80183d6:	4a06      	ldr	r2, [pc, #24]	; (80183f0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80183d8:	fa02 f303 	lsl.w	r3, r2, r3
 80183dc:	461a      	mov	r2, r3
 80183de:	683b      	ldr	r3, [r7, #0]
 80183e0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	370c      	adds	r7, #12
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bc80      	pop	{r7}
 80183ec:	4770      	bx	lr
 80183ee:	bf00      	nop
 80183f0:	000f4240 	.word	0x000f4240

080183f4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80183f4:	b480      	push	{r7}
 80183f6:	b083      	sub	sp, #12
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	4603      	mov	r3, r0
 80183fc:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80183fe:	79fb      	ldrb	r3, [r7, #7]
 8018400:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8018404:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8018408:	4618      	mov	r0, r3
 801840a:	370c      	adds	r7, #12
 801840c:	46bd      	mov	sp, r7
 801840e:	bc80      	pop	{r7}
 8018410:	4770      	bx	lr
	...

08018414 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8018414:	b480      	push	{r7}
 8018416:	b085      	sub	sp, #20
 8018418:	af00      	add	r7, sp, #0
 801841a:	60f8      	str	r0, [r7, #12]
 801841c:	607a      	str	r2, [r7, #4]
 801841e:	603b      	str	r3, [r7, #0]
 8018420:	460b      	mov	r3, r1
 8018422:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8018424:	7afa      	ldrb	r2, [r7, #11]
 8018426:	7afb      	ldrb	r3, [r7, #11]
 8018428:	3b04      	subs	r3, #4
 801842a:	4619      	mov	r1, r3
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	fb03 f101 	mul.w	r1, r3, r1
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018438:	fb00 f303 	mul.w	r3, r0, r3
 801843c:	440b      	add	r3, r1
 801843e:	005b      	lsls	r3, r3, #1
 8018440:	2b00      	cmp	r3, #0
 8018442:	d013      	beq.n	801846c <RegionCommonComputeRxWindowParameters+0x58>
 8018444:	7afb      	ldrb	r3, [r7, #11]
 8018446:	3b04      	subs	r3, #4
 8018448:	4619      	mov	r1, r3
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	fb03 f101 	mul.w	r1, r3, r1
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8018456:	fb00 f303 	mul.w	r3, r0, r3
 801845a:	440b      	add	r3, r1
 801845c:	0059      	lsls	r1, r3, #1
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	440b      	add	r3, r1
 8018462:	1e59      	subs	r1, r3, #1
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	fbb1 f3f3 	udiv	r3, r1, r3
 801846a:	e00f      	b.n	801848c <RegionCommonComputeRxWindowParameters+0x78>
 801846c:	7afb      	ldrb	r3, [r7, #11]
 801846e:	3b04      	subs	r3, #4
 8018470:	4619      	mov	r1, r3
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	fb03 f101 	mul.w	r1, r3, r1
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801847e:	fb00 f303 	mul.w	r3, r0, r3
 8018482:	440b      	add	r3, r1
 8018484:	0059      	lsls	r1, r3, #1
 8018486:	68fb      	ldr	r3, [r7, #12]
 8018488:	fbb1 f3f3 	udiv	r3, r1, r3
 801848c:	429a      	cmp	r2, r3
 801848e:	bf38      	it	cc
 8018490:	461a      	movcc	r2, r3
 8018492:	69bb      	ldr	r3, [r7, #24]
 8018494:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8018496:	68fb      	ldr	r3, [r7, #12]
 8018498:	009b      	lsls	r3, r3, #2
 801849a:	4619      	mov	r1, r3
 801849c:	69bb      	ldr	r3, [r7, #24]
 801849e:	681b      	ldr	r3, [r3, #0]
 80184a0:	68fa      	ldr	r2, [r7, #12]
 80184a2:	fb02 f303 	mul.w	r3, r2, r3
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d007      	beq.n	80184ba <RegionCommonComputeRxWindowParameters+0xa6>
 80184aa:	69bb      	ldr	r3, [r7, #24]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	68fa      	ldr	r2, [r7, #12]
 80184b0:	fb02 f303 	mul.w	r3, r2, r3
 80184b4:	3301      	adds	r3, #1
 80184b6:	085b      	lsrs	r3, r3, #1
 80184b8:	e005      	b.n	80184c6 <RegionCommonComputeRxWindowParameters+0xb2>
 80184ba:	69bb      	ldr	r3, [r7, #24]
 80184bc:	681b      	ldr	r3, [r3, #0]
 80184be:	68fa      	ldr	r2, [r7, #12]
 80184c0:	fb02 f303 	mul.w	r3, r2, r3
 80184c4:	085b      	lsrs	r3, r3, #1
 80184c6:	1acb      	subs	r3, r1, r3
 80184c8:	683a      	ldr	r2, [r7, #0]
 80184ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80184ce:	fb01 f202 	mul.w	r2, r1, r2
 80184d2:	1a9b      	subs	r3, r3, r2
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	dd27      	ble.n	8018528 <RegionCommonComputeRxWindowParameters+0x114>
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	009b      	lsls	r3, r3, #2
 80184dc:	4619      	mov	r1, r3
 80184de:	69bb      	ldr	r3, [r7, #24]
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	68fa      	ldr	r2, [r7, #12]
 80184e4:	fb02 f303 	mul.w	r3, r2, r3
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d007      	beq.n	80184fc <RegionCommonComputeRxWindowParameters+0xe8>
 80184ec:	69bb      	ldr	r3, [r7, #24]
 80184ee:	681b      	ldr	r3, [r3, #0]
 80184f0:	68fa      	ldr	r2, [r7, #12]
 80184f2:	fb02 f303 	mul.w	r3, r2, r3
 80184f6:	3301      	adds	r3, #1
 80184f8:	085b      	lsrs	r3, r3, #1
 80184fa:	e005      	b.n	8018508 <RegionCommonComputeRxWindowParameters+0xf4>
 80184fc:	69bb      	ldr	r3, [r7, #24]
 80184fe:	681b      	ldr	r3, [r3, #0]
 8018500:	68fa      	ldr	r2, [r7, #12]
 8018502:	fb02 f303 	mul.w	r3, r2, r3
 8018506:	085b      	lsrs	r3, r3, #1
 8018508:	1acb      	subs	r3, r1, r3
 801850a:	683a      	ldr	r2, [r7, #0]
 801850c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018510:	fb01 f202 	mul.w	r2, r1, r2
 8018514:	1a9b      	subs	r3, r3, r2
 8018516:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 801851a:	4a19      	ldr	r2, [pc, #100]	; (8018580 <RegionCommonComputeRxWindowParameters+0x16c>)
 801851c:	fb82 1203 	smull	r1, r2, r2, r3
 8018520:	1192      	asrs	r2, r2, #6
 8018522:	17db      	asrs	r3, r3, #31
 8018524:	1ad3      	subs	r3, r2, r3
 8018526:	e024      	b.n	8018572 <RegionCommonComputeRxWindowParameters+0x15e>
 8018528:	68fb      	ldr	r3, [r7, #12]
 801852a:	009b      	lsls	r3, r3, #2
 801852c:	4619      	mov	r1, r3
 801852e:	69bb      	ldr	r3, [r7, #24]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	68fa      	ldr	r2, [r7, #12]
 8018534:	fb02 f303 	mul.w	r3, r2, r3
 8018538:	2b00      	cmp	r3, #0
 801853a:	d007      	beq.n	801854c <RegionCommonComputeRxWindowParameters+0x138>
 801853c:	69bb      	ldr	r3, [r7, #24]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	68fa      	ldr	r2, [r7, #12]
 8018542:	fb02 f303 	mul.w	r3, r2, r3
 8018546:	3301      	adds	r3, #1
 8018548:	085b      	lsrs	r3, r3, #1
 801854a:	e005      	b.n	8018558 <RegionCommonComputeRxWindowParameters+0x144>
 801854c:	69bb      	ldr	r3, [r7, #24]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	68fa      	ldr	r2, [r7, #12]
 8018552:	fb02 f303 	mul.w	r3, r2, r3
 8018556:	085b      	lsrs	r3, r3, #1
 8018558:	1acb      	subs	r3, r1, r3
 801855a:	683a      	ldr	r2, [r7, #0]
 801855c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018560:	fb01 f202 	mul.w	r2, r1, r2
 8018564:	1a9b      	subs	r3, r3, r2
 8018566:	4a06      	ldr	r2, [pc, #24]	; (8018580 <RegionCommonComputeRxWindowParameters+0x16c>)
 8018568:	fb82 1203 	smull	r1, r2, r2, r3
 801856c:	1192      	asrs	r2, r2, #6
 801856e:	17db      	asrs	r3, r3, #31
 8018570:	1ad3      	subs	r3, r2, r3
 8018572:	69fa      	ldr	r2, [r7, #28]
 8018574:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8018576:	bf00      	nop
 8018578:	3714      	adds	r7, #20
 801857a:	46bd      	mov	sp, r7
 801857c:	bc80      	pop	{r7}
 801857e:	4770      	bx	lr
 8018580:	10624dd3 	.word	0x10624dd3

08018584 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b086      	sub	sp, #24
 8018588:	af00      	add	r7, sp, #0
 801858a:	4603      	mov	r3, r0
 801858c:	60b9      	str	r1, [r7, #8]
 801858e:	607a      	str	r2, [r7, #4]
 8018590:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8018592:	2300      	movs	r3, #0
 8018594:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8018596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801859a:	005b      	lsls	r3, r3, #1
 801859c:	4618      	mov	r0, r3
 801859e:	f7e8 fb27 	bl	8000bf0 <__aeabi_ui2f>
 80185a2:	4603      	mov	r3, r0
 80185a4:	4619      	mov	r1, r3
 80185a6:	68b8      	ldr	r0, [r7, #8]
 80185a8:	f7e8 fa70 	bl	8000a8c <__aeabi_fsub>
 80185ac:	4603      	mov	r3, r0
 80185ae:	6879      	ldr	r1, [r7, #4]
 80185b0:	4618      	mov	r0, r3
 80185b2:	f7e8 fa6b 	bl	8000a8c <__aeabi_fsub>
 80185b6:	4603      	mov	r3, r0
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7e7 ff49 	bl	8000450 <__aeabi_f2d>
 80185be:	4602      	mov	r2, r0
 80185c0:	460b      	mov	r3, r1
 80185c2:	4610      	mov	r0, r2
 80185c4:	4619      	mov	r1, r3
 80185c6:	f006 fad7 	bl	801eb78 <floor>
 80185ca:	4602      	mov	r2, r0
 80185cc:	460b      	mov	r3, r1
 80185ce:	4610      	mov	r0, r2
 80185d0:	4619      	mov	r1, r3
 80185d2:	f7e8 fa2f 	bl	8000a34 <__aeabi_d2iz>
 80185d6:	4603      	mov	r3, r0
 80185d8:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80185da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80185de:	4618      	mov	r0, r3
 80185e0:	3718      	adds	r7, #24
 80185e2:	46bd      	mov	sp, r7
 80185e4:	bd80      	pop	{r7, pc}

080185e6 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80185e6:	b590      	push	{r4, r7, lr}
 80185e8:	b087      	sub	sp, #28
 80185ea:	af00      	add	r7, sp, #0
 80185ec:	60f8      	str	r0, [r7, #12]
 80185ee:	60b9      	str	r1, [r7, #8]
 80185f0:	607a      	str	r2, [r7, #4]
 80185f2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80185f4:	2300      	movs	r3, #0
 80185f6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80185f8:	2300      	movs	r3, #0
 80185fa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80185fc:	2300      	movs	r3, #0
 80185fe:	757b      	strb	r3, [r7, #21]
 8018600:	2300      	movs	r3, #0
 8018602:	753b      	strb	r3, [r7, #20]
 8018604:	e09c      	b.n	8018740 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8018606:	2300      	movs	r3, #0
 8018608:	74fb      	strb	r3, [r7, #19]
 801860a:	e08f      	b.n	801872c <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801860c:	68fb      	ldr	r3, [r7, #12]
 801860e:	685a      	ldr	r2, [r3, #4]
 8018610:	7d3b      	ldrb	r3, [r7, #20]
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	4413      	add	r3, r2
 8018616:	881b      	ldrh	r3, [r3, #0]
 8018618:	461a      	mov	r2, r3
 801861a:	7cfb      	ldrb	r3, [r7, #19]
 801861c:	fa42 f303 	asr.w	r3, r2, r3
 8018620:	f003 0301 	and.w	r3, r3, #1
 8018624:	2b00      	cmp	r3, #0
 8018626:	d07e      	beq.n	8018726 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	689a      	ldr	r2, [r3, #8]
 801862c:	7d79      	ldrb	r1, [r7, #21]
 801862e:	7cfb      	ldrb	r3, [r7, #19]
 8018630:	440b      	add	r3, r1
 8018632:	4619      	mov	r1, r3
 8018634:	460b      	mov	r3, r1
 8018636:	005b      	lsls	r3, r3, #1
 8018638:	440b      	add	r3, r1
 801863a:	009b      	lsls	r3, r3, #2
 801863c:	4413      	add	r3, r2
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	2b00      	cmp	r3, #0
 8018642:	d06b      	beq.n	801871c <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	f083 0301 	eor.w	r3, r3, #1
 801864c:	b2db      	uxtb	r3, r3
 801864e:	2b00      	cmp	r3, #0
 8018650:	d011      	beq.n	8018676 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8018656:	2b00      	cmp	r3, #0
 8018658:	d00d      	beq.n	8018676 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	695a      	ldr	r2, [r3, #20]
 801865e:	7d3b      	ldrb	r3, [r7, #20]
 8018660:	005b      	lsls	r3, r3, #1
 8018662:	4413      	add	r3, r2
 8018664:	881b      	ldrh	r3, [r3, #0]
 8018666:	461a      	mov	r2, r3
 8018668:	7cfb      	ldrb	r3, [r7, #19]
 801866a:	fa42 f303 	asr.w	r3, r2, r3
 801866e:	f003 0301 	and.w	r3, r3, #1
 8018672:	2b00      	cmp	r3, #0
 8018674:	d054      	beq.n	8018720 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	785b      	ldrb	r3, [r3, #1]
 801867a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801867c:	68fb      	ldr	r3, [r7, #12]
 801867e:	689a      	ldr	r2, [r3, #8]
 8018680:	7d79      	ldrb	r1, [r7, #21]
 8018682:	7cfb      	ldrb	r3, [r7, #19]
 8018684:	440b      	add	r3, r1
 8018686:	4619      	mov	r1, r3
 8018688:	460b      	mov	r3, r1
 801868a:	005b      	lsls	r3, r3, #1
 801868c:	440b      	add	r3, r1
 801868e:	009b      	lsls	r3, r3, #2
 8018690:	4413      	add	r3, r2
 8018692:	7a1b      	ldrb	r3, [r3, #8]
 8018694:	f343 0303 	sbfx	r3, r3, #0, #4
 8018698:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801869a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	689a      	ldr	r2, [r3, #8]
 80186a0:	7d79      	ldrb	r1, [r7, #21]
 80186a2:	7cfb      	ldrb	r3, [r7, #19]
 80186a4:	440b      	add	r3, r1
 80186a6:	4619      	mov	r1, r3
 80186a8:	460b      	mov	r3, r1
 80186aa:	005b      	lsls	r3, r3, #1
 80186ac:	440b      	add	r3, r1
 80186ae:	009b      	lsls	r3, r3, #2
 80186b0:	4413      	add	r3, r2
 80186b2:	7a1b      	ldrb	r3, [r3, #8]
 80186b4:	f343 1303 	sbfx	r3, r3, #4, #4
 80186b8:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80186ba:	461a      	mov	r2, r3
 80186bc:	4621      	mov	r1, r4
 80186be:	f7ff fbe8 	bl	8017e92 <RegionCommonValueInRange>
 80186c2:	4603      	mov	r3, r0
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d02d      	beq.n	8018724 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	68da      	ldr	r2, [r3, #12]
 80186cc:	68fb      	ldr	r3, [r7, #12]
 80186ce:	6899      	ldr	r1, [r3, #8]
 80186d0:	7d78      	ldrb	r0, [r7, #21]
 80186d2:	7cfb      	ldrb	r3, [r7, #19]
 80186d4:	4403      	add	r3, r0
 80186d6:	4618      	mov	r0, r3
 80186d8:	4603      	mov	r3, r0
 80186da:	005b      	lsls	r3, r3, #1
 80186dc:	4403      	add	r3, r0
 80186de:	009b      	lsls	r3, r3, #2
 80186e0:	440b      	add	r3, r1
 80186e2:	7a5b      	ldrb	r3, [r3, #9]
 80186e4:	4619      	mov	r1, r3
 80186e6:	460b      	mov	r3, r1
 80186e8:	005b      	lsls	r3, r3, #1
 80186ea:	440b      	add	r3, r1
 80186ec:	00db      	lsls	r3, r3, #3
 80186ee:	4413      	add	r3, r2
 80186f0:	7d1b      	ldrb	r3, [r3, #20]
 80186f2:	f083 0301 	eor.w	r3, r3, #1
 80186f6:	b2db      	uxtb	r3, r3
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	d003      	beq.n	8018704 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80186fc:	7dbb      	ldrb	r3, [r7, #22]
 80186fe:	3301      	adds	r3, #1
 8018700:	75bb      	strb	r3, [r7, #22]
                    continue;
 8018702:	e010      	b.n	8018726 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8018704:	7dfb      	ldrb	r3, [r7, #23]
 8018706:	1c5a      	adds	r2, r3, #1
 8018708:	75fa      	strb	r2, [r7, #23]
 801870a:	461a      	mov	r2, r3
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	4413      	add	r3, r2
 8018710:	7d79      	ldrb	r1, [r7, #21]
 8018712:	7cfa      	ldrb	r2, [r7, #19]
 8018714:	440a      	add	r2, r1
 8018716:	b2d2      	uxtb	r2, r2
 8018718:	701a      	strb	r2, [r3, #0]
 801871a:	e004      	b.n	8018726 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 801871c:	bf00      	nop
 801871e:	e002      	b.n	8018726 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8018720:	bf00      	nop
 8018722:	e000      	b.n	8018726 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8018724:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8018726:	7cfb      	ldrb	r3, [r7, #19]
 8018728:	3301      	adds	r3, #1
 801872a:	74fb      	strb	r3, [r7, #19]
 801872c:	7cfb      	ldrb	r3, [r7, #19]
 801872e:	2b0f      	cmp	r3, #15
 8018730:	f67f af6c 	bls.w	801860c <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8018734:	7d7b      	ldrb	r3, [r7, #21]
 8018736:	3310      	adds	r3, #16
 8018738:	757b      	strb	r3, [r7, #21]
 801873a:	7d3b      	ldrb	r3, [r7, #20]
 801873c:	3301      	adds	r3, #1
 801873e:	753b      	strb	r3, [r7, #20]
 8018740:	7d7b      	ldrb	r3, [r7, #21]
 8018742:	b29a      	uxth	r2, r3
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	8a1b      	ldrh	r3, [r3, #16]
 8018748:	429a      	cmp	r2, r3
 801874a:	f4ff af5c 	bcc.w	8018606 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	7dfa      	ldrb	r2, [r7, #23]
 8018752:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8018754:	683b      	ldr	r3, [r7, #0]
 8018756:	7dba      	ldrb	r2, [r7, #22]
 8018758:	701a      	strb	r2, [r3, #0]
}
 801875a:	bf00      	nop
 801875c:	371c      	adds	r7, #28
 801875e:	46bd      	mov	sp, r7
 8018760:	bd90      	pop	{r4, r7, pc}

08018762 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8018762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018764:	b08b      	sub	sp, #44	; 0x2c
 8018766:	af04      	add	r7, sp, #16
 8018768:	60f8      	str	r0, [r7, #12]
 801876a:	60b9      	str	r1, [r7, #8]
 801876c:	607a      	str	r2, [r7, #4]
 801876e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	685b      	ldr	r3, [r3, #4]
 8018774:	4618      	mov	r0, r3
 8018776:	f005 fe15 	bl	801e3a4 <UTIL_TIMER_GetElapsedTime>
 801877a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	681a      	ldr	r2, [r3, #0]
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	1ad2      	subs	r2, r2, r3
 8018784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018786:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8018788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801878a:	2201      	movs	r2, #1
 801878c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801878e:	683b      	ldr	r3, [r7, #0]
 8018790:	2200      	movs	r2, #0
 8018792:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	685b      	ldr	r3, [r3, #4]
 8018798:	2b00      	cmp	r3, #0
 801879a:	d004      	beq.n	80187a6 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801879c:	68fb      	ldr	r3, [r7, #12]
 801879e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 80187a0:	697a      	ldr	r2, [r7, #20]
 80187a2:	429a      	cmp	r2, r3
 80187a4:	d32b      	bcc.n	80187fe <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80187a6:	68bb      	ldr	r3, [r7, #8]
 80187a8:	2200      	movs	r2, #0
 80187aa:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	69db      	ldr	r3, [r3, #28]
 80187b0:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80187b6:	68dd      	ldr	r5, [r3, #12]
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	7a5e      	ldrb	r6, [r3, #9]
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	f893 c008 	ldrb.w	ip, [r3, #8]
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	7d1b      	ldrb	r3, [r3, #20]
 80187c6:	68fa      	ldr	r2, [r7, #12]
 80187c8:	6992      	ldr	r2, [r2, #24]
 80187ca:	9203      	str	r2, [sp, #12]
 80187cc:	68fa      	ldr	r2, [r7, #12]
 80187ce:	f10d 0e04 	add.w	lr, sp, #4
 80187d2:	320c      	adds	r2, #12
 80187d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187d8:	e88e 0003 	stmia.w	lr, {r0, r1}
 80187dc:	9300      	str	r3, [sp, #0]
 80187de:	4663      	mov	r3, ip
 80187e0:	4632      	mov	r2, r6
 80187e2:	4629      	mov	r1, r5
 80187e4:	4620      	mov	r0, r4
 80187e6:	f7ff fc25 	bl	8018034 <RegionCommonUpdateBandTimeOff>
 80187ea:	4602      	mov	r2, r0
 80187ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187ee:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	69d8      	ldr	r0, [r3, #28]
 80187f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187f6:	683a      	ldr	r2, [r7, #0]
 80187f8:	6879      	ldr	r1, [r7, #4]
 80187fa:	f7ff fef4 	bl	80185e6 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	781b      	ldrb	r3, [r3, #0]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d004      	beq.n	8018810 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8018806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018808:	2200      	movs	r2, #0
 801880a:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 801880c:	2300      	movs	r3, #0
 801880e:	e006      	b.n	801881e <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8018810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018812:	781b      	ldrb	r3, [r3, #0]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d001      	beq.n	801881c <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8018818:	230b      	movs	r3, #11
 801881a:	e000      	b.n	801881e <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 801881c:	230c      	movs	r3, #12
    }
}
 801881e:	4618      	mov	r0, r3
 8018820:	371c      	adds	r7, #28
 8018822:	46bd      	mov	sp, r7
 8018824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018826 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8018826:	b5b0      	push	{r4, r5, r7, lr}
 8018828:	b086      	sub	sp, #24
 801882a:	af02      	add	r7, sp, #8
 801882c:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	781b      	ldrb	r3, [r3, #0]
 8018832:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	f993 2000 	ldrsb.w	r2, [r3]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8018840:	429a      	cmp	r2, r3
 8018842:	d103      	bne.n	801884c <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801884a:	e026      	b.n	801889a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 801884c:	7bfb      	ldrb	r3, [r7, #15]
 801884e:	3b01      	subs	r3, #1
 8018850:	b2db      	uxtb	r3, r3
 8018852:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801885a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801885e:	429a      	cmp	r2, r3
 8018860:	d019      	beq.n	8018896 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	78d8      	ldrb	r0, [r3, #3]
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6859      	ldr	r1, [r3, #4]
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018876:	687a      	ldr	r2, [r7, #4]
 8018878:	6892      	ldr	r2, [r2, #8]
 801887a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801887e:	9201      	str	r2, [sp, #4]
 8018880:	9300      	str	r3, [sp, #0]
 8018882:	462b      	mov	r3, r5
 8018884:	4622      	mov	r2, r4
 8018886:	f7ff fa92 	bl	8017dae <RegionCommonChanVerifyDr>
 801888a:	4603      	mov	r3, r0
 801888c:	f083 0301 	eor.w	r3, r3, #1
 8018890:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8018892:	2b00      	cmp	r3, #0
 8018894:	d1da      	bne.n	801884c <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8018896:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801889a:	4618      	mov	r0, r3
 801889c:	3710      	adds	r7, #16
 801889e:	46bd      	mov	sp, r7
 80188a0:	bdb0      	pop	{r4, r5, r7, pc}

080188a2 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 80188a2:	b480      	push	{r7}
 80188a4:	b083      	sub	sp, #12
 80188a6:	af00      	add	r7, sp, #0
 80188a8:	4603      	mov	r3, r0
 80188aa:	460a      	mov	r2, r1
 80188ac:	71fb      	strb	r3, [r7, #7]
 80188ae:	4613      	mov	r3, r2
 80188b0:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80188b2:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80188b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80188ba:	4293      	cmp	r3, r2
 80188bc:	bfb8      	it	lt
 80188be:	4613      	movlt	r3, r2
 80188c0:	b25b      	sxtb	r3, r3
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	370c      	adds	r7, #12
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bc80      	pop	{r7}
 80188ca:	4770      	bx	lr

080188cc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80188cc:	b480      	push	{r7}
 80188ce:	b083      	sub	sp, #12
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	683a      	ldr	r2, [r7, #0]
 80188dc:	4413      	add	r3, r2
 80188de:	681b      	ldr	r3, [r3, #0]
 80188e0:	4a07      	ldr	r2, [pc, #28]	; (8018900 <RegionCommonGetBandwidth+0x34>)
 80188e2:	4293      	cmp	r3, r2
 80188e4:	d004      	beq.n	80188f0 <RegionCommonGetBandwidth+0x24>
 80188e6:	4a07      	ldr	r2, [pc, #28]	; (8018904 <RegionCommonGetBandwidth+0x38>)
 80188e8:	4293      	cmp	r3, r2
 80188ea:	d003      	beq.n	80188f4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80188ec:	2300      	movs	r3, #0
 80188ee:	e002      	b.n	80188f6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80188f0:	2301      	movs	r3, #1
 80188f2:	e000      	b.n	80188f6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80188f4:	2302      	movs	r3, #2
    }
}
 80188f6:	4618      	mov	r0, r3
 80188f8:	370c      	adds	r7, #12
 80188fa:	46bd      	mov	sp, r7
 80188fc:	bc80      	pop	{r7}
 80188fe:	4770      	bx	lr
 8018900:	0003d090 	.word	0x0003d090
 8018904:	0007a120 	.word	0x0007a120

08018908 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8018908:	b580      	push	{r7, lr}
 801890a:	b086      	sub	sp, #24
 801890c:	af04      	add	r7, sp, #16
 801890e:	4603      	mov	r3, r0
 8018910:	6039      	str	r1, [r7, #0]
 8018912:	71fb      	strb	r3, [r7, #7]
 8018914:	4613      	mov	r3, r2
 8018916:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8018918:	79fb      	ldrb	r3, [r7, #7]
 801891a:	2b05      	cmp	r3, #5
 801891c:	d810      	bhi.n	8018940 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801891e:	79fb      	ldrb	r3, [r7, #7]
 8018920:	4a0f      	ldr	r2, [pc, #60]	; (8018960 <RegionCommonRxConfigPrint+0x58>)
 8018922:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018926:	f997 2006 	ldrsb.w	r2, [r7, #6]
 801892a:	9202      	str	r2, [sp, #8]
 801892c:	683a      	ldr	r2, [r7, #0]
 801892e:	9201      	str	r2, [sp, #4]
 8018930:	9300      	str	r3, [sp, #0]
 8018932:	4b0c      	ldr	r3, [pc, #48]	; (8018964 <RegionCommonRxConfigPrint+0x5c>)
 8018934:	2201      	movs	r2, #1
 8018936:	2100      	movs	r1, #0
 8018938:	2002      	movs	r0, #2
 801893a:	f005 fe11 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801893e:	e00a      	b.n	8018956 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018940:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018944:	9301      	str	r3, [sp, #4]
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	9300      	str	r3, [sp, #0]
 801894a:	4b07      	ldr	r3, [pc, #28]	; (8018968 <RegionCommonRxConfigPrint+0x60>)
 801894c:	2201      	movs	r2, #1
 801894e:	2100      	movs	r1, #0
 8018950:	2002      	movs	r0, #2
 8018952:	f005 fe05 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 8018956:	bf00      	nop
 8018958:	3708      	adds	r7, #8
 801895a:	46bd      	mov	sp, r7
 801895c:	bd80      	pop	{r7, pc}
 801895e:	bf00      	nop
 8018960:	2000012c 	.word	0x2000012c
 8018964:	0801f390 	.word	0x0801f390
 8018968:	0801f3b0 	.word	0x0801f3b0

0801896c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b084      	sub	sp, #16
 8018970:	af02      	add	r7, sp, #8
 8018972:	6078      	str	r0, [r7, #4]
 8018974:	460b      	mov	r3, r1
 8018976:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8018978:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801897c:	9301      	str	r3, [sp, #4]
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	9300      	str	r3, [sp, #0]
 8018982:	4b05      	ldr	r3, [pc, #20]	; (8018998 <RegionCommonTxConfigPrint+0x2c>)
 8018984:	2201      	movs	r2, #1
 8018986:	2100      	movs	r1, #0
 8018988:	2002      	movs	r0, #2
 801898a:	f005 fde9 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
}
 801898e:	bf00      	nop
 8018990:	3708      	adds	r7, #8
 8018992:	46bd      	mov	sp, r7
 8018994:	bd80      	pop	{r7, pc}
 8018996:	bf00      	nop
 8018998:	0801f3cc 	.word	0x0801f3cc

0801899c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801899c:	b580      	push	{r7, lr}
 801899e:	b082      	sub	sp, #8
 80189a0:	af00      	add	r7, sp, #0
 80189a2:	6078      	str	r0, [r7, #4]
 80189a4:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80189a6:	4b2d      	ldr	r3, [pc, #180]	; (8018a5c <VerifyRfFreq+0xc0>)
 80189a8:	6a1b      	ldr	r3, [r3, #32]
 80189aa:	6878      	ldr	r0, [r7, #4]
 80189ac:	4798      	blx	r3
 80189ae:	4603      	mov	r3, r0
 80189b0:	f083 0301 	eor.w	r3, r3, #1
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d001      	beq.n	80189be <VerifyRfFreq+0x22>
    {
        return false;
 80189ba:	2300      	movs	r3, #0
 80189bc:	e04a      	b.n	8018a54 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	4a27      	ldr	r2, [pc, #156]	; (8018a60 <VerifyRfFreq+0xc4>)
 80189c2:	4293      	cmp	r3, r2
 80189c4:	d307      	bcc.n	80189d6 <VerifyRfFreq+0x3a>
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	4a26      	ldr	r2, [pc, #152]	; (8018a64 <VerifyRfFreq+0xc8>)
 80189ca:	4293      	cmp	r3, r2
 80189cc:	d803      	bhi.n	80189d6 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80189ce:	683b      	ldr	r3, [r7, #0]
 80189d0:	2202      	movs	r2, #2
 80189d2:	701a      	strb	r2, [r3, #0]
 80189d4:	e03d      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	4a22      	ldr	r2, [pc, #136]	; (8018a64 <VerifyRfFreq+0xc8>)
 80189da:	4293      	cmp	r3, r2
 80189dc:	d907      	bls.n	80189ee <VerifyRfFreq+0x52>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	4a21      	ldr	r2, [pc, #132]	; (8018a68 <VerifyRfFreq+0xcc>)
 80189e2:	4293      	cmp	r3, r2
 80189e4:	d803      	bhi.n	80189ee <VerifyRfFreq+0x52>
    {
        *band = 0;
 80189e6:	683b      	ldr	r3, [r7, #0]
 80189e8:	2200      	movs	r2, #0
 80189ea:	701a      	strb	r2, [r3, #0]
 80189ec:	e031      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	4a1d      	ldr	r2, [pc, #116]	; (8018a68 <VerifyRfFreq+0xcc>)
 80189f2:	4293      	cmp	r3, r2
 80189f4:	d907      	bls.n	8018a06 <VerifyRfFreq+0x6a>
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	4a1c      	ldr	r2, [pc, #112]	; (8018a6c <VerifyRfFreq+0xd0>)
 80189fa:	4293      	cmp	r3, r2
 80189fc:	d803      	bhi.n	8018a06 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80189fe:	683b      	ldr	r3, [r7, #0]
 8018a00:	2201      	movs	r2, #1
 8018a02:	701a      	strb	r2, [r3, #0]
 8018a04:	e025      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	4a19      	ldr	r2, [pc, #100]	; (8018a70 <VerifyRfFreq+0xd4>)
 8018a0a:	4293      	cmp	r3, r2
 8018a0c:	d907      	bls.n	8018a1e <VerifyRfFreq+0x82>
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	4a18      	ldr	r2, [pc, #96]	; (8018a74 <VerifyRfFreq+0xd8>)
 8018a12:	4293      	cmp	r3, r2
 8018a14:	d803      	bhi.n	8018a1e <VerifyRfFreq+0x82>
    {
        *band = 5;
 8018a16:	683b      	ldr	r3, [r7, #0]
 8018a18:	2205      	movs	r2, #5
 8018a1a:	701a      	strb	r2, [r3, #0]
 8018a1c:	e019      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	4a15      	ldr	r2, [pc, #84]	; (8018a78 <VerifyRfFreq+0xdc>)
 8018a22:	4293      	cmp	r3, r2
 8018a24:	d907      	bls.n	8018a36 <VerifyRfFreq+0x9a>
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	4a14      	ldr	r2, [pc, #80]	; (8018a7c <VerifyRfFreq+0xe0>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d803      	bhi.n	8018a36 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8018a2e:	683b      	ldr	r3, [r7, #0]
 8018a30:	2203      	movs	r2, #3
 8018a32:	701a      	strb	r2, [r3, #0]
 8018a34:	e00d      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	4a11      	ldr	r2, [pc, #68]	; (8018a80 <VerifyRfFreq+0xe4>)
 8018a3a:	4293      	cmp	r3, r2
 8018a3c:	d307      	bcc.n	8018a4e <VerifyRfFreq+0xb2>
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	4a10      	ldr	r2, [pc, #64]	; (8018a84 <VerifyRfFreq+0xe8>)
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d803      	bhi.n	8018a4e <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8018a46:	683b      	ldr	r3, [r7, #0]
 8018a48:	2204      	movs	r2, #4
 8018a4a:	701a      	strb	r2, [r3, #0]
 8018a4c:	e001      	b.n	8018a52 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	e000      	b.n	8018a54 <VerifyRfFreq+0xb8>
    }
    return true;
 8018a52:	2301      	movs	r3, #1
}
 8018a54:	4618      	mov	r0, r3
 8018a56:	3708      	adds	r7, #8
 8018a58:	46bd      	mov	sp, r7
 8018a5a:	bd80      	pop	{r7, pc}
 8018a5c:	0801f9f0 	.word	0x0801f9f0
 8018a60:	337055c0 	.word	0x337055c0
 8018a64:	338eda3f 	.word	0x338eda3f
 8018a68:	33bca100 	.word	0x33bca100
 8018a6c:	33c5c8c0 	.word	0x33c5c8c0
 8018a70:	33c74f5f 	.word	0x33c74f5f
 8018a74:	33cef080 	.word	0x33cef080
 8018a78:	33d1fdbf 	.word	0x33d1fdbf
 8018a7c:	33d5ce50 	.word	0x33d5ce50
 8018a80:	33d691a0 	.word	0x33d691a0
 8018a84:	33db2580 	.word	0x33db2580

08018a88 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8018a88:	b590      	push	{r4, r7, lr}
 8018a8a:	b08b      	sub	sp, #44	; 0x2c
 8018a8c:	af04      	add	r7, sp, #16
 8018a8e:	4603      	mov	r3, r0
 8018a90:	460a      	mov	r2, r1
 8018a92:	71fb      	strb	r3, [r7, #7]
 8018a94:	4613      	mov	r3, r2
 8018a96:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8018a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018a9c:	4a1f      	ldr	r2, [pc, #124]	; (8018b1c <GetTimeOnAir+0x94>)
 8018a9e:	5cd3      	ldrb	r3, [r2, r3]
 8018aa0:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8018aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018aa6:	491e      	ldr	r1, [pc, #120]	; (8018b20 <GetTimeOnAir+0x98>)
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	f7ff ff0f 	bl	80188cc <RegionCommonGetBandwidth>
 8018aae:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8018ab0:	2300      	movs	r3, #0
 8018ab2:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8018ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018ab8:	2b07      	cmp	r3, #7
 8018aba:	d118      	bne.n	8018aee <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8018abc:	4b19      	ldr	r3, [pc, #100]	; (8018b24 <GetTimeOnAir+0x9c>)
 8018abe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018ac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018ac8:	fb02 f303 	mul.w	r3, r2, r3
 8018acc:	4619      	mov	r1, r3
 8018ace:	88bb      	ldrh	r3, [r7, #4]
 8018ad0:	b2db      	uxtb	r3, r3
 8018ad2:	2201      	movs	r2, #1
 8018ad4:	9203      	str	r2, [sp, #12]
 8018ad6:	9302      	str	r3, [sp, #8]
 8018ad8:	2300      	movs	r3, #0
 8018ada:	9301      	str	r3, [sp, #4]
 8018adc:	2305      	movs	r3, #5
 8018ade:	9300      	str	r3, [sp, #0]
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	460a      	mov	r2, r1
 8018ae4:	68f9      	ldr	r1, [r7, #12]
 8018ae6:	2000      	movs	r0, #0
 8018ae8:	47a0      	blx	r4
 8018aea:	6178      	str	r0, [r7, #20]
 8018aec:	e011      	b.n	8018b12 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8018aee:	4b0d      	ldr	r3, [pc, #52]	; (8018b24 <GetTimeOnAir+0x9c>)
 8018af0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018af2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018af6:	88bb      	ldrh	r3, [r7, #4]
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2101      	movs	r1, #1
 8018afc:	9103      	str	r1, [sp, #12]
 8018afe:	9302      	str	r3, [sp, #8]
 8018b00:	2300      	movs	r3, #0
 8018b02:	9301      	str	r3, [sp, #4]
 8018b04:	2308      	movs	r3, #8
 8018b06:	9300      	str	r3, [sp, #0]
 8018b08:	2301      	movs	r3, #1
 8018b0a:	68f9      	ldr	r1, [r7, #12]
 8018b0c:	2001      	movs	r0, #1
 8018b0e:	47a0      	blx	r4
 8018b10:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8018b12:	697b      	ldr	r3, [r7, #20]
}
 8018b14:	4618      	mov	r0, r3
 8018b16:	371c      	adds	r7, #28
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	bd90      	pop	{r4, r7, pc}
 8018b1c:	0801f9b8 	.word	0x0801f9b8
 8018b20:	0801f9c0 	.word	0x0801f9c0
 8018b24:	0801f9f0 	.word	0x0801f9f0

08018b28 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8018b28:	b580      	push	{r7, lr}
 8018b2a:	b088      	sub	sp, #32
 8018b2c:	af00      	add	r7, sp, #0
 8018b2e:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8018b30:	2300      	movs	r3, #0
 8018b32:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	781b      	ldrb	r3, [r3, #0]
 8018b38:	3b01      	subs	r3, #1
 8018b3a:	2b38      	cmp	r3, #56	; 0x38
 8018b3c:	f200 8128 	bhi.w	8018d90 <RegionEU868GetPhyParam+0x268>
 8018b40:	a201      	add	r2, pc, #4	; (adr r2, 8018b48 <RegionEU868GetPhyParam+0x20>)
 8018b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b46:	bf00      	nop
 8018b48:	08018c2d 	.word	0x08018c2d
 8018b4c:	08018c33 	.word	0x08018c33
 8018b50:	08018d91 	.word	0x08018d91
 8018b54:	08018d91 	.word	0x08018d91
 8018b58:	08018d91 	.word	0x08018d91
 8018b5c:	08018c39 	.word	0x08018c39
 8018b60:	08018d91 	.word	0x08018d91
 8018b64:	08018c73 	.word	0x08018c73
 8018b68:	08018d91 	.word	0x08018d91
 8018b6c:	08018c79 	.word	0x08018c79
 8018b70:	08018c7f 	.word	0x08018c7f
 8018b74:	08018c85 	.word	0x08018c85
 8018b78:	08018c8b 	.word	0x08018c8b
 8018b7c:	08018c9b 	.word	0x08018c9b
 8018b80:	08018cab 	.word	0x08018cab
 8018b84:	08018cb1 	.word	0x08018cb1
 8018b88:	08018cb9 	.word	0x08018cb9
 8018b8c:	08018cc1 	.word	0x08018cc1
 8018b90:	08018cc9 	.word	0x08018cc9
 8018b94:	08018cd1 	.word	0x08018cd1
 8018b98:	08018cd9 	.word	0x08018cd9
 8018b9c:	08018ce1 	.word	0x08018ce1
 8018ba0:	08018cf5 	.word	0x08018cf5
 8018ba4:	08018cfb 	.word	0x08018cfb
 8018ba8:	08018d01 	.word	0x08018d01
 8018bac:	08018d07 	.word	0x08018d07
 8018bb0:	08018d13 	.word	0x08018d13
 8018bb4:	08018d1f 	.word	0x08018d1f
 8018bb8:	08018d25 	.word	0x08018d25
 8018bbc:	08018d2d 	.word	0x08018d2d
 8018bc0:	08018d33 	.word	0x08018d33
 8018bc4:	08018d39 	.word	0x08018d39
 8018bc8:	08018d41 	.word	0x08018d41
 8018bcc:	08018c3f 	.word	0x08018c3f
 8018bd0:	08018d91 	.word	0x08018d91
 8018bd4:	08018d91 	.word	0x08018d91
 8018bd8:	08018d91 	.word	0x08018d91
 8018bdc:	08018d91 	.word	0x08018d91
 8018be0:	08018d91 	.word	0x08018d91
 8018be4:	08018d91 	.word	0x08018d91
 8018be8:	08018d91 	.word	0x08018d91
 8018bec:	08018d91 	.word	0x08018d91
 8018bf0:	08018d91 	.word	0x08018d91
 8018bf4:	08018d91 	.word	0x08018d91
 8018bf8:	08018d91 	.word	0x08018d91
 8018bfc:	08018d91 	.word	0x08018d91
 8018c00:	08018d91 	.word	0x08018d91
 8018c04:	08018d47 	.word	0x08018d47
 8018c08:	08018d4d 	.word	0x08018d4d
 8018c0c:	08018d5b 	.word	0x08018d5b
 8018c10:	08018d91 	.word	0x08018d91
 8018c14:	08018d91 	.word	0x08018d91
 8018c18:	08018d61 	.word	0x08018d61
 8018c1c:	08018d67 	.word	0x08018d67
 8018c20:	08018d91 	.word	0x08018d91
 8018c24:	08018d6d 	.word	0x08018d6d
 8018c28:	08018d7d 	.word	0x08018d7d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8018c2c:	2300      	movs	r3, #0
 8018c2e:	61bb      	str	r3, [r7, #24]
            break;
 8018c30:	e0af      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8018c32:	2300      	movs	r3, #0
 8018c34:	61bb      	str	r3, [r7, #24]
            break;
 8018c36:	e0ac      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8018c38:	2300      	movs	r3, #0
 8018c3a:	61bb      	str	r3, [r7, #24]
            break;
 8018c3c:	e0a9      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c44:	733b      	strb	r3, [r7, #12]
 8018c46:	2307      	movs	r3, #7
 8018c48:	737b      	strb	r3, [r7, #13]
 8018c4a:	2300      	movs	r3, #0
 8018c4c:	73bb      	strb	r3, [r7, #14]
 8018c4e:	2310      	movs	r3, #16
 8018c50:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8018c52:	4b53      	ldr	r3, [pc, #332]	; (8018da0 <RegionEU868GetPhyParam+0x278>)
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f503 6390 	add.w	r3, r3, #1152	; 0x480
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c5a:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8018c5c:	4b50      	ldr	r3, [pc, #320]	; (8018da0 <RegionEU868GetPhyParam+0x278>)
 8018c5e:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8018c60:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8018c62:	f107 030c 	add.w	r3, r7, #12
 8018c66:	4618      	mov	r0, r3
 8018c68:	f7ff fddd 	bl	8018826 <RegionCommonGetNextLowerTxDr>
 8018c6c:	4603      	mov	r3, r0
 8018c6e:	61bb      	str	r3, [r7, #24]
            break;
 8018c70:	e08f      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8018c72:	2300      	movs	r3, #0
 8018c74:	61bb      	str	r3, [r7, #24]
            break;
 8018c76:	e08c      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	61bb      	str	r3, [r7, #24]
            break;
 8018c7c:	e089      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8018c7e:	2340      	movs	r3, #64	; 0x40
 8018c80:	61bb      	str	r3, [r7, #24]
            break;
 8018c82:	e086      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8018c84:	2320      	movs	r3, #32
 8018c86:	61bb      	str	r3, [r7, #24]
            break;
 8018c88:	e083      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c90:	461a      	mov	r2, r3
 8018c92:	4b44      	ldr	r3, [pc, #272]	; (8018da4 <RegionEU868GetPhyParam+0x27c>)
 8018c94:	5c9b      	ldrb	r3, [r3, r2]
 8018c96:	61bb      	str	r3, [r7, #24]
            break;
 8018c98:	e07b      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018ca0:	461a      	mov	r2, r3
 8018ca2:	4b41      	ldr	r3, [pc, #260]	; (8018da8 <RegionEU868GetPhyParam+0x280>)
 8018ca4:	5c9b      	ldrb	r3, [r3, r2]
 8018ca6:	61bb      	str	r3, [r7, #24]
            break;
 8018ca8:	e073      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8018caa:	2301      	movs	r3, #1
 8018cac:	61bb      	str	r3, [r7, #24]
            break;
 8018cae:	e070      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8018cb0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8018cb4:	61bb      	str	r3, [r7, #24]
            break;
 8018cb6:	e06c      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8018cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018cbc:	61bb      	str	r3, [r7, #24]
            break;
 8018cbe:	e068      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8018cc0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8018cc4:	61bb      	str	r3, [r7, #24]
            break;
 8018cc6:	e064      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8018cc8:	f241 3388 	movw	r3, #5000	; 0x1388
 8018ccc:	61bb      	str	r3, [r7, #24]
            break;
 8018cce:	e060      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8018cd0:	f241 7370 	movw	r3, #6000	; 0x1770
 8018cd4:	61bb      	str	r3, [r7, #24]
            break;
 8018cd6:	e05c      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
        case PHY_MAX_FCNT_GAP:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 8018cd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018cdc:	61bb      	str	r3, [r7, #24]
            break;
 8018cde:	e058      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_ACK_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 8018ce0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018ce4:	4831      	ldr	r0, [pc, #196]	; (8018dac <RegionEU868GetPhyParam+0x284>)
 8018ce6:	f001 f87f 	bl	8019de8 <randr>
 8018cea:	4603      	mov	r3, r0
 8018cec:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8018cf0:	61bb      	str	r3, [r7, #24]
            break;
 8018cf2:	e04e      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
            break;
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	61bb      	str	r3, [r7, #24]
            break;
 8018cf8:	e04b      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8018cfa:	4b2d      	ldr	r3, [pc, #180]	; (8018db0 <RegionEU868GetPhyParam+0x288>)
 8018cfc:	61bb      	str	r3, [r7, #24]
            break;
 8018cfe:	e048      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8018d00:	2300      	movs	r3, #0
 8018d02:	61bb      	str	r3, [r7, #24]
            break;
 8018d04:	e045      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8018d06:	4b26      	ldr	r3, [pc, #152]	; (8018da0 <RegionEU868GetPhyParam+0x278>)
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8018d0e:	61bb      	str	r3, [r7, #24]
            break;
 8018d10:	e03f      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8018d12:	4b23      	ldr	r3, [pc, #140]	; (8018da0 <RegionEU868GetPhyParam+0x278>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018d1a:	61bb      	str	r3, [r7, #24]
            break;
 8018d1c:	e039      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8018d1e:	2310      	movs	r3, #16
 8018d20:	61bb      	str	r3, [r7, #24]
            break;
 8018d22:	e036      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8018d24:	4b1e      	ldr	r3, [pc, #120]	; (8018da0 <RegionEU868GetPhyParam+0x278>)
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	61bb      	str	r3, [r7, #24]
            break;
 8018d2a:	e032      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8018d2c:	2300      	movs	r3, #0
 8018d2e:	61bb      	str	r3, [r7, #24]
            break;
 8018d30:	e02f      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8018d32:	2300      	movs	r3, #0
 8018d34:	61bb      	str	r3, [r7, #24]
            break;
 8018d36:	e02c      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8018d38:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 8018d3c:	61bb      	str	r3, [r7, #24]
            break;
 8018d3e:	e028      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8018d40:	4b1c      	ldr	r3, [pc, #112]	; (8018db4 <RegionEU868GetPhyParam+0x28c>)
 8018d42:	61bb      	str	r3, [r7, #24]
            break;
 8018d44:	e025      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8018d46:	4b1a      	ldr	r3, [pc, #104]	; (8018db0 <RegionEU868GetPhyParam+0x288>)
 8018d48:	61bb      	str	r3, [r7, #24]
            break;
 8018d4a:	e022      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8018d4c:	2311      	movs	r3, #17
 8018d4e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8018d50:	2302      	movs	r3, #2
 8018d52:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8018d54:	2300      	movs	r3, #0
 8018d56:	76bb      	strb	r3, [r7, #26]
            break;
 8018d58:	e01b      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8018d5a:	2303      	movs	r3, #3
 8018d5c:	61bb      	str	r3, [r7, #24]
            break;
 8018d5e:	e018      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8018d60:	4b13      	ldr	r3, [pc, #76]	; (8018db0 <RegionEU868GetPhyParam+0x288>)
 8018d62:	61bb      	str	r3, [r7, #24]
            break;
 8018d64:	e015      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8018d66:	2303      	movs	r3, #3
 8018d68:	61bb      	str	r3, [r7, #24]
            break;
 8018d6a:	e012      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d72:	461a      	mov	r2, r3
 8018d74:	4b10      	ldr	r3, [pc, #64]	; (8018db8 <RegionEU868GetPhyParam+0x290>)
 8018d76:	5c9b      	ldrb	r3, [r3, r2]
 8018d78:	61bb      	str	r3, [r7, #24]
            break;
 8018d7a:	e00a      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018d82:	490e      	ldr	r1, [pc, #56]	; (8018dbc <RegionEU868GetPhyParam+0x294>)
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7ff fda1 	bl	80188cc <RegionCommonGetBandwidth>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	61bb      	str	r3, [r7, #24]
            break;
 8018d8e:	e000      	b.n	8018d92 <RegionEU868GetPhyParam+0x26a>
        }
        default:
        {
            break;
 8018d90:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8018d92:	69bb      	ldr	r3, [r7, #24]
 8018d94:	61fb      	str	r3, [r7, #28]
 8018d96:	69fb      	ldr	r3, [r7, #28]
}
 8018d98:	4618      	mov	r0, r3
 8018d9a:	3720      	adds	r7, #32
 8018d9c:	46bd      	mov	sp, r7
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	200016d4 	.word	0x200016d4
 8018da4:	0801f9e0 	.word	0x0801f9e0
 8018da8:	0801f9e8 	.word	0x0801f9e8
 8018dac:	fffffc18 	.word	0xfffffc18
 8018db0:	33d3e608 	.word	0x33d3e608
 8018db4:	4009999a 	.word	0x4009999a
 8018db8:	0801f9b8 	.word	0x0801f9b8
 8018dbc:	0801f9c0 	.word	0x0801f9c0

08018dc0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8018dc0:	b590      	push	{r4, r7, lr}
 8018dc2:	b085      	sub	sp, #20
 8018dc4:	af02      	add	r7, sp, #8
 8018dc6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8018dc8:	4b11      	ldr	r3, [pc, #68]	; (8018e10 <RegionEU868SetBandTxDone+0x50>)
 8018dca:	681a      	ldr	r2, [r3, #0]
 8018dcc:	4b11      	ldr	r3, [pc, #68]	; (8018e14 <RegionEU868SetBandTxDone+0x54>)
 8018dce:	6819      	ldr	r1, [r3, #0]
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	781b      	ldrb	r3, [r3, #0]
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	4603      	mov	r3, r0
 8018dd8:	005b      	lsls	r3, r3, #1
 8018dda:	4403      	add	r3, r0
 8018ddc:	009b      	lsls	r3, r3, #2
 8018dde:	440b      	add	r3, r1
 8018de0:	3309      	adds	r3, #9
 8018de2:	781b      	ldrb	r3, [r3, #0]
 8018de4:	4619      	mov	r1, r3
 8018de6:	460b      	mov	r3, r1
 8018de8:	005b      	lsls	r3, r3, #1
 8018dea:	440b      	add	r3, r1
 8018dec:	00db      	lsls	r3, r3, #3
 8018dee:	18d0      	adds	r0, r2, r3
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6899      	ldr	r1, [r3, #8]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	785c      	ldrb	r4, [r3, #1]
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	691a      	ldr	r2, [r3, #16]
 8018dfc:	9200      	str	r2, [sp, #0]
 8018dfe:	68db      	ldr	r3, [r3, #12]
 8018e00:	4622      	mov	r2, r4
 8018e02:	f7ff f8e9 	bl	8017fd8 <RegionCommonSetBandTxDone>
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8018e06:	bf00      	nop
 8018e08:	370c      	adds	r7, #12
 8018e0a:	46bd      	mov	sp, r7
 8018e0c:	bd90      	pop	{r4, r7, pc}
 8018e0e:	bf00      	nop
 8018e10:	200016d0 	.word	0x200016d0
 8018e14:	200016d4 	.word	0x200016d4

08018e18 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8018e18:	b580      	push	{r7, lr}
 8018e1a:	b0b0      	sub	sp, #192	; 0xc0
 8018e1c:	af00      	add	r7, sp, #0
 8018e1e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8018e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e24:	2290      	movs	r2, #144	; 0x90
 8018e26:	2100      	movs	r1, #0
 8018e28:	4618      	mov	r0, r3
 8018e2a:	f005 fe11 	bl	801ea50 <memset>
 8018e2e:	2364      	movs	r3, #100	; 0x64
 8018e30:	863b      	strh	r3, [r7, #48]	; 0x30
 8018e32:	2364      	movs	r3, #100	; 0x64
 8018e34:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8018e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e3c:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8018e40:	230a      	movs	r3, #10
 8018e42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8018e46:	2364      	movs	r3, #100	; 0x64
 8018e48:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 8018e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018e50:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	7a1b      	ldrb	r3, [r3, #8]
 8018e58:	2b02      	cmp	r3, #2
 8018e5a:	d05e      	beq.n	8018f1a <RegionEU868InitDefaults+0x102>
 8018e5c:	2b02      	cmp	r3, #2
 8018e5e:	dc6b      	bgt.n	8018f38 <RegionEU868InitDefaults+0x120>
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d002      	beq.n	8018e6a <RegionEU868InitDefaults+0x52>
 8018e64:	2b01      	cmp	r3, #1
 8018e66:	d03f      	beq.n	8018ee8 <RegionEU868InitDefaults+0xd0>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8018e68:	e066      	b.n	8018f38 <RegionEU868InitDefaults+0x120>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d063      	beq.n	8018f3a <RegionEU868InitDefaults+0x122>
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	685b      	ldr	r3, [r3, #4]
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d05f      	beq.n	8018f3a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8018e7a:	687b      	ldr	r3, [r7, #4]
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	4a30      	ldr	r2, [pc, #192]	; (8018f40 <RegionEU868InitDefaults+0x128>)
 8018e80:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	685b      	ldr	r3, [r3, #4]
 8018e86:	4a2f      	ldr	r2, [pc, #188]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018e88:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8018e8a:	4b2d      	ldr	r3, [pc, #180]	; (8018f40 <RegionEU868InitDefaults+0x128>)
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	4618      	mov	r0, r3
 8018e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018e94:	2290      	movs	r2, #144	; 0x90
 8018e96:	4619      	mov	r1, r3
 8018e98:	f000 ffbd 	bl	8019e16 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8018e9c:	4b29      	ldr	r3, [pc, #164]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	4a29      	ldr	r2, [pc, #164]	; (8018f48 <RegionEU868InitDefaults+0x130>)
 8018ea2:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ea4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8018ea8:	4b26      	ldr	r3, [pc, #152]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	4a27      	ldr	r2, [pc, #156]	; (8018f4c <RegionEU868InitDefaults+0x134>)
 8018eae:	330c      	adds	r3, #12
 8018eb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8018eb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8018eb6:	4b23      	ldr	r3, [pc, #140]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	4a25      	ldr	r2, [pc, #148]	; (8018f50 <RegionEU868InitDefaults+0x138>)
 8018ebc:	3318      	adds	r3, #24
 8018ebe:	ca07      	ldmia	r2, {r0, r1, r2}
 8018ec0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8018ec4:	4b1f      	ldr	r3, [pc, #124]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	2207      	movs	r2, #7
 8018eca:	f8a3 248c 	strh.w	r2, [r3, #1164]	; 0x48c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018ece:	4b1d      	ldr	r3, [pc, #116]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018ed6:	4b1b      	ldr	r3, [pc, #108]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018ede:	2201      	movs	r2, #1
 8018ee0:	4619      	mov	r1, r3
 8018ee2:	f7ff f853 	bl	8017f8c <RegionCommonChanMaskCopy>
 8018ee6:	e028      	b.n	8018f3a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8018ee8:	4b16      	ldr	r3, [pc, #88]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018eea:	681b      	ldr	r3, [r3, #0]
 8018eec:	2200      	movs	r2, #0
 8018eee:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8018ef0:	4b14      	ldr	r3, [pc, #80]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	2200      	movs	r2, #0
 8018ef6:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8018ef8:	4b12      	ldr	r3, [pc, #72]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2200      	movs	r2, #0
 8018efe:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8018f00:	4b10      	ldr	r3, [pc, #64]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8018f08:	4b0e      	ldr	r3, [pc, #56]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018f0a:	681b      	ldr	r3, [r3, #0]
 8018f0c:	f203 438c 	addw	r3, r3, #1164	; 0x48c
 8018f10:	2201      	movs	r2, #1
 8018f12:	4619      	mov	r1, r3
 8018f14:	f7ff f83a 	bl	8017f8c <RegionCommonChanMaskCopy>
            break;
 8018f18:	e00f      	b.n	8018f3a <RegionEU868InitDefaults+0x122>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8018f1a:	4b0a      	ldr	r3, [pc, #40]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	f8b3 1480 	ldrh.w	r1, [r3, #1152]	; 0x480
 8018f22:	4b08      	ldr	r3, [pc, #32]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018f24:	681b      	ldr	r3, [r3, #0]
 8018f26:	f8b3 248c 	ldrh.w	r2, [r3, #1164]	; 0x48c
 8018f2a:	4b06      	ldr	r3, [pc, #24]	; (8018f44 <RegionEU868InitDefaults+0x12c>)
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	430a      	orrs	r2, r1
 8018f30:	b292      	uxth	r2, r2
 8018f32:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
            break;
 8018f36:	e000      	b.n	8018f3a <RegionEU868InitDefaults+0x122>
            break;
 8018f38:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8018f3a:	37c0      	adds	r7, #192	; 0xc0
 8018f3c:	46bd      	mov	sp, r7
 8018f3e:	bd80      	pop	{r7, pc}
 8018f40:	200016d0 	.word	0x200016d0
 8018f44:	200016d4 	.word	0x200016d4
 8018f48:	0801f3e8 	.word	0x0801f3e8
 8018f4c:	0801f3f4 	.word	0x0801f3f4
 8018f50:	0801f400 	.word	0x0801f400

08018f54 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
 8018f5c:	460b      	mov	r3, r1
 8018f5e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8018f60:	78fb      	ldrb	r3, [r7, #3]
 8018f62:	2b0f      	cmp	r3, #15
 8018f64:	d86c      	bhi.n	8019040 <RegionEU868Verify+0xec>
 8018f66:	a201      	add	r2, pc, #4	; (adr r2, 8018f6c <RegionEU868Verify+0x18>)
 8018f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f6c:	08018fad 	.word	0x08018fad
 8018f70:	08019041 	.word	0x08019041
 8018f74:	08019041 	.word	0x08019041
 8018f78:	08019041 	.word	0x08019041
 8018f7c:	08019041 	.word	0x08019041
 8018f80:	08018fc5 	.word	0x08018fc5
 8018f84:	08018fe3 	.word	0x08018fe3
 8018f88:	08019001 	.word	0x08019001
 8018f8c:	08019041 	.word	0x08019041
 8018f90:	0801901f 	.word	0x0801901f
 8018f94:	0801901f 	.word	0x0801901f
 8018f98:	08019041 	.word	0x08019041
 8018f9c:	08019041 	.word	0x08019041
 8018fa0:	08019041 	.word	0x08019041
 8018fa4:	08019041 	.word	0x08019041
 8018fa8:	0801903d 	.word	0x0801903d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8018fac:	2300      	movs	r3, #0
 8018fae:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	f107 020f 	add.w	r2, r7, #15
 8018fb8:	4611      	mov	r1, r2
 8018fba:	4618      	mov	r0, r3
 8018fbc:	f7ff fcee 	bl	801899c <VerifyRfFreq>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	e03e      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	f993 3000 	ldrsb.w	r3, [r3]
 8018fca:	2207      	movs	r2, #7
 8018fcc:	2100      	movs	r1, #0
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f7fe ff5f 	bl	8017e92 <RegionCommonValueInRange>
 8018fd4:	4603      	mov	r3, r0
 8018fd6:	2b00      	cmp	r3, #0
 8018fd8:	bf14      	ite	ne
 8018fda:	2301      	movne	r3, #1
 8018fdc:	2300      	moveq	r3, #0
 8018fde:	b2db      	uxtb	r3, r3
 8018fe0:	e02f      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	f993 3000 	ldrsb.w	r3, [r3]
 8018fe8:	2205      	movs	r2, #5
 8018fea:	2100      	movs	r1, #0
 8018fec:	4618      	mov	r0, r3
 8018fee:	f7fe ff50 	bl	8017e92 <RegionCommonValueInRange>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	bf14      	ite	ne
 8018ff8:	2301      	movne	r3, #1
 8018ffa:	2300      	moveq	r3, #0
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	e020      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	f993 3000 	ldrsb.w	r3, [r3]
 8019006:	2207      	movs	r2, #7
 8019008:	2100      	movs	r1, #0
 801900a:	4618      	mov	r0, r3
 801900c:	f7fe ff41 	bl	8017e92 <RegionCommonValueInRange>
 8019010:	4603      	mov	r3, r0
 8019012:	2b00      	cmp	r3, #0
 8019014:	bf14      	ite	ne
 8019016:	2301      	movne	r3, #1
 8019018:	2300      	moveq	r3, #0
 801901a:	b2db      	uxtb	r3, r3
 801901c:	e011      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	f993 3000 	ldrsb.w	r3, [r3]
 8019024:	2207      	movs	r2, #7
 8019026:	2100      	movs	r1, #0
 8019028:	4618      	mov	r0, r3
 801902a:	f7fe ff32 	bl	8017e92 <RegionCommonValueInRange>
 801902e:	4603      	mov	r3, r0
 8019030:	2b00      	cmp	r3, #0
 8019032:	bf14      	ite	ne
 8019034:	2301      	movne	r3, #1
 8019036:	2300      	moveq	r3, #0
 8019038:	b2db      	uxtb	r3, r3
 801903a:	e002      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 801903c:	2301      	movs	r3, #1
 801903e:	e000      	b.n	8019042 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8019040:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8019042:	4618      	mov	r0, r3
 8019044:	3710      	adds	r7, #16
 8019046:	46bd      	mov	sp, r7
 8019048:	bd80      	pop	{r7, pc}
 801904a:	bf00      	nop

0801904c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b08a      	sub	sp, #40	; 0x28
 8019050:	af00      	add	r7, sp, #0
 8019052:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8019054:	2350      	movs	r3, #80	; 0x50
 8019056:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	791b      	ldrb	r3, [r3, #4]
 801905e:	2b10      	cmp	r3, #16
 8019060:	d162      	bne.n	8019128 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8019062:	687b      	ldr	r3, [r7, #4]
 8019064:	681b      	ldr	r3, [r3, #0]
 8019066:	330f      	adds	r3, #15
 8019068:	781b      	ldrb	r3, [r3, #0]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d15e      	bne.n	801912c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801906e:	2300      	movs	r3, #0
 8019070:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019074:	2303      	movs	r3, #3
 8019076:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801907a:	e050      	b.n	801911e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 801907c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019080:	2b07      	cmp	r3, #7
 8019082:	d824      	bhi.n	80190ce <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	681a      	ldr	r2, [r3, #0]
 8019088:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801908c:	4413      	add	r3, r2
 801908e:	781b      	ldrb	r3, [r3, #0]
 8019090:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8019092:	69ba      	ldr	r2, [r7, #24]
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6819      	ldr	r1, [r3, #0]
 8019098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801909c:	3301      	adds	r3, #1
 801909e:	440b      	add	r3, r1
 80190a0:	781b      	ldrb	r3, [r3, #0]
 80190a2:	021b      	lsls	r3, r3, #8
 80190a4:	4313      	orrs	r3, r2
 80190a6:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80190a8:	69ba      	ldr	r2, [r7, #24]
 80190aa:	687b      	ldr	r3, [r7, #4]
 80190ac:	6819      	ldr	r1, [r3, #0]
 80190ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80190b2:	3302      	adds	r3, #2
 80190b4:	440b      	add	r3, r1
 80190b6:	781b      	ldrb	r3, [r3, #0]
 80190b8:	041b      	lsls	r3, r3, #16
 80190ba:	4313      	orrs	r3, r2
 80190bc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 80190be:	69bb      	ldr	r3, [r7, #24]
 80190c0:	2264      	movs	r2, #100	; 0x64
 80190c2:	fb02 f303 	mul.w	r3, r2, r3
 80190c6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 80190c8:	2300      	movs	r3, #0
 80190ca:	61fb      	str	r3, [r7, #28]
 80190cc:	e006      	b.n	80190dc <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 80190ce:	2300      	movs	r3, #0
 80190d0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 80190d2:	2300      	movs	r3, #0
 80190d4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 80190d8:	2300      	movs	r3, #0
 80190da:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 80190dc:	69bb      	ldr	r3, [r7, #24]
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d00b      	beq.n	80190fa <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 80190e2:	f107 0318 	add.w	r3, r7, #24
 80190e6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 80190e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190ec:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 80190ee:	f107 0310 	add.w	r3, r7, #16
 80190f2:	4618      	mov	r0, r3
 80190f4:	f000 fd14 	bl	8019b20 <RegionEU868ChannelAdd>
 80190f8:	e007      	b.n	801910a <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 80190fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80190fe:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8019100:	f107 030c 	add.w	r3, r7, #12
 8019104:	4618      	mov	r0, r3
 8019106:	f000 fdad 	bl	8019c64 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 801910a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801910e:	3303      	adds	r3, #3
 8019110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019114:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019118:	3301      	adds	r3, #1
 801911a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801911e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019122:	2b0f      	cmp	r3, #15
 8019124:	d9aa      	bls.n	801907c <RegionEU868ApplyCFList+0x30>
 8019126:	e002      	b.n	801912e <RegionEU868ApplyCFList+0xe2>
        return;
 8019128:	bf00      	nop
 801912a:	e000      	b.n	801912e <RegionEU868ApplyCFList+0xe2>
        return;
 801912c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801912e:	3728      	adds	r7, #40	; 0x28
 8019130:	46bd      	mov	sp, r7
 8019132:	bd80      	pop	{r7, pc}

08019134 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8019134:	b580      	push	{r7, lr}
 8019136:	b082      	sub	sp, #8
 8019138:	af00      	add	r7, sp, #0
 801913a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	791b      	ldrb	r3, [r3, #4]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d002      	beq.n	801914a <RegionEU868ChanMaskSet+0x16>
 8019144:	2b01      	cmp	r3, #1
 8019146:	d00b      	beq.n	8019160 <RegionEU868ChanMaskSet+0x2c>
 8019148:	e015      	b.n	8019176 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 801914a:	4b0e      	ldr	r3, [pc, #56]	; (8019184 <RegionEU868ChanMaskSet+0x50>)
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	f503 6090 	add.w	r0, r3, #1152	; 0x480
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	2201      	movs	r2, #1
 8019158:	4619      	mov	r1, r3
 801915a:	f7fe ff17 	bl	8017f8c <RegionCommonChanMaskCopy>
            break;
 801915e:	e00c      	b.n	801917a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8019160:	4b08      	ldr	r3, [pc, #32]	; (8019184 <RegionEU868ChanMaskSet+0x50>)
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	f203 408c 	addw	r0, r3, #1164	; 0x48c
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	2201      	movs	r2, #1
 801916e:	4619      	mov	r1, r3
 8019170:	f7fe ff0c 	bl	8017f8c <RegionCommonChanMaskCopy>
            break;
 8019174:	e001      	b.n	801917a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8019176:	2300      	movs	r3, #0
 8019178:	e000      	b.n	801917c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801917a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801917c:	4618      	mov	r0, r3
 801917e:	3708      	adds	r7, #8
 8019180:	46bd      	mov	sp, r7
 8019182:	bd80      	pop	{r7, pc}
 8019184:	200016d4 	.word	0x200016d4

08019188 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8019188:	b580      	push	{r7, lr}
 801918a:	b088      	sub	sp, #32
 801918c:	af02      	add	r7, sp, #8
 801918e:	60ba      	str	r2, [r7, #8]
 8019190:	607b      	str	r3, [r7, #4]
 8019192:	4603      	mov	r3, r0
 8019194:	73fb      	strb	r3, [r7, #15]
 8019196:	460b      	mov	r3, r1
 8019198:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801919a:	2300      	movs	r3, #0
 801919c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 801919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191a2:	2b07      	cmp	r3, #7
 80191a4:	bfa8      	it	ge
 80191a6:	2307      	movge	r3, #7
 80191a8:	b25a      	sxtb	r2, r3
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191b4:	491e      	ldr	r1, [pc, #120]	; (8019230 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191b6:	4618      	mov	r0, r3
 80191b8:	f7ff fb88 	bl	80188cc <RegionCommonGetBandwidth>
 80191bc:	4603      	mov	r3, r0
 80191be:	b2da      	uxtb	r2, r3
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191ca:	2b07      	cmp	r3, #7
 80191cc:	d10a      	bne.n	80191e4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191d4:	461a      	mov	r2, r3
 80191d6:	4b17      	ldr	r3, [pc, #92]	; (8019234 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191d8:	5c9b      	ldrb	r3, [r3, r2]
 80191da:	4618      	mov	r0, r3
 80191dc:	f7ff f90a 	bl	80183f4 <RegionCommonComputeSymbolTimeFsk>
 80191e0:	6178      	str	r0, [r7, #20]
 80191e2:	e011      	b.n	8019208 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191ea:	461a      	mov	r2, r3
 80191ec:	4b11      	ldr	r3, [pc, #68]	; (8019234 <RegionEU868ComputeRxWindowParameters+0xac>)
 80191ee:	5c9a      	ldrb	r2, [r3, r2]
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80191f6:	4619      	mov	r1, r3
 80191f8:	4b0d      	ldr	r3, [pc, #52]	; (8019230 <RegionEU868ComputeRxWindowParameters+0xa8>)
 80191fa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80191fe:	4619      	mov	r1, r3
 8019200:	4610      	mov	r0, r2
 8019202:	f7ff f8e1 	bl	80183c8 <RegionCommonComputeSymbolTimeLoRa>
 8019206:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8019208:	4b0b      	ldr	r3, [pc, #44]	; (8019238 <RegionEU868ComputeRxWindowParameters+0xb0>)
 801920a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801920c:	4798      	blx	r3
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	3308      	adds	r3, #8
 8019212:	687a      	ldr	r2, [r7, #4]
 8019214:	320c      	adds	r2, #12
 8019216:	7bb9      	ldrb	r1, [r7, #14]
 8019218:	9201      	str	r2, [sp, #4]
 801921a:	9300      	str	r3, [sp, #0]
 801921c:	4603      	mov	r3, r0
 801921e:	68ba      	ldr	r2, [r7, #8]
 8019220:	6978      	ldr	r0, [r7, #20]
 8019222:	f7ff f8f7 	bl	8018414 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8019226:	bf00      	nop
 8019228:	3718      	adds	r7, #24
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	0801f9c0 	.word	0x0801f9c0
 8019234:	0801f9b8 	.word	0x0801f9b8
 8019238:	0801f9f0 	.word	0x0801f9f0

0801923c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801923c:	b5b0      	push	{r4, r5, r7, lr}
 801923e:	b090      	sub	sp, #64	; 0x40
 8019240:	af0a      	add	r7, sp, #40	; 0x28
 8019242:	6078      	str	r0, [r7, #4]
 8019244:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	785b      	ldrb	r3, [r3, #1]
 801924a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801924c:	2300      	movs	r3, #0
 801924e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8019250:	2300      	movs	r3, #0
 8019252:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	685b      	ldr	r3, [r3, #4]
 8019258:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 801925a:	4b5a      	ldr	r3, [pc, #360]	; (80193c4 <RegionEU868RxConfig+0x188>)
 801925c:	685b      	ldr	r3, [r3, #4]
 801925e:	4798      	blx	r3
 8019260:	4603      	mov	r3, r0
 8019262:	2b00      	cmp	r3, #0
 8019264:	d001      	beq.n	801926a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8019266:	2300      	movs	r3, #0
 8019268:	e0a8      	b.n	80193bc <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	7cdb      	ldrb	r3, [r3, #19]
 801926e:	2b00      	cmp	r3, #0
 8019270:	d126      	bne.n	80192c0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8019272:	4b55      	ldr	r3, [pc, #340]	; (80193c8 <RegionEU868RxConfig+0x18c>)
 8019274:	681a      	ldr	r2, [r3, #0]
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	781b      	ldrb	r3, [r3, #0]
 801927a:	4619      	mov	r1, r3
 801927c:	460b      	mov	r3, r1
 801927e:	005b      	lsls	r3, r3, #1
 8019280:	440b      	add	r3, r1
 8019282:	009b      	lsls	r3, r3, #2
 8019284:	4413      	add	r3, r2
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801928a:	4b4f      	ldr	r3, [pc, #316]	; (80193c8 <RegionEU868RxConfig+0x18c>)
 801928c:	681a      	ldr	r2, [r3, #0]
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	781b      	ldrb	r3, [r3, #0]
 8019292:	4619      	mov	r1, r3
 8019294:	460b      	mov	r3, r1
 8019296:	005b      	lsls	r3, r3, #1
 8019298:	440b      	add	r3, r1
 801929a:	009b      	lsls	r3, r3, #2
 801929c:	4413      	add	r3, r2
 801929e:	3304      	adds	r3, #4
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d00c      	beq.n	80192c0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80192a6:	4b48      	ldr	r3, [pc, #288]	; (80193c8 <RegionEU868RxConfig+0x18c>)
 80192a8:	681a      	ldr	r2, [r3, #0]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	781b      	ldrb	r3, [r3, #0]
 80192ae:	4619      	mov	r1, r3
 80192b0:	460b      	mov	r3, r1
 80192b2:	005b      	lsls	r3, r3, #1
 80192b4:	440b      	add	r3, r1
 80192b6:	009b      	lsls	r3, r3, #2
 80192b8:	4413      	add	r3, r2
 80192ba:	3304      	adds	r3, #4
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 80192c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192c4:	4a41      	ldr	r2, [pc, #260]	; (80193cc <RegionEU868RxConfig+0x190>)
 80192c6:	5cd3      	ldrb	r3, [r2, r3]
 80192c8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80192ca:	4b3e      	ldr	r3, [pc, #248]	; (80193c4 <RegionEU868RxConfig+0x188>)
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	6938      	ldr	r0, [r7, #16]
 80192d0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80192d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80192d6:	2b07      	cmp	r3, #7
 80192d8:	d128      	bne.n	801932c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 80192da:	2300      	movs	r3, #0
 80192dc:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 80192de:	4b39      	ldr	r3, [pc, #228]	; (80193c4 <RegionEU868RxConfig+0x188>)
 80192e0:	699c      	ldr	r4, [r3, #24]
 80192e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80192e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80192ea:	fb02 f303 	mul.w	r3, r2, r3
 80192ee:	4619      	mov	r1, r3
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	689b      	ldr	r3, [r3, #8]
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	687a      	ldr	r2, [r7, #4]
 80192f8:	7c92      	ldrb	r2, [r2, #18]
 80192fa:	7df8      	ldrb	r0, [r7, #23]
 80192fc:	9209      	str	r2, [sp, #36]	; 0x24
 80192fe:	2200      	movs	r2, #0
 8019300:	9208      	str	r2, [sp, #32]
 8019302:	2200      	movs	r2, #0
 8019304:	9207      	str	r2, [sp, #28]
 8019306:	2200      	movs	r2, #0
 8019308:	9206      	str	r2, [sp, #24]
 801930a:	2201      	movs	r2, #1
 801930c:	9205      	str	r2, [sp, #20]
 801930e:	2200      	movs	r2, #0
 8019310:	9204      	str	r2, [sp, #16]
 8019312:	2200      	movs	r2, #0
 8019314:	9203      	str	r2, [sp, #12]
 8019316:	9302      	str	r3, [sp, #8]
 8019318:	2305      	movs	r3, #5
 801931a:	9301      	str	r3, [sp, #4]
 801931c:	4b2c      	ldr	r3, [pc, #176]	; (80193d0 <RegionEU868RxConfig+0x194>)
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	2300      	movs	r3, #0
 8019322:	460a      	mov	r2, r1
 8019324:	f24c 3150 	movw	r1, #50000	; 0xc350
 8019328:	47a0      	blx	r4
 801932a:	e024      	b.n	8019376 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801932c:	2301      	movs	r3, #1
 801932e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8019330:	4b24      	ldr	r3, [pc, #144]	; (80193c4 <RegionEU868RxConfig+0x188>)
 8019332:	699c      	ldr	r4, [r3, #24]
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	789b      	ldrb	r3, [r3, #2]
 8019338:	461d      	mov	r5, r3
 801933a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	689b      	ldr	r3, [r3, #8]
 8019342:	b29b      	uxth	r3, r3
 8019344:	687a      	ldr	r2, [r7, #4]
 8019346:	7c92      	ldrb	r2, [r2, #18]
 8019348:	7df8      	ldrb	r0, [r7, #23]
 801934a:	9209      	str	r2, [sp, #36]	; 0x24
 801934c:	2201      	movs	r2, #1
 801934e:	9208      	str	r2, [sp, #32]
 8019350:	2200      	movs	r2, #0
 8019352:	9207      	str	r2, [sp, #28]
 8019354:	2200      	movs	r2, #0
 8019356:	9206      	str	r2, [sp, #24]
 8019358:	2200      	movs	r2, #0
 801935a:	9205      	str	r2, [sp, #20]
 801935c:	2200      	movs	r2, #0
 801935e:	9204      	str	r2, [sp, #16]
 8019360:	2200      	movs	r2, #0
 8019362:	9203      	str	r2, [sp, #12]
 8019364:	9302      	str	r3, [sp, #8]
 8019366:	2308      	movs	r3, #8
 8019368:	9301      	str	r3, [sp, #4]
 801936a:	2300      	movs	r3, #0
 801936c:	9300      	str	r3, [sp, #0]
 801936e:	2301      	movs	r3, #1
 8019370:	460a      	mov	r2, r1
 8019372:	4629      	mov	r1, r5
 8019374:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	7c5b      	ldrb	r3, [r3, #17]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d005      	beq.n	801938a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801937e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019382:	4a14      	ldr	r2, [pc, #80]	; (80193d4 <RegionEU868RxConfig+0x198>)
 8019384:	5cd3      	ldrb	r3, [r2, r3]
 8019386:	75bb      	strb	r3, [r7, #22]
 8019388:	e004      	b.n	8019394 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801938a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801938e:	4a12      	ldr	r2, [pc, #72]	; (80193d8 <RegionEU868RxConfig+0x19c>)
 8019390:	5cd3      	ldrb	r3, [r2, r3]
 8019392:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8019394:	4b0b      	ldr	r3, [pc, #44]	; (80193c4 <RegionEU868RxConfig+0x188>)
 8019396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019398:	7dba      	ldrb	r2, [r7, #22]
 801939a:	320d      	adds	r2, #13
 801939c:	b2d1      	uxtb	r1, r2
 801939e:	7dfa      	ldrb	r2, [r7, #23]
 80193a0:	4610      	mov	r0, r2
 80193a2:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	7cdb      	ldrb	r3, [r3, #19]
 80193a8:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80193ac:	6939      	ldr	r1, [r7, #16]
 80193ae:	4618      	mov	r0, r3
 80193b0:	f7ff faaa 	bl	8018908 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80193b4:	683b      	ldr	r3, [r7, #0]
 80193b6:	7bfa      	ldrb	r2, [r7, #15]
 80193b8:	701a      	strb	r2, [r3, #0]
    return true;
 80193ba:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80193bc:	4618      	mov	r0, r3
 80193be:	3718      	adds	r7, #24
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bdb0      	pop	{r4, r5, r7, pc}
 80193c4:	0801f9f0 	.word	0x0801f9f0
 80193c8:	200016d4 	.word	0x200016d4
 80193cc:	0801f9b8 	.word	0x0801f9b8
 80193d0:	00014585 	.word	0x00014585
 80193d4:	0801f9e8 	.word	0x0801f9e8
 80193d8:	0801f9e0 	.word	0x0801f9e0

080193dc <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80193dc:	b590      	push	{r4, r7, lr}
 80193de:	b093      	sub	sp, #76	; 0x4c
 80193e0:	af0a      	add	r7, sp, #40	; 0x28
 80193e2:	60f8      	str	r0, [r7, #12]
 80193e4:	60b9      	str	r1, [r7, #8]
 80193e6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80193ee:	461a      	mov	r2, r3
 80193f0:	4b5d      	ldr	r3, [pc, #372]	; (8019568 <RegionEU868TxConfig+0x18c>)
 80193f2:	5c9b      	ldrb	r3, [r3, r2]
 80193f4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80193fc:	4b5b      	ldr	r3, [pc, #364]	; (801956c <RegionEU868TxConfig+0x190>)
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	4b5b      	ldr	r3, [pc, #364]	; (8019570 <RegionEU868TxConfig+0x194>)
 8019402:	6819      	ldr	r1, [r3, #0]
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	781b      	ldrb	r3, [r3, #0]
 8019408:	461c      	mov	r4, r3
 801940a:	4623      	mov	r3, r4
 801940c:	005b      	lsls	r3, r3, #1
 801940e:	4423      	add	r3, r4
 8019410:	009b      	lsls	r3, r3, #2
 8019412:	440b      	add	r3, r1
 8019414:	3309      	adds	r3, #9
 8019416:	781b      	ldrb	r3, [r3, #0]
 8019418:	4619      	mov	r1, r3
 801941a:	460b      	mov	r3, r1
 801941c:	005b      	lsls	r3, r3, #1
 801941e:	440b      	add	r3, r1
 8019420:	00db      	lsls	r3, r3, #3
 8019422:	4413      	add	r3, r2
 8019424:	3302      	adds	r3, #2
 8019426:	f993 3000 	ldrsb.w	r3, [r3]
 801942a:	4619      	mov	r1, r3
 801942c:	f7ff fa39 	bl	80188a2 <RegionCommonLimitTxPower>
 8019430:	4603      	mov	r3, r0
 8019432:	777b      	strb	r3, [r7, #29]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8019434:	68fb      	ldr	r3, [r7, #12]
 8019436:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801943a:	494e      	ldr	r1, [pc, #312]	; (8019574 <RegionEU868TxConfig+0x198>)
 801943c:	4618      	mov	r0, r3
 801943e:	f7ff fa45 	bl	80188cc <RegionCommonGetBandwidth>
 8019442:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8019444:	2300      	movs	r3, #0
 8019446:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	6859      	ldr	r1, [r3, #4]
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	689a      	ldr	r2, [r3, #8]
 8019450:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8019454:	4618      	mov	r0, r3
 8019456:	f7ff f895 	bl	8018584 <RegionCommonComputeTxPower>
 801945a:	4603      	mov	r3, r0
 801945c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801945e:	4b46      	ldr	r3, [pc, #280]	; (8019578 <RegionEU868TxConfig+0x19c>)
 8019460:	68da      	ldr	r2, [r3, #12]
 8019462:	4b43      	ldr	r3, [pc, #268]	; (8019570 <RegionEU868TxConfig+0x194>)
 8019464:	6819      	ldr	r1, [r3, #0]
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	781b      	ldrb	r3, [r3, #0]
 801946a:	4618      	mov	r0, r3
 801946c:	4603      	mov	r3, r0
 801946e:	005b      	lsls	r3, r3, #1
 8019470:	4403      	add	r3, r0
 8019472:	009b      	lsls	r3, r3, #2
 8019474:	440b      	add	r3, r1
 8019476:	681b      	ldr	r3, [r3, #0]
 8019478:	4618      	mov	r0, r3
 801947a:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019482:	2b07      	cmp	r3, #7
 8019484:	d124      	bne.n	80194d0 <RegionEU868TxConfig+0xf4>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8019486:	2300      	movs	r3, #0
 8019488:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801948a:	4b3b      	ldr	r3, [pc, #236]	; (8019578 <RegionEU868TxConfig+0x19c>)
 801948c:	69dc      	ldr	r4, [r3, #28]
 801948e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8019492:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8019496:	fb02 f303 	mul.w	r3, r2, r3
 801949a:	461a      	mov	r2, r3
 801949c:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194a0:	7ff8      	ldrb	r0, [r7, #31]
 80194a2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80194a6:	9308      	str	r3, [sp, #32]
 80194a8:	2300      	movs	r3, #0
 80194aa:	9307      	str	r3, [sp, #28]
 80194ac:	2300      	movs	r3, #0
 80194ae:	9306      	str	r3, [sp, #24]
 80194b0:	2300      	movs	r3, #0
 80194b2:	9305      	str	r3, [sp, #20]
 80194b4:	2301      	movs	r3, #1
 80194b6:	9304      	str	r3, [sp, #16]
 80194b8:	2300      	movs	r3, #0
 80194ba:	9303      	str	r3, [sp, #12]
 80194bc:	2305      	movs	r3, #5
 80194be:	9302      	str	r3, [sp, #8]
 80194c0:	2300      	movs	r3, #0
 80194c2:	9301      	str	r3, [sp, #4]
 80194c4:	9200      	str	r2, [sp, #0]
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80194cc:	47a0      	blx	r4
 80194ce:	e01d      	b.n	801950c <RegionEU868TxConfig+0x130>
    }
    else
    {
        modem = MODEM_LORA;
 80194d0:	2301      	movs	r3, #1
 80194d2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80194d4:	4b28      	ldr	r3, [pc, #160]	; (8019578 <RegionEU868TxConfig+0x19c>)
 80194d6:	69dc      	ldr	r4, [r3, #28]
 80194d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80194dc:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80194e0:	7ff8      	ldrb	r0, [r7, #31]
 80194e2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80194e6:	9208      	str	r2, [sp, #32]
 80194e8:	2200      	movs	r2, #0
 80194ea:	9207      	str	r2, [sp, #28]
 80194ec:	2200      	movs	r2, #0
 80194ee:	9206      	str	r2, [sp, #24]
 80194f0:	2200      	movs	r2, #0
 80194f2:	9205      	str	r2, [sp, #20]
 80194f4:	2201      	movs	r2, #1
 80194f6:	9204      	str	r2, [sp, #16]
 80194f8:	2200      	movs	r2, #0
 80194fa:	9203      	str	r2, [sp, #12]
 80194fc:	2208      	movs	r2, #8
 80194fe:	9202      	str	r2, [sp, #8]
 8019500:	2201      	movs	r2, #1
 8019502:	9201      	str	r2, [sp, #4]
 8019504:	9300      	str	r3, [sp, #0]
 8019506:	69bb      	ldr	r3, [r7, #24]
 8019508:	2200      	movs	r2, #0
 801950a:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 801950c:	4b18      	ldr	r3, [pc, #96]	; (8019570 <RegionEU868TxConfig+0x194>)
 801950e:	681a      	ldr	r2, [r3, #0]
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	781b      	ldrb	r3, [r3, #0]
 8019514:	4619      	mov	r1, r3
 8019516:	460b      	mov	r3, r1
 8019518:	005b      	lsls	r3, r3, #1
 801951a:	440b      	add	r3, r1
 801951c:	009b      	lsls	r3, r3, #2
 801951e:	4413      	add	r3, r2
 8019520:	681a      	ldr	r2, [r3, #0]
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019528:	4619      	mov	r1, r3
 801952a:	4610      	mov	r0, r2
 801952c:	f7ff fa1e 	bl	801896c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8019536:	68fb      	ldr	r3, [r7, #12]
 8019538:	899b      	ldrh	r3, [r3, #12]
 801953a:	4619      	mov	r1, r3
 801953c:	4610      	mov	r0, r2
 801953e:	f7ff faa3 	bl	8018a88 <GetTimeOnAir>
 8019542:	4602      	mov	r2, r0
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8019548:	4b0b      	ldr	r3, [pc, #44]	; (8019578 <RegionEU868TxConfig+0x19c>)
 801954a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	8992      	ldrh	r2, [r2, #12]
 8019550:	b2d1      	uxtb	r1, r2
 8019552:	7ffa      	ldrb	r2, [r7, #31]
 8019554:	4610      	mov	r0, r2
 8019556:	4798      	blx	r3

    *txPower = txPowerLimited;
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	7f7a      	ldrb	r2, [r7, #29]
 801955c:	701a      	strb	r2, [r3, #0]
    return true;
 801955e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8019560:	4618      	mov	r0, r3
 8019562:	3724      	adds	r7, #36	; 0x24
 8019564:	46bd      	mov	sp, r7
 8019566:	bd90      	pop	{r4, r7, pc}
 8019568:	0801f9b8 	.word	0x0801f9b8
 801956c:	200016d0 	.word	0x200016d0
 8019570:	200016d4 	.word	0x200016d4
 8019574:	0801f9c0 	.word	0x0801f9c0
 8019578:	0801f9f0 	.word	0x0801f9f0

0801957c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801957c:	b590      	push	{r4, r7, lr}
 801957e:	b093      	sub	sp, #76	; 0x4c
 8019580:	af00      	add	r7, sp, #0
 8019582:	60f8      	str	r0, [r7, #12]
 8019584:	60b9      	str	r1, [r7, #8]
 8019586:	607a      	str	r2, [r7, #4]
 8019588:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801958a:	2307      	movs	r3, #7
 801958c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8019590:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019594:	2200      	movs	r2, #0
 8019596:	601a      	str	r2, [r3, #0]
 8019598:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801959a:	2300      	movs	r3, #0
 801959c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t bytesProcessed = 0;
 80195a0:	2300      	movs	r3, #0
 80195a2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    uint16_t chMask = 0;
 80195a6:	2300      	movs	r3, #0
 80195a8:	877b      	strh	r3, [r7, #58]	; 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80195aa:	e085      	b.n	80196b8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	685a      	ldr	r2, [r3, #4]
 80195b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80195b4:	4413      	add	r3, r2
 80195b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80195ba:	4611      	mov	r1, r2
 80195bc:	4618      	mov	r0, r3
 80195be:	f7fe fe29 	bl	8018214 <RegionCommonParseLinkAdrReq>
 80195c2:	4603      	mov	r3, r0
 80195c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

        if( nextIndex == 0 )
 80195c8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d07b      	beq.n	80196c8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80195d0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80195d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80195d8:	4413      	add	r3, r2
 80195da:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80195de:	2307      	movs	r3, #7
 80195e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80195e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195e8:	877b      	strh	r3, [r7, #58]	; 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80195ea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d109      	bne.n	8019606 <RegionEU868LinkAdrReq+0x8a>
 80195f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d106      	bne.n	8019606 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80195f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80195fc:	f023 0301 	bic.w	r3, r3, #1
 8019600:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8019604:	e058      	b.n	80196b8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8019606:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801960a:	2b00      	cmp	r3, #0
 801960c:	d003      	beq.n	8019616 <RegionEU868LinkAdrReq+0x9a>
 801960e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019612:	2b05      	cmp	r3, #5
 8019614:	d903      	bls.n	801961e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8019616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801961a:	2b06      	cmp	r3, #6
 801961c:	d906      	bls.n	801962c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801961e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019622:	f023 0301 	bic.w	r3, r3, #1
 8019626:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801962a:	e045      	b.n	80196b8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801962c:	2300      	movs	r3, #0
 801962e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8019632:	e03d      	b.n	80196b0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8019634:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8019638:	2b06      	cmp	r3, #6
 801963a:	d118      	bne.n	801966e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801963c:	4b5f      	ldr	r3, [pc, #380]	; (80197bc <RegionEU868LinkAdrReq+0x240>)
 801963e:	6819      	ldr	r1, [r3, #0]
 8019640:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8019644:	4613      	mov	r3, r2
 8019646:	005b      	lsls	r3, r3, #1
 8019648:	4413      	add	r3, r2
 801964a:	009b      	lsls	r3, r3, #2
 801964c:	440b      	add	r3, r1
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d028      	beq.n	80196a6 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8019654:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019658:	2201      	movs	r2, #1
 801965a:	fa02 f303 	lsl.w	r3, r2, r3
 801965e:	b21a      	sxth	r2, r3
 8019660:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019662:	b21b      	sxth	r3, r3
 8019664:	4313      	orrs	r3, r2
 8019666:	b21b      	sxth	r3, r3
 8019668:	b29b      	uxth	r3, r3
 801966a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801966c:	e01b      	b.n	80196a6 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801966e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019670:	461a      	mov	r2, r3
 8019672:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8019676:	fa42 f303 	asr.w	r3, r2, r3
 801967a:	f003 0301 	and.w	r3, r3, #1
 801967e:	2b00      	cmp	r3, #0
 8019680:	d011      	beq.n	80196a6 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8019682:	4b4e      	ldr	r3, [pc, #312]	; (80197bc <RegionEU868LinkAdrReq+0x240>)
 8019684:	6819      	ldr	r1, [r3, #0]
 8019686:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 801968a:	4613      	mov	r3, r2
 801968c:	005b      	lsls	r3, r3, #1
 801968e:	4413      	add	r3, r2
 8019690:	009b      	lsls	r3, r3, #2
 8019692:	440b      	add	r3, r1
 8019694:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8019696:	2b00      	cmp	r3, #0
 8019698:	d105      	bne.n	80196a6 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801969a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801969e:	f023 0301 	bic.w	r3, r3, #1
 80196a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80196a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196aa:	3301      	adds	r3, #1
 80196ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80196b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80196b4:	2b0f      	cmp	r3, #15
 80196b6:	d9bd      	bls.n	8019634 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80196b8:	68fb      	ldr	r3, [r7, #12]
 80196ba:	7a1b      	ldrb	r3, [r3, #8]
 80196bc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80196c0:	429a      	cmp	r2, r3
 80196c2:	f4ff af73 	bcc.w	80195ac <RegionEU868LinkAdrReq+0x30>
 80196c6:	e000      	b.n	80196ca <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80196c8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80196ca:	2302      	movs	r3, #2
 80196cc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	7a5b      	ldrb	r3, [r3, #9]
 80196d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80196d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80196dc:	4618      	mov	r0, r3
 80196de:	f7ff fa23 	bl	8018b28 <RegionEU868GetPhyParam>
 80196e2:	4603      	mov	r3, r0
 80196e4:	633b      	str	r3, [r7, #48]	; 0x30

    linkAdrVerifyParams.Status = status;
 80196e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80196ea:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80196ec:	68fb      	ldr	r3, [r7, #12]
 80196ee:	7a9b      	ldrb	r3, [r3, #10]
 80196f0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80196f2:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
 80196f6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80196f8:	f997 303e 	ldrsb.w	r3, [r7, #62]	; 0x3e
 80196fc:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80196fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8019702:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	f993 300b 	ldrsb.w	r3, [r3, #11]
 801970a:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8019712:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	7b5b      	ldrb	r3, [r3, #13]
 8019718:	b25b      	sxtb	r3, r3
 801971a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801971c:	2310      	movs	r3, #16
 801971e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8019720:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8019724:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8019726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019728:	b25b      	sxtb	r3, r3
 801972a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801972e:	2307      	movs	r3, #7
 8019730:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8019734:	4b21      	ldr	r3, [pc, #132]	; (80197bc <RegionEU868LinkAdrReq+0x240>)
 8019736:	681b      	ldr	r3, [r3, #0]
 8019738:	62bb      	str	r3, [r7, #40]	; 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801973a:	2307      	movs	r3, #7
 801973c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8019740:	2300      	movs	r3, #0
 8019742:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801974c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8019750:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8019754:	1c9a      	adds	r2, r3, #2
 8019756:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801975a:	1c59      	adds	r1, r3, #1
 801975c:	f107 0010 	add.w	r0, r7, #16
 8019760:	4623      	mov	r3, r4
 8019762:	f7fe fda8 	bl	80182b6 <RegionCommonLinkAdrReqVerifyParams>
 8019766:	4603      	mov	r3, r0
 8019768:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801976c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8019770:	2b07      	cmp	r3, #7
 8019772:	d10d      	bne.n	8019790 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8019774:	4b11      	ldr	r3, [pc, #68]	; (80197bc <RegionEU868LinkAdrReq+0x240>)
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 801977c:	220c      	movs	r2, #12
 801977e:	2100      	movs	r1, #0
 8019780:	4618      	mov	r0, r3
 8019782:	f000 fb83 	bl	8019e8c <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8019786:	4b0d      	ldr	r3, [pc, #52]	; (80197bc <RegionEU868LinkAdrReq+0x240>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801978c:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8019790:	f997 203d 	ldrsb.w	r2, [r7, #61]	; 0x3d
 8019794:	68bb      	ldr	r3, [r7, #8]
 8019796:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8019798:	f997 203e 	ldrsb.w	r2, [r7, #62]	; 0x3e
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80197a0:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80197a4:	683b      	ldr	r3, [r7, #0]
 80197a6:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80197a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80197aa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80197ae:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80197b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80197b4:	4618      	mov	r0, r3
 80197b6:	374c      	adds	r7, #76	; 0x4c
 80197b8:	46bd      	mov	sp, r7
 80197ba:	bd90      	pop	{r4, r7, pc}
 80197bc:	200016d4 	.word	0x200016d4

080197c0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80197c0:	b580      	push	{r7, lr}
 80197c2:	b084      	sub	sp, #16
 80197c4:	af00      	add	r7, sp, #0
 80197c6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80197c8:	2307      	movs	r3, #7
 80197ca:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80197cc:	2300      	movs	r3, #0
 80197ce:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	685b      	ldr	r3, [r3, #4]
 80197d4:	f107 020e 	add.w	r2, r7, #14
 80197d8:	4611      	mov	r1, r2
 80197da:	4618      	mov	r0, r3
 80197dc:	f7ff f8de 	bl	801899c <VerifyRfFreq>
 80197e0:	4603      	mov	r3, r0
 80197e2:	f083 0301 	eor.w	r3, r3, #1
 80197e6:	b2db      	uxtb	r3, r3
 80197e8:	2b00      	cmp	r3, #0
 80197ea:	d003      	beq.n	80197f4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80197ec:	7bfb      	ldrb	r3, [r7, #15]
 80197ee:	f023 0301 	bic.w	r3, r3, #1
 80197f2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f993 3000 	ldrsb.w	r3, [r3]
 80197fa:	2207      	movs	r2, #7
 80197fc:	2100      	movs	r1, #0
 80197fe:	4618      	mov	r0, r3
 8019800:	f7fe fb47 	bl	8017e92 <RegionCommonValueInRange>
 8019804:	4603      	mov	r3, r0
 8019806:	2b00      	cmp	r3, #0
 8019808:	d103      	bne.n	8019812 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 801980a:	7bfb      	ldrb	r3, [r7, #15]
 801980c:	f023 0302 	bic.w	r3, r3, #2
 8019810:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8019818:	2205      	movs	r2, #5
 801981a:	2100      	movs	r1, #0
 801981c:	4618      	mov	r0, r3
 801981e:	f7fe fb38 	bl	8017e92 <RegionCommonValueInRange>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d103      	bne.n	8019830 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8019828:	7bfb      	ldrb	r3, [r7, #15]
 801982a:	f023 0304 	bic.w	r3, r3, #4
 801982e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8019830:	7bfb      	ldrb	r3, [r7, #15]
}
 8019832:	4618      	mov	r0, r3
 8019834:	3710      	adds	r7, #16
 8019836:	46bd      	mov	sp, r7
 8019838:	bd80      	pop	{r7, pc}
	...

0801983c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b086      	sub	sp, #24
 8019840:	af00      	add	r7, sp, #0
 8019842:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019844:	2303      	movs	r3, #3
 8019846:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	681b      	ldr	r3, [r3, #0]
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	2b00      	cmp	r3, #0
 8019850:	d114      	bne.n	801987c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019858:	b2db      	uxtb	r3, r3
 801985a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801985c:	f107 0308 	add.w	r3, r7, #8
 8019860:	4618      	mov	r0, r3
 8019862:	f000 f9ff 	bl	8019c64 <RegionEU868ChannelsRemove>
 8019866:	4603      	mov	r3, r0
 8019868:	f083 0301 	eor.w	r3, r3, #1
 801986c:	b2db      	uxtb	r3, r3
 801986e:	2b00      	cmp	r3, #0
 8019870:	d03b      	beq.n	80198ea <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8019872:	7dfb      	ldrb	r3, [r7, #23]
 8019874:	f023 0303 	bic.w	r3, r3, #3
 8019878:	75fb      	strb	r3, [r7, #23]
 801987a:	e036      	b.n	80198ea <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8019888:	b2db      	uxtb	r3, r3
 801988a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801988c:	f107 030c 	add.w	r3, r7, #12
 8019890:	4618      	mov	r0, r3
 8019892:	f000 f945 	bl	8019b20 <RegionEU868ChannelAdd>
 8019896:	4603      	mov	r3, r0
 8019898:	2b06      	cmp	r3, #6
 801989a:	d820      	bhi.n	80198de <RegionEU868NewChannelReq+0xa2>
 801989c:	a201      	add	r2, pc, #4	; (adr r2, 80198a4 <RegionEU868NewChannelReq+0x68>)
 801989e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80198a2:	bf00      	nop
 80198a4:	080198e9 	.word	0x080198e9
 80198a8:	080198df 	.word	0x080198df
 80198ac:	080198df 	.word	0x080198df
 80198b0:	080198df 	.word	0x080198df
 80198b4:	080198c1 	.word	0x080198c1
 80198b8:	080198cb 	.word	0x080198cb
 80198bc:	080198d5 	.word	0x080198d5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80198c0:	7dfb      	ldrb	r3, [r7, #23]
 80198c2:	f023 0301 	bic.w	r3, r3, #1
 80198c6:	75fb      	strb	r3, [r7, #23]
                break;
 80198c8:	e00f      	b.n	80198ea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80198ca:	7dfb      	ldrb	r3, [r7, #23]
 80198cc:	f023 0302 	bic.w	r3, r3, #2
 80198d0:	75fb      	strb	r3, [r7, #23]
                break;
 80198d2:	e00a      	b.n	80198ea <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80198d4:	7dfb      	ldrb	r3, [r7, #23]
 80198d6:	f023 0303 	bic.w	r3, r3, #3
 80198da:	75fb      	strb	r3, [r7, #23]
                break;
 80198dc:	e005      	b.n	80198ea <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80198de:	7dfb      	ldrb	r3, [r7, #23]
 80198e0:	f023 0303 	bic.w	r3, r3, #3
 80198e4:	75fb      	strb	r3, [r7, #23]
                break;
 80198e6:	e000      	b.n	80198ea <RegionEU868NewChannelReq+0xae>
                break;
 80198e8:	bf00      	nop
            }
        }
    }

    return status;
 80198ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	3718      	adds	r7, #24
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop

080198f8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80198f8:	b480      	push	{r7}
 80198fa:	b083      	sub	sp, #12
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8019900:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019904:	4618      	mov	r0, r3
 8019906:	370c      	adds	r7, #12
 8019908:	46bd      	mov	sp, r7
 801990a:	bc80      	pop	{r7}
 801990c:	4770      	bx	lr
	...

08019910 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8019910:	b580      	push	{r7, lr}
 8019912:	b084      	sub	sp, #16
 8019914:	af00      	add	r7, sp, #0
 8019916:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8019918:	2303      	movs	r3, #3
 801991a:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 801991c:	2300      	movs	r3, #0
 801991e:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	781b      	ldrb	r3, [r3, #0]
 8019924:	2b0f      	cmp	r3, #15
 8019926:	d901      	bls.n	801992c <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8019928:	2300      	movs	r3, #0
 801992a:	e035      	b.n	8019998 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	685b      	ldr	r3, [r3, #4]
 8019930:	f107 020e 	add.w	r2, r7, #14
 8019934:	4611      	mov	r1, r2
 8019936:	4618      	mov	r0, r3
 8019938:	f7ff f830 	bl	801899c <VerifyRfFreq>
 801993c:	4603      	mov	r3, r0
 801993e:	f083 0301 	eor.w	r3, r3, #1
 8019942:	b2db      	uxtb	r3, r3
 8019944:	2b00      	cmp	r3, #0
 8019946:	d003      	beq.n	8019950 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8019948:	7bfb      	ldrb	r3, [r7, #15]
 801994a:	f023 0301 	bic.w	r3, r3, #1
 801994e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8019950:	4b13      	ldr	r3, [pc, #76]	; (80199a0 <RegionEU868DlChannelReq+0x90>)
 8019952:	681a      	ldr	r2, [r3, #0]
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	781b      	ldrb	r3, [r3, #0]
 8019958:	4619      	mov	r1, r3
 801995a:	460b      	mov	r3, r1
 801995c:	005b      	lsls	r3, r3, #1
 801995e:	440b      	add	r3, r1
 8019960:	009b      	lsls	r3, r3, #2
 8019962:	4413      	add	r3, r2
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d103      	bne.n	8019972 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801996a:	7bfb      	ldrb	r3, [r7, #15]
 801996c:	f023 0302 	bic.w	r3, r3, #2
 8019970:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8019972:	7bfb      	ldrb	r3, [r7, #15]
 8019974:	2b03      	cmp	r3, #3
 8019976:	d10d      	bne.n	8019994 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8019978:	4b09      	ldr	r3, [pc, #36]	; (80199a0 <RegionEU868DlChannelReq+0x90>)
 801997a:	6819      	ldr	r1, [r3, #0]
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	781b      	ldrb	r3, [r3, #0]
 8019980:	4618      	mov	r0, r3
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	685a      	ldr	r2, [r3, #4]
 8019986:	4603      	mov	r3, r0
 8019988:	005b      	lsls	r3, r3, #1
 801998a:	4403      	add	r3, r0
 801998c:	009b      	lsls	r3, r3, #2
 801998e:	440b      	add	r3, r1
 8019990:	3304      	adds	r3, #4
 8019992:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8019994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019998:	4618      	mov	r0, r3
 801999a:	3710      	adds	r7, #16
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}
 80199a0:	200016d4 	.word	0x200016d4

080199a4 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80199a4:	b480      	push	{r7}
 80199a6:	b083      	sub	sp, #12
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	4603      	mov	r3, r0
 80199ac:	460a      	mov	r2, r1
 80199ae:	71fb      	strb	r3, [r7, #7]
 80199b0:	4613      	mov	r3, r2
 80199b2:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 80199b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	370c      	adds	r7, #12
 80199bc:	46bd      	mov	sp, r7
 80199be:	bc80      	pop	{r7}
 80199c0:	4770      	bx	lr
	...

080199c4 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80199c4:	b580      	push	{r7, lr}
 80199c6:	b09a      	sub	sp, #104	; 0x68
 80199c8:	af02      	add	r7, sp, #8
 80199ca:	60f8      	str	r0, [r7, #12]
 80199cc:	60b9      	str	r1, [r7, #8]
 80199ce:	607a      	str	r2, [r7, #4]
 80199d0:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80199d2:	2300      	movs	r3, #0
 80199d4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    uint8_t nbRestrictedChannels = 0;
 80199d8:	2300      	movs	r3, #0
 80199da:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80199de:	2300      	movs	r3, #0
 80199e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80199e2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80199e6:	2200      	movs	r2, #0
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	605a      	str	r2, [r3, #4]
 80199ec:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80199ee:	230c      	movs	r3, #12
 80199f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80199f4:	2307      	movs	r3, #7
 80199f6:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80199f8:	4b47      	ldr	r3, [pc, #284]	; (8019b18 <RegionEU868NextChannel+0x154>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a00:	2201      	movs	r2, #1
 8019a02:	2100      	movs	r1, #0
 8019a04:	4618      	mov	r0, r3
 8019a06:	f7fe fa95 	bl	8017f34 <RegionCommonCountChannels>
 8019a0a:	4603      	mov	r3, r0
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	d10a      	bne.n	8019a26 <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019a10:	4b41      	ldr	r3, [pc, #260]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019a12:	681b      	ldr	r3, [r3, #0]
 8019a14:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019a18:	4b3f      	ldr	r3, [pc, #252]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	f042 0207 	orr.w	r2, r2, #7
 8019a20:	b292      	uxth	r2, r2
 8019a22:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	7a5b      	ldrb	r3, [r3, #9]
 8019a2a:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8019a32:	b2db      	uxtb	r3, r3
 8019a34:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8019a36:	4b38      	ldr	r3, [pc, #224]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019a3e:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8019a40:	4b35      	ldr	r3, [pc, #212]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 8019a46:	4b35      	ldr	r3, [pc, #212]	; (8019b1c <RegionEU868NextChannel+0x158>)
 8019a48:	681b      	ldr	r3, [r3, #0]
 8019a4a:	623b      	str	r3, [r7, #32]
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8019a4c:	2310      	movs	r3, #16
 8019a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8019a50:	f107 0312 	add.w	r3, r7, #18
 8019a54:	62bb      	str	r3, [r7, #40]	; 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	681b      	ldr	r3, [r3, #0]
 8019a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	685b      	ldr	r3, [r3, #4]
 8019a60:	633b      	str	r3, [r7, #48]	; 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8019a62:	68fb      	ldr	r3, [r7, #12]
 8019a64:	7a9b      	ldrb	r3, [r3, #10]
 8019a66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8019a6a:	2306      	movs	r3, #6
 8019a6c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8019a70:	68fa      	ldr	r2, [r7, #12]
 8019a72:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8019a76:	320c      	adds	r2, #12
 8019a78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019a7c:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	7d1b      	ldrb	r3, [r3, #20]
 8019a84:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	8adb      	ldrh	r3, [r3, #22]
 8019a92:	4619      	mov	r1, r3
 8019a94:	4610      	mov	r0, r2
 8019a96:	f7fe fff7 	bl	8018a88 <GetTimeOnAir>
 8019a9a:	4603      	mov	r3, r0
 8019a9c:	647b      	str	r3, [r7, #68]	; 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8019a9e:	f107 0314 	add.w	r3, r7, #20
 8019aa2:	64bb      	str	r3, [r7, #72]	; 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8019aa4:	f107 015e 	add.w	r1, r7, #94	; 0x5e
 8019aa8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8019aac:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	9301      	str	r3, [sp, #4]
 8019ab4:	f107 035d 	add.w	r3, r7, #93	; 0x5d
 8019ab8:	9300      	str	r3, [sp, #0]
 8019aba:	460b      	mov	r3, r1
 8019abc:	6839      	ldr	r1, [r7, #0]
 8019abe:	f7fe fe50 	bl	8018762 <RegionCommonIdentifyChannels>
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8019ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d10e      	bne.n	8019aee <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8019ad0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8019ad4:	3b01      	subs	r3, #1
 8019ad6:	4619      	mov	r1, r3
 8019ad8:	2000      	movs	r0, #0
 8019ada:	f000 f985 	bl	8019de8 <randr>
 8019ade:	4603      	mov	r3, r0
 8019ae0:	3360      	adds	r3, #96	; 0x60
 8019ae2:	443b      	add	r3, r7
 8019ae4:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8019ae8:	68bb      	ldr	r3, [r7, #8]
 8019aea:	701a      	strb	r2, [r3, #0]
 8019aec:	e00e      	b.n	8019b0c <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8019aee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8019af2:	2b0c      	cmp	r3, #12
 8019af4:	d10a      	bne.n	8019b0c <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8019af6:	4b08      	ldr	r3, [pc, #32]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	f8b3 2480 	ldrh.w	r2, [r3, #1152]	; 0x480
 8019afe:	4b06      	ldr	r3, [pc, #24]	; (8019b18 <RegionEU868NextChannel+0x154>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	f042 0207 	orr.w	r2, r2, #7
 8019b06:	b292      	uxth	r2, r2
 8019b08:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    }
    return status;
 8019b0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3760      	adds	r7, #96	; 0x60
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}
 8019b18:	200016d4 	.word	0x200016d4
 8019b1c:	200016d0 	.word	0x200016d0

08019b20 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b084      	sub	sp, #16
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8019b30:	2300      	movs	r3, #0
 8019b32:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8019b34:	687b      	ldr	r3, [r7, #4]
 8019b36:	791b      	ldrb	r3, [r3, #4]
 8019b38:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019b3a:	7b7b      	ldrb	r3, [r7, #13]
 8019b3c:	2b02      	cmp	r3, #2
 8019b3e:	d801      	bhi.n	8019b44 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019b40:	2306      	movs	r3, #6
 8019b42:	e089      	b.n	8019c58 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8019b44:	7b7b      	ldrb	r3, [r7, #13]
 8019b46:	2b0f      	cmp	r3, #15
 8019b48:	d901      	bls.n	8019b4e <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8019b4a:	2303      	movs	r3, #3
 8019b4c:	e084      	b.n	8019c58 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	7a1b      	ldrb	r3, [r3, #8]
 8019b54:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b58:	b25b      	sxtb	r3, r3
 8019b5a:	2207      	movs	r2, #7
 8019b5c:	2100      	movs	r1, #0
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7fe f997 	bl	8017e92 <RegionCommonValueInRange>
 8019b64:	4603      	mov	r3, r0
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d101      	bne.n	8019b6e <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8019b6a:	2301      	movs	r3, #1
 8019b6c:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	681b      	ldr	r3, [r3, #0]
 8019b72:	7a1b      	ldrb	r3, [r3, #8]
 8019b74:	f343 1303 	sbfx	r3, r3, #4, #4
 8019b78:	b25b      	sxtb	r3, r3
 8019b7a:	2207      	movs	r2, #7
 8019b7c:	2100      	movs	r1, #0
 8019b7e:	4618      	mov	r0, r3
 8019b80:	f7fe f987 	bl	8017e92 <RegionCommonValueInRange>
 8019b84:	4603      	mov	r3, r0
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d101      	bne.n	8019b8e <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8019b8a:	2301      	movs	r3, #1
 8019b8c:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	681b      	ldr	r3, [r3, #0]
 8019b92:	7a1b      	ldrb	r3, [r3, #8]
 8019b94:	f343 0303 	sbfx	r3, r3, #0, #4
 8019b98:	b25a      	sxtb	r2, r3
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	681b      	ldr	r3, [r3, #0]
 8019b9e:	7a1b      	ldrb	r3, [r3, #8]
 8019ba0:	f343 1303 	sbfx	r3, r3, #4, #4
 8019ba4:	b25b      	sxtb	r3, r3
 8019ba6:	429a      	cmp	r2, r3
 8019ba8:	dd01      	ble.n	8019bae <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8019baa:	2301      	movs	r3, #1
 8019bac:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8019bae:	7bbb      	ldrb	r3, [r7, #14]
 8019bb0:	f083 0301 	eor.w	r3, r3, #1
 8019bb4:	b2db      	uxtb	r3, r3
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d010      	beq.n	8019bdc <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	f107 020c 	add.w	r2, r7, #12
 8019bc4:	4611      	mov	r1, r2
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7fe fee8 	bl	801899c <VerifyRfFreq>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	f083 0301 	eor.w	r3, r3, #1
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d001      	beq.n	8019bdc <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8019bdc:	7bfb      	ldrb	r3, [r7, #15]
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d004      	beq.n	8019bec <RegionEU868ChannelAdd+0xcc>
 8019be2:	7bbb      	ldrb	r3, [r7, #14]
 8019be4:	2b00      	cmp	r3, #0
 8019be6:	d001      	beq.n	8019bec <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8019be8:	2306      	movs	r3, #6
 8019bea:	e035      	b.n	8019c58 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8019bec:	7bfb      	ldrb	r3, [r7, #15]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	d001      	beq.n	8019bf6 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8019bf2:	2305      	movs	r3, #5
 8019bf4:	e030      	b.n	8019c58 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8019bf6:	7bbb      	ldrb	r3, [r7, #14]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d001      	beq.n	8019c00 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8019bfc:	2304      	movs	r3, #4
 8019bfe:	e02b      	b.n	8019c58 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8019c00:	4b17      	ldr	r3, [pc, #92]	; (8019c60 <RegionEU868ChannelAdd+0x140>)
 8019c02:	6819      	ldr	r1, [r3, #0]
 8019c04:	7b7a      	ldrb	r2, [r7, #13]
 8019c06:	4613      	mov	r3, r2
 8019c08:	005b      	lsls	r3, r3, #1
 8019c0a:	4413      	add	r3, r2
 8019c0c:	009b      	lsls	r3, r3, #2
 8019c0e:	18c8      	adds	r0, r1, r3
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	681b      	ldr	r3, [r3, #0]
 8019c14:	220c      	movs	r2, #12
 8019c16:	4619      	mov	r1, r3
 8019c18:	f000 f8fd 	bl	8019e16 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8019c1c:	4b10      	ldr	r3, [pc, #64]	; (8019c60 <RegionEU868ChannelAdd+0x140>)
 8019c1e:	6819      	ldr	r1, [r3, #0]
 8019c20:	7b7a      	ldrb	r2, [r7, #13]
 8019c22:	7b38      	ldrb	r0, [r7, #12]
 8019c24:	4613      	mov	r3, r2
 8019c26:	005b      	lsls	r3, r3, #1
 8019c28:	4413      	add	r3, r2
 8019c2a:	009b      	lsls	r3, r3, #2
 8019c2c:	440b      	add	r3, r1
 8019c2e:	3309      	adds	r3, #9
 8019c30:	4602      	mov	r2, r0
 8019c32:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8019c34:	4b0a      	ldr	r3, [pc, #40]	; (8019c60 <RegionEU868ChannelAdd+0x140>)
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	f8b3 3480 	ldrh.w	r3, [r3, #1152]	; 0x480
 8019c3c:	b21a      	sxth	r2, r3
 8019c3e:	7b7b      	ldrb	r3, [r7, #13]
 8019c40:	2101      	movs	r1, #1
 8019c42:	fa01 f303 	lsl.w	r3, r1, r3
 8019c46:	b21b      	sxth	r3, r3
 8019c48:	4313      	orrs	r3, r2
 8019c4a:	b21a      	sxth	r2, r3
 8019c4c:	4b04      	ldr	r3, [pc, #16]	; (8019c60 <RegionEU868ChannelAdd+0x140>)
 8019c4e:	681b      	ldr	r3, [r3, #0]
 8019c50:	b292      	uxth	r2, r2
 8019c52:	f8a3 2480 	strh.w	r2, [r3, #1152]	; 0x480
    return LORAMAC_STATUS_OK;
 8019c56:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3710      	adds	r7, #16
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}
 8019c60:	200016d4 	.word	0x200016d4

08019c64 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8019c64:	b580      	push	{r7, lr}
 8019c66:	b086      	sub	sp, #24
 8019c68:	af00      	add	r7, sp, #0
 8019c6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8019c6c:	687b      	ldr	r3, [r7, #4]
 8019c6e:	781b      	ldrb	r3, [r3, #0]
 8019c70:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8019c72:	7dfb      	ldrb	r3, [r7, #23]
 8019c74:	2b02      	cmp	r3, #2
 8019c76:	d801      	bhi.n	8019c7c <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8019c78:	2300      	movs	r3, #0
 8019c7a:	e016      	b.n	8019caa <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8019c7c:	4b0d      	ldr	r3, [pc, #52]	; (8019cb4 <RegionEU868ChannelsRemove+0x50>)
 8019c7e:	6819      	ldr	r1, [r3, #0]
 8019c80:	7dfa      	ldrb	r2, [r7, #23]
 8019c82:	4613      	mov	r3, r2
 8019c84:	005b      	lsls	r3, r3, #1
 8019c86:	4413      	add	r3, r2
 8019c88:	009b      	lsls	r3, r3, #2
 8019c8a:	440b      	add	r3, r1
 8019c8c:	461a      	mov	r2, r3
 8019c8e:	2300      	movs	r3, #0
 8019c90:	6013      	str	r3, [r2, #0]
 8019c92:	6053      	str	r3, [r2, #4]
 8019c94:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8019c96:	4b07      	ldr	r3, [pc, #28]	; (8019cb4 <RegionEU868ChannelsRemove+0x50>)
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 8019c9e:	7df9      	ldrb	r1, [r7, #23]
 8019ca0:	2210      	movs	r2, #16
 8019ca2:	4618      	mov	r0, r3
 8019ca4:	f7fe f912 	bl	8017ecc <RegionCommonChanDisable>
 8019ca8:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3718      	adds	r7, #24
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	200016d4 	.word	0x200016d4

08019cb8 <RegionEU868SetContinuousWave>:

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 8019cb8:	b590      	push	{r4, r7, lr}
 8019cba:	b085      	sub	sp, #20
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8019cc6:	4b20      	ldr	r3, [pc, #128]	; (8019d48 <RegionEU868SetContinuousWave+0x90>)
 8019cc8:	681a      	ldr	r2, [r3, #0]
 8019cca:	4b20      	ldr	r3, [pc, #128]	; (8019d4c <RegionEU868SetContinuousWave+0x94>)
 8019ccc:	6819      	ldr	r1, [r3, #0]
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	781b      	ldrb	r3, [r3, #0]
 8019cd2:	461c      	mov	r4, r3
 8019cd4:	4623      	mov	r3, r4
 8019cd6:	005b      	lsls	r3, r3, #1
 8019cd8:	4423      	add	r3, r4
 8019cda:	009b      	lsls	r3, r3, #2
 8019cdc:	440b      	add	r3, r1
 8019cde:	3309      	adds	r3, #9
 8019ce0:	781b      	ldrb	r3, [r3, #0]
 8019ce2:	4619      	mov	r1, r3
 8019ce4:	460b      	mov	r3, r1
 8019ce6:	005b      	lsls	r3, r3, #1
 8019ce8:	440b      	add	r3, r1
 8019cea:	00db      	lsls	r3, r3, #3
 8019cec:	4413      	add	r3, r2
 8019cee:	3302      	adds	r3, #2
 8019cf0:	f993 3000 	ldrsb.w	r3, [r3]
 8019cf4:	4619      	mov	r1, r3
 8019cf6:	f7fe fdd4 	bl	80188a2 <RegionCommonLimitTxPower>
 8019cfa:	4603      	mov	r3, r0
 8019cfc:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 8019d02:	4b12      	ldr	r3, [pc, #72]	; (8019d4c <RegionEU868SetContinuousWave+0x94>)
 8019d04:	681a      	ldr	r2, [r3, #0]
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	781b      	ldrb	r3, [r3, #0]
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	460b      	mov	r3, r1
 8019d0e:	005b      	lsls	r3, r3, #1
 8019d10:	440b      	add	r3, r1
 8019d12:	009b      	lsls	r3, r3, #2
 8019d14:	4413      	add	r3, r2
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	60bb      	str	r3, [r7, #8]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	6859      	ldr	r1, [r3, #4]
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	689a      	ldr	r2, [r3, #8]
 8019d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d26:	4618      	mov	r0, r3
 8019d28:	f7fe fc2c 	bl	8018584 <RegionCommonComputeTxPower>
 8019d2c:	4603      	mov	r3, r0
 8019d2e:	73bb      	strb	r3, [r7, #14]

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 8019d30:	4b07      	ldr	r3, [pc, #28]	; (8019d50 <RegionEU868SetContinuousWave+0x98>)
 8019d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d34:	687a      	ldr	r2, [r7, #4]
 8019d36:	8992      	ldrh	r2, [r2, #12]
 8019d38:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8019d3c:	68b8      	ldr	r0, [r7, #8]
 8019d3e:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 8019d40:	bf00      	nop
 8019d42:	3714      	adds	r7, #20
 8019d44:	46bd      	mov	sp, r7
 8019d46:	bd90      	pop	{r4, r7, pc}
 8019d48:	200016d0 	.word	0x200016d0
 8019d4c:	200016d4 	.word	0x200016d4
 8019d50:	0801f9f0 	.word	0x0801f9f0

08019d54 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8019d54:	b480      	push	{r7}
 8019d56:	b085      	sub	sp, #20
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	71fb      	strb	r3, [r7, #7]
 8019d5e:	460b      	mov	r3, r1
 8019d60:	71bb      	strb	r3, [r7, #6]
 8019d62:	4613      	mov	r3, r2
 8019d64:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8019d66:	79ba      	ldrb	r2, [r7, #6]
 8019d68:	797b      	ldrb	r3, [r7, #5]
 8019d6a:	1ad3      	subs	r3, r2, r3
 8019d6c:	b2db      	uxtb	r3, r3
 8019d6e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8019d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	da01      	bge.n	8019d7c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8019d78:	2300      	movs	r3, #0
 8019d7a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8019d7c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8019d7e:	4618      	mov	r0, r3
 8019d80:	3714      	adds	r7, #20
 8019d82:	46bd      	mov	sp, r7
 8019d84:	bc80      	pop	{r7}
 8019d86:	4770      	bx	lr

08019d88 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8019d88:	b480      	push	{r7}
 8019d8a:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8019d8c:	4b0d      	ldr	r3, [pc, #52]	; (8019dc4 <rand1+0x3c>)
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	4a0d      	ldr	r2, [pc, #52]	; (8019dc8 <rand1+0x40>)
 8019d92:	fb02 f303 	mul.w	r3, r2, r3
 8019d96:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8019d9a:	3339      	adds	r3, #57	; 0x39
 8019d9c:	4a09      	ldr	r2, [pc, #36]	; (8019dc4 <rand1+0x3c>)
 8019d9e:	6013      	str	r3, [r2, #0]
 8019da0:	4b08      	ldr	r3, [pc, #32]	; (8019dc4 <rand1+0x3c>)
 8019da2:	681a      	ldr	r2, [r3, #0]
 8019da4:	2303      	movs	r3, #3
 8019da6:	fba3 1302 	umull	r1, r3, r3, r2
 8019daa:	1ad1      	subs	r1, r2, r3
 8019dac:	0849      	lsrs	r1, r1, #1
 8019dae:	440b      	add	r3, r1
 8019db0:	0f99      	lsrs	r1, r3, #30
 8019db2:	460b      	mov	r3, r1
 8019db4:	07db      	lsls	r3, r3, #31
 8019db6:	1a5b      	subs	r3, r3, r1
 8019db8:	1ad1      	subs	r1, r2, r3
 8019dba:	460b      	mov	r3, r1
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bc80      	pop	{r7}
 8019dc2:	4770      	bx	lr
 8019dc4:	20000144 	.word	0x20000144
 8019dc8:	41c64e6d 	.word	0x41c64e6d

08019dcc <srand1>:

void srand1( uint32_t seed )
{
 8019dcc:	b480      	push	{r7}
 8019dce:	b083      	sub	sp, #12
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
    next = seed;
 8019dd4:	4a03      	ldr	r2, [pc, #12]	; (8019de4 <srand1+0x18>)
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	6013      	str	r3, [r2, #0]
}
 8019dda:	bf00      	nop
 8019ddc:	370c      	adds	r7, #12
 8019dde:	46bd      	mov	sp, r7
 8019de0:	bc80      	pop	{r7}
 8019de2:	4770      	bx	lr
 8019de4:	20000144 	.word	0x20000144

08019de8 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	6078      	str	r0, [r7, #4]
 8019df0:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8019df2:	f7ff ffc9 	bl	8019d88 <rand1>
 8019df6:	4602      	mov	r2, r0
 8019df8:	6839      	ldr	r1, [r7, #0]
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	1acb      	subs	r3, r1, r3
 8019dfe:	3301      	adds	r3, #1
 8019e00:	fb92 f1f3 	sdiv	r1, r2, r3
 8019e04:	fb01 f303 	mul.w	r3, r1, r3
 8019e08:	1ad2      	subs	r2, r2, r3
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	4413      	add	r3, r2
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	3708      	adds	r7, #8
 8019e12:	46bd      	mov	sp, r7
 8019e14:	bd80      	pop	{r7, pc}

08019e16 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e16:	b480      	push	{r7}
 8019e18:	b085      	sub	sp, #20
 8019e1a:	af00      	add	r7, sp, #0
 8019e1c:	60f8      	str	r0, [r7, #12]
 8019e1e:	60b9      	str	r1, [r7, #8]
 8019e20:	4613      	mov	r3, r2
 8019e22:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8019e24:	e007      	b.n	8019e36 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8019e26:	68ba      	ldr	r2, [r7, #8]
 8019e28:	1c53      	adds	r3, r2, #1
 8019e2a:	60bb      	str	r3, [r7, #8]
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	1c59      	adds	r1, r3, #1
 8019e30:	60f9      	str	r1, [r7, #12]
 8019e32:	7812      	ldrb	r2, [r2, #0]
 8019e34:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e36:	88fb      	ldrh	r3, [r7, #6]
 8019e38:	1e5a      	subs	r2, r3, #1
 8019e3a:	80fa      	strh	r2, [r7, #6]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d1f2      	bne.n	8019e26 <memcpy1+0x10>
    }
}
 8019e40:	bf00      	nop
 8019e42:	bf00      	nop
 8019e44:	3714      	adds	r7, #20
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bc80      	pop	{r7}
 8019e4a:	4770      	bx	lr

08019e4c <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8019e4c:	b480      	push	{r7}
 8019e4e:	b085      	sub	sp, #20
 8019e50:	af00      	add	r7, sp, #0
 8019e52:	60f8      	str	r0, [r7, #12]
 8019e54:	60b9      	str	r1, [r7, #8]
 8019e56:	4613      	mov	r3, r2
 8019e58:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8019e5a:	88fb      	ldrh	r3, [r7, #6]
 8019e5c:	3b01      	subs	r3, #1
 8019e5e:	68fa      	ldr	r2, [r7, #12]
 8019e60:	4413      	add	r3, r2
 8019e62:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8019e64:	e007      	b.n	8019e76 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8019e66:	68ba      	ldr	r2, [r7, #8]
 8019e68:	1c53      	adds	r3, r2, #1
 8019e6a:	60bb      	str	r3, [r7, #8]
 8019e6c:	68fb      	ldr	r3, [r7, #12]
 8019e6e:	1e59      	subs	r1, r3, #1
 8019e70:	60f9      	str	r1, [r7, #12]
 8019e72:	7812      	ldrb	r2, [r2, #0]
 8019e74:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019e76:	88fb      	ldrh	r3, [r7, #6]
 8019e78:	1e5a      	subs	r2, r3, #1
 8019e7a:	80fa      	strh	r2, [r7, #6]
 8019e7c:	2b00      	cmp	r3, #0
 8019e7e:	d1f2      	bne.n	8019e66 <memcpyr+0x1a>
    }
}
 8019e80:	bf00      	nop
 8019e82:	bf00      	nop
 8019e84:	3714      	adds	r7, #20
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bc80      	pop	{r7}
 8019e8a:	4770      	bx	lr

08019e8c <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8019e8c:	b480      	push	{r7}
 8019e8e:	b083      	sub	sp, #12
 8019e90:	af00      	add	r7, sp, #0
 8019e92:	6078      	str	r0, [r7, #4]
 8019e94:	460b      	mov	r3, r1
 8019e96:	70fb      	strb	r3, [r7, #3]
 8019e98:	4613      	mov	r3, r2
 8019e9a:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8019e9c:	e004      	b.n	8019ea8 <memset1+0x1c>
    {
        *dst++ = value;
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	1c5a      	adds	r2, r3, #1
 8019ea2:	607a      	str	r2, [r7, #4]
 8019ea4:	78fa      	ldrb	r2, [r7, #3]
 8019ea6:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8019ea8:	883b      	ldrh	r3, [r7, #0]
 8019eaa:	1e5a      	subs	r2, r3, #1
 8019eac:	803a      	strh	r2, [r7, #0]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d1f5      	bne.n	8019e9e <memset1+0x12>
    }
}
 8019eb2:	bf00      	nop
 8019eb4:	bf00      	nop
 8019eb6:	370c      	adds	r7, #12
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bc80      	pop	{r7}
 8019ebc:	4770      	bx	lr
	...

08019ec0 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8019ec0:	b480      	push	{r7}
 8019ec2:	b085      	sub	sp, #20
 8019ec4:	af00      	add	r7, sp, #0
 8019ec6:	6078      	str	r0, [r7, #4]
 8019ec8:	460b      	mov	r3, r1
 8019eca:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8019ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ed0:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	2b00      	cmp	r3, #0
 8019ed6:	d101      	bne.n	8019edc <Crc32+0x1c>
    {
        return 0;
 8019ed8:	2300      	movs	r3, #0
 8019eda:	e026      	b.n	8019f2a <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8019edc:	2300      	movs	r3, #0
 8019ede:	817b      	strh	r3, [r7, #10]
 8019ee0:	e01d      	b.n	8019f1e <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8019ee2:	897b      	ldrh	r3, [r7, #10]
 8019ee4:	687a      	ldr	r2, [r7, #4]
 8019ee6:	4413      	add	r3, r2
 8019ee8:	781b      	ldrb	r3, [r3, #0]
 8019eea:	461a      	mov	r2, r3
 8019eec:	68fb      	ldr	r3, [r7, #12]
 8019eee:	4053      	eors	r3, r2
 8019ef0:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	813b      	strh	r3, [r7, #8]
 8019ef6:	e00c      	b.n	8019f12 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8019ef8:	68fb      	ldr	r3, [r7, #12]
 8019efa:	085a      	lsrs	r2, r3, #1
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	f003 0301 	and.w	r3, r3, #1
 8019f02:	425b      	negs	r3, r3
 8019f04:	490b      	ldr	r1, [pc, #44]	; (8019f34 <Crc32+0x74>)
 8019f06:	400b      	ands	r3, r1
 8019f08:	4053      	eors	r3, r2
 8019f0a:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8019f0c:	893b      	ldrh	r3, [r7, #8]
 8019f0e:	3301      	adds	r3, #1
 8019f10:	813b      	strh	r3, [r7, #8]
 8019f12:	893b      	ldrh	r3, [r7, #8]
 8019f14:	2b07      	cmp	r3, #7
 8019f16:	d9ef      	bls.n	8019ef8 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8019f18:	897b      	ldrh	r3, [r7, #10]
 8019f1a:	3301      	adds	r3, #1
 8019f1c:	817b      	strh	r3, [r7, #10]
 8019f1e:	897a      	ldrh	r2, [r7, #10]
 8019f20:	887b      	ldrh	r3, [r7, #2]
 8019f22:	429a      	cmp	r2, r3
 8019f24:	d3dd      	bcc.n	8019ee2 <Crc32+0x22>
        }
    }

    return ~crc;
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	43db      	mvns	r3, r3
}
 8019f2a:	4618      	mov	r0, r3
 8019f2c:	3714      	adds	r7, #20
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bc80      	pop	{r7}
 8019f32:	4770      	bx	lr
 8019f34:	edb88320 	.word	0xedb88320

08019f38 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b084      	sub	sp, #16
 8019f3c:	af02      	add	r7, sp, #8
 8019f3e:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8019f40:	4a24      	ldr	r2, [pc, #144]	; (8019fd4 <RadioInit+0x9c>)
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8019f46:	4b24      	ldr	r3, [pc, #144]	; (8019fd8 <RadioInit+0xa0>)
 8019f48:	2200      	movs	r2, #0
 8019f4a:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8019f4c:	4b22      	ldr	r3, [pc, #136]	; (8019fd8 <RadioInit+0xa0>)
 8019f4e:	2200      	movs	r2, #0
 8019f50:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8019f52:	4b21      	ldr	r3, [pc, #132]	; (8019fd8 <RadioInit+0xa0>)
 8019f54:	2200      	movs	r2, #0
 8019f56:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8019f58:	4b1f      	ldr	r3, [pc, #124]	; (8019fd8 <RadioInit+0xa0>)
 8019f5a:	2200      	movs	r2, #0
 8019f5c:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8019f5e:	481f      	ldr	r0, [pc, #124]	; (8019fdc <RadioInit+0xa4>)
 8019f60:	f001 ffc2 	bl	801bee8 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8019f64:	4b1c      	ldr	r3, [pc, #112]	; (8019fd8 <RadioInit+0xa0>)
 8019f66:	2200      	movs	r2, #0
 8019f68:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8019f6a:	4b1b      	ldr	r3, [pc, #108]	; (8019fd8 <RadioInit+0xa0>)
 8019f6c:	2200      	movs	r2, #0
 8019f6e:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8019f70:	f002 fa56 	bl	801c420 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8019f74:	2100      	movs	r1, #0
 8019f76:	2000      	movs	r0, #0
 8019f78:	f002 fe22 	bl	801cbc0 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8019f7c:	2204      	movs	r2, #4
 8019f7e:	2100      	movs	r1, #0
 8019f80:	2001      	movs	r0, #1
 8019f82:	f002 fbdf 	bl	801c744 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8019f86:	2300      	movs	r3, #0
 8019f88:	2200      	movs	r2, #0
 8019f8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019f8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8019f92:	f002 fb0f 	bl	801c5b4 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8019f96:	f000 fe99 	bl	801accc <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	9300      	str	r3, [sp, #0]
 8019f9e:	4b10      	ldr	r3, [pc, #64]	; (8019fe0 <RadioInit+0xa8>)
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8019fa6:	480f      	ldr	r0, [pc, #60]	; (8019fe4 <RadioInit+0xac>)
 8019fa8:	f004 f82c 	bl	801e004 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8019fac:	2300      	movs	r3, #0
 8019fae:	9300      	str	r3, [sp, #0]
 8019fb0:	4b0d      	ldr	r3, [pc, #52]	; (8019fe8 <RadioInit+0xb0>)
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8019fb8:	480c      	ldr	r0, [pc, #48]	; (8019fec <RadioInit+0xb4>)
 8019fba:	f004 f823 	bl	801e004 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8019fbe:	4809      	ldr	r0, [pc, #36]	; (8019fe4 <RadioInit+0xac>)
 8019fc0:	f004 f8c4 	bl	801e14c <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8019fc4:	4809      	ldr	r0, [pc, #36]	; (8019fec <RadioInit+0xb4>)
 8019fc6:	f004 f8c1 	bl	801e14c <UTIL_TIMER_Stop>
}
 8019fca:	bf00      	nop
 8019fcc:	3708      	adds	r7, #8
 8019fce:	46bd      	mov	sp, r7
 8019fd0:	bd80      	pop	{r7, pc}
 8019fd2:	bf00      	nop
 8019fd4:	200017d8 	.word	0x200017d8
 8019fd8:	200017dc 	.word	0x200017dc
 8019fdc:	0801b0c5 	.word	0x0801b0c5
 8019fe0:	0801b04d 	.word	0x0801b04d
 8019fe4:	20001838 	.word	0x20001838
 8019fe8:	0801b061 	.word	0x0801b061
 8019fec:	20001850 	.word	0x20001850

08019ff0 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8019ff0:	b580      	push	{r7, lr}
 8019ff2:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8019ff4:	f001 ffc0 	bl	801bf78 <SUBGRF_GetOperatingMode>
 8019ff8:	4603      	mov	r3, r0
 8019ffa:	2b07      	cmp	r3, #7
 8019ffc:	d00a      	beq.n	801a014 <RadioGetStatus+0x24>
 8019ffe:	2b07      	cmp	r3, #7
 801a000:	dc0a      	bgt.n	801a018 <RadioGetStatus+0x28>
 801a002:	2b04      	cmp	r3, #4
 801a004:	d002      	beq.n	801a00c <RadioGetStatus+0x1c>
 801a006:	2b05      	cmp	r3, #5
 801a008:	d002      	beq.n	801a010 <RadioGetStatus+0x20>
 801a00a:	e005      	b.n	801a018 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 801a00c:	2302      	movs	r3, #2
 801a00e:	e004      	b.n	801a01a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 801a010:	2301      	movs	r3, #1
 801a012:	e002      	b.n	801a01a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801a014:	2303      	movs	r3, #3
 801a016:	e000      	b.n	801a01a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 801a018:	2300      	movs	r3, #0
    }
}
 801a01a:	4618      	mov	r0, r3
 801a01c:	bd80      	pop	{r7, pc}
	...

0801a020 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b082      	sub	sp, #8
 801a024:	af00      	add	r7, sp, #0
 801a026:	4603      	mov	r3, r0
 801a028:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 801a02a:	4a2a      	ldr	r2, [pc, #168]	; (801a0d4 <RadioSetModem+0xb4>)
 801a02c:	79fb      	ldrb	r3, [r7, #7]
 801a02e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 801a030:	79fb      	ldrb	r3, [r7, #7]
 801a032:	4618      	mov	r0, r3
 801a034:	f003 f997 	bl	801d366 <RFW_SetRadioModem>
    switch( modem )
 801a038:	79fb      	ldrb	r3, [r7, #7]
 801a03a:	2b05      	cmp	r3, #5
 801a03c:	d80e      	bhi.n	801a05c <RadioSetModem+0x3c>
 801a03e:	a201      	add	r2, pc, #4	; (adr r2, 801a044 <RadioSetModem+0x24>)
 801a040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a044:	0801a06b 	.word	0x0801a06b
 801a048:	0801a079 	.word	0x0801a079
 801a04c:	0801a05d 	.word	0x0801a05d
 801a050:	0801a09f 	.word	0x0801a09f
 801a054:	0801a0ad 	.word	0x0801a0ad
 801a058:	0801a0bb 	.word	0x0801a0bb
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 801a05c:	2003      	movs	r0, #3
 801a05e:	f002 fb4b 	bl	801c6f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a062:	4b1c      	ldr	r3, [pc, #112]	; (801a0d4 <RadioSetModem+0xb4>)
 801a064:	2200      	movs	r2, #0
 801a066:	735a      	strb	r2, [r3, #13]
        break;
 801a068:	e02f      	b.n	801a0ca <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a06a:	2000      	movs	r0, #0
 801a06c:	f002 fb44 	bl	801c6f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a070:	4b18      	ldr	r3, [pc, #96]	; (801a0d4 <RadioSetModem+0xb4>)
 801a072:	2200      	movs	r2, #0
 801a074:	735a      	strb	r2, [r3, #13]
        break;
 801a076:	e028      	b.n	801a0ca <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801a078:	2001      	movs	r0, #1
 801a07a:	f002 fb3d 	bl	801c6f8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 801a07e:	4b15      	ldr	r3, [pc, #84]	; (801a0d4 <RadioSetModem+0xb4>)
 801a080:	7b5a      	ldrb	r2, [r3, #13]
 801a082:	4b14      	ldr	r3, [pc, #80]	; (801a0d4 <RadioSetModem+0xb4>)
 801a084:	7b1b      	ldrb	r3, [r3, #12]
 801a086:	429a      	cmp	r2, r3
 801a088:	d01e      	beq.n	801a0c8 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 801a08a:	4b12      	ldr	r3, [pc, #72]	; (801a0d4 <RadioSetModem+0xb4>)
 801a08c:	7b1a      	ldrb	r2, [r3, #12]
 801a08e:	4b11      	ldr	r3, [pc, #68]	; (801a0d4 <RadioSetModem+0xb4>)
 801a090:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 801a092:	4b10      	ldr	r3, [pc, #64]	; (801a0d4 <RadioSetModem+0xb4>)
 801a094:	7b5b      	ldrb	r3, [r3, #13]
 801a096:	4618      	mov	r0, r3
 801a098:	f000 ffa2 	bl	801afe0 <RadioSetPublicNetwork>
        }
        break;
 801a09c:	e014      	b.n	801a0c8 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a09e:	2002      	movs	r0, #2
 801a0a0:	f002 fb2a 	bl	801c6f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0a4:	4b0b      	ldr	r3, [pc, #44]	; (801a0d4 <RadioSetModem+0xb4>)
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	735a      	strb	r2, [r3, #13]
        break;
 801a0aa:	e00e      	b.n	801a0ca <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 801a0ac:	2002      	movs	r0, #2
 801a0ae:	f002 fb23 	bl	801c6f8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0b2:	4b08      	ldr	r3, [pc, #32]	; (801a0d4 <RadioSetModem+0xb4>)
 801a0b4:	2200      	movs	r2, #0
 801a0b6:	735a      	strb	r2, [r3, #13]
        break;
 801a0b8:	e007      	b.n	801a0ca <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 801a0ba:	2000      	movs	r0, #0
 801a0bc:	f002 fb1c 	bl	801c6f8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 801a0c0:	4b04      	ldr	r3, [pc, #16]	; (801a0d4 <RadioSetModem+0xb4>)
 801a0c2:	2200      	movs	r2, #0
 801a0c4:	735a      	strb	r2, [r3, #13]
        break;
 801a0c6:	e000      	b.n	801a0ca <RadioSetModem+0xaa>
        break;
 801a0c8:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 801a0ca:	bf00      	nop
 801a0cc:	3708      	adds	r7, #8
 801a0ce:	46bd      	mov	sp, r7
 801a0d0:	bd80      	pop	{r7, pc}
 801a0d2:	bf00      	nop
 801a0d4:	200017dc 	.word	0x200017dc

0801a0d8 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b082      	sub	sp, #8
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f002 fac3 	bl	801c66c <SUBGRF_SetRfFrequency>
}
 801a0e6:	bf00      	nop
 801a0e8:	3708      	adds	r7, #8
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd80      	pop	{r7, pc}

0801a0ee <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 801a0ee:	b580      	push	{r7, lr}
 801a0f0:	b090      	sub	sp, #64	; 0x40
 801a0f2:	af0a      	add	r7, sp, #40	; 0x28
 801a0f4:	60f8      	str	r0, [r7, #12]
 801a0f6:	60b9      	str	r1, [r7, #8]
 801a0f8:	603b      	str	r3, [r7, #0]
 801a0fa:	4613      	mov	r3, r2
 801a0fc:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 801a0fe:	2301      	movs	r3, #1
 801a100:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 801a102:	2300      	movs	r3, #0
 801a104:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 801a106:	2300      	movs	r3, #0
 801a108:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 801a10a:	f000 fdf2 	bl	801acf2 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 801a10e:	2000      	movs	r0, #0
 801a110:	f7ff ff86 	bl	801a020 <RadioSetModem>

    RadioSetChannel( freq );
 801a114:	68f8      	ldr	r0, [r7, #12]
 801a116:	f7ff ffdf 	bl	801a0d8 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 801a11a:	2301      	movs	r3, #1
 801a11c:	9309      	str	r3, [sp, #36]	; 0x24
 801a11e:	2300      	movs	r3, #0
 801a120:	9308      	str	r3, [sp, #32]
 801a122:	2300      	movs	r3, #0
 801a124:	9307      	str	r3, [sp, #28]
 801a126:	2300      	movs	r3, #0
 801a128:	9306      	str	r3, [sp, #24]
 801a12a:	2300      	movs	r3, #0
 801a12c:	9305      	str	r3, [sp, #20]
 801a12e:	2300      	movs	r3, #0
 801a130:	9304      	str	r3, [sp, #16]
 801a132:	2300      	movs	r3, #0
 801a134:	9303      	str	r3, [sp, #12]
 801a136:	2300      	movs	r3, #0
 801a138:	9302      	str	r3, [sp, #8]
 801a13a:	2303      	movs	r3, #3
 801a13c:	9301      	str	r3, [sp, #4]
 801a13e:	68bb      	ldr	r3, [r7, #8]
 801a140:	9300      	str	r3, [sp, #0]
 801a142:	2300      	movs	r3, #0
 801a144:	f44f 7216 	mov.w	r2, #600	; 0x258
 801a148:	68b9      	ldr	r1, [r7, #8]
 801a14a:	2000      	movs	r0, #0
 801a14c:	f000 f83c 	bl	801a1c8 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 801a150:	2000      	movs	r0, #0
 801a152:	f000 fdd5 	bl	801ad00 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801a156:	f000 ff71 	bl	801b03c <RadioGetWakeupTime>
 801a15a:	4603      	mov	r3, r0
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7e8 fcab 	bl	8002ab8 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801a162:	f004 f90d 	bl	801e380 <UTIL_TIMER_GetCurrentTime>
 801a166:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a168:	e00d      	b.n	801a186 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 801a16a:	2000      	movs	r0, #0
 801a16c:	f000 feb6 	bl	801aedc <RadioRssi>
 801a170:	4603      	mov	r3, r0
 801a172:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801a174:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a178:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a17c:	429a      	cmp	r2, r3
 801a17e:	dd02      	ble.n	801a186 <RadioIsChannelFree+0x98>
        {
            status = false;
 801a180:	2300      	movs	r3, #0
 801a182:	75fb      	strb	r3, [r7, #23]
            break;
 801a184:	e006      	b.n	801a194 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801a186:	6938      	ldr	r0, [r7, #16]
 801a188:	f004 f90c 	bl	801e3a4 <UTIL_TIMER_GetElapsedTime>
 801a18c:	4602      	mov	r2, r0
 801a18e:	683b      	ldr	r3, [r7, #0]
 801a190:	4293      	cmp	r3, r2
 801a192:	d8ea      	bhi.n	801a16a <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801a194:	f000 fdad 	bl	801acf2 <RadioStandby>

    return status;
 801a198:	7dfb      	ldrb	r3, [r7, #23]
}
 801a19a:	4618      	mov	r0, r3
 801a19c:	3718      	adds	r7, #24
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}

0801a1a2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801a1a2:	b580      	push	{r7, lr}
 801a1a4:	b082      	sub	sp, #8
 801a1a6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 801a1a8:	2300      	movs	r3, #0
 801a1aa:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801a1ac:	2300      	movs	r3, #0
 801a1ae:	2200      	movs	r2, #0
 801a1b0:	2100      	movs	r1, #0
 801a1b2:	2000      	movs	r0, #0
 801a1b4:	f002 f9fe 	bl	801c5b4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 801a1b8:	f001 ffaf 	bl	801c11a <SUBGRF_GetRandom>
 801a1bc:	6078      	str	r0, [r7, #4]

    return rnd;
 801a1be:	687b      	ldr	r3, [r7, #4]
}
 801a1c0:	4618      	mov	r0, r3
 801a1c2:	3708      	adds	r7, #8
 801a1c4:	46bd      	mov	sp, r7
 801a1c6:	bd80      	pop	{r7, pc}

0801a1c8 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 801a1c8:	b580      	push	{r7, lr}
 801a1ca:	b08a      	sub	sp, #40	; 0x28
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	60b9      	str	r1, [r7, #8]
 801a1d0:	607a      	str	r2, [r7, #4]
 801a1d2:	461a      	mov	r2, r3
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	73fb      	strb	r3, [r7, #15]
 801a1d8:	4613      	mov	r3, r2
 801a1da:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 801a1dc:	4ab9      	ldr	r2, [pc, #740]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a1de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1e2:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 801a1e4:	f003 f87d 	bl	801d2e2 <RFW_DeInit>
    if( rxContinuous == true )
 801a1e8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 801a1ec:	2b00      	cmp	r3, #0
 801a1ee:	d001      	beq.n	801a1f4 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 801a1f0:	2300      	movs	r3, #0
 801a1f2:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 801a1f4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d004      	beq.n	801a206 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 801a1fc:	4ab2      	ldr	r2, [pc, #712]	; (801a4c8 <RadioSetRxConfig+0x300>)
 801a1fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 801a202:	7013      	strb	r3, [r2, #0]
 801a204:	e002      	b.n	801a20c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 801a206:	4bb0      	ldr	r3, [pc, #704]	; (801a4c8 <RadioSetRxConfig+0x300>)
 801a208:	22ff      	movs	r2, #255	; 0xff
 801a20a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 801a20c:	7bfb      	ldrb	r3, [r7, #15]
 801a20e:	2b05      	cmp	r3, #5
 801a210:	d009      	beq.n	801a226 <RadioSetRxConfig+0x5e>
 801a212:	2b05      	cmp	r3, #5
 801a214:	f300 81d7 	bgt.w	801a5c6 <RadioSetRxConfig+0x3fe>
 801a218:	2b00      	cmp	r3, #0
 801a21a:	f000 80bf 	beq.w	801a39c <RadioSetRxConfig+0x1d4>
 801a21e:	2b01      	cmp	r3, #1
 801a220:	f000 8124 	beq.w	801a46c <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 801a224:	e1cf      	b.n	801a5c6 <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 801a226:	2001      	movs	r0, #1
 801a228:	f002 f8bc 	bl	801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a22c:	4ba5      	ldr	r3, [pc, #660]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a22e:	2200      	movs	r2, #0
 801a230:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a234:	4aa3      	ldr	r2, [pc, #652]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 801a23a:	4ba2      	ldr	r3, [pc, #648]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a23c:	2209      	movs	r2, #9
 801a23e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 801a242:	4ba0      	ldr	r3, [pc, #640]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a244:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a248:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a24a:	68b8      	ldr	r0, [r7, #8]
 801a24c:	f002 ff7c 	bl	801d148 <SUBGRF_GetFskBandwidthRegValue>
 801a250:	4603      	mov	r3, r0
 801a252:	461a      	mov	r2, r3
 801a254:	4b9b      	ldr	r3, [pc, #620]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a256:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a25a:	4b9a      	ldr	r3, [pc, #616]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a25c:	2200      	movs	r2, #0
 801a25e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a260:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a262:	00db      	lsls	r3, r3, #3
 801a264:	b29a      	uxth	r2, r3
 801a266:	4b97      	ldr	r3, [pc, #604]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a268:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 801a26a:	4b96      	ldr	r3, [pc, #600]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a26c:	2200      	movs	r2, #0
 801a26e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 801a270:	4b94      	ldr	r3, [pc, #592]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a272:	2210      	movs	r2, #16
 801a274:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a276:	4b93      	ldr	r3, [pc, #588]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a278:	2200      	movs	r2, #0
 801a27a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 801a27c:	4b91      	ldr	r3, [pc, #580]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a27e:	2200      	movs	r2, #0
 801a280:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a282:	4b91      	ldr	r3, [pc, #580]	; (801a4c8 <RadioSetRxConfig+0x300>)
 801a284:	781a      	ldrb	r2, [r3, #0]
 801a286:	4b8f      	ldr	r3, [pc, #572]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a288:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a28a:	4b8e      	ldr	r3, [pc, #568]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a28c:	2201      	movs	r2, #1
 801a28e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 801a290:	4b8c      	ldr	r3, [pc, #560]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a292:	2200      	movs	r2, #0
 801a294:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 801a296:	2005      	movs	r0, #5
 801a298:	f7ff fec2 	bl	801a020 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a29c:	488b      	ldr	r0, [pc, #556]	; (801a4cc <RadioSetRxConfig+0x304>)
 801a29e:	f002 fb1f 	bl	801c8e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a2a2:	488b      	ldr	r0, [pc, #556]	; (801a4d0 <RadioSetRxConfig+0x308>)
 801a2a4:	f002 fbee 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a2a8:	4a8a      	ldr	r2, [pc, #552]	; (801a4d4 <RadioSetRxConfig+0x30c>)
 801a2aa:	f107 031c 	add.w	r3, r7, #28
 801a2ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a2b2:	e883 0003 	stmia.w	r3, {r0, r1}
 801a2b6:	f107 031c 	add.w	r3, r7, #28
 801a2ba:	4618      	mov	r0, r3
 801a2bc:	f001 feab 	bl	801c016 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a2c0:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a2c4:	f001 fef6 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 801a2c8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2cc:	f000 fe25 	bl	801af1a <RadioRead>
 801a2d0:	4603      	mov	r3, r0
 801a2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 801a2d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2da:	f023 0310 	bic.w	r3, r3, #16
 801a2de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 801a2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a2e6:	4619      	mov	r1, r3
 801a2e8:	f640 00b8 	movw	r0, #2232	; 0x8b8
 801a2ec:	f000 fe03 	bl	801aef6 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 801a2f0:	2104      	movs	r1, #4
 801a2f2:	f640 00b9 	movw	r0, #2233	; 0x8b9
 801a2f6:	f000 fdfe 	bl	801aef6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 801a2fa:	f640 009b 	movw	r0, #2203	; 0x89b
 801a2fe:	f000 fe0c 	bl	801af1a <RadioRead>
 801a302:	4603      	mov	r3, r0
 801a304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a30c:	f023 031c 	bic.w	r3, r3, #28
 801a310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 801a314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a318:	f043 0308 	orr.w	r3, r3, #8
 801a31c:	b2db      	uxtb	r3, r3
 801a31e:	4619      	mov	r1, r3
 801a320:	f640 009b 	movw	r0, #2203	; 0x89b
 801a324:	f000 fde7 	bl	801aef6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 801a328:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a32c:	f000 fdf5 	bl	801af1a <RadioRead>
 801a330:	4603      	mov	r3, r0
 801a332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 801a336:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a33a:	f023 0318 	bic.w	r3, r3, #24
 801a33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 801a342:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a346:	f043 0318 	orr.w	r3, r3, #24
 801a34a:	b2db      	uxtb	r3, r3
 801a34c:	4619      	mov	r1, r3
 801a34e:	f240 60d1 	movw	r0, #1745	; 0x6d1
 801a352:	f000 fdd0 	bl	801aef6 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 801a356:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a35a:	f000 fdde 	bl	801af1a <RadioRead>
 801a35e:	4603      	mov	r3, r0
 801a360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 801a364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801a36c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 801a370:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a374:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801a378:	b2db      	uxtb	r3, r3
 801a37a:	4619      	mov	r1, r3
 801a37c:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801a380:	f000 fdb9 	bl	801aef6 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a384:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a386:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a38a:	fb02 f303 	mul.w	r3, r2, r3
 801a38e:	461a      	mov	r2, r3
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	fbb2 f3f3 	udiv	r3, r2, r3
 801a396:	4a4b      	ldr	r2, [pc, #300]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a398:	6093      	str	r3, [r2, #8]
            break;
 801a39a:	e115      	b.n	801a5c8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a39c:	2000      	movs	r0, #0
 801a39e:	f002 f801 	bl	801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a3a2:	4b48      	ldr	r3, [pc, #288]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a3aa:	4a46      	ldr	r2, [pc, #280]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a3b0:	4b44      	ldr	r3, [pc, #272]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3b2:	220b      	movs	r2, #11
 801a3b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a3b8:	68b8      	ldr	r0, [r7, #8]
 801a3ba:	f002 fec5 	bl	801d148 <SUBGRF_GetFskBandwidthRegValue>
 801a3be:	4603      	mov	r3, r0
 801a3c0:	461a      	mov	r2, r3
 801a3c2:	4b40      	ldr	r3, [pc, #256]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a3c8:	4b3e      	ldr	r3, [pc, #248]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a3ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a3d0:	00db      	lsls	r3, r3, #3
 801a3d2:	b29a      	uxth	r2, r3
 801a3d4:	4b3b      	ldr	r3, [pc, #236]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3d6:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a3d8:	4b3a      	ldr	r3, [pc, #232]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3da:	2204      	movs	r2, #4
 801a3dc:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 801a3de:	4b39      	ldr	r3, [pc, #228]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3e0:	2218      	movs	r2, #24
 801a3e2:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a3e4:	4b37      	ldr	r3, [pc, #220]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3e6:	2200      	movs	r2, #0
 801a3e8:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a3ea:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801a3ee:	f083 0301 	eor.w	r3, r3, #1
 801a3f2:	b2db      	uxtb	r3, r3
 801a3f4:	461a      	mov	r2, r3
 801a3f6:	4b33      	ldr	r3, [pc, #204]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a3f8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801a3fa:	4b33      	ldr	r3, [pc, #204]	; (801a4c8 <RadioSetRxConfig+0x300>)
 801a3fc:	781a      	ldrb	r2, [r3, #0]
 801a3fe:	4b31      	ldr	r3, [pc, #196]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a400:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801a402:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 801a406:	2b00      	cmp	r3, #0
 801a408:	d003      	beq.n	801a412 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a40a:	4b2e      	ldr	r3, [pc, #184]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a40c:	22f2      	movs	r2, #242	; 0xf2
 801a40e:	75da      	strb	r2, [r3, #23]
 801a410:	e002      	b.n	801a418 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a412:	4b2c      	ldr	r3, [pc, #176]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a414:	2201      	movs	r2, #1
 801a416:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a418:	4b2a      	ldr	r3, [pc, #168]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a41a:	2201      	movs	r2, #1
 801a41c:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a41e:	f000 fc68 	bl	801acf2 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801a422:	2000      	movs	r0, #0
 801a424:	f7ff fdfc 	bl	801a020 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a428:	4828      	ldr	r0, [pc, #160]	; (801a4cc <RadioSetRxConfig+0x304>)
 801a42a:	f002 fa59 	bl	801c8e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a42e:	4828      	ldr	r0, [pc, #160]	; (801a4d0 <RadioSetRxConfig+0x308>)
 801a430:	f002 fb28 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a434:	4a28      	ldr	r2, [pc, #160]	; (801a4d8 <RadioSetRxConfig+0x310>)
 801a436:	f107 0314 	add.w	r3, r7, #20
 801a43a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a43e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a442:	f107 0314 	add.w	r3, r7, #20
 801a446:	4618      	mov	r0, r3
 801a448:	f001 fde5 	bl	801c016 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a44c:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a450:	f001 fe30 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801a454:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a456:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801a45a:	fb02 f303 	mul.w	r3, r2, r3
 801a45e:	461a      	mov	r2, r3
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	fbb2 f3f3 	udiv	r3, r2, r3
 801a466:	4a17      	ldr	r2, [pc, #92]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a468:	6093      	str	r3, [r2, #8]
            break;
 801a46a:	e0ad      	b.n	801a5c8 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 801a46c:	2000      	movs	r0, #0
 801a46e:	f001 ff99 	bl	801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a472:	4b14      	ldr	r3, [pc, #80]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a474:	2201      	movs	r2, #1
 801a476:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 801a47a:	687b      	ldr	r3, [r7, #4]
 801a47c:	b2da      	uxtb	r2, r3
 801a47e:	4b11      	ldr	r3, [pc, #68]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 801a484:	4a15      	ldr	r2, [pc, #84]	; (801a4dc <RadioSetRxConfig+0x314>)
 801a486:	68bb      	ldr	r3, [r7, #8]
 801a488:	4413      	add	r3, r2
 801a48a:	781a      	ldrb	r2, [r3, #0]
 801a48c:	4b0d      	ldr	r3, [pc, #52]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a48e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 801a492:	4a0c      	ldr	r2, [pc, #48]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a494:	7bbb      	ldrb	r3, [r7, #14]
 801a496:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a49a:	68bb      	ldr	r3, [r7, #8]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d105      	bne.n	801a4ac <RadioSetRxConfig+0x2e4>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	2b0b      	cmp	r3, #11
 801a4a4:	d008      	beq.n	801a4b8 <RadioSetRxConfig+0x2f0>
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	2b0c      	cmp	r3, #12
 801a4aa:	d005      	beq.n	801a4b8 <RadioSetRxConfig+0x2f0>
 801a4ac:	68bb      	ldr	r3, [r7, #8]
 801a4ae:	2b01      	cmp	r3, #1
 801a4b0:	d116      	bne.n	801a4e0 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	2b0c      	cmp	r3, #12
 801a4b6:	d113      	bne.n	801a4e0 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a4b8:	4b02      	ldr	r3, [pc, #8]	; (801a4c4 <RadioSetRxConfig+0x2fc>)
 801a4ba:	2201      	movs	r2, #1
 801a4bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a4c0:	e012      	b.n	801a4e8 <RadioSetRxConfig+0x320>
 801a4c2:	bf00      	nop
 801a4c4:	200017dc 	.word	0x200017dc
 801a4c8:	20000148 	.word	0x20000148
 801a4cc:	20001814 	.word	0x20001814
 801a4d0:	200017ea 	.word	0x200017ea
 801a4d4:	0801f40c 	.word	0x0801f40c
 801a4d8:	0801f414 	.word	0x0801f414
 801a4dc:	0801fa7c 	.word	0x0801fa7c
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a4e0:	4b3b      	ldr	r3, [pc, #236]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a4e2:	2200      	movs	r2, #0
 801a4e4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a4e8:	4b39      	ldr	r3, [pc, #228]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4ee:	4b38      	ldr	r3, [pc, #224]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a4f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a4f4:	2b05      	cmp	r3, #5
 801a4f6:	d004      	beq.n	801a502 <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a4f8:	4b35      	ldr	r3, [pc, #212]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a4fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a4fe:	2b06      	cmp	r3, #6
 801a500:	d10a      	bne.n	801a518 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801a502:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a504:	2b0b      	cmp	r3, #11
 801a506:	d803      	bhi.n	801a510 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a508:	4b31      	ldr	r3, [pc, #196]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a50a:	220c      	movs	r2, #12
 801a50c:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a50e:	e006      	b.n	801a51e <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a510:	4a2f      	ldr	r2, [pc, #188]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a512:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a514:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a516:	e002      	b.n	801a51e <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a518:	4a2d      	ldr	r2, [pc, #180]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a51a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a51c:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a51e:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a522:	4b2b      	ldr	r3, [pc, #172]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a524:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a526:	4b2b      	ldr	r3, [pc, #172]	; (801a5d4 <RadioSetRxConfig+0x40c>)
 801a528:	781a      	ldrb	r2, [r3, #0]
 801a52a:	4b29      	ldr	r3, [pc, #164]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a52c:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a52e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 801a532:	4b27      	ldr	r3, [pc, #156]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a534:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a538:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 801a53c:	4b24      	ldr	r3, [pc, #144]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a53e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a542:	f000 fbd6 	bl	801acf2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a546:	2001      	movs	r0, #1
 801a548:	f7ff fd6a 	bl	801a020 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a54c:	4822      	ldr	r0, [pc, #136]	; (801a5d8 <RadioSetRxConfig+0x410>)
 801a54e:	f002 f9c7 	bl	801c8e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a552:	4822      	ldr	r0, [pc, #136]	; (801a5dc <RadioSetRxConfig+0x414>)
 801a554:	f002 fa96 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801a558:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801a55a:	b2db      	uxtb	r3, r3
 801a55c:	4618      	mov	r0, r3
 801a55e:	f001 ff30 	bl	801c3c2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801a562:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a566:	f002 fbe9 	bl	801cd3c <SUBGRF_ReadRegister>
 801a56a:	4603      	mov	r3, r0
 801a56c:	f003 0301 	and.w	r3, r3, #1
 801a570:	b2db      	uxtb	r3, r3
 801a572:	4619      	mov	r1, r3
 801a574:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801a578:	f002 fbcc 	bl	801cd14 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801a57c:	4b14      	ldr	r3, [pc, #80]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a57e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801a582:	2b01      	cmp	r3, #1
 801a584:	d10d      	bne.n	801a5a2 <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801a586:	f240 7036 	movw	r0, #1846	; 0x736
 801a58a:	f002 fbd7 	bl	801cd3c <SUBGRF_ReadRegister>
 801a58e:	4603      	mov	r3, r0
 801a590:	f023 0304 	bic.w	r3, r3, #4
 801a594:	b2db      	uxtb	r3, r3
 801a596:	4619      	mov	r1, r3
 801a598:	f240 7036 	movw	r0, #1846	; 0x736
 801a59c:	f002 fbba 	bl	801cd14 <SUBGRF_WriteRegister>
 801a5a0:	e00c      	b.n	801a5bc <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801a5a2:	f240 7036 	movw	r0, #1846	; 0x736
 801a5a6:	f002 fbc9 	bl	801cd3c <SUBGRF_ReadRegister>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	f043 0304 	orr.w	r3, r3, #4
 801a5b0:	b2db      	uxtb	r3, r3
 801a5b2:	4619      	mov	r1, r3
 801a5b4:	f240 7036 	movw	r0, #1846	; 0x736
 801a5b8:	f002 fbac 	bl	801cd14 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801a5bc:	4b04      	ldr	r3, [pc, #16]	; (801a5d0 <RadioSetRxConfig+0x408>)
 801a5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a5c2:	609a      	str	r2, [r3, #8]
            break;
 801a5c4:	e000      	b.n	801a5c8 <RadioSetRxConfig+0x400>
            break;
 801a5c6:	bf00      	nop
    }
}
 801a5c8:	bf00      	nop
 801a5ca:	3728      	adds	r7, #40	; 0x28
 801a5cc:	46bd      	mov	sp, r7
 801a5ce:	bd80      	pop	{r7, pc}
 801a5d0:	200017dc 	.word	0x200017dc
 801a5d4:	20000148 	.word	0x20000148
 801a5d8:	20001814 	.word	0x20001814
 801a5dc:	200017ea 	.word	0x200017ea

0801a5e0 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801a5e0:	b580      	push	{r7, lr}
 801a5e2:	b086      	sub	sp, #24
 801a5e4:	af00      	add	r7, sp, #0
 801a5e6:	60ba      	str	r2, [r7, #8]
 801a5e8:	607b      	str	r3, [r7, #4]
 801a5ea:	4603      	mov	r3, r0
 801a5ec:	73fb      	strb	r3, [r7, #15]
 801a5ee:	460b      	mov	r3, r1
 801a5f0:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801a5f2:	f002 fe76 	bl	801d2e2 <RFW_DeInit>
    switch( modem )
 801a5f6:	7bfb      	ldrb	r3, [r7, #15]
 801a5f8:	2b04      	cmp	r3, #4
 801a5fa:	f000 80c7 	beq.w	801a78c <RadioSetTxConfig+0x1ac>
 801a5fe:	2b04      	cmp	r3, #4
 801a600:	f300 80d6 	bgt.w	801a7b0 <RadioSetTxConfig+0x1d0>
 801a604:	2b00      	cmp	r3, #0
 801a606:	d002      	beq.n	801a60e <RadioSetTxConfig+0x2e>
 801a608:	2b01      	cmp	r3, #1
 801a60a:	d059      	beq.n	801a6c0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801a60c:	e0d0      	b.n	801a7b0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801a60e:	4b77      	ldr	r3, [pc, #476]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a610:	2200      	movs	r2, #0
 801a612:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801a616:	4a75      	ldr	r2, [pc, #468]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a618:	6a3b      	ldr	r3, [r7, #32]
 801a61a:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801a61c:	4b73      	ldr	r3, [pc, #460]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a61e:	220b      	movs	r2, #11
 801a620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f002 fd8f 	bl	801d148 <SUBGRF_GetFskBandwidthRegValue>
 801a62a:	4603      	mov	r3, r0
 801a62c:	461a      	mov	r2, r3
 801a62e:	4b6f      	ldr	r3, [pc, #444]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 801a634:	4a6d      	ldr	r2, [pc, #436]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a636:	68bb      	ldr	r3, [r7, #8]
 801a638:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801a63a:	4b6c      	ldr	r3, [pc, #432]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a63c:	2200      	movs	r2, #0
 801a63e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801a640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a642:	00db      	lsls	r3, r3, #3
 801a644:	b29a      	uxth	r2, r3
 801a646:	4b69      	ldr	r3, [pc, #420]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a648:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801a64a:	4b68      	ldr	r3, [pc, #416]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a64c:	2204      	movs	r2, #4
 801a64e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 801a650:	4b66      	ldr	r3, [pc, #408]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a652:	2218      	movs	r2, #24
 801a654:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801a656:	4b65      	ldr	r3, [pc, #404]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a658:	2200      	movs	r2, #0
 801a65a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801a65c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801a660:	f083 0301 	eor.w	r3, r3, #1
 801a664:	b2db      	uxtb	r3, r3
 801a666:	461a      	mov	r2, r3
 801a668:	4b60      	ldr	r3, [pc, #384]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a66a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801a66c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 801a670:	2b00      	cmp	r3, #0
 801a672:	d003      	beq.n	801a67c <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801a674:	4b5d      	ldr	r3, [pc, #372]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a676:	22f2      	movs	r2, #242	; 0xf2
 801a678:	75da      	strb	r2, [r3, #23]
 801a67a:	e002      	b.n	801a682 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801a67c:	4b5b      	ldr	r3, [pc, #364]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a67e:	2201      	movs	r2, #1
 801a680:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801a682:	4b5a      	ldr	r3, [pc, #360]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a684:	2201      	movs	r2, #1
 801a686:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 801a688:	f000 fb33 	bl	801acf2 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 801a68c:	2000      	movs	r0, #0
 801a68e:	f7ff fcc7 	bl	801a020 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a692:	4857      	ldr	r0, [pc, #348]	; (801a7f0 <RadioSetTxConfig+0x210>)
 801a694:	f002 f924 	bl	801c8e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a698:	4856      	ldr	r0, [pc, #344]	; (801a7f4 <RadioSetTxConfig+0x214>)
 801a69a:	f002 f9f3 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801a69e:	4a56      	ldr	r2, [pc, #344]	; (801a7f8 <RadioSetTxConfig+0x218>)
 801a6a0:	f107 0310 	add.w	r3, r7, #16
 801a6a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a6a8:	e883 0003 	stmia.w	r3, {r0, r1}
 801a6ac:	f107 0310 	add.w	r3, r7, #16
 801a6b0:	4618      	mov	r0, r3
 801a6b2:	f001 fcb0 	bl	801c016 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801a6b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 801a6ba:	f001 fcfb 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
            break;
 801a6be:	e078      	b.n	801a7b2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801a6c0:	4b4a      	ldr	r3, [pc, #296]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a6c2:	2201      	movs	r2, #1
 801a6c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 801a6c8:	6a3b      	ldr	r3, [r7, #32]
 801a6ca:	b2da      	uxtb	r2, r3
 801a6cc:	4b47      	ldr	r3, [pc, #284]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a6ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801a6d2:	4a4a      	ldr	r2, [pc, #296]	; (801a7fc <RadioSetTxConfig+0x21c>)
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	4413      	add	r3, r2
 801a6d8:	781a      	ldrb	r2, [r3, #0]
 801a6da:	4b44      	ldr	r3, [pc, #272]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a6dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 801a6e0:	4a42      	ldr	r2, [pc, #264]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a6e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a6e6:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	2b00      	cmp	r3, #0
 801a6ee:	d105      	bne.n	801a6fc <RadioSetTxConfig+0x11c>
 801a6f0:	6a3b      	ldr	r3, [r7, #32]
 801a6f2:	2b0b      	cmp	r3, #11
 801a6f4:	d008      	beq.n	801a708 <RadioSetTxConfig+0x128>
 801a6f6:	6a3b      	ldr	r3, [r7, #32]
 801a6f8:	2b0c      	cmp	r3, #12
 801a6fa:	d005      	beq.n	801a708 <RadioSetTxConfig+0x128>
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	2b01      	cmp	r3, #1
 801a700:	d107      	bne.n	801a712 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a702:	6a3b      	ldr	r3, [r7, #32]
 801a704:	2b0c      	cmp	r3, #12
 801a706:	d104      	bne.n	801a712 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801a708:	4b38      	ldr	r3, [pc, #224]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a70a:	2201      	movs	r2, #1
 801a70c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 801a710:	e003      	b.n	801a71a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 801a712:	4b36      	ldr	r3, [pc, #216]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a714:	2200      	movs	r2, #0
 801a716:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801a71a:	4b34      	ldr	r3, [pc, #208]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a71c:	2201      	movs	r2, #1
 801a71e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a720:	4b32      	ldr	r3, [pc, #200]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801a726:	2b05      	cmp	r3, #5
 801a728:	d004      	beq.n	801a734 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801a72a:	4b30      	ldr	r3, [pc, #192]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a72c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 801a730:	2b06      	cmp	r3, #6
 801a732:	d10a      	bne.n	801a74a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 801a734:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a736:	2b0b      	cmp	r3, #11
 801a738:	d803      	bhi.n	801a742 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801a73a:	4b2c      	ldr	r3, [pc, #176]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a73c:	220c      	movs	r2, #12
 801a73e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 801a740:	e006      	b.n	801a750 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a742:	4a2a      	ldr	r2, [pc, #168]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a744:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a746:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801a748:	e002      	b.n	801a750 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801a74a:	4a28      	ldr	r2, [pc, #160]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a74c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801a74e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 801a750:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a754:	4b25      	ldr	r3, [pc, #148]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a756:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801a758:	4b29      	ldr	r3, [pc, #164]	; (801a800 <RadioSetTxConfig+0x220>)
 801a75a:	781a      	ldrb	r2, [r3, #0]
 801a75c:	4b23      	ldr	r3, [pc, #140]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a75e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801a760:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a764:	4b21      	ldr	r3, [pc, #132]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a766:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801a76a:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 801a76e:	4b1f      	ldr	r3, [pc, #124]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a770:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 801a774:	f000 fabd 	bl	801acf2 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801a778:	2001      	movs	r0, #1
 801a77a:	f7ff fc51 	bl	801a020 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a77e:	481c      	ldr	r0, [pc, #112]	; (801a7f0 <RadioSetTxConfig+0x210>)
 801a780:	f002 f8ae 	bl	801c8e0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801a784:	481b      	ldr	r0, [pc, #108]	; (801a7f4 <RadioSetTxConfig+0x214>)
 801a786:	f002 f97d 	bl	801ca84 <SUBGRF_SetPacketParams>
            break;
 801a78a:	e012      	b.n	801a7b2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 801a78c:	2004      	movs	r0, #4
 801a78e:	f7ff fc47 	bl	801a020 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801a792:	4b16      	ldr	r3, [pc, #88]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a794:	2202      	movs	r2, #2
 801a796:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 801a79a:	4a14      	ldr	r2, [pc, #80]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a79c:	6a3b      	ldr	r3, [r7, #32]
 801a79e:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801a7a0:	4b12      	ldr	r3, [pc, #72]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a7a2:	2216      	movs	r2, #22
 801a7a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801a7a8:	4811      	ldr	r0, [pc, #68]	; (801a7f0 <RadioSetTxConfig+0x210>)
 801a7aa:	f002 f899 	bl	801c8e0 <SUBGRF_SetModulationParams>
            break;
 801a7ae:	e000      	b.n	801a7b2 <RadioSetTxConfig+0x1d2>
            break;
 801a7b0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801a7b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801a7b6:	4618      	mov	r0, r3
 801a7b8:	f002 fbc8 	bl	801cf4c <SUBGRF_SetRfTxPower>
 801a7bc:	4603      	mov	r3, r0
 801a7be:	461a      	mov	r2, r3
 801a7c0:	4b0a      	ldr	r3, [pc, #40]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a7c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801a7c6:	210e      	movs	r1, #14
 801a7c8:	f640 101f 	movw	r0, #2335	; 0x91f
 801a7cc:	f002 faa2 	bl	801cd14 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801a7d0:	4b06      	ldr	r3, [pc, #24]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a7d2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801a7d6:	4618      	mov	r0, r3
 801a7d8:	f002 fd97 	bl	801d30a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801a7dc:	4a03      	ldr	r2, [pc, #12]	; (801a7ec <RadioSetTxConfig+0x20c>)
 801a7de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a7e0:	6053      	str	r3, [r2, #4]
}
 801a7e2:	bf00      	nop
 801a7e4:	3718      	adds	r7, #24
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd80      	pop	{r7, pc}
 801a7ea:	bf00      	nop
 801a7ec:	200017dc 	.word	0x200017dc
 801a7f0:	20001814 	.word	0x20001814
 801a7f4:	200017ea 	.word	0x200017ea
 801a7f8:	0801f414 	.word	0x0801f414
 801a7fc:	0801fa7c 	.word	0x0801fa7c
 801a800:	20000148 	.word	0x20000148

0801a804 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801a804:	b480      	push	{r7}
 801a806:	b083      	sub	sp, #12
 801a808:	af00      	add	r7, sp, #0
 801a80a:	6078      	str	r0, [r7, #4]
    return true;
 801a80c:	2301      	movs	r3, #1
}
 801a80e:	4618      	mov	r0, r3
 801a810:	370c      	adds	r7, #12
 801a812:	46bd      	mov	sp, r7
 801a814:	bc80      	pop	{r7}
 801a816:	4770      	bx	lr

0801a818 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801a818:	b480      	push	{r7}
 801a81a:	b085      	sub	sp, #20
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	4603      	mov	r3, r0
 801a820:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801a822:	2300      	movs	r3, #0
 801a824:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801a826:	79fb      	ldrb	r3, [r7, #7]
 801a828:	2b0a      	cmp	r3, #10
 801a82a:	d83e      	bhi.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
 801a82c:	a201      	add	r2, pc, #4	; (adr r2, 801a834 <RadioGetLoRaBandwidthInHz+0x1c>)
 801a82e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a832:	bf00      	nop
 801a834:	0801a861 	.word	0x0801a861
 801a838:	0801a871 	.word	0x0801a871
 801a83c:	0801a881 	.word	0x0801a881
 801a840:	0801a891 	.word	0x0801a891
 801a844:	0801a899 	.word	0x0801a899
 801a848:	0801a89f 	.word	0x0801a89f
 801a84c:	0801a8a5 	.word	0x0801a8a5
 801a850:	0801a8ab 	.word	0x0801a8ab
 801a854:	0801a869 	.word	0x0801a869
 801a858:	0801a879 	.word	0x0801a879
 801a85c:	0801a889 	.word	0x0801a889
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 801a860:	f641 6384 	movw	r3, #7812	; 0x1e84
 801a864:	60fb      	str	r3, [r7, #12]
        break;
 801a866:	e020      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801a868:	f642 03b1 	movw	r3, #10417	; 0x28b1
 801a86c:	60fb      	str	r3, [r7, #12]
        break;
 801a86e:	e01c      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 801a870:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a874:	60fb      	str	r3, [r7, #12]
        break;
 801a876:	e018      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801a878:	f245 1361 	movw	r3, #20833	; 0x5161
 801a87c:	60fb      	str	r3, [r7, #12]
        break;
 801a87e:	e014      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 801a880:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a884:	60fb      	str	r3, [r7, #12]
        break;
 801a886:	e010      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 801a888:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 801a88c:	60fb      	str	r3, [r7, #12]
        break;
 801a88e:	e00c      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801a890:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a894:	60fb      	str	r3, [r7, #12]
        break;
 801a896:	e008      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 801a898:	4b07      	ldr	r3, [pc, #28]	; (801a8b8 <RadioGetLoRaBandwidthInHz+0xa0>)
 801a89a:	60fb      	str	r3, [r7, #12]
        break;
 801a89c:	e005      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801a89e:	4b07      	ldr	r3, [pc, #28]	; (801a8bc <RadioGetLoRaBandwidthInHz+0xa4>)
 801a8a0:	60fb      	str	r3, [r7, #12]
        break;
 801a8a2:	e002      	b.n	801a8aa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801a8a4:	4b06      	ldr	r3, [pc, #24]	; (801a8c0 <RadioGetLoRaBandwidthInHz+0xa8>)
 801a8a6:	60fb      	str	r3, [r7, #12]
        break;
 801a8a8:	bf00      	nop
    }

    return bandwidthInHz;
 801a8aa:	68fb      	ldr	r3, [r7, #12]
}
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	3714      	adds	r7, #20
 801a8b0:	46bd      	mov	sp, r7
 801a8b2:	bc80      	pop	{r7}
 801a8b4:	4770      	bx	lr
 801a8b6:	bf00      	nop
 801a8b8:	0001e848 	.word	0x0001e848
 801a8bc:	0003d090 	.word	0x0003d090
 801a8c0:	0007a120 	.word	0x0007a120

0801a8c4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a8c4:	b480      	push	{r7}
 801a8c6:	b083      	sub	sp, #12
 801a8c8:	af00      	add	r7, sp, #0
 801a8ca:	6078      	str	r0, [r7, #4]
 801a8cc:	4608      	mov	r0, r1
 801a8ce:	4611      	mov	r1, r2
 801a8d0:	461a      	mov	r2, r3
 801a8d2:	4603      	mov	r3, r0
 801a8d4:	70fb      	strb	r3, [r7, #3]
 801a8d6:	460b      	mov	r3, r1
 801a8d8:	803b      	strh	r3, [r7, #0]
 801a8da:	4613      	mov	r3, r2
 801a8dc:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801a8de:	883b      	ldrh	r3, [r7, #0]
 801a8e0:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8e2:	78ba      	ldrb	r2, [r7, #2]
 801a8e4:	f082 0201 	eor.w	r2, r2, #1
 801a8e8:	b2d2      	uxtb	r2, r2
 801a8ea:	2a00      	cmp	r2, #0
 801a8ec:	d001      	beq.n	801a8f2 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801a8ee:	2208      	movs	r2, #8
 801a8f0:	e000      	b.n	801a8f4 <RadioGetGfskTimeOnAirNumerator+0x30>
 801a8f2:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801a8f4:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a8f6:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801a8fa:	7c3b      	ldrb	r3, [r7, #16]
 801a8fc:	7d39      	ldrb	r1, [r7, #20]
 801a8fe:	2900      	cmp	r1, #0
 801a900:	d001      	beq.n	801a906 <RadioGetGfskTimeOnAirNumerator+0x42>
 801a902:	2102      	movs	r1, #2
 801a904:	e000      	b.n	801a908 <RadioGetGfskTimeOnAirNumerator+0x44>
 801a906:	2100      	movs	r1, #0
 801a908:	440b      	add	r3, r1
 801a90a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801a90c:	4413      	add	r3, r2
}
 801a90e:	4618      	mov	r0, r3
 801a910:	370c      	adds	r7, #12
 801a912:	46bd      	mov	sp, r7
 801a914:	bc80      	pop	{r7}
 801a916:	4770      	bx	lr

0801a918 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801a918:	b480      	push	{r7}
 801a91a:	b08b      	sub	sp, #44	; 0x2c
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	60f8      	str	r0, [r7, #12]
 801a920:	60b9      	str	r1, [r7, #8]
 801a922:	4611      	mov	r1, r2
 801a924:	461a      	mov	r2, r3
 801a926:	460b      	mov	r3, r1
 801a928:	71fb      	strb	r3, [r7, #7]
 801a92a:	4613      	mov	r3, r2
 801a92c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801a92e:	79fb      	ldrb	r3, [r7, #7]
 801a930:	3304      	adds	r3, #4
 801a932:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801a934:	2300      	movs	r3, #0
 801a936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801a93a:	68bb      	ldr	r3, [r7, #8]
 801a93c:	2b05      	cmp	r3, #5
 801a93e:	d002      	beq.n	801a946 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 801a940:	68bb      	ldr	r3, [r7, #8]
 801a942:	2b06      	cmp	r3, #6
 801a944:	d104      	bne.n	801a950 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801a946:	88bb      	ldrh	r3, [r7, #4]
 801a948:	2b0b      	cmp	r3, #11
 801a94a:	d801      	bhi.n	801a950 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 801a94c:	230c      	movs	r3, #12
 801a94e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801a950:	68fb      	ldr	r3, [r7, #12]
 801a952:	2b00      	cmp	r3, #0
 801a954:	d105      	bne.n	801a962 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801a956:	68bb      	ldr	r3, [r7, #8]
 801a958:	2b0b      	cmp	r3, #11
 801a95a:	d008      	beq.n	801a96e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a95c:	68bb      	ldr	r3, [r7, #8]
 801a95e:	2b0c      	cmp	r3, #12
 801a960:	d005      	beq.n	801a96e <RadioGetLoRaTimeOnAirNumerator+0x56>
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	2b01      	cmp	r3, #1
 801a966:	d105      	bne.n	801a974 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	2b0c      	cmp	r3, #12
 801a96c:	d102      	bne.n	801a974 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 801a96e:	2301      	movs	r3, #1
 801a970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a974:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 801a978:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801a97a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 801a97e:	2a00      	cmp	r2, #0
 801a980:	d001      	beq.n	801a986 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801a982:	2210      	movs	r2, #16
 801a984:	e000      	b.n	801a988 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801a986:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a988:	4413      	add	r3, r2
 801a98a:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 801a990:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 801a992:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 801a996:	2a00      	cmp	r2, #0
 801a998:	d001      	beq.n	801a99e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801a99a:	2200      	movs	r2, #0
 801a99c:	e000      	b.n	801a9a0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801a99e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 801a9a0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801a9a2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	2b06      	cmp	r3, #6
 801a9a8:	d803      	bhi.n	801a9b2 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	009b      	lsls	r3, r3, #2
 801a9ae:	623b      	str	r3, [r7, #32]
 801a9b0:	e00e      	b.n	801a9d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 801a9b2:	69fb      	ldr	r3, [r7, #28]
 801a9b4:	3308      	adds	r3, #8
 801a9b6:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 801a9b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d004      	beq.n	801a9ca <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	3b02      	subs	r3, #2
 801a9c4:	009b      	lsls	r3, r3, #2
 801a9c6:	623b      	str	r3, [r7, #32]
 801a9c8:	e002      	b.n	801a9d0 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801a9ca:	68bb      	ldr	r3, [r7, #8]
 801a9cc:	009b      	lsls	r3, r3, #2
 801a9ce:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 801a9d0:	69fb      	ldr	r3, [r7, #28]
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	da01      	bge.n	801a9da <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801a9da:	69fa      	ldr	r2, [r7, #28]
 801a9dc:	6a3b      	ldr	r3, [r7, #32]
 801a9de:	4413      	add	r3, r2
 801a9e0:	1e5a      	subs	r2, r3, #1
 801a9e2:	6a3b      	ldr	r3, [r7, #32]
 801a9e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801a9e8:	697a      	ldr	r2, [r7, #20]
 801a9ea:	fb03 f202 	mul.w	r2, r3, r2
 801a9ee:	88bb      	ldrh	r3, [r7, #4]
 801a9f0:	4413      	add	r3, r2
    int32_t intermediate =
 801a9f2:	330c      	adds	r3, #12
 801a9f4:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801a9f6:	68bb      	ldr	r3, [r7, #8]
 801a9f8:	2b06      	cmp	r3, #6
 801a9fa:	d802      	bhi.n	801aa02 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801a9fc:	69bb      	ldr	r3, [r7, #24]
 801a9fe:	3302      	adds	r3, #2
 801aa00:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	009b      	lsls	r3, r3, #2
 801aa06:	1c5a      	adds	r2, r3, #1
 801aa08:	68bb      	ldr	r3, [r7, #8]
 801aa0a:	3b02      	subs	r3, #2
 801aa0c:	fa02 f303 	lsl.w	r3, r2, r3
}
 801aa10:	4618      	mov	r0, r3
 801aa12:	372c      	adds	r7, #44	; 0x2c
 801aa14:	46bd      	mov	sp, r7
 801aa16:	bc80      	pop	{r7}
 801aa18:	4770      	bx	lr
	...

0801aa1c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801aa1c:	b580      	push	{r7, lr}
 801aa1e:	b08a      	sub	sp, #40	; 0x28
 801aa20:	af04      	add	r7, sp, #16
 801aa22:	60b9      	str	r1, [r7, #8]
 801aa24:	607a      	str	r2, [r7, #4]
 801aa26:	461a      	mov	r2, r3
 801aa28:	4603      	mov	r3, r0
 801aa2a:	73fb      	strb	r3, [r7, #15]
 801aa2c:	4613      	mov	r3, r2
 801aa2e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 801aa30:	2300      	movs	r3, #0
 801aa32:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801aa34:	2301      	movs	r3, #1
 801aa36:	613b      	str	r3, [r7, #16]

    switch( modem )
 801aa38:	7bfb      	ldrb	r3, [r7, #15]
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d002      	beq.n	801aa44 <RadioTimeOnAir+0x28>
 801aa3e:	2b01      	cmp	r3, #1
 801aa40:	d017      	beq.n	801aa72 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801aa42:	e035      	b.n	801aab0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801aa44:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 801aa48:	8c3a      	ldrh	r2, [r7, #32]
 801aa4a:	7bb9      	ldrb	r1, [r7, #14]
 801aa4c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa50:	9301      	str	r3, [sp, #4]
 801aa52:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa56:	9300      	str	r3, [sp, #0]
 801aa58:	4603      	mov	r3, r0
 801aa5a:	6878      	ldr	r0, [r7, #4]
 801aa5c:	f7ff ff32 	bl	801a8c4 <RadioGetGfskTimeOnAirNumerator>
 801aa60:	4603      	mov	r3, r0
 801aa62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa66:	fb02 f303 	mul.w	r3, r2, r3
 801aa6a:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	613b      	str	r3, [r7, #16]
        break;
 801aa70:	e01e      	b.n	801aab0 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801aa72:	8c39      	ldrh	r1, [r7, #32]
 801aa74:	7bba      	ldrb	r2, [r7, #14]
 801aa76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801aa7a:	9302      	str	r3, [sp, #8]
 801aa7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801aa80:	9301      	str	r3, [sp, #4]
 801aa82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801aa86:	9300      	str	r3, [sp, #0]
 801aa88:	460b      	mov	r3, r1
 801aa8a:	6879      	ldr	r1, [r7, #4]
 801aa8c:	68b8      	ldr	r0, [r7, #8]
 801aa8e:	f7ff ff43 	bl	801a918 <RadioGetLoRaTimeOnAirNumerator>
 801aa92:	4603      	mov	r3, r0
 801aa94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa98:	fb02 f303 	mul.w	r3, r2, r3
 801aa9c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801aa9e:	4a0a      	ldr	r2, [pc, #40]	; (801aac8 <RadioTimeOnAir+0xac>)
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	4413      	add	r3, r2
 801aaa4:	781b      	ldrb	r3, [r3, #0]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7ff feb6 	bl	801a818 <RadioGetLoRaBandwidthInHz>
 801aaac:	6138      	str	r0, [r7, #16]
        break;
 801aaae:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 801aab0:	697a      	ldr	r2, [r7, #20]
 801aab2:	693b      	ldr	r3, [r7, #16]
 801aab4:	4413      	add	r3, r2
 801aab6:	1e5a      	subs	r2, r3, #1
 801aab8:	693b      	ldr	r3, [r7, #16]
 801aaba:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801aabe:	4618      	mov	r0, r3
 801aac0:	3718      	adds	r7, #24
 801aac2:	46bd      	mov	sp, r7
 801aac4:	bd80      	pop	{r7, pc}
 801aac6:	bf00      	nop
 801aac8:	0801fa7c 	.word	0x0801fa7c

0801aacc <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b084      	sub	sp, #16
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	460b      	mov	r3, r1
 801aad6:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801aad8:	2300      	movs	r3, #0
 801aada:	2200      	movs	r2, #0
 801aadc:	f240 2101 	movw	r1, #513	; 0x201
 801aae0:	f240 2001 	movw	r0, #513	; 0x201
 801aae4:	f001 fd66 	bl	801c5b4 <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801aae8:	4b73      	ldr	r3, [pc, #460]	; (801acb8 <RadioSend+0x1ec>)
 801aaea:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801aaee:	2101      	movs	r1, #1
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	f002 fa03 	bl	801cefc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801aaf6:	4b70      	ldr	r3, [pc, #448]	; (801acb8 <RadioSend+0x1ec>)
 801aaf8:	781b      	ldrb	r3, [r3, #0]
 801aafa:	2b01      	cmp	r3, #1
 801aafc:	d112      	bne.n	801ab24 <RadioSend+0x58>
 801aafe:	4b6e      	ldr	r3, [pc, #440]	; (801acb8 <RadioSend+0x1ec>)
 801ab00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801ab04:	2b06      	cmp	r3, #6
 801ab06:	d10d      	bne.n	801ab24 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801ab08:	f640 0089 	movw	r0, #2185	; 0x889
 801ab0c:	f002 f916 	bl	801cd3c <SUBGRF_ReadRegister>
 801ab10:	4603      	mov	r3, r0
 801ab12:	f023 0304 	bic.w	r3, r3, #4
 801ab16:	b2db      	uxtb	r3, r3
 801ab18:	4619      	mov	r1, r3
 801ab1a:	f640 0089 	movw	r0, #2185	; 0x889
 801ab1e:	f002 f8f9 	bl	801cd14 <SUBGRF_WriteRegister>
 801ab22:	e00c      	b.n	801ab3e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801ab24:	f640 0089 	movw	r0, #2185	; 0x889
 801ab28:	f002 f908 	bl	801cd3c <SUBGRF_ReadRegister>
 801ab2c:	4603      	mov	r3, r0
 801ab2e:	f043 0304 	orr.w	r3, r3, #4
 801ab32:	b2db      	uxtb	r3, r3
 801ab34:	4619      	mov	r1, r3
 801ab36:	f640 0089 	movw	r0, #2185	; 0x889
 801ab3a:	f002 f8eb 	bl	801cd14 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 801ab3e:	4b5e      	ldr	r3, [pc, #376]	; (801acb8 <RadioSend+0x1ec>)
 801ab40:	781b      	ldrb	r3, [r3, #0]
 801ab42:	2b04      	cmp	r3, #4
 801ab44:	f200 80a8 	bhi.w	801ac98 <RadioSend+0x1cc>
 801ab48:	a201      	add	r2, pc, #4	; (adr r2, 801ab50 <RadioSend+0x84>)
 801ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ab4e:	bf00      	nop
 801ab50:	0801ab7f 	.word	0x0801ab7f
 801ab54:	0801ab65 	.word	0x0801ab65
 801ab58:	0801ab7f 	.word	0x0801ab7f
 801ab5c:	0801abe1 	.word	0x0801abe1
 801ab60:	0801ac01 	.word	0x0801ac01
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 801ab64:	4a54      	ldr	r2, [pc, #336]	; (801acb8 <RadioSend+0x1ec>)
 801ab66:	78fb      	ldrb	r3, [r7, #3]
 801ab68:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ab6a:	4854      	ldr	r0, [pc, #336]	; (801acbc <RadioSend+0x1f0>)
 801ab6c:	f001 ff8a 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801ab70:	78fb      	ldrb	r3, [r7, #3]
 801ab72:	2200      	movs	r2, #0
 801ab74:	4619      	mov	r1, r3
 801ab76:	6878      	ldr	r0, [r7, #4]
 801ab78:	f001 fa3a 	bl	801bff0 <SUBGRF_SendPayload>
            break;
 801ab7c:	e08d      	b.n	801ac9a <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801ab7e:	f002 fbb6 	bl	801d2ee <RFW_Is_Init>
 801ab82:	4603      	mov	r3, r0
 801ab84:	2b01      	cmp	r3, #1
 801ab86:	d11e      	bne.n	801abc6 <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 801ab88:	f107 020d 	add.w	r2, r7, #13
 801ab8c:	78fb      	ldrb	r3, [r7, #3]
 801ab8e:	4619      	mov	r1, r3
 801ab90:	6878      	ldr	r0, [r7, #4]
 801ab92:	f002 fbc4 	bl	801d31e <RFW_TransmitInit>
 801ab96:	4603      	mov	r3, r0
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d10c      	bne.n	801abb6 <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 801ab9c:	7b7a      	ldrb	r2, [r7, #13]
 801ab9e:	4b46      	ldr	r3, [pc, #280]	; (801acb8 <RadioSend+0x1ec>)
 801aba0:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801aba2:	4846      	ldr	r0, [pc, #280]	; (801acbc <RadioSend+0x1f0>)
 801aba4:	f001 ff6e 	bl	801ca84 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801aba8:	7b7b      	ldrb	r3, [r7, #13]
 801abaa:	2200      	movs	r2, #0
 801abac:	4619      	mov	r1, r3
 801abae:	6878      	ldr	r0, [r7, #4]
 801abb0:	f001 fa1e 	bl	801bff0 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 801abb4:	e071      	b.n	801ac9a <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801abb6:	4b42      	ldr	r3, [pc, #264]	; (801acc0 <RadioSend+0x1f4>)
 801abb8:	2201      	movs	r2, #1
 801abba:	2100      	movs	r1, #0
 801abbc:	2002      	movs	r0, #2
 801abbe:	f003 fccf 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 801abc2:	2303      	movs	r3, #3
 801abc4:	e073      	b.n	801acae <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801abc6:	4a3c      	ldr	r2, [pc, #240]	; (801acb8 <RadioSend+0x1ec>)
 801abc8:	78fb      	ldrb	r3, [r7, #3]
 801abca:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abcc:	483b      	ldr	r0, [pc, #236]	; (801acbc <RadioSend+0x1f0>)
 801abce:	f001 ff59 	bl	801ca84 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 801abd2:	78fb      	ldrb	r3, [r7, #3]
 801abd4:	2200      	movs	r2, #0
 801abd6:	4619      	mov	r1, r3
 801abd8:	6878      	ldr	r0, [r7, #4]
 801abda:	f001 fa09 	bl	801bff0 <SUBGRF_SendPayload>
            break;
 801abde:	e05c      	b.n	801ac9a <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801abe0:	4b35      	ldr	r3, [pc, #212]	; (801acb8 <RadioSend+0x1ec>)
 801abe2:	2202      	movs	r2, #2
 801abe4:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801abe6:	4a34      	ldr	r2, [pc, #208]	; (801acb8 <RadioSend+0x1ec>)
 801abe8:	78fb      	ldrb	r3, [r7, #3]
 801abea:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801abec:	4833      	ldr	r0, [pc, #204]	; (801acbc <RadioSend+0x1f0>)
 801abee:	f001 ff49 	bl	801ca84 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801abf2:	78fb      	ldrb	r3, [r7, #3]
 801abf4:	2200      	movs	r2, #0
 801abf6:	4619      	mov	r1, r3
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	f001 f9f9 	bl	801bff0 <SUBGRF_SendPayload>
            break;
 801abfe:	e04c      	b.n	801ac9a <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 801ac00:	78fb      	ldrb	r3, [r7, #3]
 801ac02:	461a      	mov	r2, r3
 801ac04:	6879      	ldr	r1, [r7, #4]
 801ac06:	482f      	ldr	r0, [pc, #188]	; (801acc4 <RadioSend+0x1f8>)
 801ac08:	f000 fccc 	bl	801b5a4 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801ac0c:	4b2a      	ldr	r3, [pc, #168]	; (801acb8 <RadioSend+0x1ec>)
 801ac0e:	2202      	movs	r2, #2
 801ac10:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 801ac12:	78fb      	ldrb	r3, [r7, #3]
 801ac14:	3301      	adds	r3, #1
 801ac16:	b2da      	uxtb	r2, r3
 801ac18:	4b27      	ldr	r3, [pc, #156]	; (801acb8 <RadioSend+0x1ec>)
 801ac1a:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801ac1c:	4827      	ldr	r0, [pc, #156]	; (801acbc <RadioSend+0x1f0>)
 801ac1e:	f001 ff31 	bl	801ca84 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 801ac22:	2100      	movs	r1, #0
 801ac24:	20f1      	movs	r0, #241	; 0xf1
 801ac26:	f000 f966 	bl	801aef6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801ac2a:	2100      	movs	r1, #0
 801ac2c:	20f0      	movs	r0, #240	; 0xf0
 801ac2e:	f000 f962 	bl	801aef6 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 801ac32:	4b21      	ldr	r3, [pc, #132]	; (801acb8 <RadioSend+0x1ec>)
 801ac34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ac36:	2b64      	cmp	r3, #100	; 0x64
 801ac38:	d108      	bne.n	801ac4c <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801ac3a:	2170      	movs	r1, #112	; 0x70
 801ac3c:	20f3      	movs	r0, #243	; 0xf3
 801ac3e:	f000 f95a 	bl	801aef6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 801ac42:	211d      	movs	r1, #29
 801ac44:	20f2      	movs	r0, #242	; 0xf2
 801ac46:	f000 f956 	bl	801aef6 <RadioWrite>
 801ac4a:	e007      	b.n	801ac5c <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801ac4c:	21e1      	movs	r1, #225	; 0xe1
 801ac4e:	20f3      	movs	r0, #243	; 0xf3
 801ac50:	f000 f951 	bl	801aef6 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 801ac54:	2104      	movs	r1, #4
 801ac56:	20f2      	movs	r0, #242	; 0xf2
 801ac58:	f000 f94d 	bl	801aef6 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801ac5c:	78fb      	ldrb	r3, [r7, #3]
 801ac5e:	b29b      	uxth	r3, r3
 801ac60:	00db      	lsls	r3, r3, #3
 801ac62:	b29b      	uxth	r3, r3
 801ac64:	3302      	adds	r3, #2
 801ac66:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801ac68:	89fb      	ldrh	r3, [r7, #14]
 801ac6a:	0a1b      	lsrs	r3, r3, #8
 801ac6c:	b29b      	uxth	r3, r3
 801ac6e:	b2db      	uxtb	r3, r3
 801ac70:	4619      	mov	r1, r3
 801ac72:	20f4      	movs	r0, #244	; 0xf4
 801ac74:	f000 f93f 	bl	801aef6 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801ac78:	89fb      	ldrh	r3, [r7, #14]
 801ac7a:	b2db      	uxtb	r3, r3
 801ac7c:	4619      	mov	r1, r3
 801ac7e:	20f5      	movs	r0, #245	; 0xf5
 801ac80:	f000 f939 	bl	801aef6 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 801ac84:	78fb      	ldrb	r3, [r7, #3]
 801ac86:	3301      	adds	r3, #1
 801ac88:	b2db      	uxtb	r3, r3
 801ac8a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 801ac8e:	4619      	mov	r1, r3
 801ac90:	480c      	ldr	r0, [pc, #48]	; (801acc4 <RadioSend+0x1f8>)
 801ac92:	f001 f9ad 	bl	801bff0 <SUBGRF_SendPayload>
            break;
 801ac96:	e000      	b.n	801ac9a <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801ac98:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 801ac9a:	4b07      	ldr	r3, [pc, #28]	; (801acb8 <RadioSend+0x1ec>)
 801ac9c:	685b      	ldr	r3, [r3, #4]
 801ac9e:	4619      	mov	r1, r3
 801aca0:	4809      	ldr	r0, [pc, #36]	; (801acc8 <RadioSend+0x1fc>)
 801aca2:	f003 fac3 	bl	801e22c <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 801aca6:	4808      	ldr	r0, [pc, #32]	; (801acc8 <RadioSend+0x1fc>)
 801aca8:	f003 f9e2 	bl	801e070 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 801acac:	2300      	movs	r3, #0
}
 801acae:	4618      	mov	r0, r3
 801acb0:	3710      	adds	r7, #16
 801acb2:	46bd      	mov	sp, r7
 801acb4:	bd80      	pop	{r7, pc}
 801acb6:	bf00      	nop
 801acb8:	200017dc 	.word	0x200017dc
 801acbc:	200017ea 	.word	0x200017ea
 801acc0:	0801f41c 	.word	0x0801f41c
 801acc4:	200016d8 	.word	0x200016d8
 801acc8:	20001838 	.word	0x20001838

0801accc <RadioSleep>:

static void RadioSleep( void )
{
 801accc:	b580      	push	{r7, lr}
 801acce:	b082      	sub	sp, #8
 801acd0:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 801acd2:	2300      	movs	r3, #0
 801acd4:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 801acd6:	793b      	ldrb	r3, [r7, #4]
 801acd8:	f043 0304 	orr.w	r3, r3, #4
 801acdc:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 801acde:	7938      	ldrb	r0, [r7, #4]
 801ace0:	f001 fa62 	bl	801c1a8 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 801ace4:	2002      	movs	r0, #2
 801ace6:	f7e7 fee7 	bl	8002ab8 <HAL_Delay>
}
 801acea:	bf00      	nop
 801acec:	3708      	adds	r7, #8
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd80      	pop	{r7, pc}

0801acf2 <RadioStandby>:

static void RadioStandby( void )
{
 801acf2:	b580      	push	{r7, lr}
 801acf4:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 801acf6:	2000      	movs	r0, #0
 801acf8:	f001 fa88 	bl	801c20c <SUBGRF_SetStandby>
}
 801acfc:	bf00      	nop
 801acfe:	bd80      	pop	{r7, pc}

0801ad00 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801ad00:	b580      	push	{r7, lr}
 801ad02:	b082      	sub	sp, #8
 801ad04:	af00      	add	r7, sp, #0
 801ad06:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 801ad08:	f002 faf1 	bl	801d2ee <RFW_Is_Init>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	2b01      	cmp	r3, #1
 801ad10:	d102      	bne.n	801ad18 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801ad12:	f002 fb14 	bl	801d33e <RFW_ReceiveInit>
 801ad16:	e007      	b.n	801ad28 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad18:	2300      	movs	r3, #0
 801ad1a:	2200      	movs	r2, #0
 801ad1c:	f240 2162 	movw	r1, #610	; 0x262
 801ad20:	f240 2062 	movw	r0, #610	; 0x262
 801ad24:	f001 fc46 	bl	801c5b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	2b00      	cmp	r3, #0
 801ad2c:	d006      	beq.n	801ad3c <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801ad2e:	6879      	ldr	r1, [r7, #4]
 801ad30:	4811      	ldr	r0, [pc, #68]	; (801ad78 <RadioRx+0x78>)
 801ad32:	f003 fa7b 	bl	801e22c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801ad36:	4810      	ldr	r0, [pc, #64]	; (801ad78 <RadioRx+0x78>)
 801ad38:	f003 f99a 	bl	801e070 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801ad3c:	4b0f      	ldr	r3, [pc, #60]	; (801ad7c <RadioRx+0x7c>)
 801ad3e:	2200      	movs	r2, #0
 801ad40:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ad42:	4b0e      	ldr	r3, [pc, #56]	; (801ad7c <RadioRx+0x7c>)
 801ad44:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ad48:	2100      	movs	r1, #0
 801ad4a:	4618      	mov	r0, r3
 801ad4c:	f002 f8d6 	bl	801cefc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801ad50:	4b0a      	ldr	r3, [pc, #40]	; (801ad7c <RadioRx+0x7c>)
 801ad52:	785b      	ldrb	r3, [r3, #1]
 801ad54:	2b00      	cmp	r3, #0
 801ad56:	d004      	beq.n	801ad62 <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801ad58:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801ad5c:	f001 fa92 	bl	801c284 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801ad60:	e005      	b.n	801ad6e <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801ad62:	4b06      	ldr	r3, [pc, #24]	; (801ad7c <RadioRx+0x7c>)
 801ad64:	689b      	ldr	r3, [r3, #8]
 801ad66:	019b      	lsls	r3, r3, #6
 801ad68:	4618      	mov	r0, r3
 801ad6a:	f001 fa8b 	bl	801c284 <SUBGRF_SetRx>
}
 801ad6e:	bf00      	nop
 801ad70:	3708      	adds	r7, #8
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	20001850 	.word	0x20001850
 801ad7c:	200017dc 	.word	0x200017dc

0801ad80 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801ad80:	b580      	push	{r7, lr}
 801ad82:	b082      	sub	sp, #8
 801ad84:	af00      	add	r7, sp, #0
 801ad86:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 801ad88:	f002 fab1 	bl	801d2ee <RFW_Is_Init>
 801ad8c:	4603      	mov	r3, r0
 801ad8e:	2b01      	cmp	r3, #1
 801ad90:	d102      	bne.n	801ad98 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801ad92:	f002 fad4 	bl	801d33e <RFW_ReceiveInit>
 801ad96:	e007      	b.n	801ada8 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801ad98:	2300      	movs	r3, #0
 801ad9a:	2200      	movs	r2, #0
 801ad9c:	f240 2162 	movw	r1, #610	; 0x262
 801ada0:	f240 2062 	movw	r0, #610	; 0x262
 801ada4:	f001 fc06 	bl	801c5b4 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d006      	beq.n	801adbc <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801adae:	6879      	ldr	r1, [r7, #4]
 801adb0:	4811      	ldr	r0, [pc, #68]	; (801adf8 <RadioRxBoosted+0x78>)
 801adb2:	f003 fa3b 	bl	801e22c <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801adb6:	4810      	ldr	r0, [pc, #64]	; (801adf8 <RadioRxBoosted+0x78>)
 801adb8:	f003 f95a 	bl	801e070 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801adbc:	4b0f      	ldr	r3, [pc, #60]	; (801adfc <RadioRxBoosted+0x7c>)
 801adbe:	2200      	movs	r2, #0
 801adc0:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801adc2:	4b0e      	ldr	r3, [pc, #56]	; (801adfc <RadioRxBoosted+0x7c>)
 801adc4:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801adc8:	2100      	movs	r1, #0
 801adca:	4618      	mov	r0, r3
 801adcc:	f002 f896 	bl	801cefc <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 801add0:	4b0a      	ldr	r3, [pc, #40]	; (801adfc <RadioRxBoosted+0x7c>)
 801add2:	785b      	ldrb	r3, [r3, #1]
 801add4:	2b00      	cmp	r3, #0
 801add6:	d004      	beq.n	801ade2 <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 801add8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801addc:	f001 fa72 	bl	801c2c4 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 801ade0:	e005      	b.n	801adee <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 801ade2:	4b06      	ldr	r3, [pc, #24]	; (801adfc <RadioRxBoosted+0x7c>)
 801ade4:	689b      	ldr	r3, [r3, #8]
 801ade6:	019b      	lsls	r3, r3, #6
 801ade8:	4618      	mov	r0, r3
 801adea:	f001 fa6b 	bl	801c2c4 <SUBGRF_SetRxBoosted>
}
 801adee:	bf00      	nop
 801adf0:	3708      	adds	r7, #8
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	20001850 	.word	0x20001850
 801adfc:	200017dc 	.word	0x200017dc

0801ae00 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b082      	sub	sp, #8
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	005a      	lsls	r2, r3, #1
 801ae0e:	683b      	ldr	r3, [r7, #0]
 801ae10:	4413      	add	r3, r2
 801ae12:	4a0c      	ldr	r2, [pc, #48]	; (801ae44 <RadioSetRxDutyCycle+0x44>)
 801ae14:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801ae16:	2300      	movs	r3, #0
 801ae18:	2200      	movs	r2, #0
 801ae1a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ae1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801ae22:	f001 fbc7 	bl	801c5b4 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae26:	4b07      	ldr	r3, [pc, #28]	; (801ae44 <RadioSetRxDutyCycle+0x44>)
 801ae28:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae2c:	2100      	movs	r1, #0
 801ae2e:	4618      	mov	r0, r3
 801ae30:	f002 f864 	bl	801cefc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 801ae34:	6839      	ldr	r1, [r7, #0]
 801ae36:	6878      	ldr	r0, [r7, #4]
 801ae38:	f001 fa68 	bl	801c30c <SUBGRF_SetRxDutyCycle>
}
 801ae3c:	bf00      	nop
 801ae3e:	3708      	adds	r7, #8
 801ae40:	46bd      	mov	sp, r7
 801ae42:	bd80      	pop	{r7, pc}
 801ae44:	200017dc 	.word	0x200017dc

0801ae48 <RadioStartCad>:

static void RadioStartCad( void )
{
 801ae48:	b580      	push	{r7, lr}
 801ae4a:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801ae4c:	4b09      	ldr	r3, [pc, #36]	; (801ae74 <RadioStartCad+0x2c>)
 801ae4e:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801ae52:	2100      	movs	r1, #0
 801ae54:	4618      	mov	r0, r3
 801ae56:	f002 f851 	bl	801cefc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801ae5a:	2300      	movs	r3, #0
 801ae5c:	2200      	movs	r2, #0
 801ae5e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 801ae62:	f44f 70c0 	mov.w	r0, #384	; 0x180
 801ae66:	f001 fba5 	bl	801c5b4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801ae6a:	f001 fa7b 	bl	801c364 <SUBGRF_SetCad>
}
 801ae6e:	bf00      	nop
 801ae70:	bd80      	pop	{r7, pc}
 801ae72:	bf00      	nop
 801ae74:	200017dc 	.word	0x200017dc

0801ae78 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b084      	sub	sp, #16
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	460b      	mov	r3, r1
 801ae82:	70fb      	strb	r3, [r7, #3]
 801ae84:	4613      	mov	r3, r2
 801ae86:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801ae88:	883b      	ldrh	r3, [r7, #0]
 801ae8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801ae8e:	fb02 f303 	mul.w	r3, r2, r3
 801ae92:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 801ae94:	6878      	ldr	r0, [r7, #4]
 801ae96:	f001 fbe9 	bl	801c66c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801ae9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801ae9e:	4618      	mov	r0, r3
 801aea0:	f002 f854 	bl	801cf4c <SUBGRF_SetRfTxPower>
 801aea4:	4603      	mov	r3, r0
 801aea6:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801aea8:	210e      	movs	r1, #14
 801aeaa:	f640 101f 	movw	r0, #2335	; 0x91f
 801aeae:	f001 ff31 	bl	801cd14 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 801aeb2:	7afb      	ldrb	r3, [r7, #11]
 801aeb4:	2101      	movs	r1, #1
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f002 f820 	bl	801cefc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 801aebc:	f001 fa60 	bl	801c380 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 801aec0:	68f9      	ldr	r1, [r7, #12]
 801aec2:	4805      	ldr	r0, [pc, #20]	; (801aed8 <RadioSetTxContinuousWave+0x60>)
 801aec4:	f003 f9b2 	bl	801e22c <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 801aec8:	4803      	ldr	r0, [pc, #12]	; (801aed8 <RadioSetTxContinuousWave+0x60>)
 801aeca:	f003 f8d1 	bl	801e070 <UTIL_TIMER_Start>
}
 801aece:	bf00      	nop
 801aed0:	3710      	adds	r7, #16
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}
 801aed6:	bf00      	nop
 801aed8:	20001838 	.word	0x20001838

0801aedc <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b082      	sub	sp, #8
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	4603      	mov	r3, r0
 801aee4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 801aee6:	f001 fe82 	bl	801cbee <SUBGRF_GetRssiInst>
 801aeea:	4603      	mov	r3, r0
 801aeec:	b21b      	sxth	r3, r3
}
 801aeee:	4618      	mov	r0, r3
 801aef0:	3708      	adds	r7, #8
 801aef2:	46bd      	mov	sp, r7
 801aef4:	bd80      	pop	{r7, pc}

0801aef6 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 801aef6:	b580      	push	{r7, lr}
 801aef8:	b082      	sub	sp, #8
 801aefa:	af00      	add	r7, sp, #0
 801aefc:	4603      	mov	r3, r0
 801aefe:	460a      	mov	r2, r1
 801af00:	80fb      	strh	r3, [r7, #6]
 801af02:	4613      	mov	r3, r2
 801af04:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 801af06:	797a      	ldrb	r2, [r7, #5]
 801af08:	88fb      	ldrh	r3, [r7, #6]
 801af0a:	4611      	mov	r1, r2
 801af0c:	4618      	mov	r0, r3
 801af0e:	f001 ff01 	bl	801cd14 <SUBGRF_WriteRegister>
}
 801af12:	bf00      	nop
 801af14:	3708      	adds	r7, #8
 801af16:	46bd      	mov	sp, r7
 801af18:	bd80      	pop	{r7, pc}

0801af1a <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801af1a:	b580      	push	{r7, lr}
 801af1c:	b082      	sub	sp, #8
 801af1e:	af00      	add	r7, sp, #0
 801af20:	4603      	mov	r3, r0
 801af22:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 801af24:	88fb      	ldrh	r3, [r7, #6]
 801af26:	4618      	mov	r0, r3
 801af28:	f001 ff08 	bl	801cd3c <SUBGRF_ReadRegister>
 801af2c:	4603      	mov	r3, r0
}
 801af2e:	4618      	mov	r0, r3
 801af30:	3708      	adds	r7, #8
 801af32:	46bd      	mov	sp, r7
 801af34:	bd80      	pop	{r7, pc}

0801af36 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af36:	b580      	push	{r7, lr}
 801af38:	b082      	sub	sp, #8
 801af3a:	af00      	add	r7, sp, #0
 801af3c:	4603      	mov	r3, r0
 801af3e:	6039      	str	r1, [r7, #0]
 801af40:	80fb      	strh	r3, [r7, #6]
 801af42:	4613      	mov	r3, r2
 801af44:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 801af46:	797b      	ldrb	r3, [r7, #5]
 801af48:	b29a      	uxth	r2, r3
 801af4a:	88fb      	ldrh	r3, [r7, #6]
 801af4c:	6839      	ldr	r1, [r7, #0]
 801af4e:	4618      	mov	r0, r3
 801af50:	f001 ff08 	bl	801cd64 <SUBGRF_WriteRegisters>
}
 801af54:	bf00      	nop
 801af56:	3708      	adds	r7, #8
 801af58:	46bd      	mov	sp, r7
 801af5a:	bd80      	pop	{r7, pc}

0801af5c <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b082      	sub	sp, #8
 801af60:	af00      	add	r7, sp, #0
 801af62:	4603      	mov	r3, r0
 801af64:	6039      	str	r1, [r7, #0]
 801af66:	80fb      	strh	r3, [r7, #6]
 801af68:	4613      	mov	r3, r2
 801af6a:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801af6c:	797b      	ldrb	r3, [r7, #5]
 801af6e:	b29a      	uxth	r2, r3
 801af70:	88fb      	ldrh	r3, [r7, #6]
 801af72:	6839      	ldr	r1, [r7, #0]
 801af74:	4618      	mov	r0, r3
 801af76:	f001 ff17 	bl	801cda8 <SUBGRF_ReadRegisters>
}
 801af7a:	bf00      	nop
 801af7c:	3708      	adds	r7, #8
 801af7e:	46bd      	mov	sp, r7
 801af80:	bd80      	pop	{r7, pc}
	...

0801af84 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 801af84:	b580      	push	{r7, lr}
 801af86:	b082      	sub	sp, #8
 801af88:	af00      	add	r7, sp, #0
 801af8a:	4603      	mov	r3, r0
 801af8c:	460a      	mov	r2, r1
 801af8e:	71fb      	strb	r3, [r7, #7]
 801af90:	4613      	mov	r3, r2
 801af92:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 801af94:	79fb      	ldrb	r3, [r7, #7]
 801af96:	2b01      	cmp	r3, #1
 801af98:	d10a      	bne.n	801afb0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801af9a:	4a0e      	ldr	r2, [pc, #56]	; (801afd4 <RadioSetMaxPayloadLength+0x50>)
 801af9c:	79bb      	ldrb	r3, [r7, #6]
 801af9e:	7013      	strb	r3, [r2, #0]
 801afa0:	4b0c      	ldr	r3, [pc, #48]	; (801afd4 <RadioSetMaxPayloadLength+0x50>)
 801afa2:	781a      	ldrb	r2, [r3, #0]
 801afa4:	4b0c      	ldr	r3, [pc, #48]	; (801afd8 <RadioSetMaxPayloadLength+0x54>)
 801afa6:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afa8:	480c      	ldr	r0, [pc, #48]	; (801afdc <RadioSetMaxPayloadLength+0x58>)
 801afaa:	f001 fd6b 	bl	801ca84 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801afae:	e00d      	b.n	801afcc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 801afb0:	4b09      	ldr	r3, [pc, #36]	; (801afd8 <RadioSetMaxPayloadLength+0x54>)
 801afb2:	7d5b      	ldrb	r3, [r3, #21]
 801afb4:	2b01      	cmp	r3, #1
 801afb6:	d109      	bne.n	801afcc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 801afb8:	4a06      	ldr	r2, [pc, #24]	; (801afd4 <RadioSetMaxPayloadLength+0x50>)
 801afba:	79bb      	ldrb	r3, [r7, #6]
 801afbc:	7013      	strb	r3, [r2, #0]
 801afbe:	4b05      	ldr	r3, [pc, #20]	; (801afd4 <RadioSetMaxPayloadLength+0x50>)
 801afc0:	781a      	ldrb	r2, [r3, #0]
 801afc2:	4b05      	ldr	r3, [pc, #20]	; (801afd8 <RadioSetMaxPayloadLength+0x54>)
 801afc4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801afc6:	4805      	ldr	r0, [pc, #20]	; (801afdc <RadioSetMaxPayloadLength+0x58>)
 801afc8:	f001 fd5c 	bl	801ca84 <SUBGRF_SetPacketParams>
}
 801afcc:	bf00      	nop
 801afce:	3708      	adds	r7, #8
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}
 801afd4:	20000148 	.word	0x20000148
 801afd8:	200017dc 	.word	0x200017dc
 801afdc:	200017ea 	.word	0x200017ea

0801afe0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	b082      	sub	sp, #8
 801afe4:	af00      	add	r7, sp, #0
 801afe6:	4603      	mov	r3, r0
 801afe8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 801afea:	4a13      	ldr	r2, [pc, #76]	; (801b038 <RadioSetPublicNetwork+0x58>)
 801afec:	79fb      	ldrb	r3, [r7, #7]
 801afee:	7313      	strb	r3, [r2, #12]
 801aff0:	4b11      	ldr	r3, [pc, #68]	; (801b038 <RadioSetPublicNetwork+0x58>)
 801aff2:	7b1a      	ldrb	r2, [r3, #12]
 801aff4:	4b10      	ldr	r3, [pc, #64]	; (801b038 <RadioSetPublicNetwork+0x58>)
 801aff6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 801aff8:	2001      	movs	r0, #1
 801affa:	f7ff f811 	bl	801a020 <RadioSetModem>
    if( enable == true )
 801affe:	79fb      	ldrb	r3, [r7, #7]
 801b000:	2b00      	cmp	r3, #0
 801b002:	d00a      	beq.n	801b01a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 801b004:	2134      	movs	r1, #52	; 0x34
 801b006:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b00a:	f001 fe83 	bl	801cd14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 801b00e:	2144      	movs	r1, #68	; 0x44
 801b010:	f240 7041 	movw	r0, #1857	; 0x741
 801b014:	f001 fe7e 	bl	801cd14 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 801b018:	e009      	b.n	801b02e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 801b01a:	2114      	movs	r1, #20
 801b01c:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 801b020:	f001 fe78 	bl	801cd14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 801b024:	2124      	movs	r1, #36	; 0x24
 801b026:	f240 7041 	movw	r0, #1857	; 0x741
 801b02a:	f001 fe73 	bl	801cd14 <SUBGRF_WriteRegister>
}
 801b02e:	bf00      	nop
 801b030:	3708      	adds	r7, #8
 801b032:	46bd      	mov	sp, r7
 801b034:	bd80      	pop	{r7, pc}
 801b036:	bf00      	nop
 801b038:	200017dc 	.word	0x200017dc

0801b03c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 801b040:	f001 ffb8 	bl	801cfb4 <SUBGRF_GetRadioWakeUpTime>
 801b044:	4603      	mov	r3, r0
 801b046:	3303      	adds	r3, #3
}
 801b048:	4618      	mov	r0, r3
 801b04a:	bd80      	pop	{r7, pc}

0801b04c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 801b04c:	b580      	push	{r7, lr}
 801b04e:	b082      	sub	sp, #8
 801b050:	af00      	add	r7, sp, #0
 801b052:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 801b054:	f000 f80e 	bl	801b074 <RadioOnTxTimeoutProcess>
}
 801b058:	bf00      	nop
 801b05a:	3708      	adds	r7, #8
 801b05c:	46bd      	mov	sp, r7
 801b05e:	bd80      	pop	{r7, pc}

0801b060 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 801b060:	b580      	push	{r7, lr}
 801b062:	b082      	sub	sp, #8
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 801b068:	f000 f818 	bl	801b09c <RadioOnRxTimeoutProcess>
}
 801b06c:	bf00      	nop
 801b06e:	3708      	adds	r7, #8
 801b070:	46bd      	mov	sp, r7
 801b072:	bd80      	pop	{r7, pc}

0801b074 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 801b074:	b580      	push	{r7, lr}
 801b076:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b078:	4b07      	ldr	r3, [pc, #28]	; (801b098 <RadioOnTxTimeoutProcess+0x24>)
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	2b00      	cmp	r3, #0
 801b07e:	d008      	beq.n	801b092 <RadioOnTxTimeoutProcess+0x1e>
 801b080:	4b05      	ldr	r3, [pc, #20]	; (801b098 <RadioOnTxTimeoutProcess+0x24>)
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	685b      	ldr	r3, [r3, #4]
 801b086:	2b00      	cmp	r3, #0
 801b088:	d003      	beq.n	801b092 <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 801b08a:	4b03      	ldr	r3, [pc, #12]	; (801b098 <RadioOnTxTimeoutProcess+0x24>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	685b      	ldr	r3, [r3, #4]
 801b090:	4798      	blx	r3
    }
}
 801b092:	bf00      	nop
 801b094:	bd80      	pop	{r7, pc}
 801b096:	bf00      	nop
 801b098:	200017d8 	.word	0x200017d8

0801b09c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b0a0:	4b07      	ldr	r3, [pc, #28]	; (801b0c0 <RadioOnRxTimeoutProcess+0x24>)
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	2b00      	cmp	r3, #0
 801b0a6:	d008      	beq.n	801b0ba <RadioOnRxTimeoutProcess+0x1e>
 801b0a8:	4b05      	ldr	r3, [pc, #20]	; (801b0c0 <RadioOnRxTimeoutProcess+0x24>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	68db      	ldr	r3, [r3, #12]
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d003      	beq.n	801b0ba <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 801b0b2:	4b03      	ldr	r3, [pc, #12]	; (801b0c0 <RadioOnRxTimeoutProcess+0x24>)
 801b0b4:	681b      	ldr	r3, [r3, #0]
 801b0b6:	68db      	ldr	r3, [r3, #12]
 801b0b8:	4798      	blx	r3
    }
}
 801b0ba:	bf00      	nop
 801b0bc:	bd80      	pop	{r7, pc}
 801b0be:	bf00      	nop
 801b0c0:	200017d8 	.word	0x200017d8

0801b0c4 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	b082      	sub	sp, #8
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	4603      	mov	r3, r0
 801b0cc:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 801b0ce:	4a05      	ldr	r2, [pc, #20]	; (801b0e4 <RadioOnDioIrq+0x20>)
 801b0d0:	88fb      	ldrh	r3, [r7, #6]
 801b0d2:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 801b0d6:	f000 f807 	bl	801b0e8 <RadioIrqProcess>
}
 801b0da:	bf00      	nop
 801b0dc:	3708      	adds	r7, #8
 801b0de:	46bd      	mov	sp, r7
 801b0e0:	bd80      	pop	{r7, pc}
 801b0e2:	bf00      	nop
 801b0e4:	200017dc 	.word	0x200017dc

0801b0e8 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 801b0e8:	b5b0      	push	{r4, r5, r7, lr}
 801b0ea:	b082      	sub	sp, #8
 801b0ec:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 801b0ee:	2300      	movs	r3, #0
 801b0f0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 801b0f2:	2300      	movs	r3, #0
 801b0f4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 801b0f6:	4ba8      	ldr	r3, [pc, #672]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b0f8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 801b0fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b100:	f000 810d 	beq.w	801b31e <RadioIrqProcess+0x236>
 801b104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b108:	f300 81e8 	bgt.w	801b4dc <RadioIrqProcess+0x3f4>
 801b10c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b110:	f000 80f1 	beq.w	801b2f6 <RadioIrqProcess+0x20e>
 801b114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b118:	f300 81e0 	bgt.w	801b4dc <RadioIrqProcess+0x3f4>
 801b11c:	2b80      	cmp	r3, #128	; 0x80
 801b11e:	f000 80d6 	beq.w	801b2ce <RadioIrqProcess+0x1e6>
 801b122:	2b80      	cmp	r3, #128	; 0x80
 801b124:	f300 81da 	bgt.w	801b4dc <RadioIrqProcess+0x3f4>
 801b128:	2b20      	cmp	r3, #32
 801b12a:	dc49      	bgt.n	801b1c0 <RadioIrqProcess+0xd8>
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	f340 81d5 	ble.w	801b4dc <RadioIrqProcess+0x3f4>
 801b132:	3b01      	subs	r3, #1
 801b134:	2b1f      	cmp	r3, #31
 801b136:	f200 81d1 	bhi.w	801b4dc <RadioIrqProcess+0x3f4>
 801b13a:	a201      	add	r2, pc, #4	; (adr r2, 801b140 <RadioIrqProcess+0x58>)
 801b13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b140:	0801b1c9 	.word	0x0801b1c9
 801b144:	0801b203 	.word	0x0801b203
 801b148:	0801b4dd 	.word	0x0801b4dd
 801b14c:	0801b3b9 	.word	0x0801b3b9
 801b150:	0801b4dd 	.word	0x0801b4dd
 801b154:	0801b4dd 	.word	0x0801b4dd
 801b158:	0801b4dd 	.word	0x0801b4dd
 801b15c:	0801b435 	.word	0x0801b435
 801b160:	0801b4dd 	.word	0x0801b4dd
 801b164:	0801b4dd 	.word	0x0801b4dd
 801b168:	0801b4dd 	.word	0x0801b4dd
 801b16c:	0801b4dd 	.word	0x0801b4dd
 801b170:	0801b4dd 	.word	0x0801b4dd
 801b174:	0801b4dd 	.word	0x0801b4dd
 801b178:	0801b4dd 	.word	0x0801b4dd
 801b17c:	0801b451 	.word	0x0801b451
 801b180:	0801b4dd 	.word	0x0801b4dd
 801b184:	0801b4dd 	.word	0x0801b4dd
 801b188:	0801b4dd 	.word	0x0801b4dd
 801b18c:	0801b4dd 	.word	0x0801b4dd
 801b190:	0801b4dd 	.word	0x0801b4dd
 801b194:	0801b4dd 	.word	0x0801b4dd
 801b198:	0801b4dd 	.word	0x0801b4dd
 801b19c:	0801b4dd 	.word	0x0801b4dd
 801b1a0:	0801b4dd 	.word	0x0801b4dd
 801b1a4:	0801b4dd 	.word	0x0801b4dd
 801b1a8:	0801b4dd 	.word	0x0801b4dd
 801b1ac:	0801b4dd 	.word	0x0801b4dd
 801b1b0:	0801b4dd 	.word	0x0801b4dd
 801b1b4:	0801b4dd 	.word	0x0801b4dd
 801b1b8:	0801b4dd 	.word	0x0801b4dd
 801b1bc:	0801b45f 	.word	0x0801b45f
 801b1c0:	2b40      	cmp	r3, #64	; 0x40
 801b1c2:	f000 816d 	beq.w	801b4a0 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 801b1c6:	e189      	b.n	801b4dc <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 801b1c8:	4874      	ldr	r0, [pc, #464]	; (801b39c <RadioIrqProcess+0x2b4>)
 801b1ca:	f002 ffbf 	bl	801e14c <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	f001 f81c 	bl	801c20c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 801b1d4:	f002 f892 	bl	801d2fc <RFW_Is_LongPacketModeEnabled>
 801b1d8:	4603      	mov	r3, r0
 801b1da:	2b01      	cmp	r3, #1
 801b1dc:	d101      	bne.n	801b1e2 <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 801b1de:	f002 f8b6 	bl	801d34e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 801b1e2:	4b6f      	ldr	r3, [pc, #444]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	2b00      	cmp	r3, #0
 801b1e8:	f000 817a 	beq.w	801b4e0 <RadioIrqProcess+0x3f8>
 801b1ec:	4b6c      	ldr	r3, [pc, #432]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	f000 8174 	beq.w	801b4e0 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 801b1f8:	4b69      	ldr	r3, [pc, #420]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	681b      	ldr	r3, [r3, #0]
 801b1fe:	4798      	blx	r3
        break;
 801b200:	e16e      	b.n	801b4e0 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 801b202:	4868      	ldr	r0, [pc, #416]	; (801b3a4 <RadioIrqProcess+0x2bc>)
 801b204:	f002 ffa2 	bl	801e14c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b208:	4b63      	ldr	r3, [pc, #396]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b20a:	785b      	ldrb	r3, [r3, #1]
 801b20c:	f083 0301 	eor.w	r3, r3, #1
 801b210:	b2db      	uxtb	r3, r3
 801b212:	2b00      	cmp	r3, #0
 801b214:	d014      	beq.n	801b240 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 801b216:	2000      	movs	r0, #0
 801b218:	f000 fff8 	bl	801c20c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 801b21c:	2100      	movs	r1, #0
 801b21e:	f640 1002 	movw	r0, #2306	; 0x902
 801b222:	f001 fd77 	bl	801cd14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 801b226:	f640 1044 	movw	r0, #2372	; 0x944
 801b22a:	f001 fd87 	bl	801cd3c <SUBGRF_ReadRegister>
 801b22e:	4603      	mov	r3, r0
 801b230:	f043 0302 	orr.w	r3, r3, #2
 801b234:	b2db      	uxtb	r3, r3
 801b236:	4619      	mov	r1, r3
 801b238:	f640 1044 	movw	r0, #2372	; 0x944
 801b23c:	f001 fd6a 	bl	801cd14 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 801b240:	1dfb      	adds	r3, r7, #7
 801b242:	22ff      	movs	r2, #255	; 0xff
 801b244:	4619      	mov	r1, r3
 801b246:	4858      	ldr	r0, [pc, #352]	; (801b3a8 <RadioIrqProcess+0x2c0>)
 801b248:	f000 feb0 	bl	801bfac <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 801b24c:	4857      	ldr	r0, [pc, #348]	; (801b3ac <RadioIrqProcess+0x2c4>)
 801b24e:	f001 fd0f 	bl	801cc70 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 801b252:	4b53      	ldr	r3, [pc, #332]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	2b00      	cmp	r3, #0
 801b258:	f000 8144 	beq.w	801b4e4 <RadioIrqProcess+0x3fc>
 801b25c:	4b50      	ldr	r3, [pc, #320]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	689b      	ldr	r3, [r3, #8]
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 813e 	beq.w	801b4e4 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 801b268:	4b4b      	ldr	r3, [pc, #300]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b26a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b26e:	2b01      	cmp	r3, #1
 801b270:	d10e      	bne.n	801b290 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 801b272:	4b4b      	ldr	r3, [pc, #300]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	689c      	ldr	r4, [r3, #8]
 801b278:	79fb      	ldrb	r3, [r7, #7]
 801b27a:	b299      	uxth	r1, r3
 801b27c:	4b46      	ldr	r3, [pc, #280]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b27e:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 801b282:	b21a      	sxth	r2, r3
 801b284:	4b44      	ldr	r3, [pc, #272]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b286:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 801b28a:	4847      	ldr	r0, [pc, #284]	; (801b3a8 <RadioIrqProcess+0x2c0>)
 801b28c:	47a0      	blx	r4
                break;
 801b28e:	e01d      	b.n	801b2cc <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 801b290:	4b41      	ldr	r3, [pc, #260]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b294:	463a      	mov	r2, r7
 801b296:	4611      	mov	r1, r2
 801b298:	4618      	mov	r0, r3
 801b29a:	f001 ff7d 	bl	801d198 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 801b29e:	4b40      	ldr	r3, [pc, #256]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b2a0:	681b      	ldr	r3, [r3, #0]
 801b2a2:	689c      	ldr	r4, [r3, #8]
 801b2a4:	79fb      	ldrb	r3, [r7, #7]
 801b2a6:	b299      	uxth	r1, r3
 801b2a8:	4b3b      	ldr	r3, [pc, #236]	; (801b398 <RadioIrqProcess+0x2b0>)
 801b2aa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 801b2ae:	b218      	sxth	r0, r3
 801b2b0:	683b      	ldr	r3, [r7, #0]
 801b2b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 801b2b6:	4a3e      	ldr	r2, [pc, #248]	; (801b3b0 <RadioIrqProcess+0x2c8>)
 801b2b8:	fb82 5203 	smull	r5, r2, r2, r3
 801b2bc:	1192      	asrs	r2, r2, #6
 801b2be:	17db      	asrs	r3, r3, #31
 801b2c0:	1ad3      	subs	r3, r2, r3
 801b2c2:	b25b      	sxtb	r3, r3
 801b2c4:	4602      	mov	r2, r0
 801b2c6:	4838      	ldr	r0, [pc, #224]	; (801b3a8 <RadioIrqProcess+0x2c0>)
 801b2c8:	47a0      	blx	r4
                break;
 801b2ca:	bf00      	nop
        break;
 801b2cc:	e10a      	b.n	801b4e4 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 801b2ce:	2000      	movs	r0, #0
 801b2d0:	f000 ff9c 	bl	801c20c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2d4:	4b32      	ldr	r3, [pc, #200]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	2b00      	cmp	r3, #0
 801b2da:	f000 8105 	beq.w	801b4e8 <RadioIrqProcess+0x400>
 801b2de:	4b30      	ldr	r3, [pc, #192]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	699b      	ldr	r3, [r3, #24]
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	f000 80ff 	beq.w	801b4e8 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 801b2ea:	4b2d      	ldr	r3, [pc, #180]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	699b      	ldr	r3, [r3, #24]
 801b2f0:	2000      	movs	r0, #0
 801b2f2:	4798      	blx	r3
        break;
 801b2f4:	e0f8      	b.n	801b4e8 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 801b2f6:	2000      	movs	r0, #0
 801b2f8:	f000 ff88 	bl	801c20c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801b2fc:	4b28      	ldr	r3, [pc, #160]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	2b00      	cmp	r3, #0
 801b302:	f000 80f3 	beq.w	801b4ec <RadioIrqProcess+0x404>
 801b306:	4b26      	ldr	r3, [pc, #152]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	699b      	ldr	r3, [r3, #24]
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	f000 80ed 	beq.w	801b4ec <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 801b312:	4b23      	ldr	r3, [pc, #140]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b314:	681b      	ldr	r3, [r3, #0]
 801b316:	699b      	ldr	r3, [r3, #24]
 801b318:	2001      	movs	r0, #1
 801b31a:	4798      	blx	r3
        break;
 801b31c:	e0e6      	b.n	801b4ec <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 801b31e:	4b25      	ldr	r3, [pc, #148]	; (801b3b4 <RadioIrqProcess+0x2cc>)
 801b320:	2201      	movs	r2, #1
 801b322:	2100      	movs	r1, #0
 801b324:	2002      	movs	r0, #2
 801b326:	f003 f91b 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801b32a:	f000 fe25 	bl	801bf78 <SUBGRF_GetOperatingMode>
 801b32e:	4603      	mov	r3, r0
 801b330:	2b04      	cmp	r3, #4
 801b332:	d115      	bne.n	801b360 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 801b334:	4819      	ldr	r0, [pc, #100]	; (801b39c <RadioIrqProcess+0x2b4>)
 801b336:	f002 ff09 	bl	801e14c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b33a:	2000      	movs	r0, #0
 801b33c:	f000 ff66 	bl	801c20c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801b340:	4b17      	ldr	r3, [pc, #92]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	2b00      	cmp	r3, #0
 801b346:	f000 80d3 	beq.w	801b4f0 <RadioIrqProcess+0x408>
 801b34a:	4b15      	ldr	r3, [pc, #84]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b34c:	681b      	ldr	r3, [r3, #0]
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	2b00      	cmp	r3, #0
 801b352:	f000 80cd 	beq.w	801b4f0 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 801b356:	4b12      	ldr	r3, [pc, #72]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b358:	681b      	ldr	r3, [r3, #0]
 801b35a:	685b      	ldr	r3, [r3, #4]
 801b35c:	4798      	blx	r3
        break;
 801b35e:	e0c7      	b.n	801b4f0 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801b360:	f000 fe0a 	bl	801bf78 <SUBGRF_GetOperatingMode>
 801b364:	4603      	mov	r3, r0
 801b366:	2b05      	cmp	r3, #5
 801b368:	f040 80c2 	bne.w	801b4f0 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 801b36c:	480d      	ldr	r0, [pc, #52]	; (801b3a4 <RadioIrqProcess+0x2bc>)
 801b36e:	f002 feed 	bl	801e14c <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801b372:	2000      	movs	r0, #0
 801b374:	f000 ff4a 	bl	801c20c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b378:	4b09      	ldr	r3, [pc, #36]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b37a:	681b      	ldr	r3, [r3, #0]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	f000 80b7 	beq.w	801b4f0 <RadioIrqProcess+0x408>
 801b382:	4b07      	ldr	r3, [pc, #28]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	68db      	ldr	r3, [r3, #12]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	f000 80b1 	beq.w	801b4f0 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 801b38e:	4b04      	ldr	r3, [pc, #16]	; (801b3a0 <RadioIrqProcess+0x2b8>)
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	68db      	ldr	r3, [r3, #12]
 801b394:	4798      	blx	r3
        break;
 801b396:	e0ab      	b.n	801b4f0 <RadioIrqProcess+0x408>
 801b398:	200017dc 	.word	0x200017dc
 801b39c:	20001838 	.word	0x20001838
 801b3a0:	200017d8 	.word	0x200017d8
 801b3a4:	20001850 	.word	0x20001850
 801b3a8:	200016d8 	.word	0x200016d8
 801b3ac:	20001800 	.word	0x20001800
 801b3b0:	10624dd3 	.word	0x10624dd3
 801b3b4:	0801f434 	.word	0x0801f434
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 801b3b8:	4b54      	ldr	r3, [pc, #336]	; (801b50c <RadioIrqProcess+0x424>)
 801b3ba:	2201      	movs	r2, #1
 801b3bc:	2100      	movs	r1, #0
 801b3be:	2002      	movs	r0, #2
 801b3c0:	f003 f8ce 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 801b3c4:	4b52      	ldr	r3, [pc, #328]	; (801b510 <RadioIrqProcess+0x428>)
 801b3c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	f000 8093 	beq.w	801b4f4 <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 801b3ce:	4a51      	ldr	r2, [pc, #324]	; (801b514 <RadioIrqProcess+0x42c>)
 801b3d0:	4b4f      	ldr	r3, [pc, #316]	; (801b510 <RadioIrqProcess+0x428>)
 801b3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3d4:	0c1b      	lsrs	r3, r3, #16
 801b3d6:	b2db      	uxtb	r3, r3
 801b3d8:	4619      	mov	r1, r3
 801b3da:	f640 1003 	movw	r0, #2307	; 0x903
 801b3de:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 801b3e0:	4a4c      	ldr	r2, [pc, #304]	; (801b514 <RadioIrqProcess+0x42c>)
 801b3e2:	4b4b      	ldr	r3, [pc, #300]	; (801b510 <RadioIrqProcess+0x428>)
 801b3e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3e6:	0a1b      	lsrs	r3, r3, #8
 801b3e8:	b2db      	uxtb	r3, r3
 801b3ea:	4619      	mov	r1, r3
 801b3ec:	f640 1004 	movw	r0, #2308	; 0x904
 801b3f0:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 801b3f2:	4a48      	ldr	r2, [pc, #288]	; (801b514 <RadioIrqProcess+0x42c>)
 801b3f4:	4b46      	ldr	r3, [pc, #280]	; (801b510 <RadioIrqProcess+0x428>)
 801b3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b3f8:	b2db      	uxtb	r3, r3
 801b3fa:	4619      	mov	r1, r3
 801b3fc:	f640 1005 	movw	r0, #2309	; 0x905
 801b400:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 801b402:	4c44      	ldr	r4, [pc, #272]	; (801b514 <RadioIrqProcess+0x42c>)
 801b404:	4b44      	ldr	r3, [pc, #272]	; (801b518 <RadioIrqProcess+0x430>)
 801b406:	f640 1002 	movw	r0, #2306	; 0x902
 801b40a:	4798      	blx	r3
 801b40c:	4603      	mov	r3, r0
 801b40e:	f043 0301 	orr.w	r3, r3, #1
 801b412:	b2db      	uxtb	r3, r3
 801b414:	4619      	mov	r1, r3
 801b416:	f640 1002 	movw	r0, #2306	; 0x902
 801b41a:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 801b41c:	4b3c      	ldr	r3, [pc, #240]	; (801b510 <RadioIrqProcess+0x428>)
 801b41e:	2200      	movs	r2, #0
 801b420:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801b422:	2300      	movs	r3, #0
 801b424:	2200      	movs	r2, #0
 801b426:	f240 2162 	movw	r1, #610	; 0x262
 801b42a:	f240 2062 	movw	r0, #610	; 0x262
 801b42e:	f001 f8c1 	bl	801c5b4 <SUBGRF_SetDioIrqParams>
        break;
 801b432:	e05f      	b.n	801b4f4 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 801b434:	4b39      	ldr	r3, [pc, #228]	; (801b51c <RadioIrqProcess+0x434>)
 801b436:	2201      	movs	r2, #1
 801b438:	2100      	movs	r1, #0
 801b43a:	2002      	movs	r0, #2
 801b43c:	f003 f890 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801b440:	f001 ff55 	bl	801d2ee <RFW_Is_Init>
 801b444:	4603      	mov	r3, r0
 801b446:	2b01      	cmp	r3, #1
 801b448:	d156      	bne.n	801b4f8 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 801b44a:	f001 ff86 	bl	801d35a <RFW_ReceivePayload>
        break;
 801b44e:	e053      	b.n	801b4f8 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801b450:	4b33      	ldr	r3, [pc, #204]	; (801b520 <RadioIrqProcess+0x438>)
 801b452:	2201      	movs	r2, #1
 801b454:	2100      	movs	r1, #0
 801b456:	2002      	movs	r0, #2
 801b458:	f003 f882 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b45c:	e051      	b.n	801b502 <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801b45e:	4831      	ldr	r0, [pc, #196]	; (801b524 <RadioIrqProcess+0x43c>)
 801b460:	f002 fe74 	bl	801e14c <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 801b464:	4b2a      	ldr	r3, [pc, #168]	; (801b510 <RadioIrqProcess+0x428>)
 801b466:	785b      	ldrb	r3, [r3, #1]
 801b468:	f083 0301 	eor.w	r3, r3, #1
 801b46c:	b2db      	uxtb	r3, r3
 801b46e:	2b00      	cmp	r3, #0
 801b470:	d002      	beq.n	801b478 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801b472:	2000      	movs	r0, #0
 801b474:	f000 feca 	bl	801c20c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 801b478:	4b2b      	ldr	r3, [pc, #172]	; (801b528 <RadioIrqProcess+0x440>)
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	2b00      	cmp	r3, #0
 801b47e:	d03d      	beq.n	801b4fc <RadioIrqProcess+0x414>
 801b480:	4b29      	ldr	r3, [pc, #164]	; (801b528 <RadioIrqProcess+0x440>)
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	68db      	ldr	r3, [r3, #12]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d038      	beq.n	801b4fc <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 801b48a:	4b27      	ldr	r3, [pc, #156]	; (801b528 <RadioIrqProcess+0x440>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	68db      	ldr	r3, [r3, #12]
 801b490:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801b492:	4b26      	ldr	r3, [pc, #152]	; (801b52c <RadioIrqProcess+0x444>)
 801b494:	2201      	movs	r2, #1
 801b496:	2100      	movs	r1, #0
 801b498:	2002      	movs	r0, #2
 801b49a:	f003 f861 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801b49e:	e02d      	b.n	801b4fc <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801b4a0:	4b23      	ldr	r3, [pc, #140]	; (801b530 <RadioIrqProcess+0x448>)
 801b4a2:	2201      	movs	r2, #1
 801b4a4:	2100      	movs	r1, #0
 801b4a6:	2002      	movs	r0, #2
 801b4a8:	f003 f85a 	bl	801e560 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 801b4ac:	4b18      	ldr	r3, [pc, #96]	; (801b510 <RadioIrqProcess+0x428>)
 801b4ae:	785b      	ldrb	r3, [r3, #1]
 801b4b0:	f083 0301 	eor.w	r3, r3, #1
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	2b00      	cmp	r3, #0
 801b4b8:	d002      	beq.n	801b4c0 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 801b4ba:	2000      	movs	r0, #0
 801b4bc:	f000 fea6 	bl	801c20c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801b4c0:	4b19      	ldr	r3, [pc, #100]	; (801b528 <RadioIrqProcess+0x440>)
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d01b      	beq.n	801b500 <RadioIrqProcess+0x418>
 801b4c8:	4b17      	ldr	r3, [pc, #92]	; (801b528 <RadioIrqProcess+0x440>)
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	691b      	ldr	r3, [r3, #16]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d016      	beq.n	801b500 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 801b4d2:	4b15      	ldr	r3, [pc, #84]	; (801b528 <RadioIrqProcess+0x440>)
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	691b      	ldr	r3, [r3, #16]
 801b4d8:	4798      	blx	r3
        break;
 801b4da:	e011      	b.n	801b500 <RadioIrqProcess+0x418>
        break;
 801b4dc:	bf00      	nop
 801b4de:	e010      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4e0:	bf00      	nop
 801b4e2:	e00e      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4e4:	bf00      	nop
 801b4e6:	e00c      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4e8:	bf00      	nop
 801b4ea:	e00a      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4ec:	bf00      	nop
 801b4ee:	e008      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4f0:	bf00      	nop
 801b4f2:	e006      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4f4:	bf00      	nop
 801b4f6:	e004      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4f8:	bf00      	nop
 801b4fa:	e002      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b4fc:	bf00      	nop
 801b4fe:	e000      	b.n	801b502 <RadioIrqProcess+0x41a>
        break;
 801b500:	bf00      	nop
    }
}
 801b502:	bf00      	nop
 801b504:	3708      	adds	r7, #8
 801b506:	46bd      	mov	sp, r7
 801b508:	bdb0      	pop	{r4, r5, r7, pc}
 801b50a:	bf00      	nop
 801b50c:	0801f448 	.word	0x0801f448
 801b510:	200017dc 	.word	0x200017dc
 801b514:	0801aef7 	.word	0x0801aef7
 801b518:	0801af1b 	.word	0x0801af1b
 801b51c:	0801f454 	.word	0x0801f454
 801b520:	0801f460 	.word	0x0801f460
 801b524:	20001850 	.word	0x20001850
 801b528:	200017d8 	.word	0x200017d8
 801b52c:	0801f46c 	.word	0x0801f46c
 801b530:	0801f478 	.word	0x0801f478

0801b534 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 801b534:	b580      	push	{r7, lr}
 801b536:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801b538:	4b09      	ldr	r3, [pc, #36]	; (801b560 <RadioTxPrbs+0x2c>)
 801b53a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801b53e:	2101      	movs	r1, #1
 801b540:	4618      	mov	r0, r3
 801b542:	f001 fcdb 	bl	801cefc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 801b546:	4b07      	ldr	r3, [pc, #28]	; (801b564 <RadioTxPrbs+0x30>)
 801b548:	212d      	movs	r1, #45	; 0x2d
 801b54a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801b54e:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801b550:	f000 ff1f 	bl	801c392 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 801b554:	4804      	ldr	r0, [pc, #16]	; (801b568 <RadioTxPrbs+0x34>)
 801b556:	f000 fe75 	bl	801c244 <SUBGRF_SetTx>
}
 801b55a:	bf00      	nop
 801b55c:	bd80      	pop	{r7, pc}
 801b55e:	bf00      	nop
 801b560:	200017dc 	.word	0x200017dc
 801b564:	0801aef7 	.word	0x0801aef7
 801b568:	000fffff 	.word	0x000fffff

0801b56c <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 801b56c:	b580      	push	{r7, lr}
 801b56e:	b084      	sub	sp, #16
 801b570:	af00      	add	r7, sp, #0
 801b572:	4603      	mov	r3, r0
 801b574:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 801b576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b57a:	4618      	mov	r0, r3
 801b57c:	f001 fce6 	bl	801cf4c <SUBGRF_SetRfTxPower>
 801b580:	4603      	mov	r3, r0
 801b582:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801b584:	210e      	movs	r1, #14
 801b586:	f640 101f 	movw	r0, #2335	; 0x91f
 801b58a:	f001 fbc3 	bl	801cd14 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801b58e:	7bfb      	ldrb	r3, [r7, #15]
 801b590:	2101      	movs	r1, #1
 801b592:	4618      	mov	r0, r3
 801b594:	f001 fcb2 	bl	801cefc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801b598:	f000 fef2 	bl	801c380 <SUBGRF_SetTxContinuousWave>
}
 801b59c:	bf00      	nop
 801b59e:	3710      	adds	r7, #16
 801b5a0:	46bd      	mov	sp, r7
 801b5a2:	bd80      	pop	{r7, pc}

0801b5a4 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 801b5a4:	b480      	push	{r7}
 801b5a6:	b089      	sub	sp, #36	; 0x24
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	60f8      	str	r0, [r7, #12]
 801b5ac:	60b9      	str	r1, [r7, #8]
 801b5ae:	4613      	mov	r3, r2
 801b5b0:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 801b5ba:	2300      	movs	r3, #0
 801b5bc:	61bb      	str	r3, [r7, #24]
 801b5be:	e011      	b.n	801b5e4 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 801b5c0:	69bb      	ldr	r3, [r7, #24]
 801b5c2:	68ba      	ldr	r2, [r7, #8]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	781a      	ldrb	r2, [r3, #0]
 801b5c8:	69bb      	ldr	r3, [r7, #24]
 801b5ca:	68b9      	ldr	r1, [r7, #8]
 801b5cc:	440b      	add	r3, r1
 801b5ce:	43d2      	mvns	r2, r2
 801b5d0:	b2d2      	uxtb	r2, r2
 801b5d2:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 801b5d4:	69bb      	ldr	r3, [r7, #24]
 801b5d6:	68fa      	ldr	r2, [r7, #12]
 801b5d8:	4413      	add	r3, r2
 801b5da:	2200      	movs	r2, #0
 801b5dc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 801b5de:	69bb      	ldr	r3, [r7, #24]
 801b5e0:	3301      	adds	r3, #1
 801b5e2:	61bb      	str	r3, [r7, #24]
 801b5e4:	79fb      	ldrb	r3, [r7, #7]
 801b5e6:	69ba      	ldr	r2, [r7, #24]
 801b5e8:	429a      	cmp	r2, r3
 801b5ea:	dbe9      	blt.n	801b5c0 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 801b5ec:	2300      	movs	r3, #0
 801b5ee:	61bb      	str	r3, [r7, #24]
 801b5f0:	e049      	b.n	801b686 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 801b5f2:	69bb      	ldr	r3, [r7, #24]
 801b5f4:	425a      	negs	r2, r3
 801b5f6:	f003 0307 	and.w	r3, r3, #7
 801b5fa:	f002 0207 	and.w	r2, r2, #7
 801b5fe:	bf58      	it	pl
 801b600:	4253      	negpl	r3, r2
 801b602:	b2db      	uxtb	r3, r3
 801b604:	f1c3 0307 	rsb	r3, r3, #7
 801b608:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801b60a:	69bb      	ldr	r3, [r7, #24]
 801b60c:	2b00      	cmp	r3, #0
 801b60e:	da00      	bge.n	801b612 <payload_integration+0x6e>
 801b610:	3307      	adds	r3, #7
 801b612:	10db      	asrs	r3, r3, #3
 801b614:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 801b616:	69bb      	ldr	r3, [r7, #24]
 801b618:	3301      	adds	r3, #1
 801b61a:	425a      	negs	r2, r3
 801b61c:	f003 0307 	and.w	r3, r3, #7
 801b620:	f002 0207 	and.w	r2, r2, #7
 801b624:	bf58      	it	pl
 801b626:	4253      	negpl	r3, r2
 801b628:	b2db      	uxtb	r3, r3
 801b62a:	f1c3 0307 	rsb	r3, r3, #7
 801b62e:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 801b630:	69bb      	ldr	r3, [r7, #24]
 801b632:	3301      	adds	r3, #1
 801b634:	2b00      	cmp	r3, #0
 801b636:	da00      	bge.n	801b63a <payload_integration+0x96>
 801b638:	3307      	adds	r3, #7
 801b63a:	10db      	asrs	r3, r3, #3
 801b63c:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 801b63e:	7dbb      	ldrb	r3, [r7, #22]
 801b640:	68ba      	ldr	r2, [r7, #8]
 801b642:	4413      	add	r3, r2
 801b644:	781b      	ldrb	r3, [r3, #0]
 801b646:	461a      	mov	r2, r3
 801b648:	7dfb      	ldrb	r3, [r7, #23]
 801b64a:	fa42 f303 	asr.w	r3, r2, r3
 801b64e:	b2db      	uxtb	r3, r3
 801b650:	f003 0301 	and.w	r3, r3, #1
 801b654:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 801b656:	7ffa      	ldrb	r2, [r7, #31]
 801b658:	7cfb      	ldrb	r3, [r7, #19]
 801b65a:	4053      	eors	r3, r2
 801b65c:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 801b65e:	7d3b      	ldrb	r3, [r7, #20]
 801b660:	68fa      	ldr	r2, [r7, #12]
 801b662:	4413      	add	r3, r2
 801b664:	781b      	ldrb	r3, [r3, #0]
 801b666:	b25a      	sxtb	r2, r3
 801b668:	7ff9      	ldrb	r1, [r7, #31]
 801b66a:	7d7b      	ldrb	r3, [r7, #21]
 801b66c:	fa01 f303 	lsl.w	r3, r1, r3
 801b670:	b25b      	sxtb	r3, r3
 801b672:	4313      	orrs	r3, r2
 801b674:	b259      	sxtb	r1, r3
 801b676:	7d3b      	ldrb	r3, [r7, #20]
 801b678:	68fa      	ldr	r2, [r7, #12]
 801b67a:	4413      	add	r3, r2
 801b67c:	b2ca      	uxtb	r2, r1
 801b67e:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 801b680:	69bb      	ldr	r3, [r7, #24]
 801b682:	3301      	adds	r3, #1
 801b684:	61bb      	str	r3, [r7, #24]
 801b686:	79fb      	ldrb	r3, [r7, #7]
 801b688:	00db      	lsls	r3, r3, #3
 801b68a:	69ba      	ldr	r2, [r7, #24]
 801b68c:	429a      	cmp	r2, r3
 801b68e:	dbb0      	blt.n	801b5f2 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 801b690:	7ffb      	ldrb	r3, [r7, #31]
 801b692:	01db      	lsls	r3, r3, #7
 801b694:	b25a      	sxtb	r2, r3
 801b696:	7ffb      	ldrb	r3, [r7, #31]
 801b698:	019b      	lsls	r3, r3, #6
 801b69a:	b25b      	sxtb	r3, r3
 801b69c:	4313      	orrs	r3, r2
 801b69e:	b25b      	sxtb	r3, r3
 801b6a0:	7ffa      	ldrb	r2, [r7, #31]
 801b6a2:	2a00      	cmp	r2, #0
 801b6a4:	d101      	bne.n	801b6aa <payload_integration+0x106>
 801b6a6:	2220      	movs	r2, #32
 801b6a8:	e000      	b.n	801b6ac <payload_integration+0x108>
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	4313      	orrs	r3, r2
 801b6ae:	b259      	sxtb	r1, r3
 801b6b0:	79fb      	ldrb	r3, [r7, #7]
 801b6b2:	68fa      	ldr	r2, [r7, #12]
 801b6b4:	4413      	add	r3, r2
 801b6b6:	b2ca      	uxtb	r2, r1
 801b6b8:	701a      	strb	r2, [r3, #0]
}
 801b6ba:	bf00      	nop
 801b6bc:	3724      	adds	r7, #36	; 0x24
 801b6be:	46bd      	mov	sp, r7
 801b6c0:	bc80      	pop	{r7}
 801b6c2:	4770      	bx	lr

0801b6c4 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b08c      	sub	sp, #48	; 0x30
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	60b9      	str	r1, [r7, #8]
 801b6cc:	607a      	str	r2, [r7, #4]
 801b6ce:	603b      	str	r3, [r7, #0]
 801b6d0:	4603      	mov	r3, r0
 801b6d2:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 801b6d4:	2300      	movs	r3, #0
 801b6d6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 801b6d8:	2300      	movs	r3, #0
 801b6da:	623b      	str	r3, [r7, #32]
 801b6dc:	2300      	movs	r3, #0
 801b6de:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801b6e0:	f001 fdff 	bl	801d2e2 <RFW_DeInit>

    if( rxContinuous != 0 )
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d001      	beq.n	801b6ee <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 801b6ea:	2300      	movs	r3, #0
 801b6ec:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	bf14      	ite	ne
 801b6f4:	2301      	movne	r3, #1
 801b6f6:	2300      	moveq	r3, #0
 801b6f8:	b2da      	uxtb	r2, r3
 801b6fa:	4ba3      	ldr	r3, [pc, #652]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b6fc:	705a      	strb	r2, [r3, #1]

    switch( modem )
 801b6fe:	7bfb      	ldrb	r3, [r7, #15]
 801b700:	2b00      	cmp	r3, #0
 801b702:	d003      	beq.n	801b70c <RadioSetRxGenericConfig+0x48>
 801b704:	2b01      	cmp	r3, #1
 801b706:	f000 80dc 	beq.w	801b8c2 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801b70a:	e194      	b.n	801ba36 <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 801b70c:	68bb      	ldr	r3, [r7, #8]
 801b70e:	689b      	ldr	r3, [r3, #8]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d003      	beq.n	801b71c <RadioSetRxGenericConfig+0x58>
 801b714:	68bb      	ldr	r3, [r7, #8]
 801b716:	68db      	ldr	r3, [r3, #12]
 801b718:	2b00      	cmp	r3, #0
 801b71a:	d102      	bne.n	801b722 <RadioSetRxGenericConfig+0x5e>
            return -1;
 801b71c:	f04f 33ff 	mov.w	r3, #4294967295
 801b720:	e18a      	b.n	801ba38 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 801b722:	68bb      	ldr	r3, [r7, #8]
 801b724:	7f9b      	ldrb	r3, [r3, #30]
 801b726:	2b08      	cmp	r3, #8
 801b728:	d902      	bls.n	801b730 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801b72a:	f04f 33ff 	mov.w	r3, #4294967295
 801b72e:	e183      	b.n	801ba38 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801b730:	68bb      	ldr	r3, [r7, #8]
 801b732:	6919      	ldr	r1, [r3, #16]
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	7f9b      	ldrb	r3, [r3, #30]
 801b738:	b29a      	uxth	r2, r3
 801b73a:	f107 0320 	add.w	r3, r7, #32
 801b73e:	4618      	mov	r0, r3
 801b740:	f001 fec2 	bl	801d4c8 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b744:	68bb      	ldr	r3, [r7, #8]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	2b00      	cmp	r3, #0
 801b74a:	bf14      	ite	ne
 801b74c:	2301      	movne	r3, #1
 801b74e:	2300      	moveq	r3, #0
 801b750:	b2db      	uxtb	r3, r3
 801b752:	4618      	mov	r0, r3
 801b754:	f000 fe26 	bl	801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801b758:	4b8b      	ldr	r3, [pc, #556]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b75a:	2200      	movs	r2, #0
 801b75c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	689b      	ldr	r3, [r3, #8]
 801b764:	4a88      	ldr	r2, [pc, #544]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b766:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801b768:	68bb      	ldr	r3, [r7, #8]
 801b76a:	f893 2020 	ldrb.w	r2, [r3, #32]
 801b76e:	4b86      	ldr	r3, [pc, #536]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 801b774:	68bb      	ldr	r3, [r7, #8]
 801b776:	685b      	ldr	r3, [r3, #4]
 801b778:	4618      	mov	r0, r3
 801b77a:	f001 fce5 	bl	801d148 <SUBGRF_GetFskBandwidthRegValue>
 801b77e:	4603      	mov	r3, r0
 801b780:	461a      	mov	r2, r3
 801b782:	4b81      	ldr	r3, [pc, #516]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801b788:	4b7f      	ldr	r3, [pc, #508]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b78a:	2200      	movs	r2, #0
 801b78c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 801b78e:	68bb      	ldr	r3, [r7, #8]
 801b790:	68db      	ldr	r3, [r3, #12]
 801b792:	b29b      	uxth	r3, r3
 801b794:	00db      	lsls	r3, r3, #3
 801b796:	b29a      	uxth	r2, r3
 801b798:	4b7b      	ldr	r3, [pc, #492]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b79a:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 801b79c:	68bb      	ldr	r3, [r7, #8]
 801b79e:	7fda      	ldrb	r2, [r3, #31]
 801b7a0:	4b79      	ldr	r3, [pc, #484]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7a2:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801b7a4:	68bb      	ldr	r3, [r7, #8]
 801b7a6:	7f9b      	ldrb	r3, [r3, #30]
 801b7a8:	00db      	lsls	r3, r3, #3
 801b7aa:	b2da      	uxtb	r2, r3
 801b7ac:	4b76      	ldr	r3, [pc, #472]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7ae:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 801b7b6:	4b74      	ldr	r3, [pc, #464]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7b8:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d105      	bne.n	801b7d0 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 801b7c4:	68bb      	ldr	r3, [r7, #8]
 801b7c6:	695b      	ldr	r3, [r3, #20]
 801b7c8:	b2da      	uxtb	r2, r3
 801b7ca:	4b6f      	ldr	r3, [pc, #444]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7cc:	759a      	strb	r2, [r3, #22]
 801b7ce:	e00b      	b.n	801b7e8 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 801b7d0:	68bb      	ldr	r3, [r7, #8]
 801b7d2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7d6:	2b02      	cmp	r3, #2
 801b7d8:	d103      	bne.n	801b7e2 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7da:	4b6b      	ldr	r3, [pc, #428]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7dc:	22ff      	movs	r2, #255	; 0xff
 801b7de:	759a      	strb	r2, [r3, #22]
 801b7e0:	e002      	b.n	801b7e8 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 801b7e2:	4b69      	ldr	r3, [pc, #420]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b7e4:	22ff      	movs	r2, #255	; 0xff
 801b7e6:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801b7e8:	68bb      	ldr	r3, [r7, #8]
 801b7ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b7ee:	2b02      	cmp	r3, #2
 801b7f0:	d004      	beq.n	801b7fc <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801b7f2:	68bb      	ldr	r3, [r7, #8]
 801b7f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 801b7f8:	2b02      	cmp	r3, #2
 801b7fa:	d12d      	bne.n	801b858 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b802:	2bf1      	cmp	r3, #241	; 0xf1
 801b804:	d00c      	beq.n	801b820 <RadioSetRxGenericConfig+0x15c>
 801b806:	68bb      	ldr	r3, [r7, #8]
 801b808:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b80c:	2bf2      	cmp	r3, #242	; 0xf2
 801b80e:	d007      	beq.n	801b820 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801b810:	68bb      	ldr	r3, [r7, #8]
 801b812:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 801b816:	2b01      	cmp	r3, #1
 801b818:	d002      	beq.n	801b820 <RadioSetRxGenericConfig+0x15c>
                return -1;
 801b81a:	f04f 33ff 	mov.w	r3, #4294967295
 801b81e:	e10b      	b.n	801ba38 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 801b820:	2300      	movs	r3, #0
 801b822:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 801b824:	68bb      	ldr	r3, [r7, #8]
 801b826:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801b828:	4b58      	ldr	r3, [pc, #352]	; (801b98c <RadioSetRxGenericConfig+0x2c8>)
 801b82a:	6819      	ldr	r1, [r3, #0]
 801b82c:	f107 0314 	add.w	r3, r7, #20
 801b830:	4a57      	ldr	r2, [pc, #348]	; (801b990 <RadioSetRxGenericConfig+0x2cc>)
 801b832:	4618      	mov	r0, r3
 801b834:	f001 fd48 	bl	801d2c8 <RFW_Init>
 801b838:	4603      	mov	r3, r0
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d002      	beq.n	801b844 <RadioSetRxGenericConfig+0x180>
                return -1;
 801b83e:	f04f 33ff 	mov.w	r3, #4294967295
 801b842:	e0f9      	b.n	801ba38 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801b844:	4b50      	ldr	r3, [pc, #320]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b846:	2200      	movs	r2, #0
 801b848:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801b84a:	4b4f      	ldr	r3, [pc, #316]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b84c:	2201      	movs	r2, #1
 801b84e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801b850:	4b4d      	ldr	r3, [pc, #308]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b852:	2200      	movs	r2, #0
 801b854:	755a      	strb	r2, [r3, #21]
        {
 801b856:	e00e      	b.n	801b876 <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801b858:	68bb      	ldr	r3, [r7, #8]
 801b85a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 801b85e:	4b4a      	ldr	r3, [pc, #296]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b860:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801b862:	68bb      	ldr	r3, [r7, #8]
 801b864:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 801b868:	4b47      	ldr	r3, [pc, #284]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b86a:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 801b86c:	68bb      	ldr	r3, [r7, #8]
 801b86e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 801b872:	4b45      	ldr	r3, [pc, #276]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b874:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801b876:	f7ff fa3c 	bl	801acf2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801b87a:	2000      	movs	r0, #0
 801b87c:	f7fe fbd0 	bl	801a020 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b880:	4844      	ldr	r0, [pc, #272]	; (801b994 <RadioSetRxGenericConfig+0x2d0>)
 801b882:	f001 f82d 	bl	801c8e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b886:	4844      	ldr	r0, [pc, #272]	; (801b998 <RadioSetRxGenericConfig+0x2d4>)
 801b888:	f001 f8fc 	bl	801ca84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801b88c:	f107 0320 	add.w	r3, r7, #32
 801b890:	4618      	mov	r0, r3
 801b892:	f000 fbc0 	bl	801c016 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801b896:	68bb      	ldr	r3, [r7, #8]
 801b898:	8b9b      	ldrh	r3, [r3, #28]
 801b89a:	4618      	mov	r0, r3
 801b89c:	f000 fc0a 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801b8a0:	68bb      	ldr	r3, [r7, #8]
 801b8a2:	8b1b      	ldrh	r3, [r3, #24]
 801b8a4:	4618      	mov	r0, r3
 801b8a6:	f000 fbe5 	bl	801c074 <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 801b8aa:	683b      	ldr	r3, [r7, #0]
 801b8ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801b8b0:	fb03 f202 	mul.w	r2, r3, r2
 801b8b4:	68bb      	ldr	r3, [r7, #8]
 801b8b6:	689b      	ldr	r3, [r3, #8]
 801b8b8:	fbb2 f3f3 	udiv	r3, r2, r3
 801b8bc:	4a32      	ldr	r2, [pc, #200]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b8be:	6093      	str	r3, [r2, #8]
        break;
 801b8c0:	e0b9      	b.n	801ba36 <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 801b8c2:	68bb      	ldr	r3, [r7, #8]
 801b8c4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 801b8c6:	2b00      	cmp	r3, #0
 801b8c8:	d102      	bne.n	801b8d0 <RadioSetRxGenericConfig+0x20c>
            return -1;
 801b8ca:	f04f 33ff 	mov.w	r3, #4294967295
 801b8ce:	e0b3      	b.n	801ba38 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 801b8d0:	68bb      	ldr	r3, [r7, #8]
 801b8d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801b8d6:	2b01      	cmp	r3, #1
 801b8d8:	d104      	bne.n	801b8e4 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 801b8da:	68bb      	ldr	r3, [r7, #8]
 801b8dc:	695b      	ldr	r3, [r3, #20]
 801b8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801b8e2:	e002      	b.n	801b8ea <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 801b8e4:	23ff      	movs	r3, #255	; 0xff
 801b8e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 801b8ea:	68bb      	ldr	r3, [r7, #8]
 801b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	bf14      	ite	ne
 801b8f2:	2301      	movne	r3, #1
 801b8f4:	2300      	moveq	r3, #0
 801b8f6:	b2db      	uxtb	r3, r3
 801b8f8:	4618      	mov	r0, r3
 801b8fa:	f000 fd53 	bl	801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801b8fe:	683b      	ldr	r3, [r7, #0]
 801b900:	b2db      	uxtb	r3, r3
 801b902:	4618      	mov	r0, r3
 801b904:	f000 fd5d 	bl	801c3c2 <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801b908:	4b1f      	ldr	r3, [pc, #124]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b90a:	2201      	movs	r2, #1
 801b90c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801b910:	68bb      	ldr	r3, [r7, #8]
 801b912:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801b916:	4b1c      	ldr	r3, [pc, #112]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b918:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801b91c:	68bb      	ldr	r3, [r7, #8]
 801b91e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 801b922:	4b19      	ldr	r3, [pc, #100]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b924:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 801b92e:	4b16      	ldr	r3, [pc, #88]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b930:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801b934:	68bb      	ldr	r3, [r7, #8]
 801b936:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801b93a:	2b02      	cmp	r3, #2
 801b93c:	d010      	beq.n	801b960 <RadioSetRxGenericConfig+0x29c>
 801b93e:	2b02      	cmp	r3, #2
 801b940:	dc2c      	bgt.n	801b99c <RadioSetRxGenericConfig+0x2d8>
 801b942:	2b00      	cmp	r3, #0
 801b944:	d002      	beq.n	801b94c <RadioSetRxGenericConfig+0x288>
 801b946:	2b01      	cmp	r3, #1
 801b948:	d005      	beq.n	801b956 <RadioSetRxGenericConfig+0x292>
            break;
 801b94a:	e027      	b.n	801b99c <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b94c:	4b0e      	ldr	r3, [pc, #56]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b94e:	2200      	movs	r2, #0
 801b950:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b954:	e023      	b.n	801b99e <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b956:	4b0c      	ldr	r3, [pc, #48]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b958:	2201      	movs	r2, #1
 801b95a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b95e:	e01e      	b.n	801b99e <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b966:	2b0b      	cmp	r3, #11
 801b968:	d004      	beq.n	801b974 <RadioSetRxGenericConfig+0x2b0>
 801b96a:	68bb      	ldr	r3, [r7, #8]
 801b96c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b970:	2b0c      	cmp	r3, #12
 801b972:	d104      	bne.n	801b97e <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801b974:	4b04      	ldr	r3, [pc, #16]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b976:	2201      	movs	r2, #1
 801b978:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b97c:	e00f      	b.n	801b99e <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801b97e:	4b02      	ldr	r3, [pc, #8]	; (801b988 <RadioSetRxGenericConfig+0x2c4>)
 801b980:	2200      	movs	r2, #0
 801b982:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801b986:	e00a      	b.n	801b99e <RadioSetRxGenericConfig+0x2da>
 801b988:	200017dc 	.word	0x200017dc
 801b98c:	200017d8 	.word	0x200017d8
 801b990:	20001850 	.word	0x20001850
 801b994:	20001814 	.word	0x20001814
 801b998:	200017ea 	.word	0x200017ea
            break;
 801b99c:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801b99e:	4b28      	ldr	r3, [pc, #160]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9a0:	2201      	movs	r2, #1
 801b9a2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801b9a4:	68bb      	ldr	r3, [r7, #8]
 801b9a6:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 801b9a8:	4b25      	ldr	r3, [pc, #148]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9aa:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801b9ac:	68bb      	ldr	r3, [r7, #8]
 801b9ae:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 801b9b2:	4b23      	ldr	r3, [pc, #140]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9b4:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801b9b6:	4a22      	ldr	r2, [pc, #136]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801b9bc:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801b9be:	68bb      	ldr	r3, [r7, #8]
 801b9c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801b9c4:	4b1e      	ldr	r3, [pc, #120]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9c6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801b9ca:	68bb      	ldr	r3, [r7, #8]
 801b9cc:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 801b9d0:	4b1b      	ldr	r3, [pc, #108]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 801b9d6:	f7ff f98c 	bl	801acf2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801b9da:	2001      	movs	r0, #1
 801b9dc:	f7fe fb20 	bl	801a020 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801b9e0:	4818      	ldr	r0, [pc, #96]	; (801ba44 <RadioSetRxGenericConfig+0x380>)
 801b9e2:	f000 ff7d 	bl	801c8e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801b9e6:	4818      	ldr	r0, [pc, #96]	; (801ba48 <RadioSetRxGenericConfig+0x384>)
 801b9e8:	f001 f84c 	bl	801ca84 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801b9ec:	4b14      	ldr	r3, [pc, #80]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801b9ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801b9f2:	2b01      	cmp	r3, #1
 801b9f4:	d10d      	bne.n	801ba12 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 801b9f6:	f240 7036 	movw	r0, #1846	; 0x736
 801b9fa:	f001 f99f 	bl	801cd3c <SUBGRF_ReadRegister>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	f023 0304 	bic.w	r3, r3, #4
 801ba04:	b2db      	uxtb	r3, r3
 801ba06:	4619      	mov	r1, r3
 801ba08:	f240 7036 	movw	r0, #1846	; 0x736
 801ba0c:	f001 f982 	bl	801cd14 <SUBGRF_WriteRegister>
 801ba10:	e00c      	b.n	801ba2c <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 801ba12:	f240 7036 	movw	r0, #1846	; 0x736
 801ba16:	f001 f991 	bl	801cd3c <SUBGRF_ReadRegister>
 801ba1a:	4603      	mov	r3, r0
 801ba1c:	f043 0304 	orr.w	r3, r3, #4
 801ba20:	b2db      	uxtb	r3, r3
 801ba22:	4619      	mov	r1, r3
 801ba24:	f240 7036 	movw	r0, #1846	; 0x736
 801ba28:	f001 f974 	bl	801cd14 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 801ba2c:	4b04      	ldr	r3, [pc, #16]	; (801ba40 <RadioSetRxGenericConfig+0x37c>)
 801ba2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ba32:	609a      	str	r2, [r3, #8]
        break;
 801ba34:	bf00      	nop
    }
    return status;
 801ba36:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801ba38:	4618      	mov	r0, r3
 801ba3a:	3730      	adds	r7, #48	; 0x30
 801ba3c:	46bd      	mov	sp, r7
 801ba3e:	bd80      	pop	{r7, pc}
 801ba40:	200017dc 	.word	0x200017dc
 801ba44:	20001814 	.word	0x20001814
 801ba48:	200017ea 	.word	0x200017ea

0801ba4c <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b08e      	sub	sp, #56	; 0x38
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	60b9      	str	r1, [r7, #8]
 801ba54:	607b      	str	r3, [r7, #4]
 801ba56:	4603      	mov	r3, r0
 801ba58:	73fb      	strb	r3, [r7, #15]
 801ba5a:	4613      	mov	r3, r2
 801ba5c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 801ba5e:	2300      	movs	r3, #0
 801ba60:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ba62:	2300      	movs	r3, #0
 801ba64:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801ba66:	f001 fc3c 	bl	801d2e2 <RFW_DeInit>
    switch( modem )
 801ba6a:	7bfb      	ldrb	r3, [r7, #15]
 801ba6c:	2b03      	cmp	r3, #3
 801ba6e:	f200 8204 	bhi.w	801be7a <RadioSetTxGenericConfig+0x42e>
 801ba72:	a201      	add	r2, pc, #4	; (adr r2, 801ba78 <RadioSetTxGenericConfig+0x2c>)
 801ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba78:	0801bbfd 	.word	0x0801bbfd
 801ba7c:	0801bd45 	.word	0x0801bd45
 801ba80:	0801be3d 	.word	0x0801be3d
 801ba84:	0801ba89 	.word	0x0801ba89
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801ba88:	68bb      	ldr	r3, [r7, #8]
 801ba8a:	7c9b      	ldrb	r3, [r3, #18]
 801ba8c:	2b08      	cmp	r3, #8
 801ba8e:	d902      	bls.n	801ba96 <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 801ba90:	f04f 33ff 	mov.w	r3, #4294967295
 801ba94:	e206      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 801ba96:	68bb      	ldr	r3, [r7, #8]
 801ba98:	6899      	ldr	r1, [r3, #8]
 801ba9a:	68bb      	ldr	r3, [r7, #8]
 801ba9c:	7c9b      	ldrb	r3, [r3, #18]
 801ba9e:	b29a      	uxth	r2, r3
 801baa0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801baa4:	4618      	mov	r0, r3
 801baa6:	f001 fd0f 	bl	801d4c8 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 801baaa:	68bb      	ldr	r3, [r7, #8]
 801baac:	681b      	ldr	r3, [r3, #0]
 801baae:	2b00      	cmp	r3, #0
 801bab0:	d102      	bne.n	801bab8 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 801bab2:	f04f 33ff 	mov.w	r3, #4294967295
 801bab6:	e1f5      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 801bab8:	68bb      	ldr	r3, [r7, #8]
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	f242 7210 	movw	r2, #10000	; 0x2710
 801bac0:	4293      	cmp	r3, r2
 801bac2:	d813      	bhi.n	801baec <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 801bac4:	2302      	movs	r3, #2
 801bac6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 801baca:	4b99      	ldr	r3, [pc, #612]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bacc:	2203      	movs	r2, #3
 801bace:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 801bad0:	4b97      	ldr	r3, [pc, #604]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bad2:	2203      	movs	r2, #3
 801bad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bad8:	68bb      	ldr	r3, [r7, #8]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	4a94      	ldr	r2, [pc, #592]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bade:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bae0:	68bb      	ldr	r3, [r7, #8]
 801bae2:	7cda      	ldrb	r2, [r3, #19]
 801bae4:	4b92      	ldr	r3, [pc, #584]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801baea:	e017      	b.n	801bb1c <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 801baec:	2300      	movs	r3, #0
 801baee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801baf2:	4b8f      	ldr	r3, [pc, #572]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801baf4:	2200      	movs	r2, #0
 801baf6:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801baf8:	4b8d      	ldr	r3, [pc, #564]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bafa:	2200      	movs	r2, #0
 801bafc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 801bb00:	68bb      	ldr	r3, [r7, #8]
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	4a8a      	ldr	r2, [pc, #552]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb06:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	7cda      	ldrb	r2, [r3, #19]
 801bb0c:	4b88      	ldr	r3, [pc, #544]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 801bb12:	68bb      	ldr	r3, [r7, #8]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	089b      	lsrs	r3, r3, #2
 801bb18:	4a85      	ldr	r2, [pc, #532]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb1a:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 801bb1c:	68bb      	ldr	r3, [r7, #8]
 801bb1e:	685b      	ldr	r3, [r3, #4]
 801bb20:	b29b      	uxth	r3, r3
 801bb22:	00db      	lsls	r3, r3, #3
 801bb24:	b29a      	uxth	r2, r3
 801bb26:	4b82      	ldr	r3, [pc, #520]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb28:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bb2a:	4b81      	ldr	r3, [pc, #516]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb2c:	2204      	movs	r2, #4
 801bb2e:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 801bb30:	68bb      	ldr	r3, [r7, #8]
 801bb32:	7c9b      	ldrb	r3, [r3, #18]
 801bb34:	00db      	lsls	r3, r3, #3
 801bb36:	b2da      	uxtb	r2, r3
 801bb38:	4b7d      	ldr	r3, [pc, #500]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb3a:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bb3c:	4b7c      	ldr	r3, [pc, #496]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb3e:	2200      	movs	r2, #0
 801bb40:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bb42:	68bb      	ldr	r3, [r7, #8]
 801bb44:	7d9b      	ldrb	r3, [r3, #22]
 801bb46:	2b02      	cmp	r3, #2
 801bb48:	d003      	beq.n	801bb52 <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bb4a:	68bb      	ldr	r3, [r7, #8]
 801bb4c:	7d1b      	ldrb	r3, [r3, #20]
 801bb4e:	2b02      	cmp	r3, #2
 801bb50:	d12b      	bne.n	801bbaa <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bb52:	68bb      	ldr	r3, [r7, #8]
 801bb54:	7d5b      	ldrb	r3, [r3, #21]
 801bb56:	2bf1      	cmp	r3, #241	; 0xf1
 801bb58:	d00a      	beq.n	801bb70 <RadioSetTxGenericConfig+0x124>
 801bb5a:	68bb      	ldr	r3, [r7, #8]
 801bb5c:	7d5b      	ldrb	r3, [r3, #21]
 801bb5e:	2bf2      	cmp	r3, #242	; 0xf2
 801bb60:	d006      	beq.n	801bb70 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bb62:	68bb      	ldr	r3, [r7, #8]
 801bb64:	7d5b      	ldrb	r3, [r3, #21]
 801bb66:	2b01      	cmp	r3, #1
 801bb68:	d002      	beq.n	801bb70 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801bb6a:	f04f 33ff 	mov.w	r3, #4294967295
 801bb6e:	e199      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 801bb70:	68bb      	ldr	r3, [r7, #8]
 801bb72:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 801bb74:	2301      	movs	r3, #1
 801bb76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bb7a:	4b6e      	ldr	r3, [pc, #440]	; (801bd34 <RadioSetTxGenericConfig+0x2e8>)
 801bb7c:	6819      	ldr	r1, [r3, #0]
 801bb7e:	f107 0320 	add.w	r3, r7, #32
 801bb82:	4a6d      	ldr	r2, [pc, #436]	; (801bd38 <RadioSetTxGenericConfig+0x2ec>)
 801bb84:	4618      	mov	r0, r3
 801bb86:	f001 fb9f 	bl	801d2c8 <RFW_Init>
 801bb8a:	4603      	mov	r3, r0
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d002      	beq.n	801bb96 <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 801bb90:	f04f 33ff 	mov.w	r3, #4294967295
 801bb94:	e186      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bb96:	4b66      	ldr	r3, [pc, #408]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb98:	2200      	movs	r2, #0
 801bb9a:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bb9c:	4b64      	ldr	r3, [pc, #400]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bb9e:	2201      	movs	r2, #1
 801bba0:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bba2:	4b63      	ldr	r3, [pc, #396]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bba4:	2200      	movs	r2, #0
 801bba6:	755a      	strb	r2, [r3, #21]
        {
 801bba8:	e00b      	b.n	801bbc2 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	7d5a      	ldrb	r2, [r3, #21]
 801bbae:	4b60      	ldr	r3, [pc, #384]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bbb0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 801bbb2:	68bb      	ldr	r3, [r7, #8]
 801bbb4:	7d9a      	ldrb	r2, [r3, #22]
 801bbb6:	4b5e      	ldr	r3, [pc, #376]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bbb8:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 801bbba:	68bb      	ldr	r3, [r7, #8]
 801bbbc:	7d1a      	ldrb	r2, [r3, #20]
 801bbbe:	4b5c      	ldr	r3, [pc, #368]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bbc0:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bbc2:	f7ff f896 	bl	801acf2 <RadioStandby>
        RadioSetModem( radio_modem );
 801bbc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801bbca:	4618      	mov	r0, r3
 801bbcc:	f7fe fa28 	bl	801a020 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bbd0:	485a      	ldr	r0, [pc, #360]	; (801bd3c <RadioSetTxGenericConfig+0x2f0>)
 801bbd2:	f000 fe85 	bl	801c8e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bbd6:	485a      	ldr	r0, [pc, #360]	; (801bd40 <RadioSetTxGenericConfig+0x2f4>)
 801bbd8:	f000 ff54 	bl	801ca84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bbdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bbe0:	4618      	mov	r0, r3
 801bbe2:	f000 fa18 	bl	801c016 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 801bbe6:	68bb      	ldr	r3, [r7, #8]
 801bbe8:	8a1b      	ldrh	r3, [r3, #16]
 801bbea:	4618      	mov	r0, r3
 801bbec:	f000 fa62 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	899b      	ldrh	r3, [r3, #12]
 801bbf4:	4618      	mov	r0, r3
 801bbf6:	f000 fa3d 	bl	801c074 <SUBGRF_SetCrcPolynomial>
        break;
 801bbfa:	e13f      	b.n	801be7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 801bbfc:	68bb      	ldr	r3, [r7, #8]
 801bbfe:	681b      	ldr	r3, [r3, #0]
 801bc00:	2b00      	cmp	r3, #0
 801bc02:	d102      	bne.n	801bc0a <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 801bc04:	f04f 33ff 	mov.w	r3, #4294967295
 801bc08:	e14c      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	7c9b      	ldrb	r3, [r3, #18]
 801bc0e:	2b08      	cmp	r3, #8
 801bc10:	d902      	bls.n	801bc18 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 801bc12:	f04f 33ff 	mov.w	r3, #4294967295
 801bc16:	e145      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 801bc18:	68bb      	ldr	r3, [r7, #8]
 801bc1a:	6899      	ldr	r1, [r3, #8]
 801bc1c:	68bb      	ldr	r3, [r7, #8]
 801bc1e:	7c9b      	ldrb	r3, [r3, #18]
 801bc20:	b29a      	uxth	r2, r3
 801bc22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bc26:	4618      	mov	r0, r3
 801bc28:	f001 fc4e 	bl	801d4c8 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801bc2c:	4b40      	ldr	r3, [pc, #256]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc2e:	2200      	movs	r2, #0
 801bc30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 801bc34:	68bb      	ldr	r3, [r7, #8]
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	4a3d      	ldr	r2, [pc, #244]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc3a:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 801bc3c:	68bb      	ldr	r3, [r7, #8]
 801bc3e:	7cda      	ldrb	r2, [r3, #19]
 801bc40:	4b3b      	ldr	r3, [pc, #236]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801bc46:	68bb      	ldr	r3, [r7, #8]
 801bc48:	699b      	ldr	r3, [r3, #24]
 801bc4a:	4a39      	ldr	r2, [pc, #228]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc4c:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801bc4e:	4b38      	ldr	r3, [pc, #224]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc50:	2200      	movs	r2, #0
 801bc52:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 801bc54:	68bb      	ldr	r3, [r7, #8]
 801bc56:	685b      	ldr	r3, [r3, #4]
 801bc58:	b29b      	uxth	r3, r3
 801bc5a:	00db      	lsls	r3, r3, #3
 801bc5c:	b29a      	uxth	r2, r3
 801bc5e:	4b34      	ldr	r3, [pc, #208]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc60:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801bc62:	4b33      	ldr	r3, [pc, #204]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc64:	2204      	movs	r2, #4
 801bc66:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801bc68:	68bb      	ldr	r3, [r7, #8]
 801bc6a:	7c9b      	ldrb	r3, [r3, #18]
 801bc6c:	00db      	lsls	r3, r3, #3
 801bc6e:	b2da      	uxtb	r2, r3
 801bc70:	4b2f      	ldr	r3, [pc, #188]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc72:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 801bc74:	4b2e      	ldr	r3, [pc, #184]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bc76:	2200      	movs	r2, #0
 801bc78:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 801bc7a:	68bb      	ldr	r3, [r7, #8]
 801bc7c:	7d9b      	ldrb	r3, [r3, #22]
 801bc7e:	2b02      	cmp	r3, #2
 801bc80:	d003      	beq.n	801bc8a <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801bc82:	68bb      	ldr	r3, [r7, #8]
 801bc84:	7d1b      	ldrb	r3, [r3, #20]
 801bc86:	2b02      	cmp	r3, #2
 801bc88:	d12a      	bne.n	801bce0 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 801bc8a:	68bb      	ldr	r3, [r7, #8]
 801bc8c:	7d5b      	ldrb	r3, [r3, #21]
 801bc8e:	2bf1      	cmp	r3, #241	; 0xf1
 801bc90:	d00a      	beq.n	801bca8 <RadioSetTxGenericConfig+0x25c>
 801bc92:	68bb      	ldr	r3, [r7, #8]
 801bc94:	7d5b      	ldrb	r3, [r3, #21]
 801bc96:	2bf2      	cmp	r3, #242	; 0xf2
 801bc98:	d006      	beq.n	801bca8 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801bc9a:	68bb      	ldr	r3, [r7, #8]
 801bc9c:	7d5b      	ldrb	r3, [r3, #21]
 801bc9e:	2b01      	cmp	r3, #1
 801bca0:	d002      	beq.n	801bca8 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 801bca2:	f04f 33ff 	mov.w	r3, #4294967295
 801bca6:	e0fd      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 801bca8:	2301      	movs	r3, #1
 801bcaa:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 801bcac:	68bb      	ldr	r3, [r7, #8]
 801bcae:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801bcb0:	4b20      	ldr	r3, [pc, #128]	; (801bd34 <RadioSetTxGenericConfig+0x2e8>)
 801bcb2:	6819      	ldr	r1, [r3, #0]
 801bcb4:	f107 0314 	add.w	r3, r7, #20
 801bcb8:	4a1f      	ldr	r2, [pc, #124]	; (801bd38 <RadioSetTxGenericConfig+0x2ec>)
 801bcba:	4618      	mov	r0, r3
 801bcbc:	f001 fb04 	bl	801d2c8 <RFW_Init>
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d002      	beq.n	801bccc <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 801bcc6:	f04f 33ff 	mov.w	r3, #4294967295
 801bcca:	e0eb      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801bccc:	4b18      	ldr	r3, [pc, #96]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bcce:	2200      	movs	r2, #0
 801bcd0:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801bcd2:	4b17      	ldr	r3, [pc, #92]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bcd4:	2201      	movs	r2, #1
 801bcd6:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 801bcd8:	4b15      	ldr	r3, [pc, #84]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bcda:	2200      	movs	r2, #0
 801bcdc:	755a      	strb	r2, [r3, #21]
        {
 801bcde:	e00b      	b.n	801bcf8 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801bce0:	68bb      	ldr	r3, [r7, #8]
 801bce2:	7d5a      	ldrb	r2, [r3, #21]
 801bce4:	4b12      	ldr	r3, [pc, #72]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bce6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 801bce8:	68bb      	ldr	r3, [r7, #8]
 801bcea:	7d9a      	ldrb	r2, [r3, #22]
 801bcec:	4b10      	ldr	r3, [pc, #64]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bcee:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 801bcf0:	68bb      	ldr	r3, [r7, #8]
 801bcf2:	7d1a      	ldrb	r2, [r3, #20]
 801bcf4:	4b0e      	ldr	r3, [pc, #56]	; (801bd30 <RadioSetTxGenericConfig+0x2e4>)
 801bcf6:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 801bcf8:	f7fe fffb 	bl	801acf2 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801bcfc:	2000      	movs	r0, #0
 801bcfe:	f7fe f98f 	bl	801a020 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bd02:	480e      	ldr	r0, [pc, #56]	; (801bd3c <RadioSetTxGenericConfig+0x2f0>)
 801bd04:	f000 fdec 	bl	801c8e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bd08:	480d      	ldr	r0, [pc, #52]	; (801bd40 <RadioSetTxGenericConfig+0x2f4>)
 801bd0a:	f000 febb 	bl	801ca84 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 801bd0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801bd12:	4618      	mov	r0, r3
 801bd14:	f000 f97f 	bl	801c016 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801bd18:	68bb      	ldr	r3, [r7, #8]
 801bd1a:	8a1b      	ldrh	r3, [r3, #16]
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	f000 f9c9 	bl	801c0b4 <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 801bd22:	68bb      	ldr	r3, [r7, #8]
 801bd24:	899b      	ldrh	r3, [r3, #12]
 801bd26:	4618      	mov	r0, r3
 801bd28:	f000 f9a4 	bl	801c074 <SUBGRF_SetCrcPolynomial>
        break;
 801bd2c:	e0a6      	b.n	801be7c <RadioSetTxGenericConfig+0x430>
 801bd2e:	bf00      	nop
 801bd30:	200017dc 	.word	0x200017dc
 801bd34:	200017d8 	.word	0x200017d8
 801bd38:	20001838 	.word	0x20001838
 801bd3c:	20001814 	.word	0x20001814
 801bd40:	200017ea 	.word	0x200017ea
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801bd44:	4b59      	ldr	r3, [pc, #356]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd46:	2201      	movs	r2, #1
 801bd48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 801bd4c:	68bb      	ldr	r3, [r7, #8]
 801bd4e:	781a      	ldrb	r2, [r3, #0]
 801bd50:	4b56      	ldr	r3, [pc, #344]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801bd56:	68bb      	ldr	r3, [r7, #8]
 801bd58:	785a      	ldrb	r2, [r3, #1]
 801bd5a:	4b54      	ldr	r3, [pc, #336]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801bd60:	68bb      	ldr	r3, [r7, #8]
 801bd62:	789a      	ldrb	r2, [r3, #2]
 801bd64:	4b51      	ldr	r3, [pc, #324]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd66:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 801bd6a:	68bb      	ldr	r3, [r7, #8]
 801bd6c:	78db      	ldrb	r3, [r3, #3]
 801bd6e:	2b02      	cmp	r3, #2
 801bd70:	d010      	beq.n	801bd94 <RadioSetTxGenericConfig+0x348>
 801bd72:	2b02      	cmp	r3, #2
 801bd74:	dc20      	bgt.n	801bdb8 <RadioSetTxGenericConfig+0x36c>
 801bd76:	2b00      	cmp	r3, #0
 801bd78:	d002      	beq.n	801bd80 <RadioSetTxGenericConfig+0x334>
 801bd7a:	2b01      	cmp	r3, #1
 801bd7c:	d005      	beq.n	801bd8a <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 801bd7e:	e01b      	b.n	801bdb8 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bd80:	4b4a      	ldr	r3, [pc, #296]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd82:	2200      	movs	r2, #0
 801bd84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd88:	e017      	b.n	801bdba <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bd8a:	4b48      	ldr	r3, [pc, #288]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bd8c:	2201      	movs	r2, #1
 801bd8e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bd92:	e012      	b.n	801bdba <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 801bd94:	68bb      	ldr	r3, [r7, #8]
 801bd96:	781b      	ldrb	r3, [r3, #0]
 801bd98:	2b0b      	cmp	r3, #11
 801bd9a:	d003      	beq.n	801bda4 <RadioSetTxGenericConfig+0x358>
 801bd9c:	68bb      	ldr	r3, [r7, #8]
 801bd9e:	781b      	ldrb	r3, [r3, #0]
 801bda0:	2b0c      	cmp	r3, #12
 801bda2:	d104      	bne.n	801bdae <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801bda4:	4b41      	ldr	r3, [pc, #260]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bda6:	2201      	movs	r2, #1
 801bda8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdac:	e005      	b.n	801bdba <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 801bdae:	4b3f      	ldr	r3, [pc, #252]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdb0:	2200      	movs	r2, #0
 801bdb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 801bdb6:	e000      	b.n	801bdba <RadioSetTxGenericConfig+0x36e>
            break;
 801bdb8:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801bdba:	4b3c      	ldr	r3, [pc, #240]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdbc:	2201      	movs	r2, #1
 801bdbe:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 801bdc0:	68bb      	ldr	r3, [r7, #8]
 801bdc2:	889a      	ldrh	r2, [r3, #4]
 801bdc4:	4b39      	ldr	r3, [pc, #228]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdc6:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 801bdc8:	68bb      	ldr	r3, [r7, #8]
 801bdca:	799a      	ldrb	r2, [r3, #6]
 801bdcc:	4b37      	ldr	r3, [pc, #220]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdce:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 801bdd0:	68bb      	ldr	r3, [r7, #8]
 801bdd2:	79da      	ldrb	r2, [r3, #7]
 801bdd4:	4b35      	ldr	r3, [pc, #212]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdd6:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 801bdda:	68bb      	ldr	r3, [r7, #8]
 801bddc:	7a1a      	ldrb	r2, [r3, #8]
 801bdde:	4b33      	ldr	r3, [pc, #204]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bde0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 801bde4:	f7fe ff85 	bl	801acf2 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 801bde8:	2001      	movs	r0, #1
 801bdea:	f7fe f919 	bl	801a020 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801bdee:	4830      	ldr	r0, [pc, #192]	; (801beb0 <RadioSetTxGenericConfig+0x464>)
 801bdf0:	f000 fd76 	bl	801c8e0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801bdf4:	482f      	ldr	r0, [pc, #188]	; (801beb4 <RadioSetTxGenericConfig+0x468>)
 801bdf6:	f000 fe45 	bl	801ca84 <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 801bdfa:	4b2c      	ldr	r3, [pc, #176]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801bdfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801be00:	2b06      	cmp	r3, #6
 801be02:	d10d      	bne.n	801be20 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801be04:	f640 0089 	movw	r0, #2185	; 0x889
 801be08:	f000 ff98 	bl	801cd3c <SUBGRF_ReadRegister>
 801be0c:	4603      	mov	r3, r0
 801be0e:	f023 0304 	bic.w	r3, r3, #4
 801be12:	b2db      	uxtb	r3, r3
 801be14:	4619      	mov	r1, r3
 801be16:	f640 0089 	movw	r0, #2185	; 0x889
 801be1a:	f000 ff7b 	bl	801cd14 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 801be1e:	e02d      	b.n	801be7c <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801be20:	f640 0089 	movw	r0, #2185	; 0x889
 801be24:	f000 ff8a 	bl	801cd3c <SUBGRF_ReadRegister>
 801be28:	4603      	mov	r3, r0
 801be2a:	f043 0304 	orr.w	r3, r3, #4
 801be2e:	b2db      	uxtb	r3, r3
 801be30:	4619      	mov	r1, r3
 801be32:	f640 0089 	movw	r0, #2185	; 0x889
 801be36:	f000 ff6d 	bl	801cd14 <SUBGRF_WriteRegister>
        break;
 801be3a:	e01f      	b.n	801be7c <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d004      	beq.n	801be4e <RadioSetTxGenericConfig+0x402>
 801be44:	68bb      	ldr	r3, [r7, #8]
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801be4c:	d902      	bls.n	801be54 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 801be4e:	f04f 33ff 	mov.w	r3, #4294967295
 801be52:	e027      	b.n	801bea4 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 801be54:	2003      	movs	r0, #3
 801be56:	f7fe f8e3 	bl	801a020 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 801be5a:	4b14      	ldr	r3, [pc, #80]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be5c:	2202      	movs	r2, #2
 801be5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 801be62:	68bb      	ldr	r3, [r7, #8]
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	4a11      	ldr	r2, [pc, #68]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be68:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 801be6a:	4b10      	ldr	r3, [pc, #64]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be6c:	2216      	movs	r2, #22
 801be6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801be72:	480f      	ldr	r0, [pc, #60]	; (801beb0 <RadioSetTxGenericConfig+0x464>)
 801be74:	f000 fd34 	bl	801c8e0 <SUBGRF_SetModulationParams>
        break;
 801be78:	e000      	b.n	801be7c <RadioSetTxGenericConfig+0x430>
    default:
        break;
 801be7a:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 801be7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801be80:	4618      	mov	r0, r3
 801be82:	f001 f863 	bl	801cf4c <SUBGRF_SetRfTxPower>
 801be86:	4603      	mov	r3, r0
 801be88:	461a      	mov	r2, r3
 801be8a:	4b08      	ldr	r3, [pc, #32]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be8c:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 801be90:	4b06      	ldr	r3, [pc, #24]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be92:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 801be96:	4618      	mov	r0, r3
 801be98:	f001 fa37 	bl	801d30a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801be9c:	4a03      	ldr	r2, [pc, #12]	; (801beac <RadioSetTxGenericConfig+0x460>)
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	6053      	str	r3, [r2, #4]
    return 0;
 801bea2:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801bea4:	4618      	mov	r0, r3
 801bea6:	3738      	adds	r7, #56	; 0x38
 801bea8:	46bd      	mov	sp, r7
 801beaa:	bd80      	pop	{r7, pc}
 801beac:	200017dc 	.word	0x200017dc
 801beb0:	20001814 	.word	0x20001814
 801beb4:	200017ea 	.word	0x200017ea

0801beb8 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 801beb8:	b480      	push	{r7}
 801beba:	b085      	sub	sp, #20
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801bec0:	2301      	movs	r3, #1
 801bec2:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 801bec4:	7bfb      	ldrb	r3, [r7, #15]
}
 801bec6:	4618      	mov	r0, r3
 801bec8:	3714      	adds	r7, #20
 801beca:	46bd      	mov	sp, r7
 801becc:	bc80      	pop	{r7}
 801bece:	4770      	bx	lr

0801bed0 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801bed0:	b480      	push	{r7}
 801bed2:	b083      	sub	sp, #12
 801bed4:	af00      	add	r7, sp, #0
 801bed6:	6078      	str	r0, [r7, #4]
 801bed8:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 801beda:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801bedc:	4618      	mov	r0, r3
 801bede:	370c      	adds	r7, #12
 801bee0:	46bd      	mov	sp, r7
 801bee2:	bc80      	pop	{r7}
 801bee4:	4770      	bx	lr
	...

0801bee8 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b084      	sub	sp, #16
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d002      	beq.n	801befc <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 801bef6:	4a1d      	ldr	r2, [pc, #116]	; (801bf6c <SUBGRF_Init+0x84>)
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 801befc:	f7e6 fbdc 	bl	80026b8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801bf00:	2002      	movs	r0, #2
 801bf02:	f001 f8ff 	bl	801d104 <Radio_SMPS_Set>

    ImageCalibrated = false;
 801bf06:	4b1a      	ldr	r3, [pc, #104]	; (801bf70 <SUBGRF_Init+0x88>)
 801bf08:	2200      	movs	r2, #0
 801bf0a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 801bf0c:	2000      	movs	r0, #0
 801bf0e:	f000 f97d 	bl	801c20c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801bf12:	f7f1 ff1f 	bl	800dd54 <RBI_IsTCXO>
 801bf16:	4603      	mov	r3, r0
 801bf18:	2b01      	cmp	r3, #1
 801bf1a:	d10e      	bne.n	801bf3a <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 801bf1c:	2140      	movs	r1, #64	; 0x40
 801bf1e:	2001      	movs	r0, #1
 801bf20:	f000 fb82 	bl	801c628 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 801bf24:	2100      	movs	r1, #0
 801bf26:	f640 1011 	movw	r0, #2321	; 0x911
 801bf2a:	f000 fef3 	bl	801cd14 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801bf2e:	237f      	movs	r3, #127	; 0x7f
 801bf30:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801bf32:	7b38      	ldrb	r0, [r7, #12]
 801bf34:	f000 fa8b 	bl	801c44e <SUBGRF_Calibrate>
 801bf38:	e009      	b.n	801bf4e <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf3a:	2120      	movs	r1, #32
 801bf3c:	f640 1011 	movw	r0, #2321	; 0x911
 801bf40:	f000 fee8 	bl	801cd14 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801bf44:	2120      	movs	r1, #32
 801bf46:	f640 1012 	movw	r0, #2322	; 0x912
 801bf4a:	f000 fee3 	bl	801cd14 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801bf4e:	210e      	movs	r1, #14
 801bf50:	f640 101f 	movw	r0, #2335	; 0x91f
 801bf54:	f000 fede 	bl	801cd14 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801bf58:	f7f1 fee0 	bl	800dd1c <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 801bf5c:	4b05      	ldr	r3, [pc, #20]	; (801bf74 <SUBGRF_Init+0x8c>)
 801bf5e:	2201      	movs	r2, #1
 801bf60:	701a      	strb	r2, [r3, #0]
}
 801bf62:	bf00      	nop
 801bf64:	3710      	adds	r7, #16
 801bf66:	46bd      	mov	sp, r7
 801bf68:	bd80      	pop	{r7, pc}
 801bf6a:	bf00      	nop
 801bf6c:	20001874 	.word	0x20001874
 801bf70:	20001870 	.word	0x20001870
 801bf74:	20001868 	.word	0x20001868

0801bf78 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801bf78:	b480      	push	{r7}
 801bf7a:	af00      	add	r7, sp, #0
    return OperatingMode;
 801bf7c:	4b02      	ldr	r3, [pc, #8]	; (801bf88 <SUBGRF_GetOperatingMode+0x10>)
 801bf7e:	781b      	ldrb	r3, [r3, #0]
}
 801bf80:	4618      	mov	r0, r3
 801bf82:	46bd      	mov	sp, r7
 801bf84:	bc80      	pop	{r7}
 801bf86:	4770      	bx	lr
 801bf88:	20001868 	.word	0x20001868

0801bf8c <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 801bf8c:	b580      	push	{r7, lr}
 801bf8e:	b082      	sub	sp, #8
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
 801bf94:	460b      	mov	r3, r1
 801bf96:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801bf98:	78fb      	ldrb	r3, [r7, #3]
 801bf9a:	461a      	mov	r2, r3
 801bf9c:	6879      	ldr	r1, [r7, #4]
 801bf9e:	2000      	movs	r0, #0
 801bfa0:	f000 ff24 	bl	801cdec <SUBGRF_WriteBuffer>
}
 801bfa4:	bf00      	nop
 801bfa6:	3708      	adds	r7, #8
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 801bfac:	b580      	push	{r7, lr}
 801bfae:	b086      	sub	sp, #24
 801bfb0:	af00      	add	r7, sp, #0
 801bfb2:	60f8      	str	r0, [r7, #12]
 801bfb4:	60b9      	str	r1, [r7, #8]
 801bfb6:	4613      	mov	r3, r2
 801bfb8:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801bfbe:	f107 0317 	add.w	r3, r7, #23
 801bfc2:	4619      	mov	r1, r3
 801bfc4:	68b8      	ldr	r0, [r7, #8]
 801bfc6:	f000 fe27 	bl	801cc18 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 801bfca:	68bb      	ldr	r3, [r7, #8]
 801bfcc:	781b      	ldrb	r3, [r3, #0]
 801bfce:	79fa      	ldrb	r2, [r7, #7]
 801bfd0:	429a      	cmp	r2, r3
 801bfd2:	d201      	bcs.n	801bfd8 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 801bfd4:	2301      	movs	r3, #1
 801bfd6:	e007      	b.n	801bfe8 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 801bfd8:	7df8      	ldrb	r0, [r7, #23]
 801bfda:	68bb      	ldr	r3, [r7, #8]
 801bfdc:	781b      	ldrb	r3, [r3, #0]
 801bfde:	461a      	mov	r2, r3
 801bfe0:	68f9      	ldr	r1, [r7, #12]
 801bfe2:	f000 ff25 	bl	801ce30 <SUBGRF_ReadBuffer>

    return 0;
 801bfe6:	2300      	movs	r3, #0
}
 801bfe8:	4618      	mov	r0, r3
 801bfea:	3718      	adds	r7, #24
 801bfec:	46bd      	mov	sp, r7
 801bfee:	bd80      	pop	{r7, pc}

0801bff0 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801bff0:	b580      	push	{r7, lr}
 801bff2:	b084      	sub	sp, #16
 801bff4:	af00      	add	r7, sp, #0
 801bff6:	60f8      	str	r0, [r7, #12]
 801bff8:	460b      	mov	r3, r1
 801bffa:	607a      	str	r2, [r7, #4]
 801bffc:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801bffe:	7afb      	ldrb	r3, [r7, #11]
 801c000:	4619      	mov	r1, r3
 801c002:	68f8      	ldr	r0, [r7, #12]
 801c004:	f7ff ffc2 	bl	801bf8c <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801c008:	6878      	ldr	r0, [r7, #4]
 801c00a:	f000 f91b 	bl	801c244 <SUBGRF_SetTx>
}
 801c00e:	bf00      	nop
 801c010:	3710      	adds	r7, #16
 801c012:	46bd      	mov	sp, r7
 801c014:	bd80      	pop	{r7, pc}

0801c016 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801c016:	b580      	push	{r7, lr}
 801c018:	b082      	sub	sp, #8
 801c01a:	af00      	add	r7, sp, #0
 801c01c:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801c01e:	2208      	movs	r2, #8
 801c020:	6879      	ldr	r1, [r7, #4]
 801c022:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801c026:	f000 fe9d 	bl	801cd64 <SUBGRF_WriteRegisters>
    return 0;
 801c02a:	2300      	movs	r3, #0
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	3708      	adds	r7, #8
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}

0801c034 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 801c034:	b580      	push	{r7, lr}
 801c036:	b084      	sub	sp, #16
 801c038:	af00      	add	r7, sp, #0
 801c03a:	4603      	mov	r3, r0
 801c03c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801c03e:	88fb      	ldrh	r3, [r7, #6]
 801c040:	0a1b      	lsrs	r3, r3, #8
 801c042:	b29b      	uxth	r3, r3
 801c044:	b2db      	uxtb	r3, r3
 801c046:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801c048:	88fb      	ldrh	r3, [r7, #6]
 801c04a:	b2db      	uxtb	r3, r3
 801c04c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c04e:	f000 fb6f 	bl	801c730 <SUBGRF_GetPacketType>
 801c052:	4603      	mov	r3, r0
 801c054:	2b00      	cmp	r3, #0
 801c056:	d108      	bne.n	801c06a <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801c058:	f107 030c 	add.w	r3, r7, #12
 801c05c:	2202      	movs	r2, #2
 801c05e:	4619      	mov	r1, r3
 801c060:	f240 60bc 	movw	r0, #1724	; 0x6bc
 801c064:	f000 fe7e 	bl	801cd64 <SUBGRF_WriteRegisters>
            break;
 801c068:	e000      	b.n	801c06c <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801c06a:	bf00      	nop
    }
}
 801c06c:	bf00      	nop
 801c06e:	3710      	adds	r7, #16
 801c070:	46bd      	mov	sp, r7
 801c072:	bd80      	pop	{r7, pc}

0801c074 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b084      	sub	sp, #16
 801c078:	af00      	add	r7, sp, #0
 801c07a:	4603      	mov	r3, r0
 801c07c:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 801c07e:	88fb      	ldrh	r3, [r7, #6]
 801c080:	0a1b      	lsrs	r3, r3, #8
 801c082:	b29b      	uxth	r3, r3
 801c084:	b2db      	uxtb	r3, r3
 801c086:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801c088:	88fb      	ldrh	r3, [r7, #6]
 801c08a:	b2db      	uxtb	r3, r3
 801c08c:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 801c08e:	f000 fb4f 	bl	801c730 <SUBGRF_GetPacketType>
 801c092:	4603      	mov	r3, r0
 801c094:	2b00      	cmp	r3, #0
 801c096:	d108      	bne.n	801c0aa <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801c098:	f107 030c 	add.w	r3, r7, #12
 801c09c:	2202      	movs	r2, #2
 801c09e:	4619      	mov	r1, r3
 801c0a0:	f240 60be 	movw	r0, #1726	; 0x6be
 801c0a4:	f000 fe5e 	bl	801cd64 <SUBGRF_WriteRegisters>
            break;
 801c0a8:	e000      	b.n	801c0ac <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 801c0aa:	bf00      	nop
    }
}
 801c0ac:	bf00      	nop
 801c0ae:	3710      	adds	r7, #16
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b084      	sub	sp, #16
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	4603      	mov	r3, r0
 801c0bc:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801c0be:	2300      	movs	r3, #0
 801c0c0:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801c0c2:	f000 fb35 	bl	801c730 <SUBGRF_GetPacketType>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	2b00      	cmp	r3, #0
 801c0ca:	d121      	bne.n	801c110 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801c0cc:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0d0:	f000 fe34 	bl	801cd3c <SUBGRF_ReadRegister>
 801c0d4:	4603      	mov	r3, r0
 801c0d6:	f023 0301 	bic.w	r3, r3, #1
 801c0da:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801c0dc:	88fb      	ldrh	r3, [r7, #6]
 801c0de:	0a1b      	lsrs	r3, r3, #8
 801c0e0:	b29b      	uxth	r3, r3
 801c0e2:	b25b      	sxtb	r3, r3
 801c0e4:	f003 0301 	and.w	r3, r3, #1
 801c0e8:	b25a      	sxtb	r2, r3
 801c0ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c0ee:	4313      	orrs	r3, r2
 801c0f0:	b25b      	sxtb	r3, r3
 801c0f2:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801c0f4:	7bfb      	ldrb	r3, [r7, #15]
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801c0fc:	f000 fe0a 	bl	801cd14 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801c100:	88fb      	ldrh	r3, [r7, #6]
 801c102:	b2db      	uxtb	r3, r3
 801c104:	4619      	mov	r1, r3
 801c106:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801c10a:	f000 fe03 	bl	801cd14 <SUBGRF_WriteRegister>
            break;
 801c10e:	e000      	b.n	801c112 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801c110:	bf00      	nop
    }
}
 801c112:	bf00      	nop
 801c114:	3710      	adds	r7, #16
 801c116:	46bd      	mov	sp, r7
 801c118:	bd80      	pop	{r7, pc}

0801c11a <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801c11a:	b580      	push	{r7, lr}
 801c11c:	b082      	sub	sp, #8
 801c11e:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801c120:	2300      	movs	r3, #0
 801c122:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 801c124:	2300      	movs	r3, #0
 801c126:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801c128:	2300      	movs	r3, #0
 801c12a:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801c12c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c130:	f000 fe04 	bl	801cd3c <SUBGRF_ReadRegister>
 801c134:	4603      	mov	r3, r0
 801c136:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801c138:	79fb      	ldrb	r3, [r7, #7]
 801c13a:	f023 0301 	bic.w	r3, r3, #1
 801c13e:	b2db      	uxtb	r3, r3
 801c140:	4619      	mov	r1, r3
 801c142:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c146:	f000 fde5 	bl	801cd14 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801c14a:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c14e:	f000 fdf5 	bl	801cd3c <SUBGRF_ReadRegister>
 801c152:	4603      	mov	r3, r0
 801c154:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801c156:	79bb      	ldrb	r3, [r7, #6]
 801c158:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c15c:	b2db      	uxtb	r3, r3
 801c15e:	4619      	mov	r1, r3
 801c160:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c164:	f000 fdd6 	bl	801cd14 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801c168:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801c16c:	f000 f88a 	bl	801c284 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801c170:	463b      	mov	r3, r7
 801c172:	2204      	movs	r2, #4
 801c174:	4619      	mov	r1, r3
 801c176:	f640 0019 	movw	r0, #2073	; 0x819
 801c17a:	f000 fe15 	bl	801cda8 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 801c17e:	2000      	movs	r0, #0
 801c180:	f000 f844 	bl	801c20c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 801c184:	79fb      	ldrb	r3, [r7, #7]
 801c186:	4619      	mov	r1, r3
 801c188:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801c18c:	f000 fdc2 	bl	801cd14 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 801c190:	79bb      	ldrb	r3, [r7, #6]
 801c192:	4619      	mov	r1, r3
 801c194:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801c198:	f000 fdbc 	bl	801cd14 <SUBGRF_WriteRegister>

    return number;
 801c19c:	683b      	ldr	r3, [r7, #0]
}
 801c19e:	4618      	mov	r0, r3
 801c1a0:	3708      	adds	r7, #8
 801c1a2:	46bd      	mov	sp, r7
 801c1a4:	bd80      	pop	{r7, pc}
	...

0801c1a8 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 801c1a8:	b580      	push	{r7, lr}
 801c1aa:	b084      	sub	sp, #16
 801c1ac:	af00      	add	r7, sp, #0
 801c1ae:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801c1b0:	2000      	movs	r0, #0
 801c1b2:	f7f1 fdba 	bl	800dd2a <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801c1b6:	2002      	movs	r0, #2
 801c1b8:	f000 ffa4 	bl	801d104 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1bc:	793b      	ldrb	r3, [r7, #4]
 801c1be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c1c2:	b2db      	uxtb	r3, r3
 801c1c4:	009b      	lsls	r3, r3, #2
 801c1c6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1c8:	793b      	ldrb	r3, [r7, #4]
 801c1ca:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c1ce:	b2db      	uxtb	r3, r3
 801c1d0:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1d2:	b25b      	sxtb	r3, r3
 801c1d4:	4313      	orrs	r3, r2
 801c1d6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 801c1d8:	793b      	ldrb	r3, [r7, #4]
 801c1da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c1de:	b2db      	uxtb	r3, r3
 801c1e0:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801c1e2:	4313      	orrs	r3, r2
 801c1e4:	b25b      	sxtb	r3, r3
 801c1e6:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801c1e8:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801c1ea:	f107 030f 	add.w	r3, r7, #15
 801c1ee:	2201      	movs	r2, #1
 801c1f0:	4619      	mov	r1, r3
 801c1f2:	2084      	movs	r0, #132	; 0x84
 801c1f4:	f000 fe3e 	bl	801ce74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 801c1f8:	4b03      	ldr	r3, [pc, #12]	; (801c208 <SUBGRF_SetSleep+0x60>)
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	701a      	strb	r2, [r3, #0]
}
 801c1fe:	bf00      	nop
 801c200:	3710      	adds	r7, #16
 801c202:	46bd      	mov	sp, r7
 801c204:	bd80      	pop	{r7, pc}
 801c206:	bf00      	nop
 801c208:	20001868 	.word	0x20001868

0801c20c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b082      	sub	sp, #8
 801c210:	af00      	add	r7, sp, #0
 801c212:	4603      	mov	r3, r0
 801c214:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801c216:	1dfb      	adds	r3, r7, #7
 801c218:	2201      	movs	r2, #1
 801c21a:	4619      	mov	r1, r3
 801c21c:	2080      	movs	r0, #128	; 0x80
 801c21e:	f000 fe29 	bl	801ce74 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801c222:	79fb      	ldrb	r3, [r7, #7]
 801c224:	2b00      	cmp	r3, #0
 801c226:	d103      	bne.n	801c230 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 801c228:	4b05      	ldr	r3, [pc, #20]	; (801c240 <SUBGRF_SetStandby+0x34>)
 801c22a:	2201      	movs	r2, #1
 801c22c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801c22e:	e002      	b.n	801c236 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 801c230:	4b03      	ldr	r3, [pc, #12]	; (801c240 <SUBGRF_SetStandby+0x34>)
 801c232:	2202      	movs	r2, #2
 801c234:	701a      	strb	r2, [r3, #0]
}
 801c236:	bf00      	nop
 801c238:	3708      	adds	r7, #8
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	bf00      	nop
 801c240:	20001868 	.word	0x20001868

0801c244 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b084      	sub	sp, #16
 801c248:	af00      	add	r7, sp, #0
 801c24a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 801c24c:	4b0c      	ldr	r3, [pc, #48]	; (801c280 <SUBGRF_SetTx+0x3c>)
 801c24e:	2204      	movs	r2, #4
 801c250:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	0c1b      	lsrs	r3, r3, #16
 801c256:	b2db      	uxtb	r3, r3
 801c258:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	0a1b      	lsrs	r3, r3, #8
 801c25e:	b2db      	uxtb	r3, r3
 801c260:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	b2db      	uxtb	r3, r3
 801c266:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801c268:	f107 030c 	add.w	r3, r7, #12
 801c26c:	2203      	movs	r2, #3
 801c26e:	4619      	mov	r1, r3
 801c270:	2083      	movs	r0, #131	; 0x83
 801c272:	f000 fdff 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c276:	bf00      	nop
 801c278:	3710      	adds	r7, #16
 801c27a:	46bd      	mov	sp, r7
 801c27c:	bd80      	pop	{r7, pc}
 801c27e:	bf00      	nop
 801c280:	20001868 	.word	0x20001868

0801c284 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801c284:	b580      	push	{r7, lr}
 801c286:	b084      	sub	sp, #16
 801c288:	af00      	add	r7, sp, #0
 801c28a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c28c:	4b0c      	ldr	r3, [pc, #48]	; (801c2c0 <SUBGRF_SetRx+0x3c>)
 801c28e:	2205      	movs	r2, #5
 801c290:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	0c1b      	lsrs	r3, r3, #16
 801c296:	b2db      	uxtb	r3, r3
 801c298:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	0a1b      	lsrs	r3, r3, #8
 801c29e:	b2db      	uxtb	r3, r3
 801c2a0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	b2db      	uxtb	r3, r3
 801c2a6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2a8:	f107 030c 	add.w	r3, r7, #12
 801c2ac:	2203      	movs	r2, #3
 801c2ae:	4619      	mov	r1, r3
 801c2b0:	2082      	movs	r0, #130	; 0x82
 801c2b2:	f000 fddf 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c2b6:	bf00      	nop
 801c2b8:	3710      	adds	r7, #16
 801c2ba:	46bd      	mov	sp, r7
 801c2bc:	bd80      	pop	{r7, pc}
 801c2be:	bf00      	nop
 801c2c0:	20001868 	.word	0x20001868

0801c2c4 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 801c2c4:	b580      	push	{r7, lr}
 801c2c6:	b084      	sub	sp, #16
 801c2c8:	af00      	add	r7, sp, #0
 801c2ca:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801c2cc:	4b0e      	ldr	r3, [pc, #56]	; (801c308 <SUBGRF_SetRxBoosted+0x44>)
 801c2ce:	2205      	movs	r2, #5
 801c2d0:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801c2d2:	2197      	movs	r1, #151	; 0x97
 801c2d4:	f640 00ac 	movw	r0, #2220	; 0x8ac
 801c2d8:	f000 fd1c 	bl	801cd14 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	0c1b      	lsrs	r3, r3, #16
 801c2e0:	b2db      	uxtb	r3, r3
 801c2e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	0a1b      	lsrs	r3, r3, #8
 801c2e8:	b2db      	uxtb	r3, r3
 801c2ea:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	b2db      	uxtb	r3, r3
 801c2f0:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801c2f2:	f107 030c 	add.w	r3, r7, #12
 801c2f6:	2203      	movs	r2, #3
 801c2f8:	4619      	mov	r1, r3
 801c2fa:	2082      	movs	r0, #130	; 0x82
 801c2fc:	f000 fdba 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c300:	bf00      	nop
 801c302:	3710      	adds	r7, #16
 801c304:	46bd      	mov	sp, r7
 801c306:	bd80      	pop	{r7, pc}
 801c308:	20001868 	.word	0x20001868

0801c30c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801c30c:	b580      	push	{r7, lr}
 801c30e:	b084      	sub	sp, #16
 801c310:	af00      	add	r7, sp, #0
 801c312:	6078      	str	r0, [r7, #4]
 801c314:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801c316:	687b      	ldr	r3, [r7, #4]
 801c318:	0c1b      	lsrs	r3, r3, #16
 801c31a:	b2db      	uxtb	r3, r3
 801c31c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	0a1b      	lsrs	r3, r3, #8
 801c322:	b2db      	uxtb	r3, r3
 801c324:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	b2db      	uxtb	r3, r3
 801c32a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801c32c:	683b      	ldr	r3, [r7, #0]
 801c32e:	0c1b      	lsrs	r3, r3, #16
 801c330:	b2db      	uxtb	r3, r3
 801c332:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801c334:	683b      	ldr	r3, [r7, #0]
 801c336:	0a1b      	lsrs	r3, r3, #8
 801c338:	b2db      	uxtb	r3, r3
 801c33a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801c33c:	683b      	ldr	r3, [r7, #0]
 801c33e:	b2db      	uxtb	r3, r3
 801c340:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801c342:	f107 0308 	add.w	r3, r7, #8
 801c346:	2206      	movs	r2, #6
 801c348:	4619      	mov	r1, r3
 801c34a:	2094      	movs	r0, #148	; 0x94
 801c34c:	f000 fd92 	bl	801ce74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 801c350:	4b03      	ldr	r3, [pc, #12]	; (801c360 <SUBGRF_SetRxDutyCycle+0x54>)
 801c352:	2206      	movs	r2, #6
 801c354:	701a      	strb	r2, [r3, #0]
}
 801c356:	bf00      	nop
 801c358:	3710      	adds	r7, #16
 801c35a:	46bd      	mov	sp, r7
 801c35c:	bd80      	pop	{r7, pc}
 801c35e:	bf00      	nop
 801c360:	20001868 	.word	0x20001868

0801c364 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801c364:	b580      	push	{r7, lr}
 801c366:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 801c368:	2200      	movs	r2, #0
 801c36a:	2100      	movs	r1, #0
 801c36c:	20c5      	movs	r0, #197	; 0xc5
 801c36e:	f000 fd81 	bl	801ce74 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801c372:	4b02      	ldr	r3, [pc, #8]	; (801c37c <SUBGRF_SetCad+0x18>)
 801c374:	2207      	movs	r2, #7
 801c376:	701a      	strb	r2, [r3, #0]
}
 801c378:	bf00      	nop
 801c37a:	bd80      	pop	{r7, pc}
 801c37c:	20001868 	.word	0x20001868

0801c380 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 801c380:	b580      	push	{r7, lr}
 801c382:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801c384:	2200      	movs	r2, #0
 801c386:	2100      	movs	r1, #0
 801c388:	20d1      	movs	r0, #209	; 0xd1
 801c38a:	f000 fd73 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c38e:	bf00      	nop
 801c390:	bd80      	pop	{r7, pc}

0801c392 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801c392:	b580      	push	{r7, lr}
 801c394:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801c396:	2200      	movs	r2, #0
 801c398:	2100      	movs	r1, #0
 801c39a:	20d2      	movs	r0, #210	; 0xd2
 801c39c:	f000 fd6a 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c3a0:	bf00      	nop
 801c3a2:	bd80      	pop	{r7, pc}

0801c3a4 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 801c3a4:	b580      	push	{r7, lr}
 801c3a6:	b082      	sub	sp, #8
 801c3a8:	af00      	add	r7, sp, #0
 801c3aa:	4603      	mov	r3, r0
 801c3ac:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801c3ae:	1dfb      	adds	r3, r7, #7
 801c3b0:	2201      	movs	r2, #1
 801c3b2:	4619      	mov	r1, r3
 801c3b4:	209f      	movs	r0, #159	; 0x9f
 801c3b6:	f000 fd5d 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c3ba:	bf00      	nop
 801c3bc:	3708      	adds	r7, #8
 801c3be:	46bd      	mov	sp, r7
 801c3c0:	bd80      	pop	{r7, pc}

0801c3c2 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 801c3c2:	b580      	push	{r7, lr}
 801c3c4:	b084      	sub	sp, #16
 801c3c6:	af00      	add	r7, sp, #0
 801c3c8:	4603      	mov	r3, r0
 801c3ca:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801c3cc:	1dfb      	adds	r3, r7, #7
 801c3ce:	2201      	movs	r2, #1
 801c3d0:	4619      	mov	r1, r3
 801c3d2:	20a0      	movs	r0, #160	; 0xa0
 801c3d4:	f000 fd4e 	bl	801ce74 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 801c3d8:	79fb      	ldrb	r3, [r7, #7]
 801c3da:	2b3f      	cmp	r3, #63	; 0x3f
 801c3dc:	d91c      	bls.n	801c418 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801c3de:	79fb      	ldrb	r3, [r7, #7]
 801c3e0:	085b      	lsrs	r3, r3, #1
 801c3e2:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 801c3e4:	2300      	movs	r3, #0
 801c3e6:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801c3ec:	e005      	b.n	801c3fa <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801c3ee:	7bfb      	ldrb	r3, [r7, #15]
 801c3f0:	089b      	lsrs	r3, r3, #2
 801c3f2:	73fb      	strb	r3, [r7, #15]
            exp++;
 801c3f4:	7bbb      	ldrb	r3, [r7, #14]
 801c3f6:	3301      	adds	r3, #1
 801c3f8:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801c3fa:	7bfb      	ldrb	r3, [r7, #15]
 801c3fc:	2b1f      	cmp	r3, #31
 801c3fe:	d8f6      	bhi.n	801c3ee <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 801c400:	7bfb      	ldrb	r3, [r7, #15]
 801c402:	00db      	lsls	r3, r3, #3
 801c404:	b2da      	uxtb	r2, r3
 801c406:	7bbb      	ldrb	r3, [r7, #14]
 801c408:	4413      	add	r3, r2
 801c40a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801c40c:	7b7b      	ldrb	r3, [r7, #13]
 801c40e:	4619      	mov	r1, r3
 801c410:	f240 7006 	movw	r0, #1798	; 0x706
 801c414:	f000 fc7e 	bl	801cd14 <SUBGRF_WriteRegister>
    }
}
 801c418:	bf00      	nop
 801c41a:	3710      	adds	r7, #16
 801c41c:	46bd      	mov	sp, r7
 801c41e:	bd80      	pop	{r7, pc}

0801c420 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 801c420:	b580      	push	{r7, lr}
 801c422:	b082      	sub	sp, #8
 801c424:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801c426:	f7f1 fc9c 	bl	800dd62 <RBI_IsDCDC>
 801c42a:	4603      	mov	r3, r0
 801c42c:	2b01      	cmp	r3, #1
 801c42e:	d102      	bne.n	801c436 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 801c430:	2301      	movs	r3, #1
 801c432:	71fb      	strb	r3, [r7, #7]
 801c434:	e001      	b.n	801c43a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801c436:	2300      	movs	r3, #0
 801c438:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801c43a:	1dfb      	adds	r3, r7, #7
 801c43c:	2201      	movs	r2, #1
 801c43e:	4619      	mov	r1, r3
 801c440:	2096      	movs	r0, #150	; 0x96
 801c442:	f000 fd17 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c446:	bf00      	nop
 801c448:	3708      	adds	r7, #8
 801c44a:	46bd      	mov	sp, r7
 801c44c:	bd80      	pop	{r7, pc}

0801c44e <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 801c44e:	b580      	push	{r7, lr}
 801c450:	b084      	sub	sp, #16
 801c452:	af00      	add	r7, sp, #0
 801c454:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c456:	793b      	ldrb	r3, [r7, #4]
 801c458:	f3c3 1380 	ubfx	r3, r3, #6, #1
 801c45c:	b2db      	uxtb	r3, r3
 801c45e:	019b      	lsls	r3, r3, #6
 801c460:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c462:	793b      	ldrb	r3, [r7, #4]
 801c464:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801c468:	b2db      	uxtb	r3, r3
 801c46a:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c46c:	b25b      	sxtb	r3, r3
 801c46e:	4313      	orrs	r3, r2
 801c470:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c472:	793b      	ldrb	r3, [r7, #4]
 801c474:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801c478:	b2db      	uxtb	r3, r3
 801c47a:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801c47c:	b25b      	sxtb	r3, r3
 801c47e:	4313      	orrs	r3, r2
 801c480:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c482:	793b      	ldrb	r3, [r7, #4]
 801c484:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801c488:	b2db      	uxtb	r3, r3
 801c48a:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801c48c:	b25b      	sxtb	r3, r3
 801c48e:	4313      	orrs	r3, r2
 801c490:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c492:	793b      	ldrb	r3, [r7, #4]
 801c494:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801c498:	b2db      	uxtb	r3, r3
 801c49a:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801c49c:	b25b      	sxtb	r3, r3
 801c49e:	4313      	orrs	r3, r2
 801c4a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4a2:	793b      	ldrb	r3, [r7, #4]
 801c4a4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801c4a8:	b2db      	uxtb	r3, r3
 801c4aa:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801c4ac:	b25b      	sxtb	r3, r3
 801c4ae:	4313      	orrs	r3, r2
 801c4b0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801c4b2:	793b      	ldrb	r3, [r7, #4]
 801c4b4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801c4b8:	b2db      	uxtb	r3, r3
 801c4ba:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801c4bc:	4313      	orrs	r3, r2
 801c4be:	b25b      	sxtb	r3, r3
 801c4c0:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801c4c2:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801c4c4:	f107 030f 	add.w	r3, r7, #15
 801c4c8:	2201      	movs	r2, #1
 801c4ca:	4619      	mov	r1, r3
 801c4cc:	2089      	movs	r0, #137	; 0x89
 801c4ce:	f000 fcd1 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c4d2:	bf00      	nop
 801c4d4:	3710      	adds	r7, #16
 801c4d6:	46bd      	mov	sp, r7
 801c4d8:	bd80      	pop	{r7, pc}
	...

0801c4dc <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 801c4dc:	b580      	push	{r7, lr}
 801c4de:	b084      	sub	sp, #16
 801c4e0:	af00      	add	r7, sp, #0
 801c4e2:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	4a1d      	ldr	r2, [pc, #116]	; (801c55c <SUBGRF_CalibrateImage+0x80>)
 801c4e8:	4293      	cmp	r3, r2
 801c4ea:	d904      	bls.n	801c4f6 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 801c4ec:	23e1      	movs	r3, #225	; 0xe1
 801c4ee:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801c4f0:	23e9      	movs	r3, #233	; 0xe9
 801c4f2:	737b      	strb	r3, [r7, #13]
 801c4f4:	e027      	b.n	801c546 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	4a19      	ldr	r2, [pc, #100]	; (801c560 <SUBGRF_CalibrateImage+0x84>)
 801c4fa:	4293      	cmp	r3, r2
 801c4fc:	d904      	bls.n	801c508 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801c4fe:	23d7      	movs	r3, #215	; 0xd7
 801c500:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801c502:	23db      	movs	r3, #219	; 0xdb
 801c504:	737b      	strb	r3, [r7, #13]
 801c506:	e01e      	b.n	801c546 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 801c508:	687b      	ldr	r3, [r7, #4]
 801c50a:	4a16      	ldr	r2, [pc, #88]	; (801c564 <SUBGRF_CalibrateImage+0x88>)
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d904      	bls.n	801c51a <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801c510:	23c1      	movs	r3, #193	; 0xc1
 801c512:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 801c514:	23c5      	movs	r3, #197	; 0xc5
 801c516:	737b      	strb	r3, [r7, #13]
 801c518:	e015      	b.n	801c546 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	4a12      	ldr	r2, [pc, #72]	; (801c568 <SUBGRF_CalibrateImage+0x8c>)
 801c51e:	4293      	cmp	r3, r2
 801c520:	d904      	bls.n	801c52c <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801c522:	2375      	movs	r3, #117	; 0x75
 801c524:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 801c526:	2381      	movs	r3, #129	; 0x81
 801c528:	737b      	strb	r3, [r7, #13]
 801c52a:	e00c      	b.n	801c546 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	4a0f      	ldr	r2, [pc, #60]	; (801c56c <SUBGRF_CalibrateImage+0x90>)
 801c530:	4293      	cmp	r3, r2
 801c532:	d904      	bls.n	801c53e <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 801c534:	236b      	movs	r3, #107	; 0x6b
 801c536:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 801c538:	236f      	movs	r3, #111	; 0x6f
 801c53a:	737b      	strb	r3, [r7, #13]
 801c53c:	e003      	b.n	801c546 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 801c53e:	2329      	movs	r3, #41	; 0x29
 801c540:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 801c542:	232b      	movs	r3, #43	; 0x2b
 801c544:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801c546:	f107 030c 	add.w	r3, r7, #12
 801c54a:	2202      	movs	r2, #2
 801c54c:	4619      	mov	r1, r3
 801c54e:	2098      	movs	r0, #152	; 0x98
 801c550:	f000 fc90 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c554:	bf00      	nop
 801c556:	3710      	adds	r7, #16
 801c558:	46bd      	mov	sp, r7
 801c55a:	bd80      	pop	{r7, pc}
 801c55c:	35a4e900 	.word	0x35a4e900
 801c560:	32a9f880 	.word	0x32a9f880
 801c564:	2de54480 	.word	0x2de54480
 801c568:	1b6b0b00 	.word	0x1b6b0b00
 801c56c:	1954fc40 	.word	0x1954fc40

0801c570 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 801c570:	b590      	push	{r4, r7, lr}
 801c572:	b085      	sub	sp, #20
 801c574:	af00      	add	r7, sp, #0
 801c576:	4604      	mov	r4, r0
 801c578:	4608      	mov	r0, r1
 801c57a:	4611      	mov	r1, r2
 801c57c:	461a      	mov	r2, r3
 801c57e:	4623      	mov	r3, r4
 801c580:	71fb      	strb	r3, [r7, #7]
 801c582:	4603      	mov	r3, r0
 801c584:	71bb      	strb	r3, [r7, #6]
 801c586:	460b      	mov	r3, r1
 801c588:	717b      	strb	r3, [r7, #5]
 801c58a:	4613      	mov	r3, r2
 801c58c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801c58e:	79fb      	ldrb	r3, [r7, #7]
 801c590:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 801c592:	79bb      	ldrb	r3, [r7, #6]
 801c594:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 801c596:	797b      	ldrb	r3, [r7, #5]
 801c598:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801c59a:	793b      	ldrb	r3, [r7, #4]
 801c59c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801c59e:	f107 030c 	add.w	r3, r7, #12
 801c5a2:	2204      	movs	r2, #4
 801c5a4:	4619      	mov	r1, r3
 801c5a6:	2095      	movs	r0, #149	; 0x95
 801c5a8:	f000 fc64 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c5ac:	bf00      	nop
 801c5ae:	3714      	adds	r7, #20
 801c5b0:	46bd      	mov	sp, r7
 801c5b2:	bd90      	pop	{r4, r7, pc}

0801c5b4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 801c5b4:	b590      	push	{r4, r7, lr}
 801c5b6:	b085      	sub	sp, #20
 801c5b8:	af00      	add	r7, sp, #0
 801c5ba:	4604      	mov	r4, r0
 801c5bc:	4608      	mov	r0, r1
 801c5be:	4611      	mov	r1, r2
 801c5c0:	461a      	mov	r2, r3
 801c5c2:	4623      	mov	r3, r4
 801c5c4:	80fb      	strh	r3, [r7, #6]
 801c5c6:	4603      	mov	r3, r0
 801c5c8:	80bb      	strh	r3, [r7, #4]
 801c5ca:	460b      	mov	r3, r1
 801c5cc:	807b      	strh	r3, [r7, #2]
 801c5ce:	4613      	mov	r3, r2
 801c5d0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801c5d2:	88fb      	ldrh	r3, [r7, #6]
 801c5d4:	0a1b      	lsrs	r3, r3, #8
 801c5d6:	b29b      	uxth	r3, r3
 801c5d8:	b2db      	uxtb	r3, r3
 801c5da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801c5dc:	88fb      	ldrh	r3, [r7, #6]
 801c5de:	b2db      	uxtb	r3, r3
 801c5e0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801c5e2:	88bb      	ldrh	r3, [r7, #4]
 801c5e4:	0a1b      	lsrs	r3, r3, #8
 801c5e6:	b29b      	uxth	r3, r3
 801c5e8:	b2db      	uxtb	r3, r3
 801c5ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 801c5ec:	88bb      	ldrh	r3, [r7, #4]
 801c5ee:	b2db      	uxtb	r3, r3
 801c5f0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801c5f2:	887b      	ldrh	r3, [r7, #2]
 801c5f4:	0a1b      	lsrs	r3, r3, #8
 801c5f6:	b29b      	uxth	r3, r3
 801c5f8:	b2db      	uxtb	r3, r3
 801c5fa:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 801c5fc:	887b      	ldrh	r3, [r7, #2]
 801c5fe:	b2db      	uxtb	r3, r3
 801c600:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801c602:	883b      	ldrh	r3, [r7, #0]
 801c604:	0a1b      	lsrs	r3, r3, #8
 801c606:	b29b      	uxth	r3, r3
 801c608:	b2db      	uxtb	r3, r3
 801c60a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801c60c:	883b      	ldrh	r3, [r7, #0]
 801c60e:	b2db      	uxtb	r3, r3
 801c610:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801c612:	f107 0308 	add.w	r3, r7, #8
 801c616:	2208      	movs	r2, #8
 801c618:	4619      	mov	r1, r3
 801c61a:	2008      	movs	r0, #8
 801c61c:	f000 fc2a 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c620:	bf00      	nop
 801c622:	3714      	adds	r7, #20
 801c624:	46bd      	mov	sp, r7
 801c626:	bd90      	pop	{r4, r7, pc}

0801c628 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 801c628:	b580      	push	{r7, lr}
 801c62a:	b084      	sub	sp, #16
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	4603      	mov	r3, r0
 801c630:	6039      	str	r1, [r7, #0]
 801c632:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 801c634:	79fb      	ldrb	r3, [r7, #7]
 801c636:	f003 0307 	and.w	r3, r3, #7
 801c63a:	b2db      	uxtb	r3, r3
 801c63c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801c63e:	683b      	ldr	r3, [r7, #0]
 801c640:	0c1b      	lsrs	r3, r3, #16
 801c642:	b2db      	uxtb	r3, r3
 801c644:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801c646:	683b      	ldr	r3, [r7, #0]
 801c648:	0a1b      	lsrs	r3, r3, #8
 801c64a:	b2db      	uxtb	r3, r3
 801c64c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	b2db      	uxtb	r3, r3
 801c652:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 801c654:	f107 030c 	add.w	r3, r7, #12
 801c658:	2204      	movs	r2, #4
 801c65a:	4619      	mov	r1, r3
 801c65c:	2097      	movs	r0, #151	; 0x97
 801c65e:	f000 fc09 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c662:	bf00      	nop
 801c664:	3710      	adds	r7, #16
 801c666:	46bd      	mov	sp, r7
 801c668:	bd80      	pop	{r7, pc}
	...

0801c66c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801c66c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c670:	b084      	sub	sp, #16
 801c672:	af00      	add	r7, sp, #0
 801c674:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 801c676:	2300      	movs	r3, #0
 801c678:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801c67a:	4b1d      	ldr	r3, [pc, #116]	; (801c6f0 <SUBGRF_SetRfFrequency+0x84>)
 801c67c:	781b      	ldrb	r3, [r3, #0]
 801c67e:	f083 0301 	eor.w	r3, r3, #1
 801c682:	b2db      	uxtb	r3, r3
 801c684:	2b00      	cmp	r3, #0
 801c686:	d005      	beq.n	801c694 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 801c688:	6878      	ldr	r0, [r7, #4]
 801c68a:	f7ff ff27 	bl	801c4dc <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801c68e:	4b18      	ldr	r3, [pc, #96]	; (801c6f0 <SUBGRF_SetRfFrequency+0x84>)
 801c690:	2201      	movs	r2, #1
 801c692:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	2200      	movs	r2, #0
 801c698:	461c      	mov	r4, r3
 801c69a:	4615      	mov	r5, r2
 801c69c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c6a0:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c6a4:	4a13      	ldr	r2, [pc, #76]	; (801c6f4 <SUBGRF_SetRfFrequency+0x88>)
 801c6a6:	f04f 0300 	mov.w	r3, #0
 801c6aa:	4640      	mov	r0, r8
 801c6ac:	4649      	mov	r1, r9
 801c6ae:	f7e4 fc6d 	bl	8000f8c <__aeabi_uldivmod>
 801c6b2:	4602      	mov	r2, r0
 801c6b4:	460b      	mov	r3, r1
 801c6b6:	4613      	mov	r3, r2
 801c6b8:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801c6ba:	68fb      	ldr	r3, [r7, #12]
 801c6bc:	0e1b      	lsrs	r3, r3, #24
 801c6be:	b2db      	uxtb	r3, r3
 801c6c0:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801c6c2:	68fb      	ldr	r3, [r7, #12]
 801c6c4:	0c1b      	lsrs	r3, r3, #16
 801c6c6:	b2db      	uxtb	r3, r3
 801c6c8:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	0a1b      	lsrs	r3, r3, #8
 801c6ce:	b2db      	uxtb	r3, r3
 801c6d0:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	b2db      	uxtb	r3, r3
 801c6d6:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 801c6d8:	f107 0308 	add.w	r3, r7, #8
 801c6dc:	2204      	movs	r2, #4
 801c6de:	4619      	mov	r1, r3
 801c6e0:	2086      	movs	r0, #134	; 0x86
 801c6e2:	f000 fbc7 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c6e6:	bf00      	nop
 801c6e8:	3710      	adds	r7, #16
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801c6f0:	20001870 	.word	0x20001870
 801c6f4:	01e84800 	.word	0x01e84800

0801c6f8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 801c6f8:	b580      	push	{r7, lr}
 801c6fa:	b082      	sub	sp, #8
 801c6fc:	af00      	add	r7, sp, #0
 801c6fe:	4603      	mov	r3, r0
 801c700:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801c702:	79fa      	ldrb	r2, [r7, #7]
 801c704:	4b09      	ldr	r3, [pc, #36]	; (801c72c <SUBGRF_SetPacketType+0x34>)
 801c706:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 801c708:	79fb      	ldrb	r3, [r7, #7]
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d104      	bne.n	801c718 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801c70e:	2100      	movs	r1, #0
 801c710:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801c714:	f000 fafe 	bl	801cd14 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 801c718:	1dfb      	adds	r3, r7, #7
 801c71a:	2201      	movs	r2, #1
 801c71c:	4619      	mov	r1, r3
 801c71e:	208a      	movs	r0, #138	; 0x8a
 801c720:	f000 fba8 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c724:	bf00      	nop
 801c726:	3708      	adds	r7, #8
 801c728:	46bd      	mov	sp, r7
 801c72a:	bd80      	pop	{r7, pc}
 801c72c:	20001869 	.word	0x20001869

0801c730 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801c730:	b480      	push	{r7}
 801c732:	af00      	add	r7, sp, #0
    return PacketType;
 801c734:	4b02      	ldr	r3, [pc, #8]	; (801c740 <SUBGRF_GetPacketType+0x10>)
 801c736:	781b      	ldrb	r3, [r3, #0]
}
 801c738:	4618      	mov	r0, r3
 801c73a:	46bd      	mov	sp, r7
 801c73c:	bc80      	pop	{r7}
 801c73e:	4770      	bx	lr
 801c740:	20001869 	.word	0x20001869

0801c744 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b084      	sub	sp, #16
 801c748:	af00      	add	r7, sp, #0
 801c74a:	4603      	mov	r3, r0
 801c74c:	71fb      	strb	r3, [r7, #7]
 801c74e:	460b      	mov	r3, r1
 801c750:	71bb      	strb	r3, [r7, #6]
 801c752:	4613      	mov	r3, r2
 801c754:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 801c756:	79fb      	ldrb	r3, [r7, #7]
 801c758:	2b01      	cmp	r3, #1
 801c75a:	d149      	bne.n	801c7f0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801c75c:	2000      	movs	r0, #0
 801c75e:	f7f1 fb07 	bl	800dd70 <RBI_GetRFOMaxPowerConfig>
 801c762:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 801c764:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c768:	68fa      	ldr	r2, [r7, #12]
 801c76a:	429a      	cmp	r2, r3
 801c76c:	da01      	bge.n	801c772 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801c76e:	68fb      	ldr	r3, [r7, #12]
 801c770:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 801c772:	68fb      	ldr	r3, [r7, #12]
 801c774:	2b0e      	cmp	r3, #14
 801c776:	d10e      	bne.n	801c796 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 801c778:	2301      	movs	r3, #1
 801c77a:	2201      	movs	r2, #1
 801c77c:	2100      	movs	r1, #0
 801c77e:	2004      	movs	r0, #4
 801c780:	f7ff fef6 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c784:	79ba      	ldrb	r2, [r7, #6]
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	b2db      	uxtb	r3, r3
 801c78a:	1ad3      	subs	r3, r2, r3
 801c78c:	b2db      	uxtb	r3, r3
 801c78e:	330e      	adds	r3, #14
 801c790:	b2db      	uxtb	r3, r3
 801c792:	71bb      	strb	r3, [r7, #6]
 801c794:	e01f      	b.n	801c7d6 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801c796:	68fb      	ldr	r3, [r7, #12]
 801c798:	2b0a      	cmp	r3, #10
 801c79a:	d10e      	bne.n	801c7ba <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801c79c:	2301      	movs	r3, #1
 801c79e:	2201      	movs	r2, #1
 801c7a0:	2100      	movs	r1, #0
 801c7a2:	2001      	movs	r0, #1
 801c7a4:	f7ff fee4 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 801c7a8:	79ba      	ldrb	r2, [r7, #6]
 801c7aa:	68fb      	ldr	r3, [r7, #12]
 801c7ac:	b2db      	uxtb	r3, r3
 801c7ae:	1ad3      	subs	r3, r2, r3
 801c7b0:	b2db      	uxtb	r3, r3
 801c7b2:	330d      	adds	r3, #13
 801c7b4:	b2db      	uxtb	r3, r3
 801c7b6:	71bb      	strb	r3, [r7, #6]
 801c7b8:	e00d      	b.n	801c7d6 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 801c7ba:	2301      	movs	r3, #1
 801c7bc:	2201      	movs	r2, #1
 801c7be:	2100      	movs	r1, #0
 801c7c0:	2007      	movs	r0, #7
 801c7c2:	f7ff fed5 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c7c6:	79ba      	ldrb	r2, [r7, #6]
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	b2db      	uxtb	r3, r3
 801c7cc:	1ad3      	subs	r3, r2, r3
 801c7ce:	b2db      	uxtb	r3, r3
 801c7d0:	330e      	adds	r3, #14
 801c7d2:	b2db      	uxtb	r3, r3
 801c7d4:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801c7d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c7da:	f113 0f11 	cmn.w	r3, #17
 801c7de:	da01      	bge.n	801c7e4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801c7e0:	23ef      	movs	r3, #239	; 0xef
 801c7e2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801c7e4:	2118      	movs	r1, #24
 801c7e6:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c7ea:	f000 fa93 	bl	801cd14 <SUBGRF_WriteRegister>
 801c7ee:	e067      	b.n	801c8c0 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801c7f0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c7f4:	f000 faa2 	bl	801cd3c <SUBGRF_ReadRegister>
 801c7f8:	4603      	mov	r3, r0
 801c7fa:	f043 031e 	orr.w	r3, r3, #30
 801c7fe:	b2db      	uxtb	r3, r3
 801c800:	4619      	mov	r1, r3
 801c802:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801c806:	f000 fa85 	bl	801cd14 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 801c80a:	2001      	movs	r0, #1
 801c80c:	f7f1 fab0 	bl	800dd70 <RBI_GetRFOMaxPowerConfig>
 801c810:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801c812:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c816:	68fa      	ldr	r2, [r7, #12]
 801c818:	429a      	cmp	r2, r3
 801c81a:	da01      	bge.n	801c820 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801c820:	68fb      	ldr	r3, [r7, #12]
 801c822:	2b14      	cmp	r3, #20
 801c824:	d10e      	bne.n	801c844 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801c826:	2301      	movs	r3, #1
 801c828:	2200      	movs	r2, #0
 801c82a:	2105      	movs	r1, #5
 801c82c:	2003      	movs	r0, #3
 801c82e:	f7ff fe9f 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c832:	79ba      	ldrb	r2, [r7, #6]
 801c834:	68fb      	ldr	r3, [r7, #12]
 801c836:	b2db      	uxtb	r3, r3
 801c838:	1ad3      	subs	r3, r2, r3
 801c83a:	b2db      	uxtb	r3, r3
 801c83c:	3316      	adds	r3, #22
 801c83e:	b2db      	uxtb	r3, r3
 801c840:	71bb      	strb	r3, [r7, #6]
 801c842:	e031      	b.n	801c8a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 801c844:	68fb      	ldr	r3, [r7, #12]
 801c846:	2b11      	cmp	r3, #17
 801c848:	d10e      	bne.n	801c868 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801c84a:	2301      	movs	r3, #1
 801c84c:	2200      	movs	r2, #0
 801c84e:	2103      	movs	r1, #3
 801c850:	2002      	movs	r0, #2
 801c852:	f7ff fe8d 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c856:	79ba      	ldrb	r2, [r7, #6]
 801c858:	68fb      	ldr	r3, [r7, #12]
 801c85a:	b2db      	uxtb	r3, r3
 801c85c:	1ad3      	subs	r3, r2, r3
 801c85e:	b2db      	uxtb	r3, r3
 801c860:	3316      	adds	r3, #22
 801c862:	b2db      	uxtb	r3, r3
 801c864:	71bb      	strb	r3, [r7, #6]
 801c866:	e01f      	b.n	801c8a8 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 801c868:	68fb      	ldr	r3, [r7, #12]
 801c86a:	2b0e      	cmp	r3, #14
 801c86c:	d10e      	bne.n	801c88c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801c86e:	2301      	movs	r3, #1
 801c870:	2200      	movs	r2, #0
 801c872:	2102      	movs	r1, #2
 801c874:	2002      	movs	r0, #2
 801c876:	f7ff fe7b 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801c87a:	79ba      	ldrb	r2, [r7, #6]
 801c87c:	68fb      	ldr	r3, [r7, #12]
 801c87e:	b2db      	uxtb	r3, r3
 801c880:	1ad3      	subs	r3, r2, r3
 801c882:	b2db      	uxtb	r3, r3
 801c884:	330e      	adds	r3, #14
 801c886:	b2db      	uxtb	r3, r3
 801c888:	71bb      	strb	r3, [r7, #6]
 801c88a:	e00d      	b.n	801c8a8 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801c88c:	2301      	movs	r3, #1
 801c88e:	2200      	movs	r2, #0
 801c890:	2107      	movs	r1, #7
 801c892:	2004      	movs	r0, #4
 801c894:	f7ff fe6c 	bl	801c570 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801c898:	79ba      	ldrb	r2, [r7, #6]
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	b2db      	uxtb	r3, r3
 801c89e:	1ad3      	subs	r3, r2, r3
 801c8a0:	b2db      	uxtb	r3, r3
 801c8a2:	3316      	adds	r3, #22
 801c8a4:	b2db      	uxtb	r3, r3
 801c8a6:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 801c8a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801c8ac:	f113 0f09 	cmn.w	r3, #9
 801c8b0:	da01      	bge.n	801c8b6 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801c8b2:	23f7      	movs	r3, #247	; 0xf7
 801c8b4:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801c8b6:	2138      	movs	r1, #56	; 0x38
 801c8b8:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801c8bc:	f000 fa2a 	bl	801cd14 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 801c8c0:	79bb      	ldrb	r3, [r7, #6]
 801c8c2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801c8c4:	797b      	ldrb	r3, [r7, #5]
 801c8c6:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 801c8c8:	f107 0308 	add.w	r3, r7, #8
 801c8cc:	2202      	movs	r2, #2
 801c8ce:	4619      	mov	r1, r3
 801c8d0:	208e      	movs	r0, #142	; 0x8e
 801c8d2:	f000 facf 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801c8d6:	bf00      	nop
 801c8d8:	3710      	adds	r7, #16
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
	...

0801c8e0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 801c8e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801c8e4:	b086      	sub	sp, #24
 801c8e6:	af00      	add	r7, sp, #0
 801c8e8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 801c8ea:	2300      	movs	r3, #0
 801c8ec:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801c8ee:	4a61      	ldr	r2, [pc, #388]	; (801ca74 <SUBGRF_SetModulationParams+0x194>)
 801c8f0:	f107 0308 	add.w	r3, r7, #8
 801c8f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c8f8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 801c8fc:	687b      	ldr	r3, [r7, #4]
 801c8fe:	781a      	ldrb	r2, [r3, #0]
 801c900:	4b5d      	ldr	r3, [pc, #372]	; (801ca78 <SUBGRF_SetModulationParams+0x198>)
 801c902:	781b      	ldrb	r3, [r3, #0]
 801c904:	429a      	cmp	r2, r3
 801c906:	d004      	beq.n	801c912 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 801c908:	687b      	ldr	r3, [r7, #4]
 801c90a:	781b      	ldrb	r3, [r3, #0]
 801c90c:	4618      	mov	r0, r3
 801c90e:	f7ff fef3 	bl	801c6f8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	781b      	ldrb	r3, [r3, #0]
 801c916:	2b03      	cmp	r3, #3
 801c918:	f200 80a5 	bhi.w	801ca66 <SUBGRF_SetModulationParams+0x186>
 801c91c:	a201      	add	r2, pc, #4	; (adr r2, 801c924 <SUBGRF_SetModulationParams+0x44>)
 801c91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c922:	bf00      	nop
 801c924:	0801c935 	.word	0x0801c935
 801c928:	0801c9f5 	.word	0x0801c9f5
 801c92c:	0801c9b7 	.word	0x0801c9b7
 801c930:	0801ca23 	.word	0x0801ca23
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 801c934:	2308      	movs	r3, #8
 801c936:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	685b      	ldr	r3, [r3, #4]
 801c93c:	4a4f      	ldr	r2, [pc, #316]	; (801ca7c <SUBGRF_SetModulationParams+0x19c>)
 801c93e:	fbb2 f3f3 	udiv	r3, r2, r3
 801c942:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c944:	697b      	ldr	r3, [r7, #20]
 801c946:	0c1b      	lsrs	r3, r3, #16
 801c948:	b2db      	uxtb	r3, r3
 801c94a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c94c:	697b      	ldr	r3, [r7, #20]
 801c94e:	0a1b      	lsrs	r3, r3, #8
 801c950:	b2db      	uxtb	r3, r3
 801c952:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	b2db      	uxtb	r3, r3
 801c958:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801c95a:	687b      	ldr	r3, [r7, #4]
 801c95c:	7b1b      	ldrb	r3, [r3, #12]
 801c95e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	7b5b      	ldrb	r3, [r3, #13]
 801c964:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	689b      	ldr	r3, [r3, #8]
 801c96a:	2200      	movs	r2, #0
 801c96c:	461c      	mov	r4, r3
 801c96e:	4615      	mov	r5, r2
 801c970:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801c974:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801c978:	4a41      	ldr	r2, [pc, #260]	; (801ca80 <SUBGRF_SetModulationParams+0x1a0>)
 801c97a:	f04f 0300 	mov.w	r3, #0
 801c97e:	4640      	mov	r0, r8
 801c980:	4649      	mov	r1, r9
 801c982:	f7e4 fb03 	bl	8000f8c <__aeabi_uldivmod>
 801c986:	4602      	mov	r2, r0
 801c988:	460b      	mov	r3, r1
 801c98a:	4613      	mov	r3, r2
 801c98c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801c98e:	697b      	ldr	r3, [r7, #20]
 801c990:	0c1b      	lsrs	r3, r3, #16
 801c992:	b2db      	uxtb	r3, r3
 801c994:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801c996:	697b      	ldr	r3, [r7, #20]
 801c998:	0a1b      	lsrs	r3, r3, #8
 801c99a:	b2db      	uxtb	r3, r3
 801c99c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801c99e:	697b      	ldr	r3, [r7, #20]
 801c9a0:	b2db      	uxtb	r3, r3
 801c9a2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9a4:	7cfb      	ldrb	r3, [r7, #19]
 801c9a6:	b29a      	uxth	r2, r3
 801c9a8:	f107 0308 	add.w	r3, r7, #8
 801c9ac:	4619      	mov	r1, r3
 801c9ae:	208b      	movs	r0, #139	; 0x8b
 801c9b0:	f000 fa60 	bl	801ce74 <SUBGRF_WriteCommand>
        break;
 801c9b4:	e058      	b.n	801ca68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801c9b6:	2304      	movs	r3, #4
 801c9b8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801c9ba:	687b      	ldr	r3, [r7, #4]
 801c9bc:	691b      	ldr	r3, [r3, #16]
 801c9be:	4a2f      	ldr	r2, [pc, #188]	; (801ca7c <SUBGRF_SetModulationParams+0x19c>)
 801c9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9c4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801c9c6:	697b      	ldr	r3, [r7, #20]
 801c9c8:	0c1b      	lsrs	r3, r3, #16
 801c9ca:	b2db      	uxtb	r3, r3
 801c9cc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801c9ce:	697b      	ldr	r3, [r7, #20]
 801c9d0:	0a1b      	lsrs	r3, r3, #8
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801c9d6:	697b      	ldr	r3, [r7, #20]
 801c9d8:	b2db      	uxtb	r3, r3
 801c9da:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	7d1b      	ldrb	r3, [r3, #20]
 801c9e0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801c9e2:	7cfb      	ldrb	r3, [r7, #19]
 801c9e4:	b29a      	uxth	r2, r3
 801c9e6:	f107 0308 	add.w	r3, r7, #8
 801c9ea:	4619      	mov	r1, r3
 801c9ec:	208b      	movs	r0, #139	; 0x8b
 801c9ee:	f000 fa41 	bl	801ce74 <SUBGRF_WriteCommand>
        break;
 801c9f2:	e039      	b.n	801ca68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801c9f4:	2304      	movs	r3, #4
 801c9f6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	7e1b      	ldrb	r3, [r3, #24]
 801c9fc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	7e5b      	ldrb	r3, [r3, #25]
 801ca02:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801ca04:	687b      	ldr	r3, [r7, #4]
 801ca06:	7e9b      	ldrb	r3, [r3, #26]
 801ca08:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 801ca0a:	687b      	ldr	r3, [r7, #4]
 801ca0c:	7edb      	ldrb	r3, [r3, #27]
 801ca0e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca10:	7cfb      	ldrb	r3, [r7, #19]
 801ca12:	b29a      	uxth	r2, r3
 801ca14:	f107 0308 	add.w	r3, r7, #8
 801ca18:	4619      	mov	r1, r3
 801ca1a:	208b      	movs	r0, #139	; 0x8b
 801ca1c:	f000 fa2a 	bl	801ce74 <SUBGRF_WriteCommand>

        break;
 801ca20:	e022      	b.n	801ca68 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801ca22:	2305      	movs	r3, #5
 801ca24:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801ca26:	687b      	ldr	r3, [r7, #4]
 801ca28:	685b      	ldr	r3, [r3, #4]
 801ca2a:	4a14      	ldr	r2, [pc, #80]	; (801ca7c <SUBGRF_SetModulationParams+0x19c>)
 801ca2c:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca30:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801ca32:	697b      	ldr	r3, [r7, #20]
 801ca34:	0c1b      	lsrs	r3, r3, #16
 801ca36:	b2db      	uxtb	r3, r3
 801ca38:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801ca3a:	697b      	ldr	r3, [r7, #20]
 801ca3c:	0a1b      	lsrs	r3, r3, #8
 801ca3e:	b2db      	uxtb	r3, r3
 801ca40:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801ca42:	697b      	ldr	r3, [r7, #20]
 801ca44:	b2db      	uxtb	r3, r3
 801ca46:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801ca48:	687b      	ldr	r3, [r7, #4]
 801ca4a:	7b1b      	ldrb	r3, [r3, #12]
 801ca4c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801ca4e:	687b      	ldr	r3, [r7, #4]
 801ca50:	7b5b      	ldrb	r3, [r3, #13]
 801ca52:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801ca54:	7cfb      	ldrb	r3, [r7, #19]
 801ca56:	b29a      	uxth	r2, r3
 801ca58:	f107 0308 	add.w	r3, r7, #8
 801ca5c:	4619      	mov	r1, r3
 801ca5e:	208b      	movs	r0, #139	; 0x8b
 801ca60:	f000 fa08 	bl	801ce74 <SUBGRF_WriteCommand>
        break;
 801ca64:	e000      	b.n	801ca68 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 801ca66:	bf00      	nop
    }
}
 801ca68:	bf00      	nop
 801ca6a:	3718      	adds	r7, #24
 801ca6c:	46bd      	mov	sp, r7
 801ca6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801ca72:	bf00      	nop
 801ca74:	0801f488 	.word	0x0801f488
 801ca78:	20001869 	.word	0x20001869
 801ca7c:	3d090000 	.word	0x3d090000
 801ca80:	01e84800 	.word	0x01e84800

0801ca84 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b086      	sub	sp, #24
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801ca8c:	2300      	movs	r3, #0
 801ca8e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 801ca90:	4a48      	ldr	r2, [pc, #288]	; (801cbb4 <SUBGRF_SetPacketParams+0x130>)
 801ca92:	f107 030c 	add.w	r3, r7, #12
 801ca96:	ca07      	ldmia	r2, {r0, r1, r2}
 801ca98:	c303      	stmia	r3!, {r0, r1}
 801ca9a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	781a      	ldrb	r2, [r3, #0]
 801caa0:	4b45      	ldr	r3, [pc, #276]	; (801cbb8 <SUBGRF_SetPacketParams+0x134>)
 801caa2:	781b      	ldrb	r3, [r3, #0]
 801caa4:	429a      	cmp	r2, r3
 801caa6:	d004      	beq.n	801cab2 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	781b      	ldrb	r3, [r3, #0]
 801caac:	4618      	mov	r0, r3
 801caae:	f7ff fe23 	bl	801c6f8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	781b      	ldrb	r3, [r3, #0]
 801cab6:	2b03      	cmp	r3, #3
 801cab8:	d878      	bhi.n	801cbac <SUBGRF_SetPacketParams+0x128>
 801caba:	a201      	add	r2, pc, #4	; (adr r2, 801cac0 <SUBGRF_SetPacketParams+0x3c>)
 801cabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cac0:	0801cad1 	.word	0x0801cad1
 801cac4:	0801cb61 	.word	0x0801cb61
 801cac8:	0801cb55 	.word	0x0801cb55
 801cacc:	0801cad1 	.word	0x0801cad1
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 801cad0:	687b      	ldr	r3, [r7, #4]
 801cad2:	7a5b      	ldrb	r3, [r3, #9]
 801cad4:	2bf1      	cmp	r3, #241	; 0xf1
 801cad6:	d10a      	bne.n	801caee <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 801cad8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801cadc:	f7ff faaa 	bl	801c034 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801cae0:	f248 0005 	movw	r0, #32773	; 0x8005
 801cae4:	f7ff fac6 	bl	801c074 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 801cae8:	2302      	movs	r3, #2
 801caea:	75bb      	strb	r3, [r7, #22]
 801caec:	e011      	b.n	801cb12 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	7a5b      	ldrb	r3, [r3, #9]
 801caf2:	2bf2      	cmp	r3, #242	; 0xf2
 801caf4:	d10a      	bne.n	801cb0c <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801caf6:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801cafa:	f7ff fa9b 	bl	801c034 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801cafe:	f241 0021 	movw	r0, #4129	; 0x1021
 801cb02:	f7ff fab7 	bl	801c074 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801cb06:	2306      	movs	r3, #6
 801cb08:	75bb      	strb	r3, [r7, #22]
 801cb0a:	e002      	b.n	801cb12 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 801cb0c:	687b      	ldr	r3, [r7, #4]
 801cb0e:	7a5b      	ldrb	r3, [r3, #9]
 801cb10:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801cb12:	2309      	movs	r3, #9
 801cb14:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	885b      	ldrh	r3, [r3, #2]
 801cb1a:	0a1b      	lsrs	r3, r3, #8
 801cb1c:	b29b      	uxth	r3, r3
 801cb1e:	b2db      	uxtb	r3, r3
 801cb20:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	885b      	ldrh	r3, [r3, #2]
 801cb26:	b2db      	uxtb	r3, r3
 801cb28:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 801cb2a:	687b      	ldr	r3, [r7, #4]
 801cb2c:	791b      	ldrb	r3, [r3, #4]
 801cb2e:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	795b      	ldrb	r3, [r3, #5]
 801cb34:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	799b      	ldrb	r3, [r3, #6]
 801cb3a:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	79db      	ldrb	r3, [r3, #7]
 801cb40:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801cb42:	687b      	ldr	r3, [r7, #4]
 801cb44:	7a1b      	ldrb	r3, [r3, #8]
 801cb46:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 801cb48:	7dbb      	ldrb	r3, [r7, #22]
 801cb4a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	7a9b      	ldrb	r3, [r3, #10]
 801cb50:	753b      	strb	r3, [r7, #20]
        break;
 801cb52:	e022      	b.n	801cb9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 801cb54:	2301      	movs	r3, #1
 801cb56:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	7b1b      	ldrb	r3, [r3, #12]
 801cb5c:	733b      	strb	r3, [r7, #12]
        break;
 801cb5e:	e01c      	b.n	801cb9a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801cb60:	2306      	movs	r3, #6
 801cb62:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	89db      	ldrh	r3, [r3, #14]
 801cb68:	0a1b      	lsrs	r3, r3, #8
 801cb6a:	b29b      	uxth	r3, r3
 801cb6c:	b2db      	uxtb	r3, r3
 801cb6e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801cb70:	687b      	ldr	r3, [r7, #4]
 801cb72:	89db      	ldrh	r3, [r3, #14]
 801cb74:	b2db      	uxtb	r3, r3
 801cb76:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	7c1a      	ldrb	r2, [r3, #16]
 801cb7c:	4b0f      	ldr	r3, [pc, #60]	; (801cbbc <SUBGRF_SetPacketParams+0x138>)
 801cb7e:	4611      	mov	r1, r2
 801cb80:	7019      	strb	r1, [r3, #0]
 801cb82:	4613      	mov	r3, r2
 801cb84:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801cb86:	687b      	ldr	r3, [r7, #4]
 801cb88:	7c5b      	ldrb	r3, [r3, #17]
 801cb8a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801cb8c:	687b      	ldr	r3, [r7, #4]
 801cb8e:	7c9b      	ldrb	r3, [r3, #18]
 801cb90:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	7cdb      	ldrb	r3, [r3, #19]
 801cb96:	747b      	strb	r3, [r7, #17]
        break;
 801cb98:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801cb9a:	7dfb      	ldrb	r3, [r7, #23]
 801cb9c:	b29a      	uxth	r2, r3
 801cb9e:	f107 030c 	add.w	r3, r7, #12
 801cba2:	4619      	mov	r1, r3
 801cba4:	208c      	movs	r0, #140	; 0x8c
 801cba6:	f000 f965 	bl	801ce74 <SUBGRF_WriteCommand>
 801cbaa:	e000      	b.n	801cbae <SUBGRF_SetPacketParams+0x12a>
        return;
 801cbac:	bf00      	nop
}
 801cbae:	3718      	adds	r7, #24
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	bd80      	pop	{r7, pc}
 801cbb4:	0801f490 	.word	0x0801f490
 801cbb8:	20001869 	.word	0x20001869
 801cbbc:	2000186a 	.word	0x2000186a

0801cbc0 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b084      	sub	sp, #16
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	4603      	mov	r3, r0
 801cbc8:	460a      	mov	r2, r1
 801cbca:	71fb      	strb	r3, [r7, #7]
 801cbcc:	4613      	mov	r3, r2
 801cbce:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 801cbd0:	79fb      	ldrb	r3, [r7, #7]
 801cbd2:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801cbd4:	79bb      	ldrb	r3, [r7, #6]
 801cbd6:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801cbd8:	f107 030c 	add.w	r3, r7, #12
 801cbdc:	2202      	movs	r2, #2
 801cbde:	4619      	mov	r1, r3
 801cbe0:	208f      	movs	r0, #143	; 0x8f
 801cbe2:	f000 f947 	bl	801ce74 <SUBGRF_WriteCommand>
}
 801cbe6:	bf00      	nop
 801cbe8:	3710      	adds	r7, #16
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}

0801cbee <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 801cbee:	b580      	push	{r7, lr}
 801cbf0:	b082      	sub	sp, #8
 801cbf2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801cbf4:	2300      	movs	r3, #0
 801cbf6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 801cbf8:	1d3b      	adds	r3, r7, #4
 801cbfa:	2201      	movs	r2, #1
 801cbfc:	4619      	mov	r1, r3
 801cbfe:	2015      	movs	r0, #21
 801cc00:	f000 f95a 	bl	801ceb8 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801cc04:	793b      	ldrb	r3, [r7, #4]
 801cc06:	425b      	negs	r3, r3
 801cc08:	105b      	asrs	r3, r3, #1
 801cc0a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 801cc0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801cc10:	4618      	mov	r0, r3
 801cc12:	3708      	adds	r7, #8
 801cc14:	46bd      	mov	sp, r7
 801cc16:	bd80      	pop	{r7, pc}

0801cc18 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b084      	sub	sp, #16
 801cc1c:	af00      	add	r7, sp, #0
 801cc1e:	6078      	str	r0, [r7, #4]
 801cc20:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801cc22:	f107 030c 	add.w	r3, r7, #12
 801cc26:	2202      	movs	r2, #2
 801cc28:	4619      	mov	r1, r3
 801cc2a:	2013      	movs	r0, #19
 801cc2c:	f000 f944 	bl	801ceb8 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 801cc30:	f7ff fd7e 	bl	801c730 <SUBGRF_GetPacketType>
 801cc34:	4603      	mov	r3, r0
 801cc36:	2b01      	cmp	r3, #1
 801cc38:	d10d      	bne.n	801cc56 <SUBGRF_GetRxBufferStatus+0x3e>
 801cc3a:	4b0c      	ldr	r3, [pc, #48]	; (801cc6c <SUBGRF_GetRxBufferStatus+0x54>)
 801cc3c:	781b      	ldrb	r3, [r3, #0]
 801cc3e:	b2db      	uxtb	r3, r3
 801cc40:	2b01      	cmp	r3, #1
 801cc42:	d108      	bne.n	801cc56 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801cc44:	f240 7002 	movw	r0, #1794	; 0x702
 801cc48:	f000 f878 	bl	801cd3c <SUBGRF_ReadRegister>
 801cc4c:	4603      	mov	r3, r0
 801cc4e:	461a      	mov	r2, r3
 801cc50:	687b      	ldr	r3, [r7, #4]
 801cc52:	701a      	strb	r2, [r3, #0]
 801cc54:	e002      	b.n	801cc5c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801cc56:	7b3a      	ldrb	r2, [r7, #12]
 801cc58:	687b      	ldr	r3, [r7, #4]
 801cc5a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801cc5c:	7b7a      	ldrb	r2, [r7, #13]
 801cc5e:	683b      	ldr	r3, [r7, #0]
 801cc60:	701a      	strb	r2, [r3, #0]
}
 801cc62:	bf00      	nop
 801cc64:	3710      	adds	r7, #16
 801cc66:	46bd      	mov	sp, r7
 801cc68:	bd80      	pop	{r7, pc}
 801cc6a:	bf00      	nop
 801cc6c:	2000186a 	.word	0x2000186a

0801cc70 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b084      	sub	sp, #16
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 801cc78:	f107 030c 	add.w	r3, r7, #12
 801cc7c:	2203      	movs	r2, #3
 801cc7e:	4619      	mov	r1, r3
 801cc80:	2014      	movs	r0, #20
 801cc82:	f000 f919 	bl	801ceb8 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801cc86:	f7ff fd53 	bl	801c730 <SUBGRF_GetPacketType>
 801cc8a:	4603      	mov	r3, r0
 801cc8c:	461a      	mov	r2, r3
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	781b      	ldrb	r3, [r3, #0]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d002      	beq.n	801cca0 <SUBGRF_GetPacketStatus+0x30>
 801cc9a:	2b01      	cmp	r3, #1
 801cc9c:	d013      	beq.n	801ccc6 <SUBGRF_GetPacketStatus+0x56>
 801cc9e:	e02a      	b.n	801ccf6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801cca0:	7b3a      	ldrb	r2, [r7, #12]
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801cca6:	7b7b      	ldrb	r3, [r7, #13]
 801cca8:	425b      	negs	r3, r3
 801ccaa:	105b      	asrs	r3, r3, #1
 801ccac:	b25a      	sxtb	r2, r3
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801ccb2:	7bbb      	ldrb	r3, [r7, #14]
 801ccb4:	425b      	negs	r3, r3
 801ccb6:	105b      	asrs	r3, r3, #1
 801ccb8:	b25a      	sxtb	r2, r3
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801ccbe:	687b      	ldr	r3, [r7, #4]
 801ccc0:	2200      	movs	r2, #0
 801ccc2:	609a      	str	r2, [r3, #8]
            break;
 801ccc4:	e020      	b.n	801cd08 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801ccc6:	7b3b      	ldrb	r3, [r7, #12]
 801ccc8:	425b      	negs	r3, r3
 801ccca:	105b      	asrs	r3, r3, #1
 801cccc:	b25a      	sxtb	r2, r3
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801ccd2:	7b7b      	ldrb	r3, [r7, #13]
 801ccd4:	b25b      	sxtb	r3, r3
 801ccd6:	3302      	adds	r3, #2
 801ccd8:	109b      	asrs	r3, r3, #2
 801ccda:	b25a      	sxtb	r2, r3
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 801cce0:	7bbb      	ldrb	r3, [r7, #14]
 801cce2:	425b      	negs	r3, r3
 801cce4:	105b      	asrs	r3, r3, #1
 801cce6:	b25a      	sxtb	r2, r3
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 801ccec:	4b08      	ldr	r3, [pc, #32]	; (801cd10 <SUBGRF_GetPacketStatus+0xa0>)
 801ccee:	681a      	ldr	r2, [r3, #0]
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	611a      	str	r2, [r3, #16]
            break;
 801ccf4:	e008      	b.n	801cd08 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801ccf6:	2214      	movs	r2, #20
 801ccf8:	2100      	movs	r1, #0
 801ccfa:	6878      	ldr	r0, [r7, #4]
 801ccfc:	f000 fc03 	bl	801d506 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	220f      	movs	r2, #15
 801cd04:	701a      	strb	r2, [r3, #0]
            break;
 801cd06:	bf00      	nop
    }
}
 801cd08:	bf00      	nop
 801cd0a:	3710      	adds	r7, #16
 801cd0c:	46bd      	mov	sp, r7
 801cd0e:	bd80      	pop	{r7, pc}
 801cd10:	2000186c 	.word	0x2000186c

0801cd14 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b082      	sub	sp, #8
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	460a      	mov	r2, r1
 801cd1e:	80fb      	strh	r3, [r7, #6]
 801cd20:	4613      	mov	r3, r2
 801cd22:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801cd24:	1d7a      	adds	r2, r7, #5
 801cd26:	88f9      	ldrh	r1, [r7, #6]
 801cd28:	2301      	movs	r3, #1
 801cd2a:	4803      	ldr	r0, [pc, #12]	; (801cd38 <SUBGRF_WriteRegister+0x24>)
 801cd2c:	f7ed fbda 	bl	800a4e4 <HAL_SUBGHZ_WriteRegisters>
}
 801cd30:	bf00      	nop
 801cd32:	3708      	adds	r7, #8
 801cd34:	46bd      	mov	sp, r7
 801cd36:	bd80      	pop	{r7, pc}
 801cd38:	200003c4 	.word	0x200003c4

0801cd3c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801cd3c:	b580      	push	{r7, lr}
 801cd3e:	b084      	sub	sp, #16
 801cd40:	af00      	add	r7, sp, #0
 801cd42:	4603      	mov	r3, r0
 801cd44:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801cd46:	f107 020f 	add.w	r2, r7, #15
 801cd4a:	88f9      	ldrh	r1, [r7, #6]
 801cd4c:	2301      	movs	r3, #1
 801cd4e:	4804      	ldr	r0, [pc, #16]	; (801cd60 <SUBGRF_ReadRegister+0x24>)
 801cd50:	f7ed fc27 	bl	800a5a2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 801cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd56:	4618      	mov	r0, r3
 801cd58:	3710      	adds	r7, #16
 801cd5a:	46bd      	mov	sp, r7
 801cd5c:	bd80      	pop	{r7, pc}
 801cd5e:	bf00      	nop
 801cd60:	200003c4 	.word	0x200003c4

0801cd64 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cd64:	b580      	push	{r7, lr}
 801cd66:	b086      	sub	sp, #24
 801cd68:	af00      	add	r7, sp, #0
 801cd6a:	4603      	mov	r3, r0
 801cd6c:	6039      	str	r1, [r7, #0]
 801cd6e:	80fb      	strh	r3, [r7, #6]
 801cd70:	4613      	mov	r3, r2
 801cd72:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cd74:	f3ef 8310 	mrs	r3, PRIMASK
 801cd78:	60fb      	str	r3, [r7, #12]
  return(result);
 801cd7a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cd7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cd7e:	b672      	cpsid	i
}
 801cd80:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801cd82:	88bb      	ldrh	r3, [r7, #4]
 801cd84:	88f9      	ldrh	r1, [r7, #6]
 801cd86:	683a      	ldr	r2, [r7, #0]
 801cd88:	4806      	ldr	r0, [pc, #24]	; (801cda4 <SUBGRF_WriteRegisters+0x40>)
 801cd8a:	f7ed fbab 	bl	800a4e4 <HAL_SUBGHZ_WriteRegisters>
 801cd8e:	697b      	ldr	r3, [r7, #20]
 801cd90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cd92:	693b      	ldr	r3, [r7, #16]
 801cd94:	f383 8810 	msr	PRIMASK, r3
}
 801cd98:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cd9a:	bf00      	nop
 801cd9c:	3718      	adds	r7, #24
 801cd9e:	46bd      	mov	sp, r7
 801cda0:	bd80      	pop	{r7, pc}
 801cda2:	bf00      	nop
 801cda4:	200003c4 	.word	0x200003c4

0801cda8 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b086      	sub	sp, #24
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	4603      	mov	r3, r0
 801cdb0:	6039      	str	r1, [r7, #0]
 801cdb2:	80fb      	strh	r3, [r7, #6]
 801cdb4:	4613      	mov	r3, r2
 801cdb6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdb8:	f3ef 8310 	mrs	r3, PRIMASK
 801cdbc:	60fb      	str	r3, [r7, #12]
  return(result);
 801cdbe:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801cdc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801cdc2:	b672      	cpsid	i
}
 801cdc4:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801cdc6:	88bb      	ldrh	r3, [r7, #4]
 801cdc8:	88f9      	ldrh	r1, [r7, #6]
 801cdca:	683a      	ldr	r2, [r7, #0]
 801cdcc:	4806      	ldr	r0, [pc, #24]	; (801cde8 <SUBGRF_ReadRegisters+0x40>)
 801cdce:	f7ed fbe8 	bl	800a5a2 <HAL_SUBGHZ_ReadRegisters>
 801cdd2:	697b      	ldr	r3, [r7, #20]
 801cdd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cdd6:	693b      	ldr	r3, [r7, #16]
 801cdd8:	f383 8810 	msr	PRIMASK, r3
}
 801cddc:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801cdde:	bf00      	nop
 801cde0:	3718      	adds	r7, #24
 801cde2:	46bd      	mov	sp, r7
 801cde4:	bd80      	pop	{r7, pc}
 801cde6:	bf00      	nop
 801cde8:	200003c4 	.word	0x200003c4

0801cdec <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	b086      	sub	sp, #24
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	4603      	mov	r3, r0
 801cdf4:	6039      	str	r1, [r7, #0]
 801cdf6:	71fb      	strb	r3, [r7, #7]
 801cdf8:	4613      	mov	r3, r2
 801cdfa:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cdfc:	f3ef 8310 	mrs	r3, PRIMASK
 801ce00:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce02:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce04:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce06:	b672      	cpsid	i
}
 801ce08:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801ce0a:	79bb      	ldrb	r3, [r7, #6]
 801ce0c:	b29b      	uxth	r3, r3
 801ce0e:	79f9      	ldrb	r1, [r7, #7]
 801ce10:	683a      	ldr	r2, [r7, #0]
 801ce12:	4806      	ldr	r0, [pc, #24]	; (801ce2c <SUBGRF_WriteBuffer+0x40>)
 801ce14:	f7ed fcd9 	bl	800a7ca <HAL_SUBGHZ_WriteBuffer>
 801ce18:	697b      	ldr	r3, [r7, #20]
 801ce1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce1c:	693b      	ldr	r3, [r7, #16]
 801ce1e:	f383 8810 	msr	PRIMASK, r3
}
 801ce22:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce24:	bf00      	nop
 801ce26:	3718      	adds	r7, #24
 801ce28:	46bd      	mov	sp, r7
 801ce2a:	bd80      	pop	{r7, pc}
 801ce2c:	200003c4 	.word	0x200003c4

0801ce30 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 801ce30:	b580      	push	{r7, lr}
 801ce32:	b086      	sub	sp, #24
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	4603      	mov	r3, r0
 801ce38:	6039      	str	r1, [r7, #0]
 801ce3a:	71fb      	strb	r3, [r7, #7]
 801ce3c:	4613      	mov	r3, r2
 801ce3e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce40:	f3ef 8310 	mrs	r3, PRIMASK
 801ce44:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce46:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce4a:	b672      	cpsid	i
}
 801ce4c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801ce4e:	79bb      	ldrb	r3, [r7, #6]
 801ce50:	b29b      	uxth	r3, r3
 801ce52:	79f9      	ldrb	r1, [r7, #7]
 801ce54:	683a      	ldr	r2, [r7, #0]
 801ce56:	4806      	ldr	r0, [pc, #24]	; (801ce70 <SUBGRF_ReadBuffer+0x40>)
 801ce58:	f7ed fd0a 	bl	800a870 <HAL_SUBGHZ_ReadBuffer>
 801ce5c:	697b      	ldr	r3, [r7, #20]
 801ce5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ce60:	693b      	ldr	r3, [r7, #16]
 801ce62:	f383 8810 	msr	PRIMASK, r3
}
 801ce66:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ce68:	bf00      	nop
 801ce6a:	3718      	adds	r7, #24
 801ce6c:	46bd      	mov	sp, r7
 801ce6e:	bd80      	pop	{r7, pc}
 801ce70:	200003c4 	.word	0x200003c4

0801ce74 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ce74:	b580      	push	{r7, lr}
 801ce76:	b086      	sub	sp, #24
 801ce78:	af00      	add	r7, sp, #0
 801ce7a:	4603      	mov	r3, r0
 801ce7c:	6039      	str	r1, [r7, #0]
 801ce7e:	71fb      	strb	r3, [r7, #7]
 801ce80:	4613      	mov	r3, r2
 801ce82:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ce84:	f3ef 8310 	mrs	r3, PRIMASK
 801ce88:	60fb      	str	r3, [r7, #12]
  return(result);
 801ce8a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ce8c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ce8e:	b672      	cpsid	i
}
 801ce90:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801ce92:	88bb      	ldrh	r3, [r7, #4]
 801ce94:	79f9      	ldrb	r1, [r7, #7]
 801ce96:	683a      	ldr	r2, [r7, #0]
 801ce98:	4806      	ldr	r0, [pc, #24]	; (801ceb4 <SUBGRF_WriteCommand+0x40>)
 801ce9a:	f7ed fbe3 	bl	800a664 <HAL_SUBGHZ_ExecSetCmd>
 801ce9e:	697b      	ldr	r3, [r7, #20]
 801cea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cea2:	693b      	ldr	r3, [r7, #16]
 801cea4:	f383 8810 	msr	PRIMASK, r3
}
 801cea8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceaa:	bf00      	nop
 801ceac:	3718      	adds	r7, #24
 801ceae:	46bd      	mov	sp, r7
 801ceb0:	bd80      	pop	{r7, pc}
 801ceb2:	bf00      	nop
 801ceb4:	200003c4 	.word	0x200003c4

0801ceb8 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801ceb8:	b580      	push	{r7, lr}
 801ceba:	b086      	sub	sp, #24
 801cebc:	af00      	add	r7, sp, #0
 801cebe:	4603      	mov	r3, r0
 801cec0:	6039      	str	r1, [r7, #0]
 801cec2:	71fb      	strb	r3, [r7, #7]
 801cec4:	4613      	mov	r3, r2
 801cec6:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801cec8:	f3ef 8310 	mrs	r3, PRIMASK
 801cecc:	60fb      	str	r3, [r7, #12]
  return(result);
 801cece:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801ced0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801ced2:	b672      	cpsid	i
}
 801ced4:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801ced6:	88bb      	ldrh	r3, [r7, #4]
 801ced8:	79f9      	ldrb	r1, [r7, #7]
 801ceda:	683a      	ldr	r2, [r7, #0]
 801cedc:	4806      	ldr	r0, [pc, #24]	; (801cef8 <SUBGRF_ReadCommand+0x40>)
 801cede:	f7ed fc20 	bl	800a722 <HAL_SUBGHZ_ExecGetCmd>
 801cee2:	697b      	ldr	r3, [r7, #20]
 801cee4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801cee6:	693b      	ldr	r3, [r7, #16]
 801cee8:	f383 8810 	msr	PRIMASK, r3
}
 801ceec:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801ceee:	bf00      	nop
 801cef0:	3718      	adds	r7, #24
 801cef2:	46bd      	mov	sp, r7
 801cef4:	bd80      	pop	{r7, pc}
 801cef6:	bf00      	nop
 801cef8:	200003c4 	.word	0x200003c4

0801cefc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801cefc:	b580      	push	{r7, lr}
 801cefe:	b084      	sub	sp, #16
 801cf00:	af00      	add	r7, sp, #0
 801cf02:	4603      	mov	r3, r0
 801cf04:	460a      	mov	r2, r1
 801cf06:	71fb      	strb	r3, [r7, #7]
 801cf08:	4613      	mov	r3, r2
 801cf0a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801cf0c:	2301      	movs	r3, #1
 801cf0e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 801cf10:	79bb      	ldrb	r3, [r7, #6]
 801cf12:	2b01      	cmp	r3, #1
 801cf14:	d10d      	bne.n	801cf32 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801cf16:	79fb      	ldrb	r3, [r7, #7]
 801cf18:	2b01      	cmp	r3, #1
 801cf1a:	d104      	bne.n	801cf26 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801cf1c:	2302      	movs	r3, #2
 801cf1e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 801cf20:	2004      	movs	r0, #4
 801cf22:	f000 f8ef 	bl	801d104 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801cf26:	79fb      	ldrb	r3, [r7, #7]
 801cf28:	2b02      	cmp	r3, #2
 801cf2a:	d107      	bne.n	801cf3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801cf2c:	2303      	movs	r3, #3
 801cf2e:	73fb      	strb	r3, [r7, #15]
 801cf30:	e004      	b.n	801cf3c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801cf32:	79bb      	ldrb	r3, [r7, #6]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d101      	bne.n	801cf3c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 801cf38:	2301      	movs	r3, #1
 801cf3a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801cf3c:	7bfb      	ldrb	r3, [r7, #15]
 801cf3e:	4618      	mov	r0, r3
 801cf40:	f7f0 fef3 	bl	800dd2a <RBI_ConfigRFSwitch>
}
 801cf44:	bf00      	nop
 801cf46:	3710      	adds	r7, #16
 801cf48:	46bd      	mov	sp, r7
 801cf4a:	bd80      	pop	{r7, pc}

0801cf4c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 801cf4c:	b580      	push	{r7, lr}
 801cf4e:	b084      	sub	sp, #16
 801cf50:	af00      	add	r7, sp, #0
 801cf52:	4603      	mov	r3, r0
 801cf54:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801cf56:	2301      	movs	r3, #1
 801cf58:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 801cf5a:	f7f0 fef4 	bl	800dd46 <RBI_GetTxConfig>
 801cf5e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 801cf60:	68bb      	ldr	r3, [r7, #8]
 801cf62:	2b02      	cmp	r3, #2
 801cf64:	d016      	beq.n	801cf94 <SUBGRF_SetRfTxPower+0x48>
 801cf66:	68bb      	ldr	r3, [r7, #8]
 801cf68:	2b02      	cmp	r3, #2
 801cf6a:	dc16      	bgt.n	801cf9a <SUBGRF_SetRfTxPower+0x4e>
 801cf6c:	68bb      	ldr	r3, [r7, #8]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d003      	beq.n	801cf7a <SUBGRF_SetRfTxPower+0x2e>
 801cf72:	68bb      	ldr	r3, [r7, #8]
 801cf74:	2b01      	cmp	r3, #1
 801cf76:	d00a      	beq.n	801cf8e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 801cf78:	e00f      	b.n	801cf9a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 801cf7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801cf7e:	2b0f      	cmp	r3, #15
 801cf80:	dd02      	ble.n	801cf88 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801cf82:	2302      	movs	r3, #2
 801cf84:	73fb      	strb	r3, [r7, #15]
            break;
 801cf86:	e009      	b.n	801cf9c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 801cf88:	2301      	movs	r3, #1
 801cf8a:	73fb      	strb	r3, [r7, #15]
            break;
 801cf8c:	e006      	b.n	801cf9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 801cf8e:	2301      	movs	r3, #1
 801cf90:	73fb      	strb	r3, [r7, #15]
            break;
 801cf92:	e003      	b.n	801cf9c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801cf94:	2302      	movs	r3, #2
 801cf96:	73fb      	strb	r3, [r7, #15]
            break;
 801cf98:	e000      	b.n	801cf9c <SUBGRF_SetRfTxPower+0x50>
            break;
 801cf9a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 801cf9c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801cfa0:	7bfb      	ldrb	r3, [r7, #15]
 801cfa2:	2202      	movs	r2, #2
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f7ff fbcd 	bl	801c744 <SUBGRF_SetTxParams>

    return paSelect;
 801cfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 801cfac:	4618      	mov	r0, r3
 801cfae:	3710      	adds	r7, #16
 801cfb0:	46bd      	mov	sp, r7
 801cfb2:	bd80      	pop	{r7, pc}

0801cfb4 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801cfb4:	b480      	push	{r7}
 801cfb6:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 801cfb8:	2301      	movs	r3, #1
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	bc80      	pop	{r7}
 801cfc0:	4770      	bx	lr
	...

0801cfc4 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfc4:	b580      	push	{r7, lr}
 801cfc6:	b082      	sub	sp, #8
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801cfcc:	4b03      	ldr	r3, [pc, #12]	; (801cfdc <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801cfce:	681b      	ldr	r3, [r3, #0]
 801cfd0:	2001      	movs	r0, #1
 801cfd2:	4798      	blx	r3
}
 801cfd4:	bf00      	nop
 801cfd6:	3708      	adds	r7, #8
 801cfd8:	46bd      	mov	sp, r7
 801cfda:	bd80      	pop	{r7, pc}
 801cfdc:	20001874 	.word	0x20001874

0801cfe0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b082      	sub	sp, #8
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 801cfe8:	4b03      	ldr	r3, [pc, #12]	; (801cff8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801cfea:	681b      	ldr	r3, [r3, #0]
 801cfec:	2002      	movs	r0, #2
 801cfee:	4798      	blx	r3
}
 801cff0:	bf00      	nop
 801cff2:	3708      	adds	r7, #8
 801cff4:	46bd      	mov	sp, r7
 801cff6:	bd80      	pop	{r7, pc}
 801cff8:	20001874 	.word	0x20001874

0801cffc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801cffc:	b580      	push	{r7, lr}
 801cffe:	b082      	sub	sp, #8
 801d000:	af00      	add	r7, sp, #0
 801d002:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801d004:	4b03      	ldr	r3, [pc, #12]	; (801d014 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801d006:	681b      	ldr	r3, [r3, #0]
 801d008:	2040      	movs	r0, #64	; 0x40
 801d00a:	4798      	blx	r3
}
 801d00c:	bf00      	nop
 801d00e:	3708      	adds	r7, #8
 801d010:	46bd      	mov	sp, r7
 801d012:	bd80      	pop	{r7, pc}
 801d014:	20001874 	.word	0x20001874

0801d018 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 801d018:	b580      	push	{r7, lr}
 801d01a:	b082      	sub	sp, #8
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]
 801d020:	460b      	mov	r3, r1
 801d022:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801d024:	78fb      	ldrb	r3, [r7, #3]
 801d026:	2b00      	cmp	r3, #0
 801d028:	d002      	beq.n	801d030 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801d02a:	2b01      	cmp	r3, #1
 801d02c:	d005      	beq.n	801d03a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801d02e:	e00a      	b.n	801d046 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801d030:	4b07      	ldr	r3, [pc, #28]	; (801d050 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2080      	movs	r0, #128	; 0x80
 801d036:	4798      	blx	r3
            break;
 801d038:	e005      	b.n	801d046 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801d03a:	4b05      	ldr	r3, [pc, #20]	; (801d050 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801d03c:	681b      	ldr	r3, [r3, #0]
 801d03e:	f44f 7080 	mov.w	r0, #256	; 0x100
 801d042:	4798      	blx	r3
            break;
 801d044:	bf00      	nop
    }
}
 801d046:	bf00      	nop
 801d048:	3708      	adds	r7, #8
 801d04a:	46bd      	mov	sp, r7
 801d04c:	bd80      	pop	{r7, pc}
 801d04e:	bf00      	nop
 801d050:	20001874 	.word	0x20001874

0801d054 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d054:	b580      	push	{r7, lr}
 801d056:	b082      	sub	sp, #8
 801d058:	af00      	add	r7, sp, #0
 801d05a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801d05c:	4b04      	ldr	r3, [pc, #16]	; (801d070 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	f44f 7000 	mov.w	r0, #512	; 0x200
 801d064:	4798      	blx	r3
}
 801d066:	bf00      	nop
 801d068:	3708      	adds	r7, #8
 801d06a:	46bd      	mov	sp, r7
 801d06c:	bd80      	pop	{r7, pc}
 801d06e:	bf00      	nop
 801d070:	20001874 	.word	0x20001874

0801d074 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b082      	sub	sp, #8
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801d07c:	4b03      	ldr	r3, [pc, #12]	; (801d08c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 801d07e:	681b      	ldr	r3, [r3, #0]
 801d080:	2020      	movs	r0, #32
 801d082:	4798      	blx	r3
}
 801d084:	bf00      	nop
 801d086:	3708      	adds	r7, #8
 801d088:	46bd      	mov	sp, r7
 801d08a:	bd80      	pop	{r7, pc}
 801d08c:	20001874 	.word	0x20001874

0801d090 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d090:	b580      	push	{r7, lr}
 801d092:	b082      	sub	sp, #8
 801d094:	af00      	add	r7, sp, #0
 801d096:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 801d098:	4b03      	ldr	r3, [pc, #12]	; (801d0a8 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	2004      	movs	r0, #4
 801d09e:	4798      	blx	r3
}
 801d0a0:	bf00      	nop
 801d0a2:	3708      	adds	r7, #8
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	20001874 	.word	0x20001874

0801d0ac <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b082      	sub	sp, #8
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 801d0b4:	4b03      	ldr	r3, [pc, #12]	; (801d0c4 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 801d0b6:	681b      	ldr	r3, [r3, #0]
 801d0b8:	2008      	movs	r0, #8
 801d0ba:	4798      	blx	r3
}
 801d0bc:	bf00      	nop
 801d0be:	3708      	adds	r7, #8
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}
 801d0c4:	20001874 	.word	0x20001874

0801d0c8 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0c8:	b580      	push	{r7, lr}
 801d0ca:	b082      	sub	sp, #8
 801d0cc:	af00      	add	r7, sp, #0
 801d0ce:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 801d0d0:	4b03      	ldr	r3, [pc, #12]	; (801d0e0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	2010      	movs	r0, #16
 801d0d6:	4798      	blx	r3
}
 801d0d8:	bf00      	nop
 801d0da:	3708      	adds	r7, #8
 801d0dc:	46bd      	mov	sp, r7
 801d0de:	bd80      	pop	{r7, pc}
 801d0e0:	20001874 	.word	0x20001874

0801d0e4 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b082      	sub	sp, #8
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801d0ec:	4b04      	ldr	r3, [pc, #16]	; (801d100 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801d0f4:	4798      	blx	r3
}
 801d0f6:	bf00      	nop
 801d0f8:	3708      	adds	r7, #8
 801d0fa:	46bd      	mov	sp, r7
 801d0fc:	bd80      	pop	{r7, pc}
 801d0fe:	bf00      	nop
 801d100:	20001874 	.word	0x20001874

0801d104 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801d104:	b580      	push	{r7, lr}
 801d106:	b084      	sub	sp, #16
 801d108:	af00      	add	r7, sp, #0
 801d10a:	4603      	mov	r3, r0
 801d10c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801d10e:	f7f0 fe28 	bl	800dd62 <RBI_IsDCDC>
 801d112:	4603      	mov	r3, r0
 801d114:	2b01      	cmp	r3, #1
 801d116:	d112      	bne.n	801d13e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801d118:	f640 1023 	movw	r0, #2339	; 0x923
 801d11c:	f7ff fe0e 	bl	801cd3c <SUBGRF_ReadRegister>
 801d120:	4603      	mov	r3, r0
 801d122:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801d124:	7bfb      	ldrb	r3, [r7, #15]
 801d126:	f023 0306 	bic.w	r3, r3, #6
 801d12a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801d12c:	7bfa      	ldrb	r2, [r7, #15]
 801d12e:	79fb      	ldrb	r3, [r7, #7]
 801d130:	4313      	orrs	r3, r2
 801d132:	b2db      	uxtb	r3, r3
 801d134:	4619      	mov	r1, r3
 801d136:	f640 1023 	movw	r0, #2339	; 0x923
 801d13a:	f7ff fdeb 	bl	801cd14 <SUBGRF_WriteRegister>
  }
}
 801d13e:	bf00      	nop
 801d140:	3710      	adds	r7, #16
 801d142:	46bd      	mov	sp, r7
 801d144:	bd80      	pop	{r7, pc}
	...

0801d148 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 801d148:	b480      	push	{r7}
 801d14a:	b085      	sub	sp, #20
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	2b00      	cmp	r3, #0
 801d154:	d101      	bne.n	801d15a <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801d156:	231f      	movs	r3, #31
 801d158:	e016      	b.n	801d188 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d15a:	2300      	movs	r3, #0
 801d15c:	73fb      	strb	r3, [r7, #15]
 801d15e:	e00f      	b.n	801d180 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801d160:	7bfb      	ldrb	r3, [r7, #15]
 801d162:	4a0c      	ldr	r2, [pc, #48]	; (801d194 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801d168:	687a      	ldr	r2, [r7, #4]
 801d16a:	429a      	cmp	r2, r3
 801d16c:	d205      	bcs.n	801d17a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 801d16e:	7bfb      	ldrb	r3, [r7, #15]
 801d170:	4a08      	ldr	r2, [pc, #32]	; (801d194 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801d172:	00db      	lsls	r3, r3, #3
 801d174:	4413      	add	r3, r2
 801d176:	791b      	ldrb	r3, [r3, #4]
 801d178:	e006      	b.n	801d188 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801d17a:	7bfb      	ldrb	r3, [r7, #15]
 801d17c:	3301      	adds	r3, #1
 801d17e:	73fb      	strb	r3, [r7, #15]
 801d180:	7bfb      	ldrb	r3, [r7, #15]
 801d182:	2b15      	cmp	r3, #21
 801d184:	d9ec      	bls.n	801d160 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801d186:	e7fe      	b.n	801d186 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 801d188:	4618      	mov	r0, r3
 801d18a:	3714      	adds	r7, #20
 801d18c:	46bd      	mov	sp, r7
 801d18e:	bc80      	pop	{r7}
 801d190:	4770      	bx	lr
 801d192:	bf00      	nop
 801d194:	0801fa80 	.word	0x0801fa80

0801d198 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 801d198:	b580      	push	{r7, lr}
 801d19a:	b08a      	sub	sp, #40	; 0x28
 801d19c:	af00      	add	r7, sp, #0
 801d19e:	6078      	str	r0, [r7, #4]
 801d1a0:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 801d1a2:	4b35      	ldr	r3, [pc, #212]	; (801d278 <SUBGRF_GetCFO+0xe0>)
 801d1a4:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801d1a6:	f640 0007 	movw	r0, #2055	; 0x807
 801d1aa:	f7ff fdc7 	bl	801cd3c <SUBGRF_ReadRegister>
 801d1ae:	4603      	mov	r3, r0
 801d1b0:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 801d1b2:	7ffb      	ldrb	r3, [r7, #31]
 801d1b4:	08db      	lsrs	r3, r3, #3
 801d1b6:	b2db      	uxtb	r3, r3
 801d1b8:	f003 0303 	and.w	r3, r3, #3
 801d1bc:	3328      	adds	r3, #40	; 0x28
 801d1be:	443b      	add	r3, r7
 801d1c0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 801d1c4:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 801d1c6:	7ffb      	ldrb	r3, [r7, #31]
 801d1c8:	f003 0307 	and.w	r3, r3, #7
 801d1cc:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801d1ce:	7fba      	ldrb	r2, [r7, #30]
 801d1d0:	7f7b      	ldrb	r3, [r7, #29]
 801d1d2:	3301      	adds	r3, #1
 801d1d4:	fa02 f303 	lsl.w	r3, r2, r3
 801d1d8:	461a      	mov	r2, r3
 801d1da:	4b28      	ldr	r3, [pc, #160]	; (801d27c <SUBGRF_GetCFO+0xe4>)
 801d1dc:	fbb3 f3f2 	udiv	r3, r3, r2
 801d1e0:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 801d1e2:	69ba      	ldr	r2, [r7, #24]
 801d1e4:	687b      	ldr	r3, [r7, #4]
 801d1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 801d1ea:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801d1ec:	2301      	movs	r3, #1
 801d1ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 801d1f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d1f6:	697a      	ldr	r2, [r7, #20]
 801d1f8:	fb02 f303 	mul.w	r3, r2, r3
 801d1fc:	2b07      	cmp	r3, #7
 801d1fe:	d802      	bhi.n	801d206 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 801d200:	2302      	movs	r3, #2
 801d202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 801d206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801d20a:	697a      	ldr	r2, [r7, #20]
 801d20c:	fb02 f303 	mul.w	r3, r2, r3
 801d210:	2b03      	cmp	r3, #3
 801d212:	d802      	bhi.n	801d21a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801d214:	2304      	movs	r3, #4
 801d216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801d21a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801d21e:	69bb      	ldr	r3, [r7, #24]
 801d220:	fb02 f303 	mul.w	r3, r2, r3
 801d224:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801d226:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801d22a:	f7ff fd87 	bl	801cd3c <SUBGRF_ReadRegister>
 801d22e:	4603      	mov	r3, r0
 801d230:	021b      	lsls	r3, r3, #8
 801d232:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d236:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 801d238:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801d23c:	f7ff fd7e 	bl	801cd3c <SUBGRF_ReadRegister>
 801d240:	4603      	mov	r3, r0
 801d242:	461a      	mov	r2, r3
 801d244:	6a3b      	ldr	r3, [r7, #32]
 801d246:	4313      	orrs	r3, r2
 801d248:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 801d24a:	6a3b      	ldr	r3, [r7, #32]
 801d24c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d250:	2b00      	cmp	r3, #0
 801d252:	d005      	beq.n	801d260 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801d254:	6a3b      	ldr	r3, [r7, #32]
 801d256:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 801d25a:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 801d25e:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801d260:	693b      	ldr	r3, [r7, #16]
 801d262:	095b      	lsrs	r3, r3, #5
 801d264:	6a3a      	ldr	r2, [r7, #32]
 801d266:	fb02 f303 	mul.w	r3, r2, r3
 801d26a:	11da      	asrs	r2, r3, #7
 801d26c:	683b      	ldr	r3, [r7, #0]
 801d26e:	601a      	str	r2, [r3, #0]
}
 801d270:	bf00      	nop
 801d272:	3728      	adds	r7, #40	; 0x28
 801d274:	46bd      	mov	sp, r7
 801d276:	bd80      	pop	{r7, pc}
 801d278:	0c0a0804 	.word	0x0c0a0804
 801d27c:	01e84800 	.word	0x01e84800

0801d280 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 801d280:	b480      	push	{r7}
 801d282:	b087      	sub	sp, #28
 801d284:	af00      	add	r7, sp, #0
 801d286:	4603      	mov	r3, r0
 801d288:	60b9      	str	r1, [r7, #8]
 801d28a:	607a      	str	r2, [r7, #4]
 801d28c:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 801d28e:	2300      	movs	r3, #0
 801d290:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801d292:	f04f 33ff 	mov.w	r3, #4294967295
 801d296:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d298:	697b      	ldr	r3, [r7, #20]
}
 801d29a:	4618      	mov	r0, r3
 801d29c:	371c      	adds	r7, #28
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	bc80      	pop	{r7}
 801d2a2:	4770      	bx	lr

0801d2a4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 801d2a4:	b480      	push	{r7}
 801d2a6:	b087      	sub	sp, #28
 801d2a8:	af00      	add	r7, sp, #0
 801d2aa:	4603      	mov	r3, r0
 801d2ac:	60b9      	str	r1, [r7, #8]
 801d2ae:	607a      	str	r2, [r7, #4]
 801d2b0:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 801d2b6:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ba:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801d2bc:	697b      	ldr	r3, [r7, #20]
}
 801d2be:	4618      	mov	r0, r3
 801d2c0:	371c      	adds	r7, #28
 801d2c2:	46bd      	mov	sp, r7
 801d2c4:	bc80      	pop	{r7}
 801d2c6:	4770      	bx	lr

0801d2c8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 801d2c8:	b480      	push	{r7}
 801d2ca:	b085      	sub	sp, #20
 801d2cc:	af00      	add	r7, sp, #0
 801d2ce:	60f8      	str	r0, [r7, #12]
 801d2d0:	60b9      	str	r1, [r7, #8]
 801d2d2:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 801d2d4:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d2d8:	4618      	mov	r0, r3
 801d2da:	3714      	adds	r7, #20
 801d2dc:	46bd      	mov	sp, r7
 801d2de:	bc80      	pop	{r7}
 801d2e0:	4770      	bx	lr

0801d2e2 <RFW_DeInit>:

void RFW_DeInit( void )
{
 801d2e2:	b480      	push	{r7}
 801d2e4:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801d2e6:	bf00      	nop
 801d2e8:	46bd      	mov	sp, r7
 801d2ea:	bc80      	pop	{r7}
 801d2ec:	4770      	bx	lr

0801d2ee <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 801d2ee:	b480      	push	{r7}
 801d2f0:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 801d2f2:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d2f4:	4618      	mov	r0, r3
 801d2f6:	46bd      	mov	sp, r7
 801d2f8:	bc80      	pop	{r7}
 801d2fa:	4770      	bx	lr

0801d2fc <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 801d2fc:	b480      	push	{r7}
 801d2fe:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 801d300:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801d302:	4618      	mov	r0, r3
 801d304:	46bd      	mov	sp, r7
 801d306:	bc80      	pop	{r7}
 801d308:	4770      	bx	lr

0801d30a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 801d30a:	b480      	push	{r7}
 801d30c:	b083      	sub	sp, #12
 801d30e:	af00      	add	r7, sp, #0
 801d310:	4603      	mov	r3, r0
 801d312:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801d314:	bf00      	nop
 801d316:	370c      	adds	r7, #12
 801d318:	46bd      	mov	sp, r7
 801d31a:	bc80      	pop	{r7}
 801d31c:	4770      	bx	lr

0801d31e <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801d31e:	b480      	push	{r7}
 801d320:	b087      	sub	sp, #28
 801d322:	af00      	add	r7, sp, #0
 801d324:	60f8      	str	r0, [r7, #12]
 801d326:	460b      	mov	r3, r1
 801d328:	607a      	str	r2, [r7, #4]
 801d32a:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801d32c:	f04f 33ff 	mov.w	r3, #4294967295
 801d330:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 801d332:	697b      	ldr	r3, [r7, #20]
}
 801d334:	4618      	mov	r0, r3
 801d336:	371c      	adds	r7, #28
 801d338:	46bd      	mov	sp, r7
 801d33a:	bc80      	pop	{r7}
 801d33c:	4770      	bx	lr

0801d33e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801d33e:	b480      	push	{r7}
 801d340:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 801d342:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801d346:	4618      	mov	r0, r3
 801d348:	46bd      	mov	sp, r7
 801d34a:	bc80      	pop	{r7}
 801d34c:	4770      	bx	lr

0801d34e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801d34e:	b480      	push	{r7}
 801d350:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 801d352:	bf00      	nop
 801d354:	46bd      	mov	sp, r7
 801d356:	bc80      	pop	{r7}
 801d358:	4770      	bx	lr

0801d35a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 801d35a:	b480      	push	{r7}
 801d35c:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801d35e:	bf00      	nop
 801d360:	46bd      	mov	sp, r7
 801d362:	bc80      	pop	{r7}
 801d364:	4770      	bx	lr

0801d366 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 801d366:	b480      	push	{r7}
 801d368:	b083      	sub	sp, #12
 801d36a:	af00      	add	r7, sp, #0
 801d36c:	4603      	mov	r3, r0
 801d36e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801d370:	bf00      	nop
 801d372:	370c      	adds	r7, #12
 801d374:	46bd      	mov	sp, r7
 801d376:	bc80      	pop	{r7}
 801d378:	4770      	bx	lr
	...

0801d37c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801d37c:	b480      	push	{r7}
 801d37e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801d380:	4b04      	ldr	r3, [pc, #16]	; (801d394 <UTIL_LPM_Init+0x18>)
 801d382:	2200      	movs	r2, #0
 801d384:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801d386:	4b04      	ldr	r3, [pc, #16]	; (801d398 <UTIL_LPM_Init+0x1c>)
 801d388:	2200      	movs	r2, #0
 801d38a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801d38c:	bf00      	nop
 801d38e:	46bd      	mov	sp, r7
 801d390:	bc80      	pop	{r7}
 801d392:	4770      	bx	lr
 801d394:	20001878 	.word	0x20001878
 801d398:	2000187c 	.word	0x2000187c

0801d39c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d39c:	b480      	push	{r7}
 801d39e:	b087      	sub	sp, #28
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	6078      	str	r0, [r7, #4]
 801d3a4:	460b      	mov	r3, r1
 801d3a6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d3a8:	f3ef 8310 	mrs	r3, PRIMASK
 801d3ac:	613b      	str	r3, [r7, #16]
  return(result);
 801d3ae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d3b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d3b2:	b672      	cpsid	i
}
 801d3b4:	bf00      	nop
  
  switch( state )
 801d3b6:	78fb      	ldrb	r3, [r7, #3]
 801d3b8:	2b00      	cmp	r3, #0
 801d3ba:	d008      	beq.n	801d3ce <UTIL_LPM_SetStopMode+0x32>
 801d3bc:	2b01      	cmp	r3, #1
 801d3be:	d10e      	bne.n	801d3de <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801d3c0:	4b0d      	ldr	r3, [pc, #52]	; (801d3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801d3c2:	681a      	ldr	r2, [r3, #0]
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	4313      	orrs	r3, r2
 801d3c8:	4a0b      	ldr	r2, [pc, #44]	; (801d3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801d3ca:	6013      	str	r3, [r2, #0]
      break;
 801d3cc:	e008      	b.n	801d3e0 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	43da      	mvns	r2, r3
 801d3d2:	4b09      	ldr	r3, [pc, #36]	; (801d3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	4013      	ands	r3, r2
 801d3d8:	4a07      	ldr	r2, [pc, #28]	; (801d3f8 <UTIL_LPM_SetStopMode+0x5c>)
 801d3da:	6013      	str	r3, [r2, #0]
      break;
 801d3dc:	e000      	b.n	801d3e0 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801d3de:	bf00      	nop
 801d3e0:	697b      	ldr	r3, [r7, #20]
 801d3e2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	f383 8810 	msr	PRIMASK, r3
}
 801d3ea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d3ec:	bf00      	nop
 801d3ee:	371c      	adds	r7, #28
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	bc80      	pop	{r7}
 801d3f4:	4770      	bx	lr
 801d3f6:	bf00      	nop
 801d3f8:	20001878 	.word	0x20001878

0801d3fc <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801d3fc:	b480      	push	{r7}
 801d3fe:	b087      	sub	sp, #28
 801d400:	af00      	add	r7, sp, #0
 801d402:	6078      	str	r0, [r7, #4]
 801d404:	460b      	mov	r3, r1
 801d406:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d408:	f3ef 8310 	mrs	r3, PRIMASK
 801d40c:	613b      	str	r3, [r7, #16]
  return(result);
 801d40e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801d410:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801d412:	b672      	cpsid	i
}
 801d414:	bf00      	nop
  
  switch(state)
 801d416:	78fb      	ldrb	r3, [r7, #3]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d008      	beq.n	801d42e <UTIL_LPM_SetOffMode+0x32>
 801d41c:	2b01      	cmp	r3, #1
 801d41e:	d10e      	bne.n	801d43e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801d420:	4b0d      	ldr	r3, [pc, #52]	; (801d458 <UTIL_LPM_SetOffMode+0x5c>)
 801d422:	681a      	ldr	r2, [r3, #0]
 801d424:	687b      	ldr	r3, [r7, #4]
 801d426:	4313      	orrs	r3, r2
 801d428:	4a0b      	ldr	r2, [pc, #44]	; (801d458 <UTIL_LPM_SetOffMode+0x5c>)
 801d42a:	6013      	str	r3, [r2, #0]
      break;
 801d42c:	e008      	b.n	801d440 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	43da      	mvns	r2, r3
 801d432:	4b09      	ldr	r3, [pc, #36]	; (801d458 <UTIL_LPM_SetOffMode+0x5c>)
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	4013      	ands	r3, r2
 801d438:	4a07      	ldr	r2, [pc, #28]	; (801d458 <UTIL_LPM_SetOffMode+0x5c>)
 801d43a:	6013      	str	r3, [r2, #0]
      break;
 801d43c:	e000      	b.n	801d440 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801d43e:	bf00      	nop
 801d440:	697b      	ldr	r3, [r7, #20]
 801d442:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d444:	68fb      	ldr	r3, [r7, #12]
 801d446:	f383 8810 	msr	PRIMASK, r3
}
 801d44a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801d44c:	bf00      	nop
 801d44e:	371c      	adds	r7, #28
 801d450:	46bd      	mov	sp, r7
 801d452:	bc80      	pop	{r7}
 801d454:	4770      	bx	lr
 801d456:	bf00      	nop
 801d458:	2000187c 	.word	0x2000187c

0801d45c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801d45c:	b580      	push	{r7, lr}
 801d45e:	b084      	sub	sp, #16
 801d460:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d462:	f3ef 8310 	mrs	r3, PRIMASK
 801d466:	60bb      	str	r3, [r7, #8]
  return(result);
 801d468:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801d46a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801d46c:	b672      	cpsid	i
}
 801d46e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801d470:	4b12      	ldr	r3, [pc, #72]	; (801d4bc <UTIL_LPM_EnterLowPower+0x60>)
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d006      	beq.n	801d486 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801d478:	4b11      	ldr	r3, [pc, #68]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801d47e:	4b10      	ldr	r3, [pc, #64]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d480:	685b      	ldr	r3, [r3, #4]
 801d482:	4798      	blx	r3
 801d484:	e010      	b.n	801d4a8 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801d486:	4b0f      	ldr	r3, [pc, #60]	; (801d4c4 <UTIL_LPM_EnterLowPower+0x68>)
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d006      	beq.n	801d49c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801d48e:	4b0c      	ldr	r3, [pc, #48]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d490:	689b      	ldr	r3, [r3, #8]
 801d492:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801d494:	4b0a      	ldr	r3, [pc, #40]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d496:	68db      	ldr	r3, [r3, #12]
 801d498:	4798      	blx	r3
 801d49a:	e005      	b.n	801d4a8 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801d49c:	4b08      	ldr	r3, [pc, #32]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d49e:	691b      	ldr	r3, [r3, #16]
 801d4a0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801d4a2:	4b07      	ldr	r3, [pc, #28]	; (801d4c0 <UTIL_LPM_EnterLowPower+0x64>)
 801d4a4:	695b      	ldr	r3, [r3, #20]
 801d4a6:	4798      	blx	r3
 801d4a8:	68fb      	ldr	r3, [r7, #12]
 801d4aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	f383 8810 	msr	PRIMASK, r3
}
 801d4b2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801d4b4:	bf00      	nop
 801d4b6:	3710      	adds	r7, #16
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	bd80      	pop	{r7, pc}
 801d4bc:	20001878 	.word	0x20001878
 801d4c0:	0801f4f4 	.word	0x0801f4f4
 801d4c4:	2000187c 	.word	0x2000187c

0801d4c8 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801d4c8:	b480      	push	{r7}
 801d4ca:	b087      	sub	sp, #28
 801d4cc:	af00      	add	r7, sp, #0
 801d4ce:	60f8      	str	r0, [r7, #12]
 801d4d0:	60b9      	str	r1, [r7, #8]
 801d4d2:	4613      	mov	r3, r2
 801d4d4:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801d4d6:	68fb      	ldr	r3, [r7, #12]
 801d4d8:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801d4da:	68bb      	ldr	r3, [r7, #8]
 801d4dc:	613b      	str	r3, [r7, #16]

  while( size-- )
 801d4de:	e007      	b.n	801d4f0 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801d4e0:	693a      	ldr	r2, [r7, #16]
 801d4e2:	1c53      	adds	r3, r2, #1
 801d4e4:	613b      	str	r3, [r7, #16]
 801d4e6:	697b      	ldr	r3, [r7, #20]
 801d4e8:	1c59      	adds	r1, r3, #1
 801d4ea:	6179      	str	r1, [r7, #20]
 801d4ec:	7812      	ldrb	r2, [r2, #0]
 801d4ee:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d4f0:	88fb      	ldrh	r3, [r7, #6]
 801d4f2:	1e5a      	subs	r2, r3, #1
 801d4f4:	80fa      	strh	r2, [r7, #6]
 801d4f6:	2b00      	cmp	r3, #0
 801d4f8:	d1f2      	bne.n	801d4e0 <UTIL_MEM_cpy_8+0x18>
    }
}
 801d4fa:	bf00      	nop
 801d4fc:	bf00      	nop
 801d4fe:	371c      	adds	r7, #28
 801d500:	46bd      	mov	sp, r7
 801d502:	bc80      	pop	{r7}
 801d504:	4770      	bx	lr

0801d506 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801d506:	b480      	push	{r7}
 801d508:	b085      	sub	sp, #20
 801d50a:	af00      	add	r7, sp, #0
 801d50c:	6078      	str	r0, [r7, #4]
 801d50e:	460b      	mov	r3, r1
 801d510:	70fb      	strb	r3, [r7, #3]
 801d512:	4613      	mov	r3, r2
 801d514:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801d516:	687b      	ldr	r3, [r7, #4]
 801d518:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801d51a:	e004      	b.n	801d526 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801d51c:	68fb      	ldr	r3, [r7, #12]
 801d51e:	1c5a      	adds	r2, r3, #1
 801d520:	60fa      	str	r2, [r7, #12]
 801d522:	78fa      	ldrb	r2, [r7, #3]
 801d524:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801d526:	883b      	ldrh	r3, [r7, #0]
 801d528:	1e5a      	subs	r2, r3, #1
 801d52a:	803a      	strh	r2, [r7, #0]
 801d52c:	2b00      	cmp	r3, #0
 801d52e:	d1f5      	bne.n	801d51c <UTIL_MEM_set_8+0x16>
  }
}
 801d530:	bf00      	nop
 801d532:	bf00      	nop
 801d534:	3714      	adds	r7, #20
 801d536:	46bd      	mov	sp, r7
 801d538:	bc80      	pop	{r7}
 801d53a:	4770      	bx	lr

0801d53c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801d53c:	b082      	sub	sp, #8
 801d53e:	b480      	push	{r7}
 801d540:	b087      	sub	sp, #28
 801d542:	af00      	add	r7, sp, #0
 801d544:	60f8      	str	r0, [r7, #12]
 801d546:	1d38      	adds	r0, r7, #4
 801d548:	e880 0006 	stmia.w	r0, {r1, r2}
 801d54c:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801d54e:	2300      	movs	r3, #0
 801d550:	613b      	str	r3, [r7, #16]
 801d552:	2300      	movs	r3, #0
 801d554:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801d556:	687a      	ldr	r2, [r7, #4]
 801d558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d55a:	4413      	add	r3, r2
 801d55c:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801d55e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d562:	b29a      	uxth	r2, r3
 801d564:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d568:	b29b      	uxth	r3, r3
 801d56a:	4413      	add	r3, r2
 801d56c:	b29b      	uxth	r3, r3
 801d56e:	b21b      	sxth	r3, r3
 801d570:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801d572:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801d57a:	db0a      	blt.n	801d592 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801d57c:	693b      	ldr	r3, [r7, #16]
 801d57e:	3301      	adds	r3, #1
 801d580:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801d582:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d586:	b29b      	uxth	r3, r3
 801d588:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 801d58c:	b29b      	uxth	r3, r3
 801d58e:	b21b      	sxth	r3, r3
 801d590:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	461a      	mov	r2, r3
 801d596:	f107 0310 	add.w	r3, r7, #16
 801d59a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d59e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d5a2:	68f8      	ldr	r0, [r7, #12]
 801d5a4:	371c      	adds	r7, #28
 801d5a6:	46bd      	mov	sp, r7
 801d5a8:	bc80      	pop	{r7}
 801d5aa:	b002      	add	sp, #8
 801d5ac:	4770      	bx	lr

0801d5ae <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801d5ae:	b082      	sub	sp, #8
 801d5b0:	b480      	push	{r7}
 801d5b2:	b087      	sub	sp, #28
 801d5b4:	af00      	add	r7, sp, #0
 801d5b6:	60f8      	str	r0, [r7, #12]
 801d5b8:	1d38      	adds	r0, r7, #4
 801d5ba:	e880 0006 	stmia.w	r0, {r1, r2}
 801d5be:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801d5c0:	2300      	movs	r3, #0
 801d5c2:	613b      	str	r3, [r7, #16]
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801d5c8:	687a      	ldr	r2, [r7, #4]
 801d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5cc:	1ad3      	subs	r3, r2, r3
 801d5ce:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801d5d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801d5d4:	b29a      	uxth	r2, r3
 801d5d6:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801d5da:	b29b      	uxth	r3, r3
 801d5dc:	1ad3      	subs	r3, r2, r3
 801d5de:	b29b      	uxth	r3, r3
 801d5e0:	b21b      	sxth	r3, r3
 801d5e2:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801d5e4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5e8:	2b00      	cmp	r3, #0
 801d5ea:	da0a      	bge.n	801d602 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801d5ec:	693b      	ldr	r3, [r7, #16]
 801d5ee:	3b01      	subs	r3, #1
 801d5f0:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801d5f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801d5f6:	b29b      	uxth	r3, r3
 801d5f8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801d5fc:	b29b      	uxth	r3, r3
 801d5fe:	b21b      	sxth	r3, r3
 801d600:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801d602:	68fb      	ldr	r3, [r7, #12]
 801d604:	461a      	mov	r2, r3
 801d606:	f107 0310 	add.w	r3, r7, #16
 801d60a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d60e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d612:	68f8      	ldr	r0, [r7, #12]
 801d614:	371c      	adds	r7, #28
 801d616:	46bd      	mov	sp, r7
 801d618:	bc80      	pop	{r7}
 801d61a:	b002      	add	sp, #8
 801d61c:	4770      	bx	lr
	...

0801d620 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801d620:	b580      	push	{r7, lr}
 801d622:	b088      	sub	sp, #32
 801d624:	af02      	add	r7, sp, #8
 801d626:	463b      	mov	r3, r7
 801d628:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d62c:	2300      	movs	r3, #0
 801d62e:	60bb      	str	r3, [r7, #8]
 801d630:	2300      	movs	r3, #0
 801d632:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d634:	4b10      	ldr	r3, [pc, #64]	; (801d678 <SysTimeSet+0x58>)
 801d636:	691b      	ldr	r3, [r3, #16]
 801d638:	f107 0208 	add.w	r2, r7, #8
 801d63c:	3204      	adds	r2, #4
 801d63e:	4610      	mov	r0, r2
 801d640:	4798      	blx	r3
 801d642:	4603      	mov	r3, r0
 801d644:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801d646:	f107 0010 	add.w	r0, r7, #16
 801d64a:	68fb      	ldr	r3, [r7, #12]
 801d64c:	9300      	str	r3, [sp, #0]
 801d64e:	68bb      	ldr	r3, [r7, #8]
 801d650:	463a      	mov	r2, r7
 801d652:	ca06      	ldmia	r2, {r1, r2}
 801d654:	f7ff ffab 	bl	801d5ae <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801d658:	4b07      	ldr	r3, [pc, #28]	; (801d678 <SysTimeSet+0x58>)
 801d65a:	681b      	ldr	r3, [r3, #0]
 801d65c:	693a      	ldr	r2, [r7, #16]
 801d65e:	4610      	mov	r0, r2
 801d660:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801d662:	4b05      	ldr	r3, [pc, #20]	; (801d678 <SysTimeSet+0x58>)
 801d664:	689b      	ldr	r3, [r3, #8]
 801d666:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801d66a:	4610      	mov	r0, r2
 801d66c:	4798      	blx	r3
}
 801d66e:	bf00      	nop
 801d670:	3718      	adds	r7, #24
 801d672:	46bd      	mov	sp, r7
 801d674:	bd80      	pop	{r7, pc}
 801d676:	bf00      	nop
 801d678:	0801f5d8 	.word	0x0801f5d8

0801d67c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	b08a      	sub	sp, #40	; 0x28
 801d680:	af02      	add	r7, sp, #8
 801d682:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d684:	2300      	movs	r3, #0
 801d686:	61bb      	str	r3, [r7, #24]
 801d688:	2300      	movs	r3, #0
 801d68a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801d68c:	2300      	movs	r3, #0
 801d68e:	613b      	str	r3, [r7, #16]
 801d690:	2300      	movs	r3, #0
 801d692:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d694:	4b14      	ldr	r3, [pc, #80]	; (801d6e8 <SysTimeGet+0x6c>)
 801d696:	691b      	ldr	r3, [r3, #16]
 801d698:	f107 0218 	add.w	r2, r7, #24
 801d69c:	3204      	adds	r2, #4
 801d69e:	4610      	mov	r0, r2
 801d6a0:	4798      	blx	r3
 801d6a2:	4603      	mov	r3, r0
 801d6a4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d6a6:	4b10      	ldr	r3, [pc, #64]	; (801d6e8 <SysTimeGet+0x6c>)
 801d6a8:	68db      	ldr	r3, [r3, #12]
 801d6aa:	4798      	blx	r3
 801d6ac:	4603      	mov	r3, r0
 801d6ae:	b21b      	sxth	r3, r3
 801d6b0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d6b2:	4b0d      	ldr	r3, [pc, #52]	; (801d6e8 <SysTimeGet+0x6c>)
 801d6b4:	685b      	ldr	r3, [r3, #4]
 801d6b6:	4798      	blx	r3
 801d6b8:	4603      	mov	r3, r0
 801d6ba:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801d6bc:	f107 0010 	add.w	r0, r7, #16
 801d6c0:	69fb      	ldr	r3, [r7, #28]
 801d6c2:	9300      	str	r3, [sp, #0]
 801d6c4:	69bb      	ldr	r3, [r7, #24]
 801d6c6:	f107 0208 	add.w	r2, r7, #8
 801d6ca:	ca06      	ldmia	r2, {r1, r2}
 801d6cc:	f7ff ff36 	bl	801d53c <SysTimeAdd>

  return sysTime;
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	461a      	mov	r2, r3
 801d6d4:	f107 0310 	add.w	r3, r7, #16
 801d6d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d6dc:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d6e0:	6878      	ldr	r0, [r7, #4]
 801d6e2:	3720      	adds	r7, #32
 801d6e4:	46bd      	mov	sp, r7
 801d6e6:	bd80      	pop	{r7, pc}
 801d6e8:	0801f5d8 	.word	0x0801f5d8

0801d6ec <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801d6ec:	b580      	push	{r7, lr}
 801d6ee:	b084      	sub	sp, #16
 801d6f0:	af00      	add	r7, sp, #0
 801d6f2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801d6f4:	2300      	movs	r3, #0
 801d6f6:	60bb      	str	r3, [r7, #8]
 801d6f8:	2300      	movs	r3, #0
 801d6fa:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801d6fc:	4b0a      	ldr	r3, [pc, #40]	; (801d728 <SysTimeGetMcuTime+0x3c>)
 801d6fe:	691b      	ldr	r3, [r3, #16]
 801d700:	f107 0208 	add.w	r2, r7, #8
 801d704:	3204      	adds	r2, #4
 801d706:	4610      	mov	r0, r2
 801d708:	4798      	blx	r3
 801d70a:	4603      	mov	r3, r0
 801d70c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	461a      	mov	r2, r3
 801d712:	f107 0308 	add.w	r3, r7, #8
 801d716:	e893 0003 	ldmia.w	r3, {r0, r1}
 801d71a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801d71e:	6878      	ldr	r0, [r7, #4]
 801d720:	3710      	adds	r7, #16
 801d722:	46bd      	mov	sp, r7
 801d724:	bd80      	pop	{r7, pc}
 801d726:	bf00      	nop
 801d728:	0801f5d8 	.word	0x0801f5d8

0801d72c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801d72c:	b580      	push	{r7, lr}
 801d72e:	b088      	sub	sp, #32
 801d730:	af02      	add	r7, sp, #8
 801d732:	463b      	mov	r3, r7
 801d734:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d738:	4b0f      	ldr	r3, [pc, #60]	; (801d778 <SysTimeToMs+0x4c>)
 801d73a:	68db      	ldr	r3, [r3, #12]
 801d73c:	4798      	blx	r3
 801d73e:	4603      	mov	r3, r0
 801d740:	b21b      	sxth	r3, r3
 801d742:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d744:	4b0c      	ldr	r3, [pc, #48]	; (801d778 <SysTimeToMs+0x4c>)
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	4798      	blx	r3
 801d74a:	4603      	mov	r3, r0
 801d74c:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801d74e:	f107 0008 	add.w	r0, r7, #8
 801d752:	697b      	ldr	r3, [r7, #20]
 801d754:	9300      	str	r3, [sp, #0]
 801d756:	693b      	ldr	r3, [r7, #16]
 801d758:	463a      	mov	r2, r7
 801d75a:	ca06      	ldmia	r2, {r1, r2}
 801d75c:	f7ff ff27 	bl	801d5ae <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801d760:	68bb      	ldr	r3, [r7, #8]
 801d762:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801d766:	fb02 f303 	mul.w	r3, r2, r3
 801d76a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801d76e:	4413      	add	r3, r2
}
 801d770:	4618      	mov	r0, r3
 801d772:	3718      	adds	r7, #24
 801d774:	46bd      	mov	sp, r7
 801d776:	bd80      	pop	{r7, pc}
 801d778:	0801f5d8 	.word	0x0801f5d8

0801d77c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801d77c:	b580      	push	{r7, lr}
 801d77e:	b08a      	sub	sp, #40	; 0x28
 801d780:	af02      	add	r7, sp, #8
 801d782:	6078      	str	r0, [r7, #4]
 801d784:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801d786:	683b      	ldr	r3, [r7, #0]
 801d788:	4a19      	ldr	r2, [pc, #100]	; (801d7f0 <SysTimeFromMs+0x74>)
 801d78a:	fba2 2303 	umull	r2, r3, r2, r3
 801d78e:	099b      	lsrs	r3, r3, #6
 801d790:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801d792:	69fb      	ldr	r3, [r7, #28]
 801d794:	617b      	str	r3, [r7, #20]
 801d796:	683b      	ldr	r3, [r7, #0]
 801d798:	b29a      	uxth	r2, r3
 801d79a:	69fb      	ldr	r3, [r7, #28]
 801d79c:	b29b      	uxth	r3, r3
 801d79e:	4619      	mov	r1, r3
 801d7a0:	0149      	lsls	r1, r1, #5
 801d7a2:	1ac9      	subs	r1, r1, r3
 801d7a4:	0089      	lsls	r1, r1, #2
 801d7a6:	440b      	add	r3, r1
 801d7a8:	00db      	lsls	r3, r3, #3
 801d7aa:	b29b      	uxth	r3, r3
 801d7ac:	1ad3      	subs	r3, r2, r3
 801d7ae:	b29b      	uxth	r3, r3
 801d7b0:	b21b      	sxth	r3, r3
 801d7b2:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801d7b4:	f107 030c 	add.w	r3, r7, #12
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	601a      	str	r2, [r3, #0]
 801d7bc:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801d7be:	4b0d      	ldr	r3, [pc, #52]	; (801d7f4 <SysTimeFromMs+0x78>)
 801d7c0:	68db      	ldr	r3, [r3, #12]
 801d7c2:	4798      	blx	r3
 801d7c4:	4603      	mov	r3, r0
 801d7c6:	b21b      	sxth	r3, r3
 801d7c8:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801d7ca:	4b0a      	ldr	r3, [pc, #40]	; (801d7f4 <SysTimeFromMs+0x78>)
 801d7cc:	685b      	ldr	r3, [r3, #4]
 801d7ce:	4798      	blx	r3
 801d7d0:	4603      	mov	r3, r0
 801d7d2:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801d7d4:	6878      	ldr	r0, [r7, #4]
 801d7d6:	693b      	ldr	r3, [r7, #16]
 801d7d8:	9300      	str	r3, [sp, #0]
 801d7da:	68fb      	ldr	r3, [r7, #12]
 801d7dc:	f107 0214 	add.w	r2, r7, #20
 801d7e0:	ca06      	ldmia	r2, {r1, r2}
 801d7e2:	f7ff feab 	bl	801d53c <SysTimeAdd>
}
 801d7e6:	6878      	ldr	r0, [r7, #4]
 801d7e8:	3720      	adds	r7, #32
 801d7ea:	46bd      	mov	sp, r7
 801d7ec:	bd80      	pop	{r7, pc}
 801d7ee:	bf00      	nop
 801d7f0:	10624dd3 	.word	0x10624dd3
 801d7f4:	0801f5d8 	.word	0x0801f5d8

0801d7f8 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801d7f8:	b480      	push	{r7}
 801d7fa:	b085      	sub	sp, #20
 801d7fc:	af00      	add	r7, sp, #0
 801d7fe:	6078      	str	r0, [r7, #4]
  int i = 0;
 801d800:	2300      	movs	r3, #0
 801d802:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801d804:	e00e      	b.n	801d824 <ee_skip_atoi+0x2c>
 801d806:	68fa      	ldr	r2, [r7, #12]
 801d808:	4613      	mov	r3, r2
 801d80a:	009b      	lsls	r3, r3, #2
 801d80c:	4413      	add	r3, r2
 801d80e:	005b      	lsls	r3, r3, #1
 801d810:	4618      	mov	r0, r3
 801d812:	687b      	ldr	r3, [r7, #4]
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	1c59      	adds	r1, r3, #1
 801d818:	687a      	ldr	r2, [r7, #4]
 801d81a:	6011      	str	r1, [r2, #0]
 801d81c:	781b      	ldrb	r3, [r3, #0]
 801d81e:	4403      	add	r3, r0
 801d820:	3b30      	subs	r3, #48	; 0x30
 801d822:	60fb      	str	r3, [r7, #12]
 801d824:	687b      	ldr	r3, [r7, #4]
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	781b      	ldrb	r3, [r3, #0]
 801d82a:	2b2f      	cmp	r3, #47	; 0x2f
 801d82c:	d904      	bls.n	801d838 <ee_skip_atoi+0x40>
 801d82e:	687b      	ldr	r3, [r7, #4]
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	781b      	ldrb	r3, [r3, #0]
 801d834:	2b39      	cmp	r3, #57	; 0x39
 801d836:	d9e6      	bls.n	801d806 <ee_skip_atoi+0xe>
  return i;
 801d838:	68fb      	ldr	r3, [r7, #12]
}
 801d83a:	4618      	mov	r0, r3
 801d83c:	3714      	adds	r7, #20
 801d83e:	46bd      	mov	sp, r7
 801d840:	bc80      	pop	{r7}
 801d842:	4770      	bx	lr

0801d844 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801d844:	b480      	push	{r7}
 801d846:	b099      	sub	sp, #100	; 0x64
 801d848:	af00      	add	r7, sp, #0
 801d84a:	60f8      	str	r0, [r7, #12]
 801d84c:	60b9      	str	r1, [r7, #8]
 801d84e:	607a      	str	r2, [r7, #4]
 801d850:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801d852:	4b71      	ldr	r3, [pc, #452]	; (801da18 <ee_number+0x1d4>)
 801d854:	681b      	ldr	r3, [r3, #0]
 801d856:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801d858:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d85e:	2b00      	cmp	r3, #0
 801d860:	d002      	beq.n	801d868 <ee_number+0x24>
 801d862:	4b6e      	ldr	r3, [pc, #440]	; (801da1c <ee_number+0x1d8>)
 801d864:	681b      	ldr	r3, [r3, #0]
 801d866:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801d868:	683b      	ldr	r3, [r7, #0]
 801d86a:	2b01      	cmp	r3, #1
 801d86c:	dd02      	ble.n	801d874 <ee_number+0x30>
 801d86e:	683b      	ldr	r3, [r7, #0]
 801d870:	2b24      	cmp	r3, #36	; 0x24
 801d872:	dd01      	ble.n	801d878 <ee_number+0x34>
 801d874:	2300      	movs	r3, #0
 801d876:	e0ca      	b.n	801da0e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801d878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d87a:	f003 0301 	and.w	r3, r3, #1
 801d87e:	2b00      	cmp	r3, #0
 801d880:	d001      	beq.n	801d886 <ee_number+0x42>
 801d882:	2330      	movs	r3, #48	; 0x30
 801d884:	e000      	b.n	801d888 <ee_number+0x44>
 801d886:	2320      	movs	r3, #32
 801d888:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 801d88c:	2300      	movs	r3, #0
 801d88e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 801d892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d894:	f003 0302 	and.w	r3, r3, #2
 801d898:	2b00      	cmp	r3, #0
 801d89a:	d00b      	beq.n	801d8b4 <ee_number+0x70>
  {
    if (num < 0)
 801d89c:	687b      	ldr	r3, [r7, #4]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	da08      	bge.n	801d8b4 <ee_number+0x70>
    {
      sign = '-';
 801d8a2:	232d      	movs	r3, #45	; 0x2d
 801d8a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 801d8a8:	687b      	ldr	r3, [r7, #4]
 801d8aa:	425b      	negs	r3, r3
 801d8ac:	607b      	str	r3, [r7, #4]
      size--;
 801d8ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d8b0:	3b01      	subs	r3, #1
 801d8b2:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	2b00      	cmp	r3, #0
 801d8bc:	d11e      	bne.n	801d8fc <ee_number+0xb8>
    tmp[i++] = '0';
 801d8be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8c0:	1c5a      	adds	r2, r3, #1
 801d8c2:	657a      	str	r2, [r7, #84]	; 0x54
 801d8c4:	3360      	adds	r3, #96	; 0x60
 801d8c6:	443b      	add	r3, r7
 801d8c8:	2230      	movs	r2, #48	; 0x30
 801d8ca:	f803 2c50 	strb.w	r2, [r3, #-80]
 801d8ce:	e018      	b.n	801d902 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	683a      	ldr	r2, [r7, #0]
 801d8d4:	fbb3 f1f2 	udiv	r1, r3, r2
 801d8d8:	fb01 f202 	mul.w	r2, r1, r2
 801d8dc:	1a9b      	subs	r3, r3, r2
 801d8de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801d8e0:	441a      	add	r2, r3
 801d8e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d8e4:	1c59      	adds	r1, r3, #1
 801d8e6:	6579      	str	r1, [r7, #84]	; 0x54
 801d8e8:	7812      	ldrb	r2, [r2, #0]
 801d8ea:	3360      	adds	r3, #96	; 0x60
 801d8ec:	443b      	add	r3, r7
 801d8ee:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801d8f2:	687a      	ldr	r2, [r7, #4]
 801d8f4:	683b      	ldr	r3, [r7, #0]
 801d8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 801d8fa:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	2b00      	cmp	r3, #0
 801d900:	d1e6      	bne.n	801d8d0 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801d902:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d906:	429a      	cmp	r2, r3
 801d908:	dd01      	ble.n	801d90e <ee_number+0xca>
 801d90a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d90c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 801d90e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801d910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d912:	1ad3      	subs	r3, r2, r3
 801d914:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801d916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d918:	f003 0301 	and.w	r3, r3, #1
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d112      	bne.n	801d946 <ee_number+0x102>
 801d920:	e00c      	b.n	801d93c <ee_number+0xf8>
 801d922:	68fb      	ldr	r3, [r7, #12]
 801d924:	1c5a      	adds	r2, r3, #1
 801d926:	60fa      	str	r2, [r7, #12]
 801d928:	2220      	movs	r2, #32
 801d92a:	701a      	strb	r2, [r3, #0]
 801d92c:	68bb      	ldr	r3, [r7, #8]
 801d92e:	3b01      	subs	r3, #1
 801d930:	60bb      	str	r3, [r7, #8]
 801d932:	68bb      	ldr	r3, [r7, #8]
 801d934:	2b00      	cmp	r3, #0
 801d936:	d101      	bne.n	801d93c <ee_number+0xf8>
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	e068      	b.n	801da0e <ee_number+0x1ca>
 801d93c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d93e:	1e5a      	subs	r2, r3, #1
 801d940:	66ba      	str	r2, [r7, #104]	; 0x68
 801d942:	2b00      	cmp	r3, #0
 801d944:	dced      	bgt.n	801d922 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801d946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d01b      	beq.n	801d986 <ee_number+0x142>
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	1c5a      	adds	r2, r3, #1
 801d952:	60fa      	str	r2, [r7, #12]
 801d954:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801d958:	701a      	strb	r2, [r3, #0]
 801d95a:	68bb      	ldr	r3, [r7, #8]
 801d95c:	3b01      	subs	r3, #1
 801d95e:	60bb      	str	r3, [r7, #8]
 801d960:	68bb      	ldr	r3, [r7, #8]
 801d962:	2b00      	cmp	r3, #0
 801d964:	d10f      	bne.n	801d986 <ee_number+0x142>
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	e051      	b.n	801da0e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801d96a:	68fb      	ldr	r3, [r7, #12]
 801d96c:	1c5a      	adds	r2, r3, #1
 801d96e:	60fa      	str	r2, [r7, #12]
 801d970:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 801d974:	701a      	strb	r2, [r3, #0]
 801d976:	68bb      	ldr	r3, [r7, #8]
 801d978:	3b01      	subs	r3, #1
 801d97a:	60bb      	str	r3, [r7, #8]
 801d97c:	68bb      	ldr	r3, [r7, #8]
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d101      	bne.n	801d986 <ee_number+0x142>
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	e043      	b.n	801da0e <ee_number+0x1ca>
 801d986:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801d988:	1e5a      	subs	r2, r3, #1
 801d98a:	66ba      	str	r2, [r7, #104]	; 0x68
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	dcec      	bgt.n	801d96a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801d990:	e00c      	b.n	801d9ac <ee_number+0x168>
 801d992:	68fb      	ldr	r3, [r7, #12]
 801d994:	1c5a      	adds	r2, r3, #1
 801d996:	60fa      	str	r2, [r7, #12]
 801d998:	2230      	movs	r2, #48	; 0x30
 801d99a:	701a      	strb	r2, [r3, #0]
 801d99c:	68bb      	ldr	r3, [r7, #8]
 801d99e:	3b01      	subs	r3, #1
 801d9a0:	60bb      	str	r3, [r7, #8]
 801d9a2:	68bb      	ldr	r3, [r7, #8]
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d101      	bne.n	801d9ac <ee_number+0x168>
 801d9a8:	68fb      	ldr	r3, [r7, #12]
 801d9aa:	e030      	b.n	801da0e <ee_number+0x1ca>
 801d9ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801d9ae:	1e5a      	subs	r2, r3, #1
 801d9b0:	66fa      	str	r2, [r7, #108]	; 0x6c
 801d9b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9b4:	429a      	cmp	r2, r3
 801d9b6:	dbec      	blt.n	801d992 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801d9b8:	e010      	b.n	801d9dc <ee_number+0x198>
 801d9ba:	68fb      	ldr	r3, [r7, #12]
 801d9bc:	1c5a      	adds	r2, r3, #1
 801d9be:	60fa      	str	r2, [r7, #12]
 801d9c0:	f107 0110 	add.w	r1, r7, #16
 801d9c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801d9c6:	440a      	add	r2, r1
 801d9c8:	7812      	ldrb	r2, [r2, #0]
 801d9ca:	701a      	strb	r2, [r3, #0]
 801d9cc:	68bb      	ldr	r3, [r7, #8]
 801d9ce:	3b01      	subs	r3, #1
 801d9d0:	60bb      	str	r3, [r7, #8]
 801d9d2:	68bb      	ldr	r3, [r7, #8]
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d101      	bne.n	801d9dc <ee_number+0x198>
 801d9d8:	68fb      	ldr	r3, [r7, #12]
 801d9da:	e018      	b.n	801da0e <ee_number+0x1ca>
 801d9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9de:	1e5a      	subs	r2, r3, #1
 801d9e0:	657a      	str	r2, [r7, #84]	; 0x54
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	dce9      	bgt.n	801d9ba <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801d9e6:	e00c      	b.n	801da02 <ee_number+0x1be>
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	1c5a      	adds	r2, r3, #1
 801d9ec:	60fa      	str	r2, [r7, #12]
 801d9ee:	2220      	movs	r2, #32
 801d9f0:	701a      	strb	r2, [r3, #0]
 801d9f2:	68bb      	ldr	r3, [r7, #8]
 801d9f4:	3b01      	subs	r3, #1
 801d9f6:	60bb      	str	r3, [r7, #8]
 801d9f8:	68bb      	ldr	r3, [r7, #8]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d101      	bne.n	801da02 <ee_number+0x1be>
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	e005      	b.n	801da0e <ee_number+0x1ca>
 801da02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801da04:	1e5a      	subs	r2, r3, #1
 801da06:	66ba      	str	r2, [r7, #104]	; 0x68
 801da08:	2b00      	cmp	r3, #0
 801da0a:	dced      	bgt.n	801d9e8 <ee_number+0x1a4>

  return str;
 801da0c:	68fb      	ldr	r3, [r7, #12]
}
 801da0e:	4618      	mov	r0, r3
 801da10:	3764      	adds	r7, #100	; 0x64
 801da12:	46bd      	mov	sp, r7
 801da14:	bc80      	pop	{r7}
 801da16:	4770      	bx	lr
 801da18:	2000014c 	.word	0x2000014c
 801da1c:	20000150 	.word	0x20000150

0801da20 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801da20:	b580      	push	{r7, lr}
 801da22:	b092      	sub	sp, #72	; 0x48
 801da24:	af04      	add	r7, sp, #16
 801da26:	60f8      	str	r0, [r7, #12]
 801da28:	60b9      	str	r1, [r7, #8]
 801da2a:	607a      	str	r2, [r7, #4]
 801da2c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801da2e:	68bb      	ldr	r3, [r7, #8]
 801da30:	2b00      	cmp	r3, #0
 801da32:	dc01      	bgt.n	801da38 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801da34:	2300      	movs	r3, #0
 801da36:	e13e      	b.n	801dcb6 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801da3c:	e128      	b.n	801dc90 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801da3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	1ad2      	subs	r2, r2, r3
 801da44:	68bb      	ldr	r3, [r7, #8]
 801da46:	3b01      	subs	r3, #1
 801da48:	429a      	cmp	r2, r3
 801da4a:	f280 812e 	bge.w	801dcaa <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	781b      	ldrb	r3, [r3, #0]
 801da52:	2b25      	cmp	r3, #37	; 0x25
 801da54:	d006      	beq.n	801da64 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801da56:	687a      	ldr	r2, [r7, #4]
 801da58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da5a:	1c59      	adds	r1, r3, #1
 801da5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 801da5e:	7812      	ldrb	r2, [r2, #0]
 801da60:	701a      	strb	r2, [r3, #0]
      continue;
 801da62:	e112      	b.n	801dc8a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801da64:	2300      	movs	r3, #0
 801da66:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	3301      	adds	r3, #1
 801da6c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	781b      	ldrb	r3, [r3, #0]
 801da72:	2b30      	cmp	r3, #48	; 0x30
 801da74:	d103      	bne.n	801da7e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801da76:	6a3b      	ldr	r3, [r7, #32]
 801da78:	f043 0301 	orr.w	r3, r3, #1
 801da7c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801da7e:	f04f 33ff 	mov.w	r3, #4294967295
 801da82:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	781b      	ldrb	r3, [r3, #0]
 801da88:	2b2f      	cmp	r3, #47	; 0x2f
 801da8a:	d908      	bls.n	801da9e <tiny_vsnprintf_like+0x7e>
 801da8c:	687b      	ldr	r3, [r7, #4]
 801da8e:	781b      	ldrb	r3, [r3, #0]
 801da90:	2b39      	cmp	r3, #57	; 0x39
 801da92:	d804      	bhi.n	801da9e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801da94:	1d3b      	adds	r3, r7, #4
 801da96:	4618      	mov	r0, r3
 801da98:	f7ff feae 	bl	801d7f8 <ee_skip_atoi>
 801da9c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801da9e:	f04f 33ff 	mov.w	r3, #4294967295
 801daa2:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801daa4:	f04f 33ff 	mov.w	r3, #4294967295
 801daa8:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801daaa:	230a      	movs	r3, #10
 801daac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 801daae:	687b      	ldr	r3, [r7, #4]
 801dab0:	781b      	ldrb	r3, [r3, #0]
 801dab2:	3b58      	subs	r3, #88	; 0x58
 801dab4:	2b20      	cmp	r3, #32
 801dab6:	f200 8094 	bhi.w	801dbe2 <tiny_vsnprintf_like+0x1c2>
 801daba:	a201      	add	r2, pc, #4	; (adr r2, 801dac0 <tiny_vsnprintf_like+0xa0>)
 801dabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dac0:	0801dbcb 	.word	0x0801dbcb
 801dac4:	0801dbe3 	.word	0x0801dbe3
 801dac8:	0801dbe3 	.word	0x0801dbe3
 801dacc:	0801dbe3 	.word	0x0801dbe3
 801dad0:	0801dbe3 	.word	0x0801dbe3
 801dad4:	0801dbe3 	.word	0x0801dbe3
 801dad8:	0801dbe3 	.word	0x0801dbe3
 801dadc:	0801dbe3 	.word	0x0801dbe3
 801dae0:	0801dbe3 	.word	0x0801dbe3
 801dae4:	0801dbe3 	.word	0x0801dbe3
 801dae8:	0801dbe3 	.word	0x0801dbe3
 801daec:	0801db4f 	.word	0x0801db4f
 801daf0:	0801dbd9 	.word	0x0801dbd9
 801daf4:	0801dbe3 	.word	0x0801dbe3
 801daf8:	0801dbe3 	.word	0x0801dbe3
 801dafc:	0801dbe3 	.word	0x0801dbe3
 801db00:	0801dbe3 	.word	0x0801dbe3
 801db04:	0801dbd9 	.word	0x0801dbd9
 801db08:	0801dbe3 	.word	0x0801dbe3
 801db0c:	0801dbe3 	.word	0x0801dbe3
 801db10:	0801dbe3 	.word	0x0801dbe3
 801db14:	0801dbe3 	.word	0x0801dbe3
 801db18:	0801dbe3 	.word	0x0801dbe3
 801db1c:	0801dbe3 	.word	0x0801dbe3
 801db20:	0801dbe3 	.word	0x0801dbe3
 801db24:	0801dbe3 	.word	0x0801dbe3
 801db28:	0801dbe3 	.word	0x0801dbe3
 801db2c:	0801db6f 	.word	0x0801db6f
 801db30:	0801dbe3 	.word	0x0801dbe3
 801db34:	0801dc2f 	.word	0x0801dc2f
 801db38:	0801dbe3 	.word	0x0801dbe3
 801db3c:	0801dbe3 	.word	0x0801dbe3
 801db40:	0801dbd3 	.word	0x0801dbd3
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801db44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db46:	1c5a      	adds	r2, r3, #1
 801db48:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db4a:	2220      	movs	r2, #32
 801db4c:	701a      	strb	r2, [r3, #0]
 801db4e:	69fb      	ldr	r3, [r7, #28]
 801db50:	3b01      	subs	r3, #1
 801db52:	61fb      	str	r3, [r7, #28]
 801db54:	69fb      	ldr	r3, [r7, #28]
 801db56:	2b00      	cmp	r3, #0
 801db58:	dcf4      	bgt.n	801db44 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801db5a:	683b      	ldr	r3, [r7, #0]
 801db5c:	1d1a      	adds	r2, r3, #4
 801db5e:	603a      	str	r2, [r7, #0]
 801db60:	6819      	ldr	r1, [r3, #0]
 801db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db64:	1c5a      	adds	r2, r3, #1
 801db66:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db68:	b2ca      	uxtb	r2, r1
 801db6a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801db6c:	e08d      	b.n	801dc8a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801db6e:	683b      	ldr	r3, [r7, #0]
 801db70:	1d1a      	adds	r2, r3, #4
 801db72:	603a      	str	r2, [r7, #0]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d101      	bne.n	801db82 <tiny_vsnprintf_like+0x162>
 801db7e:	4b50      	ldr	r3, [pc, #320]	; (801dcc0 <tiny_vsnprintf_like+0x2a0>)
 801db80:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801db82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801db84:	f7e2 faf8 	bl	8000178 <strlen>
 801db88:	4603      	mov	r3, r0
 801db8a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801db8c:	e004      	b.n	801db98 <tiny_vsnprintf_like+0x178>
 801db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801db90:	1c5a      	adds	r2, r3, #1
 801db92:	62fa      	str	r2, [r7, #44]	; 0x2c
 801db94:	2220      	movs	r2, #32
 801db96:	701a      	strb	r2, [r3, #0]
 801db98:	69fb      	ldr	r3, [r7, #28]
 801db9a:	1e5a      	subs	r2, r3, #1
 801db9c:	61fa      	str	r2, [r7, #28]
 801db9e:	693a      	ldr	r2, [r7, #16]
 801dba0:	429a      	cmp	r2, r3
 801dba2:	dbf4      	blt.n	801db8e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801dba4:	2300      	movs	r3, #0
 801dba6:	62bb      	str	r3, [r7, #40]	; 0x28
 801dba8:	e00a      	b.n	801dbc0 <tiny_vsnprintf_like+0x1a0>
 801dbaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbac:	1c53      	adds	r3, r2, #1
 801dbae:	627b      	str	r3, [r7, #36]	; 0x24
 801dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbb2:	1c59      	adds	r1, r3, #1
 801dbb4:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dbb6:	7812      	ldrb	r2, [r2, #0]
 801dbb8:	701a      	strb	r2, [r3, #0]
 801dbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dbbc:	3301      	adds	r3, #1
 801dbbe:	62bb      	str	r3, [r7, #40]	; 0x28
 801dbc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbc2:	693b      	ldr	r3, [r7, #16]
 801dbc4:	429a      	cmp	r2, r3
 801dbc6:	dbf0      	blt.n	801dbaa <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801dbc8:	e05f      	b.n	801dc8a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801dbca:	6a3b      	ldr	r3, [r7, #32]
 801dbcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dbd0:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801dbd2:	2310      	movs	r3, #16
 801dbd4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 801dbd6:	e02b      	b.n	801dc30 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801dbd8:	6a3b      	ldr	r3, [r7, #32]
 801dbda:	f043 0302 	orr.w	r3, r3, #2
 801dbde:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801dbe0:	e025      	b.n	801dc2e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801dbe2:	687b      	ldr	r3, [r7, #4]
 801dbe4:	781b      	ldrb	r3, [r3, #0]
 801dbe6:	2b25      	cmp	r3, #37	; 0x25
 801dbe8:	d004      	beq.n	801dbf4 <tiny_vsnprintf_like+0x1d4>
 801dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbec:	1c5a      	adds	r2, r3, #1
 801dbee:	62fa      	str	r2, [r7, #44]	; 0x2c
 801dbf0:	2225      	movs	r2, #37	; 0x25
 801dbf2:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801dbf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	1ad2      	subs	r2, r2, r3
 801dbfa:	68bb      	ldr	r3, [r7, #8]
 801dbfc:	3b01      	subs	r3, #1
 801dbfe:	429a      	cmp	r2, r3
 801dc00:	da16      	bge.n	801dc30 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801dc02:	687b      	ldr	r3, [r7, #4]
 801dc04:	781b      	ldrb	r3, [r3, #0]
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d006      	beq.n	801dc18 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801dc0a:	687a      	ldr	r2, [r7, #4]
 801dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc0e:	1c59      	adds	r1, r3, #1
 801dc10:	62f9      	str	r1, [r7, #44]	; 0x2c
 801dc12:	7812      	ldrb	r2, [r2, #0]
 801dc14:	701a      	strb	r2, [r3, #0]
 801dc16:	e002      	b.n	801dc1e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801dc18:	687b      	ldr	r3, [r7, #4]
 801dc1a:	3b01      	subs	r3, #1
 801dc1c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801dc1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	1ad2      	subs	r2, r2, r3
 801dc24:	68bb      	ldr	r3, [r7, #8]
 801dc26:	3b01      	subs	r3, #1
 801dc28:	429a      	cmp	r2, r3
 801dc2a:	db2d      	blt.n	801dc88 <tiny_vsnprintf_like+0x268>
 801dc2c:	e000      	b.n	801dc30 <tiny_vsnprintf_like+0x210>
        break;
 801dc2e:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801dc30:	697b      	ldr	r3, [r7, #20]
 801dc32:	2b6c      	cmp	r3, #108	; 0x6c
 801dc34:	d105      	bne.n	801dc42 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	1d1a      	adds	r2, r3, #4
 801dc3a:	603a      	str	r2, [r7, #0]
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	637b      	str	r3, [r7, #52]	; 0x34
 801dc40:	e00f      	b.n	801dc62 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801dc42:	6a3b      	ldr	r3, [r7, #32]
 801dc44:	f003 0302 	and.w	r3, r3, #2
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d005      	beq.n	801dc58 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801dc4c:	683b      	ldr	r3, [r7, #0]
 801dc4e:	1d1a      	adds	r2, r3, #4
 801dc50:	603a      	str	r2, [r7, #0]
 801dc52:	681b      	ldr	r3, [r3, #0]
 801dc54:	637b      	str	r3, [r7, #52]	; 0x34
 801dc56:	e004      	b.n	801dc62 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801dc58:	683b      	ldr	r3, [r7, #0]
 801dc5a:	1d1a      	adds	r2, r3, #4
 801dc5c:	603a      	str	r2, [r7, #0]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801dc62:	68bb      	ldr	r3, [r7, #8]
 801dc64:	1e5a      	subs	r2, r3, #1
 801dc66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	1acb      	subs	r3, r1, r3
 801dc6c:	1ad1      	subs	r1, r2, r3
 801dc6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc70:	6a3b      	ldr	r3, [r7, #32]
 801dc72:	9302      	str	r3, [sp, #8]
 801dc74:	69bb      	ldr	r3, [r7, #24]
 801dc76:	9301      	str	r3, [sp, #4]
 801dc78:	69fb      	ldr	r3, [r7, #28]
 801dc7a:	9300      	str	r3, [sp, #0]
 801dc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801dc80:	f7ff fde0 	bl	801d844 <ee_number>
 801dc84:	62f8      	str	r0, [r7, #44]	; 0x2c
 801dc86:	e000      	b.n	801dc8a <tiny_vsnprintf_like+0x26a>
        continue;
 801dc88:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	3301      	adds	r3, #1
 801dc8e:	607b      	str	r3, [r7, #4]
 801dc90:	687b      	ldr	r3, [r7, #4]
 801dc92:	781b      	ldrb	r3, [r3, #0]
 801dc94:	2b00      	cmp	r3, #0
 801dc96:	f47f aed2 	bne.w	801da3e <tiny_vsnprintf_like+0x1e>
 801dc9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dc9c:	68fb      	ldr	r3, [r7, #12]
 801dc9e:	1ad2      	subs	r2, r2, r3
 801dca0:	68bb      	ldr	r3, [r7, #8]
 801dca2:	3b01      	subs	r3, #1
 801dca4:	429a      	cmp	r2, r3
 801dca6:	f6bf aeca 	bge.w	801da3e <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801dcaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcac:	2200      	movs	r2, #0
 801dcae:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801dcb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	1ad3      	subs	r3, r2, r3
}
 801dcb6:	4618      	mov	r0, r3
 801dcb8:	3738      	adds	r7, #56	; 0x38
 801dcba:	46bd      	mov	sp, r7
 801dcbc:	bd80      	pop	{r7, pc}
 801dcbe:	bf00      	nop
 801dcc0:	0801f4ec 	.word	0x0801f4ec

0801dcc4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801dcc4:	b580      	push	{r7, lr}
 801dcc6:	b090      	sub	sp, #64	; 0x40
 801dcc8:	af00      	add	r7, sp, #0
 801dcca:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801dccc:	4b73      	ldr	r3, [pc, #460]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 801dcd2:	4b72      	ldr	r3, [pc, #456]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801dcd4:	681a      	ldr	r2, [r3, #0]
 801dcd6:	687b      	ldr	r3, [r7, #4]
 801dcd8:	4013      	ands	r3, r2
 801dcda:	4a70      	ldr	r2, [pc, #448]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801dcdc:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801dcde:	4b70      	ldr	r3, [pc, #448]	; (801dea0 <UTIL_SEQ_Run+0x1dc>)
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801dce4:	4b6f      	ldr	r3, [pc, #444]	; (801dea4 <UTIL_SEQ_Run+0x1e0>)
 801dce6:	681b      	ldr	r3, [r3, #0]
 801dce8:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801dcea:	4b6f      	ldr	r3, [pc, #444]	; (801dea8 <UTIL_SEQ_Run+0x1e4>)
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 801dcf0:	4b6e      	ldr	r3, [pc, #440]	; (801deac <UTIL_SEQ_Run+0x1e8>)
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801dcf6:	e08d      	b.n	801de14 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dcfc:	e002      	b.n	801dd04 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801dcfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd00:	3301      	adds	r3, #1
 801dd02:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801dd04:	4a6a      	ldr	r2, [pc, #424]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd08:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd0e:	401a      	ands	r2, r3
 801dd10:	4b62      	ldr	r3, [pc, #392]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801dd12:	681b      	ldr	r3, [r3, #0]
 801dd14:	4013      	ands	r3, r2
 801dd16:	2b00      	cmp	r3, #0
 801dd18:	d0f1      	beq.n	801dcfe <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801dd1a:	4a65      	ldr	r2, [pc, #404]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd1e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801dd22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd24:	401a      	ands	r2, r3
 801dd26:	4b5d      	ldr	r3, [pc, #372]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801dd28:	681b      	ldr	r3, [r3, #0]
 801dd2a:	4013      	ands	r3, r2
 801dd2c:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801dd2e:	4a60      	ldr	r2, [pc, #384]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd32:	00db      	lsls	r3, r3, #3
 801dd34:	4413      	add	r3, r2
 801dd36:	685a      	ldr	r2, [r3, #4]
 801dd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd3a:	4013      	ands	r3, r2
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d106      	bne.n	801dd4e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801dd40:	4a5b      	ldr	r2, [pc, #364]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd44:	00db      	lsls	r3, r3, #3
 801dd46:	4413      	add	r3, r2
 801dd48:	f04f 32ff 	mov.w	r2, #4294967295
 801dd4c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801dd4e:	4a58      	ldr	r2, [pc, #352]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd52:	00db      	lsls	r3, r3, #3
 801dd54:	4413      	add	r3, r2
 801dd56:	685a      	ldr	r2, [r3, #4]
 801dd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd5a:	4013      	ands	r3, r2
 801dd5c:	4618      	mov	r0, r3
 801dd5e:	f000 f907 	bl	801df70 <SEQ_BitPosition>
 801dd62:	4603      	mov	r3, r0
 801dd64:	461a      	mov	r2, r3
 801dd66:	4b53      	ldr	r3, [pc, #332]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801dd68:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801dd6a:	4a51      	ldr	r2, [pc, #324]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd6e:	00db      	lsls	r3, r3, #3
 801dd70:	4413      	add	r3, r2
 801dd72:	685a      	ldr	r2, [r3, #4]
 801dd74:	4b4f      	ldr	r3, [pc, #316]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	2101      	movs	r1, #1
 801dd7a:	fa01 f303 	lsl.w	r3, r1, r3
 801dd7e:	43db      	mvns	r3, r3
 801dd80:	401a      	ands	r2, r3
 801dd82:	494b      	ldr	r1, [pc, #300]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801dd84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd86:	00db      	lsls	r3, r3, #3
 801dd88:	440b      	add	r3, r1
 801dd8a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dd8c:	f3ef 8310 	mrs	r3, PRIMASK
 801dd90:	61bb      	str	r3, [r7, #24]
  return(result);
 801dd92:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801dd94:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801dd96:	b672      	cpsid	i
}
 801dd98:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801dd9a:	4b46      	ldr	r3, [pc, #280]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801dd9c:	681b      	ldr	r3, [r3, #0]
 801dd9e:	2201      	movs	r2, #1
 801dda0:	fa02 f303 	lsl.w	r3, r2, r3
 801dda4:	43da      	mvns	r2, r3
 801dda6:	4b3e      	ldr	r3, [pc, #248]	; (801dea0 <UTIL_SEQ_Run+0x1dc>)
 801dda8:	681b      	ldr	r3, [r3, #0]
 801ddaa:	4013      	ands	r3, r2
 801ddac:	4a3c      	ldr	r2, [pc, #240]	; (801dea0 <UTIL_SEQ_Run+0x1dc>)
 801ddae:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddb0:	2301      	movs	r3, #1
 801ddb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddb4:	e013      	b.n	801ddde <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801ddb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddb8:	3b01      	subs	r3, #1
 801ddba:	4a3d      	ldr	r2, [pc, #244]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801ddbc:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801ddc0:	4b3c      	ldr	r3, [pc, #240]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801ddc2:	681b      	ldr	r3, [r3, #0]
 801ddc4:	2201      	movs	r2, #1
 801ddc6:	fa02 f303 	lsl.w	r3, r2, r3
 801ddca:	43da      	mvns	r2, r3
 801ddcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddce:	3b01      	subs	r3, #1
 801ddd0:	400a      	ands	r2, r1
 801ddd2:	4937      	ldr	r1, [pc, #220]	; (801deb0 <UTIL_SEQ_Run+0x1ec>)
 801ddd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801ddd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddda:	3b01      	subs	r3, #1
 801dddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d1e8      	bne.n	801ddb6 <UTIL_SEQ_Run+0xf2>
 801dde4:	6a3b      	ldr	r3, [r7, #32]
 801dde6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801dde8:	697b      	ldr	r3, [r7, #20]
 801ddea:	f383 8810 	msr	PRIMASK, r3
}
 801ddee:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801ddf0:	4b30      	ldr	r3, [pc, #192]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801ddf2:	681b      	ldr	r3, [r3, #0]
 801ddf4:	4a30      	ldr	r2, [pc, #192]	; (801deb8 <UTIL_SEQ_Run+0x1f4>)
 801ddf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ddfa:	4798      	blx	r3

    local_taskset = TaskSet;
 801ddfc:	4b28      	ldr	r3, [pc, #160]	; (801dea0 <UTIL_SEQ_Run+0x1dc>)
 801ddfe:	681b      	ldr	r3, [r3, #0]
 801de00:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 801de02:	4b28      	ldr	r3, [pc, #160]	; (801dea4 <UTIL_SEQ_Run+0x1e0>)
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801de08:	4b27      	ldr	r3, [pc, #156]	; (801dea8 <UTIL_SEQ_Run+0x1e4>)
 801de0a:	681b      	ldr	r3, [r3, #0]
 801de0c:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 801de0e:	4b27      	ldr	r3, [pc, #156]	; (801deac <UTIL_SEQ_Run+0x1e8>)
 801de10:	681b      	ldr	r3, [r3, #0]
 801de12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801de14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de18:	401a      	ands	r2, r3
 801de1a:	4b20      	ldr	r3, [pc, #128]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801de1c:	681b      	ldr	r3, [r3, #0]
 801de1e:	4013      	ands	r3, r2
 801de20:	2b00      	cmp	r3, #0
 801de22:	d005      	beq.n	801de30 <UTIL_SEQ_Run+0x16c>
 801de24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de28:	4013      	ands	r3, r2
 801de2a:	2b00      	cmp	r3, #0
 801de2c:	f43f af64 	beq.w	801dcf8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801de30:	4b20      	ldr	r3, [pc, #128]	; (801deb4 <UTIL_SEQ_Run+0x1f0>)
 801de32:	f04f 32ff 	mov.w	r2, #4294967295
 801de36:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801de38:	f000 f88e 	bl	801df58 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801de3c:	f3ef 8310 	mrs	r3, PRIMASK
 801de40:	613b      	str	r3, [r7, #16]
  return(result);
 801de42:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801de44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801de46:	b672      	cpsid	i
}
 801de48:	bf00      	nop
  local_taskset = TaskSet;
 801de4a:	4b15      	ldr	r3, [pc, #84]	; (801dea0 <UTIL_SEQ_Run+0x1dc>)
 801de4c:	681b      	ldr	r3, [r3, #0]
 801de4e:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 801de50:	4b14      	ldr	r3, [pc, #80]	; (801dea4 <UTIL_SEQ_Run+0x1e0>)
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801de56:	4b14      	ldr	r3, [pc, #80]	; (801dea8 <UTIL_SEQ_Run+0x1e4>)
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801de5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de60:	401a      	ands	r2, r3
 801de62:	4b0e      	ldr	r3, [pc, #56]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801de64:	681b      	ldr	r3, [r3, #0]
 801de66:	4013      	ands	r3, r2
 801de68:	2b00      	cmp	r3, #0
 801de6a:	d107      	bne.n	801de7c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801de6c:	4b0f      	ldr	r3, [pc, #60]	; (801deac <UTIL_SEQ_Run+0x1e8>)
 801de6e:	681a      	ldr	r2, [r3, #0]
 801de70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de72:	4013      	ands	r3, r2
 801de74:	2b00      	cmp	r3, #0
 801de76:	d101      	bne.n	801de7c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801de78:	f7e4 fca6 	bl	80027c8 <UTIL_SEQ_Idle>
 801de7c:	69fb      	ldr	r3, [r7, #28]
 801de7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801de80:	68fb      	ldr	r3, [r7, #12]
 801de82:	f383 8810 	msr	PRIMASK, r3
}
 801de86:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801de88:	f000 f86c 	bl	801df64 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801de8c:	4a03      	ldr	r2, [pc, #12]	; (801de9c <UTIL_SEQ_Run+0x1d8>)
 801de8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de90:	6013      	str	r3, [r2, #0]

  return;
 801de92:	bf00      	nop
}
 801de94:	3740      	adds	r7, #64	; 0x40
 801de96:	46bd      	mov	sp, r7
 801de98:	bd80      	pop	{r7, pc}
 801de9a:	bf00      	nop
 801de9c:	20000158 	.word	0x20000158
 801dea0:	20001880 	.word	0x20001880
 801dea4:	20001884 	.word	0x20001884
 801dea8:	20000154 	.word	0x20000154
 801deac:	20001888 	.word	0x20001888
 801deb0:	200018a0 	.word	0x200018a0
 801deb4:	2000188c 	.word	0x2000188c
 801deb8:	20001890 	.word	0x20001890

0801debc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801debc:	b580      	push	{r7, lr}
 801debe:	b088      	sub	sp, #32
 801dec0:	af00      	add	r7, sp, #0
 801dec2:	60f8      	str	r0, [r7, #12]
 801dec4:	60b9      	str	r1, [r7, #8]
 801dec6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801dec8:	f3ef 8310 	mrs	r3, PRIMASK
 801decc:	617b      	str	r3, [r7, #20]
  return(result);
 801dece:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801ded0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ded2:	b672      	cpsid	i
}
 801ded4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801ded6:	68f8      	ldr	r0, [r7, #12]
 801ded8:	f000 f84a 	bl	801df70 <SEQ_BitPosition>
 801dedc:	4603      	mov	r3, r0
 801dede:	4619      	mov	r1, r3
 801dee0:	4a06      	ldr	r2, [pc, #24]	; (801defc <UTIL_SEQ_RegTask+0x40>)
 801dee2:	687b      	ldr	r3, [r7, #4]
 801dee4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801dee8:	69fb      	ldr	r3, [r7, #28]
 801deea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801deec:	69bb      	ldr	r3, [r7, #24]
 801deee:	f383 8810 	msr	PRIMASK, r3
}
 801def2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801def4:	bf00      	nop
}
 801def6:	3720      	adds	r7, #32
 801def8:	46bd      	mov	sp, r7
 801defa:	bd80      	pop	{r7, pc}
 801defc:	20001890 	.word	0x20001890

0801df00 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801df00:	b480      	push	{r7}
 801df02:	b087      	sub	sp, #28
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
 801df08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801df0a:	f3ef 8310 	mrs	r3, PRIMASK
 801df0e:	60fb      	str	r3, [r7, #12]
  return(result);
 801df10:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801df12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801df14:	b672      	cpsid	i
}
 801df16:	bf00      	nop

  TaskSet |= TaskId_bm;
 801df18:	4b0d      	ldr	r3, [pc, #52]	; (801df50 <UTIL_SEQ_SetTask+0x50>)
 801df1a:	681a      	ldr	r2, [r3, #0]
 801df1c:	687b      	ldr	r3, [r7, #4]
 801df1e:	4313      	orrs	r3, r2
 801df20:	4a0b      	ldr	r2, [pc, #44]	; (801df50 <UTIL_SEQ_SetTask+0x50>)
 801df22:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801df24:	4a0b      	ldr	r2, [pc, #44]	; (801df54 <UTIL_SEQ_SetTask+0x54>)
 801df26:	683b      	ldr	r3, [r7, #0]
 801df28:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	431a      	orrs	r2, r3
 801df30:	4908      	ldr	r1, [pc, #32]	; (801df54 <UTIL_SEQ_SetTask+0x54>)
 801df32:	683b      	ldr	r3, [r7, #0]
 801df34:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801df38:	697b      	ldr	r3, [r7, #20]
 801df3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	f383 8810 	msr	PRIMASK, r3
}
 801df42:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801df44:	bf00      	nop
}
 801df46:	371c      	adds	r7, #28
 801df48:	46bd      	mov	sp, r7
 801df4a:	bc80      	pop	{r7}
 801df4c:	4770      	bx	lr
 801df4e:	bf00      	nop
 801df50:	20001880 	.word	0x20001880
 801df54:	200018a0 	.word	0x200018a0

0801df58 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801df58:	b480      	push	{r7}
 801df5a:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df5c:	bf00      	nop
}
 801df5e:	46bd      	mov	sp, r7
 801df60:	bc80      	pop	{r7}
 801df62:	4770      	bx	lr

0801df64 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801df64:	b480      	push	{r7}
 801df66:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801df68:	bf00      	nop
}
 801df6a:	46bd      	mov	sp, r7
 801df6c:	bc80      	pop	{r7}
 801df6e:	4770      	bx	lr

0801df70 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801df70:	b480      	push	{r7}
 801df72:	b085      	sub	sp, #20
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801df78:	2300      	movs	r3, #0
 801df7a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801df80:	68bb      	ldr	r3, [r7, #8]
 801df82:	0c1b      	lsrs	r3, r3, #16
 801df84:	041b      	lsls	r3, r3, #16
 801df86:	2b00      	cmp	r3, #0
 801df88:	d104      	bne.n	801df94 <SEQ_BitPosition+0x24>
 801df8a:	2310      	movs	r3, #16
 801df8c:	73fb      	strb	r3, [r7, #15]
 801df8e:	68bb      	ldr	r3, [r7, #8]
 801df90:	041b      	lsls	r3, r3, #16
 801df92:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801df94:	68bb      	ldr	r3, [r7, #8]
 801df96:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801df9a:	2b00      	cmp	r3, #0
 801df9c:	d105      	bne.n	801dfaa <SEQ_BitPosition+0x3a>
 801df9e:	7bfb      	ldrb	r3, [r7, #15]
 801dfa0:	3308      	adds	r3, #8
 801dfa2:	73fb      	strb	r3, [r7, #15]
 801dfa4:	68bb      	ldr	r3, [r7, #8]
 801dfa6:	021b      	lsls	r3, r3, #8
 801dfa8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801dfaa:	68bb      	ldr	r3, [r7, #8]
 801dfac:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801dfb0:	2b00      	cmp	r3, #0
 801dfb2:	d105      	bne.n	801dfc0 <SEQ_BitPosition+0x50>
 801dfb4:	7bfb      	ldrb	r3, [r7, #15]
 801dfb6:	3304      	adds	r3, #4
 801dfb8:	73fb      	strb	r3, [r7, #15]
 801dfba:	68bb      	ldr	r3, [r7, #8]
 801dfbc:	011b      	lsls	r3, r3, #4
 801dfbe:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801dfc0:	68bb      	ldr	r3, [r7, #8]
 801dfc2:	0f1b      	lsrs	r3, r3, #28
 801dfc4:	4a06      	ldr	r2, [pc, #24]	; (801dfe0 <SEQ_BitPosition+0x70>)
 801dfc6:	5cd2      	ldrb	r2, [r2, r3]
 801dfc8:	7bfb      	ldrb	r3, [r7, #15]
 801dfca:	4413      	add	r3, r2
 801dfcc:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801dfce:	7bfb      	ldrb	r3, [r7, #15]
 801dfd0:	f1c3 031f 	rsb	r3, r3, #31
 801dfd4:	b2db      	uxtb	r3, r3
}
 801dfd6:	4618      	mov	r0, r3
 801dfd8:	3714      	adds	r7, #20
 801dfda:	46bd      	mov	sp, r7
 801dfdc:	bc80      	pop	{r7}
 801dfde:	4770      	bx	lr
 801dfe0:	0801fb30 	.word	0x0801fb30

0801dfe4 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801dfe8:	4b04      	ldr	r3, [pc, #16]	; (801dffc <UTIL_TIMER_Init+0x18>)
 801dfea:	2200      	movs	r2, #0
 801dfec:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801dfee:	4b04      	ldr	r3, [pc, #16]	; (801e000 <UTIL_TIMER_Init+0x1c>)
 801dff0:	681b      	ldr	r3, [r3, #0]
 801dff2:	4798      	blx	r3
 801dff4:	4603      	mov	r3, r0
}
 801dff6:	4618      	mov	r0, r3
 801dff8:	bd80      	pop	{r7, pc}
 801dffa:	bf00      	nop
 801dffc:	200018a8 	.word	0x200018a8
 801e000:	0801f5ac 	.word	0x0801f5ac

0801e004 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801e004:	b580      	push	{r7, lr}
 801e006:	b084      	sub	sp, #16
 801e008:	af00      	add	r7, sp, #0
 801e00a:	60f8      	str	r0, [r7, #12]
 801e00c:	60b9      	str	r1, [r7, #8]
 801e00e:	603b      	str	r3, [r7, #0]
 801e010:	4613      	mov	r3, r2
 801e012:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801e014:	68fb      	ldr	r3, [r7, #12]
 801e016:	2b00      	cmp	r3, #0
 801e018:	d023      	beq.n	801e062 <UTIL_TIMER_Create+0x5e>
 801e01a:	683b      	ldr	r3, [r7, #0]
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d020      	beq.n	801e062 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	2200      	movs	r2, #0
 801e024:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801e026:	4b11      	ldr	r3, [pc, #68]	; (801e06c <UTIL_TIMER_Create+0x68>)
 801e028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e02a:	68b8      	ldr	r0, [r7, #8]
 801e02c:	4798      	blx	r3
 801e02e:	4602      	mov	r2, r0
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	2200      	movs	r2, #0
 801e038:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	2200      	movs	r2, #0
 801e03e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	2200      	movs	r2, #0
 801e044:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801e046:	68fb      	ldr	r3, [r7, #12]
 801e048:	683a      	ldr	r2, [r7, #0]
 801e04a:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801e04c:	68fb      	ldr	r3, [r7, #12]
 801e04e:	69ba      	ldr	r2, [r7, #24]
 801e050:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	79fa      	ldrb	r2, [r7, #7]
 801e056:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801e058:	68fb      	ldr	r3, [r7, #12]
 801e05a:	2200      	movs	r2, #0
 801e05c:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801e05e:	2300      	movs	r3, #0
 801e060:	e000      	b.n	801e064 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801e062:	2301      	movs	r3, #1
  }
}
 801e064:	4618      	mov	r0, r3
 801e066:	3710      	adds	r7, #16
 801e068:	46bd      	mov	sp, r7
 801e06a:	bd80      	pop	{r7, pc}
 801e06c:	0801f5ac 	.word	0x0801f5ac

0801e070 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801e070:	b580      	push	{r7, lr}
 801e072:	b08a      	sub	sp, #40	; 0x28
 801e074:	af00      	add	r7, sp, #0
 801e076:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e078:	2300      	movs	r3, #0
 801e07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801e07e:	687b      	ldr	r3, [r7, #4]
 801e080:	2b00      	cmp	r3, #0
 801e082:	d056      	beq.n	801e132 <UTIL_TIMER_Start+0xc2>
 801e084:	6878      	ldr	r0, [r7, #4]
 801e086:	f000 f9a9 	bl	801e3dc <TimerExists>
 801e08a:	4603      	mov	r3, r0
 801e08c:	f083 0301 	eor.w	r3, r3, #1
 801e090:	b2db      	uxtb	r3, r3
 801e092:	2b00      	cmp	r3, #0
 801e094:	d04d      	beq.n	801e132 <UTIL_TIMER_Start+0xc2>
 801e096:	687b      	ldr	r3, [r7, #4]
 801e098:	7a5b      	ldrb	r3, [r3, #9]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	d149      	bne.n	801e132 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e09e:	f3ef 8310 	mrs	r3, PRIMASK
 801e0a2:	613b      	str	r3, [r7, #16]
  return(result);
 801e0a4:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e0a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801e0a8:	b672      	cpsid	i
}
 801e0aa:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	685b      	ldr	r3, [r3, #4]
 801e0b0:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801e0b2:	4b24      	ldr	r3, [pc, #144]	; (801e144 <UTIL_TIMER_Start+0xd4>)
 801e0b4:	6a1b      	ldr	r3, [r3, #32]
 801e0b6:	4798      	blx	r3
 801e0b8:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801e0ba:	6a3a      	ldr	r2, [r7, #32]
 801e0bc:	69bb      	ldr	r3, [r7, #24]
 801e0be:	429a      	cmp	r2, r3
 801e0c0:	d201      	bcs.n	801e0c6 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801e0c2:	69bb      	ldr	r3, [r7, #24]
 801e0c4:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801e0c6:	687b      	ldr	r3, [r7, #4]
 801e0c8:	6a3a      	ldr	r2, [r7, #32]
 801e0ca:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	2200      	movs	r2, #0
 801e0d0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801e0d2:	687b      	ldr	r3, [r7, #4]
 801e0d4:	2201      	movs	r2, #1
 801e0d6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801e0d8:	687b      	ldr	r3, [r7, #4]
 801e0da:	2200      	movs	r2, #0
 801e0dc:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801e0de:	4b1a      	ldr	r3, [pc, #104]	; (801e148 <UTIL_TIMER_Start+0xd8>)
 801e0e0:	681b      	ldr	r3, [r3, #0]
 801e0e2:	2b00      	cmp	r3, #0
 801e0e4:	d106      	bne.n	801e0f4 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801e0e6:	4b17      	ldr	r3, [pc, #92]	; (801e144 <UTIL_TIMER_Start+0xd4>)
 801e0e8:	691b      	ldr	r3, [r3, #16]
 801e0ea:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801e0ec:	6878      	ldr	r0, [r7, #4]
 801e0ee:	f000 f9eb 	bl	801e4c8 <TimerInsertNewHeadTimer>
 801e0f2:	e017      	b.n	801e124 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801e0f4:	4b13      	ldr	r3, [pc, #76]	; (801e144 <UTIL_TIMER_Start+0xd4>)
 801e0f6:	699b      	ldr	r3, [r3, #24]
 801e0f8:	4798      	blx	r3
 801e0fa:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801e0fc:	687b      	ldr	r3, [r7, #4]
 801e0fe:	681a      	ldr	r2, [r3, #0]
 801e100:	697b      	ldr	r3, [r7, #20]
 801e102:	441a      	add	r2, r3
 801e104:	687b      	ldr	r3, [r7, #4]
 801e106:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	681a      	ldr	r2, [r3, #0]
 801e10c:	4b0e      	ldr	r3, [pc, #56]	; (801e148 <UTIL_TIMER_Start+0xd8>)
 801e10e:	681b      	ldr	r3, [r3, #0]
 801e110:	681b      	ldr	r3, [r3, #0]
 801e112:	429a      	cmp	r2, r3
 801e114:	d203      	bcs.n	801e11e <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801e116:	6878      	ldr	r0, [r7, #4]
 801e118:	f000 f9d6 	bl	801e4c8 <TimerInsertNewHeadTimer>
 801e11c:	e002      	b.n	801e124 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801e11e:	6878      	ldr	r0, [r7, #4]
 801e120:	f000 f9a2 	bl	801e468 <TimerInsertTimer>
 801e124:	69fb      	ldr	r3, [r7, #28]
 801e126:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e128:	68fb      	ldr	r3, [r7, #12]
 801e12a:	f383 8810 	msr	PRIMASK, r3
}
 801e12e:	bf00      	nop
  {
 801e130:	e002      	b.n	801e138 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801e132:	2301      	movs	r3, #1
 801e134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 801e138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801e13c:	4618      	mov	r0, r3
 801e13e:	3728      	adds	r7, #40	; 0x28
 801e140:	46bd      	mov	sp, r7
 801e142:	bd80      	pop	{r7, pc}
 801e144:	0801f5ac 	.word	0x0801f5ac
 801e148:	200018a8 	.word	0x200018a8

0801e14c <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801e14c:	b580      	push	{r7, lr}
 801e14e:	b088      	sub	sp, #32
 801e150:	af00      	add	r7, sp, #0
 801e152:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e154:	2300      	movs	r3, #0
 801e156:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d05b      	beq.n	801e216 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e15e:	f3ef 8310 	mrs	r3, PRIMASK
 801e162:	60fb      	str	r3, [r7, #12]
  return(result);
 801e164:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e166:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e168:	b672      	cpsid	i
}
 801e16a:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801e16c:	4b2d      	ldr	r3, [pc, #180]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e16e:	681b      	ldr	r3, [r3, #0]
 801e170:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801e172:	4b2c      	ldr	r3, [pc, #176]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e174:	681b      	ldr	r3, [r3, #0]
 801e176:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	2201      	movs	r2, #1
 801e17c:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801e17e:	4b29      	ldr	r3, [pc, #164]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e180:	681b      	ldr	r3, [r3, #0]
 801e182:	2b00      	cmp	r3, #0
 801e184:	d041      	beq.n	801e20a <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801e186:	687b      	ldr	r3, [r7, #4]
 801e188:	2200      	movs	r2, #0
 801e18a:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801e18c:	4b25      	ldr	r3, [pc, #148]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e18e:	681b      	ldr	r3, [r3, #0]
 801e190:	687a      	ldr	r2, [r7, #4]
 801e192:	429a      	cmp	r2, r3
 801e194:	d134      	bne.n	801e200 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801e196:	4b23      	ldr	r3, [pc, #140]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e198:	681b      	ldr	r3, [r3, #0]
 801e19a:	2200      	movs	r2, #0
 801e19c:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801e19e:	4b21      	ldr	r3, [pc, #132]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	695b      	ldr	r3, [r3, #20]
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	d00a      	beq.n	801e1be <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801e1a8:	4b1e      	ldr	r3, [pc, #120]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	695b      	ldr	r3, [r3, #20]
 801e1ae:	4a1d      	ldr	r2, [pc, #116]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e1b0:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801e1b2:	4b1c      	ldr	r3, [pc, #112]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	4618      	mov	r0, r3
 801e1b8:	f000 f92c 	bl	801e414 <TimerSetTimeout>
 801e1bc:	e023      	b.n	801e206 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801e1be:	4b1a      	ldr	r3, [pc, #104]	; (801e228 <UTIL_TIMER_Stop+0xdc>)
 801e1c0:	68db      	ldr	r3, [r3, #12]
 801e1c2:	4798      	blx	r3
            TimerListHead = NULL;
 801e1c4:	4b17      	ldr	r3, [pc, #92]	; (801e224 <UTIL_TIMER_Stop+0xd8>)
 801e1c6:	2200      	movs	r2, #0
 801e1c8:	601a      	str	r2, [r3, #0]
 801e1ca:	e01c      	b.n	801e206 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801e1cc:	697a      	ldr	r2, [r7, #20]
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	429a      	cmp	r2, r3
 801e1d2:	d110      	bne.n	801e1f6 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801e1d4:	697b      	ldr	r3, [r7, #20]
 801e1d6:	695b      	ldr	r3, [r3, #20]
 801e1d8:	2b00      	cmp	r3, #0
 801e1da:	d006      	beq.n	801e1ea <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801e1dc:	697b      	ldr	r3, [r7, #20]
 801e1de:	695b      	ldr	r3, [r3, #20]
 801e1e0:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1e2:	69bb      	ldr	r3, [r7, #24]
 801e1e4:	697a      	ldr	r2, [r7, #20]
 801e1e6:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801e1e8:	e00d      	b.n	801e206 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801e1ea:	2300      	movs	r3, #0
 801e1ec:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801e1ee:	69bb      	ldr	r3, [r7, #24]
 801e1f0:	697a      	ldr	r2, [r7, #20]
 801e1f2:	615a      	str	r2, [r3, #20]
            break;
 801e1f4:	e007      	b.n	801e206 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801e1f6:	697b      	ldr	r3, [r7, #20]
 801e1f8:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801e1fa:	697b      	ldr	r3, [r7, #20]
 801e1fc:	695b      	ldr	r3, [r3, #20]
 801e1fe:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801e200:	697b      	ldr	r3, [r7, #20]
 801e202:	2b00      	cmp	r3, #0
 801e204:	d1e2      	bne.n	801e1cc <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801e206:	2300      	movs	r3, #0
 801e208:	77fb      	strb	r3, [r7, #31]
 801e20a:	693b      	ldr	r3, [r7, #16]
 801e20c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e20e:	68bb      	ldr	r3, [r7, #8]
 801e210:	f383 8810 	msr	PRIMASK, r3
}
 801e214:	e001      	b.n	801e21a <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801e216:	2301      	movs	r3, #1
 801e218:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801e21a:	7ffb      	ldrb	r3, [r7, #31]
}
 801e21c:	4618      	mov	r0, r3
 801e21e:	3720      	adds	r7, #32
 801e220:	46bd      	mov	sp, r7
 801e222:	bd80      	pop	{r7, pc}
 801e224:	200018a8 	.word	0x200018a8
 801e228:	0801f5ac 	.word	0x0801f5ac

0801e22c <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801e22c:	b580      	push	{r7, lr}
 801e22e:	b084      	sub	sp, #16
 801e230:	af00      	add	r7, sp, #0
 801e232:	6078      	str	r0, [r7, #4]
 801e234:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801e236:	2300      	movs	r3, #0
 801e238:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801e23a:	687b      	ldr	r3, [r7, #4]
 801e23c:	2b00      	cmp	r3, #0
 801e23e:	d102      	bne.n	801e246 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801e240:	2301      	movs	r3, #1
 801e242:	73fb      	strb	r3, [r7, #15]
 801e244:	e014      	b.n	801e270 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801e246:	4b0d      	ldr	r3, [pc, #52]	; (801e27c <UTIL_TIMER_SetPeriod+0x50>)
 801e248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e24a:	6838      	ldr	r0, [r7, #0]
 801e24c:	4798      	blx	r3
 801e24e:	4602      	mov	r2, r0
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801e254:	6878      	ldr	r0, [r7, #4]
 801e256:	f000 f8c1 	bl	801e3dc <TimerExists>
 801e25a:	4603      	mov	r3, r0
 801e25c:	2b00      	cmp	r3, #0
 801e25e:	d007      	beq.n	801e270 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801e260:	6878      	ldr	r0, [r7, #4]
 801e262:	f7ff ff73 	bl	801e14c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801e266:	6878      	ldr	r0, [r7, #4]
 801e268:	f7ff ff02 	bl	801e070 <UTIL_TIMER_Start>
 801e26c:	4603      	mov	r3, r0
 801e26e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801e270:	7bfb      	ldrb	r3, [r7, #15]
}
 801e272:	4618      	mov	r0, r3
 801e274:	3710      	adds	r7, #16
 801e276:	46bd      	mov	sp, r7
 801e278:	bd80      	pop	{r7, pc}
 801e27a:	bf00      	nop
 801e27c:	0801f5ac 	.word	0x0801f5ac

0801e280 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801e280:	b590      	push	{r4, r7, lr}
 801e282:	b089      	sub	sp, #36	; 0x24
 801e284:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e286:	f3ef 8310 	mrs	r3, PRIMASK
 801e28a:	60bb      	str	r3, [r7, #8]
  return(result);
 801e28c:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801e28e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e290:	b672      	cpsid	i
}
 801e292:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801e294:	4b38      	ldr	r3, [pc, #224]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e296:	695b      	ldr	r3, [r3, #20]
 801e298:	4798      	blx	r3
 801e29a:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801e29c:	4b36      	ldr	r3, [pc, #216]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e29e:	691b      	ldr	r3, [r3, #16]
 801e2a0:	4798      	blx	r3
 801e2a2:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801e2a4:	693a      	ldr	r2, [r7, #16]
 801e2a6:	697b      	ldr	r3, [r7, #20]
 801e2a8:	1ad3      	subs	r3, r2, r3
 801e2aa:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801e2ac:	4b33      	ldr	r3, [pc, #204]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	2b00      	cmp	r3, #0
 801e2b2:	d037      	beq.n	801e324 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801e2b4:	4b31      	ldr	r3, [pc, #196]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2b6:	681b      	ldr	r3, [r3, #0]
 801e2b8:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801e2ba:	69fb      	ldr	r3, [r7, #28]
 801e2bc:	681b      	ldr	r3, [r3, #0]
 801e2be:	68fa      	ldr	r2, [r7, #12]
 801e2c0:	429a      	cmp	r2, r3
 801e2c2:	d206      	bcs.n	801e2d2 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801e2c4:	69fb      	ldr	r3, [r7, #28]
 801e2c6:	681a      	ldr	r2, [r3, #0]
 801e2c8:	68fb      	ldr	r3, [r7, #12]
 801e2ca:	1ad2      	subs	r2, r2, r3
 801e2cc:	69fb      	ldr	r3, [r7, #28]
 801e2ce:	601a      	str	r2, [r3, #0]
 801e2d0:	e002      	b.n	801e2d8 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801e2d2:	69fb      	ldr	r3, [r7, #28]
 801e2d4:	2200      	movs	r2, #0
 801e2d6:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801e2d8:	69fb      	ldr	r3, [r7, #28]
 801e2da:	695b      	ldr	r3, [r3, #20]
 801e2dc:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801e2de:	69fb      	ldr	r3, [r7, #28]
 801e2e0:	2b00      	cmp	r3, #0
 801e2e2:	d1ea      	bne.n	801e2ba <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e2e4:	e01e      	b.n	801e324 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801e2e6:	4b25      	ldr	r3, [pc, #148]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2e8:	681b      	ldr	r3, [r3, #0]
 801e2ea:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801e2ec:	4b23      	ldr	r3, [pc, #140]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2ee:	681b      	ldr	r3, [r3, #0]
 801e2f0:	695b      	ldr	r3, [r3, #20]
 801e2f2:	4a22      	ldr	r2, [pc, #136]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e2f4:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801e2f6:	69fb      	ldr	r3, [r7, #28]
 801e2f8:	2200      	movs	r2, #0
 801e2fa:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801e2fc:	69fb      	ldr	r3, [r7, #28]
 801e2fe:	2200      	movs	r2, #0
 801e300:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801e302:	69fb      	ldr	r3, [r7, #28]
 801e304:	68db      	ldr	r3, [r3, #12]
 801e306:	69fa      	ldr	r2, [r7, #28]
 801e308:	6912      	ldr	r2, [r2, #16]
 801e30a:	4610      	mov	r0, r2
 801e30c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801e30e:	69fb      	ldr	r3, [r7, #28]
 801e310:	7adb      	ldrb	r3, [r3, #11]
 801e312:	2b01      	cmp	r3, #1
 801e314:	d106      	bne.n	801e324 <UTIL_TIMER_IRQ_Handler+0xa4>
 801e316:	69fb      	ldr	r3, [r7, #28]
 801e318:	7a9b      	ldrb	r3, [r3, #10]
 801e31a:	2b00      	cmp	r3, #0
 801e31c:	d102      	bne.n	801e324 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801e31e:	69f8      	ldr	r0, [r7, #28]
 801e320:	f7ff fea6 	bl	801e070 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801e324:	4b15      	ldr	r3, [pc, #84]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e326:	681b      	ldr	r3, [r3, #0]
 801e328:	2b00      	cmp	r3, #0
 801e32a:	d00d      	beq.n	801e348 <UTIL_TIMER_IRQ_Handler+0xc8>
 801e32c:	4b13      	ldr	r3, [pc, #76]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	2b00      	cmp	r3, #0
 801e334:	d0d7      	beq.n	801e2e6 <UTIL_TIMER_IRQ_Handler+0x66>
 801e336:	4b11      	ldr	r3, [pc, #68]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	681c      	ldr	r4, [r3, #0]
 801e33c:	4b0e      	ldr	r3, [pc, #56]	; (801e378 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801e33e:	699b      	ldr	r3, [r3, #24]
 801e340:	4798      	blx	r3
 801e342:	4603      	mov	r3, r0
 801e344:	429c      	cmp	r4, r3
 801e346:	d3ce      	bcc.n	801e2e6 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801e348:	4b0c      	ldr	r3, [pc, #48]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e34a:	681b      	ldr	r3, [r3, #0]
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d009      	beq.n	801e364 <UTIL_TIMER_IRQ_Handler+0xe4>
 801e350:	4b0a      	ldr	r3, [pc, #40]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	7a1b      	ldrb	r3, [r3, #8]
 801e356:	2b00      	cmp	r3, #0
 801e358:	d104      	bne.n	801e364 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801e35a:	4b08      	ldr	r3, [pc, #32]	; (801e37c <UTIL_TIMER_IRQ_Handler+0xfc>)
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	4618      	mov	r0, r3
 801e360:	f000 f858 	bl	801e414 <TimerSetTimeout>
 801e364:	69bb      	ldr	r3, [r7, #24]
 801e366:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e368:	687b      	ldr	r3, [r7, #4]
 801e36a:	f383 8810 	msr	PRIMASK, r3
}
 801e36e:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801e370:	bf00      	nop
 801e372:	3724      	adds	r7, #36	; 0x24
 801e374:	46bd      	mov	sp, r7
 801e376:	bd90      	pop	{r4, r7, pc}
 801e378:	0801f5ac 	.word	0x0801f5ac
 801e37c:	200018a8 	.word	0x200018a8

0801e380 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801e380:	b580      	push	{r7, lr}
 801e382:	b082      	sub	sp, #8
 801e384:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801e386:	4b06      	ldr	r3, [pc, #24]	; (801e3a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e388:	69db      	ldr	r3, [r3, #28]
 801e38a:	4798      	blx	r3
 801e38c:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801e38e:	4b04      	ldr	r3, [pc, #16]	; (801e3a0 <UTIL_TIMER_GetCurrentTime+0x20>)
 801e390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e392:	6878      	ldr	r0, [r7, #4]
 801e394:	4798      	blx	r3
 801e396:	4603      	mov	r3, r0
}
 801e398:	4618      	mov	r0, r3
 801e39a:	3708      	adds	r7, #8
 801e39c:	46bd      	mov	sp, r7
 801e39e:	bd80      	pop	{r7, pc}
 801e3a0:	0801f5ac 	.word	0x0801f5ac

0801e3a4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801e3a4:	b580      	push	{r7, lr}
 801e3a6:	b084      	sub	sp, #16
 801e3a8:	af00      	add	r7, sp, #0
 801e3aa:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801e3ac:	4b0a      	ldr	r3, [pc, #40]	; (801e3d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3ae:	69db      	ldr	r3, [r3, #28]
 801e3b0:	4798      	blx	r3
 801e3b2:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801e3b4:	4b08      	ldr	r3, [pc, #32]	; (801e3d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e3b8:	6878      	ldr	r0, [r7, #4]
 801e3ba:	4798      	blx	r3
 801e3bc:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801e3be:	4b06      	ldr	r3, [pc, #24]	; (801e3d8 <UTIL_TIMER_GetElapsedTime+0x34>)
 801e3c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3c2:	68f9      	ldr	r1, [r7, #12]
 801e3c4:	68ba      	ldr	r2, [r7, #8]
 801e3c6:	1a8a      	subs	r2, r1, r2
 801e3c8:	4610      	mov	r0, r2
 801e3ca:	4798      	blx	r3
 801e3cc:	4603      	mov	r3, r0
}
 801e3ce:	4618      	mov	r0, r3
 801e3d0:	3710      	adds	r7, #16
 801e3d2:	46bd      	mov	sp, r7
 801e3d4:	bd80      	pop	{r7, pc}
 801e3d6:	bf00      	nop
 801e3d8:	0801f5ac 	.word	0x0801f5ac

0801e3dc <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801e3dc:	b480      	push	{r7}
 801e3de:	b085      	sub	sp, #20
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e3e4:	4b0a      	ldr	r3, [pc, #40]	; (801e410 <TimerExists+0x34>)
 801e3e6:	681b      	ldr	r3, [r3, #0]
 801e3e8:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801e3ea:	e008      	b.n	801e3fe <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801e3ec:	68fa      	ldr	r2, [r7, #12]
 801e3ee:	687b      	ldr	r3, [r7, #4]
 801e3f0:	429a      	cmp	r2, r3
 801e3f2:	d101      	bne.n	801e3f8 <TimerExists+0x1c>
    {
      return true;
 801e3f4:	2301      	movs	r3, #1
 801e3f6:	e006      	b.n	801e406 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801e3f8:	68fb      	ldr	r3, [r7, #12]
 801e3fa:	695b      	ldr	r3, [r3, #20]
 801e3fc:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801e3fe:	68fb      	ldr	r3, [r7, #12]
 801e400:	2b00      	cmp	r3, #0
 801e402:	d1f3      	bne.n	801e3ec <TimerExists+0x10>
  }
  return false;
 801e404:	2300      	movs	r3, #0
}
 801e406:	4618      	mov	r0, r3
 801e408:	3714      	adds	r7, #20
 801e40a:	46bd      	mov	sp, r7
 801e40c:	bc80      	pop	{r7}
 801e40e:	4770      	bx	lr
 801e410:	200018a8 	.word	0x200018a8

0801e414 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801e414:	b590      	push	{r4, r7, lr}
 801e416:	b085      	sub	sp, #20
 801e418:	af00      	add	r7, sp, #0
 801e41a:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801e41c:	4b11      	ldr	r3, [pc, #68]	; (801e464 <TimerSetTimeout+0x50>)
 801e41e:	6a1b      	ldr	r3, [r3, #32]
 801e420:	4798      	blx	r3
 801e422:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801e424:	687b      	ldr	r3, [r7, #4]
 801e426:	2201      	movs	r2, #1
 801e428:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801e42a:	687b      	ldr	r3, [r7, #4]
 801e42c:	681c      	ldr	r4, [r3, #0]
 801e42e:	4b0d      	ldr	r3, [pc, #52]	; (801e464 <TimerSetTimeout+0x50>)
 801e430:	699b      	ldr	r3, [r3, #24]
 801e432:	4798      	blx	r3
 801e434:	4602      	mov	r2, r0
 801e436:	68fb      	ldr	r3, [r7, #12]
 801e438:	4413      	add	r3, r2
 801e43a:	429c      	cmp	r4, r3
 801e43c:	d207      	bcs.n	801e44e <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801e43e:	4b09      	ldr	r3, [pc, #36]	; (801e464 <TimerSetTimeout+0x50>)
 801e440:	699b      	ldr	r3, [r3, #24]
 801e442:	4798      	blx	r3
 801e444:	4602      	mov	r2, r0
 801e446:	68fb      	ldr	r3, [r7, #12]
 801e448:	441a      	add	r2, r3
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801e44e:	4b05      	ldr	r3, [pc, #20]	; (801e464 <TimerSetTimeout+0x50>)
 801e450:	689b      	ldr	r3, [r3, #8]
 801e452:	687a      	ldr	r2, [r7, #4]
 801e454:	6812      	ldr	r2, [r2, #0]
 801e456:	4610      	mov	r0, r2
 801e458:	4798      	blx	r3
}
 801e45a:	bf00      	nop
 801e45c:	3714      	adds	r7, #20
 801e45e:	46bd      	mov	sp, r7
 801e460:	bd90      	pop	{r4, r7, pc}
 801e462:	bf00      	nop
 801e464:	0801f5ac 	.word	0x0801f5ac

0801e468 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801e468:	b480      	push	{r7}
 801e46a:	b085      	sub	sp, #20
 801e46c:	af00      	add	r7, sp, #0
 801e46e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e470:	4b14      	ldr	r3, [pc, #80]	; (801e4c4 <TimerInsertTimer+0x5c>)
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801e476:	4b13      	ldr	r3, [pc, #76]	; (801e4c4 <TimerInsertTimer+0x5c>)
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	695b      	ldr	r3, [r3, #20]
 801e47c:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801e47e:	e012      	b.n	801e4a6 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	681a      	ldr	r2, [r3, #0]
 801e484:	68bb      	ldr	r3, [r7, #8]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	429a      	cmp	r2, r3
 801e48a:	d905      	bls.n	801e498 <TimerInsertTimer+0x30>
    {
        cur = next;
 801e48c:	68bb      	ldr	r3, [r7, #8]
 801e48e:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801e490:	68bb      	ldr	r3, [r7, #8]
 801e492:	695b      	ldr	r3, [r3, #20]
 801e494:	60bb      	str	r3, [r7, #8]
 801e496:	e006      	b.n	801e4a6 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	687a      	ldr	r2, [r7, #4]
 801e49c:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	68ba      	ldr	r2, [r7, #8]
 801e4a2:	615a      	str	r2, [r3, #20]
        return;
 801e4a4:	e009      	b.n	801e4ba <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801e4a6:	68fb      	ldr	r3, [r7, #12]
 801e4a8:	695b      	ldr	r3, [r3, #20]
 801e4aa:	2b00      	cmp	r3, #0
 801e4ac:	d1e8      	bne.n	801e480 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801e4ae:	68fb      	ldr	r3, [r7, #12]
 801e4b0:	687a      	ldr	r2, [r7, #4]
 801e4b2:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	2200      	movs	r2, #0
 801e4b8:	615a      	str	r2, [r3, #20]
}
 801e4ba:	3714      	adds	r7, #20
 801e4bc:	46bd      	mov	sp, r7
 801e4be:	bc80      	pop	{r7}
 801e4c0:	4770      	bx	lr
 801e4c2:	bf00      	nop
 801e4c4:	200018a8 	.word	0x200018a8

0801e4c8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801e4c8:	b580      	push	{r7, lr}
 801e4ca:	b084      	sub	sp, #16
 801e4cc:	af00      	add	r7, sp, #0
 801e4ce:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801e4d0:	4b0b      	ldr	r3, [pc, #44]	; (801e500 <TimerInsertNewHeadTimer+0x38>)
 801e4d2:	681b      	ldr	r3, [r3, #0]
 801e4d4:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	2b00      	cmp	r3, #0
 801e4da:	d002      	beq.n	801e4e2 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801e4dc:	68fb      	ldr	r3, [r7, #12]
 801e4de:	2200      	movs	r2, #0
 801e4e0:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	68fa      	ldr	r2, [r7, #12]
 801e4e6:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801e4e8:	4a05      	ldr	r2, [pc, #20]	; (801e500 <TimerInsertNewHeadTimer+0x38>)
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801e4ee:	4b04      	ldr	r3, [pc, #16]	; (801e500 <TimerInsertNewHeadTimer+0x38>)
 801e4f0:	681b      	ldr	r3, [r3, #0]
 801e4f2:	4618      	mov	r0, r3
 801e4f4:	f7ff ff8e 	bl	801e414 <TimerSetTimeout>
}
 801e4f8:	bf00      	nop
 801e4fa:	3710      	adds	r7, #16
 801e4fc:	46bd      	mov	sp, r7
 801e4fe:	bd80      	pop	{r7, pc}
 801e500:	200018a8 	.word	0x200018a8

0801e504 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801e508:	2218      	movs	r2, #24
 801e50a:	2100      	movs	r1, #0
 801e50c:	4807      	ldr	r0, [pc, #28]	; (801e52c <UTIL_ADV_TRACE_Init+0x28>)
 801e50e:	f7fe fffa 	bl	801d506 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801e512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e516:	2100      	movs	r1, #0
 801e518:	4805      	ldr	r0, [pc, #20]	; (801e530 <UTIL_ADV_TRACE_Init+0x2c>)
 801e51a:	f7fe fff4 	bl	801d506 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801e51e:	4b05      	ldr	r3, [pc, #20]	; (801e534 <UTIL_ADV_TRACE_Init+0x30>)
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	4805      	ldr	r0, [pc, #20]	; (801e538 <UTIL_ADV_TRACE_Init+0x34>)
 801e524:	4798      	blx	r3
 801e526:	4603      	mov	r3, r0
}
 801e528:	4618      	mov	r0, r3
 801e52a:	bd80      	pop	{r7, pc}
 801e52c:	200018ac 	.word	0x200018ac
 801e530:	200018c4 	.word	0x200018c4
 801e534:	0801f5ec 	.word	0x0801f5ec
 801e538:	0801e7a5 	.word	0x0801e7a5

0801e53c <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801e53c:	b480      	push	{r7}
 801e53e:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e540:	4b06      	ldr	r3, [pc, #24]	; (801e55c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e542:	8a5a      	ldrh	r2, [r3, #18]
 801e544:	4b05      	ldr	r3, [pc, #20]	; (801e55c <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801e546:	8a1b      	ldrh	r3, [r3, #16]
 801e548:	429a      	cmp	r2, r3
 801e54a:	d101      	bne.n	801e550 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801e54c:	2301      	movs	r3, #1
 801e54e:	e000      	b.n	801e552 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801e550:	2300      	movs	r3, #0
}
 801e552:	4618      	mov	r0, r3
 801e554:	46bd      	mov	sp, r7
 801e556:	bc80      	pop	{r7}
 801e558:	4770      	bx	lr
 801e55a:	bf00      	nop
 801e55c:	200018ac 	.word	0x200018ac

0801e560 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801e560:	b408      	push	{r3}
 801e562:	b580      	push	{r7, lr}
 801e564:	b08d      	sub	sp, #52	; 0x34
 801e566:	af00      	add	r7, sp, #0
 801e568:	60f8      	str	r0, [r7, #12]
 801e56a:	60b9      	str	r1, [r7, #8]
 801e56c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801e56e:	2300      	movs	r3, #0
 801e570:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801e572:	2300      	movs	r3, #0
 801e574:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801e576:	4b37      	ldr	r3, [pc, #220]	; (801e654 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e578:	7a1b      	ldrb	r3, [r3, #8]
 801e57a:	461a      	mov	r2, r3
 801e57c:	68fb      	ldr	r3, [r7, #12]
 801e57e:	4293      	cmp	r3, r2
 801e580:	d902      	bls.n	801e588 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801e582:	f06f 0304 	mvn.w	r3, #4
 801e586:	e05e      	b.n	801e646 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801e588:	4b32      	ldr	r3, [pc, #200]	; (801e654 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e58a:	68da      	ldr	r2, [r3, #12]
 801e58c:	68bb      	ldr	r3, [r7, #8]
 801e58e:	4013      	ands	r3, r2
 801e590:	68ba      	ldr	r2, [r7, #8]
 801e592:	429a      	cmp	r2, r3
 801e594:	d002      	beq.n	801e59c <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801e596:	f06f 0305 	mvn.w	r3, #5
 801e59a:	e054      	b.n	801e646 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801e59c:	4b2d      	ldr	r3, [pc, #180]	; (801e654 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e59e:	685b      	ldr	r3, [r3, #4]
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	d00a      	beq.n	801e5ba <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	2b00      	cmp	r3, #0
 801e5a8:	d007      	beq.n	801e5ba <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801e5aa:	4b2a      	ldr	r3, [pc, #168]	; (801e654 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801e5ac:	685b      	ldr	r3, [r3, #4]
 801e5ae:	f107 0116 	add.w	r1, r7, #22
 801e5b2:	f107 0218 	add.w	r2, r7, #24
 801e5b6:	4610      	mov	r0, r2
 801e5b8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801e5ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801e5be:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e5c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e5c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e5c8:	4823      	ldr	r0, [pc, #140]	; (801e658 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801e5ca:	f7ff fa29 	bl	801da20 <tiny_vsnprintf_like>
 801e5ce:	4603      	mov	r3, r0
 801e5d0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 801e5d2:	f000 f9f1 	bl	801e9b8 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801e5d6:	8afa      	ldrh	r2, [r7, #22]
 801e5d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801e5da:	4413      	add	r3, r2
 801e5dc:	b29b      	uxth	r3, r3
 801e5de:	f107 0214 	add.w	r2, r7, #20
 801e5e2:	4611      	mov	r1, r2
 801e5e4:	4618      	mov	r0, r3
 801e5e6:	f000 f969 	bl	801e8bc <TRACE_AllocateBufer>
 801e5ea:	4603      	mov	r3, r0
 801e5ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e5f0:	d025      	beq.n	801e63e <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801e5f2:	2300      	movs	r3, #0
 801e5f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e5f6:	e00e      	b.n	801e616 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801e5f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e5fa:	8aba      	ldrh	r2, [r7, #20]
 801e5fc:	3330      	adds	r3, #48	; 0x30
 801e5fe:	443b      	add	r3, r7
 801e600:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801e604:	4b15      	ldr	r3, [pc, #84]	; (801e65c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e606:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801e608:	8abb      	ldrh	r3, [r7, #20]
 801e60a:	3301      	adds	r3, #1
 801e60c:	b29b      	uxth	r3, r3
 801e60e:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801e610:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801e612:	3301      	adds	r3, #1
 801e614:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801e616:	8afb      	ldrh	r3, [r7, #22]
 801e618:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801e61a:	429a      	cmp	r2, r3
 801e61c:	d3ec      	bcc.n	801e5f8 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801e61e:	8abb      	ldrh	r3, [r7, #20]
 801e620:	461a      	mov	r2, r3
 801e622:	4b0e      	ldr	r3, [pc, #56]	; (801e65c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801e624:	18d0      	adds	r0, r2, r3
 801e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e628:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e62a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801e62e:	f7ff f9f7 	bl	801da20 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801e632:	f000 f9df 	bl	801e9f4 <TRACE_UnLock>

    return TRACE_Send();
 801e636:	f000 f831 	bl	801e69c <TRACE_Send>
 801e63a:	4603      	mov	r3, r0
 801e63c:	e003      	b.n	801e646 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801e63e:	f000 f9d9 	bl	801e9f4 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801e642:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801e646:	4618      	mov	r0, r3
 801e648:	3734      	adds	r7, #52	; 0x34
 801e64a:	46bd      	mov	sp, r7
 801e64c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801e650:	b001      	add	sp, #4
 801e652:	4770      	bx	lr
 801e654:	200018ac 	.word	0x200018ac
 801e658:	20001cc4 	.word	0x20001cc4
 801e65c:	200018c4 	.word	0x200018c4

0801e660 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801e660:	b480      	push	{r7}
 801e662:	b083      	sub	sp, #12
 801e664:	af00      	add	r7, sp, #0
 801e666:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801e668:	4a03      	ldr	r2, [pc, #12]	; (801e678 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801e66a:	687b      	ldr	r3, [r7, #4]
 801e66c:	6053      	str	r3, [r2, #4]
}
 801e66e:	bf00      	nop
 801e670:	370c      	adds	r7, #12
 801e672:	46bd      	mov	sp, r7
 801e674:	bc80      	pop	{r7}
 801e676:	4770      	bx	lr
 801e678:	200018ac 	.word	0x200018ac

0801e67c <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801e67c:	b480      	push	{r7}
 801e67e:	b083      	sub	sp, #12
 801e680:	af00      	add	r7, sp, #0
 801e682:	4603      	mov	r3, r0
 801e684:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801e686:	4a04      	ldr	r2, [pc, #16]	; (801e698 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801e688:	79fb      	ldrb	r3, [r7, #7]
 801e68a:	7213      	strb	r3, [r2, #8]
}
 801e68c:	bf00      	nop
 801e68e:	370c      	adds	r7, #12
 801e690:	46bd      	mov	sp, r7
 801e692:	bc80      	pop	{r7}
 801e694:	4770      	bx	lr
 801e696:	bf00      	nop
 801e698:	200018ac 	.word	0x200018ac

0801e69c <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801e69c:	b580      	push	{r7, lr}
 801e69e:	b088      	sub	sp, #32
 801e6a0:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801e6a2:	2300      	movs	r3, #0
 801e6a4:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e6aa:	f3ef 8310 	mrs	r3, PRIMASK
 801e6ae:	613b      	str	r3, [r7, #16]
  return(result);
 801e6b0:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e6b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801e6b4:	b672      	cpsid	i
}
 801e6b6:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801e6b8:	f000 f9ba 	bl	801ea30 <TRACE_IsLocked>
 801e6bc:	4603      	mov	r3, r0
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	d15d      	bne.n	801e77e <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801e6c2:	f000 f979 	bl	801e9b8 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801e6c6:	4b34      	ldr	r3, [pc, #208]	; (801e798 <TRACE_Send+0xfc>)
 801e6c8:	8a1a      	ldrh	r2, [r3, #16]
 801e6ca:	4b33      	ldr	r3, [pc, #204]	; (801e798 <TRACE_Send+0xfc>)
 801e6cc:	8a5b      	ldrh	r3, [r3, #18]
 801e6ce:	429a      	cmp	r2, r3
 801e6d0:	d04d      	beq.n	801e76e <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e6d2:	4b31      	ldr	r3, [pc, #196]	; (801e798 <TRACE_Send+0xfc>)
 801e6d4:	789b      	ldrb	r3, [r3, #2]
 801e6d6:	2b01      	cmp	r3, #1
 801e6d8:	d117      	bne.n	801e70a <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801e6da:	4b2f      	ldr	r3, [pc, #188]	; (801e798 <TRACE_Send+0xfc>)
 801e6dc:	881a      	ldrh	r2, [r3, #0]
 801e6de:	4b2e      	ldr	r3, [pc, #184]	; (801e798 <TRACE_Send+0xfc>)
 801e6e0:	8a1b      	ldrh	r3, [r3, #16]
 801e6e2:	1ad3      	subs	r3, r2, r3
 801e6e4:	b29a      	uxth	r2, r3
 801e6e6:	4b2c      	ldr	r3, [pc, #176]	; (801e798 <TRACE_Send+0xfc>)
 801e6e8:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e6ea:	4b2b      	ldr	r3, [pc, #172]	; (801e798 <TRACE_Send+0xfc>)
 801e6ec:	2202      	movs	r2, #2
 801e6ee:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e6f0:	4b29      	ldr	r3, [pc, #164]	; (801e798 <TRACE_Send+0xfc>)
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e6f6:	4b28      	ldr	r3, [pc, #160]	; (801e798 <TRACE_Send+0xfc>)
 801e6f8:	8a9b      	ldrh	r3, [r3, #20]
 801e6fa:	2b00      	cmp	r3, #0
 801e6fc:	d105      	bne.n	801e70a <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e6fe:	4b26      	ldr	r3, [pc, #152]	; (801e798 <TRACE_Send+0xfc>)
 801e700:	2200      	movs	r2, #0
 801e702:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e704:	4b24      	ldr	r3, [pc, #144]	; (801e798 <TRACE_Send+0xfc>)
 801e706:	2200      	movs	r2, #0
 801e708:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e70a:	4b23      	ldr	r3, [pc, #140]	; (801e798 <TRACE_Send+0xfc>)
 801e70c:	789b      	ldrb	r3, [r3, #2]
 801e70e:	2b00      	cmp	r3, #0
 801e710:	d115      	bne.n	801e73e <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e712:	4b21      	ldr	r3, [pc, #132]	; (801e798 <TRACE_Send+0xfc>)
 801e714:	8a5a      	ldrh	r2, [r3, #18]
 801e716:	4b20      	ldr	r3, [pc, #128]	; (801e798 <TRACE_Send+0xfc>)
 801e718:	8a1b      	ldrh	r3, [r3, #16]
 801e71a:	429a      	cmp	r2, r3
 801e71c:	d908      	bls.n	801e730 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e71e:	4b1e      	ldr	r3, [pc, #120]	; (801e798 <TRACE_Send+0xfc>)
 801e720:	8a5a      	ldrh	r2, [r3, #18]
 801e722:	4b1d      	ldr	r3, [pc, #116]	; (801e798 <TRACE_Send+0xfc>)
 801e724:	8a1b      	ldrh	r3, [r3, #16]
 801e726:	1ad3      	subs	r3, r2, r3
 801e728:	b29a      	uxth	r2, r3
 801e72a:	4b1b      	ldr	r3, [pc, #108]	; (801e798 <TRACE_Send+0xfc>)
 801e72c:	829a      	strh	r2, [r3, #20]
 801e72e:	e006      	b.n	801e73e <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e730:	4b19      	ldr	r3, [pc, #100]	; (801e798 <TRACE_Send+0xfc>)
 801e732:	8a1b      	ldrh	r3, [r3, #16]
 801e734:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e738:	b29a      	uxth	r2, r3
 801e73a:	4b17      	ldr	r3, [pc, #92]	; (801e798 <TRACE_Send+0xfc>)
 801e73c:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e73e:	4b16      	ldr	r3, [pc, #88]	; (801e798 <TRACE_Send+0xfc>)
 801e740:	8a1b      	ldrh	r3, [r3, #16]
 801e742:	461a      	mov	r2, r3
 801e744:	4b15      	ldr	r3, [pc, #84]	; (801e79c <TRACE_Send+0x100>)
 801e746:	4413      	add	r3, r2
 801e748:	61bb      	str	r3, [r7, #24]
 801e74a:	697b      	ldr	r3, [r7, #20]
 801e74c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e74e:	68fb      	ldr	r3, [r7, #12]
 801e750:	f383 8810 	msr	PRIMASK, r3
}
 801e754:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801e756:	f7e4 f96b 	bl	8002a30 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e75a:	4b11      	ldr	r3, [pc, #68]	; (801e7a0 <TRACE_Send+0x104>)
 801e75c:	68db      	ldr	r3, [r3, #12]
 801e75e:	4a0e      	ldr	r2, [pc, #56]	; (801e798 <TRACE_Send+0xfc>)
 801e760:	8a92      	ldrh	r2, [r2, #20]
 801e762:	4611      	mov	r1, r2
 801e764:	69b8      	ldr	r0, [r7, #24]
 801e766:	4798      	blx	r3
 801e768:	4603      	mov	r3, r0
 801e76a:	77fb      	strb	r3, [r7, #31]
 801e76c:	e00d      	b.n	801e78a <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801e76e:	f000 f941 	bl	801e9f4 <TRACE_UnLock>
 801e772:	697b      	ldr	r3, [r7, #20]
 801e774:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e776:	68bb      	ldr	r3, [r7, #8]
 801e778:	f383 8810 	msr	PRIMASK, r3
}
 801e77c:	e005      	b.n	801e78a <TRACE_Send+0xee>
 801e77e:	697b      	ldr	r3, [r7, #20]
 801e780:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	f383 8810 	msr	PRIMASK, r3
}
 801e788:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801e78a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e78e:	4618      	mov	r0, r3
 801e790:	3720      	adds	r7, #32
 801e792:	46bd      	mov	sp, r7
 801e794:	bd80      	pop	{r7, pc}
 801e796:	bf00      	nop
 801e798:	200018ac 	.word	0x200018ac
 801e79c:	200018c4 	.word	0x200018c4
 801e7a0:	0801f5ec 	.word	0x0801f5ec

0801e7a4 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801e7a4:	b580      	push	{r7, lr}
 801e7a6:	b088      	sub	sp, #32
 801e7a8:	af00      	add	r7, sp, #0
 801e7aa:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801e7ac:	2300      	movs	r3, #0
 801e7ae:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e7b0:	f3ef 8310 	mrs	r3, PRIMASK
 801e7b4:	617b      	str	r3, [r7, #20]
  return(result);
 801e7b6:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e7b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801e7ba:	b672      	cpsid	i
}
 801e7bc:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801e7be:	4b3c      	ldr	r3, [pc, #240]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7c0:	789b      	ldrb	r3, [r3, #2]
 801e7c2:	2b02      	cmp	r3, #2
 801e7c4:	d106      	bne.n	801e7d4 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e7c6:	4b3a      	ldr	r3, [pc, #232]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e7cc:	4b38      	ldr	r3, [pc, #224]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7ce:	2200      	movs	r2, #0
 801e7d0:	821a      	strh	r2, [r3, #16]
 801e7d2:	e00a      	b.n	801e7ea <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e7d4:	4b36      	ldr	r3, [pc, #216]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7d6:	8a1a      	ldrh	r2, [r3, #16]
 801e7d8:	4b35      	ldr	r3, [pc, #212]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7da:	8a9b      	ldrh	r3, [r3, #20]
 801e7dc:	4413      	add	r3, r2
 801e7de:	b29b      	uxth	r3, r3
 801e7e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e7e4:	b29a      	uxth	r2, r3
 801e7e6:	4b32      	ldr	r3, [pc, #200]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7e8:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801e7ea:	4b31      	ldr	r3, [pc, #196]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7ec:	8a1a      	ldrh	r2, [r3, #16]
 801e7ee:	4b30      	ldr	r3, [pc, #192]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7f0:	8a5b      	ldrh	r3, [r3, #18]
 801e7f2:	429a      	cmp	r2, r3
 801e7f4:	d04d      	beq.n	801e892 <TRACE_TxCpltCallback+0xee>
 801e7f6:	4b2e      	ldr	r3, [pc, #184]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e7f8:	8adb      	ldrh	r3, [r3, #22]
 801e7fa:	2b01      	cmp	r3, #1
 801e7fc:	d149      	bne.n	801e892 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801e7fe:	4b2c      	ldr	r3, [pc, #176]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e800:	789b      	ldrb	r3, [r3, #2]
 801e802:	2b01      	cmp	r3, #1
 801e804:	d117      	bne.n	801e836 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801e806:	4b2a      	ldr	r3, [pc, #168]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e808:	881a      	ldrh	r2, [r3, #0]
 801e80a:	4b29      	ldr	r3, [pc, #164]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e80c:	8a1b      	ldrh	r3, [r3, #16]
 801e80e:	1ad3      	subs	r3, r2, r3
 801e810:	b29a      	uxth	r2, r3
 801e812:	4b27      	ldr	r3, [pc, #156]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e814:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801e816:	4b26      	ldr	r3, [pc, #152]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e818:	2202      	movs	r2, #2
 801e81a:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801e81c:	4b24      	ldr	r3, [pc, #144]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e81e:	2200      	movs	r2, #0
 801e820:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801e822:	4b23      	ldr	r3, [pc, #140]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e824:	8a9b      	ldrh	r3, [r3, #20]
 801e826:	2b00      	cmp	r3, #0
 801e828:	d105      	bne.n	801e836 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801e82a:	4b21      	ldr	r3, [pc, #132]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e82c:	2200      	movs	r2, #0
 801e82e:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801e830:	4b1f      	ldr	r3, [pc, #124]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e832:	2200      	movs	r2, #0
 801e834:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801e836:	4b1e      	ldr	r3, [pc, #120]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e838:	789b      	ldrb	r3, [r3, #2]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d115      	bne.n	801e86a <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e83e:	4b1c      	ldr	r3, [pc, #112]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e840:	8a5a      	ldrh	r2, [r3, #18]
 801e842:	4b1b      	ldr	r3, [pc, #108]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e844:	8a1b      	ldrh	r3, [r3, #16]
 801e846:	429a      	cmp	r2, r3
 801e848:	d908      	bls.n	801e85c <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801e84a:	4b19      	ldr	r3, [pc, #100]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e84c:	8a5a      	ldrh	r2, [r3, #18]
 801e84e:	4b18      	ldr	r3, [pc, #96]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e850:	8a1b      	ldrh	r3, [r3, #16]
 801e852:	1ad3      	subs	r3, r2, r3
 801e854:	b29a      	uxth	r2, r3
 801e856:	4b16      	ldr	r3, [pc, #88]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e858:	829a      	strh	r2, [r3, #20]
 801e85a:	e006      	b.n	801e86a <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801e85c:	4b14      	ldr	r3, [pc, #80]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e85e:	8a1b      	ldrh	r3, [r3, #16]
 801e860:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e864:	b29a      	uxth	r2, r3
 801e866:	4b12      	ldr	r3, [pc, #72]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e868:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801e86a:	4b11      	ldr	r3, [pc, #68]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e86c:	8a1b      	ldrh	r3, [r3, #16]
 801e86e:	461a      	mov	r2, r3
 801e870:	4b10      	ldr	r3, [pc, #64]	; (801e8b4 <TRACE_TxCpltCallback+0x110>)
 801e872:	4413      	add	r3, r2
 801e874:	61fb      	str	r3, [r7, #28]
 801e876:	69bb      	ldr	r3, [r7, #24]
 801e878:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e87a:	693b      	ldr	r3, [r7, #16]
 801e87c:	f383 8810 	msr	PRIMASK, r3
}
 801e880:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801e882:	4b0d      	ldr	r3, [pc, #52]	; (801e8b8 <TRACE_TxCpltCallback+0x114>)
 801e884:	68db      	ldr	r3, [r3, #12]
 801e886:	4a0a      	ldr	r2, [pc, #40]	; (801e8b0 <TRACE_TxCpltCallback+0x10c>)
 801e888:	8a92      	ldrh	r2, [r2, #20]
 801e88a:	4611      	mov	r1, r2
 801e88c:	69f8      	ldr	r0, [r7, #28]
 801e88e:	4798      	blx	r3
 801e890:	e00a      	b.n	801e8a8 <TRACE_TxCpltCallback+0x104>
 801e892:	69bb      	ldr	r3, [r7, #24]
 801e894:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e896:	68fb      	ldr	r3, [r7, #12]
 801e898:	f383 8810 	msr	PRIMASK, r3
}
 801e89c:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801e89e:	f7e4 f8cf 	bl	8002a40 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801e8a2:	f000 f8a7 	bl	801e9f4 <TRACE_UnLock>
  }
}
 801e8a6:	bf00      	nop
 801e8a8:	bf00      	nop
 801e8aa:	3720      	adds	r7, #32
 801e8ac:	46bd      	mov	sp, r7
 801e8ae:	bd80      	pop	{r7, pc}
 801e8b0:	200018ac 	.word	0x200018ac
 801e8b4:	200018c4 	.word	0x200018c4
 801e8b8:	0801f5ec 	.word	0x0801f5ec

0801e8bc <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801e8bc:	b480      	push	{r7}
 801e8be:	b087      	sub	sp, #28
 801e8c0:	af00      	add	r7, sp, #0
 801e8c2:	4603      	mov	r3, r0
 801e8c4:	6039      	str	r1, [r7, #0]
 801e8c6:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801e8c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e8cc:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e8ce:	f3ef 8310 	mrs	r3, PRIMASK
 801e8d2:	60fb      	str	r3, [r7, #12]
  return(result);
 801e8d4:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e8d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801e8d8:	b672      	cpsid	i
}
 801e8da:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801e8dc:	4b35      	ldr	r3, [pc, #212]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e8de:	8a5a      	ldrh	r2, [r3, #18]
 801e8e0:	4b34      	ldr	r3, [pc, #208]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e8e2:	8a1b      	ldrh	r3, [r3, #16]
 801e8e4:	429a      	cmp	r2, r3
 801e8e6:	d11b      	bne.n	801e920 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e8e8:	4b32      	ldr	r3, [pc, #200]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e8ea:	8a5b      	ldrh	r3, [r3, #18]
 801e8ec:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e8f0:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801e8f2:	88fa      	ldrh	r2, [r7, #6]
 801e8f4:	8afb      	ldrh	r3, [r7, #22]
 801e8f6:	429a      	cmp	r2, r3
 801e8f8:	d33a      	bcc.n	801e970 <TRACE_AllocateBufer+0xb4>
 801e8fa:	4b2e      	ldr	r3, [pc, #184]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e8fc:	8a1b      	ldrh	r3, [r3, #16]
 801e8fe:	88fa      	ldrh	r2, [r7, #6]
 801e900:	429a      	cmp	r2, r3
 801e902:	d235      	bcs.n	801e970 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e904:	4b2b      	ldr	r3, [pc, #172]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e906:	2201      	movs	r2, #1
 801e908:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e90a:	4b2a      	ldr	r3, [pc, #168]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e90c:	8a5a      	ldrh	r2, [r3, #18]
 801e90e:	4b29      	ldr	r3, [pc, #164]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e910:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e912:	4b28      	ldr	r3, [pc, #160]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e914:	8a1b      	ldrh	r3, [r3, #16]
 801e916:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e918:	4b26      	ldr	r3, [pc, #152]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e91a:	2200      	movs	r2, #0
 801e91c:	825a      	strh	r2, [r3, #18]
 801e91e:	e027      	b.n	801e970 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801e920:	4b24      	ldr	r3, [pc, #144]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e922:	8a5a      	ldrh	r2, [r3, #18]
 801e924:	4b23      	ldr	r3, [pc, #140]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e926:	8a1b      	ldrh	r3, [r3, #16]
 801e928:	429a      	cmp	r2, r3
 801e92a:	d91b      	bls.n	801e964 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801e92c:	4b21      	ldr	r3, [pc, #132]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e92e:	8a5b      	ldrh	r3, [r3, #18]
 801e930:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 801e934:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801e936:	88fa      	ldrh	r2, [r7, #6]
 801e938:	8afb      	ldrh	r3, [r7, #22]
 801e93a:	429a      	cmp	r2, r3
 801e93c:	d318      	bcc.n	801e970 <TRACE_AllocateBufer+0xb4>
 801e93e:	4b1d      	ldr	r3, [pc, #116]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e940:	8a1b      	ldrh	r3, [r3, #16]
 801e942:	88fa      	ldrh	r2, [r7, #6]
 801e944:	429a      	cmp	r2, r3
 801e946:	d213      	bcs.n	801e970 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801e948:	4b1a      	ldr	r3, [pc, #104]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e94a:	2201      	movs	r2, #1
 801e94c:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801e94e:	4b19      	ldr	r3, [pc, #100]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e950:	8a5a      	ldrh	r2, [r3, #18]
 801e952:	4b18      	ldr	r3, [pc, #96]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e954:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801e956:	4b17      	ldr	r3, [pc, #92]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e958:	8a1b      	ldrh	r3, [r3, #16]
 801e95a:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801e95c:	4b15      	ldr	r3, [pc, #84]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e95e:	2200      	movs	r2, #0
 801e960:	825a      	strh	r2, [r3, #18]
 801e962:	e005      	b.n	801e970 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801e964:	4b13      	ldr	r3, [pc, #76]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e966:	8a1a      	ldrh	r2, [r3, #16]
 801e968:	4b12      	ldr	r3, [pc, #72]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e96a:	8a5b      	ldrh	r3, [r3, #18]
 801e96c:	1ad3      	subs	r3, r2, r3
 801e96e:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801e970:	8afa      	ldrh	r2, [r7, #22]
 801e972:	88fb      	ldrh	r3, [r7, #6]
 801e974:	429a      	cmp	r2, r3
 801e976:	d90f      	bls.n	801e998 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801e978:	4b0e      	ldr	r3, [pc, #56]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e97a:	8a5a      	ldrh	r2, [r3, #18]
 801e97c:	683b      	ldr	r3, [r7, #0]
 801e97e:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801e980:	4b0c      	ldr	r3, [pc, #48]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e982:	8a5a      	ldrh	r2, [r3, #18]
 801e984:	88fb      	ldrh	r3, [r7, #6]
 801e986:	4413      	add	r3, r2
 801e988:	b29b      	uxth	r3, r3
 801e98a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801e98e:	b29a      	uxth	r2, r3
 801e990:	4b08      	ldr	r3, [pc, #32]	; (801e9b4 <TRACE_AllocateBufer+0xf8>)
 801e992:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801e994:	2300      	movs	r3, #0
 801e996:	82bb      	strh	r3, [r7, #20]
 801e998:	693b      	ldr	r3, [r7, #16]
 801e99a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e99c:	68bb      	ldr	r3, [r7, #8]
 801e99e:	f383 8810 	msr	PRIMASK, r3
}
 801e9a2:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801e9a4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801e9a8:	4618      	mov	r0, r3
 801e9aa:	371c      	adds	r7, #28
 801e9ac:	46bd      	mov	sp, r7
 801e9ae:	bc80      	pop	{r7}
 801e9b0:	4770      	bx	lr
 801e9b2:	bf00      	nop
 801e9b4:	200018ac 	.word	0x200018ac

0801e9b8 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801e9b8:	b480      	push	{r7}
 801e9ba:	b085      	sub	sp, #20
 801e9bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9be:	f3ef 8310 	mrs	r3, PRIMASK
 801e9c2:	607b      	str	r3, [r7, #4]
  return(result);
 801e9c4:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801e9c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801e9c8:	b672      	cpsid	i
}
 801e9ca:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801e9cc:	4b08      	ldr	r3, [pc, #32]	; (801e9f0 <TRACE_Lock+0x38>)
 801e9ce:	8adb      	ldrh	r3, [r3, #22]
 801e9d0:	3301      	adds	r3, #1
 801e9d2:	b29a      	uxth	r2, r3
 801e9d4:	4b06      	ldr	r3, [pc, #24]	; (801e9f0 <TRACE_Lock+0x38>)
 801e9d6:	82da      	strh	r2, [r3, #22]
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801e9dc:	68bb      	ldr	r3, [r7, #8]
 801e9de:	f383 8810 	msr	PRIMASK, r3
}
 801e9e2:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801e9e4:	bf00      	nop
 801e9e6:	3714      	adds	r7, #20
 801e9e8:	46bd      	mov	sp, r7
 801e9ea:	bc80      	pop	{r7}
 801e9ec:	4770      	bx	lr
 801e9ee:	bf00      	nop
 801e9f0:	200018ac 	.word	0x200018ac

0801e9f4 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801e9f4:	b480      	push	{r7}
 801e9f6:	b085      	sub	sp, #20
 801e9f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801e9fa:	f3ef 8310 	mrs	r3, PRIMASK
 801e9fe:	607b      	str	r3, [r7, #4]
  return(result);
 801ea00:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801ea02:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801ea04:	b672      	cpsid	i
}
 801ea06:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801ea08:	4b08      	ldr	r3, [pc, #32]	; (801ea2c <TRACE_UnLock+0x38>)
 801ea0a:	8adb      	ldrh	r3, [r3, #22]
 801ea0c:	3b01      	subs	r3, #1
 801ea0e:	b29a      	uxth	r2, r3
 801ea10:	4b06      	ldr	r3, [pc, #24]	; (801ea2c <TRACE_UnLock+0x38>)
 801ea12:	82da      	strh	r2, [r3, #22]
 801ea14:	68fb      	ldr	r3, [r7, #12]
 801ea16:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801ea18:	68bb      	ldr	r3, [r7, #8]
 801ea1a:	f383 8810 	msr	PRIMASK, r3
}
 801ea1e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801ea20:	bf00      	nop
 801ea22:	3714      	adds	r7, #20
 801ea24:	46bd      	mov	sp, r7
 801ea26:	bc80      	pop	{r7}
 801ea28:	4770      	bx	lr
 801ea2a:	bf00      	nop
 801ea2c:	200018ac 	.word	0x200018ac

0801ea30 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801ea30:	b480      	push	{r7}
 801ea32:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801ea34:	4b05      	ldr	r3, [pc, #20]	; (801ea4c <TRACE_IsLocked+0x1c>)
 801ea36:	8adb      	ldrh	r3, [r3, #22]
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	bf14      	ite	ne
 801ea3c:	2301      	movne	r3, #1
 801ea3e:	2300      	moveq	r3, #0
 801ea40:	b2db      	uxtb	r3, r3
}
 801ea42:	4618      	mov	r0, r3
 801ea44:	46bd      	mov	sp, r7
 801ea46:	bc80      	pop	{r7}
 801ea48:	4770      	bx	lr
 801ea4a:	bf00      	nop
 801ea4c:	200018ac 	.word	0x200018ac

0801ea50 <memset>:
 801ea50:	4402      	add	r2, r0
 801ea52:	4603      	mov	r3, r0
 801ea54:	4293      	cmp	r3, r2
 801ea56:	d100      	bne.n	801ea5a <memset+0xa>
 801ea58:	4770      	bx	lr
 801ea5a:	f803 1b01 	strb.w	r1, [r3], #1
 801ea5e:	e7f9      	b.n	801ea54 <memset+0x4>

0801ea60 <__libc_init_array>:
 801ea60:	b570      	push	{r4, r5, r6, lr}
 801ea62:	4d0d      	ldr	r5, [pc, #52]	; (801ea98 <__libc_init_array+0x38>)
 801ea64:	4c0d      	ldr	r4, [pc, #52]	; (801ea9c <__libc_init_array+0x3c>)
 801ea66:	1b64      	subs	r4, r4, r5
 801ea68:	10a4      	asrs	r4, r4, #2
 801ea6a:	2600      	movs	r6, #0
 801ea6c:	42a6      	cmp	r6, r4
 801ea6e:	d109      	bne.n	801ea84 <__libc_init_array+0x24>
 801ea70:	4d0b      	ldr	r5, [pc, #44]	; (801eaa0 <__libc_init_array+0x40>)
 801ea72:	4c0c      	ldr	r4, [pc, #48]	; (801eaa4 <__libc_init_array+0x44>)
 801ea74:	f000 f900 	bl	801ec78 <_init>
 801ea78:	1b64      	subs	r4, r4, r5
 801ea7a:	10a4      	asrs	r4, r4, #2
 801ea7c:	2600      	movs	r6, #0
 801ea7e:	42a6      	cmp	r6, r4
 801ea80:	d105      	bne.n	801ea8e <__libc_init_array+0x2e>
 801ea82:	bd70      	pop	{r4, r5, r6, pc}
 801ea84:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea88:	4798      	blx	r3
 801ea8a:	3601      	adds	r6, #1
 801ea8c:	e7ee      	b.n	801ea6c <__libc_init_array+0xc>
 801ea8e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ea92:	4798      	blx	r3
 801ea94:	3601      	adds	r6, #1
 801ea96:	e7f2      	b.n	801ea7e <__libc_init_array+0x1e>
 801ea98:	0801fc20 	.word	0x0801fc20
 801ea9c:	0801fc20 	.word	0x0801fc20
 801eaa0:	0801fc20 	.word	0x0801fc20
 801eaa4:	0801fc28 	.word	0x0801fc28

0801eaa8 <__retarget_lock_acquire_recursive>:
 801eaa8:	4770      	bx	lr

0801eaaa <__retarget_lock_release_recursive>:
 801eaaa:	4770      	bx	lr

0801eaac <register_fini>:
 801eaac:	4b02      	ldr	r3, [pc, #8]	; (801eab8 <register_fini+0xc>)
 801eaae:	b113      	cbz	r3, 801eab6 <register_fini+0xa>
 801eab0:	4802      	ldr	r0, [pc, #8]	; (801eabc <register_fini+0x10>)
 801eab2:	f000 b805 	b.w	801eac0 <atexit>
 801eab6:	4770      	bx	lr
 801eab8:	00000000 	.word	0x00000000
 801eabc:	0801eacd 	.word	0x0801eacd

0801eac0 <atexit>:
 801eac0:	2300      	movs	r3, #0
 801eac2:	4601      	mov	r1, r0
 801eac4:	461a      	mov	r2, r3
 801eac6:	4618      	mov	r0, r3
 801eac8:	f000 b814 	b.w	801eaf4 <__register_exitproc>

0801eacc <__libc_fini_array>:
 801eacc:	b538      	push	{r3, r4, r5, lr}
 801eace:	4d07      	ldr	r5, [pc, #28]	; (801eaec <__libc_fini_array+0x20>)
 801ead0:	4c07      	ldr	r4, [pc, #28]	; (801eaf0 <__libc_fini_array+0x24>)
 801ead2:	1b64      	subs	r4, r4, r5
 801ead4:	10a4      	asrs	r4, r4, #2
 801ead6:	b91c      	cbnz	r4, 801eae0 <__libc_fini_array+0x14>
 801ead8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eadc:	f000 b8d2 	b.w	801ec84 <_fini>
 801eae0:	3c01      	subs	r4, #1
 801eae2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 801eae6:	4798      	blx	r3
 801eae8:	e7f5      	b.n	801ead6 <__libc_fini_array+0xa>
 801eaea:	bf00      	nop
 801eaec:	0801fc28 	.word	0x0801fc28
 801eaf0:	0801fc2c 	.word	0x0801fc2c

0801eaf4 <__register_exitproc>:
 801eaf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaf8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 801eb68 <__register_exitproc+0x74>
 801eafc:	4606      	mov	r6, r0
 801eafe:	f8da 0000 	ldr.w	r0, [sl]
 801eb02:	4698      	mov	r8, r3
 801eb04:	460f      	mov	r7, r1
 801eb06:	4691      	mov	r9, r2
 801eb08:	f7ff ffce 	bl	801eaa8 <__retarget_lock_acquire_recursive>
 801eb0c:	4b17      	ldr	r3, [pc, #92]	; (801eb6c <__register_exitproc+0x78>)
 801eb0e:	681c      	ldr	r4, [r3, #0]
 801eb10:	b90c      	cbnz	r4, 801eb16 <__register_exitproc+0x22>
 801eb12:	4c17      	ldr	r4, [pc, #92]	; (801eb70 <__register_exitproc+0x7c>)
 801eb14:	601c      	str	r4, [r3, #0]
 801eb16:	6865      	ldr	r5, [r4, #4]
 801eb18:	f8da 0000 	ldr.w	r0, [sl]
 801eb1c:	2d1f      	cmp	r5, #31
 801eb1e:	dd05      	ble.n	801eb2c <__register_exitproc+0x38>
 801eb20:	f7ff ffc3 	bl	801eaaa <__retarget_lock_release_recursive>
 801eb24:	f04f 30ff 	mov.w	r0, #4294967295
 801eb28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb2c:	b19e      	cbz	r6, 801eb56 <__register_exitproc+0x62>
 801eb2e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 801eb32:	2201      	movs	r2, #1
 801eb34:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801eb38:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801eb3c:	40aa      	lsls	r2, r5
 801eb3e:	4313      	orrs	r3, r2
 801eb40:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 801eb44:	2e02      	cmp	r6, #2
 801eb46:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 801eb4a:	bf02      	ittt	eq
 801eb4c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 801eb50:	4313      	orreq	r3, r2
 801eb52:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 801eb56:	1c6b      	adds	r3, r5, #1
 801eb58:	3502      	adds	r5, #2
 801eb5a:	6063      	str	r3, [r4, #4]
 801eb5c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 801eb60:	f7ff ffa3 	bl	801eaaa <__retarget_lock_release_recursive>
 801eb64:	2000      	movs	r0, #0
 801eb66:	e7df      	b.n	801eb28 <__register_exitproc+0x34>
 801eb68:	2000015c 	.word	0x2000015c
 801eb6c:	20001ec8 	.word	0x20001ec8
 801eb70:	20001ecc 	.word	0x20001ecc
 801eb74:	00000000 	.word	0x00000000

0801eb78 <floor>:
 801eb78:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801eb7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eb80:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801eb84:	2e13      	cmp	r6, #19
 801eb86:	460b      	mov	r3, r1
 801eb88:	4607      	mov	r7, r0
 801eb8a:	460c      	mov	r4, r1
 801eb8c:	4605      	mov	r5, r0
 801eb8e:	dc32      	bgt.n	801ebf6 <floor+0x7e>
 801eb90:	2e00      	cmp	r6, #0
 801eb92:	da14      	bge.n	801ebbe <floor+0x46>
 801eb94:	a334      	add	r3, pc, #208	; (adr r3, 801ec68 <floor+0xf0>)
 801eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb9a:	f7e1 fafb 	bl	8000194 <__adddf3>
 801eb9e:	2200      	movs	r2, #0
 801eba0:	2300      	movs	r3, #0
 801eba2:	f7e1 ff3d 	bl	8000a20 <__aeabi_dcmpgt>
 801eba6:	b138      	cbz	r0, 801ebb8 <floor+0x40>
 801eba8:	2c00      	cmp	r4, #0
 801ebaa:	da56      	bge.n	801ec5a <floor+0xe2>
 801ebac:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801ebb0:	4325      	orrs	r5, r4
 801ebb2:	d055      	beq.n	801ec60 <floor+0xe8>
 801ebb4:	4c2e      	ldr	r4, [pc, #184]	; (801ec70 <floor+0xf8>)
 801ebb6:	2500      	movs	r5, #0
 801ebb8:	4623      	mov	r3, r4
 801ebba:	462f      	mov	r7, r5
 801ebbc:	e025      	b.n	801ec0a <floor+0x92>
 801ebbe:	4a2d      	ldr	r2, [pc, #180]	; (801ec74 <floor+0xfc>)
 801ebc0:	fa42 f806 	asr.w	r8, r2, r6
 801ebc4:	ea01 0208 	and.w	r2, r1, r8
 801ebc8:	4302      	orrs	r2, r0
 801ebca:	d01e      	beq.n	801ec0a <floor+0x92>
 801ebcc:	a326      	add	r3, pc, #152	; (adr r3, 801ec68 <floor+0xf0>)
 801ebce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebd2:	f7e1 fadf 	bl	8000194 <__adddf3>
 801ebd6:	2200      	movs	r2, #0
 801ebd8:	2300      	movs	r3, #0
 801ebda:	f7e1 ff21 	bl	8000a20 <__aeabi_dcmpgt>
 801ebde:	2800      	cmp	r0, #0
 801ebe0:	d0ea      	beq.n	801ebb8 <floor+0x40>
 801ebe2:	2c00      	cmp	r4, #0
 801ebe4:	bfbe      	ittt	lt
 801ebe6:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801ebea:	4133      	asrlt	r3, r6
 801ebec:	18e4      	addlt	r4, r4, r3
 801ebee:	ea24 0408 	bic.w	r4, r4, r8
 801ebf2:	2500      	movs	r5, #0
 801ebf4:	e7e0      	b.n	801ebb8 <floor+0x40>
 801ebf6:	2e33      	cmp	r6, #51	; 0x33
 801ebf8:	dd0b      	ble.n	801ec12 <floor+0x9a>
 801ebfa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ebfe:	d104      	bne.n	801ec0a <floor+0x92>
 801ec00:	4602      	mov	r2, r0
 801ec02:	f7e1 fac7 	bl	8000194 <__adddf3>
 801ec06:	4607      	mov	r7, r0
 801ec08:	460b      	mov	r3, r1
 801ec0a:	4638      	mov	r0, r7
 801ec0c:	4619      	mov	r1, r3
 801ec0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ec12:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ec16:	f04f 38ff 	mov.w	r8, #4294967295
 801ec1a:	fa28 f802 	lsr.w	r8, r8, r2
 801ec1e:	ea10 0f08 	tst.w	r0, r8
 801ec22:	d0f2      	beq.n	801ec0a <floor+0x92>
 801ec24:	a310      	add	r3, pc, #64	; (adr r3, 801ec68 <floor+0xf0>)
 801ec26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec2a:	f7e1 fab3 	bl	8000194 <__adddf3>
 801ec2e:	2200      	movs	r2, #0
 801ec30:	2300      	movs	r3, #0
 801ec32:	f7e1 fef5 	bl	8000a20 <__aeabi_dcmpgt>
 801ec36:	2800      	cmp	r0, #0
 801ec38:	d0be      	beq.n	801ebb8 <floor+0x40>
 801ec3a:	2c00      	cmp	r4, #0
 801ec3c:	da0a      	bge.n	801ec54 <floor+0xdc>
 801ec3e:	2e14      	cmp	r6, #20
 801ec40:	d101      	bne.n	801ec46 <floor+0xce>
 801ec42:	3401      	adds	r4, #1
 801ec44:	e006      	b.n	801ec54 <floor+0xdc>
 801ec46:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	40b3      	lsls	r3, r6
 801ec4e:	441d      	add	r5, r3
 801ec50:	42af      	cmp	r7, r5
 801ec52:	d8f6      	bhi.n	801ec42 <floor+0xca>
 801ec54:	ea25 0508 	bic.w	r5, r5, r8
 801ec58:	e7ae      	b.n	801ebb8 <floor+0x40>
 801ec5a:	2500      	movs	r5, #0
 801ec5c:	462c      	mov	r4, r5
 801ec5e:	e7ab      	b.n	801ebb8 <floor+0x40>
 801ec60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ec64:	e7a8      	b.n	801ebb8 <floor+0x40>
 801ec66:	bf00      	nop
 801ec68:	8800759c 	.word	0x8800759c
 801ec6c:	7e37e43c 	.word	0x7e37e43c
 801ec70:	bff00000 	.word	0xbff00000
 801ec74:	000fffff 	.word	0x000fffff

0801ec78 <_init>:
 801ec78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec7a:	bf00      	nop
 801ec7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec7e:	bc08      	pop	{r3}
 801ec80:	469e      	mov	lr, r3
 801ec82:	4770      	bx	lr

0801ec84 <_fini>:
 801ec84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec86:	bf00      	nop
 801ec88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec8a:	bc08      	pop	{r3}
 801ec8c:	469e      	mov	lr, r3
 801ec8e:	4770      	bx	lr
